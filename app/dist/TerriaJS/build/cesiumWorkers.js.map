{"version":3,"sources":["webpack:///webpack/bootstrap 472cb37212a2a6785bf7","webpack:///./node_modules/terriajs-cesium/Source/Core/defined.js","webpack:///./node_modules/terriajs-cesium/Source/Core/defaultValue.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Cartesian3.js","webpack:///./node_modules/terriajs-cesium/Source/Core/DeveloperError.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Math.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Check.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Ellipsoid.js","webpack:///./node_modules/terriajs-cesium/Source/Core/BoundingSphere.js","webpack:///./node_modules/terriajs-cesium/Source/Core/ComponentDatatype.js","webpack:///./node_modules/terriajs-cesium/Source/Core/freezeObject.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Geometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GeometryAttribute.js","webpack:///./node_modules/terriajs-cesium/Source/Core/defineProperties.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Cartesian2.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Cartographic.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PrimitiveType.js","webpack:///./node_modules/terriajs-cesium/Source/Core/IndexDatatype.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GeometryAttributes.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Rectangle.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Matrix3.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Matrix4.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GeometryOffsetAttribute.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/terriajs-cesium/Source/Core/VertexFormat.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createTaskProcessorWorker.js","webpack:///./node_modules/terriajs-cesium/Source/Core/arrayFill.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Quaternion.js","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolygonPipeline.js","webpack:///./node_modules/core-util-is/lib/util.js","webpack:///./node_modules/terriajs-cesium/Source/Core/arrayRemoveDuplicates.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Cartesian4.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GeometryPipeline.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RuntimeError.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/when.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GeographicProjection.js","webpack:///./node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/terriajs-cesium/Source/Core/AttributeCompression.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WindingOrder.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WebGLConstants.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Transforms.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/Uri.js","webpack:///./node_modules/events/events.js","webpack:///./node_modules/stream-http/node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Intersect.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Plane.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GeometryInstance.js","webpack:///./node_modules/terriajs-cesium/Source/Core/OrientedBoundingBox.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CornerType.js","webpack:///./node_modules/terriajs-cesium/Source/Core/IntersectionTests.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WebMercatorProjection.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipsoidTangentPlane.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylinePipeline.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Matrix2.js","webpack:///./node_modules/terriajs-cesium/Source/Core/FeatureDetection.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Resource.js","webpack:///./node_modules/stream-http/node_modules/process-nextick-args/index.js","webpack:///./node_modules/safe-buffer/index.js","webpack:///./node_modules/node-libs-browser/node_modules/string_decoder/lib/string_decoder.js","webpack:///./node_modules/stream-browserify/index.js","webpack:///./node_modules/pako/lib/utils/common.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///./node_modules/terriajs-cesium/Source/Core/AxisAlignedBoundingBox.js","webpack:///./node_modules/terriajs-cesium/Source/Core/BoundingRectangle.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolygonGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Color.js","webpack:///./node_modules/terriajs-cesium/Source/Core/TerrainEncoding.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GeometryType.js","webpack:///./node_modules/terriajs-cesium/Source/Core/JulianDate.js","webpack:///./node_modules/terriajs-cesium/Source/Core/TimeConstants.js","webpack:///./node_modules/terriajs-cesium/Source/Core/TimeStandard.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/terriajs-cesium/Source/Core/getAbsoluteUri.js","webpack:///./node_modules/terriajs-cesium/Source/Core/isArray.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RequestState.js","webpack:///./node_modules/url/url.js","webpack:///./node_modules/process-nextick-args/index.js","webpack:///./node_modules/readable-stream/lib/_stream_writable.js","webpack:///./node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Interval.js","webpack:///./node_modules/terriajs-cesium/Source/Core/QuadraticRealPolynomial.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createBoxGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createBoxOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createCircleGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createCircleOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createCoplanarPolygonGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createCoplanarPolygonOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createCorridorGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createCorridorOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createCylinderGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createCylinderOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createEllipseGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createEllipseOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createEllipsoidGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipsoidGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createEllipsoidOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createFrustumGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createFrustumOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createGroundPolylineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createPlaneGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createPlaneOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createPolygonGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createPolygonOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createPolylineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createPolylineVolumeGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createPolylineVolumeOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createRectangleGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createRectangleOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createSimplePolylineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createSphereGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createSphereOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createWallGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createWallOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipsoidalOccluder.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PrimitivePipeline.js","webpack:///./node_modules/terriajs-cesium/Source/Core/scaleToGeodeticSurface.js","webpack:///./node_modules/terriajs-cesium/Source/Core/binarySearch.js","webpack:///./node_modules/terriajs-cesium/Source/Core/LeapSecond.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EarthOrientationParametersSample.js","webpack:///./node_modules/terriajs-cesium/Source/Core/oneTimeWarning.js","webpack:///./node_modules/terriajs-cesium/Source/Core/isBlobUri.js","webpack:///./node_modules/terriajs-cesium/Source/Core/isDataUri.js","webpack:///./node_modules/stream-http/index.js","webpack:///./node_modules/stream-http/lib/capability.js","webpack:///./node_modules/stream-http/lib/response.js","webpack:///./node_modules/stream-http/node_modules/readable-stream/readable-browser.js","webpack:///./node_modules/stream-http/node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/stream-browser.js","webpack:///./node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/destroy.js","webpack:///./node_modules/stream-http/node_modules/readable-stream/lib/_stream_writable.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/util-deprecate/browser.js","webpack:///./node_modules/stream-http/node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/assert/assert.js","webpack:///./node_modules/util/util.js","webpack:///./node_modules/pako/lib/zlib/adler32.js","webpack:///./node_modules/pako/lib/zlib/crc32.js","webpack:///./node_modules/terriajs-cesium/Source/Core/buildModuleUrl.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Iau2006XysSample.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EncodedCartesian3.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Ray.js","webpack:///./node_modules/terriajs-cesium/Source/Core/BoxGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Queue.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipsoidGeodesic.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipsoidOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/FrustumGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/OrthographicFrustum.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CullingVolume.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PerspectiveFrustum.js","webpack:///./node_modules/terriajs-cesium/Source/Core/ApproximateTerrainHeights.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RectangleGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/bootstrapper/cesiumWorkerBootstrapper.js","webpack:///./node_modules/terriajs-cesium/Source/Workers nonrecursive .*\\.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/combineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/mersenne-twister.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Fullscreen.js","webpack:///(webpack)/buildin/amd-define.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EarthOrientationParameters.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GregorianDate.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/sprintf.js","webpack:///./node_modules/terriajs-cesium/Source/Core/isLeapYear.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/terriajs-cesium/Source/Core/loadAndExecuteScript.js","webpack:///./node_modules/terriajs-cesium/Source/Core/appendForwardSlash.js","webpack:///./node_modules/terriajs-cesium/Source/Core/clone.js","webpack:///./node_modules/terriajs-cesium/Source/Core/combine.js","webpack:///./node_modules/terriajs-cesium/Source/Core/deprecationWarning.js","webpack:///./node_modules/terriajs-cesium/Source/Core/getBaseUri.js","webpack:///./node_modules/terriajs-cesium/Source/Core/getExtensionFromUri.js","webpack:///./node_modules/terriajs-cesium/Source/Core/isCrossOriginUrl.js","webpack:///./node_modules/terriajs-cesium/Source/Core/objectToQuery.js","webpack:///./node_modules/terriajs-cesium/Source/Core/queryToObject.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Request.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RequestType.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RequestErrorEvent.js","webpack:///./node_modules/terriajs-cesium/Source/Core/parseResponseHeaders.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RequestScheduler.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Event.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Heap.js","webpack:///./node_modules/terriajs-cesium/Source/Core/TrustedServers.js","webpack:///./node_modules/node-libs-browser/node_modules/punycode/punycode.js","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/url/util.js","webpack:///./node_modules/querystring-es3/index.js","webpack:///./node_modules/querystring-es3/decode.js","webpack:///./node_modules/querystring-es3/encode.js","webpack:///./node_modules/https-browserify/index.js","webpack:///./node_modules/stream-http/lib/request.js","webpack:///util (ignored)?020f","webpack:///./node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/BufferList.js","webpack:///util (ignored)?8525","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/stream-http/node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/to-arraybuffer/index.js","webpack:///./node_modules/xtend/immutable.js","webpack:///./node_modules/builtin-status-codes/browser.js","webpack:///./node_modules/browserify-zlib/lib/index.js","webpack:///./node_modules/readable-stream/readable.js","webpack:///util (ignored)","webpack:///./node_modules/readable-stream/writable.js","webpack:///./node_modules/readable-stream/duplex.js","webpack:///./node_modules/readable-stream/transform.js","webpack:///./node_modules/readable-stream/passthrough.js","webpack:///./node_modules/browserify-zlib/lib/binding.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/util/node_modules/inherits/inherits_browser.js","webpack:///./node_modules/pako/lib/zlib/zstream.js","webpack:///./node_modules/pako/lib/zlib/deflate.js","webpack:///./node_modules/pako/lib/zlib/trees.js","webpack:///./node_modules/pako/lib/zlib/messages.js","webpack:///./node_modules/pako/lib/zlib/inflate.js","webpack:///./node_modules/pako/lib/zlib/inffast.js","webpack:///./node_modules/pako/lib/zlib/inftrees.js","webpack:///./node_modules/pako/lib/zlib/constants.js","webpack:///./node_modules/terriajs-cesium/Source/Core/HeadingPitchRoll.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Iau2006XysData.js","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS ^\\.\\/IAU2006_XYS_.*\\.json$","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_0.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_1.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_10.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_11.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_12.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_13.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_14.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_15.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_16.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_17.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_18.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_19.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_2.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_20.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_21.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_22.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_23.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_24.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_25.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_26.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_27.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_3.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_4.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_5.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_6.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_7.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_8.json","webpack:///./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_9.json","webpack:///./node_modules/terriajs-cesium/Source/Core/barycentricCoordinates.js","webpack:///./node_modules/terriajs-cesium/Source/Core/QuarticRealPolynomial.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CubicRealPolynomial.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Tipsify.js","webpack:///./node_modules/terriajs-cesium/Source/Core/OffsetGeometryInstanceAttribute.js","webpack:///./node_modules/terriajs-cesium/Source/Core/formatError.js","webpack:///./node_modules/terriajs-cesium/Source/Core/BoxOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CircleGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CircleOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/earcut-2.1.1.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/OrthographicOffCenterFrustum.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PerspectiveOffCenterFrustum.js","webpack:///./node_modules/terriajs-cesium/Source/Core/FrustumOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers nonrecursive create.+Geometry","webpack:///./node_modules/terriajs-cesium/Source/Core/GeographicTilingScheme.js","webpack:///./node_modules/terriajs-cesium/Source/Assets/approximateTerrainHeights.json","webpack:///./node_modules/terriajs-cesium/Source/Core/GroundPolylineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PlaneGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PlaneOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolygonGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolygonOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RectangleGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RectangleOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/SimplePolylineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/SphereGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/SphereOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createVectorTileGeometries.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Vector3DTileBatch.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createVectorTilePoints.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createVectorTilePolygons.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createVectorTilePolylines.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createVerticesFromGoogleEarthEnterpriseBuffer.js","webpack:///./node_modules/terriajs-cesium/Source/Core/TerrainQuantization.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createVerticesFromHeightmap.js","webpack:///./node_modules/terriajs-cesium/Source/Core/HeightmapTessellator.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/createVerticesFromQuantizedTerrainMesh.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/decodeDraco.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/Workers/draco_wasm_wrapper.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/decodeGoogleEarthEnterprisePacket.js","webpack:///./node_modules/terriajs-cesium/Source/Core/decodeGoogleEarthEnterpriseData.js","webpack:///./node_modules/terriajs-cesium/Source/Core/GoogleEarthEnterpriseTileInformation.js","webpack:///./node_modules/terriajs-cesium/Source/Core/isBitSet.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/pako_inflate.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/transcodeCRNToDXT.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CompressedTextureBuffer.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PixelFormat.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/PixelDatatype.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/crunch.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/transferTypedArrayTest.js","webpack:///./node_modules/terriajs-cesium/Source/Workers/upsampleQuantizedTerrainMesh.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Intersections2D.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;kCC7DA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrBD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,+CAA+C;;AAE/C;AACA,CAAC;AAAA;;;;;;;gEClCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,6EAA6E,0BAA0B;AACvG;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;;AAEA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECv8BD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,iBAAiB,oCAAoC;AACrD;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ,8DAA8D;AACvF;AACA;AACA,0EAA0E;AAC1E,yEAAyE;AACzE,2FAA2F;AAC3F,2FAA2F;AAC3F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA,mDAAmD;AACnD,oDAAoD;AACpD;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ,mDAAmD;AAC5E;AACA,mBAAmB,eAAe;AAClC;AACA;AACA,4CAA4C;AAC5C,4CAA4C;AAC5C;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA,8CAA8C;AAC9C,8CAA8C;AAC9C;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,kCAAkC;AAC7C;AACA,eAAe,OAAO;AACtB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5zBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECxLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB;AACA,iBAAiB,UAAU;AAC3B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wCAAwC,6BAA6B;AACrE;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wCAAwC,sBAAsB;AAC9D;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,iBAAiB,uBAAuB;AACxC;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA,eAAe,WAAW;AAC1B;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qEAAqE,wBAAwB;AAC7F;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB;AACA,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,MAAM;AACrB,iBAAiB,UAAU,EAAE,uBAAuB;AACpD,qDAAqD,wBAAwB;AAC7E,uDAAuD,6BAA6B;AACpF;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,4FAA4F;AAC5F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,yFAAyF,+BAA+B;AACxH;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB,iBAAiB,QAAQ,gDAAgD;AACzE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB,UAAU,EAAE,uBAAuB;AACpD,qDAAqD,wBAAwB;AAC7E,uDAAuD,6BAA6B;AACpF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ,gDAAgD;AACzE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1vCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,0EAA0E,uCAAuC;AACjH;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,wBAAwB;AACzC;AACA,eAAe,WAAW;AAC1B,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kEAAkE;AAClE;AACA,eAAe,kBAAkB;AACjC,iBAAiB,QAAQ,uEAAuE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,aAAa;AAC5B,iBAAiB,6FAA6F;AAC9G;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,6FAA6F;AAC9G;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,kBAAkB;AACnC;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpTD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECvBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,iBAAiB;AACjE,6BAA6B,gBAAgB;AAC7C;AACA;AACA,uEAAuE,uBAAuB;AAC9F;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,mBAAmB;AAClC,eAAe,cAAc;AAC7B,eAAe,wBAAwB;AACvC,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;;;AAIA;AACA;AACA,YAAY,wBAAwB;AACpC;AACA;AACA;AACA;AACA;AACA,iEAAiE,mBAAmB;AACpF;AACA,yIAAyI,4BAA4B;AACrK,oJAAoJ,0BAA0B;AAC9K,sHAAsH,sBAAsB;AAC5I,gLAAgL,6BAA6B;AAC7M,4KAA4K,2BAA2B;AACvM;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB,KAAK,uBAAuB;AAC3E;AACA;AACA,wGAAwG,uCAAuC;AAC/I,sGAAsG,uCAAuC;AAC7I,2HAA2H,uCAAuC;AAClK,yHAAyH,uCAAuC;AAChK,6EAA6E,6BAA6B;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,6BAA6B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wEAAwE,8BAA8B;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D,sCAAsC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC/HD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS;AAC3D,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,6EAA6E,0BAA0B;AACvG;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzpBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC3QD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,yFAAyF;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,8DAA8D,oBAAoB;AAClF;AACA,eAAe,cAAc;AAC7B,iBAAiB,QAAQ,mEAAmE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,wBAAwB;AACzC;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrID;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,wBAAwB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC7FD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,QAAQ,+CAA+C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mCAAmC;AAC5D;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,oBAAoB;AACrC;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kEAAkE,6BAA6B;AAC/F;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,oBAAoB;AACrC;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,gCAAgC;AACxC;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrzBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,4FAA4F;AAC5F,oFAAoF;AACpF,sFAAsF;AACtF;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC/2CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0CAA0C,+BAA+B;AACzE;AACA,eAAe,yBAAyB;AACxC,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,kBAAkB,QAAQ;AAC1B;AACA,oBAAoB,eAAe;AACnC,oBAAoB,eAAe;AACnC,oBAAoB,eAAe;AACnC,oBAAoB,eAAe;AACnC;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,gBAAgB,QAAQ;AACxB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO,aAAa,8CAA8C;AACjF,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY,YAAY;AAC7C;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY,YAAY;AAC7C;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mFAAmF;AACnF;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,iBAAiB;AACxE,2EAA2E;AAC3E;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C,iBAAiB,kCAAkC;AAClG,eAAe,iBAAiB;AAChC;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C,iBAAiB,iCAAiC;AACjG,eAAe,iBAAiB,sDAAsD,iBAAiB,eAAe,iBAAiB;AACvI;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,kBAAkB,QAAQ;AAC1B;AACA,oBAAoB,aAAa;AACjqBAAqB,sBAAsB;AAC3C;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC74ED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACjBD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;gECvLtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,oEAAoE,iCAAiC;AACrG;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,gCAAgC,yBAAyB,OAAO;AAChE;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,gCAAgC,iCAAiC;AACjE;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACzSD;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;gECpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yCAAyC;AACxD;AACA,iBAAiB,sDAAsD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;;AAEA;AACA,CAAC;AAAA;;;;;;;gECvID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC7CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA,4DAA4D,SAAS;AACrE;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAiE,yCAAyC;AAC1G;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,uBAAuB;AAClE;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,QAAQ;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;AC56BD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjuDAAuD,OAAO;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC5vDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;gECtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;;AAEA,0CAA0C,aAAa;AACvD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,aAAa;AAC9B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,aAAa,wBAAwB,iBAAiB;AACrE,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,4BAA4B,YAAY;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACtQD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;gEC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC/FD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,6EAA6E,0BAA0B;AACvG;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1zBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,WAAW;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,WAAW;AACvC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gCAAgC,iCAAiC;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA,4BAA4B,qBAAqB;AACjD,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,qBAAqB;AAC7C;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mDAAmD,uBAAuB;AAC1E;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,YAAY;AAC3C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,YAAY;AACvC;AACA;;AAEA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;;AAEA,2BAA2B,sBAAsB;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,uCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA,eAAe,mBAAmB,2BAA2B,uBAAuB;AACpF,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe,iCAAiC,8BAA8B;AACjG;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe,iCAAiC,8BAA8B;AACjG;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,iBAAiB;AACrC;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,kBAAkB;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,iCAAiC;AACpD;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,mBAAmB;AAClD;AACA;AACA;;AAEA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC34ED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACtED;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB;AACxB,0BAA0B;AAC1B,yBAAyB;;AAEzB,uBAAuB;;AAEvB,sBAAsB;AACtB,sBAAsB;AACtB,yBAAyB;;AAEzB,sBAAsB;AACtB,uBAAuB;;AAEvB,wBAAwB;;AAExB,4BAA4B;;AAE5B;AACA;AACA;AACA,YAAY,EAAE;AACd,YAAY,UAAU;AACtB;AACA;AACA,YAAY,UAAU;AACtB;AACA,YAAY,UAAU;AACtB;AACA,cAAc,QAAQ,QAAQ,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,cAAc;AACjE,sEAAsE;AACtE;AACA;AACA,YAAY,EAAE;AACd,sFAAsF;AACtF,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,yBAAyB,EAAE;AAClD,uBAAuB,yBAAyB,EAAE;AAClD,uBAAuB,2BAA2B;AAClD;;AAEA;;AAEA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,EAAE,oDAAoD;AAClE,cAAc,QAAQ,WAAW;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,eAAe;AACf;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,UAAU;AACvB,eAAe;AACf;AACA;AACA;AACA,GAAG;;AAEH;AACA,oCAAoC,cAAc,EAAE;AACpD,cAAc,EAAE;AAChB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;;AAEH;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,EAAE;AACd,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA,YAAY,EAAE;AACd,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA,qCAAqC,cAAc,MAAM,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;;AAEnD;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,EAAE;AACd,cAAc,QAAQ,8BAA8B;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA,oBAAoB,OAAO;AAC3B,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,aAAa,cAAc;AAC3B,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,aAAa,cAAc;AAC3B,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,cAAc;AACpC,yBAAyB;AACzB;AACA,YAAY,cAAc;AAC1B,aAAa,cAAc;AAC3B,YAAY,SAAS;AACrB,mBAAmB,cAAc;AACjC,cAAc,QAAQ,IAAI,cAAc;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA,cAAc,SAAS;AACvB;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA,YAAY,SAAS;AACrB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY,EAAE;AACd,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,EAAE;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,MAAM;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,QAAQ,QAAQ;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;AACD,CAAC,0BAKD;AACA;AACA;;;;;;;gEC3uBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,WAAW;AAC1B;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,iBAAiB,6BAA6B;AACpF;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;ACjHD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA,C;;;;;;gEC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,YAAY;AAC3B,eAAe,YAAY;AAC3B;AACA,aAAa;AACb;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA,uBAAuB,WAAW;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClVD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECxCD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,kEAAkE;AACrG;AACA,sDAAsD;AACtD,uBAAuB;AACvgECvmBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,yCAAyC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,mBAAmB,UAAU;AAC7B,mBAAmB,QAAQ;AAC3B,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,iBAAiB;AAChC,eAAe,UAAU;AACzB,eAAe,kCAAkC;AACjD;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,iBAAiB;AAChC,eAAe,UAAU;AACzB,eAAe,kCAAkC;AACjD;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB,eAAe,kCAAkC;AACjD;AACA,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,kEAAkE;;AAElE;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;AC11BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,GAAG,gBAAgB;AACncAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;AClRD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC7SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA,E;;;;;;gEClIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB;AACA;AACA,sCAAsC;AACtC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,kCAAkC;AAClC;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,8BAA8B;AAC9B;AACA,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,QAAQ;AACvB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC/OD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,eAAe;AACtD,oEAAoE,kBAAkB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,eAAe,OAAO,gFAAgF,iBAAiB,0CAA0C,8CAA8C;AAC/M,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,yCAAyC;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,qCAAqC,KAAK,oCAAoC;AACvH,YAAY,eAAe,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA,6DAA6D;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC3HD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2HAA2H,qBAAqB,KAAK,6BAA6B;AAClL;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa,sBAAsB,iBAAiB;AACnE,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gBAAgB,uBAAuB,gBAAgB;AAC7G;AACA;AACA,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,MAAM;AACrB,iBAAiB,UAAU,EAAE,uBAAuB;AACpD,qDAAqD,wBAAwB;AAC7E,uDAAuD,6BAA6B;AACpF;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,SAAS;AACxB,iBAAiB,QAAQ,6CAA6C;AACtE;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB,UAAU,EAAE,uBAAuB;AACpD,qDAAqD,wBAAwB;AAC7E,uDAAuD,6BAA6B;AACpF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ,gDAAgD;AACzE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,oBAAoB;AACnC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9tBD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,iFAAiF;AACjF;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,iFAAiF;AACjF;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB,sDAAsD;AACtD;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB;AACA,iBAAiB,OAAO;AACxB;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB,sDAAsD;AACtD;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,UAAU;AACzB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kCAAkC;AAClC;AACA,sCAAsC;;AAEtC;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,UAAU;AACzB,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,YAAY;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtzBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,kEAAkE,iBAAiB;AACnF;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,WAAW;AAC1B;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B;AACA,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1JD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yGAAyG,sCAAsC;AAC/I;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5UD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,eAAe;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,eAAe,uDAAuD;AACvF;AACA,eAAe,aAAa;AAC5B,eAAe,QAAQ;AACvB;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,YAAY;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa,sCAAsC,WAAW;AAC7E,eAAe,gBAAgB;AAC/B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,iBAAiB,SAAS,mCAAmC,OAAO;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,eAAe;AAClC;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mGAAmG,WAAW;AAC9G,eAAe,OAAO;AACtB,eAAe,aAAa,sCAAsC,WAAW;AAC7E,eAAe,gBAAgB;AAC/B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5TD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpxBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,GAAG,QAAQ,GAAG;AACpD;AACA;AACA;AACA;AACA,aAAa;AACb,+CAA+C,GAAG,QAAQ,GAAG;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;8GC/RD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA,sEAAsE;AACtE,wEAAwE;;AAExE;AACA;AACA;AACA,kBAAkB;AAClB;AACA,uDAAuD;;AAEvD;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA,qCAAqC,aAAa;AAClD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC,qBAAqB;AAC7D;;AAEA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,YAAY;AACvB;AACA,eAAe,QAAQ;AACvB,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB;AACrB,aAAa;AACb;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,KAAK,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA,2CAA2C,KAAK,MAAM;AACtD;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB;AACrB,aAAa;AACb;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB;AACrB,aAAa;AACb;;AAEA,qCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA,0CAA0C;AAC1C;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA,0CAA0C;AAC1C;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA,0CAA0C;AAC1C;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA,0CAA0C;AAC1C;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO,yFAAyF,EAAE;AACjH,eAAe,OAAO,oBAAoB;AAC1C,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,MAAM;AACrB,iBAAiB,yBAAyB;AAC1C;;AAEA;AACA,CAAC;AAAA;;;;;;;;;+CC3/DD;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;AC1CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,sCAAsC,sCAAsC;AACzG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;ACvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;;;;;;AC9HA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,UAAU;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,4BAA4B,YAAY;AACxC,qBAAqB,8BAA8B;AACnD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACxGA;AACA;;;;;;;;gECDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW,gCAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,uBAAuB;AACtC,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,uBAAuB;AACtC,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,uBAAuB;AACtC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,MAAM;AACrB,iBAAiB,UAAU,EAAE,uBAAuB;AACpD,qDAAqD,wBAAwB;AAC7E,uDAAuD,6BAA6B;AACpF;AACA;AACA;;;AAGA;AACA,qFAAqF;AACrF;AACA;AACA,oEAAoE;;AAEpE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB,UAAU,EAAE,uBAAuB;AACpD,qDAAqD,wBAAwB;AAC7E,uDAAuD,6BAA6B;AACpF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC/ND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,kBAAkB;AACjC,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,WAAW;AAC1B,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,kBAAkB;AACjC,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,kBAAkB;AACjC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,qBAAqB;AAC5C;AACA;;AAEA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,YAAY;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,sBAAsB;AACjD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,sBAAsB;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1iBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,qCAAqC;AAClD;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,EAAE,WAAW,EAAE,WAAW,EAAE;AACjE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,QAAQ,2CAA2C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB,QAAQ,2CAA2C;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,iBAAiB,QAAQ,wEAAwE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,iBAAiB,MAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC/kED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ,6FAA6F;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrYD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECjkCAAkC,EAAE;AACpC;AACA,mCAAmC,EAAE,MAAM,EAAE;AAC7C;AACA,iCAAiC,EAAE,OAAO,EAAE;AAC5C;AACA,8BAA8B,EAAE,QAAQ,EAAE,OAAO,EAAE;AACnD;AACA,kCAAkC,EAAE,OAAO,EAAE,OAAO,EAAE;AACtD;AACA,kCAAkC,EAAE,QAAQ,EAAE;AAC9C;AACA,2BAA2B,EAAE;AAC7B;AACA,kCAAkC,EAAE,OAAO,EAAE;AAC7C;AACA,yCAAyC,EAAE,OAAO,EAAE,OAAO,EAAE;;AAE7D;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,uBAAuB;AAC/B;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,qDAAqD;AACnG;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2EAA2E;AAC3E;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kBAAkB,oBAAoB;AACtC;AACA,eAAe,WAAW;AAC1B,eAAe,cAAc;AAC7B,iBAAiB,cAAc;AAC/B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD,iCAAiC;AACxF;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,KAAK;AACtB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ,0CAA0C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,QAAQ,0FAA0F;AACnH;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,QAAQ,0CAA0C;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,QAAQ,0FAA0F;AACnH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC56BD;AACA;AACA;AACA;AACA;;AAEA;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1FD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACrCD,iBAAiB;;AAEjB;AACA;AACA;;;;;;;gECJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECjDD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrBD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;AC9DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAK;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,2CAA2C,KAAK;AAChD,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;+CC3tBA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;AC1CA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa;AAChB;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kDAAkD;;AAElD;;AAEA,2CAA2C;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;;AAEA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,C;;;;;;;;ACngBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK,EAAE;AACP,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,C;;;;;;gECnLA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9BD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA,aAAa,0FAA0F;AACvG;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrHD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,eAAe;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC3ZD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1aD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA,QAAQ,0EAA0E;AAClF;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,WAAW;AAC1B,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,QAAQ,8CAA8C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,+CAA+C;AACnF;AACA,eAAe,WAAW;AAC1B,iBAAiB,QAAQ,8CAA8C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,oDAAoD;AAC5D;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,oDAAoD;AAC5D;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8CAA8C,SAAS;AACvD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,oDAAoD;AAC5D;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClSD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT,yDAAyD;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,YAAY;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,sBAAsB;AACvD;AACA;AACA,uCAAuC,kCAAkC;AACzE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnuBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzHD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,EAAE;AACjB,eAAe,wBAAwB;AACvC;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;kCCrED;AACA;;AAEA;AACA,oEAAoE,iBAAiB;AACrF;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;kCC5BD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnDD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ,iCAAiC;AAC1D;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzBD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ,iCAAiC;AAC1D;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACzBD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACpFA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACxEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,aAAa;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,wCAAwC,eAAe,IAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AC/NA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yEAAyE,6EAA6E;AACtJ;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD,0FAA0F;;AAE3I;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,kGAAkG;AAClG,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,4FAA4F;AAC5F,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gDAAgD;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;;AAEpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,4EAA4E;;AAE5E;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD;AACnD;AACA,mDAAmD,iEAAiE;AACpH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,uCAAuC;AACvC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA,C;;;;;;;AC1/BA;;;;;;;;ACAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,E;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD,0FAA0F;;AAE3I;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;;AAEjC;;AAEA,2CAA2C;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,E;;;;;;;AC9qBA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7DA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,C;;;;;;;+CCrNA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa;AAChB;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,4EAA4E;AAC5E;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,0EAA0E;;AAEhJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,UAAU;AAC9B;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,4EAA4E;;AAE5E;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,wCAAwC;AACvE;AACA,wCAAwC,0CAA0C;AAClF;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B;;AAE/B;AACA,sCAAsC,gBAAgB;AACtD;AACA;;AAEA,iDAAiD;;AAEjD,uDAAuD;;AAEvD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA,C;;;;;;;;AC/2BA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,E;;;;;;;8CCzBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B;AAC9B;AACA,mDAAmD;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,gDAAgD;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,oBAAoB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,uBAAuB,SAAS;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,KAAK;;AAEjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;AAGA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACzkBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;;AAGA;;;;;;;;AClDA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;;AAEA,sBAAsB;AACtB;;;AAGA;;;;;;;AC1DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;;;AAIA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;kCCnID;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,iBAAiB,gDAAgD;AACrG;AACA;AACA;AACA,wBAAwB,wGAAwG;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wGAAwG;AACjJ;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,iBAAiB,+CAA+C;AAClF;AACA;AACA,yCAAyC,wGAAwG;AACjJ;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,IAAI;AACnB,iBAAiB,IAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B,iBAAiB;AACjB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B,iBAAiB,YAAY;AAC7B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,iBAAiB,mBAAmB;AACpiBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC11BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,qBAAqB;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;;AAEA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gGAAgG,gBAAgB,MAAM,sBAAsB;AAC5I;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,gBAAgB;AAC/B,iBAAiB,gBAAgB;AACjC;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;AAAA;;;;;;;gECxjCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnmBAAmB,gBAAgB;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,OAAO;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC/QD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,uBAAuB;AACtC,iBAAiB,uBAAuB;AACxC;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClXD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpHD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB,OAAO;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECxTD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;;AAGA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;;AAGA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1YD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9aD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC,iBAAiB,yBAAyB;AAC1C;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;;AAEA,uBAAuB,yBAAyB;AAChD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,wCAAwC;AAC1E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChTD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,uCAAuC;AACtD,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,gBAAgB;AAC/B;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,uBAAuB,OAAO;AAC9B,2BAA2B,OAAO;AAClC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA,sFAAsF;AACtF;AACA,8FAA8F;AAC9F;AACA,sGAAsG;AACtG;AACA,8EAA8E;AAC9E;AACA,sFAAsF;;AAEtF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5eD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW,qDAAqD,iBAAiB;AAClG;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC3RD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,cAAc;AAC7B,iBAAiB,cAAc;AAC/B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,uBAAuB,YAAY;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,mDAAmD;AACvF;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,oCAAoC,6DAA6D;AACjG;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,oCAAoC,6DAA6D;AACjG;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECxMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,mBAAmB;AAClC,iBAAiB,mBAAmB;AACpC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW,qDAAqD,iBAAiB;AAClG;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqH;AACrH,6IAA6I;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrXD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB;AACjB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,gBAAgB,eAAe;AAC/B;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,2CAA2C;AAC5D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;AAAA;;;;;;;gEC1ND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5ND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C;AAC7C;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,gBAAgB;AACvC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,gBAAgB;AACvC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;ACvMD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wB;;;;;;gEC9DA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACfD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uCAAuC,IAAI;;AAE3C;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B,+BAA+B;;AAE/B,8BAA8B;AAC9B,oBAAoB;;AAEpB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,UAAU,GAAG;AACb;AACA;AACA,0BAA0B;AAC1B,wBAAwB;AACxB,UAAU;AACV,sBAAsB,gCAAgC,KAAK;AAC3D;AACA;AACA,oBAAoB,GAAG;AACvB;AACA;AACA,YAAY;AACZ,wBAAwB;AACxB;AACA,sBAAsB,gCAAgC,KAAK;AAC3D;AACA;AACA,4BAA4B,aAAa;AACzC;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;;AAEA;AACA,8BAA8B;;AAE9B,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA,UAAU,YAAY;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1MD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,sDAAsD,4BAA4B;AAClF;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,sBAAsB;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;AC7PD;AACA;AACA;;;;;;;gECFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,QAAQ;AACvB,kEAAkE;AAClE,4CAA4C,6BAA6B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wBAAwB;AAChF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,kBAAkB,iCAAiC;AACnD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,iCAAiC;AAChD;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;kCC/XD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACvDD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9TD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA,8CAA8C;AAC9C;AACA;;;AAGA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;ACxBD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACtJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,QAAQ,WAAW;;AAEnB;AACA;AACA,QAAQ,UAAU;;AAElB;AACA;;;;;;;gECnFA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;kCC/BD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECdD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrCD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECxDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzCD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;;AAExB;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC7DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,2CAA2C,SAAS;AACpD;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,wBAAwB;AACvC,eAAe,uBAAuB;AACtC,eAAe,yBAAyB;AACxC,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,YAAY;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;;AAEA;AACA,CAAC;AAAA;;;;;;;gECxMD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9CD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,iBAAiB,kBAAkB;AACnC;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChcD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,iBAAiB,QAAQ,+CAA+C;AACxE;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECvKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,wBAAwB;AACvC;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,iBAAiB,OAAO;AACxB;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;sDCtID;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,SAAS;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,KAAK;AACL,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mCAAmC;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB,yCAAyC,qBAAqB;;AAE9D;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;;AAEtD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc,iBAAiB;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAEA;AACA;AACA;AACA;AACA,GAAG;AAAA;AACH,EAAE;AACF;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA,CAAC;;;;;;;;ACphBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;ACrBA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;ACfA;;AAEA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpFA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9BA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,2CAA2C;AAC3C,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtUA,e;;;;;;;ACAA;;AAEA,iDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB,gDAAgD;AAChD;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA,C;;;;;;AC9EA,e;;;;;;ACAA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,sBAAsB,EAAE;AAClE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;ACzLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,E;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;;;;;;AC1BA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;+CC/DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2B;;;;;;;AChmBA;AACA;AACA,mCAAkC;AAClC,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA,e;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;uDCAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oB;;;;;;;ACxZA;AACA;AACA;AACA;AACA;AACA,C;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;;AAE1B,mBAAmB;;AAEnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,sBAAsB,qBAAqB,cAAc,EAAE;;;AAG/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B,kBAAkB,UAAU;;AAE5B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,wBAAwB;AACxB,YAAY;AACZ,UAAU;AACV,+BAA+B;AAC/B,gCAAgC;AAChC;AACA;;AAEA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0BAA0B;;AAE3D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;;AAEb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;;AAEnE;AACA,yDAAyD;AACzD;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;;AAEb;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO,EAAE;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,mBAAmB;;AAEnB;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO,EAAE;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oEAAoE;AACpE;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,mBAAmB;AACnB,kBAAkB;AAClB,0BAA0B;AAC1B,4BAA4B;AAC5B,uBAAuB;AACvB,mBAAmB;AACnB,gBAAgB;AAChB,qBAAqB;AACrB,mBAAmB;AACnB,2BAA2B;AAC3B,uBAAuB;;AAEvB,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;;AAEnB,iBAAiB;AACjB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB,sBAAsB;AACtB,2BAA2B;AAC3B,oBAAoB;AACpB,uBAAuB;AACvB,qBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB,oBAAoB;;AAEpB;AACA;;AAEA,sBAAsB;;AAEtB;;AAEA;;AAEA,2CAA2C;AAC3C,6CAA6C;AAC7C,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;;AAEvB;AACA;AACA;;AAEA,0BAA0B;AAC1B,+CAA+C;AAC/C;;AAEA,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB,sBAAsB;AACtB,mBAAmB;AACnB,kBAAkB;;;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,6BAA6B,uBAAuB;AACpD,8BAA8B,uBAAuB;AACrD;AACA;AACA;;;AAGA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;;AAErB,sCAAsC;;AAEtC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;;AAEA;AACA;;AAEA,uBAAuB;AACvB,qBAAqB;AACrB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,8BAA8B;;AAE9B,2BAA2B,aAAa;AACxC,oBAAoB,qBAAqB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD;AACpD;AACA;;AAEA,aAAa;;AAEb;AACA;AACA,qBAAqB;AACrB,yBAAyB;AACzB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACj1DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA;;;AAGA,oBAAoB,sBAAsB,qBAAqB,cAAc,EAAE;;AAE/E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA,kCAAkC;AAClC,iCAAiC;AACjC,iCAAiC;AACjC,4BAA4B;AAC5B,iCAAiC;;AAEjC;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA,2BAA2B;AAC3B,oBAAoB;AACpB,6BAA6B;AAC7B;;;;AAIA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,WAAW;AACX,WAAW;AACX,YAAY;AACZ,QAAQ;AACR,mBAAmB;;AAEnB,gBAAgB,kBAAkB;AAClC;AACA;;AAEA;AACA;AACA;AACA,+CAA+C;;AAE/C,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,UAAU,EAAE;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;;AAE/B;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C,uBAAuB;AACvB,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB;AACnB,qBAAqB;AACrB;AACA,0CAA0C;AAC1C,eAAe;AACf,WAAW;AACX,QAAQ;;AAER;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,gBAAgB;AAC7B;AACA,oBAAoB,UAAU;AAC9B;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,QAAQ;AACR,WAAW;AACX,aAAa;AACb,WAAW;AACX,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA,aAAa;AACb,QAAQ,gBAAgB;AACxB;AACA,eAAe,oCAAoC;AACnD;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,kBAAkB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA,aAAa,aAAa,QAAQ,iCAAiC;AACnE,aAAa,aAAa,QAAQ,iCAAiC;AACnE,aAAa,cAAc,OAAO,+BAA+B;;AAEjE;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,eAAe;AACf,kBAAkB;AAClB;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,YAAY;AACZ;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,OAAO;;AAEtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA,WAAW;AACX,SAAS;AACT,aAAa;AACb,WAAW;AACX,YAAY;;AAEZ;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA,OAAO;AACP;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,kCAAkC;AAClC;AACA,eAAe;AACf;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA,oCAAoC;AACpC;AACA,OAAO;;AAEP;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,oBAAoB;AACpB,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,QAAQ,OAAO,wBAAwB;;AAE9E;AACA;AACA;AACA,eAAe;AACf;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;;AAEA,8BAA8B;;AAE9B,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB;AACnB;AACA,QAAQ;AACR,mBAAmB;AACnB,aAAa;;AAEb,wCAAwC;;AAExC,gBAAgB;AAChB,oBAAoB;AACpB,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA,gDAAgD;;AAEhD,aAAa,eAAe;AAC5B;AACA;;AAEA;AACA;;AAEA,KAAK;AACL;;AAEA,KAAK;;AAEL,+BAA+B,kCAAkC;AACjE;;AAEA,KAAK;AACL;;AAEA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB;AACnB;AACA,QAAQ;AACR,mBAAmB;AACnB,aAAa;;AAEb,wCAAwC;;AAExC,gBAAgB;AAChB,oBAAoB;AACpB,oBAAoB;;AAEpB,+BAA+B;AAC/B;AACA;AACA;AACA;;AAEA,aAAa,eAAe;AAC5B;AACA;;AAEA;AACA;;AAEA,KAAK;AACL,UAAU,iCAAiC,EAAE;;AAE7C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,gCAAgC;AAChC,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;;AAEA,wCAAwC;AACxC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,IAAI,MAAM,GAAG,MAAM,GAAG;AAChD;AACA;AACA;AACA,SAAS,IAAI,KAAK,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,IAAI,MAAM,IAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iBAAiB;AACjB,WAAW;AACX;AACA,wDAAwD;AACxD,uCAAuC;AACvC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iBAAiB;AACjB,WAAW;AACX;AACA,4BAA4B;AAC5B,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,wBAAwB;;AAE1D,GAAG;AACH;AACA,4CAA4C;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACnsCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AAGA,gBAAgB;AAChB,iBAAiB;AACjB,gBAAgB;AAChB,cAAc;AACd,iBAAiB;AACjB,iBAAiB;AACjB,gBAAgB;AAChB,mBAAmB;AACnB,gBAAgB;AAChB,mBAAmB;AACnB,iBAAiB;AACjB,qBAAqB;AACrB,uBAAuB;AACvB,uBAAuB;AACvB,sBAAsB;AACtB,qBAAqB;AACrB,sBAAsB;AACtB,wBAAwB;AACxB,yBAAyB;AACzB,yBAAyB;AACzB,wBAAwB;AACxB,2BAA2B;AAC3B,yBAAyB;AACzB,4BAA4B;AAC5B,0BAA0B;AAC1B,wBAAwB;AACxB,kBAAkB;AAClB,mBAAmB;AACnB,iBAAiB;AACjB,gBAAgB;AAChB,gBAAgB;AAChB,iBAAiB;;AAEjB;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,gBAAgB;AAChB,oBAAoB;AACpB,gBAAgB;AAChB,wBAAwB;AACxB,iBAAiB;AACjB,gBAAgB;AAChB,iBAAiB;AACjB,iBAAiB;AACjB;AACA,mBAAmB;;AAEnB;AACA,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB;AACjB,qBAAqB;;AAErB;AACA,gBAAgB;AAChB,gBAAgB;;AAEhB;AACA,kBAAkB;AAClB,kBAAkB;;AAElB;AACA,iBAAiB;;AAEjB;AACA,sBAAsB;AACtB,uBAAuB;AACvB,mBAAmB;AACnB,oBAAoB;;AAEpB;AACA,iBAAiB;AACjB,gBAAgB;AAChB,iBAAiB;AACjB,gBAAgB;AAChB,mBAAmB;;AAEnB,mCAAmC;AACnC,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA,yCAAyC;AACzC,qBAAqB;AACrB,sBAAsB;AACtB,gBAAgB;AAChB,gBAAgB;AAChB,eAAe;AACf;;AAEA;AACA;;AAEA,6BAA6B,uBAAuB;AACpD;AACA;AACA,gBAAgB;AAChB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,uBAAuB;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc,uBAAuB;AACrC,sBAAsB;;AAEtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;;AAEpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,uBAAuB;AAC9C,uBAAuB,uBAAuB;AAC9C,uBAAuB,uBAAuB;AAC9C,uBAAuB,uBAAuB;;AAE9C,uEAAuE,UAAU;;AAEjF;AACA;AACA,sBAAsB,uBAAuB;;AAE7C,uEAAuE,UAAU;;AAEjF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB,WAAW;AACX,UAAU;AACV,iBAAiB;AACjB,WAAW;AACX,WAAW;AACX,gBAAgB;AAChB,WAAW;AACX,WAAW;AACX;AACA,eAAe;AACf,mCAAmC;AACnC,aAAa;AACb,mCAAmC;AACnC,UAAU;AACV,UAAU;AACV,+BAA+B;AAC/B;;AAEA,QAAQ;;AAER;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,qBAAqB,EAAE;;;AAGnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iBAAiB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC,4BAA4B,aAAa;AACzC,2BAA2B,iBAAiB;AAC5C,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,oEAAoE;AACpE;AACA;AACA;;AAEA,sCAAsC,OAAO;AAC7C;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,OAAO;;AAExC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,kEAAkE;AAClE;AACA;AACA;;AAEA,kCAAkC,OAAO;AACzC;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,OAAO;AACzD;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,oEAAoE;AACpE;AACA;AACA;;AAEA,oCAAoC,OAAO;AAC3C;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,OAAO;AACzD;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,qBAAqB;AACzD;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT,iCAAiC,kBAAkB;AACnD;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,uBAAuB;AACpD;AACA,+BAA+B,uBAAuB;;AAEtD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6DAA6D,uBAAuB;AACpF;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnhDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW;AACX,WAAW;AACX,UAAU;AACV,UAAU;AACV;AACA,WAAW;AACX;AACA,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ;AACA,eAAe;AACf,WAAW;AACX,WAAW;AACX,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,WAAW;AACX,SAAS;AACT;AACA,UAAU;AACV,WAAW;AACX,WAAW;AACX;;;AAGA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,gCAAgC;AAChC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mBAAmB;AACnB,qCAAqC;AACrC;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mBAAmB;AACnB;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uCAAuC;AACvC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mBAAmB;AACnB,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,kBAAkB;AAClB;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;AACZ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxVA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB,cAAc;AACd,cAAc;AACd,uBAAuB;AACvB,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,WAAW;AACX,WAAW;AACX,UAAU;AACV,WAAW;AACX,WAAW;AACX,kBAAkB;AAClB;AACA,iBAAiB;AACjB,UAAU;AACV,2CAA2C,eAAe;AAC1D,0CAA0C,eAAe;AACzD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA,eAAe,aAAa;AAC5B;AACA;;AAEA;AACA;AACA,qBAAqB,UAAU;AAC/B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,kBAAkB;AAClB,sCAAsC,2BAA2B;AACjE,uCAAuC;AACvC,wCAAwC;AACxC;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,eAAe,WAAW;AAC1B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;;AAEA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,GAAG,OAAO;AACV;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX,UAAU;AACV,YAAY;AACZ,qBAAqB;AACrB,cAAc;AACd,WAAW;AACX,WAAW;AACX,mBAAmB;AACnB,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACtVA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;gECnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9KD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,gBAAgB,8DAA8D,EAAE;AAC/F,yBAAyB,EAAE;AAC3B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,wBAAwB,YAAY;AACpC;AACA;;AAEA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iCAAiC,gBAAgB;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,iBAAiB;AAChC;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,aAAa;AAChC;AACA;;AAEA,mBAAmB,aAAa;AAChC;;AAEA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qDAAqD,SAAS;AAC9D;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;AC7QD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wB;;;;;;AC5CA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;ACAA,iF;;;;;;gECAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,sBAAsB;AACrC,eAAe,sBAAsB;AACrC,eAAe,sBAAsB;AACrC,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1GD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrSD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA,gDAAgD,8DAA8D;AAC9G;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;;AAEA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA,sDAAsD,8DAA8D;AACpH;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oDAAoD;AACpD,sDAAsD;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChRD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,4CAA4C;AACxD;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,8DAA8D,4CAA4C;AAC1G;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,sBAAsB,sCAAsC,kDAAkD,+BAA+B;AAC7I;AACA,eAAe,WAAW;AAC1B,iBAAiB,gCAAgC,UAAU,sCAAsC;AACjG;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpID;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB;AACjB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,mBAAmB;AAClC,iBAAiB,mBAAmB;AACpC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5SD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8FAA8F,gBAAgB,MAAM,sBAAsB;AAC1I;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;AAAA;;;;;;;gECnMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,sBAAsB;AACrC,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;AC7ID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,wBAAwB;AACvC,iBAAiB,wBAAwB;AACzC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC9bD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,0EAA0E;AAC1E;AACA;AACA;;AAEA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,SAAS;AAChC,KAAK;AACL,2BAA2B,YAAY;AACvC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC;;AAEzC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yCAAyC;;AAEzC,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,iCAAiC,+BAA+B;;AAEhE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,kDAAkD;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,yCAAyC;AAC3D;;AAEA,mBAAmB,iBAAiB;AACpC,uBAAuB,oBAAoB;AAC3C,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACroBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB;AACjB;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,+BAA+B;AAC9C,iBAAiB,+BAA+B;AAChD;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,uBAAuB,qBAAqB;AAC5C;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,gCAAgC;AAChC;AACA;AACA;AACA,uBAAuB;AACvB;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2BAA2B,OAAO;AAC1E;AACA;AACA;AACA;AACA,2BAA2B,wCAAwC,OAAO;AAC1E;AACA;AACA;AACA,2CAA2C,gBAAgB,OAAO;AAClE;AACA;AACA;AACA;AACA,oCAAoC,OAAO,OAAO;AAClD;AACA;AACA;AACA;AACA,uDAAuD,OAAO,OAAO;AACrE;AACA;AACA;AACA,2BAA2B,oBAAoB,OAAO;AACtD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB,OAAO;AAClD;AACA;AACA;AACA,mCAAmC,OAAO,OAAO;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC,2BAA2B,eAAe,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,8CAA8C;AAC9C,yDAAyD;AACzD;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,mCAAmC;AACnC;;AAEA,4BAA4B,OAAO;AACnC;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,mDAAmD;AACnD,oFAAoF;AACpF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,0EAA0E;AAC1E,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,aAAa,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iFAAiF,gBAAgB,MAAM,sBAAsB;AAC7H;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;;;AAGA;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;AAAA;;;;;;;gECtlCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,gCAAgC;AAChC;AACA;AACA;AACA,uBAAuB;AACvB;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C;AAC9C;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa,UAAU;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,wBAAwB,OAAO;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,wBAAwB;AACvC,iBAAiB,wBAAwB;AACzC;AACA;;;AAGA;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;;ACjiBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,wBAAwB;AACvC,iBAAiB,wBAAwB;AACzC;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5PD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW,qDAAqD,iBAAiB;AAClG;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECnWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,iBAAiB,WAAW,qDAAqD,iBAAiB;AAClG;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqH;AACrH,6IAA6I;AAC7I;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC1ZD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,uCAAuC;AACtD,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,uBAAuB;AACtC;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClPD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;AC7DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wB;;;;;;gEC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D,2BAA2B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB;AACA,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,0CAA0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;AC/OD,iF;;;;;;gECAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qEAAqE,8BAA8B;AACnG;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa,gCAAgC,iBAAiB;AAC7E,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;;;AAIA;AACA;AACA,kBAAkB;AAClB;AACA,sDAAsD;;AAEtD;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,gBAAgB;AAC/B;AACA;;;AAGA;AACA;AACA;;AAEA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8BAA8B;AAC1E;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,aAAa;AAC5B;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzlCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,iBAAiB,cAAc;AAC/B;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChQD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,eAAe,SAAS;AACxB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,qBAAqB;AACpC,iBAAiB,qBAAqB;AACtC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gECziBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,YAAY;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+FAA+F;AAC/F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2BAA2B,aAAa;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA,+IAA+I,gBAAgB,MAAM,sBAAsB;AAC3L;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,0GAA0G,gBAAgB,MAAM,sBAAsB;AACtJ;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,gBAAgB;AAC/B;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,qBAAqB;AAC5C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;AAAA;;;;;;;gECh+BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,uBAAuB;AACtC,iBAAiB,uBAAuB;AACxC;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT,uBAAuB,qBAAqB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gECxhBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,eAAe;AAClC;AACA;;AAEA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa,gCAAgC,iBAAiB;AAC7E,eAAe,OAAO;AACtB,eAAe,QAAQ,+BAA+B,YAAY;AAClE,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;;AAEA;AACA;;AAEA,2BAA2B,yBAAyB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8BAA8B;AACjE;AACA;AACA,qBAAqB;AACrB,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;;AAEA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC7eD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa,wCAAwC,iBAAiB;AACrF,eAAe,aAAa,qCAAqC,iBAAiB;AAClF,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,WAAW;AAC1B;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,uBAAuB;AACtC,iBAAiB,uBAAuB;AACxC;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpYD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,8BAA8B;AAC7C,iBAAiB,8BAA8B;AAC/C;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC5RD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4EAA4E;AAC5E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yBAAyB,cAAc;AACvC,6BAA6B,aAAa;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uIAAuI,gBAAgB,MAAM,sBAAsB;AACnL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,iBAAiB,kBAAkB;AACnC;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB,mBAAmB;AACpC;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,CAAC;AAAA;;;;;;;gEC/hCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC,iBAAiB,yBAAyB;AAC1C;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,iBAAiB,mBAAmB;AACpC;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gECjYD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa,gCAAgC,iBAAiB;AAC7E,eAAe,QAAQ,+BAA+B,YAAY;AAClE,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,uBAAuB;AACtC,iBAAiB,uBAAuB;AACxC;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,YAAY;AACnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpZD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECvHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,sBAAsB;AACrC,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,UAAU;AACzB,eAAe,aAAa;AAC5B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,YAAY;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gECjiBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB;AACA,eAAe,UAAU;AACzB;AACA,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,UAAU;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,YAAY;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA;;;;;;;gECvuBAAuB,wBAAwB;AAC/C;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,mBAAmB;AAC1C;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;kCCtUD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECzCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECjFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,mBAAmB;AAC1C;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,uBAAuB,gBAAgB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,kBAAkB;AACzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtXD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECpMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;;AAElC,yCAAyC;AACzC;AACA;;AAEA,qCAAqC;AACrC;;AAEA,8CAA8C;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,UAAU;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,mGAAmG;AACnG;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECxdD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC3CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0DAA0D,2CAA2C;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB;AACA;AACA,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB;AACA;AACA,eAAe,QAAQ,2DAA2D,2BAA2B;AAC7G,2BAA2B,4BAA4B;AACvD,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yCAAyC,mBAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,+CAA+C,mCAAmC;AAClF;AACA;AACA,qBAAqB;AACrB,mEAAmE,oBAAoB;AACvF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,UAAU;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC7aD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,0BAA0B;AACjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,WAAW;AACtC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECrVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,cAAc;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;ACzSD,+EAAwB,iBAAiB,sBAAsB,gCAAgC,gCAAgC,4HAA4H,yDAAyD,8BAA8B,kGAAkG;AACpb,mCAAmC,MAAM,iBAAiB,eAAe,QAAQ,aAAa,KAAK,WAAW,gBAAgB,EAAE,OAAO,gBAAgB,OAAO,OAAO,2CAA2C,oCAAoC,IAAI,yCAAyC,yBAAyB,YAAY,YAAY,wBAAwB,0DAA0D;AACpa,0CAA0C,uBAAuB,gBAAgB,mBAAmB,QAAQ,mCAAmC,iCAAiC,iCAAiC,iCAAiC,wBAAwB,UAAU,cAAc,0CAA0C,uBAAuB,YAAY,yDAAyD,8BAA8B,iBAAiB;AACvd,uCAAuC,8BAA8B,gCAAgC,+DAA+D,yBAAyB,2BAA2B;AACxN,sCAAsC,qBAAqB,qCAAqC,wEAAwE,iFAAiF,6CAA6C,oCAAoC,EAAE,yCAAyC,kCAAkC,QAAQ,4CAA4C,mBAAmB,qBAAqB,EAAE,SAAS;AAC9f,sCAAsC,6BAA6B,GAAG,QAAQ,6CAA6C,aAAa,UAAU,iCAAiC,6BAA6B,yBAAyB,6CAA6C;AACtR,uCAAuC,aAAa,iBAAiB,cAAc,4CAA4C,KAAK,EAAE,+CAA+C,qCAAqC,8DAA8D,oBAAoB,aAAa,0CAA0C,WAAW,qCAAqC,kBAAkB,GAAG,gCAAgC,6CAA6C;AACrf,IAAI,qCAAqC,KAAK,gCAAgC,EAAE,kBAAkB,eAAe,YAAY,WAAW,KAAK,WAAW,YAAY,IAAI,IAAI,UAAU,uBAAuB,kBAAkB,oCAAoC,qCAAqC,SAAS,GAAG,kBAAkB,cAAc,oBAAoB,4BAA4B,qCAAqC,IAAI,sBAAsB,SAAS,cAAc;AAC1d,WAAW,cAAc,mBAAmB,uBAAuB,gBAAgB,OAAO,oDAAoD,mCAAmC,8EAA8E,oDAAoD,KAAK,mBAAmB,4BAA4B,QAAQ,qBAAqB,QAAQ,aAAa,qDAAqD,gDAAgD;AAC9f,OAAO,IAAI,SAAS,SAAS,gBAAgB,OAAO,uEAAuE,gCAAgC,mBAAmB,iCAAiC,mBAAmB,kCAAkC,2GAA2G,cAAc,eAAe,mCAAmC,kDAAkD,mCAAmC;AACpgB,6BAA6B,WAAW,0BAA0B,gCAAgC,aAAa,6CAA6C,qCAAqC,wCAAwC,gDAAgD,qCAAqC,IAAI,6BAA6B,UAAU,eAAe,+BAA+B,gBAAgB,uCAAuC,IAAI,QAAQ,UAAU,OAAO,GAAG;AAC9e,sBAAsB,IAAI,IAAI,EAAE,qCAAqC,UAAU,8BAA8B,4BAA4B,2CAA2C,aAAa,iBAAiB,oBAAoB,MAAM,oBAAoB,MAAM,qDAAqD,WAAW,2FAA2F,mBAAmB,GAAG,YAAY,qBAAqB,2BAA2B,KAAK;AACxf,mBAAmB,2BAA2B,6CAA6C,QAAQ,4CAA4C,GAAG,kBAAkB,yCAAyC,wCAAwC,cAAc,mBAAmB,OAAO,IAAI,YAAY,aAAa,8EAA8E,eAAe,GAAG,SAAS;AACna,mCAAmC,gBAAgB,6BAA6B,gBAAgB,sBAAsB,mBAAmB,EAAE,YAAY,KAAK,kBAAkB,IAAI,iBAAiB,SAAS,KAAK,UAAU,KAAK,IAAI,gGAAgG,SAAS,yBAAyB,cAAc,4CAA4C,4BAA4B,EAAE,aAAa,GAAG,cAAc,aAAa,IAAI;AAC7e,CAAC,SAAS,IAAI,aAAa,+BAA+B,SAAS,qBAAqB,iDAAiD,YAAY,iBAAiB,kBAAkB,SAAS,aAAa,4BAA4B,8BAA8B,6BAA6B,6BAA6B,gCAAgC,gCAAgC,iCAAiC,iCAAiC,cAAc;AACld,EAAE,uBAAuB,QAAQ,qBAAqB,WAAW,+DAA+D,qBAAqB,qCAAqC,aAAa,IAAI,SAAS,cAAc,KAAK,WAAW,EAAE,gBAAgB,4BAA4B,KAAK,aAAa,uGAAuG,eAAe,KAAK,uDAAuD,eAAe;AACnf,uDAAuD,uEAAuE,cAAc,8BAA8B,cAAc,aAAa,mCAAmC,0BAA0B,mCAAmC,4CAA4C,4BAA4B,6BAA6B,kBAAkB,YAAY,YAAY,WAAW;AAC/b,0CAA0C,UAAU,6BAA6B,gBAAgB,YAAY,IAAI,kCAAkC,IAAI,4DAA4D,mBAAmB,KAAK,kBAAkB,2BAA2B,GAAG,cAAc,KAAK,KAAK,uDAAuD,eAAe,EAAE,aAAa,OAAO,IAAI,QAAQ,UAAU,gBAAgB,oDAAoD,KAAK;AAC9e,GAAG,oCAAoC,KAAK,gBAAgB,yCAAyC,KAAK,gBAAgB,+CAA+C,KAAK,iBAAiB,wCAAwC,+FAA+F,gCAAgC,KAAK,WAAW,eAAe,EAAE,QAAQ,IAAI,KAAK,4CAA4C,IAAI,0BAA0B,KAAK,SAAS,UAAU;AAC1f,yDAAyD,iBAAiB,oBAAoB,EAAE,4CAA4C,eAAe,uBAAuB,mDAAmD,cAAc,eAAe,aAAa,uCAAuC,kBAAkB,MAAM,mDAAmD,uEAAuE,iBAAiB;AACzd,OAAO,2BAA2B,YAAY,mEAAmE,gBAAgB,8BAA8B,MAAM,iFAAiF,sBAAsB,gBAAgB,IAAI,IAAI,WAAW,cAAc,0BAA0B,+DAA+D,MAAM;AAC5Z,2BAA2B,SAAS,EAAE,SAAS,cAAc,cAAc,uBAAuB,gBAAgB,kBAAkB,cAAc,kCAAkC,QAAQ,cAAc,cAAc,wBAAwB,gBAAgB,WAAW,KAAK,sBAAsB,oEAAoE,yEAAyE,aAAa,IAAI,WAAW,QAAQ,QAAQ,YAAY,WAAW,KAAK;AAC3f,gBAAgB,oEAAoE,WAAW,cAAc,SAAS,KAAK,YAAY,gBAAgB,gBAAgB,KAAK,aAAa,gBAAgB,iBAAiB,KAAK,eAAe,gBAAgB,iBAAiB,KAAK,gBAAgB,gBAAgB,iBAAiB,KAAK,gBAAgB,iBAAiB,oBAAoB,oBAAoB,oBAAoB,mBAAmB,iBAAiB,OAAO,gBAAgB,eAAe;AACjf,aAAa,yDAAyD,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa;AAC1f,KAAK,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,cAAc,0DAA0D,aAAa,cAAc,oBAAoB,aAAa,cAAc,oBAAoB,aAAa,aAAa;AACnf,WAAW,MAAM,iEAAiE,4BAA4B,MAAM,iEAAiE,iCAAiC,gCAAgC,eAAe,sFAAsF,yCAAyC,EAAE,SAAS,IAAI,iDAAiD,4BAA4B;AAChe,oBAAoB,uCAAuC,qCAAqC,sCAAsC,qHAAqH,uJAA2J,OAAO,+BAA+B,sCAAsC,UAAU;AAC5e,GAAG,kCAAuB,kCAAyB,kBAAkB,qBAAqB,yBAAyB,yBAAyB,eAAe,gCAAgC,YAAY,UAAU,0GAA0G,kCAAkC,2CAA2C,+BAA+B,EAAE,qBAAqB,oCAAoC;AACle,gHAAgH,eAAe,YAAY,4BAA4B,0BAA0B,uEAAuE,mBAAmB,uBAAuB,SAAS,8JAA8J,QAAQ,EAAE;AACne,YAAY,yBAAyB,mBAAmB,aAAa,sBAAsB,+BAA+B,yBAAyB,mBAAmB,6BAA6B,aAAa,kCAAkC,8BAA8B,yBAAyB,mBAAmB,6BAA6B,oBAAoB,0DAA0D,YAAY,aAAa;AAChc,4DAA4D,eAAe,sCAAsC,gBAAgB,kCAAkC,uEAAuE,iBAAiB,EAAE,+DAA+D,8BAA8B,EAAE,iCAAiC,8BAA8B,gDAAgD,8BAA8B,SAAS,EAAE;AACpf,QAAQ,sBAAsB,YAAY,aAAa,mDAAmD,UAAU,OAAO,wBAAwB,kBAAkB,wBAAwB,gBAAgB,sBAAsB,SAAS,0BAA0B,IAAI,+BAA+B,UAAU,6BAA6B,oBAAoB,oBAAoB,oBAAoB,sBAAsB,uBAAuB;AACzb,4CAA4C,gCAAgC,uDAAuD,yCAAyC,8DAA8D,SAAS,8BAA8B,4GAA4G,yBAAyB,0FAA0F;AAChf,wBAAwB,YAAY,4BAA4B,qEAAqE,uGAAuG,4BAA4B,iCAAiC,sBAAsB,sCAAsC,EAAE,2DAA2D,gBAAgB,8BAA8B,MAAM,KAAK;AAC3d,EAAE,EAAE,wBAAwB,oCAAoC,sBAAsB,0BAA0B,0BAA0B,YAAY,4DAA4D,EAAE,aAAa,gCAAgC,oIAAoI,wBAAwB,QAAQ,QAAQ,WAAW,SAAS,yBAAyB,SAAS,UAAU;AAC7e,IAAI,SAAS,0BAA0B,eAAe,iBAAiB,WAAW,oCAAoC,2BAA2B,sCAAsC,4BAA4B,iEAAiE,6CAA6C,yEAAyE,8DAA8D;AACxc,+BAA+B,0BAA0B,8CAA8C,IAAI,wDAAwD,KAAK,SAAS,qBAAqB,2BAA2B,SAAS,SAAS,kBAAkB,EAAE,IAAI,6GAA6G,uBAAuB,SAAS,eAAe,qBAAqB;AAC5b,oGAAoG,2BAA2B,gHAAgH,aAAa,8CAA8C,IAAI,gBAAgB,YAAY,wFAAwF,cAAc,WAAW,WAAW,YAAY,WAAW,WAAW;AACxe,aAAa,aAAa,aAAa,wCAAwC,2GAA2G,yBAAyB,qBAAqB,qBAAqB,WAAW,YAAY,aAAa,IAAI,oDAAoD,uCAAuC;AAChY,CAAC,UAAU,OAAO,aAAa,mFAAmF,OAAO,WAAW,0BAA0B,mBAAmB,2DAA2D,uBAAuB,mBAAmB,WAAW,EAAE,kBAAkB,gBAAgB,YAAY,aAAa,WAAW,WAAW;AACpX,mBAAmB,uBAAuB,8EAA8E,SAAS,aAAa,IAAI,QAAQ,eAAe,uBAAuB,cAAc,uBAAuB,cAAc,qBAAqB,oCAAoC,4BAA4B,wDAAwD,KAAK,EAAE,yFAAyF;AAChe,yEAAyE,sBAAsB,UAAU,2BAA2B,wBAAwB,QAAQ,uBAAuB,yBAAyB,8BAA8B,UAAU,+EAA+E,qKAAqK,0BAA0B;AAC1gB,6BAA6B,gDAAgD,wDAAwD,KAAK,EAAE,SAAS,yDAAyD,2GAA2G,OAAO,+BAA+B,wBAAwB,WAAW,uBAAuB,UAAU,UAAU,QAAQ,mBAAmB,sBAAsB,4BAA4B;AAC1f,aAAa,QAAQ,0BAA0B,0BAA0B,mBAAmB,wEAAwE,QAAQ,UAAU,OAAO,QAAQ,SAAS,UAAU,SAAS,sBAAsB,aAAa,sBAAsB,qBAAqB,yBAAyB,+GAA+G,sCAAsC,yBAAyB;AACtf,kBAAkB,WAAW,oBAAoB,2CAA2C,6BAA6B,8LAA8L,UAAU,IAAI,iBAAiB,YAAY,UAAU,OAAO,iBAAiB,oBAAoB,UAAU,OAAO,OAAO,yBAAyB,sBAAsB;AAC/d,yDAAyD,SAAS,oBAAoB,yBAAyB,oBAAoB,MAAM,iBAAiB,gBAAgB,aAAa,qHAAqH,sBAAsB,4BAA4B,IAAI,0BAA0B,aAAa,yBAAyB,mBAAmB,kBAAkB,kBAAkB,wBAAwB;AACjf,mBAAmB,SAAS,oBAAoB,gBAAgB,MAAM,MAAM,mBAAmB,gBAAgB,QAAQ,kBAAkB,gBAAgB,qBAAqB,sBAAsB,EAAE,oBAAoB,uBAAuB,SAAS,qBAAqB,YAAY,oBAAoB,uBAAuB,gBAAgB;AACtV,mEAAmE,iBAAiB,4DAA4D,SAAS,oCAAoC,4TAA4T;AACzf,wBAAwB,IAAI,yBAAyB,SAAS,8CAA8C,iBAAiB,4BAA4B,IAAI,4BAA4B,SAAS,8CAA8C,iBAAiB,+BAA+B,IAAI,+BAA+B,SAAS,8CAA8C,iBAAiB,wCAAwC,IAAI,wCAAwC,UAAU;AACze,mCAAmC,iBAAiB,sBAAsB,IAAI,eAAe,SAAS,8CAA8C,iBAAiB,yBAAyB,IAAI,kBAAkB,SAAS,8CAA8C,iBAAiB,4BAA4B,IAAI,qBAAqB,SAAS,8CAA8C,iBAAiB,+BAA+B,IAAI,wBAAwB,SAAS;AAC7d,sBAAsB,iBAAiB,kCAAkC,IAAI,2BAA2B,UAAU,iDAAiD,iBAAiB,qCAAqC,IAAI,8BAA8B,UAAU,iDAAiD,iBAAiB,wCAAwC,IAAI,iCAAiC,UAAU,iDAAiD,iBAAiB;AAChe,sCAAsC,aAAa,gCAAgC,iBAAiB,oDAAoD,mBAAmB,iBAAiB,wBAAwB,SAAS,8DAA8D,MAAM,sCAAsC,8BAA8B,YAAY,uEAAuE,SAAS;AACjc,EAAE,sKAAsK,mCAAmC,gCAAgC,mBAAmB,sKAAsK,yBAAyB,qDAAqD,SAAS;AAC3f,4BAA4B,YAAY,IAAI,0BAA0B,QAAQ,kCAAkC,iBAAiB,mBAAmB,4CAA4C,SAAS,UAAU,6EAA6E,4CAA4C,YAAY,SAAS,2BAA2B,YAAY,IAAI,0BAA0B,YAAY,SAAS,SAAS;AACpc,eAAe,mBAAmB,UAAU,wCAAwC,2BAA2B,SAAS,kCAAkC,gBAAgB,mCAAmC,kBAAkB,WAAW,SAAS,KAAK,SAAS,qDAAqD,wBAAwB,QAAQ,SAAS,sEAAsE,+CAA+C,SAAS,8BAA8B;AAC3f,YAAY,oCAAoC,2DAA2D,iGAAiG,gHAAgH,mFAAmF,qGAAqG;AACpf,4EAA4E,+FAA+F,mFAAmF,qGAAqG,kGAAkG;AACrc,WAAW,qFAAqF,uGAAuG,+EAA+E,iGAAiG,6EAA6E;AACpc,WAAW,qFAAqF,uGAAuG,yEAAyE,2FAA2F,kFAAkF;AAC7b,WAAW,uEAAuE,yFAAyF,0EAA0E,4FAA4F,gEAAgE,kFAAkF;AACne,WAAW,yEAAyE,8DAA8D,gFAAgF,+DAA+D,iFAAiF,qEAAqE;AACvb,WAAW,oDAAoD,sEAAsE,mEAAmE,qFAAqF,0EAA0E,4FAA4F;AACnc,WAAW,gFAAgF,0EAA0E,4FAA4F,iEAAiE,mFAAmF,2DAA2D;AAChd,WAAW,0EAA0E,4FAA4F,0EAA0E,4FAA4F,yEAAyE,2FAA2F;AAC3f,uEAAuE,0FAA0F,iEAAiE,mFAAmF,2EAA2E,6FAA6F;AAC7d,WAAW,6FAA6F,0EAA0E,4FAA4F,yDAAyD,2EAA2E,mEAAmE;AACrd,WAAW,4DAA4D,8EAA8E,wDAAwD,0EAA0E,sEAAsE,wFAAwF,mEAAmE;AACxf,WAAW,wDAAwD,0EAA0E,wEAAwE,0FAA0F,+DAA+D,iFAAiF;AAC/b,WAAW,oFAAoF,2DAA2D,6EAA6E,oEAAoE,sFAAsF,6DAA6D;AAC9b,WAAW,gEAAgE,kFAAkF,yDAAyD,2EAA2E,oEAAoE,sFAAsF,6DAA6D;AACxf,WAAW,gEAAgE,kFAAkF,yDAAyD,2EAA2E,kEAAkE,oFAAoF,4DAA4D;AACnf,WAAW,+DAA+D,iFAAiF,wDAAwD,0EAA0E,sEAAsE,wFAAwF,8DAA8D;AACzf,WAAW,iEAAiE,mFAAmF,0DAA0D,4EAA4E,sEAAsE,wFAAwF;AACnc,WAAW,gFAAgF,iEAAiE,mFAAmF,0DAA0D,4EAA4E,oEAAoE;AACzb,WAAW,6DAA6D,+EAA+E,gEAAgE,kFAAkF,yDAAyD,2EAA2E,wEAAwE;AACrf,WAAW,kEAAkE,oFAAoF,8CAA8C,gEAAgE,qDAAqD,uEAAuE,wDAAwD;AACnc,WAAW,mDAAmD,qEAAqE,oDAAoD,sEAAsE,mEAAmE,qFAAqF,iEAAiE;AACtd,WAAW,gEAAgE,kFAAkF,mEAAmE,qFAAqF,mEAAmE,qFAAqF;AAC7c,WAAW,+EAA+E,gEAAgE,kFAAkF,mEAAmE,qFAAqF,oEAAoE;AACxc,WAAW,+DAA+D,iFAAiF,gEAAgE,kFAAkF,sDAAsD,wEAAwE,yDAAyD;AACpe,WAAW,6EAA6E,+FAA+F,kEAAkE,oFAAoF,+DAA+D,iFAAiF;AAC7d,WAAW,oFAAoF,+DAA+D,iFAAiF,+DAA+D,iFAAiF,6DAA6D;AAC5b,WAAW,8DAA8D,gFAAgF,kEAAkE,oFAAoF,wDAAwD,0EAA0E,6DAA6D;AAC9e,WAAW,0DAA0D,4EAA4E,2DAA2D,6EAA6E,8DAA8D,gFAAgF,0DAA0D;AACje,WAAW,uDAAuD,yEAAyE,gDAAgD,kEAAkE,qDAAqD,uEAAuE,8CAA8C,gEAAgE;AACve,WAAW,0EAA0E,2FAA2F,6GAA6G,sFAAsF,wGAAwG;AAC3d,WAAW,gHAAgH,gGAAgG,kHAAkH,kFAAkF;AAC/Z,WAAW,wEAAwE,0FAA0F,4EAA4E,8FAA8F,qEAAqE,uFAAuF;AACnf,mEAAmE,yFAAyF,uEAAuE,yFAAyF,sEAAsE,wFAAwF;AAC1d,WAAW,0FAA0F,yEAAyE,2FAA2F,yDAAyD,2EAA2E,qEAAqE;AACld,WAAW,4DAA4D,8EAA8E,sDAAsD,wEAAwE,mEAAmE,qFAAqF,uEAAuE;AAClf,YAAY,yCAAyC,gEAAgE,+CAA+C,+DAA+D,mBAAmB,0CAA0C,6BAA6B,oDAAoD,4BAA4B,4CAA4C,qBAAqB;AAC9c,sBAAsB,6CAA6C,qBAAqB,4CAA4C,mBAAmB,0CAA0C,iCAAiC,wDAAwD,yBAAyB,gDAAgD,yBAAyB,gDAAgD,yBAAyB;AACrc,sBAAsB,6CAA6C,wBAAwB,+CAA+C,0BAA0B,iDAAiD,uBAAuB,8CAA8C,wBAAwB,+CAA+C,yBAAyB,gDAAgD,0BAA0B;AACpc,6BAA6B,oDAAoD,uBAAuB,8CAA8C,wBAAwB,+CAA+C,yBAAyB,gDAAgD,0BAA0B,iDAAiD,2BAA2B,kDAAkD,4BAA4B;AAC1d,YAAY,6BAA6B,oDAAoD,0BAA0B,wBAAwB,8BAA8B,4CAA4C,4BAA4B,4BAA4B,SAAS,oIAAoI,uBAAuB,wBAAwB,KAAK,kBAAkB;AACpe,WAAW,6CAA6C,GAAG,yBAAyB,mBAAmB,oCAAoC,uBAAuB,uEAAuE,0BAA0B,+BAA+B,kBAAkB,8CAA8C;AAClW,gBAAgB,4GAA4G,UAAU,mBAAmB,oBAAoB,KAAK,6BAA6B,kCAAkC,OAAO,MAAM,UAAU,qBAAqB,4BAA4B,YAAY,gBAAgB,kBAAkB,qBAAqB,SAAS,qBAAqB,yBAAyB,iEAAiE;AACpf,gBAAgB,sBAAsB,UAAU,UAAU,uEAAuE,mBAAmB,mBAAmB,KAAK,uCAAuC,0BAA0B,wBAAwB,eAAe,kBAAkB,aAAa,gBAAgB,2BAA2B,mBAAmB,YAAY,sBAAsB,qFAAqF;AACxe,8BAA8B,wBAAwB,sBAAsB,yBAAyB,cAAc,uBAAuB,oBAAoB,OAAO,2DAA2D,aAAa,YAAY,iBAAiB,wBAAwB,iBAAiB,kBAAkB,WAAW,iBAAiB,WAAW,+DAA+D,QAAQ,qBAAqB,YAAY,+BAA+B;AACnf,OAAO,gGAAgG,SAAS,sBAAsB,4BAA4B,aAAa,MAAM,aAAa,MAAM,aAAa,YAAY,WAAW,kBAAkB,uCAAuC,0BAA0B,wBAAwB,eAAe,WAAW,6CAA6C,qBAAqB,yCAAyC,sBAAsB;AAClf,iCAAiC,wBAAwB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,qBAAqB,sDAAsD,eAAe,kCAAkC,gBAAgB,6CAA6C,qBAAqB,2DAA2D;AACnf,uCAAuC,0BAA0B,wBAAwB,eAAe,eAAe,iEAAiE,qBAAqB,yDAAyD,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,oBAAoB;AAChe,iCAAiC,eAAe,kCAAkC,gBAAgB,6CAA6C,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,qBAAqB,sDAAsD,eAAe,kCAAkC,gBAAgB;AACje,WAAW,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,iCAAiC,wEAAwE,eAAe,kCAAkC,iBAAiB,uEAAuE,qBAAqB;AACxd,WAAW,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,mBAAmB,6CAA6C,qBAAqB,uFAAuF,0BAA0B,iEAAiE,qBAAqB,uDAAuD,qBAAqB;AACze,sCAAsC,qBAAqB,yDAAyD,sBAAsB,2DAA2D,qBAAqB,2DAA2D,qBAAqB,uDAAuD,qBAAqB,2DAA2D,cAAc,uCAAuC;AACte,EAAE,wBAAwB,eAAe,2BAA2B,iEAAiE,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,mCAAmC,wEAAwE,eAAe,kCAAkC;AACve,uEAAuE,qBAAqB,wDAAwD,eAAe,kCAAkC,gBAAgB,+CAA+C,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,mBAAmB;AAC7d,YAAY,eAAe,kCAAkC,gBAAgB,6CAA6C,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,oBAAoB,wDAAwD,eAAe,YAAY,kCAAkC,oCAAoC;AAC7e,MAAM,8DAA8D,eAAe,YAAY,kCAAkC,oCAAoC,mBAAmB,8DAA8D,eAAe,YAAY,kCAAkC,oCAAoC,kBAAkB,oEAAoE,eAAe,YAAY,kCAAkC;AAC1e,oBAAoB,mBAAmB,oEAAoE,eAAe,YAAY,kCAAkC,oCAAoC,kBAAkB,oEAAoE,eAAe,YAAY,kCAAkC,oCAAoC,mBAAmB,oEAAoE,eAAe;AACze,kCAAkC,oCAAoC,qBAAqB,0DAA0D,eAAe,kCAAkC,gBAAgB,gEAAgE,eAAe,kCAAkC,kCAAkC,qBAAqB,2DAA2D,cAAc,uCAAuC;AAC9e,EAAE,wBAAwB,eAAe,oBAAoB,sDAAsD,eAAe,kCAAkC,gBAAgB,6CAA6C,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,sBAAsB,sDAAsD;AACnf,SAAS,kCAAkC,gBAAgB,6CAA6C,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,sBAAsB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB;AACte,kBAAkB,gDAAgD,eAAe,YAAY,4CAA4C,oBAAoB,eAAe,IAAI,kCAAkC,WAAW,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,YAAY,kFAAkF;AAC5e,kCAAkC,gBAAgB,wFAAwF,eAAe,kCAAkC,kCAAkC,uBAAuB,4EAA4E,eAAe,kCAAkC,kCAAkC,uBAAuB,oEAAoE;AAC9e,kCAAkC,kCAAkC,kBAAkB,gFAAgF,eAAe,YAAY,kCAAkC,oCAAoC,kBAAkB,oGAAoG,eAAe,YAAY,kCAAkC,oCAAoC;AAC9d,WAAW,oBAAoB,gEAAgE,eAAe,kCAAkC,kCAAkC,uBAAuB,oFAAoF,eAAe,kCAAkC,kCAAkC,uBAAuB,4DAA4D,eAAe,kCAAkC;AACpf,OAAO,gFAAgF,eAAe,kCAAkC,kCAAkC,uBAAuB,wEAAwE,eAAe,kCAAkC,kCAAkC,kCAAkC,qBAAqB,0FAA0F;AAC7e,kCAAkC,kCAAkC,kBAAkB,4EAA4E,eAAe,kCAAkC,kCAAkC,kCAAkC,qBAAqB,oGAAoG,eAAe,kCAAkC,kCAAkC;AACne,UAAU,qBAAqB,gGAAgG,eAAe,kCAAkC,kCAAkC,kCAAkC,qBAAqB,kGAAkG,eAAe,kCAAkC,kCAAkC,kCAAkC;AAChe,oGAAoG,eAAe,kCAAkC,kCAAkC,kCAAkC,qBAAqB,oGAAoG,eAAe,kCAAkC,kCAAkC,kCAAkC,qBAAqB;AAC5d,2DAA2D,eAAe,kCAAkC,kCAAkC,kCAAkC,qBAAqB,oGAAoG,eAAe,kCAAkC,kCAAkC,kCAAkC,qBAAqB;AACnb,gBAAgB,eAAe,kCAAkC,kCAAkC,kCAAkC,qBAAqB,kFAAkF,eAAe,kCAAkC,SAAS,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,SAAS;AAChe,iCAAiC,qBAAqB,iEAAiE,qBAAqB,yDAAyD,qBAAqB,2DAA2D,cAAc,wCAAwC,4BAA4B,0BAA0B,gBAAgB,aAAa,6DAA6D,cAAc;AACze,2BAA2B,0BAA0B,wBAAwB,eAAe,oBAAoB,sDAAsD,eAAe,kCAAkC,gBAAgB,6CAA6C,qBAAqB,2DAA2D,cAAc,uCAAuC,0BAA0B,wBAAwB,eAAe,aAAa;AACve,mCAAmC,cAAc,YAAY,aAAa,UAAU,aAAa,gBAAgB,yBAAyB,2BAA2B,uBAAuB,6BAA6B,mBAAmB,uBAAuB,mCAAmC,8BAA8B,wCAAwC,sCAAsC,eAAe,gBAAgB,cAAc,aAAa,iBAAiB,eAAe;AAC5e,kBAAkB,IAAI,2DAA2D,UAAU;;;;;;;;;;;;;;AChI3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,8BAA8B;AAClE;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;;AAEA;AACA,UAAU,UAAU;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,sBAAsB;AACrD;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;;;;;;;gEC/NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;;AAEA,qBAAqB;;AAErB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mCAAmC;;AAEnC;AACA;;AAEA;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA,8BAA8B;AAC9B;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qCAAqC;AACrC;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEC7PD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtFD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,qCAAqC;AACpD,iBAAiB,qCAAqC;AACtD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,qCAAqC;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECjID;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;YCXD,qDAAyC,SAA2D,mBAAmB,gDAAgD,aAAa,KAAK,MAAM,gCAAgC,SAAS,qCAAqC,SAAS,mCAAmC,OAAO,KAAK,OAAO,cAAc,aAAa,0BAA0B,0BAA0B,gBAAgB,UAAU,UAAU,0CAA0C,8BAAwB,oBAAoB,8CAA8C,kCAAkC,YAAY,YAAY,mCAAmC,iBAAiB,gBAAgB,sBAAsB,oBAAoB,0CAA0C,YAAY,WAAW,YAAY,SAAS,GAAG;AACp0B;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,0BAA0B,UAAU;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,kCAAkC,YAAY;AAC9C,2BAA2B,8BAA8B;AACzD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,GAAG;AACJ;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,wCAAwC,EAAE,aAAa,sBAAsB;AACtF,SAAS,oDAAoD,EAAE,aAAa,0BAA0B;;;AAGtG;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,sCAAsC;;;AAGtC;AACA;AACA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,SAAS;AACrC;AACA;AACA,2BAA2B,qBAAqB,UAAU;;AAE1D;AACA;AACA,4BAA4B,0BAA0B,gBAAgB,UAAU;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,0BAA0B,UAAU;;AAEhE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,kBAAkB;;AAEjD;AACA;AACA,wDAAwD,OAAO;;AAE/D;AACA;AACA,sBAAsB,YAAY;;AAElC;AACA;AACA,wBAAwB,YAAY;;AAEpC;AACA;;AAEA,CAAC,EAAE,aAAa;AAChB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,CAAC,GAAG;AACJ;;;AAGA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC,GAAG;AACJ;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,uBAAuB,SAAS;AAChC;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA,yBAAyB,SAAS;AAClC;AACA;;AAEA,4BAA4B;AAC5B;;;AAGA;;AAEA,CAAC,GAAG;AACJ;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,GAAG;AACJ;;AAEA;AACA,iBAAiB;AACjB,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,iBAAiB;AACjB,iBAAiB;AACjB,gBAAgB;AAChB,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB;AACA,qBAAqB;AACrB,iBAAiB;AACjB,iBAAiB;AACjB,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,iBAAiB;AACjB,eAAe;AACf;AACA,gBAAgB;AAChB,iBAAiB;AACjB,iBAAiB;AACjB;;;AAGA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B,GAAG;AAC9B;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,GAAG;AAC1C;AACA;AACA;AACA;;AAEA,kDAAkD;AAClD;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,wDAAwD;AACxD,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,8DAA8D;AAC9D;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,qDAAqD;AACrD,uEAAuE;AACvE;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,qDAAqD;AACrD;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA,yDAAyD;AACzD,2EAA2E;AAC3E;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,qDAAqD;AACrD,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,gDAAgD;AAChD;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,GAAG;AACJ;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AAGA,oBAAoB;AACpB,qBAAqB;AACrB,oBAAoB;AACpB,kBAAkB;AAClB,qBAAqB;AACrB,qBAAqB;AACrB,oBAAoB;AACpB,uBAAuB;AACvB,oBAAoB;AACpB,uBAAuB;AACvB,qBAAqB;AACrB,yBAAyB;AACzB,2BAA2B;AAC3B,2BAA2B;AAC3B,0BAA0B;AAC1B,yBAAyB;AACzB,0BAA0B;AAC1B,4BAA4B;AAC5B,6BAA6B;AAC7B,6BAA6B;AAC7B,4BAA4B;AAC5B,+BAA+B;AAC/B,6BAA6B;AAC7B,gCAAgC;AAChC,8BAA8B;AAC9B,4BAA4B;AAC5B,sBAAsB;AACtB,uBAAuB;AACvB,qBAAqB;AACrB,oBAAoB;AACpB,oBAAoB;AACpB,qBAAqB;;AAErB;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,sBAAsB;AACtB,0BAA0B;AAC1B,sBAAsB;AACtB,8BAA8B;AAC9B,uBAAuB;AACvB,sBAAsB;AACtB,uBAAuB;AACvB,uBAAuB;AACvB;AACA,yBAAyB;;AAEzB;AACA,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,2BAA2B;;AAE3B;AACA,sBAAsB;AACtB,sBAAsB;;AAEtB;AACA,wBAAwB;AACxB,wBAAwB;;AAExB;AACA,uBAAuB;;AAEvB;AACA,4BAA4B;AAC5B,6BAA6B;AAC7B,yBAAyB;AACzB,0BAA0B;;AAE1B;AACA,uBAAuB;AACvB,sBAAsB;AACtB,uBAAuB;AACvB,sBAAsB;AACtB,yBAAyB;;AAEzB,yCAAyC;AACzC,yCAAyC;;AAEzC;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,2BAA2B;AAC3B,4BAA4B;AAC5B,sBAAsB;AACtB,sBAAsB;AACtB,qBAAqB;AACrB;;AAEA;AACA;;AAEA,mCAAmC,uBAAuB;AAC1D;AACA;AACA,sBAAsB;AACtB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC,uBAAuB;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,uBAAuB;AAC3C,4BAA4B;;AAE5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,uBAAuB;AACtD,+BAA+B,uBAAuB;AACtD,+BAA+B,uBAAuB;AACtD,+BAA+B,uBAAuB;;AAEtD,+EAA+E,UAAU;;AAEzF;AACA;AACA,8BAA8B,uBAAuB;;AAErD,+EAA+E,UAAU;;AAEzF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB;AACnE,gDAAgD,qBAAqB;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B,iBAAiB;AACjB,gBAAgB;AAChB,uBAAuB;AACvB,iBAAiB;AACjB,iBAAiB;AACjB,sBAAsB;AACtB,iBAAiB;AACjB,iBAAiB;AACjB;AACA,qBAAqB;AACrB,yCAAyC;AACzC,mBAAmB;AACnB,yCAAyC;AACzC,gBAAgB;AAChB,gBAAgB;AAChB,qCAAqC;AACrC;;AAEA,cAAc;;AAEd;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,qBAAqB,EAAE;;;AAGzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,iBAAiB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D,8CAA8C,aAAa;AAC3D,6CAA6C,iBAAiB;AAC9D,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,wFAAwF;AACxF;AACA;AACA;;AAEA,0DAA0D,OAAO;AACjE;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,OAAO;;AAExD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,oFAAoF;AACpF;AACA;AACA;;AAEA,oDAAoD,OAAO;AAC3D;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA,sEAAsE,OAAO;AAC7E;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,sFAAsF;AACtF;AACA;AACA;;AAEA,sDAAsD,OAAO;AAC7D;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA,sEAAsE,OAAO;AAC7E;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qBAAqB;AAC3E;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iDAAiD,kBAAkB;AACnE;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC,uBAAuB;AAC1D;AACA,qCAAqC,uBAAuB;;AAE5D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mEAAmE,uBAAuB;AAC1F;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,EAAE,2EAA2E;AAC9E;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B;;AAE3B,oBAAoB;AACpB,oBAAoB;AACpB,6BAA6B;AAC7B,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,iBAAiB;AACjB,iBAAiB;AACjB,gBAAgB;AAChB,iBAAiB;AACjB,iBAAiB;AACjB,wBAAwB;AACxB;AACA,iBAAiB;AACjB,gBAAgB;AAChB,iDAAiD,eAAe;AAChE,gDAAgD,eAAe;AAC/D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;;AAEA;AACA;AACA,2BAA2B,UAAU;AACrC,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA,wBAAwB;AACxB,8CAA8C,2BAA2B;AACzE,+CAA+C;AAC/C,gDAAgD;AAChD;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA,qBAAqB,WAAW;AAChC,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;;AAEA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,SAAS,OAAO;AAChB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB,gBAAgB;AAChB,kBAAkB;AAClB,2BAA2B;AAC3B,oBAAoB;AACpB,iBAAiB;AACjB,iBAAiB;AACjB,yBAAyB;AACzB,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC,EAAE,oBAAoB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,GAAG;AACJ;;;AAGA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,GAAG;AACJ;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA,kCAAkC;AAClC;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,eAAe;;AAExB;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB,yBAAyB;AACzB,4BAA4B;AAC5B,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,cAAc;AACvC;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D;;AAE9D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,kEAAkE;;AAErG;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B,yCAAyC;;AAEpE;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,CAAC,EAAE,4IAA4I,EAAE,GAAG;AACpJ,CAAC;;;;;;;gECpjGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEClJD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gEChGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,sFAAsF,sCAAsC;AAC5H;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECtUD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;+CC5DD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,WAAW,gEAAgE,uBAAuB,uBAAuB,+BAA+B,kCAAkC,6BAA6B,gCAAgC,8BAA8B,+BAA+B,0BAA0B,kCAAkC,wBAAwB,0CAA0C,2BAA2B,wCAAwC,yBAAyB,yCAAyC,0BAA0B,KAAK,qHAAqH,KAAK,4CAA4C,wDAAwD,wHAAwH,uFAAuF,wBAAwB,gDAAgD,uDAAuD,WAAW,aAAa,oDAAoD,gCAAgC,sCAAsC,yCAAyC,yCAAyC,kCAAkC,mDAAmD,sCAAsC,gBAAgB,wBAAwB,mBAAmB,YAAY,gCAAgC,qBAAqB,2BAA2B,6BAA6B,4DAA4D,KAAK,yCAAyC,6CAA6C,SAAgC,yBAAyB,gDAAgD,gCAAgC,UAAU,GAAG,8BAA8B,mCAAmC,EAAE,8BAA8B,0CAA0C,4DAA4D,6BAA6B,oBAAoB,KAAK,qCAAqC,4BAA4B,4CAA4C,mCAAmC,qCAAqC,0BAA0B,+BAA+B,aAAa,mCAAmC,+BAA+B,uCAAuC,8BAA8B,6BAA6B,yCAAyC,aAAa,GAAG,mDAAmD,wCAAwC,2BAA2B,0BAA0B,eAAe,yBAAyB,0BAA0B,8CAA8C,2BAA2B,0BAA0B,+BAA+B,eAAe,qCAAqC,2DAA2D,2BAA2B,yBAAyB,+BAA+B,iCAAiC,iDAAiD,qBAAqB,KAAK,YAAY,oBAAoB,gBAAgB,kCAAkC,8BAA8B,iCAAiC,4DAA4D,gBAAgB,qEAAqE,iBAAiB,KAAK,uBAAuB,yFAAyF,QAAQ,gBAAgB,EAAE,0BAA0B,6BAA6B,kDAAkD,0CAA0C,qBAAqB,GAAG,KAAK,kDAAkD,uBAAuB,kBAAkB,oCAAoC,gCAAgC,+BAA+B,qBAAqB,6BAA6B,EAAE,wBAAwB,mCAAmC,yBAAyB,uBAAuB,2BAA2B,uCAAuC,oBAAoB,yCAAyC,cAAc,EAAE,6BAA6B,mCAAmC,oBAAoB,qBAAqB,gCAAgC,wCAAwC,kCAAkC,0BAA0B,aAAa,6BAA6B,eAAe,aAAa,0BAA0B,gBAAgB,wBAAwB,gBAAgB,mCAAmC,kBAAkB,oCAAoC,aAAa,2BAA2B,mBAAmB,mBAAmB,mBAAmB,qBAAqB,sBAAsB,SAAS,8BAA8B,4BAA4B,uBAAuB,kCAAkC,mBAAmB,cAAc,KAAK,YAAY,qCAAqC,sEAAsE,gDAAgD,kCAAkC,UAAU,oBAAoB,QAAQ,KAAK,oBAAoB,WAAW,2CAA2C,mDAAmD,iCAAiC,sFAAsF,kCAAkC,sBAAsB,6DAA6D,KAAK,8CAA8C,kDAAkD,YAAY,kCAAkC,KAAK,iCAAiC,iCAAiC,gBAAgB,sGAAsG,kCAAkC,2CAA2C,2BAA2B,qDAAqD,kCAAkC,+BAA+B,uBAAuB,iBAAiB,oCAAoC,YAAY,+BAA+B,6BAA6B,uCAAuC,oBAAoB,mBAAmB,0CAA0C,kCAAkC,wBAAwB,6CAA6C,wCAAwC,KAAK,0CAA0C,yEAAyE,sBAAsB,qCAAqC,mIAAmI,6BAA6B,iBAAiB,yBAAyB,yBAAyB,WAAW,8BAA8B,kBAAkB,2BAA2B,2BAA2B,WAAW,+BAA+B,kCAAkC,4BAA4B,8BAA8B,sBAAsB,4BAA4B,aAAa,8BAA8B,UAAU,WAAW,sCAAsC,uEAAuE,WAAW,0CAA0C,uFAAuF,WAAW,4CAA4C,0BAA0B,YAAY,iBAAiB,gCAAgC,eAAe,kCAAkC,yBAAyB,2BAA2B,UAAU,IAAI,qBAAqB,WAAW,0GAA0G,YAAY,gBAAgB,aAAa,aAAa,wBAAwB,oBAAoB,6BAA6B,uBAAuB,4BAA4B,uCAAuC,4BAA4B,WAAW,6BAA6B,UAAU,yCAAyC,0BAA0B,4BAA4B,0BAA0B,WAAW,GAAG,SAAS,2DAA2D,8DAA8D,yBAAyB,aAAa,YAAY,SAAS,YAAY,cAAc,KAAK,+BAA+B,cAAc,uCAAuC,4BAA4B,KAAK,mBAAmB,+BAA+B,oDAAoD,cAAc,qBAAqB,kDAAkD,4BAA4B,GAAG,OAAO,4BAA4B,YAAY,6DAA6D,eAAe,qBAAqB,OAAO,GAAG,6BAA6B,yDAAyD,OAAO,0DAA0D,kBAAkB,0BAA0B,cAAc,YAAY,wBAAwB,gCAAgC,2CAA2C,gDAAgD,sBAAsB,0BAA0B,+CAA+C,uBAAuB,GAAG,qCAAqC,4BAA4B,aAAa,yCAAyC,YAAY,GAAG,gDAAgD,EAAE,0BAA0B,iBAAiB,iBAAiB,qDAAqD,EAAE,YAAY,QAAQ,KAAK,qCAAqC,4BAA4B,qCAAqC,kDAAkD,EAAE,4BAA4B,EAAE,6CAA6C,GAAG,sCAAsC,aAAa,eAAe,0DAA0D,EAAE,gBAAgB,mCAAmC,yBAAyB,eAAe,gCAAgC,EAAE,iBAAiB,iBAAiB,iEAAiE,EAAE,qBAAqB,GAAG,sBAAsB,KAAK,sBAAsB,sBAAsB,yCAAyC,gBAAgB,+CAA+C,aAAa,6BAA6B,MAAM,6BAA6B,MAAM,+BAA+B,MAAM,+BAA+B,MAAM,mRAAmR,MAAM,kCAAkC,MAAM,mCAAmC,MAAM,mDAAmD,4BAA4B,mCAAmC,gBAAgB,+CAA+C,aAAa,8BAA8B,8BAA8B,gCAAgC,gCAAgC,gCAAgC,mCAAmC,oCAAoC,kDAAkD,YAAY,4BAA4B,mBAAmB,kBAAkB,mBAAmB,oBAAoB,iBAAiB,oCAAoC,kCAAkC,oCAAoC,sCAAsC,gCAAgC,4CAA4C,kBAAkB,2BAA2B,cAAc,UAAU,KAAK,eAAe,iBAAiB,kDAAkD,QAAQ,0BAA0B,QAAQ,KAAK,kNAAkN,aAAa,iBAAiB,mBAAmB,mBAAmB,KAAK,SAAS,QAAQ,iBAAiB,cAAc,gBAAgB,kBAAkB,WAAW,sBAAsB,8BAA8B,qBAAqB,KAAK,qCAAqC,WAAW,mCAAmC,cAAc,iBAAiB,6BAA6B,oCAAoC,0BAA0B,aAAa,IAAI,SAAS,0BAA0B,0BAA0B,wBAAwB,yCAAyC,kBAAkB,YAAY,WAAW,4BAA4B,yBAAyB,kDAAkD,yDAAyD,qBAAqB,8BAA8B,uCAAuC,6BAA6B,aAAa,MAAM,QAAQ,SAAS,mBAAmB,UAAU,uBAAuB,IAAI,2BAA2B,oBAAoB,WAAW,eAAe,mBAAmB,SAAS,gBAAgB,2FAA2F,sBAAsB,eAAe,kBAAkB,WAAW,mCAAmC,8CAA8C,4BAA4B,WAAW,SAAS,uBAAuB,kBAAkB,8BAA8B,sCAAsC,mCAAmC,4CAA4C,sCAAsC,mFAAmF,wCAAwC,eAAe,+BAA+B,iDAAiD,wDAAwD,KAAK,sBAAsB,WAAW,SAAS,kBAAkB,kBAAkB,cAAc,6BAA6B,SAAS,qBAAqB,kBAAkB,wCAAwC,SAAS,qBAAqB,kBAAkB,wBAAwB,KAAK,qBAAqB,kBAAkB,8BAA8B,KAAK,qBAAqB,kBAAkB,qCAAqC,KAAK,qBAAqB,8CAA8C,aAAa,6BAA6B,KAAK,gBAAgB,wDAAwD,8CAA8C,2BAA2B,qCAAqC,oCAAoC,kEAAkE,iCAAiC,oBAAoB,oCAAoC,YAAY,aAAa,KAAK,wBAAwB,sEAAsE,WAAW,wBAAwB,uBAAuB,iBAAiB,0BAA0B,8BAA8B,8BAA8B,kBAAkB,0BAA0B,+BAA+B,iCAAiC,8BAA8B,oBAAoB,0BAA0B,+BAA+B,kCAAkC,iCAAiC,8BAA8B,qBAAqB,0BAA0B,+BAA+B,kCAAkC,kCAAkC,iCAAiC,8BAA8B,KAAK,0BAA0B,+BAA+B,kCAAkC,kCAAkC,kCAAkC,iCAAiC,+BAA+B,qBAAqB,uBAAuB,8CAA8C,kDAAkD,4DAA4D,oCAAoC,8BAA8B,UAAU,YAAY,aAAa,KAAK,wBAAwB,sEAAsE,WAAW,MAAM,iBAAiB,OAAO,kBAAkB,OAAO,oBAAoB,OAAO,qBAAqB,OAAO,KAAK,QAAQ,WAAW,0CAA0C,wFAAwF,wBAAwB,4EAA4E,wBAAwB,IAAI,qBAAqB,6BAA6B,qBAAqB,wBAAwB,sBAAsB,4CAA4C,oCAAoC,+BAA+B,UAAU,QAAQ,kBAAkB,wBAAwB,kBAAkB,YAAY,gGAAgG,YAAY,2BAA2B,yBAAyB,uCAAuC,kBAAkB,4BAA4B,GAAG,wBAAwB,kBAAkB,eAAe,IAAI,mBAAmB,SAAS,MAAM,eAAe,oCAAoC,4BAA4B,sBAAsB,sBAAsB,kEAAkE,uBAAuB,gCAAgC,yBAAyB,6BAA6B,8BAA8B,6BAA6B,iBAAiB,uBAAuB,SAAS,2EAA2E,iCAAiC,4BAA4B,mCAAmC,4CAA4C,+CAA+C,+CAA+C,+CAA+C,kDAAkD,kDAAkD,mDAAmD,mDAAmD,uCAAuC,kCAAkC,gCAAgC,kFAAkF,mBAAmB,mCAAmC,kbAAkb,oEAAoE,QAAQ,IAAI,yBAAyB,sCAAsC,KAAK,mBAAmB,0BAA0B,4BAA4B,oBAAoB,SAAS,aAAa,4CAA4C,yBAAyB,WAAW,EAAE,yBAAyB,qEAAqE,mCAAmC,oCAAoC,aAAa,kCAAkC,qDAAqD,8CAA8C,4BAA4B,mDAAmD,KAAK,mFAAmF,sDAAsD,uDAAuD,8BAA8B,aAAa,gCAAgC,0BAA0B,YAAY,eAAe,IAAI,iHAAiH,+BAA+B,SAAS,6BAA6B,yBAAyB,EAAE,+CAA+C,kDAAkD,mJAAmJ,qBAAqB,wBAAwB,MAAM,sCAAsC,0BAA0B,0BAA0B,oBAAoB,qBAAqB,gBAAgB,kGAAkG,oBAAoB,wBAAwB,sBAAsB,wBAAwB,wBAAwB,wBAAwB,0BAA0B,0BAA0B,0BAA0B,0BAA0B,yCAAyC,0BAA0B,+BAA+B,gCAAgC,WAAW,SAAS,uBAAuB,2BAA2B,6BAA6B,0BAA0B,KAAK,yCAAyC,KAAK,mDAAmD,oBAAoB,kBAAkB,kBAAkB,kBAAkB,qBAAqB,6BAA6B,wBAAwB,kBAAkB,qBAAqB,2EAA2E,+BAA+B,uCAAuC,mCAAmC,6BAA6B,6BAA6B,wBAAwB,iCAAiC,mBAAmB,iCAAiC,uBAAuB,iCAAiC,mBAAmB,mBAAmB,sBAAsB,8EAA8E,gCAAgC,yCAAyC,oCAAoC,yBAAyB,yBAAyB,kCAAkC,uBAAuB,uBAAuB,8BAA8B,0BAA0B,uBAAuB,oCAAoC,uBAAuB,uBAAuB,8BAA8B,0BAA0B,0BAA0B,oCAAoC,wDAAwD,mDAAmD,2BAA2B,wEAAwE,8CAA8C,eAAe,gDAAgD,iCAAiC,WAAW,YAAY,eAAe,KAAK,iBAAiB,YAAY,SAAS,mCAAmC,oBAAoB,4CAA4C,wDAAwD,4GAA4G,iBAAiB,gBAAgB,mCAAmC,oBAAoB,qCAAqC,mCAAmC,kDAAkD,0CAA0C,wBAAwB,gDAAgD,oDAAoD,YAAY,aAAa,KAAK,qCAAqC,mCAAmC,gDAAgD,kFAAkF,cAAc,eAAe,cAAc,eAAe,kCAAkC,uBAAuB,6CAA6C,QAAQ,YAAY,KAAK,KAAK,sBAAsB,UAAU,EAAE,yBAAyB,6CAA6C,sCAAsC,EAAE,yBAAyB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,wBAAwB,wBAAwB,wBAAwB,0BAA0B,sBAAsB,sBAAsB,wBAAwB,wBAAwB,0BAA0B,sBAAsB,wBAAwB,4BAA4B,0BAA0B,sBAAsB,0BAA0B,0BAA0B,sBAAsB,8BAA8B,+BAA+B,8BAA8B,kBAAkB,qCAAqC,mDAAmD,4CAA4C,iCAAiC,kBAAkB,qCAAqC,kDAAkD,uBAAuB,gCAAgC,oCAAoC,0BAA0B,0BAA0B,mCAAmC,2BAA2B,aAAa,kDAAkD,6BAA6B,6BAA6B,kBAAkB,gCAAgC,2BAA2B,kBAAkB,sicAAsic,4BAA4B,cAAc,kBAAkB,kBAAkB,sCAAsC,sDAAsD,gBAAgB,yBAAyB,8BAA8B,yDAAyD,iCAAiC,+BAA+B,6BAA6B,YAAY,gBAAgB,wBAAwB,eAAe,+BAA+B,gBAAgB,wBAAwB,eAAe,+BAA+B,wBAAwB,gBAAgB,sCAAsC,oBAAoB,0CAA0C,6BAA6B,4BAA4B,0BAA0B,eAAe,+BAA+B,gBAAgB,GAAG,iCAAiC,+BAA+B,uBAAuB,iBAAiB,gDAAgD,4BAA4B,4BAA4B,4CAA4C,WAAW,iCAAiC,6CAA6C,oCAAoC,0BAA0B,0BAA0B,8CAA8C,8CAA8C,YAAY,cAAc,iCAAiC,oBAAoB,sCAAsC,WAAW,qBAAqB,0CAA0C,WAAW,oBAAoB,2CAA2C,2BAA2B,uBAAuB,WAAW,sBAAsB,2BAA2B,GAAG,oCAAoC,yBAAyB,IAAI,sCAAsC,iBAAiB,SAAS,SAAS,mEAAmE,gBAAgB,0iBAA0iB,wBAAwB,mCAAmC,gCAAgC,4BAA4B,8EAA8E,aAAa,gCAAgC,iBAAiB,82CAA82C,6CAA6C,WAAW,0BAA0B,yCAAyC,8CAA8C,4BAA4B,SAAS,iCAAiC,qBAAqB,oBAAoB,uKAAuK,sCAAsC,2BAA2B,YAAY,mCAAmC,kCAAkC,yBAAyB,gBAAgB,wCAAwC,oDAAoD,yDAAyD,mFAAmF,oDAAoD,yCAAyC,YAAY,mBAAmB,KAAK,6EAA6E,yBAAyB,qBAAqB,oDAAoD,yBAAyB,iDAAiD,kCAAkC,yCAAyC,+BAA+B,0BAA0B,4BAA4B,SAAS,sCAAsC,yBAAyB,IAAI,uIAAuI,sBAAsB,gCAAgC,kCAAkC,gEAAgE,SAAS,SAAS,mEAAmE,gBAAgB,sCAAsC,yBAAyB,IAAI,mEAAmE,UAAU,0BAA0B,mCAAmC,+CAA+C,yCAAyC,eAAe,wBAAwB,6EAA6E,gBAAgB,KAAK,mBAAmB,EAAE,YAAY,SAAS,KAAK,2BAA2B,+BAA+B,YAAY,MAAM,KAAK,8CAA8C,SAAS,WAAW,SAAS,mEAAmE,gBAAgB,qCAAqC,yBAAyB,IAAI,SAAS,SAAS,mEAAmE,gBAAgB,4BAA4B,6BAA6B,oBAAoB,sCAAsC,qBAAqB,kCAAkC,qCAAqC,qCAAqC,GAAG,8CAA8C,mDAAmD,iCAAiC,4CAA4C,uCAAuC,kBAAkB,qCAAqC,IAAI,8CAA8C,SAAS,8CAA8C,yBAAyB,6CAA6C,IAAI,+CAA+C,SAAS,8CAA8C,yBAAyB,6BAA6B,IAAI,+BAA+B,SAAS,8CAA8C,yBAAyB,6BAA6B,IAAI,sCAAsC,SAAS,8CAA8C,yBAAyB,qCAAqC,IAAI,uCAAuC,SAAS,8CAA8C,yBAAyB,yBAAyB,IAAI,2BAA2B,SAAS,8CAA8C,yBAAyB,iDAAiD,IAAI,mDAAmD,SAAS,8CAA8C,yBAAyB,yCAAyC,IAAI,2CAA2C,SAAS,8CAA8C,yBAAyB,qBAAqB,6QAA6Q,sBAAsB,+jCAA+jC;AACvmjD;AACA,aAAa,uBAAuB,oBAAoB,wBAAwB,oBAAoB,wBAAwB,oBAAoB,wBAAwB,oBAAoB,yBAAyB,oBAAoB,yBAAyB,oBAAoB,0BAA0B,oBAAoB,0BAA0B,oBAAoB,wBAAwB,2BAA2B,0BAA0B,kBAAkB,qBAAqB,sBAAsB,oBAAoB,QAAQ,QAAQ,QAAQ,QAAQ,mCAAmC,0BAA0B,QAAQ,wBAAwB,sBAAsB,uBAAuB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,uBAAuB,uBAAuB,uBAAuB,wBAAwB,sBAAsB,sBAAsB,uBAAuB,uBAAuB,sBAAsB,sBAAsB,wBAAwB,gBAAgB,kBAAkB,yBAAyB,0BAA0B,mCAAmC,uBAAuB,yBAAyB,qBAAqB,qBAAqB,uBAAuB,oBAAoB,0BAA0B,wBAAwB,gCAAgC,wBAAwB,gCAAgC,iCAAiC,uBAAuB,uBAAuB,kBAAkB,8BAA8B,yBAAyB,kCAAkC,+BAA+B,yBAAyB,8BAA8B,sCAAsC,yBAAyB,sCAAsC,WAAW,uBAAuB,uFAAuF,mBAAmB,mBAAmB,mBAAmB,mBAAmB,mBAAmB,mBAAmB,mBAAmB,mBAAmB,iBAAiB;AAC3iE;AACA,eAAe,MAAM,wFAAwF,IAAI,SAAS,IAAI,iBAAiB,sBAAsB,QAAQ,YAAY,QAAQ,UAAU,cAAc,mBAAmB,QAAQ,YAAY,QAAQ,YAAY,kCAAkC,KAAK,aAAa,UAAU,OAAO,cAAc,UAAU,kBAAkB,IAAI,IAAI,WAAW,YAAY,gBAAgB,QAAQ,OAAO,eAAe,eAAe,YAAY,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,wBAAwB,mBAAmB,QAAQ,YAAY,QAAQ,YAAY,iBAAiB,YAAY,UAAU,KAAK,aAAa,UAAU,IAAI,aAAa,cAAc,QAAQ,cAAc,YAAY,QAAQ,YAAY,QAAQ,mBAAmB,OAAO,WAAW,YAAY,IAAI,QAAQ,KAAK,QAAQ,YAAY,UAAU,aAAa,YAAY,aAAa,UAAU,UAAU,IAAI,IAAI,WAAW,YAAY,MAAM,eAAe,YAAY,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,wCAAwC,qBAAqB,0CAA0C,OAAO,IAAI,IAAI,KAAK,GAAG,qBAAqB,cAAc,QAAQ,QAAQ,0CAA0C,gBAAgB,IAAI,IAAI,QAAQ,gBAAgB,eAAe,eAAe,oBAAoB,SAAS,YAAY,OAAO,SAAS,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,QAAQ,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,UAAU,IAAI,KAAK,cAAc,aAAa,YAAY,IAAI,SAAS,WAAW,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,kBAAkB,OAAO,KAAK,4CAA4C,YAAY,aAAa,eAAe,QAAQ,aAAa,aAAa,eAAe,QAAQ,aAAa,cAAc,SAAS,aAAa,QAAQ,cAAc,UAAU,kBAAkB,KAAK,cAAc,cAAc,YAAY,QAAQ,YAAY,QAAQ,mBAAmB,OAAO,WAAW,YAAY,IAAI,QAAQ,KAAK,QAAQ,YAAY,UAAU,aAAa,YAAY,aAAa,UAAU,UAAU,QAAQ,IAAI,WAAW,SAAS,SAAS,SAAS,2BAA2B,SAAS,OAAO,YAAY,MAAM,QAAQ,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,sBAAsB,YAAY,IAAI,IAAI,KAAK,KAAK,IAAI,gCAAgC,IAAI,SAAS,qBAAqB,sBAAsB,IAAI,IAAI,IAAI,KAAK,QAAQ,KAAK,IAAI,IAAI,eAAe,2BAA2B,4BAA4B,WAAW,MAAM,IAAI,KAAK,MAAM,qBAAqB,SAAS,cAAc,sBAAsB,OAAO,YAAY,OAAO,IAAI,MAAM,eAAe,YAAY,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,IAAI,wCAAwC,OAAO,IAAI,IAAI,KAAK,IAAI,MAAM,sBAAsB,IAAI,qBAAqB,cAAc,QAAQ,QAAQ,0CAA0C,OAAO,IAAI,IAAI,MAAM,KAAK,IAAI,MAAM,2CAA2C,QAAQ,iBAAiB,IAAI,IAAI,WAAW,eAAe,eAAe,oBAAoB,SAAS,YAAY,OAAO,SAAS,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,QAAQ,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,UAAU,KAAK,cAAc,aAAa,YAAY,SAAS,SAAS,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,YAAY,UAAU,OAAO,KAAK,4CAA4C,OAAO,IAAI,OAAO,aAAa,eAAe,QAAQ,aAAa,aAAa,eAAe,MAAM,aAAa,aAAa,IAAI,SAAS,SAAS,SAAS,iBAAiB,cAAc,cAAc,YAAY,QAAQ,cAAc,mBAAmB,YAAY,OAAO,WAAW,YAAY,IAAI,QAAQ,KAAK,QAAQ,YAAY,UAAU,aAAa,YAAY,aAAa,MAAM,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,aAAa,SAAS,YAAY,UAAU,OAAO,WAAW,YAAY,UAAU,aAAa,aAAa,YAAY,MAAM,gCAAgC,YAAY,SAAS,4BAA4B,KAAK,MAAM,qBAAqB,YAAY,OAAO,KAAK,MAAM,KAAK,OAAO,KAAK,cAAc,UAAU,aAAa,aAAa,YAAY,MAAM,mBAAmB,QAAQ,YAAY,aAAa,UAAU,YAAY,aAAa,aAAa,OAAO,KAAK,QAAQ,cAAc,UAAU,kBAAkB,SAAS,QAAQ,IAAI,WAAW,SAAS,SAAS,UAAU,SAAS,YAAY,iBAAiB,QAAQ,YAAY,aAAa,QAAQ,UAAU,UAAU,cAAc,YAAY,cAAc,KAAK,UAAU,UAAU,cAAc,UAAU,kBAAkB,QAAQ,IAAI,WAAW,YAAY,gBAAgB,QAAQ,UAAU,YAAY,QAAQ,UAAU,cAAc,cAAc,QAAQ,IAAI,WAAW,iBAAiB,aAAa,aAAa,WAAW,WAAW,UAAU,UAAU,mBAAmB,UAAU,UAAU,OAAO,iBAAiB,SAAS,SAAS,QAAQ,QAAQ,MAAM,iBAAiB,IAAI,IAAI,WAAW,YAAY,yDAAyD,IAAI,IAAI,WAAW,sBAAsB,YAAY,WAAW,OAAO,SAAS,YAAY,8DAA8D,cAAc,OAAO,MAAM,QAAQ,SAAS,QAAQ,qBAAqB,YAAY,uCAAuC,kBAAkB,IAAI,IAAI,MAAM,SAAS,KAAK,IAAI,OAAO,SAAS,WAAW,SAAS,kBAAkB,UAAU,mIAAmI,YAAY,mCAAmC,IAAI,MAAM,YAAY,iBAAiB,IAAI,IAAI,MAAM,QAAQ,KAAK,IAAI,OAAO,SAAS,SAAS,kBAAkB,QAAQ,qEAAqE,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,QAAQ,YAAY,YAAY,sBAAsB,IAAI,IAAI,MAAM,QAAQ,wBAAwB,UAAU,IAAI,MAAM,KAAK,QAAQ,IAAI,MAAM,SAAS,SAAS,kBAAkB,MAAM,KAAK,IAAI,MAAM,SAAS,4JAA4J,QAAQ,IAAI,MAAM,eAAe,kBAAkB,UAAU,mCAAmC,YAAY,SAAS,OAAO,SAAS,YAAY,QAAQ,YAAY,mBAAmB,MAAM,MAAM,cAAc,YAAY,SAAS,kEAAkE,YAAY,QAAQ,qBAAqB,QAAQ,sBAAsB,UAAU,UAAU,cAAc,eAAe,gBAAgB,MAAM,mCAAmC,QAAQ,OAAO,SAAS,uBAAuB,MAAM,MAAM,cAAc,YAAY,SAAS,qCAAqC,UAAU,QAAQ,sBAAsB,QAAQ,2BAA2B,QAAQ,2BAA2B,QAAQ,UAAU,cAAc,oBAAoB,uBAAuB,kBAAkB,UAAU,UAAU,cAAc,YAAY,MAAM,cAAc,eAAe,OAAO,QAAQ,mBAAmB,cAAc,eAAe,iBAAiB,wBAAwB,MAAM,KAAK,aAAa,YAAY,OAAO,KAAK,eAAe,eAAe,oBAAoB,SAAS,QAAQ,YAAY,OAAO,YAAY,OAAO,IAAI,MAAM,SAAS,SAAS,SAAS,YAAY,QAAQ,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,UAAU,KAAK,cAAc,aAAa,YAAY,SAAS,YAAY,eAAe,gBAAgB,0BAA0B,4CAA4C,cAAc,KAAK,UAAU,aAAa,wBAAwB,QAAQ,SAAS,aAAa,SAAS,YAAY,QAAQ,aAAa,aAAa,cAAc,YAAY,aAAa,aAAa,SAAS,QAAQ,QAAQ,SAAS,QAAQ,mBAAmB,cAAc,YAAY,QAAQ,cAAc,mBAAmB,YAAY,OAAO,WAAW,YAAY,IAAI,QAAQ,KAAK,QAAQ,YAAY,UAAU,aAAa,YAAY,aAAa,MAAM,QAAQ,aAAa,KAAK,mBAAmB,KAAK,MAAM,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,aAAa,SAAS,YAAY,UAAU,YAAY,OAAO,WAAW,YAAY,UAAU,aAAa,aAAa,YAAY,MAAM,gCAAgC,YAAY,SAAS,4BAA4B,MAAM,MAAM,qBAAqB,YAAY,OAAO,MAAM,MAAM,KAAK,OAAO,KAAK,eAAe,UAAU,aAAa,aAAa,YAAY,MAAM,oBAAoB,QAAQ,YAAY,aAAa,UAAU,YAAY,aAAa,aAAa,OAAO,KAAK,kBAAkB,UAAU,UAAU,cAAc,SAAS,QAAQ,IAAI,WAAW,OAAO,SAAS,YAAY,0DAA0D,cAAc,UAAU,QAAQ,2BAA2B,SAAS,kBAAkB,QAAQ,QAAQ,qBAAqB,QAAQ,YAAY,UAAU,UAAU,cAAc,eAAe,gBAAgB,QAAQ,WAAW,gBAAgB,kBAAkB,kBAAkB,mBAAmB,UAAU,UAAU,UAAU,UAAU,SAAS,GAAG,IAAI,QAAQ,UAAU,yBAAyB,iBAAiB,QAAQ,mBAAmB,cAAc,UAAU,QAAQ,cAAc,mBAAmB,YAAY,OAAO,WAAW,YAAY,IAAI,QAAQ,KAAK,QAAQ,YAAY,UAAU,aAAa,YAAY,aAAa,MAAM,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,aAAa,aAAa,UAAU,YAAY,OAAO,WAAW,YAAY,UAAU,aAAa,aAAa,YAAY,MAAM,gCAAgC,YAAY,SAAS,4BAA4B,MAAM,MAAM,qBAAqB,YAAY,OAAO,MAAM,MAAM,KAAK,OAAO,KAAK,eAAe,UAAU,aAAa,aAAa,YAAY,MAAM,oBAAoB,QAAQ,YAAY,aAAa,UAAU,YAAY,aAAa,aAAa,QAAQ,KAAK,YAAY,kCAAkC,UAAU,UAAU,UAAU,gBAAgB,WAAW,IAAI,GAAG,mBAAmB,aAAa,YAAY,QAAQ,iBAAiB,QAAQ,qBAAqB,QAAQ,YAAY,UAAU,UAAU,cAAc,eAAe,gBAAgB,SAAS,YAAY,gBAAgB,QAAQ,UAAU,YAAY,QAAQ,UAAU,cAAc,cAAc,QAAQ,IAAI,YAAY,SAAS,WAAW,IAAI,IAAI,WAAW,yBAAyB,MAAM,KAAK,MAAM,MAAM,MAAM,MAAM,kGAAkG,IAAI,UAAU,QAAQ,IAAI,UAAU,IAAI,UAAU,UAAU,SAAS,QAAQ,YAAY,KAAK,IAAI,OAAO,KAAK,kBAAkB,4CAA4C,QAAQ,eAAe,8CAA8C,eAAe,SAAS,4BAA4B,OAAO,cAAc,OAAO,mBAAmB,MAAM,SAAS,4BAA4B,MAAM,GAAG,SAAS,SAAS,gBAAgB,oBAAoB,cAAc,MAAM,KAAK,QAAQ,OAAO,SAAS,SAAS,YAAY,kBAAkB,8BAA8B,iBAAiB,SAAS,WAAW,wBAAwB,SAAS,aAAa,UAAU,aAAa,IAAI,GAAG,MAAM,QAAQ,uBAAuB,kBAAkB,iCAAiC,WAAW,QAAQ,SAAS,cAAc,QAAQ,QAAQ,kCAAkC,UAAU,eAAe,UAAU,qBAAqB,UAAU,mBAAmB,UAAU,oBAAoB,MAAM,cAAc,MAAM,oBAAoB,UAAU,gBAAgB,KAAK,IAAI,YAAY,oBAAoB,IAAI,GAAG,UAAU,UAAU,QAAQ,qBAAqB,cAAc,YAAY,IAAI,IAAI,SAAS,gBAAgB,SAAS,iBAAiB,IAAI,GAAG,wBAAwB,sBAAsB,IAAI,sBAAsB,UAAU,sBAAsB,SAAS,oBAAoB,MAAM,SAAS,WAAW,IAAI,SAAS,sBAAsB,SAAS,oBAAoB,WAAW,kBAAkB,UAAU,eAAe,YAAY,SAAS,YAAY,qBAAqB,aAAa,GAAG,QAAQ,cAAc,gBAAgB,cAAc,UAAU,IAAI,IAAI,GAAG,YAAY,kBAAkB,aAAa,QAAQ,mBAAmB,yBAAyB,OAAO,IAAI,IAAI,KAAK,UAAU,IAAI,SAAS,KAAK,yBAAyB,IAAI,QAAQ,gCAAgC,kBAAkB,UAAU,eAAe,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,gBAAgB,eAAe,YAAY,cAAc,KAAK,GAAG,SAAS,QAAQ,qBAAqB,SAAS,aAAa,WAAW,uCAAuC,gCAAgC,WAAW,+BAA+B,kBAAkB,YAAY,KAAK,GAAG,SAAS,QAAQ,gBAAgB,UAAU,YAAY,oBAAoB,iBAAiB,kBAAkB,qEAAqE,YAAY,wCAAwC,MAAM,kBAAkB,SAAS,SAAS,QAAQ,UAAU,WAAW,QAAQ,UAAU,oBAAoB,IAAI,SAAS,SAAS,UAAU,gBAAgB,SAAS,UAAU,kBAAkB,UAAU,uBAAuB,YAAY,SAAS,eAAe,YAAY,cAAc,KAAK,GAAG,SAAS,QAAQ,qBAAqB,SAAS,SAAS,QAAQ,kBAAkB,IAAI,KAAK,IAAI,IAAI,IAAI,SAAS,iBAAiB,IAAI,MAAM,SAAS,oBAAoB,KAAK,IAAI,OAAO,QAAQ,SAAS,gBAAgB,yBAAyB,SAAS,WAAW,KAAK,SAAS,SAAS,MAAM,OAAO,qDAAqD,IAAI,KAAK,GAAG,SAAS,QAAQ,8BAA8B,SAAS,SAAS,sBAAsB,kBAAkB,QAAQ,cAAc,kBAAkB,IAAI,MAAM,KAAK,UAAU,cAAc,kBAAkB,IAAI,OAAO,SAAS,KAAK,IAAI,MAAM,SAAS,MAAM,aAAa,gBAAgB,MAAM,IAAI,cAAc,KAAK,cAAc,8BAA8B,IAAI,gBAAgB,SAAS,WAAW,iBAAiB,wBAAwB,SAAS,UAAU,IAAI,QAAQ,cAAc,eAAe,UAAU,qBAAqB,MAAM,kBAAkB,QAAQ,IAAI,QAAQ,IAAI,GAAG,sBAAsB,iBAAiB,iBAAiB,WAAW,KAAK,qBAAqB,mBAAmB,YAAY,mBAAmB,cAAc,QAAQ,oBAAoB,oBAAoB,gCAAgC,sBAAsB,gBAAgB,mBAAmB,YAAY,mBAAmB,oBAAoB,QAAQ,SAAS,2BAA2B,IAAI,MAAM,SAAS,mBAAmB,KAAK,YAAY,aAAa,QAAQ,WAAW,IAAI,QAAQ,QAAQ,IAAI,GAAG,sBAAsB,iBAAiB,WAAW,IAAI,oBAAoB,QAAQ,UAAU,cAAc,IAAI,MAAM,aAAa,IAAI,KAAK,sBAAsB,mBAAmB,YAAY,mBAAmB,SAAS,QAAQ,wBAAwB,QAAQ,QAAQ,4BAA4B,qBAAqB,cAAc,oBAAoB,KAAK,cAAc,QAAQ,sBAAsB,UAAU,gDAAgD,oBAAoB,SAAS,IAAI,2BAA2B,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,gGAAgG,IAAI,SAAS,SAAS,IAAI,SAAS,QAAQ,SAAS,UAAU,WAAW,SAAS,IAAI,SAAS,QAAQ,IAAI,IAAI,IAAI,WAAW,0CAA0C,SAAS,WAAW,KAAK,MAAM,KAAK,QAAQ,MAAM,SAAS,YAAY,iBAAiB,KAAK,MAAM,SAAS,WAAW,kBAAkB,SAAS,IAAI,IAAI,QAAQ,QAAQ,IAAI,QAAQ,WAAW,QAAQ,UAAU,YAAY,IAAI,0BAA0B,IAAI,6BAA6B,QAAQ,QAAQ,UAAU,uBAAuB,WAAW,SAAS,QAAQ,eAAe,QAAQ,IAAI,SAAS,QAAQ,oBAAoB,aAAa,oBAAoB,SAAS,QAAQ,YAAY,UAAU,UAAU,YAAY,oBAAoB,kBAAkB,IAAI,IAAI,SAAS,OAAO,eAAe,IAAI,QAAQ,MAAM,QAAQ,UAAU,YAAY,oBAAoB,mBAAmB,UAAU,SAAS,SAAS,kBAAkB,QAAQ,oBAAoB,iCAAiC,kBAAkB,iCAAiC,IAAI,QAAQ,KAAK,QAAQ,KAAK,MAAM,MAAM,2BAA2B,YAAY,YAAY,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,UAAU,UAAU,YAAY,aAAa,KAAK,UAAU,YAAY,KAAK,MAAM,YAAY,uBAAuB,sBAAsB,YAAY,UAAU,YAAY,MAAM,QAAQ,oBAAoB,iCAAiC,kBAAkB,iCAAiC,QAAQ,UAAU,MAAM,QAAQ,KAAK,QAAQ,MAAM,2BAA2B,YAAY,YAAY,SAAS,UAAU,IAAI,UAAU,SAAS,IAAI,SAAS,+BAA+B,KAAK,QAAQ,QAAQ,UAAU,0CAA0C,QAAQ,mBAAmB,IAAI,IAAI,WAAW,iBAAiB,KAAK,MAAM,WAAW,0BAA0B,KAAK,QAAQ,UAAU,KAAK,MAAM,iBAAiB,aAAa,cAAc,IAAI,gBAAgB,YAAY,KAAK,MAAM,OAAO,IAAI,QAAQ,UAAU,SAAS,yBAAyB,IAAI,IAAI,SAAS,YAAY,+BAA+B,WAAW,oBAAoB,iBAAiB,iCAAiC,QAAQ,gBAAgB,IAAI,IAAI,WAAW,QAAQ,gBAAgB,IAAI,IAAI,WAAW,QAAQ,YAAY,UAAU,4BAA4B,IAAI,IAAI,WAAW,QAAQ,gBAAgB,IAAI,IAAI,WAAW,QAAQ,gBAAgB,IAAI,IAAI,WAAW,QAAQ,gBAAgB,IAAI,IAAI,WAAW,QAAQ,YAAY,UAAU,4BAA4B,IAAI,IAAI,WAAW,SAAS,IAAI,IAAI,YAAY,UAAU,MAAM,cAAc,MAAM,KAAK,MAAM,kBAAkB,IAAI,KAAK,MAAM,UAAU,IAAI,YAAY,cAAc,cAAc,QAAQ,IAAI,OAAO,iCAAiC,IAAI,KAAK,MAAM,mBAAmB,IAAI,YAAY,cAAc,YAAY,oBAAoB,IAAI,IAAI,UAAU,YAAY,IAAI,OAAO,KAAK,QAAQ,KAAK,kBAAkB,4CAA4C,KAAK,SAAS,UAAU,IAAI,IAAI,OAAO,YAAY,cAAc,KAAK,MAAM,SAAS,gBAAgB,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,MAAM,UAAU,SAAS,kBAAkB,KAAK,MAAM,UAAU,YAAY,aAAa,KAAK,MAAM,SAAS,gBAAgB,UAAU,UAAU,KAAK,IAAI,KAAK,MAAM,SAAS,YAAY,OAAO,eAAe,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,MAAM,oEAAoE,2BAA2B,IAAI,WAAW,SAAS,IAAI,OAAO,IAAI,IAAI,KAAK,SAAS,mBAAmB,IAAI,YAAY,cAAc,mBAAmB,+BAA+B,QAAQ,uBAAuB,IAAI,IAAI,IAAI,KAAK,mBAAmB,cAAc,IAAI,KAAK,mBAAmB,IAAI,cAAc,WAAW,IAAI,IAAI,OAAO,YAAY,YAAY,IAAI,mBAAmB,IAAI,IAAI,IAAI,IAAI,SAAS,YAAY,YAAY,YAAY,mCAAmC,QAAQ,uBAAuB,WAAW,YAAY,KAAK,QAAQ,eAAe,OAAO,IAAI,KAAK,KAAK,IAAI,SAAS,YAAY,OAAO,KAAK,QAAQ,YAAY,QAAQ,gBAAgB,KAAK,QAAQ,UAAU,iBAAiB,KAAK,MAAM,eAAe,SAAS,cAAc,IAAI,oBAAoB,aAAa,oBAAoB,QAAQ,IAAI,wBAAwB,sBAAsB,mBAAmB,IAAI,oBAAoB,kBAAkB,IAAI,SAAS,QAAQ,kBAAkB,QAAQ,kBAAkB,eAAe,UAAU,qBAAqB,eAAe,UAAU,oBAAoB,IAAI,kCAAkC,KAAK,IAAI,SAAS,mBAAmB,YAAY,mBAAmB,QAAQ,cAAc,IAAI,SAAS,SAAS,qBAAqB,KAAK,QAAQ,QAAQ,cAAc,IAAI,QAAQ,SAAS,IAAI,WAAW,iBAAiB,MAAM,MAAM,wGAAwG,IAAI,UAAU,UAAU,UAAU,UAAU,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,IAAI,UAAU,UAAU,aAAa,OAAO,MAAM,IAAI,IAAI,WAAW,QAAQ,QAAQ,YAAY,iBAAiB,iBAAiB,gCAAgC,iCAAiC,YAAY,MAAM,aAAa,IAAI,IAAI,WAAW,SAAS,8BAA8B,UAAU,sBAAsB,SAAS,YAAY,YAAY,QAAQ,QAAQ,SAAS,GAAG,YAAY,0BAA0B,KAAK,YAAY,YAAY,QAAQ,UAAU,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,kBAAkB,UAAU,eAAe,KAAK,SAAS,IAAI,YAAY,SAAS,aAAa,aAAa,oBAAoB,IAAI,IAAI,WAAW,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,QAAQ,QAAQ,0BAA0B,YAAY,YAAY,qBAAqB,WAAW,QAAQ,QAAQ,SAAS,IAAI,GAAG,YAAY,cAAc,YAAY,0BAA0B,KAAK,YAAY,YAAY,QAAQ,UAAU,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,kBAAkB,UAAU,eAAe,iBAAiB,aAAa,aAAa,gCAAgC,QAAQ,oBAAoB,YAAY,QAAQ,QAAQ,SAAS,IAAI,KAAK,QAAQ,YAAY,kBAAkB,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,sBAAsB,QAAQ,iBAAiB,SAAS,YAAY,cAAc,YAAY,0BAA0B,KAAK,YAAY,YAAY,QAAQ,UAAU,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,kBAAkB,UAAU,eAAe,iBAAiB,aAAa,aAAa,eAAe,cAAc,MAAM,IAAI,QAAQ,KAAK,cAAc,SAAS,SAAS,YAAY,cAAc,YAAY,0BAA0B,KAAK,YAAY,YAAY,QAAQ,UAAU,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,kBAAkB,UAAU,eAAe,iBAAiB,aAAa,aAAa,gBAAgB,cAAc,MAAM,IAAI,QAAQ,KAAK,cAAc,SAAS,SAAS,qBAAqB,KAAK,QAAQ,YAAY,cAAc,YAAY,IAAI,SAAS,YAAY,0BAA0B,KAAK,YAAY,YAAY,QAAQ,UAAU,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,kBAAkB,UAAU,eAAe,YAAY,iBAAiB,aAAa,SAAS,IAAI,SAAS,KAAK,cAAc,YAAY,0BAA0B,KAAK,YAAY,YAAY,QAAQ,UAAU,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,kBAAkB,UAAU,eAAe,iBAAiB,aAAa,SAAS,IAAI,SAAS,UAAU,QAAQ,yBAAyB,IAAI,QAAQ,SAAS,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,wBAAwB,iBAAiB,IAAI,QAAQ,QAAQ,wBAAwB,GAAG,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,sBAAsB,QAAQ,oBAAoB,KAAK,SAAS,mBAAmB,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,MAAM,0BAA0B,SAAS,SAAS,KAAK,aAAa,IAAI,SAAS,MAAM,IAAI,IAAI,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,oHAAoH,IAAI,UAAU,UAAU,UAAU,UAAU,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,IAAI,UAAU,UAAU,UAAU,UAAU,sBAAsB,IAAI,IAAI,WAAW,UAAU,IAAI,SAAS,GAAG,UAAU,QAAQ,mBAAmB,IAAI,GAAG,cAAc,mBAAmB,mCAAmC,QAAQ,oBAAoB,IAAI,IAAI,IAAI,KAAK,IAAI,SAAS,mBAAmB,OAAO,uBAAuB,IAAI,KAAK,SAAS,iBAAiB,QAAQ,SAAS,wCAAwC,oBAAoB,iBAAiB,QAAQ,kBAAkB,kBAAkB,QAAQ,mBAAmB,KAAK,OAAO,KAAK,YAAY,UAAU,6BAA6B,SAAS,cAAc,KAAK,WAAW,UAAU,UAAU,UAAU,gBAAgB,kBAAkB,UAAU,UAAU,YAAY,WAAW,eAAe,SAAS,sCAAsC,YAAY,cAAc,eAAe,cAAc,QAAQ,WAAW,gBAAgB,MAAM,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,OAAO,SAAS,YAAY,UAAU,qBAAqB,OAAO,UAAU,IAAI,MAAM,KAAK,YAAY,WAAW,YAAY,KAAK,OAAO,UAAU,SAAS,mBAAmB,SAAS,UAAU,aAAa,UAAU,IAAI,GAAG,cAAc,QAAQ,cAAc,wBAAwB,YAAY,eAAe,cAAc,cAAc,QAAQ,aAAa,YAAY,YAAY,iBAAiB,YAAY,eAAe,cAAc,cAAc,QAAQ,2BAA2B,QAAQ,oBAAoB,4BAA4B,QAAQ,UAAU,WAAW,MAAM,OAAO,UAAU,6BAA6B,UAAU,UAAU,YAAY,WAAW,eAAe,SAAS,sCAAsC,YAAY,cAAc,eAAe,cAAc,QAAQ,WAAW,gBAAgB,MAAM,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,OAAO,SAAS,OAAO,gBAAgB,OAAO,UAAU,IAAI,QAAQ,KAAK,QAAQ,YAAY,WAAW,UAAU,IAAI,OAAO,KAAK,UAAU,OAAO,IAAI,YAAY,SAAS,iBAAiB,UAAU,IAAI,GAAG,qBAAqB,QAAQ,OAAO,SAAS,mBAAmB,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,sBAAsB,kCAAkC,iBAAiB,4BAA4B,QAAQ,GAAG,+BAA+B,2BAA2B,YAAY,eAAe,eAAe,cAAc,QAAQ,OAAO,MAAM,IAAI,GAAG,QAAQ,iBAAiB,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,2BAA2B,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,iBAAiB,QAAQ,mBAAmB,QAAQ,qBAAqB,QAAQ,oBAAoB,SAAS,gCAAgC,UAAU,kCAAkC,UAAU,kCAAkC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,UAAU,mCAAmC,SAAS,UAAU,SAAS,gBAAgB,WAAW,GAAG,cAAc,IAAI,SAAS,2BAA2B,0BAA0B,QAAQ,UAAU,iBAAiB,SAAS,0BAA0B,QAAQ,uBAAuB,WAAW,SAAS,cAAc,oBAAoB,0BAA0B,IAAI,SAAS,IAAI,IAAI,WAAW,6BAA6B,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,qNAAqN,KAAK,UAAU,YAAY,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,KAAK,WAAW,WAAW,UAAU,YAAY,UAAU,YAAY,4BAA4B,QAAQ,QAAQ,iBAAiB,KAAK,SAAS,WAAW,SAAS,OAAO,SAAS,aAAa,OAAO,SAAS,UAAU,UAAU,UAAU,aAAa,UAAU,UAAU,QAAQ,QAAQ,QAAQ,IAAI,IAAI,IAAI,IAAI,GAAG,OAAO,mBAAmB,IAAI,SAAS,MAAM,WAAW,kBAAkB,gBAAgB,SAAS,QAAQ,eAAe,MAAM,iBAAiB,QAAQ,YAAY,SAAS,4BAA4B,MAAM,QAAQ,iBAAiB,IAAI,GAAG,kBAAkB,QAAQ,QAAQ,WAAW,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,wCAAwC,QAAQ,mBAAmB,iBAAiB,QAAQ,IAAI,GAAG,iBAAiB,aAAa,OAAO,mBAAmB,UAAU,SAAS,aAAa,UAAU,MAAM,6CAA6C,2BAA2B,aAAa,eAAe,gBAAgB,eAAe,QAAQ,mCAAmC,QAAQ,mBAAmB,UAAU,SAAS,aAAa,MAAM,mDAAmD,2BAA2B,aAAa,eAAe,gBAAgB,eAAe,QAAQ,oCAAoC,KAAK,OAAO,mBAAmB,UAAU,SAAS,aAAa,MAAM,6CAA6C,2BAA2B,aAAa,eAAe,gBAAgB,eAAe,QAAQ,mCAAmC,mBAAmB,UAAU,SAAS,aAAa,SAAS,QAAQ,gBAAgB,KAAK,2CAA2C,mBAAmB,UAAU,SAAS,aAAa,2BAA2B,aAAa,eAAe,gBAAgB,eAAe,QAAQ,mCAAmC,+CAA+C,mBAAmB,UAAU,SAAS,aAAa,2BAA2B,aAAa,eAAe,gBAAgB,eAAe,QAAQ,oCAAoC,oDAAoD,mBAAmB,UAAU,SAAS,aAAa,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,wCAAwC,oDAAoD,mBAAmB,UAAU,SAAS,aAAa,2BAA2B,aAAa,eAAe,gBAAgB,eAAe,QAAQ,wCAAwC,QAAQ,sBAAsB,cAAc,QAAQ,sBAAsB,cAAc,QAAQ,oBAAoB,KAAK,SAAS,6BAA6B,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,+NAA+N,KAAK,UAAU,WAAW,WAAW,WAAW,WAAW,WAAW,MAAM,YAAY,YAAY,UAAU,UAAU,YAAY,gBAAgB,qCAAqC,iBAAiB,SAAS,kBAAkB,KAAK,SAAS,WAAW,SAAS,OAAO,SAAS,OAAO,SAAS,UAAU,UAAU,WAAW,WAAW,aAAa,aAAa,UAAU,UAAU,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,OAAO,mBAAmB,IAAI,SAAS,MAAM,WAAW,kBAAkB,gBAAgB,SAAS,QAAQ,iBAAiB,iBAAiB,YAAY,SAAS,4BAA4B,MAAM,QAAQ,iBAAiB,IAAI,GAAG,kBAAkB,QAAQ,QAAQ,WAAW,2BAA2B,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,0CAA0C,QAAQ,mBAAmB,IAAI,GAAG,kBAAkB,QAAQ,QAAQ,WAAW,2BAA2B,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,yCAAyC,QAAQ,mBAAmB,iBAAiB,IAAI,IAAI,SAAS,aAAa,OAAO,MAAM,IAAI,IAAI,SAAS,mBAAmB,QAAQ,QAAQ,WAAW,mBAAmB,QAAQ,QAAQ,WAAW,MAAM,4BAA4B,QAAQ,YAAY,iBAAiB,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,YAAY,YAAY,aAAa,QAAQ,mBAAmB,KAAK,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,YAAY,aAAa,wCAAwC,0CAA0C,yCAAyC,2CAA2C,QAAQ,kBAAkB,eAAe,KAAK,MAAM,kBAAkB,IAAI,IAAI,SAAS,mBAAmB,QAAQ,QAAQ,WAAW,mBAAmB,QAAQ,QAAQ,WAAW,kBAAkB,YAAY,QAAQ,YAAY,iBAAiB,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,YAAY,YAAY,aAAa,QAAQ,mBAAmB,KAAK,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,YAAY,aAAa,wCAAwC,0CAA0C,yCAAyC,2CAA2C,QAAQ,kBAAkB,eAAe,QAAQ,kBAAkB,aAAa,QAAQ,sBAAsB,cAAc,QAAQ,sBAAsB,cAAc,QAAQ,oBAAoB,KAAK,SAAS,eAAe,MAAM,oCAAoC,aAAa,SAAS,YAAY,eAAe,OAAO,QAAQ,cAAc,YAAY,iBAAiB,YAAY,QAAQ,sBAAsB,uBAAuB,QAAQ,YAAY,eAAe,IAAI,IAAI,MAAM,UAAU,aAAa,cAAc,YAAY,OAAO,QAAQ,cAAc,cAAc,eAAe,iBAAiB,wBAAwB,IAAI,IAAI,MAAM,KAAK,aAAa,YAAY,IAAI,IAAI,OAAO,eAAe,eAAe,oBAAoB,SAAS,QAAQ,YAAY,OAAO,YAAY,OAAO,IAAI,MAAM,SAAS,SAAS,SAAS,YAAY,QAAQ,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,UAAU,KAAK,cAAc,aAAa,YAAY,SAAS,MAAM,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,IAAI,IAAI,OAAO,KAAK,4CAA4C,OAAO,IAAI,IAAI,OAAO,aAAa,SAAS,YAAY,QAAQ,aAAa,aAAa,cAAc,MAAM,aAAa,aAAa,IAAI,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,IAAI,SAAS,uBAAuB,QAAQ,YAAY,iBAAiB,WAAW,YAAY,uBAAuB,kBAAkB,UAAU,UAAU,cAAc,uBAAuB,UAAU,UAAU,OAAO,iBAAiB,kBAAkB,UAAU,UAAU,cAAc,YAAY,OAAO,aAAa,QAAQ,iBAAiB,cAAc,eAAe,iBAAiB,wBAAwB,MAAM,KAAK,aAAa,YAAY,OAAO,KAAK,eAAe,eAAe,oBAAoB,SAAS,QAAQ,YAAY,OAAO,YAAY,OAAO,IAAI,MAAM,SAAS,SAAS,SAAS,YAAY,QAAQ,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,UAAU,IAAI,KAAK,cAAc,aAAa,YAAY,IAAI,SAAS,QAAQ,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,OAAO,KAAK,4CAA4C,YAAY,aAAa,SAAS,YAAY,QAAQ,aAAa,aAAa,cAAc,QAAQ,aAAa,eAAe,SAAS,cAAc,YAAY,uBAAuB,UAAU,QAAQ,KAAK,aAAa,cAAc,YAAY,IAAI,QAAQ,cAAc,mBAAmB,YAAY,OAAO,WAAW,YAAY,IAAI,QAAQ,KAAK,QAAQ,YAAY,UAAU,aAAa,YAAY,aAAa,OAAO,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,aAAa,aAAa,aAAa,YAAY,OAAO,WAAW,gCAAgC,YAAY,SAAS,4BAA4B,KAAK,MAAM,qBAAqB,YAAY,OAAO,KAAK,MAAM,KAAK,OAAO,KAAK,cAAc,UAAU,aAAa,aAAa,YAAY,MAAM,mBAAmB,QAAQ,YAAY,aAAa,UAAU,YAAY,aAAa,aAAa,OAAO,KAAK,YAAY,UAAU,aAAa,aAAa,YAAY,SAAS,mBAAmB,UAAU,aAAa,YAAY,SAAS,YAAY,YAAY,aAAa,WAAW,OAAO,6BAA6B,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,wPAAwP,KAAK,UAAU,WAAW,WAAW,WAAW,WAAW,WAAW,MAAM,YAAY,YAAY,UAAU,UAAU,YAAY,UAAU,YAAY,UAAU,YAAY,gBAAgB,qCAAqC,iBAAiB,SAAS,kBAAkB,KAAK,SAAS,WAAW,SAAS,OAAO,SAAS,OAAO,SAAS,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,aAAa,aAAa,UAAU,UAAU,UAAU,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,OAAO,mBAAmB,IAAI,SAAS,MAAM,WAAW,kBAAkB,gBAAgB,SAAS,QAAQ,iBAAiB,iBAAiB,YAAY,SAAS,6BAA6B,MAAM,QAAQ,iBAAiB,IAAI,GAAG,mBAAmB,QAAQ,QAAQ,WAAW,2BAA2B,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,yCAAyC,QAAQ,mBAAmB,IAAI,GAAG,mBAAmB,QAAQ,QAAQ,WAAW,2BAA2B,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,0CAA0C,QAAQ,mBAAmB,iBAAiB,IAAI,IAAI,SAAS,aAAa,OAAO,MAAM,IAAI,IAAI,SAAS,mBAAmB,QAAQ,QAAQ,WAAW,mBAAmB,QAAQ,QAAQ,WAAW,MAAM,4BAA4B,QAAQ,2BAA2B,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,uBAAuB,uCAAuC,0CAA0C,0BAA0B,2BAA2B,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,oCAAoC,QAAQ,kBAAkB,eAAe,KAAK,MAAM,kBAAkB,IAAI,IAAI,SAAS,mBAAmB,QAAQ,QAAQ,WAAW,mBAAmB,QAAQ,QAAQ,WAAW,kBAAkB,YAAY,QAAQ,2BAA2B,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,uBAAuB,uCAAuC,0CAA0C,0BAA0B,2BAA2B,aAAa,eAAe,gBAAgB,gBAAgB,SAAS,oCAAoC,QAAQ,kBAAkB,eAAe,QAAQ,kBAAkB,aAAa,QAAQ,sBAAsB,cAAc,QAAQ,sBAAsB,cAAc,QAAQ,oBAAoB,KAAK,SAAS,iBAAiB,MAAM,MAAM,gCAAgC,QAAQ,cAAc,cAAc,YAAY,iBAAiB,YAAY,QAAQ,uBAAuB,QAAQ,YAAY,eAAe,IAAI,IAAI,MAAM,UAAU,aAAa,cAAc,YAAY,OAAO,QAAQ,cAAc,cAAc,eAAe,iBAAiB,wBAAwB,IAAI,IAAI,MAAM,KAAK,aAAa,YAAY,IAAI,IAAI,OAAO,eAAe,eAAe,oBAAoB,SAAS,QAAQ,YAAY,OAAO,YAAY,OAAO,IAAI,MAAM,SAAS,SAAS,SAAS,YAAY,QAAQ,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,UAAU,KAAK,cAAc,aAAa,YAAY,SAAS,MAAM,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,IAAI,IAAI,OAAO,KAAK,4CAA4C,OAAO,IAAI,IAAI,OAAO,aAAa,SAAS,YAAY,QAAQ,aAAa,aAAa,cAAc,MAAM,aAAa,aAAa,IAAI,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,IAAI,SAAS,QAAQ,YAAY,WAAW,YAAY,uBAAuB,kBAAkB,UAAU,UAAU,cAAc,uBAAuB,UAAU,UAAU,OAAO,iBAAiB,kBAAkB,UAAU,UAAU,cAAc,YAAY,OAAO,aAAa,QAAQ,iBAAiB,cAAc,eAAe,iBAAiB,wBAAwB,MAAM,KAAK,aAAa,YAAY,OAAO,KAAK,eAAe,eAAe,oBAAoB,SAAS,QAAQ,YAAY,OAAO,YAAY,OAAO,IAAI,MAAM,SAAS,SAAS,SAAS,YAAY,QAAQ,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,UAAU,IAAI,KAAK,cAAc,aAAa,YAAY,IAAI,SAAS,QAAQ,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,OAAO,KAAK,4CAA4C,YAAY,aAAa,SAAS,YAAY,QAAQ,aAAa,aAAa,cAAc,QAAQ,aAAa,eAAe,SAAS,cAAc,YAAY,uBAAuB,UAAU,OAAO,SAAS,KAAK,aAAa,cAAc,YAAY,QAAQ,cAAc,mBAAmB,YAAY,OAAO,WAAW,YAAY,IAAI,QAAQ,KAAK,QAAQ,YAAY,UAAU,aAAa,YAAY,aAAa,OAAO,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,aAAa,aAAa,aAAa,YAAY,OAAO,WAAW,YAAY,UAAU,aAAa,aAAa,YAAY,OAAO,gCAAgC,YAAY,SAAS,4BAA4B,KAAK,MAAM,qBAAqB,YAAY,OAAO,KAAK,MAAM,KAAK,OAAO,KAAK,cAAc,UAAU,aAAa,aAAa,YAAY,OAAO,mBAAmB,QAAQ,YAAY,aAAa,UAAU,YAAY,aAAa,aAAa,QAAQ,eAAe,MAAM,wKAAwK,IAAI,WAAW,IAAI,WAAW,WAAW,UAAU,SAAS,SAAS,eAAe,mCAAmC,SAAS,wEAAwE,sDAAsD,OAAO,IAAI,IAAI,WAAW,UAAU,aAAa,cAAc,gBAAgB,cAAc,cAAc,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,cAAc,IAAI,KAAK,KAAK,SAAS,iBAAiB,iBAAiB,UAAU,QAAQ,oBAAoB,KAAK,YAAY,cAAc,IAAI,SAAS,GAAG,UAAU,QAAQ,mBAAmB,UAAU,QAAQ,UAAU,YAAY,0BAA0B,KAAK,iBAAiB,iEAAiE,YAAY,MAAM,KAAK,cAAc,IAAI,QAAQ,SAAS,sCAAsC,UAAU,KAAK,SAAS,iBAAiB,OAAO,YAAY,cAAc,eAAe,cAAc,QAAQ,IAAI,MAAM,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,IAAI,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,IAAI,IAAI,IAAI,IAAI,SAAS,YAAY,yBAAyB,yBAAyB,YAAY,yBAAyB,yBAAyB,YAAY,yBAAyB,yBAAyB,YAAY,yBAAyB,yBAAyB,YAAY,yBAAyB,yBAAyB,YAAY,yBAAyB,yBAAyB,YAAY,yBAAyB,yBAAyB,YAAY,yBAAyB,yBAAyB,iBAAiB,gHAAgH,iBAAiB,uGAAuG,sHAAsH,QAAQ,sBAAsB,aAAa,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,IAAI,SAAS,SAAS,MAAM,IAAI,IAAI,WAAW,eAAe,MAAM,gKAAgK,IAAI,WAAW,IAAI,UAAU,UAAU,UAAU,SAAS,SAAS,eAAe,mCAAmC,SAAS,wEAAwE,sDAAsD,OAAO,IAAI,IAAI,WAAW,UAAU,aAAa,cAAc,gBAAgB,cAAc,cAAc,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,cAAc,IAAI,KAAK,KAAK,SAAS,iBAAiB,iBAAiB,UAAU,QAAQ,mBAAmB,KAAK,YAAY,cAAc,IAAI,SAAS,GAAG,UAAU,QAAQ,mBAAmB,UAAU,UAAU,YAAY,0BAA0B,KAAK,iBAAiB,iEAAiE,YAAY,MAAM,KAAK,cAAc,IAAI,QAAQ,SAAS,sCAAsC,UAAU,KAAK,SAAS,iBAAiB,OAAO,YAAY,cAAc,eAAe,cAAc,QAAQ,IAAI,MAAM,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,IAAI,YAAY,YAAY,YAAY,SAAS,YAAY,yBAAyB,yBAAyB,YAAY,mCAAmC,UAAU,mCAAmC,UAAU,YAAY,mCAAmC,UAAU,mCAAmC,UAAU,YAAY,mCAAmC,UAAU,mCAAmC,UAAU,YAAY,mCAAmC,UAAU,mCAAmC,UAAU,YAAY,mCAAmC,UAAU,mCAAmC,UAAU,YAAY,mCAAmC,UAAU,mCAAmC,UAAU,YAAY,mCAAmC,UAAU,mCAAmC,UAAU,gVAAgV,QAAQ,sBAAsB,aAAa,UAAU,UAAU,IAAI,SAAS,SAAS,MAAM,IAAI,IAAI,WAAW,6BAA6B,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,6KAA6K,KAAK,UAAU,UAAU,UAAU,UAAU,KAAK,UAAU,UAAU,UAAU,YAAY,eAAe,mCAAmC,eAAe,QAAQ,iBAAiB,KAAK,SAAS,WAAW,SAAS,OAAO,SAAS,OAAO,SAAS,UAAU,UAAU,UAAU,UAAU,aAAa,aAAa,UAAU,UAAU,IAAI,IAAI,IAAI,IAAI,GAAG,OAAO,mBAAmB,IAAI,SAAS,MAAM,WAAW,kBAAkB,gBAAgB,SAAS,QAAQ,iBAAiB,iBAAiB,YAAY,SAAS,4BAA4B,MAAM,QAAQ,iBAAiB,IAAI,GAAG,kBAAkB,QAAQ,QAAQ,WAAW,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,wCAAwC,QAAQ,mBAAmB,iBAAiB,IAAI,IAAI,SAAS,aAAa,OAAO,kBAAkB,QAAQ,QAAQ,WAAW,MAAM,MAAM,wBAAwB,QAAQ,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,uBAAuB,uCAAuC,0CAA0C,QAAQ,kBAAkB,QAAQ,QAAQ,WAAW,MAAM,8BAA8B,QAAQ,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,uBAAuB,uCAAuC,4CAA4C,KAAK,MAAM,wBAAwB,QAAQ,2BAA2B,YAAY,cAAc,eAAe,cAAc,QAAQ,uBAAuB,uCAAuC,0CAA0C,kBAAkB,QAAQ,QAAQ,WAAW,QAAQ,kBAAkB,aAAa,QAAQ,sBAAsB,cAAc,QAAQ,sBAAsB,cAAc,QAAQ,oBAAoB,KAAK,SAAS,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,4CAA4C,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,WAAW,OAAO,MAAM,wBAAwB,YAAY,IAAI,sBAAsB,iBAAiB,KAAK,OAAO,IAAI,IAAI,iBAAiB,YAAY,cAAc,IAAI,IAAI,kBAAkB,WAAW,SAAS,OAAO,0BAA0B,cAAc,QAAQ,SAAS,WAAW,IAAI,qBAAqB,gBAAgB,IAAI,OAAO,MAAM,OAAO,IAAI,IAAI,iBAAiB,YAAY,gBAAgB,IAAI,IAAI,iBAAiB,QAAQ,UAAU,6BAA6B,SAAS,SAAS,QAAQ,SAAS,QAAQ,IAAI,2CAA2C,gBAAgB,SAAS,qCAAqC,MAAM,QAAQ,YAAY,YAAY,aAAa,QAAQ,QAAQ,iBAAiB,KAAK,YAAY,gBAAgB,wBAAwB,kBAAkB,KAAK,MAAM,QAAQ,wBAAwB,YAAY,IAAI,sBAAsB,iBAAiB,OAAO,QAAQ,UAAU,0BAA0B,IAAI,sBAAsB,iBAAiB,QAAQ,WAAW,QAAQ,YAAY,kBAAkB,IAAI,wBAAwB,iBAAiB,0BAA0B,cAAc,QAAQ,SAAS,IAAI,mBAAmB,cAAc,IAAI,OAAO,MAAM,OAAO,IAAI,IAAI,iBAAiB,YAAY,gBAAgB,IAAI,IAAI,iBAAiB,SAAS,OAAO,IAAI,IAAI,IAAI,KAAK,QAAQ,QAAQ,sBAAsB,IAAI,IAAI,IAAI,GAAG,IAAI,cAAc,SAAS,gBAAgB,gBAAgB,sBAAsB,IAAI,0BAA0B,MAAM,iEAAiE,IAAI,QAAQ,gBAAgB,IAAI,IAAI,IAAI,QAAQ,UAAU,YAAY,wCAAwC,qBAAqB,iBAAiB,iBAAiB,MAAM,MAAM,4CAA4C,QAAQ,YAAY,OAAO,QAAQ,WAAW,cAAc,IAAI,WAAW,+DAA+D,IAAI,WAAW,iBAAiB,QAAQ,wBAAwB,QAAQ,gBAAgB,cAAc,UAAU,kBAAkB,QAAQ,WAAW,uBAAuB,kBAAkB,QAAQ,QAAQ,iBAAiB,IAAI,WAAW,gBAAgB,cAAc,UAAU,UAAU,WAAW,uBAAuB,kBAAkB,gBAAgB,IAAI,WAAW,QAAQ,MAAM,aAAa,QAAQ,QAAQ,cAAc,cAAc,UAAU,QAAQ,mBAAmB,IAAI,KAAK,cAAc,UAAU,kBAAkB,IAAI,IAAI,UAAU,UAAU,WAAW,cAAc,UAAU,IAAI,WAAW,aAAa,gBAAgB,IAAI,WAAW,QAAQ,QAAQ,iBAAiB,cAAc,eAAe,iBAAiB,wBAAwB,MAAM,KAAK,aAAa,YAAY,OAAO,KAAK,eAAe,eAAe,oBAAoB,SAAS,QAAQ,YAAY,OAAO,YAAY,OAAO,IAAI,MAAM,SAAS,SAAS,SAAS,SAAS,YAAY,QAAQ,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,UAAU,IAAI,KAAK,cAAc,aAAa,YAAY,IAAI,SAAS,QAAQ,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,OAAO,KAAK,4CAA4C,YAAY,aAAa,SAAS,YAAY,QAAQ,aAAa,aAAa,cAAc,QAAQ,aAAa,eAAe,SAAS,MAAM,aAAa,cAAc,UAAU,kBAAkB,WAAW,KAAK,QAAQ,cAAc,cAAc,UAAU,kBAAkB,QAAQ,WAAW,SAAS,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,wCAAwC,IAAI,UAAU,SAAS,SAAS,SAAS,IAAI,SAAS,WAAW,YAAY,oBAAoB,oBAAoB,SAAS,cAAc,qBAAqB,QAAQ,UAAU,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,UAAU,UAAU,MAAM,SAAS,UAAU,UAAU,MAAM,aAAa,SAAS,kBAAkB,mBAAmB,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,UAAU,YAAY,QAAQ,mBAAmB,OAAO,IAAI,SAAS,4CAA4C,QAAQ,sBAAsB,KAAK,QAAQ,SAAS,UAAU,MAAM,KAAK,IAAI,IAAI,SAAS,qBAAqB,qBAAqB,iDAAiD,gBAAgB,YAAY,QAAQ,UAAU,QAAQ,sBAAsB,KAAK,QAAQ,UAAU,SAAS,OAAO,IAAI,OAAO,2BAA2B,IAAI,OAAO,MAAM,WAAW,gBAAgB,IAAI,OAAO,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,QAAQ,eAAe,MAAM,wDAAwD,IAAI,UAAU,IAAI,SAAS,SAAS,SAAS,YAAY,mCAAmC,UAAU,UAAU,YAAY,iBAAiB,iBAAiB,iCAAiC,iCAAiC,YAAY,MAAM,cAAc,IAAI,IAAI,WAAW,SAAS,SAAS,sCAAsC,YAAY,UAAU,SAAS,wEAAwE,sDAAsD,OAAO,IAAI,IAAI,WAAW,UAAU,aAAa,cAAc,gBAAgB,cAAc,cAAc,SAAS,UAAU,YAAY,YAAY,aAAa,aAAa,SAAS,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,aAAa,0BAA0B,iBAAiB,YAAY,cAAc,eAAe,cAAc,QAAQ,UAAU,KAAK,IAAI,IAAI,YAAY,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,mBAAmB,mBAAmB,mBAAmB,kBAAkB,mBAAmB,mBAAmB,uCAAuC,QAAQ,iBAAiB,IAAI,MAAM,KAAK,QAAQ,UAAU,SAAS,WAAW,MAAM,IAAI,IAAI,WAAW,iBAAiB,MAAM,MAAM,4DAA4D,IAAI,UAAU,SAAS,SAAS,SAAS,IAAI,SAAS,eAAe,SAAS,YAAY,aAAa,QAAQ,YAAY,cAAc,cAAc,aAAa,MAAM,iBAAiB,QAAQ,SAAS,gBAAgB,YAAY,QAAQ,SAAS,UAAU,aAAa,KAAK,MAAM,KAAK,MAAM,YAAY,YAAY,SAAS,YAAY,KAAK,SAAS,iBAAiB,UAAU,KAAK,SAAS,IAAI,YAAY,eAAe,iCAAiC,wDAAwD,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,SAAS,6BAA6B,YAAY,cAAc,eAAe,cAAc,QAAQ,uCAAuC,YAAY,eAAe,eAAe,cAAc,SAAS,KAAK,eAAe,SAAS,SAAS,2CAA2C,WAAW,yCAAyC,0BAA0B,iCAAiC,MAAM,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,IAAI,WAAW,SAAS,mBAAmB,sBAAsB,IAAI,IAAI,WAAW,eAAe,MAAM,oCAAoC,IAAI,UAAU,SAAS,SAAS,SAAS,IAAI,SAAS,UAAU,UAAU,YAAY,QAAQ,0BAA0B,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,cAAc,cAAc,cAAc,UAAU,YAAY,QAAQ,0BAA0B,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,cAAc,cAAc,cAAc,UAAU,YAAY,QAAQ,0BAA0B,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,cAAc,cAAc,cAAc,UAAU,YAAY,OAAO,UAAU,UAAU,UAAU,MAAM,UAAU,MAAM,UAAU,MAAM,UAAU,MAAM,UAAU,MAAM,IAAI,OAAO,0BAA0B,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,cAAc,cAAc,UAAU,UAAU,UAAU,MAAM,UAAU,MAAM,UAAU,MAAM,UAAU,MAAM,UAAU,MAAM,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,kBAAkB,iCAAiC,QAAQ,2BAA2B,YAAY,YAAY,UAAU,QAAQ,SAAS,2BAA2B,YAAY,YAAY,IAAI,UAAU,4BAA4B,QAAQ,SAAS,2BAA2B,YAAY,YAAY,IAAI,UAAU,YAAY,QAAQ,SAAS,2BAA2B,IAAI,YAAY,cAAc,YAAY,IAAI,UAAU,YAAY,QAAQ,SAAS,2BAA2B,YAAY,YAAY,oBAAoB,IAAI,UAAU,4BAA4B,QAAQ,SAAS,2BAA2B,YAAY,YAAY,IAAI,gBAAgB,YAAY,QAAQ,SAAS,2BAA2B,YAAY,YAAY,kBAAkB,IAAI,UAAU,4BAA4B,QAAQ,SAAS,2BAA2B,YAAY,YAAY,IAAI,cAAc,YAAY,QAAQ,SAAS,2BAA2B,WAAW,YAAY,UAAU,QAAQ,SAAS,2BAA2B,WAAW,YAAY,UAAU,QAAQ,gBAAgB,SAAS,SAAS,OAAO,eAAe,MAAM,wCAAwC,IAAI,UAAU,IAAI,SAAS,SAAS,eAAe,mCAAmC,SAAS,wEAAwE,sDAAsD,OAAO,IAAI,IAAI,WAAW,UAAU,aAAa,cAAc,gBAAgB,cAAc,cAAc,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,mBAAmB,UAAU,UAAU,YAAY,iBAAiB,iBAAiB,iEAAiE,YAAY,MAAM,KAAK,cAAc,IAAI,QAAQ,SAAS,sCAAsC,UAAU,OAAO,YAAY,cAAc,eAAe,cAAc,QAAQ,IAAI,MAAM,IAAI,IAAI,IAAI,YAAY,SAAS,YAAY,UAAU,oBAAoB,eAAe,QAAQ,iBAAiB,IAAI,MAAM,cAAc,SAAS,SAAS,MAAM,IAAI,IAAI,WAAW,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,4CAA4C,IAAI,UAAU,SAAS,SAAS,SAAS,IAAI,SAAS,SAAS,QAAQ,QAAQ,oCAAoC,YAAY,eAAe,cAAc,cAAc,QAAQ,sCAAsC,YAAY,eAAe,cAAc,cAAc,QAAQ,YAAY,iBAAiB,IAAI,IAAI,WAAW,8BAA8B,WAAW,UAAU,UAAU,UAAU,gBAAgB,OAAO,IAAI,KAAK,SAAS,SAAS,iCAAiC,cAAc,YAAY,eAAe,cAAc,cAAc,QAAQ,WAAW,OAAO,wBAAwB,UAAU,KAAK,UAAU,MAAM,KAAK,YAAY,UAAU,KAAK,+BAA+B,YAAY,qBAAqB,gBAAgB,MAAM,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,MAAM,SAAS,UAAU,MAAM,cAAc,YAAY,mCAAmC,UAAU,IAAI,IAAI,IAAI,WAAW,iBAAiB,MAAM,MAAM,oDAAoD,IAAI,UAAU,IAAI,SAAS,sBAAsB,IAAI,IAAI,WAAW,cAAc,OAAO,IAAI,IAAI,WAAW,kBAAkB,YAAY,YAAY,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,YAAY,YAAY,aAAa,UAAU,UAAU,YAAY,YAAY,aAAa,UAAU,UAAU,YAAY,YAAY,aAAa,IAAI,SAAS,GAAG,UAAU,QAAQ,mBAAmB,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,aAAa,UAAU,YAAY,YAAY,aAAa,aAAa,gBAAgB,IAAI,IAAI,WAAW,MAAM,WAAW,gBAAgB,IAAI,IAAI,WAAW,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,IAAI,WAAW,SAAS,mBAAmB,MAAM,MAAM,MAAM,4BAA4B,IAAI,UAAU,SAAS,SAAS,IAAI,WAAW,YAAY,gCAAgC,gCAAgC,SAAS,cAAc,qBAAqB,QAAQ,UAAU,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,UAAU,UAAU,MAAM,SAAS,UAAU,UAAU,MAAM,aAAa,SAAS,kBAAkB,mBAAmB,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,kBAAkB,IAAI,WAAW,iBAAiB,MAAM,MAAM,oBAAoB,IAAI,UAAU,SAAS,SAAS,IAAI,WAAW,YAAY,SAAS,cAAc,qBAAqB,QAAQ,OAAO,IAAI,IAAI,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,WAAW,UAAU,MAAM,QAAQ,OAAO,IAAI,IAAI,WAAW,UAAU,MAAM,SAAS,OAAO,IAAI,IAAI,WAAW,UAAU,MAAM,aAAa,SAAS,cAAc,KAAK,IAAI,WAAW,mBAAmB,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,IAAI,WAAW,SAAS,2BAA2B,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,oBAAoB,eAAe,iCAAiC,iCAAiC,0BAA0B,0BAA0B,SAAS,YAAY,wCAAwC,oCAAoC,KAAK,IAAI,WAAW,yBAAyB,IAAI,WAAW,cAAc,cAAc,OAAO,IAAI,WAAW,aAAa,aAAa,cAAc,gBAAgB,cAAc,cAAc,kBAAkB,QAAQ,6BAA6B,IAAI,WAAW,MAAM,oCAAoC,6BAA6B,IAAI,WAAW,MAAM,QAAQ,6BAA6B,IAAI,WAAW,MAAM,eAAe,6BAA6B,IAAI,WAAW,MAAM,SAAS,IAAI,YAAY,IAAI,WAAW,mBAAmB,MAAM,MAAM,MAAM,gBAAgB,wCAAwC,MAAM,QAAQ,iBAAiB,WAAW,iBAAiB,kBAAkB,QAAQ,QAAQ,QAAQ,SAAS,SAAS,oBAAoB,gBAAgB,oBAAoB,oBAAoB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,SAAS,SAAS,mBAAmB,gBAAgB,QAAQ,SAAS,KAAK,QAAQ,mBAAmB,kBAAkB,sBAAsB,sBAAsB,sBAAsB,QAAQ,SAAS,mBAAmB,kBAAkB,QAAQ,QAAQ,WAAW,eAAe,MAAM,oBAAoB,SAAS,SAAS,YAAY,wEAAwE,mCAAmC,OAAO,IAAI,WAAW,UAAU,aAAa,cAAc,gBAAgB,cAAc,cAAc,uBAAuB,IAAI,WAAW,YAAY,2CAA2C,wCAAwC,IAAI,YAAY,KAAK,uBAAuB,IAAI,WAAW,oBAAoB,YAAY,MAAM,KAAK,IAAI,YAAY,SAAS,uCAAuC,uBAAuB,IAAI,WAAW,uBAAuB,IAAI,YAAY,IAAI,WAAW,mBAAmB,MAAM,MAAM,MAAM,gDAAgD,IAAI,SAAS,SAAS,IAAI,SAAS,SAAS,YAAY,UAAU,SAAS,kBAAkB,YAAY,YAAY,aAAa,QAAQ,SAAS,gBAAgB,YAAY,YAAY,sBAAsB,sBAAsB,IAAI,SAAS,iBAAiB,QAAQ,cAAc,cAAc,YAAY,kBAAkB,cAAc,sBAAsB,QAAQ,sBAAsB,gBAAgB,YAAY,YAAY,sBAAsB,iBAAiB,IAAI,SAAS,aAAa,UAAU,UAAU,mBAAmB,gBAAgB,yBAAyB,SAAS,SAAS,aAAa,eAAe,4BAA4B,UAAU,UAAU,IAAI,WAAW,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,oBAAoB,gCAAgC,QAAQ,2BAA2B,YAAY,sCAAsC,MAAM,SAAS,0DAA0D,UAAU,SAAS,wBAAwB,SAAS,UAAU,SAAS,UAAU,YAAY,wCAAwC,8BAA8B,IAAI,KAAK,SAAS,KAAK,IAAI,KAAK,cAAc,UAAU,SAAS,sBAAsB,sDAAsD,UAAU,MAAM,sBAAsB,iBAAiB,SAAS,OAAO,mBAAmB,MAAM,MAAM,MAAM,wDAAwD,IAAI,UAAU,UAAU,SAAS,IAAI,UAAU,IAAI,SAAS,GAAG,UAAU,QAAQ,mBAAmB,gBAAgB,4BAA4B,KAAK,+BAA+B,SAAS,YAAY,OAAO,kCAAkC,SAAS,iBAAiB,SAAS,YAAY,UAAU,SAAS,UAAU,SAAS,UAAU,WAAW,SAAS,aAAa,kBAAkB,MAAM,0BAA0B,sBAAsB,UAAU,UAAU,UAAU,UAAU,WAAW,uBAAuB,YAAY,YAAY,aAAa,mBAAmB,IAAI,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,wCAAwC,IAAI,SAAS,IAAI,YAAY,qBAAqB,eAAe,UAAU,YAAY,YAAY,aAAa,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,IAAI,SAAS,GAAG,UAAU,QAAQ,mBAAmB,aAAa,aAAa,qBAAqB,aAAa,wCAAwC,qBAAqB,KAAK,sCAAsC,qBAAqB,QAAQ,2DAA2D,QAAQ,aAAa,SAAS,IAAI,SAAS,qEAAqE,IAAI,MAAM,YAAY,SAAS,IAAI,WAAW,eAAe,MAAM,oCAAoC,IAAI,UAAU,SAAS,IAAI,SAAS,QAAQ,YAAY,uBAAuB,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,SAAS,YAAY,OAAO,cAAc,UAAU,KAAK,UAAU,UAAU,YAAY,YAAY,aAAa,UAAU,YAAY,SAAS,iBAAiB,YAAY,cAAc,eAAe,cAAc,QAAQ,YAAY,SAAS,cAAc,aAAa,IAAI,IAAI,KAAK,IAAI,gBAAgB,IAAI,WAAW,SAAS,QAAQ,YAAY,QAAQ,IAAI,WAAW,qCAAqC,sBAAsB,gBAAgB,IAAI,WAAW,mBAAmB,MAAM,MAAM,MAAM,4CAA4C,2BAA2B,sBAAsB,uBAAuB,uBAAuB,qFAAqF,QAAQ,QAAQ,IAAI,SAAS,QAAQ,QAAQ,OAAO,QAAQ,2BAA2B,6BAA6B,qCAAqC,IAAI,QAAQ,oBAAoB,IAAI,QAAQ,gBAAgB,YAAY,UAAU,aAAa,IAAI,QAAQ,KAAK,QAAQ,aAAa,QAAQ,2BAA2B,6BAA6B,gEAAgE,SAAS,SAAS,SAAS,WAAW,eAAe,MAAM,oCAAoC,IAAI,UAAU,SAAS,SAAS,SAAS,IAAI,SAAS,gBAAgB,WAAW,eAAe,SAAS,sCAAsC,YAAY,cAAc,eAAe,cAAc,QAAQ,WAAW,gBAAgB,MAAM,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,OAAO,SAAS,gBAAgB,OAAO,IAAI,OAAO,eAAe,SAAS,sCAAsC,YAAY,cAAc,eAAe,cAAc,QAAQ,WAAW,gBAAgB,IAAI,OAAO,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,QAAQ,mBAAmB,MAAM,MAAM,MAAM,QAAQ,kCAAkC,IAAI,WAAW,oBAAoB,IAAI,WAAW,4CAA4C,IAAI,WAAW,4CAA4C,IAAI,WAAW,mFAAmF,IAAI,WAAW,2CAA2C,2CAA2C,sBAAsB,sBAAsB,SAAS,SAAS,gBAAgB,YAAY,YAAY,0CAA0C,kFAAkF,kFAAkF,IAAI,WAAW,iBAAiB,MAAM,MAAM,oCAAoC,IAAI,UAAU,SAAS,IAAI,SAAS,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,SAAS,YAAY,iBAAiB,SAAS,IAAI,YAAY,IAAI,SAAS,QAAQ,OAAO,UAAU,QAAQ,UAAU,IAAI,WAAW,QAAQ,QAAQ,SAAS,GAAG,YAAY,0BAA0B,KAAK,YAAY,YAAY,QAAQ,UAAU,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,kBAAkB,UAAU,mBAAmB,SAAS,QAAQ,OAAO,UAAU,QAAQ,UAAU,IAAI,WAAW,mBAAmB,MAAM,MAAM,MAAM,oBAAoB,QAAQ,WAAW,sBAAsB,QAAQ,SAAS,2BAA2B,IAAI,QAAQ,QAAQ,SAAS,WAAW,oBAAoB,IAAI,QAAQ,SAAS,SAAS,qBAAqB,SAAS,kBAAkB,QAAQ,2BAA2B,kBAAkB,yBAAyB,YAAY,mDAAmD,QAAQ,SAAS,aAAa,KAAK,SAAS,UAAU,SAAS,oBAAoB,IAAI,MAAM,SAAS,kCAAkC,QAAQ,SAAS,OAAO,IAAI,SAAS,SAAS,mBAAmB,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,4BAA4B,IAAI,UAAU,IAAI,SAAS,eAAe,2GAA2G,QAAQ,uIAAuI,mBAAmB,gBAAgB,QAAQ,YAAY,QAAQ,QAAQ,sBAAsB,IAAI,WAAW,YAAY,eAAe,eAAe,cAAc,QAAQ,QAAQ,YAAY,QAAQ,QAAQ,sBAAsB,IAAI,WAAW,mBAAmB,MAAM,MAAM,MAAM,YAAY,oMAAoM,SAAS,UAAU,YAAY,YAAY,eAAe,IAAI,WAAW,YAAY,qCAAqC,sBAAsB,YAAY,MAAM,UAAU,cAAc,wCAAwC,IAAI,WAAW,sBAAsB,IAAI,YAAY,IAAI,WAAW,aAAa,IAAI,WAAW,iBAAiB,MAAM,MAAM,oCAAoC,IAAI,UAAU,IAAI,SAAS,OAAO,IAAI,IAAI,WAAW,cAAc,YAAY,IAAI,WAAW,kBAAkB,SAAS,YAAY,aAAa,QAAQ,QAAQ,SAAS,GAAG,YAAY,0BAA0B,KAAK,YAAY,YAAY,QAAQ,UAAU,cAAc,YAAY,eAAe,eAAe,cAAc,QAAQ,YAAY,kBAAkB,UAAU,gBAAgB,KAAK,SAAS,IAAI,YAAY,cAAc,cAAc,eAAe,IAAI,WAAW,mBAAmB,MAAM,MAAM,MAAM,wBAAwB,SAAS,YAAY,qBAAqB,YAAY,IAAI,SAAS,SAAS,kBAAkB,SAAS,YAAY,IAAI,sBAAsB,4BAA4B,MAAM,2BAA2B,IAAI,SAAS,OAAO,IAAI,IAAI,QAAQ,SAAS,2BAA2B,SAAS,4BAA4B,uBAAuB,IAAI,QAAQ,QAAQ,YAAY,KAAK,IAAI,IAAI,SAAS,kBAAkB,sBAAsB,QAAQ,SAAS,WAAW,mBAAmB,MAAM,MAAM,MAAM,SAAS,cAAc,UAAU,IAAI,MAAM,iBAAiB,4CAA4C,UAAU,IAAI,MAAM,KAAK,SAAS,WAAW,KAAK,MAAM,eAAe,kBAAkB,mBAAmB,IAAI,MAAM,mCAAmC,mBAAmB,uBAAuB,mBAAmB,IAAI,MAAM,6BAA6B,mBAAmB,wBAAwB,uBAAuB,mBAAmB,IAAI,MAAM,KAAK,SAAS,WAAW,KAAK,OAAO,SAAS,SAAS,WAAW,cAAc,oCAAoC,IAAI,SAAS,SAAS,SAAS,SAAS,IAAI,SAAS,SAAS,4BAA4B,SAAS,YAAY,cAAc,gDAAgD,aAAa,WAAW,sDAAsD,cAAc,UAAU,YAAY,cAAc,qCAAqC,YAAY,iCAAiC,aAAa,YAAY,YAAY,WAAW,KAAK,aAAa,YAAY,YAAY,WAAW,eAAe,MAAM,wBAAwB,IAAI,UAAU,SAAS,IAAI,SAAS,eAAe,WAAW,MAAM,WAAW,gBAAgB,MAAM,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,OAAO,SAAS,QAAQ,YAAY,OAAO,SAAS,UAAU,IAAI,OAAO,0BAA0B,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,YAAY,aAAa,SAAS,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,gCAAgC,IAAI,UAAU,SAAS,SAAS,IAAI,SAAS,SAAS,SAAS,UAAU,qBAAqB,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,IAAI,WAAW,UAAU,kBAAkB,YAAY,iBAAiB,4BAA4B,QAAQ,YAAY,eAAe,eAAe,cAAc,SAAS,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,IAAI,IAAI,WAAW,eAAe,MAAM,4BAA4B,IAAI,UAAU,SAAS,IAAI,SAAS,UAAU,QAAQ,YAAY,QAAQ,0BAA0B,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,YAAY,aAAa,aAAa,SAAS,YAAY,OAAO,IAAI,OAAO,MAAM,0BAA0B,KAAK,YAAY,eAAe,eAAe,cAAc,QAAQ,UAAU,IAAI,OAAO,qBAAqB,MAAM,MAAM,MAAM,MAAM,gCAAgC,IAAI,UAAU,UAAU,IAAI,IAAI,MAAM,UAAU,GAAG,gBAAgB,QAAQ,QAAQ,mBAAmB,kCAAkC,IAAI,IAAI,IAAI,KAAK,SAAS,WAAW,KAAK,SAAS,aAAa,SAAS,kBAAkB,aAAa,SAAS,UAAU,aAAa,QAAQ,SAAS,UAAU,aAAa,cAAc,MAAM,YAAY,0CAA0C,IAAI,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,4BAA4B,IAAI,UAAU,SAAS,SAAS,IAAI,SAAS,SAAS,UAAU,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,IAAI,WAAW,qBAAqB,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,IAAI,WAAW,UAAU,kBAAkB,uBAAuB,UAAU,YAAY,eAAe,eAAe,cAAc,QAAQ,IAAI,IAAI,WAAW,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,QAAQ,gCAAgC,wBAAwB,SAAS,0DAA0D,UAAU,UAAU,SAAS,sBAAsB,sDAAsD,aAAa,MAAM,uBAAuB,iBAAiB,SAAS,OAAO,mBAAmB,MAAM,MAAM,MAAM,oBAAoB,QAAQ,QAAQ,cAAc,WAAW,UAAU,QAAQ,SAAS,SAAS,qBAAqB,oBAAoB,UAAU,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,SAAS,mBAAmB,UAAU,SAAS,mBAAmB,UAAU,QAAQ,aAAa,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,oBAAoB,aAAa,4BAA4B,aAAa,SAAS,YAAY,SAAS,SAAS,SAAS,SAAS,OAAO,UAAU,UAAU,UAAU,oCAAoC,UAAU,MAAM,iBAAiB,sBAAsB,UAAU,MAAM,YAAY,aAAa,UAAU,IAAI,qCAAqC,SAAS,OAAO,mBAAmB,MAAM,MAAM,MAAM,oBAAoB,IAAI,SAAS,IAAI,8DAA8D,QAAQ,SAAS,GAAG,UAAU,QAAQ,mBAAmB,UAAU,YAAY,cAAc,aAAa,4CAA4C,sBAAsB,mBAAmB,IAAI,SAAS,SAAS,SAAS,IAAI,WAAW,iBAAiB,MAAM,MAAM,gCAAgC,IAAI,SAAS,IAAI,QAAQ,UAAU,SAAS,YAAY,qBAAqB,YAAY,IAAI,UAAU,SAAS,gBAAgB,SAAS,YAAY,kDAAkD,YAAY,UAAU,MAAM,8CAA8C,UAAU,SAAS,IAAI,WAAW,iBAAiB,MAAM,MAAM,gCAAgC,QAAQ,QAAQ,qCAAqC,4EAA4E,YAAY,UAAU,iBAAiB,MAAM,SAAS,gBAAgB,4EAA4E,YAAY,UAAU,MAAM,YAAY,SAAS,WAAW,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,UAAU,UAAU,MAAM,UAAU,eAAe,WAAW,KAAK,OAAO,MAAM,OAAO,IAAI,MAAM,UAAU,IAAI,MAAM,MAAM,YAAY,eAAe,SAAS,MAAM,UAAU,WAAW,SAAS,WAAW,eAAe,MAAM,gBAAgB,IAAI,mBAAmB,KAAK,IAAI,SAAS,iBAAiB,IAAI,QAAQ,QAAQ,IAAI,WAAW,IAAI,QAAQ,SAAS,aAAa,SAAS,YAAY,sDAAsD,WAAW,8BAA8B,sBAAsB,aAAa,iBAAiB,KAAK,MAAM,gBAAgB,UAAU,YAAY,cAAc,mBAAmB,eAAe,QAAQ,WAAW,kCAAkC,oBAAoB,SAAS,UAAU,MAAM,gBAAgB,SAAS,uBAAuB,UAAU,mCAAmC,YAAY,UAAU,iBAAiB,MAAM,MAAM,YAAY,IAAI,SAAS,4BAA4B,IAAI,MAAM,QAAQ,cAAc,OAAO,KAAK,IAAI,MAAM,SAAS,yBAAyB,KAAK,OAAO,IAAI,qBAAqB,GAAG,IAAI,QAAQ,sBAAsB,SAAS,YAAY,SAAS,4BAA4B,mBAAmB,MAAM,MAAM,MAAM,QAAQ,sCAAsC,SAAS,qBAAqB,SAAS,iBAAiB,IAAI,qBAAqB,8CAA8C,SAAS,IAAI,SAAS,cAAc,SAAS,wBAAwB,kBAAkB,oBAAoB,WAAW,iBAAiB,MAAM,MAAM,YAAY,OAAO,UAAU,WAAW,qBAAqB,SAAS,WAAW,IAAI,WAAW,mCAAmC,QAAQ,QAAQ,WAAW,UAAU,OAAO,IAAI,WAAW,eAAe,4BAA4B,kCAAkC,MAAM,IAAI,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,gBAAgB,SAAS,YAAY,SAAS,SAAS,SAAS,iBAAiB,sBAAsB,UAAU,aAAa,MAAM,4BAA4B,KAAK,UAAU,UAAU,UAAU,SAAS,OAAO,eAAe,MAAM,oBAAoB,WAAW,+BAA+B,SAAS,wBAAwB,KAAK,yEAAyE,YAAY,WAAW,IAAI,MAAM,iBAAiB,SAAS,aAAa,mBAAmB,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,uCAAuC,KAAK,cAAc,wCAAwC,OAAO,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,YAAY,IAAI,UAAU,IAAI,+BAA+B,QAAQ,kCAAkC,cAAc,QAAQ,GAAG,YAAY,WAAW,iBAAiB,QAAQ,UAAU,IAAI,OAAO,qBAAqB,MAAM,MAAM,MAAM,MAAM,qCAAqC,KAAK,cAAc,oCAAoC,OAAO,mBAAmB,MAAM,MAAM,MAAM,gBAAgB,IAAI,SAAS,IAAI,SAAS,mBAAmB,YAAY,YAAY,aAAa,aAAa,4BAA4B,WAAW,KAAK,iBAAiB,IAAI,WAAW,eAAe,MAAM,YAAY,SAAS,YAAY,gBAAgB,YAAY,WAAW,YAAY,YAAY,eAAe,aAAa,aAAa,4BAA4B,IAAI,KAAK,aAAa,KAAK,WAAW,iBAAiB,MAAM,MAAM,YAAY,YAAY,YAAY,2CAA2C,KAAK,GAAG,QAAQ,QAAQ,YAAY,YAAY,8CAA8C,IAAI,yBAAyB,mBAAmB,MAAM,MAAM,MAAM,YAAY,IAAI,SAAS,IAAI,aAAa,sGAAsG,cAAc,IAAI,WAAW,eAAe,MAAM,YAAY,aAAa,YAAY,QAAQ,gCAAgC,OAAO,OAAO,UAAU,UAAU,iCAAiC,UAAU,OAAO,UAAU,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,YAAY,WAAW,eAAe,sBAAsB,eAAe,cAAc,YAAY,mBAAmB,oCAAoC,WAAW,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,uCAAuC,OAAO,qBAAqB,MAAM,MAAM,MAAM,MAAM,qCAAqC,OAAO,eAAe,MAAM,gBAAgB,YAAY,oBAAoB,aAAa,IAAI,GAAG,eAAe,QAAQ,UAAU,oBAAoB,gBAAgB,SAAS,WAAW,cAAc,YAAY,SAAS,oHAAoH,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,2BAA2B,SAAS,8BAA8B,kBAAkB,IAAI,4BAA4B,WAAW,mBAAmB,MAAM,MAAM,MAAM,YAAY,IAAI,SAAS,IAAI,gBAAgB,sCAAsC,qBAAqB,IAAI,aAAa,eAAe,MAAM,QAAQ,oBAAoB,sBAAsB,uBAAuB,wBAAwB,wBAAwB,yBAAyB,iCAAiC,qBAAqB,MAAM,MAAM,MAAM,MAAM,QAAQ,8DAA8D,OAAO,mBAAmB,MAAM,MAAM,MAAM,2BAA2B,SAAS,eAAe,kBAAkB,IAAI,4BAA4B,WAAW,mBAAmB,MAAM,MAAM,MAAM,YAAY,SAAS,YAAY,qBAAqB,kBAAkB,kBAAkB,sBAAsB,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,YAAY,IAAI,SAAS,MAAM,gBAAgB,IAAI,mCAAmC,iBAAiB,MAAM,MAAM,YAAY,IAAI,SAAS,IAAI,WAAW,YAAY,IAAI,oBAAoB,iBAAiB,MAAM,MAAM,YAAY,IAAI,SAAS,IAAI,WAAW,YAAY,IAAI,oBAAoB,iBAAiB,MAAM,MAAM,YAAY,IAAI,SAAS,IAAI,WAAW,YAAY,IAAI,mBAAmB,iBAAiB,MAAM,MAAM,YAAY,IAAI,SAAS,IAAI,WAAW,YAAY,IAAI,mBAAmB,cAAc,YAAY,IAAI,SAAS,oBAAoB,kBAAkB,IAAI,WAAW,gBAAgB,SAAS,eAAe,MAAM,YAAY,IAAI,SAAS,IAAI,qBAAqB,UAAU,oBAAoB,IAAI,WAAW,eAAe,MAAM,QAAQ,IAAI,SAAS,MAAM,yBAAyB,IAAI,OAAO,gBAAgB,eAAe,MAAM,QAAQ,eAAe,KAAK,eAAe,MAAM,8CAA8C,SAAS,mBAAmB,MAAM,MAAM,MAAM,YAAY,IAAI,SAAS,IAAI,UAAU,cAAc,IAAI,WAAW,2BAA2B,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,iCAAiC,cAAc,QAAQ,IAAI,SAAS,oBAAoB,IAAI,OAAO,gBAAgB,mBAAmB,MAAM,MAAM,MAAM,aAAa,iCAAiC,YAAY,UAAU,SAAS,mBAAmB,MAAM,MAAM,MAAM,aAAa,QAAQ,gCAAgC,IAAI,kBAAkB,iBAAiB,MAAM,MAAM,QAAQ,IAAI,SAAS,UAAU,UAAU,YAAY,WAAW,KAAK,eAAe,qBAAqB,MAAM,MAAM,MAAM,MAAM,0BAA0B,yBAAyB,iBAAiB,MAAM,MAAM,UAAU,qCAAqC,mBAAmB,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,6BAA6B,eAAe,KAAK,QAAQ,UAAU,YAAY,cAAc,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,UAAU,yCAAyC,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,yBAAyB,eAAe,MAAM,QAAQ,qBAAqB,SAAS,YAAY,KAAK,WAAW,eAAe,MAAM,QAAQ,IAAI,SAAS,UAAU,WAAW,eAAe,MAAM,UAAU,4BAA4B,aAAa,qBAAqB,MAAM,MAAM,MAAM,MAAM,8BAA8B,iBAAiB,MAAM,MAAM,QAAQ,UAAU,0CAA0C,mBAAmB,MAAM,MAAM,MAAM,6BAA6B,OAAO,qBAAqB,MAAM,MAAM,MAAM,MAAM,qBAAqB,eAAe,MAAM,QAAQ,IAAI,QAAQ,WAAW,WAAW,eAAe,MAAM,QAAQ,iBAAiB,yBAAyB,iBAAiB,MAAM,MAAM,UAAU,mBAAmB,WAAW,mBAAmB,MAAM,MAAM,MAAM,sBAAsB,iBAAiB,MAAM,MAAM,QAAQ,YAAY,wBAAwB,qBAAqB,MAAM,MAAM,MAAM,MAAM,uBAAuB,eAAe,MAAM,0DAA0D,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,iBAAiB,MAAM,MAAM,OAAO,IAAI,KAAK,mBAAmB,MAAM,MAAM,MAAM,8BAA8B,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,eAAe,MAAM,MAAM,MAAM,OAAO,cAAc,QAAQ,WAAW,WAAW,WAAW,eAAe,MAAM,UAAU,KAAK,iBAAiB,MAAM,MAAM,sBAAsB,iBAAiB,MAAM,MAAM,IAAI,IAAI,qBAAqB,MAAM,MAAM,MAAM,MAAM,KAAK,iBAAiB,MAAM,MAAM,iBAAiB,iBAAiB,MAAM,MAAM,aAAa,mBAAmB,MAAM,MAAM,MAAM,KAAK,SAAS,iBAAiB,KAAK,MAAM,mBAAmB,mBAAmB,MAAM,MAAM,MAAM,KAAK,cAAc,qBAAqB,eAAe,MAAM,UAAU,cAAc,cAAc,eAAe,MAAM,IAAI,eAAe,MAAM,MAAM,OAAO,eAAe,MAAM,IAAI,eAAe,MAAM,WAAW,cAAc,YAAY,eAAe,MAAM,KAAK,SAAS,eAAe,MAAM,OAAO,eAAe,MAAM,SAAS,cAAc,WAAW,cAAc,WAAW,eAAe,MAAM,KAAK,cAAc,WAAW,cAAc;;AAEjm1F;AACA,iCAAiC,qBAAqB,iCAAiC,eAAe,YAAY,qBAAqB,qBAAqB,qBAAqB,OAAO,oqBAAoqB;;;AAG51B;AACA,kDAAkD,mDAAmD,yDAAyD,6CAA6C,gDAAgD,qEAAqE,kEAAkE,yDAAyD,qEAAqE,gGAAgG,uCAAuC,6CAA6C,sDAAsD,qEAAqE,4DAA4D,qEAAqE,sGAAsG,6CAA6C,yGAAyG,sDAAsD,qEAAqE,wEAAwE,uCAAuC,yDAAyD,iFAAiF,sDAAsD,0FAA0F,4DAA4D,6CAA6C,sGAAsG,kEAAkE,iFAAiF,4DAA4D,kEAAkE,sDAAsD,sDAAsD,4DAA4D,mDAAmD,qEAAqE,+DAA+D,wCAAwC,sCAAsC,4CAA4C,0DAA0D,0CAA0C,0CAA0C,kBAAkB,4BAA4B,uBAAuB,wDAAwD,mBAAmB,+BAA+B,4CAA4C,oBAAoB,0BAA0B,qBAAqB,2CAA2C,8BAA8B,yDAAyD,2DAA2D,cAAc,oBAAoB,uBAAuB,eAAe,YAAY,MAAM,KAAK,cAAc,iFAAiF,MAAM,YAAY,SAAS,OAAO,mEAAmE,MAAM,aAAa,uCAAuC,IAAI,qCAAqC,eAAe,SAAS,4BAA4B,OAAO,mCAAmC,6BAA6B,OAAO,KAAK,YAAY,oCAAoC,kBAAkB,4CAA4C,qBAAqB,QAAQ,kBAAkB,mBAAmB,+BAA+B,uDAAuD,sBAAsB,OAAO,SAAS,4BAA4B,8BAA8B,iBAAiB,8BAA8B,yBAAyB,gBAAgB,oBAAoB,UAAU,mEAAmE,0DAA0D,UAAU,wBAAwB,kCAAkC,uBAAuB,uBAAuB,wBAAwB,KAAK,QAAQ,KAAK,KAAK,SAAS,6BAA6B,+BAA+B,sCAAsC,OAAO,6BAA6B,KAAK,WAAW,kBAAkB,yBAAyB,cAAc,6CAA6C,wBAAwB,wBAAwB,8CAA8C,gCAAgC,uBAAuB,qBAAqB,sBAAsB,wBAAwB,qBAAqB,mBAAmB,sBAAsB,0BAA0B,KAAK,QAAQ,WAAW,aAAa,yGAAyG,oDAAoD,oBAAoB,6CAA6C,8BAA8B,GAAG,aAAa,mCAAmC,sBAAsB,8EAA8E,kCAAkC,2BAA2B,sBAAsB,2BAA2B,mBAAmB,6BAA6B;;AAEpmL;AACA,CAAC;AAAA;;;;;;;;;AChDD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,sBAAsB;AACtB;AACA;;;;;;;gECnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,0BAA0B;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,0BAA0B;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;;AAEA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;;AAEA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;gECvhBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,WAAW;AAC1B;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA","file":"cesiumWorkers.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"build/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 164);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 472cb37212a2a6785bf7","define(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * @exports defined\r\n     *\r\n     * @param {*} value The object.\r\n     * @returns {Boolean} Returns true if the object is defined, returns false otherwise.\r\n     *\r\n     * @example\r\n     * if (Cesium.defined(positions)) {\r\n     *      doSomething();\r\n     * } else {\r\n     *      doSomethingElse();\r\n     * }\r\n     */\r\n    function defined(value) {\r\n        return value !== undefined && value !== null;\r\n    }\r\n\r\n    return defined;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/defined.js\n// module id = 0\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the first parameter if not undefined, otherwise the second parameter.\r\n     * Useful for setting a default value for a parameter.\r\n     *\r\n     * @exports defaultValue\r\n     *\r\n     * @param {*} a\r\n     * @param {*} b\r\n     * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.\r\n     *\r\n     * @example\r\n     * param = Cesium.defaultValue(param, 'default');\r\n     */\r\n    function defaultValue(a, b) {\r\n        if (a !== undefined && a !== null) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * A frozen empty object that can be used as the default value for options passed as\r\n     * an object literal.\r\n     * @type {Object}\r\n     */\r\n    defaultValue.EMPTY_OBJECT = freezeObject({});\r\n\r\n    return defaultValue;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/defaultValue.js\n// module id = 1\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './freezeObject',\r\n        './Math'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        freezeObject,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A 3D Cartesian point.\r\n     * @alias Cartesian3\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The X component.\r\n     * @param {Number} [y=0.0] The Y component.\r\n     * @param {Number} [z=0.0] The Z component.\r\n     *\r\n     * @see Cartesian2\r\n     * @see Cartesian4\r\n     * @see Packable\r\n     */\r\n    function Cartesian3(x, y, z) {\r\n        /**\r\n         * The X component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The Y component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n\r\n        /**\r\n         * The Z component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.z = defaultValue(z, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Converts the provided Spherical into Cartesian3 coordinates.\r\n     *\r\n     * @param {Spherical} spherical The Spherical to be converted to Cartesian3.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.fromSpherical = function(spherical, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var clock = spherical.clock;\r\n        var cone = spherical.cone;\r\n        var magnitude = defaultValue(spherical.magnitude, 1.0);\r\n        var radial = magnitude * Math.sin(cone);\r\n        result.x = radial * Math.cos(clock);\r\n        result.y = radial * Math.sin(clock);\r\n        result.z = magnitude * Math.cos(cone);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian3 instance from x, y and z coordinates.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {Number} z The z coordinate.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.fromElements = function(x, y, z, result) {\r\n        if (!defined(result)) {\r\n            return new Cartesian3(x, y, z);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartesian3 instance.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to duplicate.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n     */\r\n    Cartesian3.clone = function(cartesian, result) {\r\n        if (!defined(cartesian)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Cartesian3(cartesian.x, cartesian.y, cartesian.z);\r\n        }\r\n\r\n        result.x = cartesian.x;\r\n        result.y = cartesian.y;\r\n        result.z = cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian3 instance from an existing Cartesian4.  This simply takes the\r\n     * x, y, and z properties of the Cartesian4 and drops w.\r\n     * @function\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian3 instance from.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.fromCartesian4 = Cartesian3.clone;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Cartesian3.packedLength = 3;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Cartesian3} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Cartesian3.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex++] = value.y;\r\n        array[startingIndex] = value.z;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Cartesian3} [result] The object into which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        result.x = array[startingIndex++];\r\n        result.y = array[startingIndex++];\r\n        result.z = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Flattens an array of Cartesian3s into an array of components.\r\n     *\r\n     * @param {Cartesian3[]} array The array of cartesians to pack.\r\n     * @param {Number[]} result The array onto which to store the result.\r\n     * @returns {Number[]} The packed array.\r\n     */\r\n    Cartesian3.packArray = function(array, result) {\r\n        \r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length * 3);\r\n        } else {\r\n            result.length = length * 3;\r\n        }\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            Cartesian3.pack(array[i], result, i * 3);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks an array of cartesian components into an array of Cartesian3s.\r\n     *\r\n     * @param {Number[]} array The array of components to unpack.\r\n     * @param {Cartesian3[]} result The array onto which to store the result.\r\n     * @returns {Cartesian3[]} The unpacked array.\r\n     */\r\n    Cartesian3.unpackArray = function(array, result) {\r\n        \r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 3);\r\n        } else {\r\n            result.length = length / 3;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 3) {\r\n            var index = i / 3;\r\n            result[index] = Cartesian3.unpack(array, i, result[index]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian3 from three consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose three consecutive elements correspond to the x, y, and z components, respectively.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create a Cartesian3 with (1.0, 2.0, 3.0)\r\n     * var v = [1.0, 2.0, 3.0];\r\n     * var p = Cesium.Cartesian3.fromArray(v);\r\n     *\r\n     * // Create a Cartesian3 with (1.0, 2.0, 3.0) using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 2.0, 3.0];\r\n     * var p2 = Cesium.Cartesian3.fromArray(v2, 2);\r\n     */\r\n    Cartesian3.fromArray = Cartesian3.unpack;\r\n\r\n    /**\r\n     * Computes the value of the maximum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the maximum component.\r\n     */\r\n    Cartesian3.maximumComponent = function(cartesian) {\r\n        \r\n\r\n        return Math.max(cartesian.x, cartesian.y, cartesian.z);\r\n    };\r\n\r\n    /**\r\n     * Computes the value of the minimum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the minimum component.\r\n     */\r\n    Cartesian3.minimumComponent = function(cartesian) {\r\n        \r\n\r\n        return Math.min(cartesian.x, cartesian.y, cartesian.z);\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian3} first A cartesian to compare.\r\n     * @param {Cartesian3} second A cartesian to compare.\r\n     * @param {Cartesian3} result The object into which to store the result.\r\n     * @returns {Cartesian3} A cartesian with the minimum components.\r\n     */\r\n    Cartesian3.minimumByComponent = function(first, second, result) {\r\n        \r\n\r\n        result.x = Math.min(first.x, second.x);\r\n        result.y = Math.min(first.y, second.y);\r\n        result.z = Math.min(first.z, second.z);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian3} first A cartesian to compare.\r\n     * @param {Cartesian3} second A cartesian to compare.\r\n     * @param {Cartesian3} result The object into which to store the result.\r\n     * @returns {Cartesian3} A cartesian with the maximum components.\r\n     */\r\n    Cartesian3.maximumByComponent = function(first, second, result) {\r\n        \r\n\r\n        result.x = Math.max(first.x, second.x);\r\n        result.y = Math.max(first.y, second.y);\r\n        result.z = Math.max(first.z, second.z);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the provided Cartesian's squared magnitude.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n     * @returns {Number} The squared magnitude.\r\n     */\r\n    Cartesian3.magnitudeSquared = function(cartesian) {\r\n        \r\n\r\n        return cartesian.x * cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z;\r\n    };\r\n\r\n    /**\r\n     * Computes the Cartesian's magnitude (length).\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian instance whose magnitude is to be computed.\r\n     * @returns {Number} The magnitude.\r\n     */\r\n    Cartesian3.magnitude = function(cartesian) {\r\n        return Math.sqrt(Cartesian3.magnitudeSquared(cartesian));\r\n    };\r\n\r\n    var distanceScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the distance between two points.\r\n     *\r\n     * @param {Cartesian3} left The first point to compute the distance from.\r\n     * @param {Cartesian3} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 1.0\r\n     * var d = Cesium.Cartesian3.distance(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(2.0, 0.0, 0.0));\r\n     */\r\n    Cartesian3.distance = function(left, right) {\r\n        \r\n\r\n        Cartesian3.subtract(left, right, distanceScratch);\r\n        return Cartesian3.magnitude(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the squared distance between two points.  Comparing squared distances\r\n     * using this function is more efficient than comparing distances using {@link Cartesian3#distance}.\r\n     *\r\n     * @param {Cartesian3} left The first point to compute the distance from.\r\n     * @param {Cartesian3} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 4.0, not 2.0\r\n     * var d = Cesium.Cartesian3.distanceSquared(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(3.0, 0.0, 0.0));\r\n     */\r\n    Cartesian3.distanceSquared = function(left, right) {\r\n        \r\n\r\n        Cartesian3.subtract(left, right, distanceScratch);\r\n        return Cartesian3.magnitudeSquared(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized form of the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to be normalized.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.normalize = function(cartesian, result) {\r\n        \r\n\r\n        var magnitude = Cartesian3.magnitude(cartesian);\r\n\r\n        result.x = cartesian.x / magnitude;\r\n        result.y = cartesian.y / magnitude;\r\n        result.z = cartesian.z / magnitude;\r\n\r\n        \r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the dot (scalar) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @returns {Number} The dot product.\r\n     */\r\n    Cartesian3.dot = function(left, right) {\r\n        \r\n\r\n        return left.x * right.x + left.y * right.y + left.z * right.z;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.multiplyComponents = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x * right.x;\r\n        result.y = left.y * right.y;\r\n        result.z = left.z * right.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.divideComponents = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x / right.x;\r\n        result.y = left.y / right.y;\r\n        result.z = left.z / right.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.add = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x + right.x;\r\n        result.y = left.y + right.y;\r\n        result.z = left.z + right.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.subtract = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x - right.x;\r\n        result.y = left.y - right.y;\r\n        result.z = left.z - right.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.multiplyByScalar = function(cartesian, scalar, result) {\r\n        \r\n\r\n        result.x = cartesian.x * scalar;\r\n        result.y = cartesian.y * scalar;\r\n        result.z = cartesian.z * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to be divided.\r\n     * @param {Number} scalar The scalar to divide by.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.divideByScalar = function(cartesian, scalar, result) {\r\n        \r\n\r\n        result.x = cartesian.x / scalar;\r\n        result.y = cartesian.y / scalar;\r\n        result.z = cartesian.z / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Negates the provided Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to be negated.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.negate = function(cartesian, result) {\r\n        \r\n\r\n        result.x = -cartesian.x;\r\n        result.y = -cartesian.y;\r\n        result.z = -cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the absolute value of the provided Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian whose absolute value is to be computed.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.abs = function(cartesian, result) {\r\n        \r\n\r\n        result.x = Math.abs(cartesian.x);\r\n        result.y = Math.abs(cartesian.y);\r\n        result.z = Math.abs(cartesian.z);\r\n        return result;\r\n    };\r\n\r\n    var lerpScratch = new Cartesian3();\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n     *\r\n     * @param {Cartesian3} start The value corresponding to t at 0.0.\r\n     * @param {Cartesian3} end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.lerp = function(start, end, t, result) {\r\n        \r\n\r\n        Cartesian3.multiplyByScalar(end, t, lerpScratch);\r\n        result = Cartesian3.multiplyByScalar(start, 1.0 - t, result);\r\n        return Cartesian3.add(lerpScratch, result, result);\r\n    };\r\n\r\n    var angleBetweenScratch = new Cartesian3();\r\n    var angleBetweenScratch2 = new Cartesian3();\r\n    /**\r\n     * Returns the angle, in radians, between the provided Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @returns {Number} The angle between the Cartesians.\r\n     */\r\n    Cartesian3.angleBetween = function(left, right) {\r\n        \r\n\r\n        Cartesian3.normalize(left, angleBetweenScratch);\r\n        Cartesian3.normalize(right, angleBetweenScratch2);\r\n        var cosine = Cartesian3.dot(angleBetweenScratch, angleBetweenScratch2);\r\n        var sine = Cartesian3.magnitude(Cartesian3.cross(angleBetweenScratch, angleBetweenScratch2, angleBetweenScratch));\r\n        return Math.atan2(sine, cosine);\r\n    };\r\n\r\n    var mostOrthogonalAxisScratch = new Cartesian3();\r\n    /**\r\n     * Returns the axis that is most orthogonal to the provided Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian on which to find the most orthogonal axis.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The most orthogonal axis.\r\n     */\r\n    Cartesian3.mostOrthogonalAxis = function(cartesian, result) {\r\n        \r\n\r\n        var f = Cartesian3.normalize(cartesian, mostOrthogonalAxisScratch);\r\n        Cartesian3.abs(f, f);\r\n\r\n        if (f.x <= f.y) {\r\n            if (f.x <= f.z) {\r\n                result = Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n            } else {\r\n                result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n            }\r\n        } else if (f.y <= f.z) {\r\n            result = Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n        } else {\r\n            result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Projects vector a onto vector b\r\n     * @param {Cartesian3} a The vector that needs projecting\r\n     * @param {Cartesian3} b The vector to project onto\r\n     * @param {Cartesian3} result The result cartesian\r\n     * @returns {Cartesian3} The modified result parameter\r\n     */\r\n    Cartesian3.projectVector = function(a, b, result) {\r\n        \r\n\r\n        var scalar = Cartesian3.dot(a, b) / Cartesian3.dot(b, b);\r\n        return Cartesian3.multiplyByScalar(b, scalar, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian3} [left] The first Cartesian.\r\n     * @param {Cartesian3} [right] The second Cartesian.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian3.equals = function(left, right) {\r\n            return (left === right) ||\r\n              ((defined(left)) &&\r\n               (defined(right)) &&\r\n               (left.x === right.x) &&\r\n               (left.y === right.y) &&\r\n               (left.z === right.z));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Cartesian3.equalsArray = function(cartesian, array, offset) {\r\n        return cartesian.x === array[offset] &&\r\n               cartesian.y === array[offset + 1] &&\r\n               cartesian.z === array[offset + 2];\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian3} [left] The first Cartesian.\r\n     * @param {Cartesian3} [right] The second Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian3.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                CesiumMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * Computes the cross (outer) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The cross product.\r\n     */\r\n    Cartesian3.cross = function(left, right, result) {\r\n        \r\n\r\n        var leftX = left.x;\r\n        var leftY = left.y;\r\n        var leftZ = left.z;\r\n        var rightX = right.x;\r\n        var rightY = right.y;\r\n        var rightZ = right.z;\r\n\r\n        var x = leftY * rightZ - leftZ * rightY;\r\n        var y = leftZ * rightX - leftX * rightZ;\r\n        var z = leftX * rightY - leftY * rightX;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the midpoint between the right and left Cartesian.\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The midpoint.\r\n     */\r\n    Cartesian3.midpoint = function(left, right, result) {\r\n        \r\n\r\n        result.x = (left.x + right.x) * 0.5;\r\n        result.y = (left.y + right.y) * 0.5;\r\n        result.z = (left.z + right.z) * 0.5;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns a Cartesian3 position from longitude and latitude values given in degrees.\r\n     *\r\n     * @param {Number} longitude The longitude, in degrees\r\n     * @param {Number} latitude The latitude, in degrees\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The position\r\n     *\r\n     * @example\r\n     * var position = Cesium.Cartesian3.fromDegrees(-115.0, 37.0);\r\n     */\r\n    Cartesian3.fromDegrees = function(longitude, latitude, height, ellipsoid, result) {\r\n        \r\n\r\n        longitude = CesiumMath.toRadians(longitude);\r\n        latitude = CesiumMath.toRadians(latitude);\r\n        return Cartesian3.fromRadians(longitude, latitude, height, ellipsoid, result);\r\n    };\r\n\r\n    var scratchN = new Cartesian3();\r\n    var scratchK = new Cartesian3();\r\n    var wgs84RadiiSquared = new Cartesian3(6378137.0 * 6378137.0, 6378137.0 * 6378137.0, 6356752.3142451793 * 6356752.3142451793);\r\n\r\n    /**\r\n     * Returns a Cartesian3 position from longitude and latitude values given in radians.\r\n     *\r\n     * @param {Number} longitude The longitude, in radians\r\n     * @param {Number} latitude The latitude, in radians\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The position\r\n     *\r\n     * @example\r\n     * var position = Cesium.Cartesian3.fromRadians(-2.007, 0.645);\r\n     */\r\n    Cartesian3.fromRadians = function(longitude, latitude, height, ellipsoid, result) {\r\n        \r\n\r\n        height = defaultValue(height, 0.0);\r\n        var radiiSquared = defined(ellipsoid) ? ellipsoid.radiiSquared : wgs84RadiiSquared;\r\n\r\n        var cosLatitude = Math.cos(latitude);\r\n        scratchN.x = cosLatitude * Math.cos(longitude);\r\n        scratchN.y = cosLatitude * Math.sin(longitude);\r\n        scratchN.z = Math.sin(latitude);\r\n        scratchN = Cartesian3.normalize(scratchN, scratchN);\r\n\r\n        Cartesian3.multiplyComponents(radiiSquared, scratchN, scratchK);\r\n        var gamma = Math.sqrt(Cartesian3.dot(scratchN, scratchK));\r\n        scratchK = Cartesian3.divideByScalar(scratchK, gamma, scratchK);\r\n        scratchN = Cartesian3.multiplyByScalar(scratchN, height, scratchN);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        return Cartesian3.add(scratchK, scratchN, result);\r\n    };\r\n\r\n    /**\r\n     * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in degrees.\r\n     *\r\n     * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\r\n     * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n     * @returns {Cartesian3[]} The array of positions.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([-115.0, 37.0, -107.0, 33.0]);\r\n     */\r\n    Cartesian3.fromDegreesArray = function(coordinates, ellipsoid, result) {\r\n        \r\n\r\n        var length = coordinates.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 2);\r\n        } else {\r\n            result.length = length / 2;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 2) {\r\n            var longitude = coordinates[i];\r\n            var latitude = coordinates[i + 1];\r\n            var index = i / 2;\r\n            result[index] = Cartesian3.fromDegrees(longitude, latitude, 0, ellipsoid, result[index]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in radians.\r\n     *\r\n     * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\r\n     * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n     * @returns {Cartesian3[]} The array of positions.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromRadiansArray([-2.007, 0.645, -1.867, .575]);\r\n     */\r\n    Cartesian3.fromRadiansArray = function(coordinates, ellipsoid, result) {\r\n        \r\n\r\n        var length = coordinates.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 2);\r\n        } else {\r\n            result.length = length / 2;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 2) {\r\n            var longitude = coordinates[i];\r\n            var latitude = coordinates[i + 1];\r\n            var index = i / 2;\r\n            result[index] = Cartesian3.fromRadians(longitude, latitude, 0, ellipsoid, result[index]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in degrees.\r\n     *\r\n     * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n     * @returns {Cartesian3[]} The array of positions.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArrayHeights([-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]);\r\n     */\r\n    Cartesian3.fromDegreesArrayHeights = function(coordinates, ellipsoid, result) {\r\n        \r\n\r\n        var length = coordinates.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 3);\r\n        } else {\r\n            result.length = length / 3;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 3) {\r\n            var longitude = coordinates[i];\r\n            var latitude = coordinates[i + 1];\r\n            var height = coordinates[i + 2];\r\n            var index = i / 3;\r\n            result[index] = Cartesian3.fromDegrees(longitude, latitude, height, ellipsoid, result[index]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in radians.\r\n     *\r\n     * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n     * @returns {Cartesian3[]} The array of positions.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromRadiansArrayHeights([-2.007, 0.645, 100000.0, -1.867, .575, 150000.0]);\r\n     */\r\n    Cartesian3.fromRadiansArrayHeights = function(coordinates, ellipsoid, result) {\r\n        \r\n\r\n        var length = coordinates.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 3);\r\n        } else {\r\n            result.length = length / 3;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 3) {\r\n            var longitude = coordinates[i];\r\n            var latitude = coordinates[i + 1];\r\n            var height = coordinates[i + 2];\r\n            var index = i / 3;\r\n            result[index] = Cartesian3.fromRadians(longitude, latitude, height, ellipsoid, result[index]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartesian3 instance initialized to (0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian3}\r\n     * @constant\r\n     */\r\n    Cartesian3.ZERO = freezeObject(new Cartesian3(0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian3 instance initialized to (1.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian3}\r\n     * @constant\r\n     */\r\n    Cartesian3.UNIT_X = freezeObject(new Cartesian3(1.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian3 instance initialized to (0.0, 1.0, 0.0).\r\n     *\r\n     * @type {Cartesian3}\r\n     * @constant\r\n     */\r\n    Cartesian3.UNIT_Y = freezeObject(new Cartesian3(0.0, 1.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian3 instance initialized to (0.0, 0.0, 1.0).\r\n     *\r\n     * @type {Cartesian3}\r\n     * @constant\r\n     */\r\n    Cartesian3.UNIT_Z = freezeObject(new Cartesian3(0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * Duplicates this Cartesian3 instance.\r\n     *\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.prototype.clone = function(result) {\r\n        return Cartesian3.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian3} [right] The right hand side Cartesian.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian3.prototype.equals = function(right) {\r\n        return Cartesian3.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian3} [right] The right hand side Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian3.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {\r\n        return Cartesian3.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Cartesian in the format '(x, y, z)'.\r\n     *\r\n     * @returns {String} A string representing this Cartesian in the format '(x, y, z)'.\r\n     */\r\n    Cartesian3.prototype.toString = function() {\r\n        return '(' + this.x + ', ' + this.y + ', ' + this.z + ')';\r\n    };\r\n\r\n    return Cartesian3;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Cartesian3.js\n// module id = 2\n// module chunks = 0","define([\r\n        './defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\r\n     * argument out of range, etc.  This exception should only be thrown during development;\r\n     * it usually indicates a bug in the calling code.  This exception should never be\r\n     * caught; instead the calling code should strive not to generate it.\r\n     * <br /><br />\r\n     * On the other hand, a {@link RuntimeError} indicates an exception that may\r\n     * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\r\n     * to catch.\r\n     *\r\n     * @alias DeveloperError\r\n     * @constructor\r\n     * @extends Error\r\n     *\r\n     * @param {String} [message] The error message for this exception.\r\n     *\r\n     * @see RuntimeError\r\n     */\r\n    function DeveloperError(message) {\r\n        /**\r\n         * 'DeveloperError' indicating that this exception was thrown due to a developer error.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.name = 'DeveloperError';\r\n\r\n        /**\r\n         * The explanation for why this exception was thrown.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.message = message;\r\n\r\n        //Browsers such as IE don't have a stack property until you actually throw the error.\r\n        var stack;\r\n        try {\r\n            throw new Error();\r\n        } catch (e) {\r\n            stack = e.stack;\r\n        }\r\n\r\n        /**\r\n         * The stack trace of this exception, if available.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.stack = stack;\r\n    }\r\n\r\n    if (defined(Object.create)) {\r\n        DeveloperError.prototype = Object.create(Error.prototype);\r\n        DeveloperError.prototype.constructor = DeveloperError;\r\n    }\r\n\r\n    DeveloperError.prototype.toString = function() {\r\n        var str = this.name + ': ' + this.message;\r\n\r\n        if (defined(this.stack)) {\r\n            str += '\\n' + this.stack.toString();\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    DeveloperError.throwInstantiationError = function() {\r\n        throw new DeveloperError('This function defines an interface and should not be called directly.');\r\n    };\r\n\r\n    return DeveloperError;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/DeveloperError.js\n// module id = 3\n// module chunks = 0","define([\r\n        '../ThirdParty/mersenne-twister',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        MersenneTwister,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Math functions.\r\n     *\r\n     * @exports CesiumMath\r\n     * @alias Math\r\n     */\r\n    var CesiumMath = {};\r\n\r\n    /**\r\n     * 0.1\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON1 = 0.1;\r\n\r\n    /**\r\n     * 0.01\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON2 = 0.01;\r\n\r\n    /**\r\n     * 0.001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON3 = 0.001;\r\n\r\n    /**\r\n     * 0.0001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON4 = 0.0001;\r\n\r\n    /**\r\n     * 0.00001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON5 = 0.00001;\r\n\r\n    /**\r\n     * 0.000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON6 = 0.000001;\r\n\r\n    /**\r\n     * 0.0000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON7 = 0.0000001;\r\n\r\n    /**\r\n     * 0.00000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON8 = 0.00000001;\r\n\r\n    /**\r\n     * 0.000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON9 = 0.000000001;\r\n\r\n    /**\r\n     * 0.0000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON10 = 0.0000000001;\r\n\r\n    /**\r\n     * 0.00000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON11 = 0.00000000001;\r\n\r\n    /**\r\n     * 0.000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON12 = 0.000000000001;\r\n\r\n    /**\r\n     * 0.0000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON13 = 0.0000000000001;\r\n\r\n    /**\r\n     * 0.00000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON14 = 0.00000000000001;\r\n\r\n    /**\r\n     * 0.000000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON15 = 0.000000000000001;\r\n\r\n    /**\r\n     * 0.0000000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON16 = 0.0000000000000001;\r\n\r\n    /**\r\n     * 0.00000000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON17 = 0.00000000000000001;\r\n\r\n    /**\r\n     * 0.000000000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON18 = 0.000000000000000001;\r\n\r\n    /**\r\n     * 0.0000000000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON19 = 0.0000000000000000001;\r\n\r\n    /**\r\n     * 0.00000000000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON20 = 0.00000000000000000001;\r\n\r\n    /**\r\n     * 0.000000000000000000001\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.EPSILON21 = 0.000000000000000000001;\r\n\r\n    /**\r\n     * The gravitational parameter of the Earth in meters cubed\r\n     * per second squared as defined by the WGS84 model: 3.986004418e14\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.GRAVITATIONALPARAMETER = 3.986004418e14;\r\n\r\n    /**\r\n     * Radius of the sun in meters: 6.955e8\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.SOLAR_RADIUS = 6.955e8;\r\n\r\n    /**\r\n     * The mean radius of the moon, according to the \"Report of the IAU/IAG Working Group on\r\n     * Cartographic Coordinates and Rotational Elements of the Planets and satellites: 2000\",\r\n     * Celestial Mechanics 82: 83-110, 2002.\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.LUNAR_RADIUS = 1737400.0;\r\n\r\n    /**\r\n     * 64 * 1024\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.SIXTY_FOUR_KILOBYTES = 64 * 1024;\r\n\r\n    /**\r\n     * Returns the sign of the value; 1 if the value is positive, -1 if the value is\r\n     * negative, or 0 if the value is 0.\r\n     *\r\n     * @function\r\n     * @param {Number} value The value to return the sign of.\r\n     * @returns {Number} The sign of value.\r\n     */\r\n    CesiumMath.sign = defaultValue(Math.sign, function sign(value) {\r\n        value = +value; // coerce to number\r\n        if (value === 0 || value !== value) {\r\n            // zero or NaN\r\n            return value;\r\n        }\r\n        return value > 0 ? 1 : -1;\r\n    });\r\n\r\n    /**\r\n     * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.\r\n     * This is similar to {@link CesiumMath#sign} except that returns 1.0 instead of\r\n     * 0.0 when the input value is 0.0.\r\n     * @param {Number} value The value to return the sign of.\r\n     * @returns {Number} The sign of value.\r\n     */\r\n    CesiumMath.signNotZero = function(value) {\r\n        return value < 0.0 ? -1.0 : 1.0;\r\n    };\r\n\r\n    /**\r\n     * Converts a scalar value in the range [-1.0, 1.0] to a SNORM in the range [0, rangeMax]\r\n     * @param {Number} value The scalar value in the range [-1.0, 1.0]\r\n     * @param {Number} [rangeMax=255] The maximum value in the mapped range, 255 by default.\r\n     * @returns {Number} A SNORM value, where 0 maps to -1.0 and rangeMax maps to 1.0.\r\n     *\r\n     * @see CesiumMath.fromSNorm\r\n     */\r\n    CesiumMath.toSNorm = function(value, rangeMax) {\r\n        rangeMax = defaultValue(rangeMax, 255);\r\n        return Math.round((CesiumMath.clamp(value, -1.0, 1.0) * 0.5 + 0.5) * rangeMax);\r\n    };\r\n\r\n    /**\r\n     * Converts a SNORM value in the range [0, rangeMax] to a scalar in the range [-1.0, 1.0].\r\n     * @param {Number} value SNORM value in the range [0, 255]\r\n     * @param {Number} [rangeMax=255] The maximum value in the SNORM range, 255 by default.\r\n     * @returns {Number} Scalar in the range [-1.0, 1.0].\r\n     *\r\n     * @see CesiumMath.toSNorm\r\n     */\r\n    CesiumMath.fromSNorm = function(value, rangeMax) {\r\n        rangeMax = defaultValue(rangeMax, 255);\r\n        return CesiumMath.clamp(value, 0.0, rangeMax) / rangeMax * 2.0 - 1.0;\r\n    };\r\n\r\n    /**\r\n     * Returns the hyperbolic sine of a number.\r\n     * The hyperbolic sine of <em>value</em> is defined to be\r\n     * (<em>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></em>)/2.0\r\n     * where <i>e</i> is Euler's number, approximately 2.71828183.\r\n     *\r\n     * <p>Special cases:\r\n     *   <ul>\r\n     *     <li>If the argument is NaN, then the result is NaN.</li>\r\n     *\r\n     *     <li>If the argument is infinite, then the result is an infinity\r\n     *     with the same sign as the argument.</li>\r\n     *\r\n     *     <li>If the argument is zero, then the result is a zero with the\r\n     *     same sign as the argument.</li>\r\n     *   </ul>\r\n     *</p>\r\n     *\r\n     * @function\r\n     * @param {Number} value The number whose hyperbolic sine is to be returned.\r\n     * @returns {Number} The hyperbolic sine of <code>value</code>.\r\n     */\r\n    CesiumMath.sinh = defaultValue(Math.sinh, function sinh(value) {\r\n        return (Math.exp(value) - Math.exp(-value)) / 2.0;\r\n    });\r\n\r\n    /**\r\n     * Returns the hyperbolic cosine of a number.\r\n     * The hyperbolic cosine of <strong>value</strong> is defined to be\r\n     * (<em>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></em>)/2.0\r\n     * where <i>e</i> is Euler's number, approximately 2.71828183.\r\n     *\r\n     * <p>Special cases:\r\n     *   <ul>\r\n     *     <li>If the argument is NaN, then the result is NaN.</li>\r\n     *\r\n     *     <li>If the argument is infinite, then the result is positive infinity.</li>\r\n     *\r\n     *     <li>If the argument is zero, then the result is 1.0.</li>\r\n     *   </ul>\r\n     *</p>\r\n     *\r\n     * @function\r\n     * @param {Number} value The number whose hyperbolic cosine is to be returned.\r\n     * @returns {Number} The hyperbolic cosine of <code>value</code>.\r\n     */\r\n    CesiumMath.cosh = defaultValue(Math.cosh, function cosh(value) {\r\n        return (Math.exp(value) + Math.exp(-value)) / 2.0;\r\n    });\r\n\r\n    /**\r\n     * Computes the linear interpolation of two values.\r\n     *\r\n     * @param {Number} p The start value to interpolate.\r\n     * @param {Number} q The end value to interpolate.\r\n     * @param {Number} time The time of interpolation generally in the range <code>[0.0, 1.0]</code>.\r\n     * @returns {Number} The linearly interpolated value.\r\n     *\r\n     * @example\r\n     * var n = Cesium.Math.lerp(0.0, 2.0, 0.5); // returns 1.0\r\n     */\r\n    CesiumMath.lerp = function(p, q, time) {\r\n        return ((1.0 - time) * p) + (time * q);\r\n    };\r\n\r\n    /**\r\n     * pi\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.PI = Math.PI;\r\n\r\n    /**\r\n     * 1/pi\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.ONE_OVER_PI = 1.0 / Math.PI;\r\n\r\n    /**\r\n     * pi/2\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.PI_OVER_TWO = Math.PI / 2.0;\r\n\r\n    /**\r\n     * pi/3\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.PI_OVER_THREE = Math.PI / 3.0;\r\n\r\n    /**\r\n     * pi/4\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.PI_OVER_FOUR = Math.PI / 4.0;\r\n\r\n    /**\r\n     * pi/6\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.PI_OVER_SIX = Math.PI / 6.0;\r\n\r\n    /**\r\n     * 3pi/2\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.THREE_PI_OVER_TWO = 3.0 * Math.PI / 2.0;\r\n\r\n    /**\r\n     * 2pi\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.TWO_PI = 2.0 * Math.PI;\r\n\r\n    /**\r\n     * 1/2pi\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    CesiumMath.ONE_OVER_TWO_PI = 1.0 / (2.0 * Math.PI);\r\n\r\n    /**\r\n     * The number of radians in a degree.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     * @default Math.PI / 180.0\r\n     */\r\n    CesiumMath.RADIANS_PER_DEGREE = Math.PI / 180.0;\r\n\r\n    /**\r\n     * The number of degrees in a radian.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     * @default 180.0 / Math.PI\r\n     */\r\n    CesiumMath.DEGREES_PER_RADIAN = 180.0 / Math.PI;\r\n\r\n    /**\r\n     * The number of radians in an arc second.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     * @default {@link CesiumMath.RADIANS_PER_DEGREE} / 3600.0\r\n     */\r\n    CesiumMath.RADIANS_PER_ARCSECOND = CesiumMath.RADIANS_PER_DEGREE / 3600.0;\r\n\r\n    /**\r\n     * Converts degrees to radians.\r\n     * @param {Number} degrees The angle to convert in degrees.\r\n     * @returns {Number} The corresponding angle in radians.\r\n     */\r\n    CesiumMath.toRadians = function(degrees) {\r\n        \r\n        return degrees * CesiumMath.RADIANS_PER_DEGREE;\r\n    };\r\n\r\n    /**\r\n     * Converts radians to degrees.\r\n     * @param {Number} radians The angle to convert in radians.\r\n     * @returns {Number} The corresponding angle in degrees.\r\n     */\r\n    CesiumMath.toDegrees = function(radians) {\r\n        \r\n        return radians * CesiumMath.DEGREES_PER_RADIAN;\r\n    };\r\n\r\n    /**\r\n     * Converts a longitude value, in radians, to the range [<code>-Math.PI</code>, <code>Math.PI</code>).\r\n     *\r\n     * @param {Number} angle The longitude value, in radians, to convert to the range [<code>-Math.PI</code>, <code>Math.PI</code>).\r\n     * @returns {Number} The equivalent longitude value in the range [<code>-Math.PI</code>, <code>Math.PI</code>).\r\n     *\r\n     * @example\r\n     * // Convert 270 degrees to -90 degrees longitude\r\n     * var longitude = Cesium.Math.convertLongitudeRange(Cesium.Math.toRadians(270.0));\r\n     */\r\n    CesiumMath.convertLongitudeRange = function(angle) {\r\n        \r\n        var twoPi = CesiumMath.TWO_PI;\r\n\r\n        var simplified = angle - Math.floor(angle / twoPi) * twoPi;\r\n\r\n        if (simplified < -Math.PI) {\r\n            return simplified + twoPi;\r\n        }\r\n        if (simplified >= Math.PI) {\r\n            return simplified - twoPi;\r\n        }\r\n\r\n        return simplified;\r\n    };\r\n\r\n    /**\r\n     * Convenience function that clamps a latitude value, in radians, to the range [<code>-Math.PI/2</code>, <code>Math.PI/2</code>).\r\n     * Useful for sanitizing data before use in objects requiring correct range.\r\n     *\r\n     * @param {Number} angle The latitude value, in radians, to clamp to the range [<code>-Math.PI/2</code>, <code>Math.PI/2</code>).\r\n     * @returns {Number} The latitude value clamped to the range [<code>-Math.PI/2</code>, <code>Math.PI/2</code>).\r\n     *\r\n     * @example\r\n     * // Clamp 108 degrees latitude to 90 degrees latitude\r\n     * var latitude = Cesium.Math.clampToLatitudeRange(Cesium.Math.toRadians(108.0));\r\n     */\r\n    CesiumMath.clampToLatitudeRange = function(angle) {\r\n        \r\n\r\n        return CesiumMath.clamp(angle, -1*CesiumMath.PI_OVER_TWO, CesiumMath.PI_OVER_TWO);\r\n    };\r\n\r\n    /**\r\n     * Produces an angle in the range -Pi <= angle <= Pi which is equivalent to the provided angle.\r\n     *\r\n     * @param {Number} angle in radians\r\n     * @returns {Number} The angle in the range [<code>-CesiumMath.PI</code>, <code>CesiumMath.PI</code>].\r\n     */\r\n    CesiumMath.negativePiToPi = function(angle) {\r\n        \r\n        return CesiumMath.zeroToTwoPi(angle + CesiumMath.PI) - CesiumMath.PI;\r\n    };\r\n\r\n    /**\r\n     * Produces an angle in the range 0 <= angle <= 2Pi which is equivalent to the provided angle.\r\n     *\r\n     * @param {Number} angle in radians\r\n     * @returns {Number} The angle in the range [0, <code>CesiumMath.TWO_PI</code>].\r\n     */\r\n    CesiumMath.zeroToTwoPi = function(angle) {\r\n        \r\n        var mod = CesiumMath.mod(angle, CesiumMath.TWO_PI);\r\n        if (Math.abs(mod) < CesiumMath.EPSILON14 && Math.abs(angle) > CesiumMath.EPSILON14) {\r\n            return CesiumMath.TWO_PI;\r\n        }\r\n        return mod;\r\n    };\r\n\r\n    /**\r\n     * The modulo operation that also works for negative dividends.\r\n     *\r\n     * @param {Number} m The dividend.\r\n     * @param {Number} n The divisor.\r\n     * @returns {Number} The remainder.\r\n     */\r\n    CesiumMath.mod = function(m, n) {\r\n        \r\n        return ((m % n) + n) % n;\r\n    };\r\n\r\n    /**\r\n     * Determines if two values are equal using an absolute or relative tolerance test. This is useful\r\n     * to avoid problems due to roundoff error when comparing floating-point values directly. The values are\r\n     * first compared using an absolute tolerance test. If that fails, a relative tolerance test is performed.\r\n     * Use this test if you are unsure of the magnitudes of left and right.\r\n     *\r\n     * @param {Number} left The first value to compare.\r\n     * @param {Number} right The other value to compare.\r\n     * @param {Number} relativeEpsilon The maximum inclusive delta between <code>left</code> and <code>right</code> for the relative tolerance test.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The maximum inclusive delta between <code>left</code> and <code>right</code> for the absolute tolerance test.\r\n     * @returns {Boolean} <code>true</code> if the values are equal within the epsilon; otherwise, <code>false</code>.\r\n     *\r\n     * @example\r\n     * var a = Cesium.Math.equalsEpsilon(0.0, 0.01, Cesium.Math.EPSILON2); // true\r\n     * var b = Cesium.Math.equalsEpsilon(0.0, 0.1, Cesium.Math.EPSILON2);  // false\r\n     * var c = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON7); // true\r\n     * var d = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON9); // false\r\n     */\r\n    CesiumMath.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        \r\n        absoluteEpsilon = defaultValue(absoluteEpsilon, relativeEpsilon);\r\n        var absDiff = Math.abs(left - right);\r\n        return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));\r\n    };\r\n\r\n    var factorials = [1];\r\n\r\n    /**\r\n     * Computes the factorial of the provided number.\r\n     *\r\n     * @param {Number} n The number whose factorial is to be computed.\r\n     * @returns {Number} The factorial of the provided number or undefined if the number is less than 0.\r\n     *\r\n     * @exception {DeveloperError} A number greater than or equal to 0 is required.\r\n     *\r\n     *\r\n     * @example\r\n     * //Compute 7!, which is equal to 5040\r\n     * var computedFactorial = Cesium.Math.factorial(7);\r\n     *\r\n     * @see {@link http://en.wikipedia.org/wiki/Factorial|Factorial on Wikipedia}\r\n     */\r\n    CesiumMath.factorial = function(n) {\r\n        \r\n\r\n        var length = factorials.length;\r\n        if (n >= length) {\r\n            var sum = factorials[length - 1];\r\n            for (var i = length; i <= n; i++) {\r\n                factorials.push(sum * i);\r\n            }\r\n        }\r\n        return factorials[n];\r\n    };\r\n\r\n    /**\r\n     * Increments a number with a wrapping to a minimum value if the number exceeds the maximum value.\r\n     *\r\n     * @param {Number} [n] The number to be incremented.\r\n     * @param {Number} [maximumValue] The maximum incremented value before rolling over to the minimum value.\r\n     * @param {Number} [minimumValue=0.0] The number reset to after the maximum value has been exceeded.\r\n     * @returns {Number} The incremented number.\r\n     *\r\n     * @exception {DeveloperError} Maximum value must be greater than minimum value.\r\n     *\r\n     * @example\r\n     * var n = Cesium.Math.incrementWrap(5, 10, 0); // returns 6\r\n     * var n = Cesium.Math.incrementWrap(10, 10, 0); // returns 0\r\n     */\r\n    CesiumMath.incrementWrap = function(n, maximumValue, minimumValue) {\r\n        minimumValue = defaultValue(minimumValue, 0.0);\r\n\r\n        \r\n\r\n        ++n;\r\n        if (n > maximumValue) {\r\n            n = minimumValue;\r\n        }\r\n        return n;\r\n    };\r\n\r\n    /**\r\n     * Determines if a positive integer is a power of two.\r\n     *\r\n     * @param {Number} n The positive integer to test.\r\n     * @returns {Boolean} <code>true</code> if the number if a power of two; otherwise, <code>false</code>.\r\n     *\r\n     * @exception {DeveloperError} A number greater than or equal to 0 is required.\r\n     *\r\n     * @example\r\n     * var t = Cesium.Math.isPowerOfTwo(16); // true\r\n     * var f = Cesium.Math.isPowerOfTwo(20); // false\r\n     */\r\n    CesiumMath.isPowerOfTwo = function(n) {\r\n        \r\n\r\n        return (n !== 0) && ((n & (n - 1)) === 0);\r\n    };\r\n\r\n    /**\r\n     * Computes the next power-of-two integer greater than or equal to the provided positive integer.\r\n     *\r\n     * @param {Number} n The positive integer to test.\r\n     * @returns {Number} The next power-of-two integer.\r\n     *\r\n     * @exception {DeveloperError} A number greater than or equal to 0 is required.\r\n     *\r\n     * @example\r\n     * var n = Cesium.Math.nextPowerOfTwo(29); // 32\r\n     * var m = Cesium.Math.nextPowerOfTwo(32); // 32\r\n     */\r\n    CesiumMath.nextPowerOfTwo = function(n) {\r\n        \r\n\r\n        // From http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\r\n        --n;\r\n        n |= n >> 1;\r\n        n |= n >> 2;\r\n        n |= n >> 4;\r\n        n |= n >> 8;\r\n        n |= n >> 16;\r\n        ++n;\r\n\r\n        return n;\r\n    };\r\n\r\n    /**\r\n     * Constraint a value to lie between two values.\r\n     *\r\n     * @param {Number} value The value to constrain.\r\n     * @param {Number} min The minimum value.\r\n     * @param {Number} max The maximum value.\r\n     * @returns {Number} The value clamped so that min <= value <= max.\r\n     */\r\n    CesiumMath.clamp = function(value, min, max) {\r\n        \r\n        return value < min ? min : value > max ? max : value;\r\n    };\r\n\r\n    var randomNumberGenerator = new MersenneTwister();\r\n\r\n    /**\r\n     * Sets the seed used by the random number generator\r\n     * in {@link CesiumMath#nextRandomNumber}.\r\n     *\r\n     * @param {Number} seed An integer used as the seed.\r\n     */\r\n    CesiumMath.setRandomNumberSeed = function(seed) {\r\n        \r\n\r\n        randomNumberGenerator = new MersenneTwister(seed);\r\n    };\r\n\r\n    /**\r\n     * Generates a random floating point number in the range of [0.0, 1.0)\r\n     * using a Mersenne twister.\r\n     *\r\n     * @returns {Number} A random number in the range of [0.0, 1.0).\r\n     *\r\n     * @see CesiumMath.setRandomNumberSeed\r\n     * @see {@link http://en.wikipedia.org/wiki/Mersenne_twister|Mersenne twister on Wikipedia}\r\n     */\r\n    CesiumMath.nextRandomNumber = function() {\r\n        return randomNumberGenerator.random();\r\n    };\r\n\r\n    /**\r\n     * Generates a random number between two numbers.\r\n     *\r\n     * @param {Number} min The minimum value.\r\n     * @param {Number} max The maximum value.\r\n     * @returns {Number} A random number between the min and max.\r\n     */\r\n    CesiumMath.randomBetween = function(min, max) {\r\n        return CesiumMath.nextRandomNumber() * (max - min) + min;\r\n    };\r\n\r\n    /**\r\n     * Computes <code>Math.acos(value)</code>, but first clamps <code>value</code> to the range [-1.0, 1.0]\r\n     * so that the function will never return NaN.\r\n     *\r\n     * @param {Number} value The value for which to compute acos.\r\n     * @returns {Number} The acos of the value if the value is in the range [-1.0, 1.0], or the acos of -1.0 or 1.0,\r\n     *          whichever is closer, if the value is outside the range.\r\n     */\r\n    CesiumMath.acosClamped = function(value) {\r\n        \r\n        return Math.acos(CesiumMath.clamp(value, -1.0, 1.0));\r\n    };\r\n\r\n    /**\r\n     * Computes <code>Math.asin(value)</code>, but first clamps <code>value</code> to the range [-1.0, 1.0]\r\n     * so that the function will never return NaN.\r\n     *\r\n     * @param {Number} value The value for which to compute asin.\r\n     * @returns {Number} The asin of the value if the value is in the range [-1.0, 1.0], or the asin of -1.0 or 1.0,\r\n     *          whichever is closer, if the value is outside the range.\r\n     */\r\n    CesiumMath.asinClamped = function(value) {\r\n        \r\n        return Math.asin(CesiumMath.clamp(value, -1.0, 1.0));\r\n    };\r\n\r\n    /**\r\n     * Finds the chord length between two points given the circle's radius and the angle between the points.\r\n     *\r\n     * @param {Number} angle The angle between the two points.\r\n     * @param {Number} radius The radius of the circle.\r\n     * @returns {Number} The chord length.\r\n     */\r\n    CesiumMath.chordLength = function(angle, radius) {\r\n        \r\n        return 2.0 * radius * Math.sin(angle * 0.5);\r\n    };\r\n\r\n    /**\r\n     * Finds the logarithm of a number to a base.\r\n     *\r\n     * @param {Number} number The number.\r\n     * @param {Number} base The base.\r\n     * @returns {Number} The result.\r\n     */\r\n    CesiumMath.logBase = function(number, base) {\r\n        \r\n        return Math.log(number) / Math.log(base);\r\n    };\r\n\r\n    /**\r\n     * Finds the cube root of a number.\r\n     * Returns NaN if <code>number</code> is not provided.\r\n     *\r\n     * @function\r\n     * @param {Number} [number] The number.\r\n     * @returns {Number} The result.\r\n     */\r\n    CesiumMath.cbrt = defaultValue(Math.cbrt, function cbrt(number) {\r\n        var result = Math.pow(Math.abs(number), 1.0 / 3.0);\r\n        return number < 0.0 ? -result : result;\r\n    });\r\n\r\n    /**\r\n     * Finds the base 2 logarithm of a number.\r\n     *\r\n     * @function\r\n     * @param {Number} number The number.\r\n     * @returns {Number} The result.\r\n     */\r\n    CesiumMath.log2 = defaultValue(Math.log2, function log2(number) {\r\n        return Math.log(number) * Math.LOG2E;\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CesiumMath.fog = function(distanceToCamera, density) {\r\n        var scalar = distanceToCamera * density;\r\n        return 1.0 - Math.exp(-(scalar * scalar));\r\n    };\r\n\r\n    /**\r\n     * Computes a fast approximation of Atan for input in the range [-1, 1].\r\n     *\r\n     * Based on Michal Drobot's approximation from ShaderFastLibs,\r\n     * which in turn is based on \"Efficient approximations for the arctangent function,\"\r\n     * Rajan, S. Sichun Wang Inkol, R. Joyal, A., May 2006.\r\n     * Adapted from ShaderFastLibs under MIT License.\r\n     *\r\n     * @param {Number} x An input number in the range [-1, 1]\r\n     * @returns {Number} An approximation of atan(x)\r\n     */\r\n    CesiumMath.fastApproximateAtan = function(x) {\r\n        \r\n\r\n        return x * (-0.1784 * Math.abs(x) - 0.0663 * x * x + 1.0301);\r\n    };\r\n\r\n    /**\r\n     * Computes a fast approximation of Atan2(x, y) for arbitrary input scalars.\r\n     *\r\n     * Range reduction math based on nvidia's cg reference implementation: http://developer.download.nvidia.com/cg/atan2.html\r\n     *\r\n     * @param {Number} x An input number that isn't zero if y is zero.\r\n     * @param {Number} y An input number that isn't zero if x is zero.\r\n     * @returns {Number} An approximation of atan2(x, y)\r\n     */\r\n    CesiumMath.fastApproximateAtan2 = function(x, y) {\r\n        \r\n\r\n        // atan approximations are usually only reliable over [-1, 1]\r\n        // So reduce the range by flipping whether x or y is on top based on which is bigger.\r\n        var opposite;\r\n        var adjacent;\r\n        var t = Math.abs(x); // t used as swap and atan result.\r\n        opposite = Math.abs(y);\r\n        adjacent = Math.max(t, opposite);\r\n        opposite = Math.min(t, opposite);\r\n\r\n        var oppositeOverAdjacent = opposite / adjacent;\r\n        \r\n        t = CesiumMath.fastApproximateAtan(oppositeOverAdjacent);\r\n\r\n        // Undo range reduction\r\n        t = Math.abs(y) > Math.abs(x) ? CesiumMath.PI_OVER_TWO - t : t;\r\n        t = x < 0.0 ?  CesiumMath.PI - t : t;\r\n        t = y < 0.0 ? -t : t;\r\n        return t;\r\n    };\r\n\r\n    return CesiumMath;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Math.js\n// module id = 4\n// module chunks = 0","define([\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Contains functions for checking that supplied arguments are of a specified type\r\n     * or meet specified conditions\r\n     * @private\r\n     */\r\n    var Check = {};\r\n\r\n    /**\r\n     * Contains type checking functions, all using the typeof operator\r\n     */\r\n    Check.typeOf = {};\r\n\r\n    function getUndefinedErrorMessage(name) {\r\n        return name + ' is required, actual value was undefined';\r\n    }\r\n\r\n    function getFailedTypeErrorMessage(actual, expected, name) {\r\n        return 'Expected ' + name + ' to be typeof ' + expected + ', actual typeof was ' + actual;\r\n    }\r\n\r\n    /**\r\n     * Throws if test is not defined\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value that is to be checked\r\n     * @exception {DeveloperError} test must be defined\r\n     */\r\n    Check.defined = function (name, test) {\r\n        if (!defined(test)) {\r\n            throw new DeveloperError(getUndefinedErrorMessage(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'function'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'function'\r\n     */\r\n    Check.typeOf.func = function (name, test) {\r\n        if (typeof test !== 'function') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'function', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'string'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'string'\r\n     */\r\n    Check.typeOf.string = function (name, test) {\r\n        if (typeof test !== 'string') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'string', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'number'\r\n     */\r\n    Check.typeOf.number = function (name, test) {\r\n        if (typeof test !== 'number') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'number', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and less than limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and less than limit\r\n     */\r\n    Check.typeOf.number.lessThan = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test >= limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be less than ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and less than or equal to limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\r\n     */\r\n    Check.typeOf.number.lessThanOrEquals = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test > limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be less than or equal to ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and greater than limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and greater than limit\r\n     */\r\n    Check.typeOf.number.greaterThan = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test <= limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be greater than ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and greater than or equal to limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\r\n     */\r\n    Check.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test < limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be greater than or equal to' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'object'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'object'\r\n     */\r\n    Check.typeOf.object = function (name, test) {\r\n        if (typeof test !== 'object') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'object', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'boolean'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'boolean'\r\n     */\r\n    Check.typeOf.bool = function (name, test) {\r\n        if (typeof test !== 'boolean') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'boolean', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test1 and test2 is not typeof 'number' and not equal in value\r\n     *\r\n     * @param {String} name1 The name of the first variable being tested\r\n     * @param {String} name2 The name of the second variable being tested against\r\n     * @param {*} test1 The value to test\r\n     * @param {*} test2 The value to test against\r\n     * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\r\n     */\r\n    Check.typeOf.number.equals = function (name1, name2, test1, test2) {\r\n        Check.typeOf.number(name1, test1);\r\n        Check.typeOf.number(name2, test2);\r\n        if (test1 !== test2) {\r\n            throw new DeveloperError(name1 + ' must be equal to ' + name2 + ', the actual values are ' + test1 + ' and ' + test2);\r\n        }\r\n    };\r\n\r\n    return Check;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Check.js\n// module id = 5\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './freezeObject',\r\n        './Math',\r\n        './scaleToGeodeticSurface'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        freezeObject,\r\n        CesiumMath,\r\n        scaleToGeodeticSurface) {\r\n    'use strict';\r\n\r\n    function initialize(ellipsoid, x, y, z) {\r\n        x = defaultValue(x, 0.0);\r\n        y = defaultValue(y, 0.0);\r\n        z = defaultValue(z, 0.0);\r\n\r\n        \r\n\r\n        ellipsoid._radii = new Cartesian3(x, y, z);\r\n\r\n        ellipsoid._radiiSquared = new Cartesian3(x * x,\r\n                                            y * y,\r\n                                            z * z);\r\n\r\n        ellipsoid._radiiToTheFourth = new Cartesian3(x * x * x * x,\r\n                                                y * y * y * y,\r\n                                                z * z * z * z);\r\n\r\n        ellipsoid._oneOverRadii = new Cartesian3(x === 0.0 ? 0.0 : 1.0 / x,\r\n                                            y === 0.0 ? 0.0 : 1.0 / y,\r\n                                            z === 0.0 ? 0.0 : 1.0 / z);\r\n\r\n        ellipsoid._oneOverRadiiSquared = new Cartesian3(x === 0.0 ? 0.0 : 1.0 / (x * x),\r\n                                                   y === 0.0 ? 0.0 : 1.0 / (y * y),\r\n                                                   z === 0.0 ? 0.0 : 1.0 / (z * z));\r\n\r\n        ellipsoid._minimumRadius = Math.min(x, y, z);\r\n\r\n        ellipsoid._maximumRadius = Math.max(x, y, z);\r\n\r\n        ellipsoid._centerToleranceSquared = CesiumMath.EPSILON1;\r\n\r\n        if (ellipsoid._radiiSquared.z !== 0) {\r\n            ellipsoid._squaredXOverSquaredZ = ellipsoid._radiiSquared.x / ellipsoid._radiiSquared.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A quadratic surface defined in Cartesian coordinates by the equation\r\n     * <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used\r\n     * by Cesium to represent the shape of planetary bodies.\r\n     *\r\n     * Rather than constructing this object directly, one of the provided\r\n     * constants is normally used.\r\n     * @alias Ellipsoid\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0] The radius in the x direction.\r\n     * @param {Number} [y=0] The radius in the y direction.\r\n     * @param {Number} [z=0] The radius in the z direction.\r\n     *\r\n     * @exception {DeveloperError} All radii components must be greater than or equal to zero.\r\n     *\r\n     * @see Ellipsoid.fromCartesian3\r\n     * @see Ellipsoid.WGS84\r\n     * @see Ellipsoid.UNIT_SPHERE\r\n     */\r\n    function Ellipsoid(x, y, z) {\r\n        this._radii = undefined;\r\n        this._radiiSquared = undefined;\r\n        this._radiiToTheFourth = undefined;\r\n        this._oneOverRadii = undefined;\r\n        this._oneOverRadiiSquared = undefined;\r\n        this._minimumRadius = undefined;\r\n        this._maximumRadius = undefined;\r\n        this._centerToleranceSquared = undefined;\r\n        this._squaredXOverSquaredZ = undefined;\r\n\r\n        initialize(this, x, y, z);\r\n    }\r\n\r\n    defineProperties(Ellipsoid.prototype, {\r\n        /**\r\n         * Gets the radii of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        radii : {\r\n            get: function() {\r\n                return this._radii;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the squared radii of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        radiiSquared : {\r\n            get : function() {\r\n                return this._radiiSquared;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the radii of the ellipsoid raise to the fourth power.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        radiiToTheFourth : {\r\n            get : function() {\r\n                return this._radiiToTheFourth;\r\n            }\r\n        },\r\n        /**\r\n         * Gets one over the radii of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        oneOverRadii : {\r\n            get : function() {\r\n                return this._oneOverRadii;\r\n            }\r\n        },\r\n        /**\r\n         * Gets one over the squared radii of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        oneOverRadiiSquared : {\r\n            get : function() {\r\n                return this._oneOverRadiiSquared;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the minimum radius of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        minimumRadius : {\r\n            get : function() {\r\n                return this._minimumRadius;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the maximum radius of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        maximumRadius : {\r\n            get : function() {\r\n                return this._maximumRadius;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates an Ellipsoid instance.\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid to duplicate.\r\n     * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n     *                    instance should be created.\r\n     * @returns {Ellipsoid} The cloned Ellipsoid. (Returns undefined if ellipsoid is undefined)\r\n     */\r\n    Ellipsoid.clone = function(ellipsoid, result) {\r\n        if (!defined(ellipsoid)) {\r\n            return undefined;\r\n        }\r\n        var radii = ellipsoid._radii;\r\n\r\n        if (!defined(result)) {\r\n            return new Ellipsoid(radii.x, radii.y, radii.z);\r\n        }\r\n\r\n        Cartesian3.clone(radii, result._radii);\r\n        Cartesian3.clone(ellipsoid._radiiSquared, result._radiiSquared);\r\n        Cartesian3.clone(ellipsoid._radiiToTheFourth, result._radiiToTheFourth);\r\n        Cartesian3.clone(ellipsoid._oneOverRadii, result._oneOverRadii);\r\n        Cartesian3.clone(ellipsoid._oneOverRadiiSquared, result._oneOverRadiiSquared);\r\n        result._minimumRadius = ellipsoid._minimumRadius;\r\n        result._maximumRadius = ellipsoid._maximumRadius;\r\n        result._centerToleranceSquared = ellipsoid._centerToleranceSquared;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions.\r\n     *\r\n     * @param {Cartesian3} [cartesian=Cartesian3.ZERO] The ellipsoid's radius in the x, y, and z directions.\r\n     * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n     *                    instance should be created.\r\n     * @returns {Ellipsoid} A new Ellipsoid instance.\r\n     *\r\n     * @exception {DeveloperError} All radii components must be greater than or equal to zero.\r\n     *\r\n     * @see Ellipsoid.WGS84\r\n     * @see Ellipsoid.UNIT_SPHERE\r\n     */\r\n    Ellipsoid.fromCartesian3 = function(cartesian, result) {\r\n        if (!defined(result)) {\r\n            result = new Ellipsoid();\r\n        }\r\n\r\n        if (!defined(cartesian)) {\r\n            return result;\r\n        }\r\n\r\n        initialize(result, cartesian.x, cartesian.y, cartesian.z);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An Ellipsoid instance initialized to the WGS84 standard.\r\n     *\r\n     * @type {Ellipsoid}\r\n     * @constant\r\n     */\r\n    Ellipsoid.WGS84 = freezeObject(new Ellipsoid(6378137.0, 6378137.0, 6356752.3142451793));\r\n\r\n    /**\r\n     * An Ellipsoid instance initialized to radii of (1.0, 1.0, 1.0).\r\n     *\r\n     * @type {Ellipsoid}\r\n     * @constant\r\n     */\r\n    Ellipsoid.UNIT_SPHERE = freezeObject(new Ellipsoid(1.0, 1.0, 1.0));\r\n\r\n    /**\r\n     * An Ellipsoid instance initialized to a sphere with the lunar radius.\r\n     *\r\n     * @type {Ellipsoid}\r\n     * @constant\r\n     */\r\n    Ellipsoid.MOON = freezeObject(new Ellipsoid(CesiumMath.LUNAR_RADIUS, CesiumMath.LUNAR_RADIUS, CesiumMath.LUNAR_RADIUS));\r\n\r\n    /**\r\n     * Duplicates an Ellipsoid instance.\r\n     *\r\n     * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n     *                    instance should be created.\r\n     * @returns {Ellipsoid} The cloned Ellipsoid.\r\n     */\r\n    Ellipsoid.prototype.clone = function(result) {\r\n        return Ellipsoid.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Ellipsoid.packedLength = Cartesian3.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Ellipsoid} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Ellipsoid.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._radii, array, startingIndex);\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Ellipsoid} [result] The object into which to store the result.\r\n     * @returns {Ellipsoid} The modified result parameter or a new Ellipsoid instance if one was not provided.\r\n     */\r\n    Ellipsoid.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var radii = Cartesian3.unpack(array, startingIndex);\r\n        return Ellipsoid.fromCartesian3(radii, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the unit vector directed from the center of this ellipsoid toward the provided Cartesian position.\r\n     * @function\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian for which to to determine the geocentric normal.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    Ellipsoid.prototype.geocentricSurfaceNormal = Cartesian3.normalize;\r\n\r\n    /**\r\n     * Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\r\n     *\r\n     * @param {Cartographic} cartographic The cartographic position for which to to determine the geodetic normal.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    Ellipsoid.prototype.geodeticSurfaceNormalCartographic = function(cartographic, result) {\r\n        \r\n\r\n        var longitude = cartographic.longitude;\r\n        var latitude = cartographic.latitude;\r\n        var cosLatitude = Math.cos(latitude);\r\n\r\n        var x = cosLatitude * Math.cos(longitude);\r\n        var y = cosLatitude * Math.sin(longitude);\r\n        var z = Math.sin(latitude);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return Cartesian3.normalize(result, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position for which to to determine the surface normal.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    Ellipsoid.prototype.geodeticSurfaceNormal = function(cartesian, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        result = Cartesian3.multiplyComponents(cartesian, this._oneOverRadiiSquared, result);\r\n        return Cartesian3.normalize(result, result);\r\n    };\r\n\r\n    var cartographicToCartesianNormal = new Cartesian3();\r\n    var cartographicToCartesianK = new Cartesian3();\r\n\r\n    /**\r\n     * Converts the provided cartographic to Cartesian representation.\r\n     *\r\n     * @param {Cartographic} cartographic The cartographic position.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     *\r\n     * @example\r\n     * //Create a Cartographic and determine it's Cartesian representation on a WGS84 ellipsoid.\r\n     * var position = new Cesium.Cartographic(Cesium.Math.toRadians(21), Cesium.Math.toRadians(78), 5000);\r\n     * var cartesianPosition = Cesium.Ellipsoid.WGS84.cartographicToCartesian(position);\r\n     */\r\n    Ellipsoid.prototype.cartographicToCartesian = function(cartographic, result) {\r\n        //`cartographic is required` is thrown from geodeticSurfaceNormalCartographic.\r\n        var n = cartographicToCartesianNormal;\r\n        var k = cartographicToCartesianK;\r\n        this.geodeticSurfaceNormalCartographic(cartographic, n);\r\n        Cartesian3.multiplyComponents(this._radiiSquared, n, k);\r\n        var gamma = Math.sqrt(Cartesian3.dot(n, k));\r\n        Cartesian3.divideByScalar(k, gamma, k);\r\n        Cartesian3.multiplyByScalar(n, cartographic.height, n);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        return Cartesian3.add(k, n, result);\r\n    };\r\n\r\n    /**\r\n     * Converts the provided array of cartographics to an array of Cartesians.\r\n     *\r\n     * @param {Cartographic[]} cartographics An array of cartographic positions.\r\n     * @param {Cartesian3[]} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3[]} The modified result parameter or a new Array instance if none was provided.\r\n     *\r\n     * @example\r\n     * //Convert an array of Cartographics and determine their Cartesian representation on a WGS84 ellipsoid.\r\n     * var positions = [new Cesium.Cartographic(Cesium.Math.toRadians(21), Cesium.Math.toRadians(78), 0),\r\n     *                  new Cesium.Cartographic(Cesium.Math.toRadians(21.321), Cesium.Math.toRadians(78.123), 100),\r\n     *                  new Cesium.Cartographic(Cesium.Math.toRadians(21.645), Cesium.Math.toRadians(78.456), 250)];\r\n     * var cartesianPositions = Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(positions);\r\n     */\r\n    Ellipsoid.prototype.cartographicArrayToCartesianArray = function(cartographics, result) {\r\n        \r\n\r\n        var length = cartographics.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length);\r\n        } else {\r\n            result.length = length;\r\n        }\r\n        for ( var i = 0; i < length; i++) {\r\n            result[i] = this.cartographicToCartesian(cartographics[i], result[i]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    var cartesianToCartographicN = new Cartesian3();\r\n    var cartesianToCartographicP = new Cartesian3();\r\n    var cartesianToCartographicH = new Cartesian3();\r\n\r\n    /**\r\n     * Converts the provided cartesian to cartographic representation.\r\n     * The cartesian is undefined at the center of the ellipsoid.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\r\n     *\r\n     * @example\r\n     * //Create a Cartesian and determine it's Cartographic representation on a WGS84 ellipsoid.\r\n     * var position = new Cesium.Cartesian3(17832.12, 83234.52, 952313.73);\r\n     * var cartographicPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(position);\r\n     */\r\n    Ellipsoid.prototype.cartesianToCartographic = function(cartesian, result) {\r\n        //`cartesian is required.` is thrown from scaleToGeodeticSurface\r\n        var p = this.scaleToGeodeticSurface(cartesian, cartesianToCartographicP);\r\n\r\n        if (!defined(p)) {\r\n            return undefined;\r\n        }\r\n\r\n        var n = this.geodeticSurfaceNormal(p, cartesianToCartographicN);\r\n        var h = Cartesian3.subtract(cartesian, p, cartesianToCartographicH);\r\n\r\n        var longitude = Math.atan2(n.y, n.x);\r\n        var latitude = Math.asin(n.z);\r\n        var height = CesiumMath.sign(Cartesian3.dot(h, cartesian)) * Cartesian3.magnitude(h);\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude, height);\r\n        }\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts the provided array of cartesians to an array of cartographics.\r\n     *\r\n     * @param {Cartesian3[]} cartesians An array of Cartesian positions.\r\n     * @param {Cartographic[]} [result] The object onto which to store the result.\r\n     * @returns {Cartographic[]} The modified result parameter or a new Array instance if none was provided.\r\n     *\r\n     * @example\r\n     * //Create an array of Cartesians and determine their Cartographic representation on a WGS84 ellipsoid.\r\n     * var positions = [new Cesium.Cartesian3(17832.12, 83234.52, 952313.73),\r\n     *                  new Cesium.Cartesian3(17832.13, 83234.53, 952313.73),\r\n     *                  new Cesium.Cartesian3(17832.14, 83234.54, 952313.73)]\r\n     * var cartographicPositions = Cesium.Ellipsoid.WGS84.cartesianArrayToCartographicArray(positions);\r\n     */\r\n    Ellipsoid.prototype.cartesianArrayToCartographicArray = function(cartesians, result) {\r\n        \r\n\r\n        var length = cartesians.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length);\r\n        } else {\r\n            result.length = length;\r\n        }\r\n        for ( var i = 0; i < length; ++i) {\r\n            result[i] = this.cartesianToCartographic(cartesians[i], result[i]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Scales the provided Cartesian position along the geodetic surface normal\r\n     * so that it is on the surface of this ellipsoid.  If the position is\r\n     * at the center of the ellipsoid, this function returns undefined.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter, a new Cartesian3 instance if none was provided, or undefined if the position is at the center.\r\n     */\r\n    Ellipsoid.prototype.scaleToGeodeticSurface = function(cartesian, result) {\r\n        return scaleToGeodeticSurface(cartesian, this._oneOverRadii, this._oneOverRadiiSquared, this._centerToleranceSquared, result);\r\n    };\r\n\r\n    /**\r\n     * Scales the provided Cartesian position along the geocentric surface normal\r\n     * so that it is on the surface of this ellipsoid.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    Ellipsoid.prototype.scaleToGeocentricSurface = function(cartesian, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var positionX = cartesian.x;\r\n        var positionY = cartesian.y;\r\n        var positionZ = cartesian.z;\r\n        var oneOverRadiiSquared = this._oneOverRadiiSquared;\r\n\r\n        var beta = 1.0 / Math.sqrt((positionX * positionX) * oneOverRadiiSquared.x +\r\n                                   (positionY * positionY) * oneOverRadiiSquared.y +\r\n                                   (positionZ * positionZ) * oneOverRadiiSquared.z);\r\n\r\n        return Cartesian3.multiplyByScalar(cartesian, beta, result);\r\n    };\r\n\r\n    /**\r\n     * Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\r\n     * its components by the result of {@link Ellipsoid#oneOverRadii}.\r\n     *\r\n     * @param {Cartesian3} position The position to transform.\r\n     * @param {Cartesian3} [result] The position to which to copy the result, or undefined to create and\r\n     *        return a new instance.\r\n     * @returns {Cartesian3} The position expressed in the scaled space.  The returned instance is the\r\n     *          one passed as the result parameter if it is not undefined, or a new instance of it is.\r\n     */\r\n    Ellipsoid.prototype.transformPositionToScaledSpace = function(position, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        return Cartesian3.multiplyComponents(position, this._oneOverRadii, result);\r\n    };\r\n\r\n    /**\r\n     * Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\r\n     * its components by the result of {@link Ellipsoid#radii}.\r\n     *\r\n     * @param {Cartesian3} position The position to transform.\r\n     * @param {Cartesian3} [result] The position to which to copy the result, or undefined to create and\r\n     *        return a new instance.\r\n     * @returns {Cartesian3} The position expressed in the unscaled space.  The returned instance is the\r\n     *          one passed as the result parameter if it is not undefined, or a new instance of it is.\r\n     */\r\n    Ellipsoid.prototype.transformPositionFromScaledSpace = function(position, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        return Cartesian3.multiplyComponents(position, this._radii, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Ellipsoid against the provided Ellipsoid componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Ellipsoid} [right] The other Ellipsoid.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Ellipsoid.prototype.equals = function(right) {\r\n        return (this === right) ||\r\n               (defined(right) &&\r\n                Cartesian3.equals(this._radii, right._radii));\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'.\r\n     *\r\n     * @returns {String} A string representing this ellipsoid in the format '(radii.x, radii.y, radii.z)'.\r\n     */\r\n    Ellipsoid.prototype.toString = function() {\r\n        return this._radii.toString();\r\n    };\r\n\r\n    /**\r\n     * Computes a point which is the intersection of the surface normal with the z-axis.\r\n     *\r\n     * @param {Cartesian3} position the position. must be on the surface of the ellipsoid.\r\n     * @param {Number} [buffer = 0.0] A buffer to subtract from the ellipsoid size when checking if the point is inside the ellipsoid.\r\n     *                                In earth case, with common earth datums, there is no need for this buffer since the intersection point is always (relatively) very close to the center.\r\n     *                                In WGS84 datum, intersection point is at max z = +-42841.31151331382 (0.673% of z-axis).\r\n     *                                Intersection point could be outside the ellipsoid if the ratio of MajorAxis / AxisOfRotation is bigger than the square root of 2\r\n     * @param {Cartesian3} [result] The cartesian to which to copy the result, or undefined to create and\r\n     *        return a new instance.\r\n     * @returns {Cartesian3 | undefined} the intersection point if it's inside the ellipsoid, undefined otherwise\r\n     *\r\n     * @exception {DeveloperError} position is required.\r\n     * @exception {DeveloperError} Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y).\r\n     * @exception {DeveloperError} Ellipsoid.radii.z must be greater than 0.\r\n     */\r\n    Ellipsoid.prototype.getSurfaceNormalIntersectionWithZAxis = function(position, buffer, result) {\r\n        \r\n\r\n        buffer = defaultValue(buffer, 0.0);\r\n\r\n        var squaredXOverSquaredZ = this._squaredXOverSquaredZ;\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        result.x = 0.0;\r\n        result.y = 0.0;\r\n        result.z = position.z * (1 - squaredXOverSquaredZ);\r\n\r\n        if (Math.abs(result.z) >= this._radii.z - buffer) {\r\n            return undefined;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    return Ellipsoid;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Ellipsoid.js\n// module id = 6\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './Ellipsoid',\r\n        './GeographicProjection',\r\n        './Intersect',\r\n        './Interval',\r\n        './Math',\r\n        './Matrix3',\r\n        './Matrix4',\r\n        './Rectangle'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        Ellipsoid,\r\n        GeographicProjection,\r\n        Intersect,\r\n        Interval,\r\n        CesiumMath,\r\n        Matrix3,\r\n        Matrix4,\r\n        Rectangle) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A bounding sphere with a center and a radius.\r\n     * @alias BoundingSphere\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} [center=Cartesian3.ZERO] The center of the bounding sphere.\r\n     * @param {Number} [radius=0.0] The radius of the bounding sphere.\r\n     *\r\n     * @see AxisAlignedBoundingBox\r\n     * @see BoundingRectangle\r\n     * @see Packable\r\n     */\r\n    function BoundingSphere(center, radius) {\r\n        /**\r\n         * The center point of the sphere.\r\n         * @type {Cartesian3}\r\n         * @default {@link Cartesian3.ZERO}\r\n         */\r\n        this.center = Cartesian3.clone(defaultValue(center, Cartesian3.ZERO));\r\n\r\n        /**\r\n         * The radius of the sphere.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.radius = defaultValue(radius, 0.0);\r\n    }\r\n\r\n    var fromPointsXMin = new Cartesian3();\r\n    var fromPointsYMin = new Cartesian3();\r\n    var fromPointsZMin = new Cartesian3();\r\n    var fromPointsXMax = new Cartesian3();\r\n    var fromPointsYMax = new Cartesian3();\r\n    var fromPointsZMax = new Cartesian3();\r\n    var fromPointsCurrentPos = new Cartesian3();\r\n    var fromPointsScratch = new Cartesian3();\r\n    var fromPointsRitterCenter = new Cartesian3();\r\n    var fromPointsMinBoxPt = new Cartesian3();\r\n    var fromPointsMaxBoxPt = new Cartesian3();\r\n    var fromPointsNaiveCenterScratch = new Cartesian3();\r\n    var volumeConstant = (4.0 / 3.0) * CesiumMath.PI;\r\n\r\n    /**\r\n     * Computes a tight-fitting bounding sphere enclosing a list of 3D Cartesian points.\r\n     * The bounding sphere is computed by running two algorithms, a naive algorithm and\r\n     * Ritter's algorithm. The smaller of the two spheres is used to ensure a tight fit.\r\n     *\r\n     * @param {Cartesian3[]} [positions] An array of points that the bounding sphere will enclose.  Each point must have <code>x</code>, <code>y</code>, and <code>z</code> properties.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.\r\n     *\r\n     * @see {@link http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding/|Bounding Sphere computation article}\r\n     */\r\n    BoundingSphere.fromPoints = function(positions, result) {\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        if (!defined(positions) || positions.length === 0) {\r\n            result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n            result.radius = 0.0;\r\n            return result;\r\n        }\r\n\r\n        var currentPos = Cartesian3.clone(positions[0], fromPointsCurrentPos);\r\n\r\n        var xMin = Cartesian3.clone(currentPos, fromPointsXMin);\r\n        var yMin = Cartesian3.clone(currentPos, fromPointsYMin);\r\n        var zMin = Cartesian3.clone(currentPos, fromPointsZMin);\r\n\r\n        var xMax = Cartesian3.clone(currentPos, fromPointsXMax);\r\n        var yMax = Cartesian3.clone(currentPos, fromPointsYMax);\r\n        var zMax = Cartesian3.clone(currentPos, fromPointsZMax);\r\n\r\n        var numPositions = positions.length;\r\n        var i;\r\n        for (i = 1; i < numPositions; i++) {\r\n            Cartesian3.clone(positions[i], currentPos);\r\n\r\n            var x = currentPos.x;\r\n            var y = currentPos.y;\r\n            var z = currentPos.z;\r\n\r\n            // Store points containing the the smallest and largest components\r\n            if (x < xMin.x) {\r\n                Cartesian3.clone(currentPos, xMin);\r\n            }\r\n\r\n            if (x > xMax.x) {\r\n                Cartesian3.clone(currentPos, xMax);\r\n            }\r\n\r\n            if (y < yMin.y) {\r\n                Cartesian3.clone(currentPos, yMin);\r\n            }\r\n\r\n            if (y > yMax.y) {\r\n                Cartesian3.clone(currentPos, yMax);\r\n            }\r\n\r\n            if (z < zMin.z) {\r\n                Cartesian3.clone(currentPos, zMin);\r\n            }\r\n\r\n            if (z > zMax.z) {\r\n                Cartesian3.clone(currentPos, zMax);\r\n            }\r\n        }\r\n\r\n        // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\r\n        var xSpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(xMax, xMin, fromPointsScratch));\r\n        var ySpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(yMax, yMin, fromPointsScratch));\r\n        var zSpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(zMax, zMin, fromPointsScratch));\r\n\r\n        // Set the diameter endpoints to the largest span.\r\n        var diameter1 = xMin;\r\n        var diameter2 = xMax;\r\n        var maxSpan = xSpan;\r\n        if (ySpan > maxSpan) {\r\n            maxSpan = ySpan;\r\n            diameter1 = yMin;\r\n            diameter2 = yMax;\r\n        }\r\n        if (zSpan > maxSpan) {\r\n            maxSpan = zSpan;\r\n            diameter1 = zMin;\r\n            diameter2 = zMax;\r\n        }\r\n\r\n        // Calculate the center of the initial sphere found by Ritter's algorithm\r\n        var ritterCenter = fromPointsRitterCenter;\r\n        ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\r\n        ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\r\n        ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\r\n\r\n        // Calculate the radius of the initial sphere found by Ritter's algorithm\r\n        var radiusSquared = Cartesian3.magnitudeSquared(Cartesian3.subtract(diameter2, ritterCenter, fromPointsScratch));\r\n        var ritterRadius = Math.sqrt(radiusSquared);\r\n\r\n        // Find the center of the sphere found using the Naive method.\r\n        var minBoxPt = fromPointsMinBoxPt;\r\n        minBoxPt.x = xMin.x;\r\n        minBoxPt.y = yMin.y;\r\n        minBoxPt.z = zMin.z;\r\n\r\n        var maxBoxPt = fromPointsMaxBoxPt;\r\n        maxBoxPt.x = xMax.x;\r\n        maxBoxPt.y = yMax.y;\r\n        maxBoxPt.z = zMax.z;\r\n\r\n        var naiveCenter = Cartesian3.midpoint(minBoxPt, maxBoxPt, fromPointsNaiveCenterScratch);\r\n\r\n        // Begin 2nd pass to find naive radius and modify the ritter sphere.\r\n        var naiveRadius = 0;\r\n        for (i = 0; i < numPositions; i++) {\r\n            Cartesian3.clone(positions[i], currentPos);\r\n\r\n            // Find the furthest point from the naive center to calculate the naive radius.\r\n            var r = Cartesian3.magnitude(Cartesian3.subtract(currentPos, naiveCenter, fromPointsScratch));\r\n            if (r > naiveRadius) {\r\n                naiveRadius = r;\r\n            }\r\n\r\n            // Make adjustments to the Ritter Sphere to include all points.\r\n            var oldCenterToPointSquared = Cartesian3.magnitudeSquared(Cartesian3.subtract(currentPos, ritterCenter, fromPointsScratch));\r\n            if (oldCenterToPointSquared > radiusSquared) {\r\n                var oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\r\n                // Calculate new radius to include the point that lies outside\r\n                ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\r\n                radiusSquared = ritterRadius * ritterRadius;\r\n                // Calculate center of new Ritter sphere\r\n                var oldToNew = oldCenterToPoint - ritterRadius;\r\n                ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\r\n                ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\r\n                ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\r\n            }\r\n        }\r\n\r\n        if (ritterRadius < naiveRadius) {\r\n            Cartesian3.clone(ritterCenter, result.center);\r\n            result.radius = ritterRadius;\r\n        } else {\r\n            Cartesian3.clone(naiveCenter, result.center);\r\n            result.radius = naiveRadius;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    var defaultProjection = new GeographicProjection();\r\n    var fromRectangle2DLowerLeft = new Cartesian3();\r\n    var fromRectangle2DUpperRight = new Cartesian3();\r\n    var fromRectangle2DSouthwest = new Cartographic();\r\n    var fromRectangle2DNortheast = new Cartographic();\r\n\r\n    /**\r\n     * Computes a bounding sphere from a rectangle projected in 2D.\r\n     *\r\n     * @param {Rectangle} [rectangle] The rectangle around which to create a bounding sphere.\r\n     * @param {Object} [projection=GeographicProjection] The projection used to project the rectangle into 2D.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.fromRectangle2D = function(rectangle, projection, result) {\r\n        return BoundingSphere.fromRectangleWithHeights2D(rectangle, projection, 0.0, 0.0, result);\r\n    };\r\n\r\n    /**\r\n     * Computes a bounding sphere from a rectangle projected in 2D.  The bounding sphere accounts for the\r\n     * object's minimum and maximum heights over the rectangle.\r\n     *\r\n     * @param {Rectangle} [rectangle] The rectangle around which to create a bounding sphere.\r\n     * @param {Object} [projection=GeographicProjection] The projection used to project the rectangle into 2D.\r\n     * @param {Number} [minimumHeight=0.0] The minimum height over the rectangle.\r\n     * @param {Number} [maximumHeight=0.0] The maximum height over the rectangle.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.fromRectangleWithHeights2D = function(rectangle, projection, minimumHeight, maximumHeight, result) {\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        if (!defined(rectangle)) {\r\n            result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n            result.radius = 0.0;\r\n            return result;\r\n        }\r\n\r\n        projection = defaultValue(projection, defaultProjection);\r\n\r\n        Rectangle.southwest(rectangle, fromRectangle2DSouthwest);\r\n        fromRectangle2DSouthwest.height = minimumHeight;\r\n        Rectangle.northeast(rectangle, fromRectangle2DNortheast);\r\n        fromRectangle2DNortheast.height = maximumHeight;\r\n\r\n        var lowerLeft = projection.project(fromRectangle2DSouthwest, fromRectangle2DLowerLeft);\r\n        var upperRight = projection.project(fromRectangle2DNortheast, fromRectangle2DUpperRight);\r\n\r\n        var width = upperRight.x - lowerLeft.x;\r\n        var height = upperRight.y - lowerLeft.y;\r\n        var elevation = upperRight.z - lowerLeft.z;\r\n\r\n        result.radius = Math.sqrt(width * width + height * height + elevation * elevation) * 0.5;\r\n        var center = result.center;\r\n        center.x = lowerLeft.x + width * 0.5;\r\n        center.y = lowerLeft.y + height * 0.5;\r\n        center.z = lowerLeft.z + elevation * 0.5;\r\n        return result;\r\n    };\r\n\r\n    var fromRectangle3DScratch = [];\r\n\r\n    /**\r\n     * Computes a bounding sphere from a rectangle in 3D. The bounding sphere is created using a subsample of points\r\n     * on the ellipsoid and contained in the rectangle. It may not be accurate for all rectangles on all types of ellipsoids.\r\n     *\r\n     * @param {Rectangle} [rectangle] The valid rectangle used to create a bounding sphere.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid used to determine positions of the rectangle.\r\n     * @param {Number} [surfaceHeight=0.0] The height above the surface of the ellipsoid.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.fromRectangle3D = function(rectangle, ellipsoid, surfaceHeight, result) {\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        surfaceHeight = defaultValue(surfaceHeight, 0.0);\r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        if (!defined(rectangle)) {\r\n            result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n            result.radius = 0.0;\r\n            return result;\r\n        }\r\n\r\n        var positions = Rectangle.subsample(rectangle, ellipsoid, surfaceHeight, fromRectangle3DScratch);\r\n        return BoundingSphere.fromPoints(positions, result);\r\n    };\r\n\r\n    /**\r\n     * Computes a tight-fitting bounding sphere enclosing a list of 3D points, where the points are\r\n     * stored in a flat array in X, Y, Z, order.  The bounding sphere is computed by running two\r\n     * algorithms, a naive algorithm and Ritter's algorithm. The smaller of the two spheres is used to\r\n     * ensure a tight fit.\r\n     *\r\n     * @param {Number[]} [positions] An array of points that the bounding sphere will enclose.  Each point\r\n     *        is formed from three elements in the array in the order X, Y, Z.\r\n     * @param {Cartesian3} [center=Cartesian3.ZERO] The position to which the positions are relative, which need not be the\r\n     *        origin of the coordinate system.  This is useful when the positions are to be used for\r\n     *        relative-to-center (RTC) rendering.\r\n     * @param {Number} [stride=3] The number of array elements per vertex.  It must be at least 3, but it may\r\n     *        be higher.  Regardless of the value of this parameter, the X coordinate of the first position\r\n     *        is at array index 0, the Y coordinate is at array index 1, and the Z coordinate is at array index\r\n     *        2.  When stride is 3, the X coordinate of the next position then begins at array index 3.  If\r\n     *        the stride is 5, however, two array elements are skipped and the next position begins at array\r\n     *        index 5.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Compute the bounding sphere from 3 positions, each specified relative to a center.\r\n     * // In addition to the X, Y, and Z coordinates, the points array contains two additional\r\n     * // elements per point which are ignored for the purpose of computing the bounding sphere.\r\n     * var center = new Cesium.Cartesian3(1.0, 2.0, 3.0);\r\n     * var points = [1.0, 2.0, 3.0, 0.1, 0.2,\r\n     *               4.0, 5.0, 6.0, 0.1, 0.2,\r\n     *               7.0, 8.0, 9.0, 0.1, 0.2];\r\n     * var sphere = Cesium.BoundingSphere.fromVertices(points, center, 5);\r\n     *\r\n     * @see {@link http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding/|Bounding Sphere computation article}\r\n     */\r\n    BoundingSphere.fromVertices = function(positions, center, stride, result) {\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        if (!defined(positions) || positions.length === 0) {\r\n            result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n            result.radius = 0.0;\r\n            return result;\r\n        }\r\n\r\n        center = defaultValue(center, Cartesian3.ZERO);\r\n\r\n        stride = defaultValue(stride, 3);\r\n\r\n        \r\n\r\n        var currentPos = fromPointsCurrentPos;\r\n        currentPos.x = positions[0] + center.x;\r\n        currentPos.y = positions[1] + center.y;\r\n        currentPos.z = positions[2] + center.z;\r\n\r\n        var xMin = Cartesian3.clone(currentPos, fromPointsXMin);\r\n        var yMin = Cartesian3.clone(currentPos, fromPointsYMin);\r\n        var zMin = Cartesian3.clone(currentPos, fromPointsZMin);\r\n\r\n        var xMax = Cartesian3.clone(currentPos, fromPointsXMax);\r\n        var yMax = Cartesian3.clone(currentPos, fromPointsYMax);\r\n        var zMax = Cartesian3.clone(currentPos, fromPointsZMax);\r\n\r\n        var numElements = positions.length;\r\n        var i;\r\n        for (i = 0; i < numElements; i += stride) {\r\n            var x = positions[i] + center.x;\r\n            var y = positions[i + 1] + center.y;\r\n            var z = positions[i + 2] + center.z;\r\n\r\n            currentPos.x = x;\r\n            currentPos.y = y;\r\n            currentPos.z = z;\r\n\r\n            // Store points containing the the smallest and largest components\r\n            if (x < xMin.x) {\r\n                Cartesian3.clone(currentPos, xMin);\r\n            }\r\n\r\n            if (x > xMax.x) {\r\n                Cartesian3.clone(currentPos, xMax);\r\n            }\r\n\r\n            if (y < yMin.y) {\r\n                Cartesian3.clone(currentPos, yMin);\r\n            }\r\n\r\n            if (y > yMax.y) {\r\n                Cartesian3.clone(currentPos, yMax);\r\n            }\r\n\r\n            if (z < zMin.z) {\r\n                Cartesian3.clone(currentPos, zMin);\r\n            }\r\n\r\n            if (z > zMax.z) {\r\n                Cartesian3.clone(currentPos, zMax);\r\n            }\r\n        }\r\n\r\n        // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\r\n        var xSpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(xMax, xMin, fromPointsScratch));\r\n        var ySpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(yMax, yMin, fromPointsScratch));\r\n        var zSpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(zMax, zMin, fromPointsScratch));\r\n\r\n        // Set the diameter endpoints to the largest span.\r\n        var diameter1 = xMin;\r\n        var diameter2 = xMax;\r\n        var maxSpan = xSpan;\r\n        if (ySpan > maxSpan) {\r\n            maxSpan = ySpan;\r\n            diameter1 = yMin;\r\n            diameter2 = yMax;\r\n        }\r\n        if (zSpan > maxSpan) {\r\n            maxSpan = zSpan;\r\n            diameter1 = zMin;\r\n            diameter2 = zMax;\r\n        }\r\n\r\n        // Calculate the center of the initial sphere found by Ritter's algorithm\r\n        var ritterCenter = fromPointsRitterCenter;\r\n        ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\r\n        ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\r\n        ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\r\n\r\n        // Calculate the radius of the initial sphere found by Ritter's algorithm\r\n        var radiusSquared = Cartesian3.magnitudeSquared(Cartesian3.subtract(diameter2, ritterCenter, fromPointsScratch));\r\n        var ritterRadius = Math.sqrt(radiusSquared);\r\n\r\n        // Find the center of the sphere found using the Naive method.\r\n        var minBoxPt = fromPointsMinBoxPt;\r\n        minBoxPt.x = xMin.x;\r\n        minBoxPt.y = yMin.y;\r\n        minBoxPt.z = zMin.z;\r\n\r\n        var maxBoxPt = fromPointsMaxBoxPt;\r\n        maxBoxPt.x = xMax.x;\r\n        maxBoxPt.y = yMax.y;\r\n        maxBoxPt.z = zMax.z;\r\n\r\n        var naiveCenter = Cartesian3.midpoint(minBoxPt, maxBoxPt, fromPointsNaiveCenterScratch);\r\n\r\n        // Begin 2nd pass to find naive radius and modify the ritter sphere.\r\n        var naiveRadius = 0;\r\n        for (i = 0; i < numElements; i += stride) {\r\n            currentPos.x = positions[i] + center.x;\r\n            currentPos.y = positions[i + 1] + center.y;\r\n            currentPos.z = positions[i + 2] + center.z;\r\n\r\n            // Find the furthest point from the naive center to calculate the naive radius.\r\n            var r = Cartesian3.magnitude(Cartesian3.subtract(currentPos, naiveCenter, fromPointsScratch));\r\n            if (r > naiveRadius) {\r\n                naiveRadius = r;\r\n            }\r\n\r\n            // Make adjustments to the Ritter Sphere to include all points.\r\n            var oldCenterToPointSquared = Cartesian3.magnitudeSquared(Cartesian3.subtract(currentPos, ritterCenter, fromPointsScratch));\r\n            if (oldCenterToPointSquared > radiusSquared) {\r\n                var oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\r\n                // Calculate new radius to include the point that lies outside\r\n                ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\r\n                radiusSquared = ritterRadius * ritterRadius;\r\n                // Calculate center of new Ritter sphere\r\n                var oldToNew = oldCenterToPoint - ritterRadius;\r\n                ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\r\n                ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\r\n                ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\r\n            }\r\n        }\r\n\r\n        if (ritterRadius < naiveRadius) {\r\n            Cartesian3.clone(ritterCenter, result.center);\r\n            result.radius = ritterRadius;\r\n        } else {\r\n            Cartesian3.clone(naiveCenter, result.center);\r\n            result.radius = naiveRadius;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a tight-fitting bounding sphere enclosing a list of {@link EncodedCartesian3}s, where the points are\r\n     * stored in parallel flat arrays in X, Y, Z, order.  The bounding sphere is computed by running two\r\n     * algorithms, a naive algorithm and Ritter's algorithm. The smaller of the two spheres is used to\r\n     * ensure a tight fit.\r\n     *\r\n     * @param {Number[]} [positionsHigh] An array of high bits of the encoded cartesians that the bounding sphere will enclose.  Each point\r\n     *        is formed from three elements in the array in the order X, Y, Z.\r\n     * @param {Number[]} [positionsLow] An array of low bits of the encoded cartesians that the bounding sphere will enclose.  Each point\r\n     *        is formed from three elements in the array in the order X, Y, Z.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.\r\n     *\r\n     * @see {@link http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding/|Bounding Sphere computation article}\r\n     */\r\n    BoundingSphere.fromEncodedCartesianVertices = function(positionsHigh, positionsLow, result) {\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        if (!defined(positionsHigh) || !defined(positionsLow) || positionsHigh.length !== positionsLow.length || positionsHigh.length === 0) {\r\n            result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n            result.radius = 0.0;\r\n            return result;\r\n        }\r\n\r\n        var currentPos = fromPointsCurrentPos;\r\n        currentPos.x = positionsHigh[0] + positionsLow[0];\r\n        currentPos.y = positionsHigh[1] + positionsLow[1];\r\n        currentPos.z = positionsHigh[2] + positionsLow[2];\r\n\r\n        var xMin = Cartesian3.clone(currentPos, fromPointsXMin);\r\n        var yMin = Cartesian3.clone(currentPos, fromPointsYMin);\r\n        var zMin = Cartesian3.clone(currentPos, fromPointsZMin);\r\n\r\n        var xMax = Cartesian3.clone(currentPos, fromPointsXMax);\r\n        var yMax = Cartesian3.clone(currentPos, fromPointsYMax);\r\n        var zMax = Cartesian3.clone(currentPos, fromPointsZMax);\r\n\r\n        var numElements = positionsHigh.length;\r\n        var i;\r\n        for (i = 0; i < numElements; i += 3) {\r\n            var x = positionsHigh[i] + positionsLow[i];\r\n            var y = positionsHigh[i + 1] + positionsLow[i + 1];\r\n            var z = positionsHigh[i + 2] + positionsLow[i + 2];\r\n\r\n            currentPos.x = x;\r\n            currentPos.y = y;\r\n            currentPos.z = z;\r\n\r\n            // Store points containing the the smallest and largest components\r\n            if (x < xMin.x) {\r\n                Cartesian3.clone(currentPos, xMin);\r\n            }\r\n\r\n            if (x > xMax.x) {\r\n                Cartesian3.clone(currentPos, xMax);\r\n            }\r\n\r\n            if (y < yMin.y) {\r\n                Cartesian3.clone(currentPos, yMin);\r\n            }\r\n\r\n            if (y > yMax.y) {\r\n                Cartesian3.clone(currentPos, yMax);\r\n            }\r\n\r\n            if (z < zMin.z) {\r\n                Cartesian3.clone(currentPos, zMin);\r\n            }\r\n\r\n            if (z > zMax.z) {\r\n                Cartesian3.clone(currentPos, zMax);\r\n            }\r\n        }\r\n\r\n        // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\r\n        var xSpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(xMax, xMin, fromPointsScratch));\r\n        var ySpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(yMax, yMin, fromPointsScratch));\r\n        var zSpan = Cartesian3.magnitudeSquared(Cartesian3.subtract(zMax, zMin, fromPointsScratch));\r\n\r\n        // Set the diameter endpoints to the largest span.\r\n        var diameter1 = xMin;\r\n        var diameter2 = xMax;\r\n        var maxSpan = xSpan;\r\n        if (ySpan > maxSpan) {\r\n            maxSpan = ySpan;\r\n            diameter1 = yMin;\r\n            diameter2 = yMax;\r\n        }\r\n        if (zSpan > maxSpan) {\r\n            maxSpan = zSpan;\r\n            diameter1 = zMin;\r\n            diameter2 = zMax;\r\n        }\r\n\r\n        // Calculate the center of the initial sphere found by Ritter's algorithm\r\n        var ritterCenter = fromPointsRitterCenter;\r\n        ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\r\n        ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\r\n        ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\r\n\r\n        // Calculate the radius of the initial sphere found by Ritter's algorithm\r\n        var radiusSquared = Cartesian3.magnitudeSquared(Cartesian3.subtract(diameter2, ritterCenter, fromPointsScratch));\r\n        var ritterRadius = Math.sqrt(radiusSquared);\r\n\r\n        // Find the center of the sphere found using the Naive method.\r\n        var minBoxPt = fromPointsMinBoxPt;\r\n        minBoxPt.x = xMin.x;\r\n        minBoxPt.y = yMin.y;\r\n        minBoxPt.z = zMin.z;\r\n\r\n        var maxBoxPt = fromPointsMaxBoxPt;\r\n        maxBoxPt.x = xMax.x;\r\n        maxBoxPt.y = yMax.y;\r\n        maxBoxPt.z = zMax.z;\r\n\r\n        var naiveCenter = Cartesian3.midpoint(minBoxPt, maxBoxPt, fromPointsNaiveCenterScratch);\r\n\r\n        // Begin 2nd pass to find naive radius and modify the ritter sphere.\r\n        var naiveRadius = 0;\r\n        for (i = 0; i < numElements; i += 3) {\r\n            currentPos.x = positionsHigh[i] + positionsLow[i];\r\n            currentPos.y = positionsHigh[i + 1] + positionsLow[i + 1];\r\n            currentPos.z = positionsHigh[i + 2] + positionsLow[i + 2];\r\n\r\n            // Find the furthest point from the naive center to calculate the naive radius.\r\n            var r = Cartesian3.magnitude(Cartesian3.subtract(currentPos, naiveCenter, fromPointsScratch));\r\n            if (r > naiveRadius) {\r\n                naiveRadius = r;\r\n            }\r\n\r\n            // Make adjustments to the Ritter Sphere to include all points.\r\n            var oldCenterToPointSquared = Cartesian3.magnitudeSquared(Cartesian3.subtract(currentPos, ritterCenter, fromPointsScratch));\r\n            if (oldCenterToPointSquared > radiusSquared) {\r\n                var oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\r\n                // Calculate new radius to include the point that lies outside\r\n                ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\r\n                radiusSquared = ritterRadius * ritterRadius;\r\n                // Calculate center of new Ritter sphere\r\n                var oldToNew = oldCenterToPoint - ritterRadius;\r\n                ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\r\n                ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\r\n                ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\r\n            }\r\n        }\r\n\r\n        if (ritterRadius < naiveRadius) {\r\n            Cartesian3.clone(ritterCenter, result.center);\r\n            result.radius = ritterRadius;\r\n        } else {\r\n            Cartesian3.clone(naiveCenter, result.center);\r\n            result.radius = naiveRadius;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a bounding sphere from the corner points of an axis-aligned bounding box.  The sphere\r\n     * tighly and fully encompases the box.\r\n     *\r\n     * @param {Cartesian3} [corner] The minimum height over the rectangle.\r\n     * @param {Cartesian3} [oppositeCorner] The maximum height over the rectangle.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     *\r\n     * @example\r\n     * // Create a bounding sphere around the unit cube\r\n     * var sphere = Cesium.BoundingSphere.fromCornerPoints(new Cesium.Cartesian3(-0.5, -0.5, -0.5), new Cesium.Cartesian3(0.5, 0.5, 0.5));\r\n     */\r\n    BoundingSphere.fromCornerPoints = function(corner, oppositeCorner, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        var center = Cartesian3.midpoint(corner, oppositeCorner, result.center);\r\n        result.radius = Cartesian3.distance(center, oppositeCorner);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a bounding sphere encompassing an ellipsoid.\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid around which to create a bounding sphere.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     *\r\n     * @example\r\n     * var boundingSphere = Cesium.BoundingSphere.fromEllipsoid(ellipsoid);\r\n     */\r\n    BoundingSphere.fromEllipsoid = function(ellipsoid, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n        result.radius = ellipsoid.maximumRadius;\r\n        return result;\r\n    };\r\n\r\n    var fromBoundingSpheresScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Computes a tight-fitting bounding sphere enclosing the provided array of bounding spheres.\r\n     *\r\n     * @param {BoundingSphere[]} [boundingSpheres] The array of bounding spheres.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.fromBoundingSpheres = function(boundingSpheres, result) {\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        if (!defined(boundingSpheres) || boundingSpheres.length === 0) {\r\n            result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n            result.radius = 0.0;\r\n            return result;\r\n        }\r\n\r\n        var length = boundingSpheres.length;\r\n        if (length === 1) {\r\n            return BoundingSphere.clone(boundingSpheres[0], result);\r\n        }\r\n\r\n        if (length === 2) {\r\n            return BoundingSphere.union(boundingSpheres[0], boundingSpheres[1], result);\r\n        }\r\n\r\n        var positions = [];\r\n        var i;\r\n        for (i = 0; i < length; i++) {\r\n            positions.push(boundingSpheres[i].center);\r\n        }\r\n\r\n        result = BoundingSphere.fromPoints(positions, result);\r\n\r\n        var center = result.center;\r\n        var radius = result.radius;\r\n        for (i = 0; i < length; i++) {\r\n            var tmp = boundingSpheres[i];\r\n            radius = Math.max(radius, Cartesian3.distance(center, tmp.center, fromBoundingSpheresScratch) + tmp.radius);\r\n        }\r\n        result.radius = radius;\r\n\r\n        return result;\r\n    };\r\n\r\n    var fromOrientedBoundingBoxScratchU = new Cartesian3();\r\n    var fromOrientedBoundingBoxScratchV = new Cartesian3();\r\n    var fromOrientedBoundingBoxScratchW = new Cartesian3();\r\n\r\n    /**\r\n     * Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box.\r\n     *\r\n     * @param {OrientedBoundingBox} orientedBoundingBox The oriented bounding box.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.fromOrientedBoundingBox = function(orientedBoundingBox, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        var halfAxes = orientedBoundingBox.halfAxes;\r\n        var u = Matrix3.getColumn(halfAxes, 0, fromOrientedBoundingBoxScratchU);\r\n        var v = Matrix3.getColumn(halfAxes, 1, fromOrientedBoundingBoxScratchV);\r\n        var w = Matrix3.getColumn(halfAxes, 2, fromOrientedBoundingBoxScratchW);\r\n\r\n        Cartesian3.add(u, v, u);\r\n        Cartesian3.add(u, w, u);\r\n\r\n        result.center = Cartesian3.clone(orientedBoundingBox.center, result.center);\r\n        result.radius = Cartesian3.magnitude(u);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a BoundingSphere instance.\r\n     *\r\n     * @param {BoundingSphere} sphere The bounding sphere to duplicate.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided. (Returns undefined if sphere is undefined)\r\n     */\r\n    BoundingSphere.clone = function(sphere, result) {\r\n        if (!defined(sphere)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new BoundingSphere(sphere.center, sphere.radius);\r\n        }\r\n\r\n        result.center = Cartesian3.clone(sphere.center, result.center);\r\n        result.radius = sphere.radius;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    BoundingSphere.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {BoundingSphere} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    BoundingSphere.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var center = value.center;\r\n        array[startingIndex++] = center.x;\r\n        array[startingIndex++] = center.y;\r\n        array[startingIndex++] = center.z;\r\n        array[startingIndex] = value.radius;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {BoundingSphere} [result] The object into which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.\r\n     */\r\n    BoundingSphere.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        var center = result.center;\r\n        center.x = array[startingIndex++];\r\n        center.y = array[startingIndex++];\r\n        center.z = array[startingIndex++];\r\n        result.radius = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    var unionScratch = new Cartesian3();\r\n    var unionScratchCenter = new Cartesian3();\r\n    /**\r\n     * Computes a bounding sphere that contains both the left and right bounding spheres.\r\n     *\r\n     * @param {BoundingSphere} left A sphere to enclose in a bounding sphere.\r\n     * @param {BoundingSphere} right A sphere to enclose in a bounding sphere.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.union = function(left, right, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        var leftCenter = left.center;\r\n        var leftRadius = left.radius;\r\n        var rightCenter = right.center;\r\n        var rightRadius = right.radius;\r\n\r\n        var toRightCenter = Cartesian3.subtract(rightCenter, leftCenter, unionScratch);\r\n        var centerSeparation = Cartesian3.magnitude(toRightCenter);\r\n\r\n        if (leftRadius >= (centerSeparation + rightRadius)) {\r\n            // Left sphere wins.\r\n            left.clone(result);\r\n            return result;\r\n        }\r\n\r\n        if (rightRadius >= (centerSeparation + leftRadius)) {\r\n            // Right sphere wins.\r\n            right.clone(result);\r\n            return result;\r\n        }\r\n\r\n        // There are two tangent points, one on far side of each sphere.\r\n        var halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\r\n\r\n        // Compute the center point halfway between the two tangent points.\r\n        var center = Cartesian3.multiplyByScalar(toRightCenter,\r\n                (-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation, unionScratchCenter);\r\n        Cartesian3.add(center, leftCenter, center);\r\n        Cartesian3.clone(center, result.center);\r\n        result.radius = halfDistanceBetweenTangentPoints;\r\n\r\n        return result;\r\n    };\r\n\r\n    var expandScratch = new Cartesian3();\r\n    /**\r\n     * Computes a bounding sphere by enlarging the provided sphere to contain the provided point.\r\n     *\r\n     * @param {BoundingSphere} sphere A sphere to expand.\r\n     * @param {Cartesian3} point A point to enclose in a bounding sphere.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.expand = function(sphere, point, result) {\r\n        \r\n\r\n        result = BoundingSphere.clone(sphere, result);\r\n\r\n        var radius = Cartesian3.magnitude(Cartesian3.subtract(point, result.center, expandScratch));\r\n        if (radius > result.radius) {\r\n            result.radius = radius;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determines which side of a plane a sphere is located.\r\n     *\r\n     * @param {BoundingSphere} sphere The bounding sphere to test.\r\n     * @param {Plane} plane The plane to test against.\r\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire sphere is on the side of the plane\r\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire sphere is\r\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the sphere\r\n     *                      intersects the plane.\r\n     */\r\n    BoundingSphere.intersectPlane = function(sphere, plane) {\r\n        \r\n\r\n        var center = sphere.center;\r\n        var radius = sphere.radius;\r\n        var normal = plane.normal;\r\n        var distanceToPlane = Cartesian3.dot(normal, center) + plane.distance;\r\n\r\n        if (distanceToPlane < -radius) {\r\n            // The center point is negative side of the plane normal\r\n            return Intersect.OUTSIDE;\r\n        } else if (distanceToPlane < radius) {\r\n            // The center point is positive side of the plane, but radius extends beyond it; partial overlap\r\n            return Intersect.INTERSECTING;\r\n        }\r\n        return Intersect.INSIDE;\r\n    };\r\n\r\n    /**\r\n     * Applies a 4x4 affine transformation matrix to a bounding sphere.\r\n     *\r\n     * @param {BoundingSphere} sphere The bounding sphere to apply the transformation to.\r\n     * @param {Matrix4} transform The transformation matrix to apply to the bounding sphere.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.transform = function(sphere, transform, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        result.center = Matrix4.multiplyByPoint(transform, sphere.center, result.center);\r\n        result.radius = Matrix4.getMaximumScale(transform) * sphere.radius;\r\n\r\n        return result;\r\n    };\r\n\r\n    var distanceSquaredToScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the estimated distance squared from the closest point on a bounding sphere to a point.\r\n     *\r\n     * @param {BoundingSphere} sphere The sphere.\r\n     * @param {Cartesian3} cartesian The point\r\n     * @returns {Number} The estimated distance squared from the bounding sphere to the point.\r\n     *\r\n     * @example\r\n     * // Sort bounding spheres from back to front\r\n     * spheres.sort(function(a, b) {\r\n     *     return Cesium.BoundingSphere.distanceSquaredTo(b, camera.positionWC) - Cesium.BoundingSphere.distanceSquaredTo(a, camera.positionWC);\r\n     * });\r\n     */\r\n    BoundingSphere.distanceSquaredTo = function(sphere, cartesian) {\r\n        \r\n\r\n        var diff = Cartesian3.subtract(sphere.center, cartesian, distanceSquaredToScratch);\r\n        return Cartesian3.magnitudeSquared(diff) - sphere.radius * sphere.radius;\r\n    };\r\n\r\n    /**\r\n     * Applies a 4x4 affine transformation matrix to a bounding sphere where there is no scale\r\n     * The transformation matrix is not verified to have a uniform scale of 1.\r\n     * This method is faster than computing the general bounding sphere transform using {@link BoundingSphere.transform}.\r\n     *\r\n     * @param {BoundingSphere} sphere The bounding sphere to apply the transformation to.\r\n     * @param {Matrix4} transform The transformation matrix to apply to the bounding sphere.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     *\r\n     * @example\r\n     * var modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(positionOnEllipsoid);\r\n     * var boundingSphere = new Cesium.BoundingSphere();\r\n     * var newBoundingSphere = Cesium.BoundingSphere.transformWithoutScale(boundingSphere, modelMatrix);\r\n     */\r\n    BoundingSphere.transformWithoutScale = function(sphere, transform, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingSphere();\r\n        }\r\n\r\n        result.center = Matrix4.multiplyByPoint(transform, sphere.center, result.center);\r\n        result.radius = sphere.radius;\r\n\r\n        return result;\r\n    };\r\n\r\n    var scratchCartesian3 = new Cartesian3();\r\n    /**\r\n     * The distances calculated by the vector from the center of the bounding sphere to position projected onto direction\r\n     * plus/minus the radius of the bounding sphere.\r\n     * <br>\r\n     * If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the\r\n     * closest and farthest planes from position that intersect the bounding sphere.\r\n     *\r\n     * @param {BoundingSphere} sphere The bounding sphere to calculate the distance to.\r\n     * @param {Cartesian3} position The position to calculate the distance from.\r\n     * @param {Cartesian3} direction The direction from position.\r\n     * @param {Interval} [result] A Interval to store the nearest and farthest distances.\r\n     * @returns {Interval} The nearest and farthest distances on the bounding sphere from position in direction.\r\n     */\r\n    BoundingSphere.computePlaneDistances = function(sphere, position, direction, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Interval();\r\n        }\r\n\r\n        var toCenter = Cartesian3.subtract(sphere.center, position, scratchCartesian3);\r\n        var mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        result.start = mag - sphere.radius;\r\n        result.stop = mag + sphere.radius;\r\n        return result;\r\n    };\r\n\r\n    var projectTo2DNormalScratch = new Cartesian3();\r\n    var projectTo2DEastScratch = new Cartesian3();\r\n    var projectTo2DNorthScratch = new Cartesian3();\r\n    var projectTo2DWestScratch = new Cartesian3();\r\n    var projectTo2DSouthScratch = new Cartesian3();\r\n    var projectTo2DCartographicScratch = new Cartographic();\r\n    var projectTo2DPositionsScratch = new Array(8);\r\n    for (var n = 0; n < 8; ++n) {\r\n        projectTo2DPositionsScratch[n] = new Cartesian3();\r\n    }\r\n\r\n    var projectTo2DProjection = new GeographicProjection();\r\n    /**\r\n     * Creates a bounding sphere in 2D from a bounding sphere in 3D world coordinates.\r\n     *\r\n     * @param {BoundingSphere} sphere The bounding sphere to transform to 2D.\r\n     * @param {Object} [projection=GeographicProjection] The projection to 2D.\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.projectTo2D = function(sphere, projection, result) {\r\n        \r\n\r\n        projection = defaultValue(projection, projectTo2DProjection);\r\n\r\n        var ellipsoid = projection.ellipsoid;\r\n        var center = sphere.center;\r\n        var radius = sphere.radius;\r\n\r\n        var normal = ellipsoid.geodeticSurfaceNormal(center, projectTo2DNormalScratch);\r\n        var east = Cartesian3.cross(Cartesian3.UNIT_Z, normal, projectTo2DEastScratch);\r\n        Cartesian3.normalize(east, east);\r\n        var north = Cartesian3.cross(normal, east, projectTo2DNorthScratch);\r\n        Cartesian3.normalize(north, north);\r\n\r\n        Cartesian3.multiplyByScalar(normal, radius, normal);\r\n        Cartesian3.multiplyByScalar(north, radius, north);\r\n        Cartesian3.multiplyByScalar(east, radius, east);\r\n\r\n        var south = Cartesian3.negate(north, projectTo2DSouthScratch);\r\n        var west = Cartesian3.negate(east, projectTo2DWestScratch);\r\n\r\n        var positions = projectTo2DPositionsScratch;\r\n\r\n        // top NE corner\r\n        var corner = positions[0];\r\n        Cartesian3.add(normal, north, corner);\r\n        Cartesian3.add(corner, east, corner);\r\n\r\n        // top NW corner\r\n        corner = positions[1];\r\n        Cartesian3.add(normal, north, corner);\r\n        Cartesian3.add(corner, west, corner);\r\n\r\n        // top SW corner\r\n        corner = positions[2];\r\n        Cartesian3.add(normal, south, corner);\r\n        Cartesian3.add(corner, west, corner);\r\n\r\n        // top SE corner\r\n        corner = positions[3];\r\n        Cartesian3.add(normal, south, corner);\r\n        Cartesian3.add(corner, east, corner);\r\n\r\n        Cartesian3.negate(normal, normal);\r\n\r\n        // bottom NE corner\r\n        corner = positions[4];\r\n        Cartesian3.add(normal, north, corner);\r\n        Cartesian3.add(corner, east, corner);\r\n\r\n        // bottom NW corner\r\n        corner = positions[5];\r\n        Cartesian3.add(normal, north, corner);\r\n        Cartesian3.add(corner, west, corner);\r\n\r\n        // bottom SW corner\r\n        corner = positions[6];\r\n        Cartesian3.add(normal, south, corner);\r\n        Cartesian3.add(corner, west, corner);\r\n\r\n        // bottom SE corner\r\n        corner = positions[7];\r\n        Cartesian3.add(normal, south, corner);\r\n        Cartesian3.add(corner, east, corner);\r\n\r\n        var length = positions.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            var position = positions[i];\r\n            Cartesian3.add(center, position, position);\r\n            var cartographic = ellipsoid.cartesianToCartographic(position, projectTo2DCartographicScratch);\r\n            projection.project(cartographic, position);\r\n        }\r\n\r\n        result = BoundingSphere.fromPoints(positions, result);\r\n\r\n        // swizzle center components\r\n        center = result.center;\r\n        var x = center.x;\r\n        var y = center.y;\r\n        var z = center.z;\r\n        center.x = z;\r\n        center.y = x;\r\n        center.z = y;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determines whether or not a sphere is hidden from view by the occluder.\r\n     *\r\n     * @param {BoundingSphere} sphere The bounding sphere surrounding the occludee object.\r\n     * @param {Occluder} occluder The occluder.\r\n     * @returns {Boolean} <code>true</code> if the sphere is not visible; otherwise <code>false</code>.\r\n     */\r\n    BoundingSphere.isOccluded = function(sphere, occluder) {\r\n        \r\n        return !occluder.isBoundingSphereVisible(sphere);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided BoundingSphere componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {BoundingSphere} [left] The first BoundingSphere.\r\n     * @param {BoundingSphere} [right] The second BoundingSphere.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    BoundingSphere.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                Cartesian3.equals(left.center, right.center) &&\r\n                left.radius === right.radius);\r\n    };\r\n\r\n    /**\r\n     * Determines which side of a plane the sphere is located.\r\n     *\r\n     * @param {Plane} plane The plane to test against.\r\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire sphere is on the side of the plane\r\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire sphere is\r\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the sphere\r\n     *                      intersects the plane.\r\n     */\r\n    BoundingSphere.prototype.intersectPlane = function(plane) {\r\n        return BoundingSphere.intersectPlane(this, plane);\r\n    };\r\n\r\n    /**\r\n     * Computes the estimated distance squared from the closest point on a bounding sphere to a point.\r\n     *\r\n     * @param {Cartesian3} cartesian The point\r\n     * @returns {Number} The estimated distance squared from the bounding sphere to the point.\r\n     *\r\n     * @example\r\n     * // Sort bounding spheres from back to front\r\n     * spheres.sort(function(a, b) {\r\n     *     return b.distanceSquaredTo(camera.positionWC) - a.distanceSquaredTo(camera.positionWC);\r\n     * });\r\n     */\r\n    BoundingSphere.prototype.distanceSquaredTo = function(cartesian) {\r\n        return BoundingSphere.distanceSquaredTo(this, cartesian);\r\n    };\r\n\r\n    /**\r\n     * The distances calculated by the vector from the center of the bounding sphere to position projected onto direction\r\n     * plus/minus the radius of the bounding sphere.\r\n     * <br>\r\n     * If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the\r\n     * closest and farthest planes from position that intersect the bounding sphere.\r\n     *\r\n     * @param {Cartesian3} position The position to calculate the distance from.\r\n     * @param {Cartesian3} direction The direction from position.\r\n     * @param {Interval} [result] A Interval to store the nearest and farthest distances.\r\n     * @returns {Interval} The nearest and farthest distances on the bounding sphere from position in direction.\r\n     */\r\n    BoundingSphere.prototype.computePlaneDistances = function(position, direction, result) {\r\n        return BoundingSphere.computePlaneDistances(this, position, direction, result);\r\n    };\r\n\r\n    /**\r\n     * Determines whether or not a sphere is hidden from view by the occluder.\r\n     *\r\n     * @param {Occluder} occluder The occluder.\r\n     * @returns {Boolean} <code>true</code> if the sphere is not visible; otherwise <code>false</code>.\r\n     */\r\n    BoundingSphere.prototype.isOccluded = function(occluder) {\r\n        return BoundingSphere.isOccluded(this, occluder);\r\n    };\r\n\r\n    /**\r\n     * Compares this BoundingSphere against the provided BoundingSphere componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {BoundingSphere} [right] The right hand side BoundingSphere.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    BoundingSphere.prototype.equals = function(right) {\r\n        return BoundingSphere.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Duplicates this BoundingSphere instance.\r\n     *\r\n     * @param {BoundingSphere} [result] The object onto which to store the result.\r\n     * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\r\n     */\r\n    BoundingSphere.prototype.clone = function(result) {\r\n        return BoundingSphere.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the radius of the BoundingSphere.\r\n     * @returns {Number} The radius of the BoundingSphere.\r\n     */\r\n    BoundingSphere.prototype.volume = function() {\r\n        var radius = this.radius;\r\n        return volumeConstant * radius * radius * radius;\r\n    };\r\n\r\n    return BoundingSphere;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/BoundingSphere.js\n// module id = 7\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './FeatureDetection',\r\n        './freezeObject',\r\n        './WebGLConstants'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        FeatureDetection,\r\n        freezeObject,\r\n        WebGLConstants) {\r\n    'use strict';\r\n\r\n    // Bail out if the browser doesn't support typed arrays, to prevent the setup function\r\n    // from failing, since we won't be able to create a WebGL context anyway.\r\n    if (!FeatureDetection.supportsTypedArrays()) {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * WebGL component datatypes.  Components are intrinsics,\r\n     * which form attributes, which form vertices.\r\n     *\r\n     * @exports ComponentDatatype\r\n     */\r\n    var ComponentDatatype = {\r\n        /**\r\n         * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type\r\n         * of an element in <code>Int8Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        BYTE : WebGLConstants.BYTE,\r\n\r\n        /**\r\n         * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\r\n         * of an element in <code>Uint8Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_BYTE : WebGLConstants.UNSIGNED_BYTE,\r\n\r\n        /**\r\n         * 16-bit signed short corresponding to <code>SHORT</code> and the type\r\n         * of an element in <code>Int16Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        SHORT : WebGLConstants.SHORT,\r\n\r\n        /**\r\n         * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\r\n         * of an element in <code>Uint16Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_SHORT : WebGLConstants.UNSIGNED_SHORT,\r\n\r\n        /**\r\n         * 32-bit signed int corresponding to <code>INT</code> and the type\r\n         * of an element in <code>Int32Array</code>.\r\n         *\r\n         * @memberOf ComponentDatatype\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        INT : WebGLConstants.INT,\r\n\r\n        /**\r\n         * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\r\n         * of an element in <code>Uint32Array</code>.\r\n         *\r\n         * @memberOf ComponentDatatype\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_INT : WebGLConstants.UNSIGNED_INT,\r\n\r\n        /**\r\n         * 32-bit floating-point corresponding to <code>FLOAT</code> and the type\r\n         * of an element in <code>Float32Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        FLOAT : WebGLConstants.FLOAT,\r\n\r\n        /**\r\n         * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;\r\n         * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})\r\n         * and the type of an element in <code>Float64Array</code>.\r\n         *\r\n         * @memberOf ComponentDatatype\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         * @default 0x140A\r\n         */\r\n        DOUBLE : WebGLConstants.DOUBLE\r\n    };\r\n\r\n    /**\r\n     * Returns the size, in bytes, of the corresponding datatype.\r\n     *\r\n     * @param {ComponentDatatype} componentDatatype The component datatype to get the size of.\r\n     * @returns {Number} The size in bytes.\r\n     *\r\n     * @exception {DeveloperError} componentDatatype is not a valid value.\r\n     *\r\n     * @example\r\n     * // Returns Int8Array.BYTES_PER_ELEMENT\r\n     * var size = Cesium.ComponentDatatype.getSizeInBytes(Cesium.ComponentDatatype.BYTE);\r\n     */\r\n    ComponentDatatype.getSizeInBytes = function(componentDatatype){\r\n        \r\n\r\n        switch (componentDatatype) {\r\n        case ComponentDatatype.BYTE:\r\n            return Int8Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.UNSIGNED_BYTE:\r\n            return Uint8Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.SHORT:\r\n            return Int16Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.UNSIGNED_SHORT:\r\n            return Uint16Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.INT:\r\n            return Int32Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.UNSIGNED_INT:\r\n            return Uint32Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.FLOAT:\r\n            return Float32Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.DOUBLE:\r\n            return Float64Array.BYTES_PER_ELEMENT;\r\n        \r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the {@link ComponentDatatype} for the provided TypedArray instance.\r\n     *\r\n     * @param {TypedArray} array The typed array.\r\n     * @returns {ComponentDatatype} The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray.\r\n     */\r\n    ComponentDatatype.fromTypedArray = function(array) {\r\n        if (array instanceof Int8Array) {\r\n            return ComponentDatatype.BYTE;\r\n        }\r\n        if (array instanceof Uint8Array) {\r\n            return ComponentDatatype.UNSIGNED_BYTE;\r\n        }\r\n        if (array instanceof Int16Array) {\r\n            return ComponentDatatype.SHORT;\r\n        }\r\n        if (array instanceof Uint16Array) {\r\n            return ComponentDatatype.UNSIGNED_SHORT;\r\n        }\r\n        if (array instanceof Int32Array) {\r\n            return ComponentDatatype.INT;\r\n        }\r\n        if (array instanceof Uint32Array) {\r\n            return ComponentDatatype.UNSIGNED_INT;\r\n        }\r\n        if (array instanceof Float32Array) {\r\n            return ComponentDatatype.FLOAT;\r\n        }\r\n        if (array instanceof Float64Array) {\r\n            return ComponentDatatype.DOUBLE;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Validates that the provided component datatype is a valid {@link ComponentDatatype}\r\n     *\r\n     * @param {ComponentDatatype} componentDatatype The component datatype to validate.\r\n     * @returns {Boolean} <code>true</code> if the provided component datatype is a valid value; otherwise, <code>false</code>.\r\n     *\r\n     * @example\r\n     * if (!Cesium.ComponentDatatype.validate(componentDatatype)) {\r\n     *   throw new Cesium.DeveloperError('componentDatatype must be a valid value.');\r\n     * }\r\n     */\r\n    ComponentDatatype.validate = function(componentDatatype) {\r\n        return defined(componentDatatype) &&\r\n               (componentDatatype === ComponentDatatype.BYTE ||\r\n                componentDatatype === ComponentDatatype.UNSIGNED_BYTE ||\r\n                componentDatatype === ComponentDatatype.SHORT ||\r\n                componentDatatype === ComponentDatatype.UNSIGNED_SHORT ||\r\n                componentDatatype === ComponentDatatype.INT ||\r\n                componentDatatype === ComponentDatatype.UNSIGNED_INT ||\r\n                componentDatatype === ComponentDatatype.FLOAT ||\r\n                componentDatatype === ComponentDatatype.DOUBLE);\r\n    };\r\n\r\n    /**\r\n     * Creates a typed array corresponding to component data type.\r\n     *\r\n     * @param {ComponentDatatype} componentDatatype The component data type.\r\n     * @param {Number|Array} valuesOrLength The length of the array to create or an array.\r\n     * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array.\r\n     *\r\n     * @exception {DeveloperError} componentDatatype is not a valid value.\r\n     *\r\n     * @example\r\n     * // creates a Float32Array with length of 100\r\n     * var typedArray = Cesium.ComponentDatatype.createTypedArray(Cesium.ComponentDatatype.FLOAT, 100);\r\n     */\r\n    ComponentDatatype.createTypedArray = function(componentDatatype, valuesOrLength) {\r\n        \r\n\r\n        switch (componentDatatype) {\r\n        case ComponentDatatype.BYTE:\r\n            return new Int8Array(valuesOrLength);\r\n        case ComponentDatatype.UNSIGNED_BYTE:\r\n            return new Uint8Array(valuesOrLength);\r\n        case ComponentDatatype.SHORT:\r\n            return new Int16Array(valuesOrLength);\r\n        case ComponentDatatype.UNSIGNED_SHORT:\r\n            return new Uint16Array(valuesOrLength);\r\n        case ComponentDatatype.INT:\r\n            return new Int32Array(valuesOrLength);\r\n        case ComponentDatatype.UNSIGNED_INT:\r\n            return new Uint32Array(valuesOrLength);\r\n        case ComponentDatatype.FLOAT:\r\n            return new Float32Array(valuesOrLength);\r\n        case ComponentDatatype.DOUBLE:\r\n            return new Float64Array(valuesOrLength);\r\n        \r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates a typed view of an array of bytes.\r\n     *\r\n     * @param {ComponentDatatype} componentDatatype The type of the view to create.\r\n     * @param {ArrayBuffer} buffer The buffer storage to use for the view.\r\n     * @param {Number} [byteOffset] The offset, in bytes, to the first element in the view.\r\n     * @param {Number} [length] The number of elements in the view.\r\n     * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array view of the buffer.\r\n     *\r\n     * @exception {DeveloperError} componentDatatype is not a valid value.\r\n     */\r\n    ComponentDatatype.createArrayBufferView = function(componentDatatype, buffer, byteOffset, length) {\r\n        \r\n\r\n        byteOffset = defaultValue(byteOffset, 0);\r\n        length = defaultValue(length, (buffer.byteLength - byteOffset) / ComponentDatatype.getSizeInBytes(componentDatatype));\r\n\r\n        switch (componentDatatype) {\r\n        case ComponentDatatype.BYTE:\r\n            return new Int8Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.UNSIGNED_BYTE:\r\n            return new Uint8Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.SHORT:\r\n            return new Int16Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.UNSIGNED_SHORT:\r\n            return new Uint16Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.INT:\r\n            return new Int32Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.UNSIGNED_INT:\r\n            return new Uint32Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.FLOAT:\r\n            return new Float32Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.DOUBLE:\r\n            return new Float64Array(buffer, byteOffset, length);\r\n        \r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the ComponentDatatype from its name.\r\n     *\r\n     * @param {String} name The name of the ComponentDatatype.\r\n     * @returns {ComponentDatatype} The ComponentDatatype.\r\n     *\r\n     * @exception {DeveloperError} name is not a valid value.\r\n     */\r\n    ComponentDatatype.fromName = function(name) {\r\n        switch (name) {\r\n            case 'BYTE':\r\n                return ComponentDatatype.BYTE;\r\n            case 'UNSIGNED_BYTE':\r\n                return ComponentDatatype.UNSIGNED_BYTE;\r\n            case 'SHORT':\r\n                return ComponentDatatype.SHORT;\r\n            case 'UNSIGNED_SHORT':\r\n                return ComponentDatatype.UNSIGNED_SHORT;\r\n            case 'INT':\r\n                return ComponentDatatype.INT;\r\n            case 'UNSIGNED_INT':\r\n                return ComponentDatatype.UNSIGNED_INT;\r\n            case 'FLOAT':\r\n                return ComponentDatatype.FLOAT;\r\n            case 'DOUBLE':\r\n                return ComponentDatatype.DOUBLE;\r\n            \r\n        }\r\n    };\r\n\r\n    return freezeObject(ComponentDatatype);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/ComponentDatatype.js\n// module id = 8\n// module chunks = 0","define([\r\n        './defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Freezes an object, using Object.freeze if available, otherwise returns\r\n     * the object unchanged.  This function should be used in setup code to prevent\r\n     * errors from completely halting JavaScript execution in legacy browsers.\r\n     *\r\n     * @private\r\n     *\r\n     * @exports freezeObject\r\n     */\r\n    var freezeObject = Object.freeze;\r\n    if (!defined(freezeObject)) {\r\n        freezeObject = function(o) {\r\n            return o;\r\n        };\r\n    }\r\n\r\n    return freezeObject;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/freezeObject.js\n// module id = 9\n// module chunks = 0","define([\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './GeometryOffsetAttribute',\r\n        './GeometryType',\r\n        './Matrix2',\r\n        './Matrix3',\r\n        './Matrix4',\r\n        './PrimitiveType',\r\n        './Quaternion',\r\n        './Rectangle',\r\n        './Transforms'\r\n    ], function(\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        GeometryOffsetAttribute,\r\n        GeometryType,\r\n        Matrix2,\r\n        Matrix3,\r\n        Matrix4,\r\n        PrimitiveType,\r\n        Quaternion,\r\n        Rectangle,\r\n        Transforms) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A geometry representation with attributes forming vertices and optional index data\r\n     * defining primitives.  Geometries and an {@link Appearance}, which describes the shading,\r\n     * can be assigned to a {@link Primitive} for visualization.  A <code>Primitive</code> can\r\n     * be created from many heterogeneous - in many cases - geometries for performance.\r\n     * <p>\r\n     * Geometries can be transformed and optimized using functions in {@link GeometryPipeline}.\r\n     * </p>\r\n     *\r\n     * @alias Geometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {GeometryAttributes} options.attributes Attributes, which make up the geometry's vertices.\r\n     * @param {PrimitiveType} [options.primitiveType=PrimitiveType.TRIANGLES] The type of primitives in the geometry.\r\n     * @param {Uint16Array|Uint32Array} [options.indices] Optional index data that determines the primitives in the geometry.\r\n     * @param {BoundingSphere} [options.boundingSphere] An optional bounding sphere that fully enclosed the geometry.\r\n     *\r\n     * @see PolygonGeometry\r\n     * @see RectangleGeometry\r\n     * @see EllipseGeometry\r\n     * @see CircleGeometry\r\n     * @see WallGeometry\r\n     * @see SimplePolylineGeometry\r\n     * @see BoxGeometry\r\n     * @see EllipsoidGeometry\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Geometry%20and%20Appearances.html|Geometry and Appearances Demo}\r\n     *\r\n     * @example\r\n     * // Create geometry with a position attribute and indexed lines.\r\n     * var positions = new Float64Array([\r\n     *   0.0, 0.0, 0.0,\r\n     *   7500000.0, 0.0, 0.0,\r\n     *   0.0, 7500000.0, 0.0\r\n     * ]);\r\n     *\r\n     * var geometry = new Cesium.Geometry({\r\n     *   attributes : {\r\n     *     position : new Cesium.GeometryAttribute({\r\n     *       componentDatatype : Cesium.ComponentDatatype.DOUBLE,\r\n     *       componentsPerAttribute : 3,\r\n     *       values : positions\r\n     *     })\r\n     *   },\r\n     *   indices : new Uint16Array([0, 1, 1, 2, 2, 0]),\r\n     *   primitiveType : Cesium.PrimitiveType.LINES,\r\n     *   boundingSphere : Cesium.BoundingSphere.fromVertices(positions)\r\n     * });\r\n     */\r\n    function Geometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        \r\n\r\n        /**\r\n         * Attributes, which make up the geometry's vertices.  Each property in this object corresponds to a\r\n         * {@link GeometryAttribute} containing the attribute's data.\r\n         * <p>\r\n         * Attributes are always stored non-interleaved in a Geometry.\r\n         * </p>\r\n         * <p>\r\n         * There are reserved attribute names with well-known semantics.  The following attributes\r\n         * are created by a Geometry (depending on the provided {@link VertexFormat}.\r\n         * <ul>\r\n         *    <li><code>position</code> - 3D vertex position.  64-bit floating-point (for precision).  3 components per attribute.  See {@link VertexFormat#position}.</li>\r\n         *    <li><code>normal</code> - Normal (normalized), commonly used for lighting.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#normal}.</li>\r\n         *    <li><code>st</code> - 2D texture coordinate.  32-bit floating-point.  2 components per attribute.  See {@link VertexFormat#st}.</li>\r\n         *    <li><code>bitangent</code> - Bitangent (normalized), used for tangent-space effects like bump mapping.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#bitangent}.</li>\r\n         *    <li><code>tangent</code> - Tangent (normalized), used for tangent-space effects like bump mapping.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#tangent}.</li>\r\n         * </ul>\r\n         * </p>\r\n         * <p>\r\n         * The following attribute names are generally not created by a Geometry, but are added\r\n         * to a Geometry by a {@link Primitive} or {@link GeometryPipeline} functions to prepare\r\n         * the geometry for rendering.\r\n         * <ul>\r\n         *    <li><code>position3DHigh</code> - High 32 bits for encoded 64-bit position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\r\n         *    <li><code>position3DLow</code> - Low 32 bits for encoded 64-bit position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\r\n         *    <li><code>position3DHigh</code> - High 32 bits for encoded 64-bit 2D (Columbus view) position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\r\n         *    <li><code>position2DLow</code> - Low 32 bits for encoded 64-bit 2D (Columbus view) position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\r\n         *    <li><code>color</code> - RGBA color (normalized) usually from {@link GeometryInstance#color}.  32-bit floating-point.  4 components per attribute.</li>\r\n         *    <li><code>pickColor</code> - RGBA color used for picking.  32-bit floating-point.  4 components per attribute.</li>\r\n         * </ul>\r\n         * </p>\r\n         *\r\n         * @type GeometryAttributes\r\n         *\r\n         * @default undefined\r\n         *\r\n         *\r\n         * @example\r\n         * geometry.attributes.position = new Cesium.GeometryAttribute({\r\n         *   componentDatatype : Cesium.ComponentDatatype.FLOAT,\r\n         *   componentsPerAttribute : 3,\r\n         *   values : new Float32Array(0)\r\n         * });\r\n         *\r\n         * @see GeometryAttribute\r\n         * @see VertexFormat\r\n         */\r\n        this.attributes = options.attributes;\r\n\r\n        /**\r\n         * Optional index data that - along with {@link Geometry#primitiveType} -\r\n         * determines the primitives in the geometry.\r\n         *\r\n         * @type Array\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.indices = options.indices;\r\n\r\n        /**\r\n         * The type of primitives in the geometry.  This is most often {@link PrimitiveType.TRIANGLES},\r\n         * but can varying based on the specific geometry.\r\n         *\r\n         * @type PrimitiveType\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.primitiveType = defaultValue(options.primitiveType, PrimitiveType.TRIANGLES);\r\n\r\n        /**\r\n         * An optional bounding sphere that fully encloses the geometry.  This is\r\n         * commonly used for culling.\r\n         *\r\n         * @type BoundingSphere\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.boundingSphere = options.boundingSphere;\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        this.geometryType = defaultValue(options.geometryType, GeometryType.NONE);\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        this.boundingSphereCV = options.boundingSphereCV;\r\n\r\n        /**\r\n         * @private\r\n         * Used for computing the bounding sphere for geometry using the applyOffset vertex attribute\r\n         */\r\n        this.offsetAttribute = options.offsetAttribute;\r\n    }\r\n\r\n    /**\r\n     * Computes the number of vertices in a geometry.  The runtime is linear with\r\n     * respect to the number of attributes in a vertex, not the number of vertices.\r\n     *\r\n     * @param {Geometry} geometry The geometry.\r\n     * @returns {Number} The number of vertices in the geometry.\r\n     *\r\n     * @example\r\n     * var numVertices = Cesium.Geometry.computeNumberOfVertices(geometry);\r\n     */\r\n    Geometry.computeNumberOfVertices = function(geometry) {\r\n        \r\n\r\n        var numberOfVertices = -1;\r\n        for ( var property in geometry.attributes) {\r\n            if (geometry.attributes.hasOwnProperty(property) &&\r\n                    defined(geometry.attributes[property]) &&\r\n                    defined(geometry.attributes[property].values)) {\r\n\r\n                var attribute = geometry.attributes[property];\r\n                var num = attribute.values.length / attribute.componentsPerAttribute;\r\n                \r\n                numberOfVertices = num;\r\n            }\r\n        }\r\n\r\n        return numberOfVertices;\r\n    };\r\n\r\n    var rectangleCenterScratch = new Cartographic();\r\n    var enuCenterScratch = new Cartesian3();\r\n    var fixedFrameToEnuScratch = new Matrix4();\r\n    var boundingRectanglePointsCartographicScratch = [new Cartographic(), new Cartographic(), new Cartographic()];\r\n    var boundingRectanglePointsEnuScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\r\n    var points2DScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\r\n    var pointEnuScratch = new Cartesian3();\r\n    var enuRotationScratch = new Quaternion();\r\n    var enuRotationMatrixScratch = new Matrix4();\r\n    var rotation2DScratch = new Matrix2();\r\n\r\n    /**\r\n     * For remapping texture coordinates when rendering GroundPrimitives with materials.\r\n     * GroundPrimitive texture coordinates are computed to align with the cartographic coordinate system on the globe.\r\n     * However, EllipseGeometry, RectangleGeometry, and PolygonGeometry all bake rotations to per-vertex texture coordinates\r\n     * using different strategies.\r\n     *\r\n     * This method is used by EllipseGeometry and PolygonGeometry to approximate the same visual effect.\r\n     * We encapsulate rotation and scale by computing a \"transformed\" texture coordinate system and computing\r\n     * a set of reference points from which \"cartographic\" texture coordinates can be remapped to the \"transformed\"\r\n     * system using distances to lines in 2D.\r\n     *\r\n     * This approximation becomes less accurate as the covered area increases, especially for GroundPrimitives near the poles,\r\n     * but is generally reasonable for polygons and ellipses around the size of USA states.\r\n     *\r\n     * RectangleGeometry has its own version of this method that computes remapping coordinates using cartographic space\r\n     * as an intermediary instead of local ENU, which is more accurate for large-area rectangles.\r\n     *\r\n     * @param {Cartesian3[]} positions Array of positions outlining the geometry\r\n     * @param {Number} stRotation Texture coordinate rotation.\r\n     * @param {Ellipsoid} ellipsoid Ellipsoid for projecting and generating local vectors.\r\n     * @param {Rectangle} boundingRectangle Bounding rectangle around the positions.\r\n     * @returns {Number[]} An array of 6 numbers specifying [minimum point, u extent, v extent] as points in the \"cartographic\" system.\r\n     * @private\r\n     */\r\n    Geometry._textureCoordinateRotationPoints = function(positions, stRotation, ellipsoid, boundingRectangle) {\r\n        var i;\r\n\r\n        // Create a local east-north-up coordinate system centered on the polygon's bounding rectangle.\r\n        // Project the southwest, northwest, and southeast corners of the bounding rectangle into the plane of ENU as 2D points.\r\n        // These are the equivalents of (0,0), (0,1), and (1,0) in the texture coordiante system computed in ShadowVolumeAppearanceFS,\r\n        // aka \"ENU texture space.\"\r\n        var rectangleCenter = Rectangle.center(boundingRectangle, rectangleCenterScratch);\r\n        var enuCenter = Cartographic.toCartesian(rectangleCenter, ellipsoid, enuCenterScratch);\r\n        var enuToFixedFrame = Transforms.eastNorthUpToFixedFrame(enuCenter, ellipsoid, fixedFrameToEnuScratch);\r\n        var fixedFrameToEnu = Matrix4.inverse(enuToFixedFrame, fixedFrameToEnuScratch);\r\n\r\n        var boundingPointsEnu = boundingRectanglePointsEnuScratch;\r\n        var boundingPointsCarto = boundingRectanglePointsCartographicScratch;\r\n\r\n        boundingPointsCarto[0].longitude = boundingRectangle.west;\r\n        boundingPointsCarto[0].latitude = boundingRectangle.south;\r\n\r\n        boundingPointsCarto[1].longitude = boundingRectangle.west;\r\n        boundingPointsCarto[1].latitude = boundingRectangle.north;\r\n\r\n        boundingPointsCarto[2].longitude = boundingRectangle.east;\r\n        boundingPointsCarto[2].latitude = boundingRectangle.south;\r\n\r\n        var posEnu = pointEnuScratch;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n            Cartographic.toCartesian(boundingPointsCarto[i], ellipsoid, posEnu);\r\n            posEnu = Matrix4.multiplyByPointAsVector(fixedFrameToEnu, posEnu, posEnu);\r\n            boundingPointsEnu[i].x = posEnu.x;\r\n            boundingPointsEnu[i].y = posEnu.y;\r\n        }\r\n\r\n        // Rotate each point in the polygon around the up vector in the ENU by -stRotation and project into ENU as 2D.\r\n        // Compute the bounding box of these rotated points in the 2D ENU plane.\r\n        // Rotate the corners back by stRotation, then compute their equivalents in the ENU texture space using the corners computed earlier.\r\n        var rotation = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, -stRotation, enuRotationScratch);\r\n        var textureMatrix = Matrix3.fromQuaternion(rotation, enuRotationMatrixScratch);\r\n\r\n        var positionsLength = positions.length;\r\n        var enuMinX = Number.POSITIVE_INFINITY;\r\n        var enuMinY = Number.POSITIVE_INFINITY;\r\n        var enuMaxX = Number.NEGATIVE_INFINITY;\r\n        var enuMaxY = Number.NEGATIVE_INFINITY;\r\n        for (i = 0; i < positionsLength; i++) {\r\n            posEnu = Matrix4.multiplyByPointAsVector(fixedFrameToEnu, positions[i], posEnu);\r\n            posEnu = Matrix3.multiplyByVector(textureMatrix, posEnu, posEnu);\r\n\r\n            enuMinX = Math.min(enuMinX, posEnu.x);\r\n            enuMinY = Math.min(enuMinY, posEnu.y);\r\n            enuMaxX = Math.max(enuMaxX, posEnu.x);\r\n            enuMaxY = Math.max(enuMaxY, posEnu.y);\r\n        }\r\n\r\n        var toDesiredInComputed = Matrix2.fromRotation(stRotation, rotation2DScratch);\r\n\r\n        var points2D = points2DScratch;\r\n        points2D[0].x = enuMinX;\r\n        points2D[0].y = enuMinY;\r\n\r\n        points2D[1].x = enuMinX;\r\n        points2D[1].y = enuMaxY;\r\n\r\n        points2D[2].x = enuMaxX;\r\n        points2D[2].y = enuMinY;\r\n\r\n        var boundingEnuMin = boundingPointsEnu[0];\r\n        var boundingPointsWidth = boundingPointsEnu[2].x - boundingEnuMin.x;\r\n        var boundingPointsHeight = boundingPointsEnu[1].y - boundingEnuMin.y;\r\n\r\n        for (i = 0; i < 3; i++) {\r\n            var point2D = points2D[i];\r\n            // rotate back\r\n            Matrix2.multiplyByVector(toDesiredInComputed, point2D, point2D);\r\n\r\n            // Convert point into east-north texture coordinate space\r\n            point2D.x = (point2D.x - boundingEnuMin.x) / boundingPointsWidth;\r\n            point2D.y = (point2D.y - boundingEnuMin.y) / boundingPointsHeight;\r\n        }\r\n\r\n        var minXYCorner = points2D[0];\r\n        var maxYCorner = points2D[1];\r\n        var maxXCorner = points2D[2];\r\n        var result = new Array(6);\r\n        Cartesian2.pack(minXYCorner, result);\r\n        Cartesian2.pack(maxYCorner, result, 2);\r\n        Cartesian2.pack(maxXCorner, result, 4);\r\n\r\n        return result;\r\n    };\r\n\r\n    return Geometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Geometry.js\n// module id = 10\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Values and type information for geometry attributes.  A {@link Geometry}\r\n     * generally contains one or more attributes.  All attributes together form\r\n     * the geometry's vertices.\r\n     *\r\n     * @alias GeometryAttribute\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {ComponentDatatype} [options.componentDatatype] The datatype of each component in the attribute, e.g., individual elements in values.\r\n     * @param {Number} [options.componentsPerAttribute] A number between 1 and 4 that defines the number of components in an attributes.\r\n     * @param {Boolean} [options.normalize=false] When <code>true</code> and <code>componentDatatype</code> is an integer format, indicate that the components should be mapped to the range [0, 1] (unsigned) or [-1, 1] (signed) when they are accessed as floating-point for rendering.\r\n     * @param {TypedArray} [options.values] The values for the attributes stored in a typed array.\r\n     *\r\n     * @exception {DeveloperError} options.componentsPerAttribute must be between 1 and 4.\r\n     *\r\n     *\r\n     * @example\r\n     * var geometry = new Cesium.Geometry({\r\n     *   attributes : {\r\n     *     position : new Cesium.GeometryAttribute({\r\n     *       componentDatatype : Cesium.ComponentDatatype.FLOAT,\r\n     *       componentsPerAttribute : 3,\r\n     *       values : new Float32Array([\r\n     *         0.0, 0.0, 0.0,\r\n     *         7500000.0, 0.0, 0.0,\r\n     *         0.0, 7500000.0, 0.0\r\n     *       ])\r\n     *     })\r\n     *   },\r\n     *   primitiveType : Cesium.PrimitiveType.LINE_LOOP\r\n     * });\r\n     *\r\n     * @see Geometry\r\n     */\r\n    function GeometryAttribute(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        \r\n\r\n        /**\r\n         * The datatype of each component in the attribute, e.g., individual elements in\r\n         * {@link GeometryAttribute#values}.\r\n         *\r\n         * @type ComponentDatatype\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.componentDatatype = options.componentDatatype;\r\n\r\n        /**\r\n         * A number between 1 and 4 that defines the number of components in an attributes.\r\n         * For example, a position attribute with x, y, and z components would have 3 as\r\n         * shown in the code example.\r\n         *\r\n         * @type Number\r\n         *\r\n         * @default undefined\r\n         *\r\n         * @example\r\n         * attribute.componentDatatype = Cesium.ComponentDatatype.FLOAT;\r\n         * attribute.componentsPerAttribute = 3;\r\n         * attribute.values = new Float32Array([\r\n         *   0.0, 0.0, 0.0,\r\n         *   7500000.0, 0.0, 0.0,\r\n         *   0.0, 7500000.0, 0.0\r\n         * ]);\r\n         */\r\n        this.componentsPerAttribute = options.componentsPerAttribute;\r\n\r\n        /**\r\n         * When <code>true</code> and <code>componentDatatype</code> is an integer format,\r\n         * indicate that the components should be mapped to the range [0, 1] (unsigned)\r\n         * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\r\n         * <p>\r\n         * This is commonly used when storing colors using {@link ComponentDatatype.UNSIGNED_BYTE}.\r\n         * </p>\r\n         *\r\n         * @type Boolean\r\n         *\r\n         * @default false\r\n         *\r\n         * @example\r\n         * attribute.componentDatatype = Cesium.ComponentDatatype.UNSIGNED_BYTE;\r\n         * attribute.componentsPerAttribute = 4;\r\n         * attribute.normalize = true;\r\n         * attribute.values = new Uint8Array([\r\n         *   Cesium.Color.floatToByte(color.red),\r\n         *   Cesium.Color.floatToByte(color.green),\r\n         *   Cesium.Color.floatToByte(color.blue),\r\n         *   Cesium.Color.floatToByte(color.alpha)\r\n         * ]);\r\n         */\r\n        this.normalize = defaultValue(options.normalize, false);\r\n\r\n        /**\r\n         * The values for the attributes stored in a typed array.  In the code example,\r\n         * every three elements in <code>values</code> defines one attributes since\r\n         * <code>componentsPerAttribute</code> is 3.\r\n         *\r\n         * @type TypedArray\r\n         *\r\n         * @default undefined\r\n         *\r\n         * @example\r\n         * attribute.componentDatatype = Cesium.ComponentDatatype.FLOAT;\r\n         * attribute.componentsPerAttribute = 3;\r\n         * attribute.values = new Float32Array([\r\n         *   0.0, 0.0, 0.0,\r\n         *   7500000.0, 0.0, 0.0,\r\n         *   0.0, 7500000.0, 0.0\r\n         * ]);\r\n         */\r\n        this.values = options.values;\r\n    }\r\n\r\n    return GeometryAttribute;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GeometryAttribute.js\n// module id = 11\n// module chunks = 0","define([\r\n        './defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n\r\n    var definePropertyWorks = (function() {\r\n        try {\r\n            return 'x' in Object.defineProperty({}, 'x', {});\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Defines properties on an object, using Object.defineProperties if available,\r\n     * otherwise returns the object unchanged.  This function should be used in\r\n     * setup code to prevent errors from completely halting JavaScript execution\r\n     * in legacy browsers.\r\n     *\r\n     * @private\r\n     *\r\n     * @exports defineProperties\r\n     */\r\n    var defineProperties = Object.defineProperties;\r\n    if (!definePropertyWorks || !defined(defineProperties)) {\r\n        defineProperties = function(o) {\r\n            return o;\r\n        };\r\n    }\r\n\r\n    return defineProperties;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/defineProperties.js\n// module id = 12\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './freezeObject',\r\n        './Math'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        freezeObject,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A 2D Cartesian point.\r\n     * @alias Cartesian2\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The X component.\r\n     * @param {Number} [y=0.0] The Y component.\r\n     *\r\n     * @see Cartesian3\r\n     * @see Cartesian4\r\n     * @see Packable\r\n     */\r\n    function Cartesian2(x, y) {\r\n        /**\r\n         * The X component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The Y component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a Cartesian2 instance from x and y coordinates.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.fromElements = function(x, y, result) {\r\n        if (!defined(result)) {\r\n            return new Cartesian2(x, y);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartesian2 instance.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to duplicate.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n     */\r\n    Cartesian2.clone = function(cartesian, result) {\r\n        if (!defined(cartesian)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Cartesian2(cartesian.x, cartesian.y);\r\n        }\r\n\r\n        result.x = cartesian.x;\r\n        result.y = cartesian.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian2 instance from an existing Cartesian3.  This simply takes the\r\n     * x and y properties of the Cartesian3 and drops z.\r\n     * @function\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian3 instance to create a Cartesian2 instance from.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.fromCartesian3 = Cartesian2.clone;\r\n\r\n    /**\r\n     * Creates a Cartesian2 instance from an existing Cartesian4.  This simply takes the\r\n     * x and y properties of the Cartesian4 and drops z and w.\r\n     * @function\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian2 instance from.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.fromCartesian4 = Cartesian2.clone;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Cartesian2.packedLength = 2;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Cartesian2} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Cartesian2.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex] = value.y;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Cartesian2} [result] The object into which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian2();\r\n        }\r\n        result.x = array[startingIndex++];\r\n        result.y = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Flattens an array of Cartesian2s into and array of components.\r\n     *\r\n     * @param {Cartesian2[]} array The array of cartesians to pack.\r\n     * @param {Number[]} result The array onto which to store the result.\r\n     * @returns {Number[]} The packed array.\r\n     */\r\n    Cartesian2.packArray = function(array, result) {\r\n        \r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length * 2);\r\n        } else {\r\n            result.length = length * 2;\r\n        }\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            Cartesian2.pack(array[i], result, i * 2);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks an array of cartesian components into and array of Cartesian2s.\r\n     *\r\n     * @param {Number[]} array The array of components to unpack.\r\n     * @param {Cartesian2[]} result The array onto which to store the result.\r\n     * @returns {Cartesian2[]} The unpacked array.\r\n     */\r\n    Cartesian2.unpackArray = function(array, result) {\r\n        \r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 2);\r\n        } else {\r\n            result.length = length / 2;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 2) {\r\n            var index = i / 2;\r\n            result[index] = Cartesian2.unpack(array, i, result[index]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian2 from two consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose two consecutive elements correspond to the x and y components, respectively.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create a Cartesian2 with (1.0, 2.0)\r\n     * var v = [1.0, 2.0];\r\n     * var p = Cesium.Cartesian2.fromArray(v);\r\n     *\r\n     * // Create a Cartesian2 with (1.0, 2.0) using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 2.0];\r\n     * var p2 = Cesium.Cartesian2.fromArray(v2, 2);\r\n     */\r\n    Cartesian2.fromArray = Cartesian2.unpack;\r\n\r\n    /**\r\n     * Computes the value of the maximum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the maximum component.\r\n     */\r\n    Cartesian2.maximumComponent = function(cartesian) {\r\n        \r\n\r\n        return Math.max(cartesian.x, cartesian.y);\r\n    };\r\n\r\n    /**\r\n     * Computes the value of the minimum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the minimum component.\r\n     */\r\n    Cartesian2.minimumComponent = function(cartesian) {\r\n        \r\n\r\n        return Math.min(cartesian.x, cartesian.y);\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian2} first A cartesian to compare.\r\n     * @param {Cartesian2} second A cartesian to compare.\r\n     * @param {Cartesian2} result The object into which to store the result.\r\n     * @returns {Cartesian2} A cartesian with the minimum components.\r\n     */\r\n    Cartesian2.minimumByComponent = function(first, second, result) {\r\n        \r\n\r\n        result.x = Math.min(first.x, second.x);\r\n        result.y = Math.min(first.y, second.y);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian2} first A cartesian to compare.\r\n     * @param {Cartesian2} second A cartesian to compare.\r\n     * @param {Cartesian2} result The object into which to store the result.\r\n     * @returns {Cartesian2} A cartesian with the maximum components.\r\n     */\r\n    Cartesian2.maximumByComponent = function(first, second, result) {\r\n        \r\n\r\n        result.x = Math.max(first.x, second.x);\r\n        result.y = Math.max(first.y, second.y);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the provided Cartesian's squared magnitude.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n     * @returns {Number} The squared magnitude.\r\n     */\r\n    Cartesian2.magnitudeSquared = function(cartesian) {\r\n        \r\n\r\n        return cartesian.x * cartesian.x + cartesian.y * cartesian.y;\r\n    };\r\n\r\n    /**\r\n     * Computes the Cartesian's magnitude (length).\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian instance whose magnitude is to be computed.\r\n     * @returns {Number} The magnitude.\r\n     */\r\n    Cartesian2.magnitude = function(cartesian) {\r\n        return Math.sqrt(Cartesian2.magnitudeSquared(cartesian));\r\n    };\r\n\r\n    var distanceScratch = new Cartesian2();\r\n\r\n    /**\r\n     * Computes the distance between two points.\r\n     *\r\n     * @param {Cartesian2} left The first point to compute the distance from.\r\n     * @param {Cartesian2} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 1.0\r\n     * var d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(2.0, 0.0));\r\n     */\r\n    Cartesian2.distance = function(left, right) {\r\n        \r\n\r\n        Cartesian2.subtract(left, right, distanceScratch);\r\n        return Cartesian2.magnitude(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the squared distance between two points.  Comparing squared distances\r\n     * using this function is more efficient than comparing distances using {@link Cartesian2#distance}.\r\n     *\r\n     * @param {Cartesian2} left The first point to compute the distance from.\r\n     * @param {Cartesian2} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 4.0, not 2.0\r\n     * var d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(3.0, 0.0));\r\n     */\r\n    Cartesian2.distanceSquared = function(left, right) {\r\n        \r\n\r\n        Cartesian2.subtract(left, right, distanceScratch);\r\n        return Cartesian2.magnitudeSquared(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized form of the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to be normalized.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.normalize = function(cartesian, result) {\r\n        \r\n\r\n        var magnitude = Cartesian2.magnitude(cartesian);\r\n\r\n        result.x = cartesian.x / magnitude;\r\n        result.y = cartesian.y / magnitude;\r\n\r\n        \r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the dot (scalar) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @returns {Number} The dot product.\r\n     */\r\n    Cartesian2.dot = function(left, right) {\r\n        \r\n\r\n        return left.x * right.x + left.y * right.y;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.multiplyComponents = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x * right.x;\r\n        result.y = left.y * right.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.divideComponents = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x / right.x;\r\n        result.y = left.y / right.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.add = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x + right.x;\r\n        result.y = left.y + right.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.subtract = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x - right.x;\r\n        result.y = left.y - right.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.multiplyByScalar = function(cartesian, scalar, result) {\r\n        \r\n\r\n        result.x = cartesian.x * scalar;\r\n        result.y = cartesian.y * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to be divided.\r\n     * @param {Number} scalar The scalar to divide by.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.divideByScalar = function(cartesian, scalar, result) {\r\n        \r\n\r\n        result.x = cartesian.x / scalar;\r\n        result.y = cartesian.y / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Negates the provided Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to be negated.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.negate = function(cartesian, result) {\r\n        \r\n\r\n        result.x = -cartesian.x;\r\n        result.y = -cartesian.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the absolute value of the provided Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian whose absolute value is to be computed.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.abs = function(cartesian, result) {\r\n        \r\n\r\n        result.x = Math.abs(cartesian.x);\r\n        result.y = Math.abs(cartesian.y);\r\n        return result;\r\n    };\r\n\r\n    var lerpScratch = new Cartesian2();\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n     *\r\n     * @param {Cartesian2} start The value corresponding to t at 0.0.\r\n     * @param {Cartesian2} end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.lerp = function(start, end, t, result) {\r\n        \r\n\r\n        Cartesian2.multiplyByScalar(end, t, lerpScratch);\r\n        result = Cartesian2.multiplyByScalar(start, 1.0 - t, result);\r\n        return Cartesian2.add(lerpScratch, result, result);\r\n    };\r\n\r\n    var angleBetweenScratch = new Cartesian2();\r\n    var angleBetweenScratch2 = new Cartesian2();\r\n    /**\r\n     * Returns the angle, in radians, between the provided Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @returns {Number} The angle between the Cartesians.\r\n     */\r\n    Cartesian2.angleBetween = function(left, right) {\r\n        \r\n\r\n        Cartesian2.normalize(left, angleBetweenScratch);\r\n        Cartesian2.normalize(right, angleBetweenScratch2);\r\n        return CesiumMath.acosClamped(Cartesian2.dot(angleBetweenScratch, angleBetweenScratch2));\r\n    };\r\n\r\n    var mostOrthogonalAxisScratch = new Cartesian2();\r\n    /**\r\n     * Returns the axis that is most orthogonal to the provided Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian on which to find the most orthogonal axis.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The most orthogonal axis.\r\n     */\r\n    Cartesian2.mostOrthogonalAxis = function(cartesian, result) {\r\n        \r\n\r\n        var f = Cartesian2.normalize(cartesian, mostOrthogonalAxisScratch);\r\n        Cartesian2.abs(f, f);\r\n\r\n        if (f.x <= f.y) {\r\n            result = Cartesian2.clone(Cartesian2.UNIT_X, result);\r\n        } else {\r\n            result = Cartesian2.clone(Cartesian2.UNIT_Y, result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian2} [left] The first Cartesian.\r\n     * @param {Cartesian2} [right] The second Cartesian.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian2.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.x === right.x) &&\r\n                (left.y === right.y));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Cartesian2.equalsArray = function(cartesian, array, offset) {\r\n        return cartesian.x === array[offset] &&\r\n               cartesian.y === array[offset + 1];\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian2} [left] The first Cartesian.\r\n     * @param {Cartesian2} [right] The second Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian2.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                CesiumMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartesian2 instance initialized to (0.0, 0.0).\r\n     *\r\n     * @type {Cartesian2}\r\n     * @constant\r\n     */\r\n    Cartesian2.ZERO = freezeObject(new Cartesian2(0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian2 instance initialized to (1.0, 0.0).\r\n     *\r\n     * @type {Cartesian2}\r\n     * @constant\r\n     */\r\n    Cartesian2.UNIT_X = freezeObject(new Cartesian2(1.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian2 instance initialized to (0.0, 1.0).\r\n     *\r\n     * @type {Cartesian2}\r\n     * @constant\r\n     */\r\n    Cartesian2.UNIT_Y = freezeObject(new Cartesian2(0.0, 1.0));\r\n\r\n    /**\r\n     * Duplicates this Cartesian2 instance.\r\n     *\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.prototype.clone = function(result) {\r\n        return Cartesian2.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian2} [right] The right hand side Cartesian.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian2.prototype.equals = function(right) {\r\n        return Cartesian2.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian2} [right] The right hand side Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian2.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {\r\n        return Cartesian2.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Cartesian in the format '(x, y)'.\r\n     *\r\n     * @returns {String} A string representing the provided Cartesian in the format '(x, y)'.\r\n     */\r\n    Cartesian2.prototype.toString = function() {\r\n        return '(' + this.x + ', ' + this.y + ')';\r\n    };\r\n\r\n    return Cartesian2;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Cartesian2.js\n// module id = 13\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './freezeObject',\r\n        './Math',\r\n        './scaleToGeodeticSurface'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        freezeObject,\r\n        CesiumMath,\r\n        scaleToGeodeticSurface) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A position defined by longitude, latitude, and height.\r\n     * @alias Cartographic\r\n     * @constructor\r\n     *\r\n     * @param {Number} [longitude=0.0] The longitude, in radians.\r\n     * @param {Number} [latitude=0.0] The latitude, in radians.\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     *\r\n     * @see Ellipsoid\r\n     */\r\n    function Cartographic(longitude, latitude, height) {\r\n        /**\r\n         * The longitude, in radians.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.longitude = defaultValue(longitude, 0.0);\r\n\r\n        /**\r\n         * The latitude, in radians.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.latitude = defaultValue(latitude, 0.0);\r\n\r\n        /**\r\n         * The height, in meters, above the ellipsoid.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.height = defaultValue(height, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Cartographic instance from longitude and latitude\r\n     * specified in radians.\r\n     *\r\n     * @param {Number} longitude The longitude, in radians.\r\n     * @param {Number} latitude The latitude, in radians.\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n     */\r\n    Cartographic.fromRadians = function(longitude, latitude, height, result) {\r\n        \r\n\r\n        height = defaultValue(height, 0.0);\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude, height);\r\n        }\r\n\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Cartographic instance from longitude and latitude\r\n     * specified in degrees.  The values in the resulting object will\r\n     * be in radians.\r\n     *\r\n     * @param {Number} longitude The longitude, in degrees.\r\n     * @param {Number} latitude The latitude, in degrees.\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n     */\r\n    Cartographic.fromDegrees = function(longitude, latitude, height, result) {\r\n        \r\n        longitude = CesiumMath.toRadians(longitude);\r\n        latitude = CesiumMath.toRadians(latitude);\r\n\r\n        return Cartographic.fromRadians(longitude, latitude, height, result);\r\n    };\r\n\r\n    var cartesianToCartographicN = new Cartesian3();\r\n    var cartesianToCartographicP = new Cartesian3();\r\n    var cartesianToCartographicH = new Cartesian3();\r\n    var wgs84OneOverRadii = new Cartesian3(1.0 / 6378137.0, 1.0 / 6378137.0, 1.0 / 6356752.3142451793);\r\n    var wgs84OneOverRadiiSquared = new Cartesian3(1.0 / (6378137.0 * 6378137.0), 1.0 / (6378137.0 * 6378137.0), 1.0 / (6356752.3142451793 * 6356752.3142451793));\r\n    var wgs84CenterToleranceSquared = CesiumMath.EPSILON1;\r\n\r\n    /**\r\n     * Creates a new Cartographic instance from a Cartesian position. The values in the\r\n     * resulting object will be in radians.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\r\n     */\r\n    Cartographic.fromCartesian = function(cartesian, ellipsoid, result) {\r\n        var oneOverRadii = defined(ellipsoid) ? ellipsoid.oneOverRadii : wgs84OneOverRadii;\r\n        var oneOverRadiiSquared = defined(ellipsoid) ? ellipsoid.oneOverRadiiSquared : wgs84OneOverRadiiSquared;\r\n        var centerToleranceSquared = defined(ellipsoid) ? ellipsoid._centerToleranceSquared : wgs84CenterToleranceSquared;\r\n\r\n        //`cartesian is required.` is thrown from scaleToGeodeticSurface\r\n        var p = scaleToGeodeticSurface(cartesian, oneOverRadii, oneOverRadiiSquared, centerToleranceSquared, cartesianToCartographicP);\r\n\r\n        if (!defined(p)) {\r\n            return undefined;\r\n        }\r\n\r\n        var n = Cartesian3.multiplyComponents(p, oneOverRadiiSquared, cartesianToCartographicN);\r\n        n = Cartesian3.normalize(n, n);\r\n\r\n        var h = Cartesian3.subtract(cartesian, p, cartesianToCartographicH);\r\n\r\n        var longitude = Math.atan2(n.y, n.x);\r\n        var latitude = Math.asin(n.z);\r\n        var height = CesiumMath.sign(Cartesian3.dot(h, cartesian)) * Cartesian3.magnitude(h);\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude, height);\r\n        }\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Cartesian3 instance from a Cartographic input. The values in the inputted\r\n     * object should be in radians.\r\n     *\r\n     * @param {Cartographic} cartographic Input to be converted into a Cartesian3 output.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The position\r\n     */\r\n    Cartographic.toCartesian = function(cartographic, ellipsoid, result) {\r\n        \r\n\r\n        return Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height, ellipsoid, result);\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartographic instance.\r\n     *\r\n     * @param {Cartographic} cartographic The cartographic to duplicate.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided. (Returns undefined if cartographic is undefined)\r\n     */\r\n    Cartographic.clone = function(cartographic, result) {\r\n        if (!defined(cartographic)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Cartographic(cartographic.longitude, cartographic.latitude, cartographic.height);\r\n        }\r\n        result.longitude = cartographic.longitude;\r\n        result.latitude = cartographic.latitude;\r\n        result.height = cartographic.height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided cartographics componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartographic} [left] The first cartographic.\r\n     * @param {Cartographic} [right] The second cartographic.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartographic.equals = function(left, right) {\r\n        return (left === right) ||\r\n                ((defined(left)) &&\r\n                 (defined(right)) &&\r\n                 (left.longitude === right.longitude) &&\r\n                 (left.latitude === right.latitude) &&\r\n                 (left.height === right.height));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided cartographics componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartographic} [left] The first cartographic.\r\n     * @param {Cartographic} [right] The second cartographic.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartographic.equalsEpsilon = function(left, right, epsilon) {\r\n        \r\n\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (Math.abs(left.longitude - right.longitude) <= epsilon) &&\r\n                (Math.abs(left.latitude - right.latitude) <= epsilon) &&\r\n                (Math.abs(left.height - right.height) <= epsilon));\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartographic instance initialized to (0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartographic}\r\n     * @constant\r\n     */\r\n    Cartographic.ZERO = freezeObject(new Cartographic(0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * Duplicates this instance.\r\n     *\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n     */\r\n    Cartographic.prototype.clone = function(result) {\r\n        return Cartographic.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided against this cartographic componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartographic} [right] The second cartographic.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartographic.prototype.equals = function(right) {\r\n        return Cartographic.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided against this cartographic componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartographic} [right] The second cartographic.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartographic.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Cartographic.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this cartographic in the format '(longitude, latitude, height)'.\r\n     *\r\n     * @returns {String} A string representing the provided cartographic in the format '(longitude, latitude, height)'.\r\n     */\r\n    Cartographic.prototype.toString = function() {\r\n        return '(' + this.longitude + ', ' + this.latitude + ', ' + this.height + ')';\r\n    };\r\n\r\n    return Cartographic;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Cartographic.js\n// module id = 14\n// module chunks = 0","define([\r\n        './freezeObject',\r\n        './WebGLConstants'\r\n    ], function(\r\n        freezeObject,\r\n        WebGLConstants) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The type of a geometric primitive, i.e., points, lines, and triangles.\r\n     *\r\n     * @exports PrimitiveType\r\n     */\r\n    var PrimitiveType = {\r\n        /**\r\n         * Points primitive where each vertex (or index) is a separate point.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        POINTS : WebGLConstants.POINTS,\r\n\r\n        /**\r\n         * Lines primitive where each two vertices (or indices) is a line segment.  Line segments are not necessarily connected.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        LINES : WebGLConstants.LINES,\r\n\r\n        /**\r\n         * Line loop primitive where each vertex (or index) after the first connects a line to\r\n         * the previous vertex, and the last vertex implicitly connects to the first.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        LINE_LOOP : WebGLConstants.LINE_LOOP,\r\n\r\n        /**\r\n         * Line strip primitive where each vertex (or index) after the first connects a line to the previous vertex.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        LINE_STRIP : WebGLConstants.LINE_STRIP,\r\n\r\n        /**\r\n         * Triangles primitive where each three vertices (or indices) is a triangle.  Triangles do not necessarily share edges.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        TRIANGLES : WebGLConstants.TRIANGLES,\r\n\r\n        /**\r\n         * Triangle strip primitive where each vertex (or index) after the first two connect to\r\n         * the previous two vertices forming a triangle.  For example, this can be used to model a wall.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        TRIANGLE_STRIP : WebGLConstants.TRIANGLE_STRIP,\r\n\r\n        /**\r\n         * Triangle fan primitive where each vertex (or index) after the first two connect to\r\n         * the previous vertex and the first vertex forming a triangle.  For example, this can be used\r\n         * to model a cone or circle.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        TRIANGLE_FAN : WebGLConstants.TRIANGLE_FAN,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        validate : function(primitiveType) {\r\n            return primitiveType === PrimitiveType.POINTS ||\r\n                   primitiveType === PrimitiveType.LINES ||\r\n                   primitiveType === PrimitiveType.LINE_LOOP ||\r\n                   primitiveType === PrimitiveType.LINE_STRIP ||\r\n                   primitiveType === PrimitiveType.TRIANGLES ||\r\n                   primitiveType === PrimitiveType.TRIANGLE_STRIP ||\r\n                   primitiveType === PrimitiveType.TRIANGLE_FAN;\r\n        }\r\n    };\r\n\r\n    return freezeObject(PrimitiveType);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PrimitiveType.js\n// module id = 15\n// module chunks = 0","define([\r\n        './defined',\r\n        './DeveloperError',\r\n        './freezeObject',\r\n        './Math',\r\n        './WebGLConstants'\r\n    ], function(\r\n        defined,\r\n        DeveloperError,\r\n        freezeObject,\r\n        CesiumMath,\r\n        WebGLConstants) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Constants for WebGL index datatypes.  These corresponds to the\r\n     * <code>type</code> parameter of {@link http://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml|drawElements}.\r\n     *\r\n     * @exports IndexDatatype\r\n     */\r\n    var IndexDatatype = {\r\n        /**\r\n         * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\r\n         * of an element in <code>Uint8Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_BYTE : WebGLConstants.UNSIGNED_BYTE,\r\n\r\n        /**\r\n         * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\r\n         * of an element in <code>Uint16Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_SHORT : WebGLConstants.UNSIGNED_SHORT,\r\n\r\n        /**\r\n         * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\r\n         * of an element in <code>Uint32Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_INT : WebGLConstants.UNSIGNED_INT\r\n    };\r\n\r\n    /**\r\n     * Returns the size, in bytes, of the corresponding datatype.\r\n     *\r\n     * @param {IndexDatatype} indexDatatype The index datatype to get the size of.\r\n     * @returns {Number} The size in bytes.\r\n     *\r\n     * @example\r\n     * // Returns 2\r\n     * var size = Cesium.IndexDatatype.getSizeInBytes(Cesium.IndexDatatype.UNSIGNED_SHORT);\r\n     */\r\n    IndexDatatype.getSizeInBytes = function(indexDatatype) {\r\n        switch(indexDatatype) {\r\n            case IndexDatatype.UNSIGNED_BYTE:\r\n                return Uint8Array.BYTES_PER_ELEMENT;\r\n            case IndexDatatype.UNSIGNED_SHORT:\r\n                return Uint16Array.BYTES_PER_ELEMENT;\r\n            case IndexDatatype.UNSIGNED_INT:\r\n                return Uint32Array.BYTES_PER_ELEMENT;\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    /**\r\n     * Validates that the provided index datatype is a valid {@link IndexDatatype}.\r\n     *\r\n     * @param {IndexDatatype} indexDatatype The index datatype to validate.\r\n     * @returns {Boolean} <code>true</code> if the provided index datatype is a valid value; otherwise, <code>false</code>.\r\n     *\r\n     * @example\r\n     * if (!Cesium.IndexDatatype.validate(indexDatatype)) {\r\n     *   throw new Cesium.DeveloperError('indexDatatype must be a valid value.');\r\n     * }\r\n     */\r\n    IndexDatatype.validate = function(indexDatatype) {\r\n        return defined(indexDatatype) &&\r\n               (indexDatatype === IndexDatatype.UNSIGNED_BYTE ||\r\n                indexDatatype === IndexDatatype.UNSIGNED_SHORT ||\r\n                indexDatatype === IndexDatatype.UNSIGNED_INT);\r\n    };\r\n\r\n    /**\r\n     * Creates a typed array that will store indices, using either <code><Uint16Array</code>\r\n     * or <code>Uint32Array</code> depending on the number of vertices.\r\n     *\r\n     * @param {Number} numberOfVertices Number of vertices that the indices will reference.\r\n     * @param {Number|Array} indicesLengthOrArray Passed through to the typed array constructor.\r\n     * @returns {Uint16Array|Uint32Array} A <code>Uint16Array</code> or <code>Uint32Array</code> constructed with <code>indicesLengthOrArray</code>.\r\n     *\r\n     * @example\r\n     * this.indices = Cesium.IndexDatatype.createTypedArray(positions.length / 3, numberOfIndices);\r\n     */\r\n    IndexDatatype.createTypedArray = function(numberOfVertices, indicesLengthOrArray) {\r\n        \r\n\r\n        if (numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n            return new Uint32Array(indicesLengthOrArray);\r\n        }\r\n\r\n        return new Uint16Array(indicesLengthOrArray);\r\n    };\r\n\r\n    /**\r\n     * Creates a typed array from a source array buffer.  The resulting typed array will store indices, using either <code><Uint16Array</code>\r\n     * or <code>Uint32Array</code> depending on the number of vertices.\r\n     *\r\n     * @param {Number} numberOfVertices Number of vertices that the indices will reference.\r\n     * @param {ArrayBuffer} sourceArray Passed through to the typed array constructor.\r\n     * @param {Number} byteOffset Passed through to the typed array constructor.\r\n     * @param {Number} length Passed through to the typed array constructor.\r\n     * @returns {Uint16Array|Uint32Array} A <code>Uint16Array</code> or <code>Uint32Array</code> constructed with <code>sourceArray</code>, <code>byteOffset</code>, and <code>length</code>.\r\n     *\r\n     */\r\n    IndexDatatype.createTypedArrayFromArrayBuffer = function(numberOfVertices, sourceArray, byteOffset, length) {\r\n        \r\n\r\n        if (numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n            return new Uint32Array(sourceArray, byteOffset, length);\r\n        }\r\n\r\n        return new Uint16Array(sourceArray, byteOffset, length);\r\n    };\r\n\r\n    return freezeObject(IndexDatatype);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/IndexDatatype.js\n// module id = 16\n// module chunks = 0","define([\r\n        './defaultValue'\r\n    ], function(\r\n        defaultValue) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Attributes, which make up a geometry's vertices.  Each property in this object corresponds to a\r\n     * {@link GeometryAttribute} containing the attribute's data.\r\n     * <p>\r\n     * Attributes are always stored non-interleaved in a Geometry.\r\n     * </p>\r\n     *\r\n     * @alias GeometryAttributes\r\n     * @constructor\r\n     */\r\n    function GeometryAttributes(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        /**\r\n         * The 3D position attribute.\r\n         * <p>\r\n         * 64-bit floating-point (for precision).  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type GeometryAttribute\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.position = options.position;\r\n\r\n        /**\r\n         * The normal attribute (normalized), which is commonly used for lighting.\r\n         * <p>\r\n         * 32-bit floating-point.  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type GeometryAttribute\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.normal = options.normal;\r\n\r\n        /**\r\n         * The 2D texture coordinate attribute.\r\n         * <p>\r\n         * 32-bit floating-point.  2 components per attribute\r\n         * </p>\r\n         *\r\n         * @type GeometryAttribute\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.st = options.st;\r\n\r\n        /**\r\n         * The bitangent attribute (normalized), which is used for tangent-space effects like bump mapping.\r\n         * <p>\r\n         * 32-bit floating-point.  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type GeometryAttribute\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.bitangent = options.bitangent;\r\n\r\n        /**\r\n         * The tangent attribute (normalized), which is used for tangent-space effects like bump mapping.\r\n         * <p>\r\n         * 32-bit floating-point.  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type GeometryAttribute\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.tangent = options.tangent;\r\n\r\n        /**\r\n         * The color attribute.\r\n         * <p>\r\n         * 8-bit unsigned integer. 4 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type GeometryAttribute\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.color = options.color;\r\n    }\r\n\r\n    return GeometryAttributes;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GeometryAttributes.js\n// module id = 17\n// module chunks = 0","define([\r\n        './Cartographic',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './Ellipsoid',\r\n        './freezeObject',\r\n        './Math'\r\n    ], function(\r\n        Cartographic,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Ellipsoid,\r\n        freezeObject,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A two dimensional region specified as longitude and latitude coordinates.\r\n     *\r\n     * @alias Rectangle\r\n     * @constructor\r\n     *\r\n     * @param {Number} [west=0.0] The westernmost longitude, in radians, in the range [-Pi, Pi].\r\n     * @param {Number} [south=0.0] The southernmost latitude, in radians, in the range [-Pi/2, Pi/2].\r\n     * @param {Number} [east=0.0] The easternmost longitude, in radians, in the range [-Pi, Pi].\r\n     * @param {Number} [north=0.0] The northernmost latitude, in radians, in the range [-Pi/2, Pi/2].\r\n     *\r\n     * @see Packable\r\n     */\r\n    function Rectangle(west, south, east, north) {\r\n        /**\r\n         * The westernmost longitude in radians in the range [-Pi, Pi].\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.west = defaultValue(west, 0.0);\r\n\r\n        /**\r\n         * The southernmost latitude in radians in the range [-Pi/2, Pi/2].\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.south = defaultValue(south, 0.0);\r\n\r\n        /**\r\n         * The easternmost longitude in radians in the range [-Pi, Pi].\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.east = defaultValue(east, 0.0);\r\n\r\n        /**\r\n         * The northernmost latitude in radians in the range [-Pi/2, Pi/2].\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.north = defaultValue(north, 0.0);\r\n    }\r\n\r\n    defineProperties(Rectangle.prototype, {\r\n        /**\r\n         * Gets the width of the rectangle in radians.\r\n         * @memberof Rectangle.prototype\r\n         * @type {Number}\r\n         */\r\n        width : {\r\n            get : function() {\r\n                return Rectangle.computeWidth(this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the height of the rectangle in radians.\r\n         * @memberof Rectangle.prototype\r\n         * @type {Number}\r\n         */\r\n        height : {\r\n            get : function() {\r\n                return Rectangle.computeHeight(this);\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Rectangle.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Rectangle} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Rectangle.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.west;\r\n        array[startingIndex++] = value.south;\r\n        array[startingIndex++] = value.east;\r\n        array[startingIndex] = value.north;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Rectangle} [result] The object into which to store the result.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if one was not provided.\r\n     */\r\n    Rectangle.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Rectangle();\r\n        }\r\n\r\n        result.west = array[startingIndex++];\r\n        result.south = array[startingIndex++];\r\n        result.east = array[startingIndex++];\r\n        result.north = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the width of a rectangle in radians.\r\n     * @param {Rectangle} rectangle The rectangle to compute the width of.\r\n     * @returns {Number} The width.\r\n     */\r\n    Rectangle.computeWidth = function(rectangle) {\r\n        \r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n        }\r\n        return east - west;\r\n    };\r\n\r\n    /**\r\n     * Computes the height of a rectangle in radians.\r\n     * @param {Rectangle} rectangle The rectangle to compute the height of.\r\n     * @returns {Number} The height.\r\n     */\r\n    Rectangle.computeHeight = function(rectangle) {\r\n        \r\n        return rectangle.north - rectangle.south;\r\n    };\r\n\r\n    /**\r\n     * Creates a rectangle given the boundary longitude and latitude in degrees.\r\n     *\r\n     * @param {Number} [west=0.0] The westernmost longitude in degrees in the range [-180.0, 180.0].\r\n     * @param {Number} [south=0.0] The southernmost latitude in degrees in the range [-90.0, 90.0].\r\n     * @param {Number} [east=0.0] The easternmost longitude in degrees in the range [-180.0, 180.0].\r\n     * @param {Number} [north=0.0] The northernmost latitude in degrees in the range [-90.0, 90.0].\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     *\r\n     * @example\r\n     * var rectangle = Cesium.Rectangle.fromDegrees(0.0, 20.0, 10.0, 30.0);\r\n     */\r\n    Rectangle.fromDegrees = function(west, south, east, north, result) {\r\n        west = CesiumMath.toRadians(defaultValue(west, 0.0));\r\n        south = CesiumMath.toRadians(defaultValue(south, 0.0));\r\n        east = CesiumMath.toRadians(defaultValue(east, 0.0));\r\n        north = CesiumMath.toRadians(defaultValue(north, 0.0));\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rectangle given the boundary longitude and latitude in radians.\r\n     *\r\n     * @param {Number} [west=0.0] The westernmost longitude in radians in the range [-Math.PI, Math.PI].\r\n     * @param {Number} [south=0.0] The southernmost latitude in radians in the range [-Math.PI/2, Math.PI/2].\r\n     * @param {Number} [east=0.0] The easternmost longitude in radians in the range [-Math.PI, Math.PI].\r\n     * @param {Number} [north=0.0] The northernmost latitude in radians in the range [-Math.PI/2, Math.PI/2].\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     *\r\n     * @example\r\n     * var rectangle = Cesium.Rectangle.fromRadians(0.0, Math.PI/4, Math.PI/8, 3*Math.PI/4);\r\n     */\r\n    Rectangle.fromRadians = function(west, south, east, north, result) {\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = defaultValue(west, 0.0);\r\n        result.south = defaultValue(south, 0.0);\r\n        result.east = defaultValue(east, 0.0);\r\n        result.north = defaultValue(north, 0.0);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates the smallest possible Rectangle that encloses all positions in the provided array.\r\n     *\r\n     * @param {Cartographic[]} cartographics The list of Cartographic instances.\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     */\r\n    Rectangle.fromCartographicArray = function(cartographics, result) {\r\n        \r\n\r\n        var west = Number.MAX_VALUE;\r\n        var east = -Number.MAX_VALUE;\r\n        var westOverIDL = Number.MAX_VALUE;\r\n        var eastOverIDL = -Number.MAX_VALUE;\r\n        var south = Number.MAX_VALUE;\r\n        var north = -Number.MAX_VALUE;\r\n\r\n        for ( var i = 0, len = cartographics.length; i < len; i++) {\r\n            var position = cartographics[i];\r\n            west = Math.min(west, position.longitude);\r\n            east = Math.max(east, position.longitude);\r\n            south = Math.min(south, position.latitude);\r\n            north = Math.max(north, position.latitude);\r\n\r\n            var lonAdjusted = position.longitude >= 0 ?  position.longitude : position.longitude +  CesiumMath.TWO_PI;\r\n            westOverIDL = Math.min(westOverIDL, lonAdjusted);\r\n            eastOverIDL = Math.max(eastOverIDL, lonAdjusted);\r\n        }\r\n\r\n        if(east - west > eastOverIDL - westOverIDL) {\r\n            west = westOverIDL;\r\n            east = eastOverIDL;\r\n\r\n            if (east > CesiumMath.PI) {\r\n                east = east - CesiumMath.TWO_PI;\r\n            }\r\n            if (west > CesiumMath.PI) {\r\n                west = west - CesiumMath.TWO_PI;\r\n            }\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates the smallest possible Rectangle that encloses all positions in the provided array.\r\n     *\r\n     * @param {Cartesian3[]} cartesians The list of Cartesian instances.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid the cartesians are on.\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     */\r\n    Rectangle.fromCartesianArray = function(cartesians, ellipsoid, result) {\r\n        \r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var west = Number.MAX_VALUE;\r\n        var east = -Number.MAX_VALUE;\r\n        var westOverIDL = Number.MAX_VALUE;\r\n        var eastOverIDL = -Number.MAX_VALUE;\r\n        var south = Number.MAX_VALUE;\r\n        var north = -Number.MAX_VALUE;\r\n\r\n        for ( var i = 0, len = cartesians.length; i < len; i++) {\r\n            var position = ellipsoid.cartesianToCartographic(cartesians[i]);\r\n            west = Math.min(west, position.longitude);\r\n            east = Math.max(east, position.longitude);\r\n            south = Math.min(south, position.latitude);\r\n            north = Math.max(north, position.latitude);\r\n\r\n            var lonAdjusted = position.longitude >= 0 ?  position.longitude : position.longitude +  CesiumMath.TWO_PI;\r\n            westOverIDL = Math.min(westOverIDL, lonAdjusted);\r\n            eastOverIDL = Math.max(eastOverIDL, lonAdjusted);\r\n        }\r\n\r\n        if(east - west > eastOverIDL - westOverIDL) {\r\n            west = westOverIDL;\r\n            east = eastOverIDL;\r\n\r\n            if (east > CesiumMath.PI) {\r\n                east = east - CesiumMath.TWO_PI;\r\n            }\r\n            if (west > CesiumMath.PI) {\r\n                west = west - CesiumMath.TWO_PI;\r\n            }\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle to clone.\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided. (Returns undefined if rectangle is undefined)\r\n     */\r\n    Rectangle.clone = function(rectangle, result) {\r\n        if (!defined(rectangle)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(rectangle.west, rectangle.south, rectangle.east, rectangle.north);\r\n        }\r\n\r\n        result.west = rectangle.west;\r\n        result.south = rectangle.south;\r\n        result.east = rectangle.east;\r\n        result.north = rectangle.north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Rectangles componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Rectangle} [left] The first Rectangle.\r\n     * @param {Rectangle} [right] The second Rectangle.\r\n     * @param {Number} absoluteEpsilon The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Rectangle.equalsEpsilon = function(left, right, absoluteEpsilon) {\r\n        \r\n\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                (Math.abs(left.west - right.west) <= absoluteEpsilon) &&\r\n                (Math.abs(left.south - right.south) <= absoluteEpsilon) &&\r\n                (Math.abs(left.east - right.east) <= absoluteEpsilon) &&\r\n                (Math.abs(left.north - right.north) <= absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * Duplicates this Rectangle.\r\n     *\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     */\r\n    Rectangle.prototype.clone = function(result) {\r\n        return Rectangle.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Rectangle with this Rectangle componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Rectangle} [other] The Rectangle to compare.\r\n     * @returns {Boolean} <code>true</code> if the Rectangles are equal, <code>false</code> otherwise.\r\n     */\r\n    Rectangle.prototype.equals = function(other) {\r\n        return Rectangle.equals(this, other);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided rectangles and returns <code>true</code> if they are equal,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Rectangle} [left] The first Rectangle.\r\n     * @param {Rectangle} [right] The second Rectangle.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal; otherwise <code>false</code>.\r\n     */\r\n    Rectangle.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.west === right.west) &&\r\n                (left.south === right.south) &&\r\n                (left.east === right.east) &&\r\n                (left.north === right.north));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Rectangle with this Rectangle componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Rectangle} [other] The Rectangle to compare.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if the Rectangles are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Rectangle.prototype.equalsEpsilon = function(other, epsilon) {\r\n        \r\n\r\n        return Rectangle.equalsEpsilon(this, other, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Checks a Rectangle's properties and throws if they are not in valid ranges.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle to validate\r\n     *\r\n     * @exception {DeveloperError} <code>north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     */\r\n    Rectangle.validate = function(rectangle) {\r\n        \r\n    };\r\n\r\n    /**\r\n     * Computes the southwest corner of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.southwest = function(rectangle, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(rectangle.west, rectangle.south);\r\n        }\r\n        result.longitude = rectangle.west;\r\n        result.latitude = rectangle.south;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the northwest corner of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.northwest = function(rectangle, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(rectangle.west, rectangle.north);\r\n        }\r\n        result.longitude = rectangle.west;\r\n        result.latitude = rectangle.north;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the northeast corner of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.northeast = function(rectangle, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(rectangle.east, rectangle.north);\r\n        }\r\n        result.longitude = rectangle.east;\r\n        result.latitude = rectangle.north;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the southeast corner of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.southeast = function(rectangle, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(rectangle.east, rectangle.south);\r\n        }\r\n        result.longitude = rectangle.east;\r\n        result.latitude = rectangle.south;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the center of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the center\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.center = function(rectangle, result) {\r\n        \r\n\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var longitude = CesiumMath.negativePiToPi((west + east) * 0.5);\r\n        var latitude = (rectangle.south + rectangle.north) * 0.5;\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude);\r\n        }\r\n\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the intersection of two rectangles.  This function assumes that the rectangle's coordinates are\r\n     * latitude and longitude in radians and produces a correct intersection, taking into account the fact that\r\n     * the same angle can be represented with multiple values as well as the wrapping of longitude at the\r\n     * anti-meridian.  For a simple intersection that ignores these factors and can be used with projected\r\n     * coordinates, see {@link Rectangle.simpleIntersection}.\r\n     *\r\n     * @param {Rectangle} rectangle On rectangle to find an intersection\r\n     * @param {Rectangle} otherRectangle Another rectangle to find an intersection\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle|undefined} The modified result parameter, a new Rectangle instance if none was provided or undefined if there is no intersection.\r\n     */\r\n    Rectangle.intersection = function(rectangle, otherRectangle, result) {\r\n        \r\n\r\n        var rectangleEast = rectangle.east;\r\n        var rectangleWest = rectangle.west;\r\n\r\n        var otherRectangleEast = otherRectangle.east;\r\n        var otherRectangleWest = otherRectangle.west;\r\n\r\n        if (rectangleEast < rectangleWest && otherRectangleEast > 0.0) {\r\n            rectangleEast += CesiumMath.TWO_PI;\r\n        } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0.0) {\r\n            otherRectangleEast += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        if (rectangleEast < rectangleWest && otherRectangleWest < 0.0) {\r\n            otherRectangleWest += CesiumMath.TWO_PI;\r\n        } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0.0) {\r\n            rectangleWest += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var west = CesiumMath.negativePiToPi(Math.max(rectangleWest, otherRectangleWest));\r\n        var east = CesiumMath.negativePiToPi(Math.min(rectangleEast, otherRectangleEast));\r\n\r\n        if ((rectangle.west < rectangle.east || otherRectangle.west < otherRectangle.east) && east <= west) {\r\n            return undefined;\r\n        }\r\n\r\n        var south = Math.max(rectangle.south, otherRectangle.south);\r\n        var north = Math.min(rectangle.north, otherRectangle.north);\r\n\r\n        if (south >= north) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a simple intersection of two rectangles.  Unlike {@link Rectangle.intersection}, this function\r\n     * does not attempt to put the angular coordinates into a consistent range or to account for crossing the\r\n     * anti-meridian.  As such, it can be used for rectangles where the coordinates are not simply latitude\r\n     * and longitude (i.e. projected coordinates).\r\n     *\r\n     * @param {Rectangle} rectangle On rectangle to find an intersection\r\n     * @param {Rectangle} otherRectangle Another rectangle to find an intersection\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle|undefined} The modified result parameter, a new Rectangle instance if none was provided or undefined if there is no intersection.\r\n     */\r\n    Rectangle.simpleIntersection = function(rectangle, otherRectangle, result) {\r\n        \r\n\r\n        var west = Math.max(rectangle.west, otherRectangle.west);\r\n        var south = Math.max(rectangle.south, otherRectangle.south);\r\n        var east = Math.min(rectangle.east, otherRectangle.east);\r\n        var north = Math.min(rectangle.north, otherRectangle.north);\r\n\r\n        if (south >= north || west >= east) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a rectangle that is the union of two rectangles.\r\n     *\r\n     * @param {Rectangle} rectangle A rectangle to enclose in rectangle.\r\n     * @param {Rectangle} otherRectangle A rectangle to enclose in a rectangle.\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     */\r\n    Rectangle.union = function(rectangle, otherRectangle, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Rectangle();\r\n        }\r\n\r\n        var rectangleEast = rectangle.east;\r\n        var rectangleWest = rectangle.west;\r\n\r\n        var otherRectangleEast = otherRectangle.east;\r\n        var otherRectangleWest = otherRectangle.west;\r\n\r\n        if (rectangleEast < rectangleWest && otherRectangleEast > 0.0) {\r\n            rectangleEast += CesiumMath.TWO_PI;\r\n        } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0.0) {\r\n            otherRectangleEast += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        if (rectangleEast < rectangleWest && otherRectangleWest < 0.0) {\r\n            otherRectangleWest += CesiumMath.TWO_PI;\r\n        } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0.0) {\r\n            rectangleWest += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var west = CesiumMath.convertLongitudeRange(Math.min(rectangleWest, otherRectangleWest));\r\n        var east = CesiumMath.convertLongitudeRange(Math.max(rectangleEast, otherRectangleEast));\r\n\r\n        result.west = west;\r\n        result.south = Math.min(rectangle.south, otherRectangle.south);\r\n        result.east = east;\r\n        result.north = Math.max(rectangle.north, otherRectangle.north);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a rectangle by enlarging the provided rectangle until it contains the provided cartographic.\r\n     *\r\n     * @param {Rectangle} rectangle A rectangle to expand.\r\n     * @param {Cartographic} cartographic A cartographic to enclose in a rectangle.\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if one was not provided.\r\n     */\r\n    Rectangle.expand = function(rectangle, cartographic, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Rectangle();\r\n        }\r\n\r\n        result.west = Math.min(rectangle.west, cartographic.longitude);\r\n        result.south = Math.min(rectangle.south, cartographic.latitude);\r\n        result.east = Math.max(rectangle.east, cartographic.longitude);\r\n        result.north = Math.max(rectangle.north, cartographic.latitude);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the cartographic is on or inside the rectangle, false otherwise.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle\r\n     * @param {Cartographic} cartographic The cartographic to test.\r\n     * @returns {Boolean} true if the provided cartographic is inside the rectangle, false otherwise.\r\n     */\r\n    Rectangle.contains = function(rectangle, cartographic) {\r\n        \r\n\r\n        var longitude = cartographic.longitude;\r\n        var latitude = cartographic.latitude;\r\n\r\n        var west = rectangle.west;\r\n        var east = rectangle.east;\r\n\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n            if (longitude < 0.0) {\r\n                longitude += CesiumMath.TWO_PI;\r\n            }\r\n        }\r\n        return (longitude > west || CesiumMath.equalsEpsilon(longitude, west, CesiumMath.EPSILON14)) &&\r\n               (longitude < east || CesiumMath.equalsEpsilon(longitude, east, CesiumMath.EPSILON14)) &&\r\n               latitude >= rectangle.south &&\r\n               latitude <= rectangle.north;\r\n    };\r\n\r\n    var subsampleLlaScratch = new Cartographic();\r\n    /**\r\n     * Samples a rectangle so that it includes a list of Cartesian points suitable for passing to\r\n     * {@link BoundingSphere#fromPoints}.  Sampling is necessary to account\r\n     * for rectangles that cover the poles or cross the equator.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle to subsample.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n     * @param {Number} [surfaceHeight=0.0] The height of the rectangle above the ellipsoid.\r\n     * @param {Cartesian3[]} [result] The array of Cartesians onto which to store the result.\r\n     * @returns {Cartesian3[]} The modified result parameter or a new Array of Cartesians instances if none was provided.\r\n     */\r\n    Rectangle.subsample = function(rectangle, ellipsoid, surfaceHeight, result) {\r\n        \r\n\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        surfaceHeight = defaultValue(surfaceHeight, 0.0);\r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n        var length = 0;\r\n\r\n        var north = rectangle.north;\r\n        var south = rectangle.south;\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n\r\n        var lla = subsampleLlaScratch;\r\n        lla.height = surfaceHeight;\r\n\r\n        lla.longitude = west;\r\n        lla.latitude = north;\r\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n        length++;\r\n\r\n        lla.longitude = east;\r\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n        length++;\r\n\r\n        lla.latitude = south;\r\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n        length++;\r\n\r\n        lla.longitude = west;\r\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n        length++;\r\n\r\n        if (north < 0.0) {\r\n            lla.latitude = north;\r\n        } else if (south > 0.0) {\r\n            lla.latitude = south;\r\n        } else {\r\n            lla.latitude = 0.0;\r\n        }\r\n\r\n        for ( var i = 1; i < 8; ++i) {\r\n            lla.longitude = -Math.PI + i * CesiumMath.PI_OVER_TWO;\r\n            if (Rectangle.contains(rectangle, lla)) {\r\n                result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n                length++;\r\n            }\r\n        }\r\n\r\n        if (lla.latitude === 0.0) {\r\n            lla.longitude = west;\r\n            result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n            length++;\r\n            lla.longitude = east;\r\n            result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n            length++;\r\n        }\r\n        result.length = length;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The largest possible rectangle.\r\n     *\r\n     * @type {Rectangle}\r\n     * @constant\r\n    */\r\n    Rectangle.MAX_VALUE = freezeObject(new Rectangle(-Math.PI, -CesiumMath.PI_OVER_TWO, Math.PI, CesiumMath.PI_OVER_TWO));\r\n\r\n    return Rectangle;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Rectangle.js\n// module id = 18\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './freezeObject',\r\n        './Math'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        freezeObject,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A 3x3 matrix, indexable as a column-major order array.\r\n     * Constructor parameters are in row-major order for code readability.\r\n     * @alias Matrix3\r\n     * @constructor\r\n     *\r\n     * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\r\n     * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\r\n     * @param {Number} [column2Row0=0.0] The value for column 2, row 0.\r\n     * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\r\n     * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\r\n     * @param {Number} [column2Row1=0.0] The value for column 2, row 1.\r\n     * @param {Number} [column0Row2=0.0] The value for column 0, row 2.\r\n     * @param {Number} [column1Row2=0.0] The value for column 1, row 2.\r\n     * @param {Number} [column2Row2=0.0] The value for column 2, row 2.\r\n     *\r\n     * @see Matrix3.fromColumnMajorArray\r\n     * @see Matrix3.fromRowMajorArray\r\n     * @see Matrix3.fromQuaternion\r\n     * @see Matrix3.fromScale\r\n     * @see Matrix3.fromUniformScale\r\n     * @see Matrix2\r\n     * @see Matrix4\r\n     */\r\n    function Matrix3(column0Row0, column1Row0, column2Row0,\r\n                           column0Row1, column1Row1, column2Row1,\r\n                           column0Row2, column1Row2, column2Row2) {\r\n        this[0] = defaultValue(column0Row0, 0.0);\r\n        this[1] = defaultValue(column0Row1, 0.0);\r\n        this[2] = defaultValue(column0Row2, 0.0);\r\n        this[3] = defaultValue(column1Row0, 0.0);\r\n        this[4] = defaultValue(column1Row1, 0.0);\r\n        this[5] = defaultValue(column1Row2, 0.0);\r\n        this[6] = defaultValue(column2Row0, 0.0);\r\n        this[7] = defaultValue(column2Row1, 0.0);\r\n        this[8] = defaultValue(column2Row2, 0.0);\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Matrix3.packedLength = 9;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Matrix3} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Matrix3.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value[0];\r\n        array[startingIndex++] = value[1];\r\n        array[startingIndex++] = value[2];\r\n        array[startingIndex++] = value[3];\r\n        array[startingIndex++] = value[4];\r\n        array[startingIndex++] = value[5];\r\n        array[startingIndex++] = value[6];\r\n        array[startingIndex++] = value[7];\r\n        array[startingIndex++] = value[8];\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Matrix3} [result] The object into which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        result[0] = array[startingIndex++];\r\n        result[1] = array[startingIndex++];\r\n        result[2] = array[startingIndex++];\r\n        result[3] = array[startingIndex++];\r\n        result[4] = array[startingIndex++];\r\n        result[5] = array[startingIndex++];\r\n        result[6] = array[startingIndex++];\r\n        result[7] = array[startingIndex++];\r\n        result[8] = array[startingIndex++];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Matrix3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to duplicate.\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided. (Returns undefined if matrix is undefined)\r\n     */\r\n    Matrix3.clone = function(matrix, result) {\r\n        if (!defined(matrix)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Matrix3(matrix[0], matrix[3], matrix[6],\r\n                               matrix[1], matrix[4], matrix[7],\r\n                               matrix[2], matrix[5], matrix[8]);\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 from 9 consecutive elements in an array.\r\n     *\r\n     * @param {Number[]} array The array whose 9 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create the Matrix3:\r\n     * // [1.0, 2.0, 3.0]\r\n     * // [1.0, 2.0, 3.0]\r\n     * // [1.0, 2.0, 3.0]\r\n     *\r\n     * var v = [1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0];\r\n     * var m = Cesium.Matrix3.fromArray(v);\r\n     *\r\n     * // Create same Matrix3 with using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0];\r\n     * var m2 = Cesium.Matrix3.fromArray(v2, 2);\r\n     */\r\n    Matrix3.fromArray = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        result[0] = array[startingIndex];\r\n        result[1] = array[startingIndex + 1];\r\n        result[2] = array[startingIndex + 2];\r\n        result[3] = array[startingIndex + 3];\r\n        result[4] = array[startingIndex + 4];\r\n        result[5] = array[startingIndex + 5];\r\n        result[6] = array[startingIndex + 6];\r\n        result[7] = array[startingIndex + 7];\r\n        result[8] = array[startingIndex + 8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 instance from a column-major order array.\r\n     *\r\n     * @param {Number[]} values The column-major order array.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.fromColumnMajorArray = function(values, result) {\r\n        \r\n\r\n        return Matrix3.clone(values, result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 instance from a row-major order array.\r\n     * The resulting matrix will be in column-major order.\r\n     *\r\n     * @param {Number[]} values The row-major order array.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.fromRowMajorArray = function(values, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(values[0], values[1], values[2],\r\n                               values[3], values[4], values[5],\r\n                               values[6], values[7], values[8]);\r\n        }\r\n        result[0] = values[0];\r\n        result[1] = values[3];\r\n        result[2] = values[6];\r\n        result[3] = values[1];\r\n        result[4] = values[4];\r\n        result[5] = values[7];\r\n        result[6] = values[2];\r\n        result[7] = values[5];\r\n        result[8] = values[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a 3x3 rotation matrix from the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion the quaternion to use.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The 3x3 rotation matrix from this quaternion.\r\n     */\r\n    Matrix3.fromQuaternion = function(quaternion, result) {\r\n        \r\n\r\n        var x2 = quaternion.x * quaternion.x;\r\n        var xy = quaternion.x * quaternion.y;\r\n        var xz = quaternion.x * quaternion.z;\r\n        var xw = quaternion.x * quaternion.w;\r\n        var y2 = quaternion.y * quaternion.y;\r\n        var yz = quaternion.y * quaternion.z;\r\n        var yw = quaternion.y * quaternion.w;\r\n        var z2 = quaternion.z * quaternion.z;\r\n        var zw = quaternion.z * quaternion.w;\r\n        var w2 = quaternion.w * quaternion.w;\r\n\r\n        var m00 = x2 - y2 - z2 + w2;\r\n        var m01 = 2.0 * (xy - zw);\r\n        var m02 = 2.0 * (xz + yw);\r\n\r\n        var m10 = 2.0 * (xy + zw);\r\n        var m11 = -x2 + y2 - z2 + w2;\r\n        var m12 = 2.0 * (yz - xw);\r\n\r\n        var m20 = 2.0 * (xz - yw);\r\n        var m21 = 2.0 * (yz + xw);\r\n        var m22 = -x2 - y2 + z2 + w2;\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(m00, m01, m02,\r\n                               m10, m11, m12,\r\n                               m20, m21, m22);\r\n        }\r\n        result[0] = m00;\r\n        result[1] = m10;\r\n        result[2] = m20;\r\n        result[3] = m01;\r\n        result[4] = m11;\r\n        result[5] = m21;\r\n        result[6] = m02;\r\n        result[7] = m12;\r\n        result[8] = m22;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a 3x3 rotation matrix from the provided headingPitchRoll. (see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles )\r\n     *\r\n     * @param {HeadingPitchRoll} headingPitchRoll the headingPitchRoll to use.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The 3x3 rotation matrix from this headingPitchRoll.\r\n     */\r\n    Matrix3.fromHeadingPitchRoll = function(headingPitchRoll, result) {\r\n        \r\n\r\n        var cosTheta = Math.cos(-headingPitchRoll.pitch);\r\n        var cosPsi = Math.cos(-headingPitchRoll.heading);\r\n        var cosPhi = Math.cos(headingPitchRoll.roll);\r\n        var sinTheta = Math.sin(-headingPitchRoll.pitch);\r\n        var sinPsi = Math.sin(-headingPitchRoll.heading);\r\n        var sinPhi = Math.sin(headingPitchRoll.roll);\r\n\r\n        var m00 = cosTheta * cosPsi;\r\n        var m01 = -cosPhi * sinPsi + sinPhi * sinTheta * cosPsi;\r\n        var m02 = sinPhi * sinPsi + cosPhi * sinTheta * cosPsi;\r\n\r\n        var m10 = cosTheta * sinPsi;\r\n        var m11 = cosPhi * cosPsi + sinPhi * sinTheta * sinPsi;\r\n        var m12 = -sinPhi * cosPsi + cosPhi * sinTheta * sinPsi;\r\n\r\n        var m20 = -sinTheta;\r\n        var m21 = sinPhi * cosTheta;\r\n        var m22 = cosPhi * cosTheta;\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(m00, m01, m02,\r\n                m10, m11, m12,\r\n                m20, m21, m22);\r\n        }\r\n        result[0] = m00;\r\n        result[1] = m10;\r\n        result[2] = m20;\r\n        result[3] = m01;\r\n        result[4] = m11;\r\n        result[5] = m21;\r\n        result[6] = m02;\r\n        result[7] = m12;\r\n        result[8] = m22;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing a non-uniform scale.\r\n     *\r\n     * @param {Cartesian3} scale The x, y, and z scale factors.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [7.0, 0.0, 0.0]\r\n     * //   [0.0, 8.0, 0.0]\r\n     * //   [0.0, 0.0, 9.0]\r\n     * var m = Cesium.Matrix3.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix3.fromScale = function(scale, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                scale.x, 0.0,     0.0,\r\n                0.0,     scale.y, 0.0,\r\n                0.0,     0.0,     scale.z);\r\n        }\r\n\r\n        result[0] = scale.x;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = scale.y;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = scale.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing a uniform scale.\r\n     *\r\n     * @param {Number} scale The uniform scale factor.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [2.0, 0.0, 0.0]\r\n     * //   [0.0, 2.0, 0.0]\r\n     * //   [0.0, 0.0, 2.0]\r\n     * var m = Cesium.Matrix3.fromUniformScale(2.0);\r\n     */\r\n    Matrix3.fromUniformScale = function(scale, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                scale, 0.0,   0.0,\r\n                0.0,   scale, 0.0,\r\n                0.0,   0.0,   scale);\r\n        }\r\n\r\n        result[0] = scale;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = scale;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = scale;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing the cross product equivalent matrix of a Cartesian3 vector.\r\n     *\r\n     * @param {Cartesian3} vector the vector on the left hand side of the cross product operation.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [0.0, -9.0,  8.0]\r\n     * //   [9.0,  0.0, -7.0]\r\n     * //   [-8.0, 7.0,  0.0]\r\n     * var m = Cesium.Matrix3.fromCrossProduct(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix3.fromCrossProduct = function(vector, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                      0.0, -vector.z,  vector.y,\r\n                 vector.z,       0.0, -vector.x,\r\n                -vector.y,  vector.x,       0.0);\r\n        }\r\n\r\n        result[0] = 0.0;\r\n        result[1] = vector.z;\r\n        result[2] = -vector.y;\r\n        result[3] = -vector.z;\r\n        result[4] = 0.0;\r\n        result[5] = vector.x;\r\n        result[6] = vector.y;\r\n        result[7] = -vector.x;\r\n        result[8] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the x-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the x-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationX(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationX = function(angle, result) {\r\n        \r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                1.0, 0.0, 0.0,\r\n                0.0, cosAngle, -sinAngle,\r\n                0.0, sinAngle, cosAngle);\r\n        }\r\n\r\n        result[0] = 1.0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = cosAngle;\r\n        result[5] = sinAngle;\r\n        result[6] = 0.0;\r\n        result[7] = -sinAngle;\r\n        result[8] = cosAngle;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the y-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the y-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationY(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationY = function(angle, result) {\r\n        \r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                cosAngle, 0.0, sinAngle,\r\n                0.0, 1.0, 0.0,\r\n                -sinAngle, 0.0, cosAngle);\r\n        }\r\n\r\n        result[0] = cosAngle;\r\n        result[1] = 0.0;\r\n        result[2] = -sinAngle;\r\n        result[3] = 0.0;\r\n        result[4] = 1.0;\r\n        result[5] = 0.0;\r\n        result[6] = sinAngle;\r\n        result[7] = 0.0;\r\n        result[8] = cosAngle;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the z-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the z-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationZ(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationZ = function(angle, result) {\r\n        \r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                cosAngle, -sinAngle, 0.0,\r\n                sinAngle, cosAngle, 0.0,\r\n                0.0, 0.0, 1.0);\r\n        }\r\n\r\n        result[0] = cosAngle;\r\n        result[1] = sinAngle;\r\n        result[2] = 0.0;\r\n        result[3] = -sinAngle;\r\n        result[4] = cosAngle;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 1.0;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates an Array from the provided Matrix3 instance.\r\n     * The array will be in column-major order.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use..\r\n     * @param {Number[]} [result] The Array onto which to store the result.\r\n     * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\r\n     */\r\n    Matrix3.toArray = function(matrix, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5], matrix[6], matrix[7], matrix[8]];\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the array index of the element at the provided row and column.\r\n     *\r\n     * @param {Number} row The zero-based index of the row.\r\n     * @param {Number} column The zero-based index of the column.\r\n     * @returns {Number} The index of the element at the provided row and column.\r\n     *\r\n     * @exception {DeveloperError} row must be 0, 1, or 2.\r\n     * @exception {DeveloperError} column must be 0, 1, or 2.\r\n     *\r\n     * @example\r\n     * var myMatrix = new Cesium.Matrix3();\r\n     * var column1Row0Index = Cesium.Matrix3.getElementIndex(1, 0);\r\n     * var column1Row0 = myMatrix[column1Row0Index]\r\n     * myMatrix[column1Row0Index] = 10.0;\r\n     */\r\n    Matrix3.getElementIndex = function(column, row) {\r\n        \r\n\r\n        return column * 3 + row;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix column at the provided index as a Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to retrieve.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.getColumn = function(matrix, index, result) {\r\n        \r\n\r\n        var startIndex = index * 3;\r\n        var x = matrix[startIndex];\r\n        var y = matrix[startIndex + 1];\r\n        var z = matrix[startIndex + 2];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to set.\r\n     * @param {Cartesian3} cartesian The Cartesian whose values will be assigned to the specified column.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.setColumn = function(matrix, index, cartesian, result) {\r\n        \r\n\r\n        result = Matrix3.clone(matrix, result);\r\n        var startIndex = index * 3;\r\n        result[startIndex] = cartesian.x;\r\n        result[startIndex + 1] = cartesian.y;\r\n        result[startIndex + 2] = cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix row at the provided index as a Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to retrieve.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.getRow = function(matrix, index, result) {\r\n        \r\n\r\n        var x = matrix[index];\r\n        var y = matrix[index + 3];\r\n        var z = matrix[index + 6];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to set.\r\n     * @param {Cartesian3} cartesian The Cartesian whose values will be assigned to the specified row.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.setRow = function(matrix, index, cartesian, result) {\r\n        \r\n\r\n        result = Matrix3.clone(matrix, result);\r\n        result[index] = cartesian.x;\r\n        result[index + 3] = cartesian.y;\r\n        result[index + 6] = cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    var scratchColumn = new Cartesian3();\r\n\r\n    /**\r\n     * Extracts the non-uniform scale assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix3.getScale = function(matrix, result) {\r\n        \r\n\r\n        result.x = Cartesian3.magnitude(Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));\r\n        result.y = Cartesian3.magnitude(Cartesian3.fromElements(matrix[3], matrix[4], matrix[5], scratchColumn));\r\n        result.z = Cartesian3.magnitude(Cartesian3.fromElements(matrix[6], matrix[7], matrix[8], scratchColumn));\r\n        return result;\r\n    };\r\n\r\n    var scratchScale = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the maximum scale assuming the matrix is an affine transformation.\r\n     * The maximum scale is the maximum length of the column vectors.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @returns {Number} The maximum scale.\r\n     */\r\n    Matrix3.getMaximumScale = function(matrix) {\r\n        Matrix3.getScale(matrix, scratchScale);\r\n        return Cartesian3.maximumComponent(scratchScale);\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.multiply = function(left, right, result) {\r\n        \r\n\r\n        var column0Row0 = left[0] * right[0] + left[3] * right[1] + left[6] * right[2];\r\n        var column0Row1 = left[1] * right[0] + left[4] * right[1] + left[7] * right[2];\r\n        var column0Row2 = left[2] * right[0] + left[5] * right[1] + left[8] * right[2];\r\n\r\n        var column1Row0 = left[0] * right[3] + left[3] * right[4] + left[6] * right[5];\r\n        var column1Row1 = left[1] * right[3] + left[4] * right[4] + left[7] * right[5];\r\n        var column1Row2 = left[2] * right[3] + left[5] * right[4] + left[8] * right[5];\r\n\r\n        var column2Row0 = left[0] * right[6] + left[3] * right[7] + left[6] * right[8];\r\n        var column2Row1 = left[1] * right[6] + left[4] * right[7] + left[7] * right[8];\r\n        var column2Row2 = left[2] * right[6] + left[5] * right[7] + left[8] * right[8];\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column1Row0;\r\n        result[4] = column1Row1;\r\n        result[5] = column1Row2;\r\n        result[6] = column2Row0;\r\n        result[7] = column2Row1;\r\n        result[8] = column2Row2;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the sum of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.add = function(left, right, result) {\r\n        \r\n\r\n        result[0] = left[0] + right[0];\r\n        result[1] = left[1] + right[1];\r\n        result[2] = left[2] + right[2];\r\n        result[3] = left[3] + right[3];\r\n        result[4] = left[4] + right[4];\r\n        result[5] = left[5] + right[5];\r\n        result[6] = left[6] + right[6];\r\n        result[7] = left[7] + right[7];\r\n        result[8] = left[8] + right[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the difference of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.subtract = function(left, right, result) {\r\n        \r\n\r\n        result[0] = left[0] - right[0];\r\n        result[1] = left[1] - right[1];\r\n        result[2] = left[2] - right[2];\r\n        result[3] = left[3] - right[3];\r\n        result[4] = left[4] - right[4];\r\n        result[5] = left[5] - right[5];\r\n        result[6] = left[6] - right[6];\r\n        result[7] = left[7] - right[7];\r\n        result[8] = left[8] - right[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a column vector.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The column.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix3.multiplyByVector = function(matrix, cartesian, result) {\r\n        \r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[3] * vY + matrix[6] * vZ;\r\n        var y = matrix[1] * vX + matrix[4] * vY + matrix[7] * vZ;\r\n        var z = matrix[2] * vX + matrix[5] * vY + matrix[8] * vZ;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a scalar.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Number} scalar The number to multiply by.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.multiplyByScalar = function(matrix, scalar, result) {\r\n        \r\n\r\n        result[0] = matrix[0] * scalar;\r\n        result[1] = matrix[1] * scalar;\r\n        result[2] = matrix[2] * scalar;\r\n        result[3] = matrix[3] * scalar;\r\n        result[4] = matrix[4] * scalar;\r\n        result[5] = matrix[5] * scalar;\r\n        result[6] = matrix[6] * scalar;\r\n        result[7] = matrix[7] * scalar;\r\n        result[8] = matrix[8] * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix times a (non-uniform) scale, as if the scale were a scale matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix on the left-hand side.\r\n     * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix3.multiply(m, Cesium.Matrix3.fromScale(scale), m);\r\n     * Cesium.Matrix3.multiplyByScale(m, scale, m);\r\n     *\r\n     * @see Matrix3.fromScale\r\n     * @see Matrix3.multiplyByUniformScale\r\n     */\r\n    Matrix3.multiplyByScale = function(matrix, scale, result) {\r\n        \r\n\r\n        result[0] = matrix[0] * scale.x;\r\n        result[1] = matrix[1] * scale.x;\r\n        result[2] = matrix[2] * scale.x;\r\n        result[3] = matrix[3] * scale.y;\r\n        result[4] = matrix[4] * scale.y;\r\n        result[5] = matrix[5] * scale.y;\r\n        result[6] = matrix[6] * scale.z;\r\n        result[7] = matrix[7] * scale.z;\r\n        result[8] = matrix[8] * scale.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a negated copy of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to negate.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.negate = function(matrix, result) {\r\n        \r\n\r\n        result[0] = -matrix[0];\r\n        result[1] = -matrix[1];\r\n        result[2] = -matrix[2];\r\n        result[3] = -matrix[3];\r\n        result[4] = -matrix[4];\r\n        result[5] = -matrix[5];\r\n        result[6] = -matrix[6];\r\n        result[7] = -matrix[7];\r\n        result[8] = -matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the transpose of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to transpose.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.transpose = function(matrix, result) {\r\n        \r\n\r\n        var column0Row0 = matrix[0];\r\n        var column0Row1 = matrix[3];\r\n        var column0Row2 = matrix[6];\r\n        var column1Row0 = matrix[1];\r\n        var column1Row1 = matrix[4];\r\n        var column1Row2 = matrix[7];\r\n        var column2Row0 = matrix[2];\r\n        var column2Row1 = matrix[5];\r\n        var column2Row2 = matrix[8];\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column1Row0;\r\n        result[4] = column1Row1;\r\n        result[5] = column1Row2;\r\n        result[6] = column2Row0;\r\n        result[7] = column2Row1;\r\n        result[8] = column2Row2;\r\n        return result;\r\n    };\r\n\r\n    function computeFrobeniusNorm(matrix) {\r\n        var norm = 0.0;\r\n        for (var i = 0; i < 9; ++i) {\r\n            var temp = matrix[i];\r\n            norm += temp * temp;\r\n        }\r\n\r\n        return Math.sqrt(norm);\r\n    }\r\n\r\n    var rowVal = [1, 0, 0];\r\n    var colVal = [2, 2, 1];\r\n\r\n    function offDiagonalFrobeniusNorm(matrix) {\r\n        // Computes the \"off-diagonal\" Frobenius norm.\r\n        // Assumes matrix is symmetric.\r\n\r\n        var norm = 0.0;\r\n        for (var i = 0; i < 3; ++i) {\r\n            var temp = matrix[Matrix3.getElementIndex(colVal[i], rowVal[i])];\r\n            norm += 2.0 * temp * temp;\r\n        }\r\n\r\n        return Math.sqrt(norm);\r\n    }\r\n\r\n    function shurDecomposition(matrix, result) {\r\n        // This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,\r\n        // section 8.4.2 The 2by2 Symmetric Schur Decomposition.\r\n        //\r\n        // The routine takes a matrix, which is assumed to be symmetric, and\r\n        // finds the largest off-diagonal term, and then creates\r\n        // a matrix (result) which can be used to help reduce it\r\n\r\n        var tolerance = CesiumMath.EPSILON15;\r\n\r\n        var maxDiagonal = 0.0;\r\n        var rotAxis = 1;\r\n\r\n        // find pivot (rotAxis) based on max diagonal of matrix\r\n        for (var i = 0; i < 3; ++i) {\r\n            var temp = Math.abs(matrix[Matrix3.getElementIndex(colVal[i], rowVal[i])]);\r\n            if (temp > maxDiagonal) {\r\n                rotAxis = i;\r\n                maxDiagonal = temp;\r\n            }\r\n        }\r\n\r\n        var c = 1.0;\r\n        var s = 0.0;\r\n\r\n        var p = rowVal[rotAxis];\r\n        var q = colVal[rotAxis];\r\n\r\n        if (Math.abs(matrix[Matrix3.getElementIndex(q, p)]) > tolerance) {\r\n            var qq = matrix[Matrix3.getElementIndex(q, q)];\r\n            var pp = matrix[Matrix3.getElementIndex(p, p)];\r\n            var qp = matrix[Matrix3.getElementIndex(q, p)];\r\n\r\n            var tau = (qq - pp) / 2.0 / qp;\r\n            var t;\r\n\r\n            if (tau < 0.0) {\r\n                t = -1.0 / (-tau + Math.sqrt(1.0 + tau * tau));\r\n            } else {\r\n                t = 1.0 / (tau + Math.sqrt(1.0 + tau * tau));\r\n            }\r\n\r\n            c = 1.0 / Math.sqrt(1.0 + t * t);\r\n            s = t * c;\r\n        }\r\n\r\n        result = Matrix3.clone(Matrix3.IDENTITY, result);\r\n\r\n        result[Matrix3.getElementIndex(p, p)] = result[Matrix3.getElementIndex(q, q)] = c;\r\n        result[Matrix3.getElementIndex(q, p)] = s;\r\n        result[Matrix3.getElementIndex(p, q)] = -s;\r\n\r\n        return result;\r\n    }\r\n\r\n    var jMatrix = new Matrix3();\r\n    var jMatrixTranspose = new Matrix3();\r\n\r\n    /**\r\n     * Computes the eigenvectors and eigenvalues of a symmetric matrix.\r\n     * <p>\r\n     * Returns a diagonal matrix and unitary matrix such that:\r\n     * <code>matrix = unitary matrix * diagonal matrix * transpose(unitary matrix)</code>\r\n     * </p>\r\n     * <p>\r\n     * The values along the diagonal of the diagonal matrix are the eigenvalues. The columns\r\n     * of the unitary matrix are the corresponding eigenvectors.\r\n     * </p>\r\n     *\r\n     * @param {Matrix3} matrix The matrix to decompose into diagonal and unitary matrix. Expected to be symmetric.\r\n     * @param {Object} [result] An object with unitary and diagonal properties which are matrices onto which to store the result.\r\n     * @returns {Object} An object with unitary and diagonal properties which are the unitary and diagonal matrices, respectively.\r\n     *\r\n     * @example\r\n     * var a = //... symetric matrix\r\n     * var result = {\r\n     *     unitary : new Cesium.Matrix3(),\r\n     *     diagonal : new Cesium.Matrix3()\r\n     * };\r\n     * Cesium.Matrix3.computeEigenDecomposition(a, result);\r\n     *\r\n     * var unitaryTranspose = Cesium.Matrix3.transpose(result.unitary, new Cesium.Matrix3());\r\n     * var b = Cesium.Matrix3.multiply(result.unitary, result.diagonal, new Cesium.Matrix3());\r\n     * Cesium.Matrix3.multiply(b, unitaryTranspose, b); // b is now equal to a\r\n     *\r\n     * var lambda = Cesium.Matrix3.getColumn(result.diagonal, 0, new Cesium.Cartesian3()).x;  // first eigenvalue\r\n     * var v = Cesium.Matrix3.getColumn(result.unitary, 0, new Cesium.Cartesian3());          // first eigenvector\r\n     * var c = Cesium.Cartesian3.multiplyByScalar(v, lambda, new Cesium.Cartesian3());        // equal to Cesium.Matrix3.multiplyByVector(a, v)\r\n     */\r\n    Matrix3.computeEigenDecomposition = function(matrix, result) {\r\n        \r\n\r\n        // This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,\r\n        // section 8.4.3 The Classical Jacobi Algorithm\r\n\r\n        var tolerance = CesiumMath.EPSILON20;\r\n        var maxSweeps = 10;\r\n\r\n        var count = 0;\r\n        var sweep = 0;\r\n\r\n        if (!defined(result)) {\r\n            result = {};\r\n        }\r\n\r\n        var unitaryMatrix = result.unitary = Matrix3.clone(Matrix3.IDENTITY, result.unitary);\r\n        var diagMatrix = result.diagonal = Matrix3.clone(matrix, result.diagonal);\r\n\r\n        var epsilon = tolerance * computeFrobeniusNorm(diagMatrix);\r\n\r\n        while (sweep < maxSweeps && offDiagonalFrobeniusNorm(diagMatrix) > epsilon) {\r\n            shurDecomposition(diagMatrix, jMatrix);\r\n            Matrix3.transpose(jMatrix, jMatrixTranspose);\r\n            Matrix3.multiply(diagMatrix, jMatrix, diagMatrix);\r\n            Matrix3.multiply(jMatrixTranspose, diagMatrix, diagMatrix);\r\n            Matrix3.multiply(unitaryMatrix, jMatrix, unitaryMatrix);\r\n\r\n            if (++count > 2) {\r\n                ++sweep;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\r\n     *\r\n     * @param {Matrix3} matrix The matrix with signed elements.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.abs = function(matrix, result) {\r\n        \r\n\r\n        result[0] = Math.abs(matrix[0]);\r\n        result[1] = Math.abs(matrix[1]);\r\n        result[2] = Math.abs(matrix[2]);\r\n        result[3] = Math.abs(matrix[3]);\r\n        result[4] = Math.abs(matrix[4]);\r\n        result[5] = Math.abs(matrix[5]);\r\n        result[6] = Math.abs(matrix[6]);\r\n        result[7] = Math.abs(matrix[7]);\r\n        result[8] = Math.abs(matrix[8]);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the determinant of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @returns {Number} The value of the determinant of the matrix.\r\n     */\r\n    Matrix3.determinant = function(matrix) {\r\n        \r\n\r\n        var m11 = matrix[0];\r\n        var m21 = matrix[3];\r\n        var m31 = matrix[6];\r\n        var m12 = matrix[1];\r\n        var m22 = matrix[4];\r\n        var m32 = matrix[7];\r\n        var m13 = matrix[2];\r\n        var m23 = matrix[5];\r\n        var m33 = matrix[8];\r\n\r\n        return m11 * (m22 * m33 - m23 * m32) + m12 * (m23 * m31 - m21 * m33) + m13 * (m21 * m32 - m22 * m31);\r\n    };\r\n\r\n    /**\r\n     * Computes the inverse of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to invert.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} matrix is not invertible.\r\n     */\r\n    Matrix3.inverse = function(matrix, result) {\r\n        \r\n\r\n        var m11 = matrix[0];\r\n        var m21 = matrix[1];\r\n        var m31 = matrix[2];\r\n        var m12 = matrix[3];\r\n        var m22 = matrix[4];\r\n        var m32 = matrix[5];\r\n        var m13 = matrix[6];\r\n        var m23 = matrix[7];\r\n        var m33 = matrix[8];\r\n\r\n        var determinant = Matrix3.determinant(matrix);\r\n\r\n        \r\n\r\n        result[0] = m22 * m33 - m23 * m32;\r\n        result[1] = m23 * m31 - m21 * m33;\r\n        result[2] = m21 * m32 - m22 * m31;\r\n        result[3] = m13 * m32 - m12 * m33;\r\n        result[4] = m11 * m33 - m13 * m31;\r\n        result[5] = m12 * m31 - m11 * m32;\r\n        result[6] = m12 * m23 - m13 * m22;\r\n        result[7] = m13 * m21 - m11 * m23;\r\n        result[8] = m11 * m22 - m12 * m21;\r\n\r\n       var scale = 1.0 / determinant;\r\n       return Matrix3.multiplyByScalar(result, scale, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [left] The first matrix.\r\n     * @param {Matrix3} [right] The second matrix.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.equals = function(left, right) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                left[0] === right[0] &&\r\n                left[1] === right[1] &&\r\n                left[2] === right[2] &&\r\n                left[3] === right[3] &&\r\n                left[4] === right[4] &&\r\n                left[5] === right[5] &&\r\n                left[6] === right[6] &&\r\n                left[7] === right[7] &&\r\n                left[8] === right[8]);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [left] The first matrix.\r\n     * @param {Matrix3} [right] The second matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.equalsEpsilon = function(left, right, epsilon) {\r\n        \r\n\r\n        return (left === right) ||\r\n                (defined(left) &&\r\n                defined(right) &&\r\n                Math.abs(left[0] - right[0]) <= epsilon &&\r\n                Math.abs(left[1] - right[1]) <= epsilon &&\r\n                Math.abs(left[2] - right[2]) <= epsilon &&\r\n                Math.abs(left[3] - right[3]) <= epsilon &&\r\n                Math.abs(left[4] - right[4]) <= epsilon &&\r\n                Math.abs(left[5] - right[5]) <= epsilon &&\r\n                Math.abs(left[6] - right[6]) <= epsilon &&\r\n                Math.abs(left[7] - right[7]) <= epsilon &&\r\n                Math.abs(left[8] - right[8]) <= epsilon);\r\n    };\r\n\r\n    /**\r\n     * An immutable Matrix3 instance initialized to the identity matrix.\r\n     *\r\n     * @type {Matrix3}\r\n     * @constant\r\n     */\r\n    Matrix3.IDENTITY = freezeObject(new Matrix3(1.0, 0.0, 0.0,\r\n                                                0.0, 1.0, 0.0,\r\n                                                0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * An immutable Matrix3 instance initialized to the zero matrix.\r\n     *\r\n     * @type {Matrix3}\r\n     * @constant\r\n     */\r\n    Matrix3.ZERO = freezeObject(new Matrix3(0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW0 = 0;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW1 = 1;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW2 = 2;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW0 = 3;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW1 = 4;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW2 = 5;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW0 = 6;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW1 = 7;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW2 = 8;\r\n\r\n    defineProperties(Matrix3.prototype, {\r\n        /**\r\n         * Gets the number of items in the collection.\r\n         * @memberof Matrix3.prototype\r\n         *\r\n         * @type {Number}\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return Matrix3.packedLength;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates the provided Matrix3 instance.\r\n     *\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.prototype.clone = function(result) {\r\n        return Matrix3.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [right] The right hand side matrix.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.prototype.equals = function(right) {\r\n        return Matrix3.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Matrix3.equalsArray = function(matrix, array, offset) {\r\n        return matrix[0] === array[offset] &&\r\n               matrix[1] === array[offset + 1] &&\r\n               matrix[2] === array[offset + 2] &&\r\n               matrix[3] === array[offset + 3] &&\r\n               matrix[4] === array[offset + 4] &&\r\n               matrix[5] === array[offset + 5] &&\r\n               matrix[6] === array[offset + 6] &&\r\n               matrix[7] === array[offset + 7] &&\r\n               matrix[8] === array[offset + 8];\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [right] The right hand side matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Matrix3.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Matrix with each row being\r\n     * on a separate line and in the format '(column0, column1, column2)'.\r\n     *\r\n     * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2)'.\r\n     */\r\n    Matrix3.prototype.toString = function() {\r\n        return '(' + this[0] + ', ' + this[3] + ', ' + this[6] + ')\\n' +\r\n               '(' + this[1] + ', ' + this[4] + ', ' + this[7] + ')\\n' +\r\n               '(' + this[2] + ', ' + this[5] + ', ' + this[8] + ')';\r\n    };\r\n\r\n    return Matrix3;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Matrix3.js\n// module id = 19\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './freezeObject',\r\n        './Math',\r\n        './Matrix3',\r\n        './RuntimeError'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartesian4,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        freezeObject,\r\n        CesiumMath,\r\n        Matrix3,\r\n        RuntimeError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A 4x4 matrix, indexable as a column-major order array.\r\n     * Constructor parameters are in row-major order for code readability.\r\n     * @alias Matrix4\r\n     * @constructor\r\n     *\r\n     * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\r\n     * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\r\n     * @param {Number} [column2Row0=0.0] The value for column 2, row 0.\r\n     * @param {Number} [column3Row0=0.0] The value for column 3, row 0.\r\n     * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\r\n     * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\r\n     * @param {Number} [column2Row1=0.0] The value for column 2, row 1.\r\n     * @param {Number} [column3Row1=0.0] The value for column 3, row 1.\r\n     * @param {Number} [column0Row2=0.0] The value for column 0, row 2.\r\n     * @param {Number} [column1Row2=0.0] The value for column 1, row 2.\r\n     * @param {Number} [column2Row2=0.0] The value for column 2, row 2.\r\n     * @param {Number} [column3Row2=0.0] The value for column 3, row 2.\r\n     * @param {Number} [column0Row3=0.0] The value for column 0, row 3.\r\n     * @param {Number} [column1Row3=0.0] The value for column 1, row 3.\r\n     * @param {Number} [column2Row3=0.0] The value for column 2, row 3.\r\n     * @param {Number} [column3Row3=0.0] The value for column 3, row 3.\r\n     *\r\n     * @see Matrix4.fromColumnMajorArray\r\n     * @see Matrix4.fromRowMajorArray\r\n     * @see Matrix4.fromRotationTranslation\r\n     * @see Matrix4.fromTranslationRotationScale\r\n     * @see Matrix4.fromTranslationQuaternionRotationScale\r\n     * @see Matrix4.fromTranslation\r\n     * @see Matrix4.fromScale\r\n     * @see Matrix4.fromUniformScale\r\n     * @see Matrix4.fromCamera\r\n     * @see Matrix4.computePerspectiveFieldOfView\r\n     * @see Matrix4.computeOrthographicOffCenter\r\n     * @see Matrix4.computePerspectiveOffCenter\r\n     * @see Matrix4.computeInfinitePerspectiveOffCenter\r\n     * @see Matrix4.computeViewportTransformation\r\n     * @see Matrix4.computeView\r\n     * @see Matrix2\r\n     * @see Matrix3\r\n     * @see Packable\r\n     */\r\n    function Matrix4(column0Row0, column1Row0, column2Row0, column3Row0,\r\n                           column0Row1, column1Row1, column2Row1, column3Row1,\r\n                           column0Row2, column1Row2, column2Row2, column3Row2,\r\n                           column0Row3, column1Row3, column2Row3, column3Row3) {\r\n        this[0] = defaultValue(column0Row0, 0.0);\r\n        this[1] = defaultValue(column0Row1, 0.0);\r\n        this[2] = defaultValue(column0Row2, 0.0);\r\n        this[3] = defaultValue(column0Row3, 0.0);\r\n        this[4] = defaultValue(column1Row0, 0.0);\r\n        this[5] = defaultValue(column1Row1, 0.0);\r\n        this[6] = defaultValue(column1Row2, 0.0);\r\n        this[7] = defaultValue(column1Row3, 0.0);\r\n        this[8] = defaultValue(column2Row0, 0.0);\r\n        this[9] = defaultValue(column2Row1, 0.0);\r\n        this[10] = defaultValue(column2Row2, 0.0);\r\n        this[11] = defaultValue(column2Row3, 0.0);\r\n        this[12] = defaultValue(column3Row0, 0.0);\r\n        this[13] = defaultValue(column3Row1, 0.0);\r\n        this[14] = defaultValue(column3Row2, 0.0);\r\n        this[15] = defaultValue(column3Row3, 0.0);\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Matrix4.packedLength = 16;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Matrix4} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Matrix4.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value[0];\r\n        array[startingIndex++] = value[1];\r\n        array[startingIndex++] = value[2];\r\n        array[startingIndex++] = value[3];\r\n        array[startingIndex++] = value[4];\r\n        array[startingIndex++] = value[5];\r\n        array[startingIndex++] = value[6];\r\n        array[startingIndex++] = value[7];\r\n        array[startingIndex++] = value[8];\r\n        array[startingIndex++] = value[9];\r\n        array[startingIndex++] = value[10];\r\n        array[startingIndex++] = value[11];\r\n        array[startingIndex++] = value[12];\r\n        array[startingIndex++] = value[13];\r\n        array[startingIndex++] = value[14];\r\n        array[startingIndex] = value[15];\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Matrix4} [result] The object into which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix4();\r\n        }\r\n\r\n        result[0] = array[startingIndex++];\r\n        result[1] = array[startingIndex++];\r\n        result[2] = array[startingIndex++];\r\n        result[3] = array[startingIndex++];\r\n        result[4] = array[startingIndex++];\r\n        result[5] = array[startingIndex++];\r\n        result[6] = array[startingIndex++];\r\n        result[7] = array[startingIndex++];\r\n        result[8] = array[startingIndex++];\r\n        result[9] = array[startingIndex++];\r\n        result[10] = array[startingIndex++];\r\n        result[11] = array[startingIndex++];\r\n        result[12] = array[startingIndex++];\r\n        result[13] = array[startingIndex++];\r\n        result[14] = array[startingIndex++];\r\n        result[15] = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Matrix4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to duplicate.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)\r\n     */\r\n    Matrix4.clone = function(matrix, result) {\r\n        if (!defined(matrix)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Matrix4(matrix[0], matrix[4], matrix[8], matrix[12],\r\n                               matrix[1], matrix[5], matrix[9], matrix[13],\r\n                               matrix[2], matrix[6], matrix[10], matrix[14],\r\n                               matrix[3], matrix[7], matrix[11], matrix[15]);\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 from 16 consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create the Matrix4:\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     *\r\n     * var v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\r\n     * var m = Cesium.Matrix4.fromArray(v);\r\n     *\r\n     * // Create same Matrix4 with using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\r\n     * var m2 = Cesium.Matrix4.fromArray(v2, 2);\r\n     */\r\n    Matrix4.fromArray = Matrix4.unpack;\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a column-major order array.\r\n     *\r\n     * @param {Number[]} values The column-major order array.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromColumnMajorArray = function(values, result) {\r\n        \r\n\r\n        return Matrix4.clone(values, result);\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a row-major order array.\r\n     * The resulting matrix will be in column-major order.\r\n     *\r\n     * @param {Number[]} values The row-major order array.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromRowMajorArray = function(values, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(values[0], values[1], values[2], values[3],\r\n                               values[4], values[5], values[6], values[7],\r\n                               values[8], values[9], values[10], values[11],\r\n                               values[12], values[13], values[14], values[15]);\r\n        }\r\n        result[0] = values[0];\r\n        result[1] = values[4];\r\n        result[2] = values[8];\r\n        result[3] = values[12];\r\n        result[4] = values[1];\r\n        result[5] = values[5];\r\n        result[6] = values[9];\r\n        result[7] = values[13];\r\n        result[8] = values[2];\r\n        result[9] = values[6];\r\n        result[10] = values[10];\r\n        result[11] = values[14];\r\n        result[12] = values[3];\r\n        result[13] = values[7];\r\n        result[14] = values[11];\r\n        result[15] = values[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a Matrix3 representing the rotation\r\n     * and a Cartesian3 representing the translation.\r\n     *\r\n     * @param {Matrix3} rotation The upper left portion of the matrix representing the rotation.\r\n     * @param {Cartesian3} [translation=Cartesian3.ZERO] The upper right portion of the matrix representing the translation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromRotationTranslation = function(rotation, translation, result) {\r\n        \r\n\r\n        translation = defaultValue(translation, Cartesian3.ZERO);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(rotation[0], rotation[3], rotation[6], translation.x,\r\n                               rotation[1], rotation[4], rotation[7], translation.y,\r\n                               rotation[2], rotation[5], rotation[8], translation.z,\r\n                                       0.0,         0.0,         0.0,           1.0);\r\n        }\r\n\r\n        result[0] = rotation[0];\r\n        result[1] = rotation[1];\r\n        result[2] = rotation[2];\r\n        result[3] = 0.0;\r\n        result[4] = rotation[3];\r\n        result[5] = rotation[4];\r\n        result[6] = rotation[5];\r\n        result[7] = 0.0;\r\n        result[8] = rotation[6];\r\n        result[9] = rotation[7];\r\n        result[10] = rotation[8];\r\n        result[11] = 0.0;\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a translation, rotation, and scale (TRS)\r\n     * representation with the rotation represented as a quaternion.\r\n     *\r\n     * @param {Cartesian3} translation The translation transformation.\r\n     * @param {Quaternion} rotation The rotation transformation.\r\n     * @param {Cartesian3} scale The non-uniform scale transformation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * var result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(\r\n     *   new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation\r\n     *   Cesium.Quaternion.IDENTITY,           // rotation\r\n     *   new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale\r\n     *   result);\r\n     */\r\n    Matrix4.fromTranslationQuaternionRotationScale = function(translation, rotation, scale, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix4();\r\n        }\r\n\r\n        var scaleX = scale.x;\r\n        var scaleY = scale.y;\r\n        var scaleZ = scale.z;\r\n\r\n        var x2 = rotation.x * rotation.x;\r\n        var xy = rotation.x * rotation.y;\r\n        var xz = rotation.x * rotation.z;\r\n        var xw = rotation.x * rotation.w;\r\n        var y2 = rotation.y * rotation.y;\r\n        var yz = rotation.y * rotation.z;\r\n        var yw = rotation.y * rotation.w;\r\n        var z2 = rotation.z * rotation.z;\r\n        var zw = rotation.z * rotation.w;\r\n        var w2 = rotation.w * rotation.w;\r\n\r\n        var m00 = x2 - y2 - z2 + w2;\r\n        var m01 = 2.0 * (xy - zw);\r\n        var m02 = 2.0 * (xz + yw);\r\n\r\n        var m10 = 2.0 * (xy + zw);\r\n        var m11 = -x2 + y2 - z2 + w2;\r\n        var m12 = 2.0 * (yz - xw);\r\n\r\n        var m20 = 2.0 * (xz - yw);\r\n        var m21 = 2.0 * (yz + xw);\r\n        var m22 = -x2 - y2 + z2 + w2;\r\n\r\n        result[0]  = m00 * scaleX;\r\n        result[1]  = m10 * scaleX;\r\n        result[2]  = m20 * scaleX;\r\n        result[3]  = 0.0;\r\n        result[4]  = m01 * scaleY;\r\n        result[5]  = m11 * scaleY;\r\n        result[6]  = m21 * scaleY;\r\n        result[7]  = 0.0;\r\n        result[8]  = m02 * scaleZ;\r\n        result[9]  = m12 * scaleZ;\r\n        result[10] = m22 * scaleZ;\r\n        result[11] = 0.0;\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = 1.0;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 instance from a {@link TranslationRotationScale} instance.\r\n     *\r\n     * @param {TranslationRotationScale} translationRotationScale The instance.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromTranslationRotationScale = function(translationRotationScale, result) {\r\n        \r\n\r\n        return Matrix4.fromTranslationQuaternionRotationScale(translationRotationScale.translation, translationRotationScale.rotation, translationRotationScale.scale, result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 instance from a Cartesian3 representing the translation.\r\n     *\r\n     * @param {Cartesian3} translation The upper right portion of the matrix representing the translation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @see Matrix4.multiplyByTranslation\r\n     */\r\n    Matrix4.fromTranslation = function(translation, result) {\r\n        \r\n\r\n        return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing a non-uniform scale.\r\n     *\r\n     * @param {Cartesian3} scale The x, y, and z scale factors.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [7.0, 0.0, 0.0, 0.0]\r\n     * //   [0.0, 8.0, 0.0, 0.0]\r\n     * //   [0.0, 0.0, 9.0, 0.0]\r\n     * //   [0.0, 0.0, 0.0, 1.0]\r\n     * var m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix4.fromScale = function(scale, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(\r\n                scale.x, 0.0,     0.0,     0.0,\r\n                0.0,     scale.y, 0.0,     0.0,\r\n                0.0,     0.0,     scale.z, 0.0,\r\n                0.0,     0.0,     0.0,     1.0);\r\n        }\r\n\r\n        result[0] = scale.x;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = scale.y;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = scale.z;\r\n        result[11] = 0.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = 0.0;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing a uniform scale.\r\n     *\r\n     * @param {Number} scale The uniform scale factor.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [2.0, 0.0, 0.0, 0.0]\r\n     * //   [0.0, 2.0, 0.0, 0.0]\r\n     * //   [0.0, 0.0, 2.0, 0.0]\r\n     * //   [0.0, 0.0, 0.0, 1.0]\r\n     * var m = Cesium.Matrix4.fromUniformScale(2.0);\r\n     */\r\n    Matrix4.fromUniformScale = function(scale, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(scale, 0.0,   0.0,   0.0,\r\n                               0.0,   scale, 0.0,   0.0,\r\n                               0.0,   0.0,   scale, 0.0,\r\n                               0.0,   0.0,   0.0,   1.0);\r\n        }\r\n\r\n        result[0] = scale;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = scale;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = scale;\r\n        result[11] = 0.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = 0.0;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    var fromCameraF = new Cartesian3();\r\n    var fromCameraR = new Cartesian3();\r\n    var fromCameraU = new Cartesian3();\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a Camera.\r\n     *\r\n     * @param {Camera} camera The camera to use.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromCamera = function(camera, result) {\r\n        \r\n\r\n        var position = camera.position;\r\n        var direction = camera.direction;\r\n        var up = camera.up;\r\n\r\n        \r\n\r\n        Cartesian3.normalize(direction, fromCameraF);\r\n        Cartesian3.normalize(Cartesian3.cross(fromCameraF, up, fromCameraR), fromCameraR);\r\n        Cartesian3.normalize(Cartesian3.cross(fromCameraR, fromCameraF, fromCameraU), fromCameraU);\r\n\r\n        var sX = fromCameraR.x;\r\n        var sY = fromCameraR.y;\r\n        var sZ = fromCameraR.z;\r\n        var fX = fromCameraF.x;\r\n        var fY = fromCameraF.y;\r\n        var fZ = fromCameraF.z;\r\n        var uX = fromCameraU.x;\r\n        var uY = fromCameraU.y;\r\n        var uZ = fromCameraU.z;\r\n        var positionX = position.x;\r\n        var positionY = position.y;\r\n        var positionZ = position.z;\r\n        var t0 = sX * -positionX + sY * -positionY+ sZ * -positionZ;\r\n        var t1 = uX * -positionX + uY * -positionY+ uZ * -positionZ;\r\n        var t2 = fX * positionX + fY * positionY + fZ * positionZ;\r\n\r\n        // The code below this comment is an optimized\r\n        // version of the commented lines.\r\n        // Rather that create two matrices and then multiply,\r\n        // we just bake in the multiplcation as part of creation.\r\n        // var rotation = new Matrix4(\r\n        //                 sX,  sY,  sZ, 0.0,\r\n        //                 uX,  uY,  uZ, 0.0,\r\n        //                -fX, -fY, -fZ, 0.0,\r\n        //                 0.0,  0.0,  0.0, 1.0);\r\n        // var translation = new Matrix4(\r\n        //                 1.0, 0.0, 0.0, -position.x,\r\n        //                 0.0, 1.0, 0.0, -position.y,\r\n        //                 0.0, 0.0, 1.0, -position.z,\r\n        //                 0.0, 0.0, 0.0, 1.0);\r\n        // return rotation.multiply(translation);\r\n        if (!defined(result)) {\r\n            return new Matrix4(\r\n                    sX,   sY,  sZ, t0,\r\n                    uX,   uY,  uZ, t1,\r\n                   -fX,  -fY, -fZ, t2,\r\n                    0.0, 0.0, 0.0, 1.0);\r\n        }\r\n        result[0] = sX;\r\n        result[1] = uX;\r\n        result[2] = -fX;\r\n        result[3] = 0.0;\r\n        result[4] = sY;\r\n        result[5] = uY;\r\n        result[6] = -fY;\r\n        result[7] = 0.0;\r\n        result[8] = sZ;\r\n        result[9] = uZ;\r\n        result[10] = -fZ;\r\n        result[11] = 0.0;\r\n        result[12] = t0;\r\n        result[13] = t1;\r\n        result[14] = t2;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n     /**\r\n      * Computes a Matrix4 instance representing a perspective transformation matrix.\r\n      *\r\n      * @param {Number} fovY The field of view along the Y axis in radians.\r\n      * @param {Number} aspectRatio The aspect ratio.\r\n      * @param {Number} near The distance to the near plane in meters.\r\n      * @param {Number} far The distance to the far plane in meters.\r\n      * @param {Matrix4} result The object in which the result will be stored.\r\n      * @returns {Matrix4} The modified result parameter.\r\n      *\r\n      * @exception {DeveloperError} fovY must be in (0, PI].\r\n      * @exception {DeveloperError} aspectRatio must be greater than zero.\r\n      * @exception {DeveloperError} near must be greater than zero.\r\n      * @exception {DeveloperError} far must be greater than zero.\r\n      */\r\n    Matrix4.computePerspectiveFieldOfView = function(fovY, aspectRatio, near, far, result) {\r\n        \r\n\r\n        var bottom = Math.tan(fovY * 0.5);\r\n\r\n        var column1Row1 = 1.0 / bottom;\r\n        var column0Row0 = column1Row1 / aspectRatio;\r\n        var column2Row2 = (far + near) / (near - far);\r\n        var column3Row2 = (2.0 * far * near) / (near - far);\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = column2Row2;\r\n        result[11] = -1.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n    * Computes a Matrix4 instance representing an orthographic transformation matrix.\r\n    *\r\n    * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n    * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n    * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n    * @param {Number} top The number of meters above of the camera that will be in view.\r\n    * @param {Number} near The distance to the near plane in meters.\r\n    * @param {Number} far The distance to the far plane in meters.\r\n    * @param {Matrix4} result The object in which the result will be stored.\r\n    * @returns {Matrix4} The modified result parameter.\r\n    */\r\n    Matrix4.computeOrthographicOffCenter = function(left, right, bottom, top, near, far, result) {\r\n        \r\n\r\n        var a = 1.0 / (right - left);\r\n        var b = 1.0 / (top - bottom);\r\n        var c = 1.0 / (far - near);\r\n\r\n        var tx = -(right + left) * a;\r\n        var ty = -(top + bottom) * b;\r\n        var tz = -(far + near) * c;\r\n        a *= 2.0;\r\n        b *= 2.0;\r\n        c *= -2.0;\r\n\r\n        result[0] = a;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = b;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = c;\r\n        result[11] = 0.0;\r\n        result[12] = tx;\r\n        result[13] = ty;\r\n        result[14] = tz;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing an off center perspective transformation.\r\n     *\r\n     * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n     * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n     * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n     * @param {Number} top The number of meters above of the camera that will be in view.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Number} far The distance to the far plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computePerspectiveOffCenter = function(left, right, bottom, top, near, far, result) {\r\n        \r\n\r\n        var column0Row0 = 2.0 * near / (right - left);\r\n        var column1Row1 = 2.0 * near / (top - bottom);\r\n        var column2Row0 = (right + left) / (right - left);\r\n        var column2Row1 = (top + bottom) / (top - bottom);\r\n        var column2Row2 = -(far + near) / (far - near);\r\n        var column2Row3 = -1.0;\r\n        var column3Row2 = -2.0 * far * near / (far - near);\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing an infinite off center perspective transformation.\r\n     *\r\n     * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n     * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n     * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n     * @param {Number} top The number of meters above of the camera that will be in view.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computeInfinitePerspectiveOffCenter = function(left, right, bottom, top, near, result) {\r\n        \r\n\r\n        var column0Row0 = 2.0 * near / (right - left);\r\n        var column1Row1 = 2.0 * near / (top - bottom);\r\n        var column2Row0 = (right + left) / (right - left);\r\n        var column2Row1 = (top + bottom) / (top - bottom);\r\n        var column2Row2 = -1.0;\r\n        var column2Row3 = -1.0;\r\n        var column3Row2 = -2.0 * near;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.\r\n     *\r\n     * @param {Object}[viewport = { x : 0.0, y : 0.0, width : 0.0, height : 0.0 }] The viewport's corners as shown in Example 1.\r\n     * @param {Number}[nearDepthRange=0.0] The near plane distance in window coordinates.\r\n     * @param {Number}[farDepthRange=1.0] The far plane distance in window coordinates.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Create viewport transformation using an explicit viewport and depth range.\r\n     * var m = Cesium.Matrix4.computeViewportTransformation({\r\n     *     x : 0.0,\r\n     *     y : 0.0,\r\n     *     width : 1024.0,\r\n     *     height : 768.0\r\n     * }, 0.0, 1.0, new Cesium.Matrix4());\r\n     */\r\n    Matrix4.computeViewportTransformation = function(viewport, nearDepthRange, farDepthRange, result) {\r\n        \r\n\r\n        viewport = defaultValue(viewport, defaultValue.EMPTY_OBJECT);\r\n        var x = defaultValue(viewport.x, 0.0);\r\n        var y = defaultValue(viewport.y, 0.0);\r\n        var width = defaultValue(viewport.width, 0.0);\r\n        var height = defaultValue(viewport.height, 0.0);\r\n        nearDepthRange = defaultValue(nearDepthRange, 0.0);\r\n        farDepthRange = defaultValue(farDepthRange, 1.0);\r\n\r\n        var halfWidth = width * 0.5;\r\n        var halfHeight = height * 0.5;\r\n        var halfDepth = (farDepthRange - nearDepthRange) * 0.5;\r\n\r\n        var column0Row0 = halfWidth;\r\n        var column1Row1 = halfHeight;\r\n        var column2Row2 = halfDepth;\r\n        var column3Row0 = x + halfWidth;\r\n        var column3Row1 = y + halfHeight;\r\n        var column3Row2 = nearDepthRange + halfDepth;\r\n        var column3Row3 = 1.0;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = column3Row3;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance that transforms from world space to view space.\r\n     *\r\n     * @param {Cartesian3} position The position of the camera.\r\n     * @param {Cartesian3} direction The forward direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @param {Cartesian3} right The right direction.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computeView = function(position, direction, up, right, result) {\r\n        \r\n\r\n        result[0] = right.x;\r\n        result[1] = up.x;\r\n        result[2] = -direction.x;\r\n        result[3] = 0.0;\r\n        result[4] = right.y;\r\n        result[5] = up.y;\r\n        result[6] = -direction.y;\r\n        result[7] = 0.0;\r\n        result[8] = right.z;\r\n        result[9] = up.z;\r\n        result[10] = -direction.z;\r\n        result[11] = 0.0;\r\n        result[12] = -Cartesian3.dot(right, position);\r\n        result[13] = -Cartesian3.dot(up, position);\r\n        result[14] = Cartesian3.dot(direction, position);\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes an Array from the provided Matrix4 instance.\r\n     * The array will be in column-major order.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use..\r\n     * @param {Number[]} [result] The Array onto which to store the result.\r\n     * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\r\n     *\r\n     * @example\r\n     * //create an array from an instance of Matrix4\r\n     * // m = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     * var a = Cesium.Matrix4.toArray(m);\r\n     *\r\n     * // m remains the same\r\n     * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]\r\n     */\r\n    Matrix4.toArray = function(matrix, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return [matrix[0], matrix[1], matrix[2], matrix[3],\r\n                    matrix[4], matrix[5], matrix[6], matrix[7],\r\n                    matrix[8], matrix[9], matrix[10], matrix[11],\r\n                    matrix[12], matrix[13], matrix[14], matrix[15]];\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the array index of the element at the provided row and column.\r\n     *\r\n     * @param {Number} row The zero-based index of the row.\r\n     * @param {Number} column The zero-based index of the column.\r\n     * @returns {Number} The index of the element at the provided row and column.\r\n     *\r\n     * @exception {DeveloperError} row must be 0, 1, 2, or 3.\r\n     * @exception {DeveloperError} column must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * var myMatrix = new Cesium.Matrix4();\r\n     * var column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);\r\n     * var column1Row0 = myMatrix[column1Row0Index];\r\n     * myMatrix[column1Row0Index] = 10.0;\r\n     */\r\n    Matrix4.getElementIndex = function(column, row) {\r\n        \r\n\r\n        return column * 4 + row;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to retrieve.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //returns a Cartesian4 instance with values from the specified column\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * //Example 1: Creates an instance of Cartesian\r\n     * var a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());\r\n     *\r\n     * @example\r\n     * //Example 2: Sets values for Cartesian instance\r\n     * var a = new Cesium.Cartesian4();\r\n     * Cesium.Matrix4.getColumn(m, 2, a);\r\n     *\r\n     * // a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;\r\n     */\r\n    Matrix4.getColumn = function(matrix, index, result) {\r\n        \r\n\r\n        var startIndex = index * 4;\r\n        var x = matrix[startIndex];\r\n        var y = matrix[startIndex + 1];\r\n        var z = matrix[startIndex + 2];\r\n        var w = matrix[startIndex + 3];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to set.\r\n     * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified column.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //creates a new Matrix4 instance with new column values from the Cartesian4 instance\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 11.0, 99.0, 13.0]\r\n     * //     [14.0, 15.0, 98.0, 17.0]\r\n     * //     [18.0, 19.0, 97.0, 21.0]\r\n     * //     [22.0, 23.0, 96.0, 25.0]\r\n     */\r\n    Matrix4.setColumn = function(matrix, index, cartesian, result) {\r\n        \r\n\r\n        result = Matrix4.clone(matrix, result);\r\n        var startIndex = index * 4;\r\n        result[startIndex] = cartesian.x;\r\n        result[startIndex + 1] = cartesian.y;\r\n        result[startIndex + 2] = cartesian.z;\r\n        result[startIndex + 3] = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the translation in the rightmost column of the provided\r\n     * matrix with the provided translation.  This assumes the matrix is an affine transformation\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} translation The translation that replaces the translation of the provided matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.setTranslation = function(matrix, translation, result) {\r\n        \r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = matrix[15];\r\n\r\n        return result;\r\n    };\r\n\r\n    var scaleScratch = new Cartesian3();\r\n    /**\r\n     * Computes a new matrix that replaces the scale with the provided scale.  This assumes the matrix is an affine transformation\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} scale The scale that replaces the scale of the provided matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.setScale = function(matrix, scale, result) {\r\n        \r\n\r\n        var existingScale = Matrix4.getScale(matrix, scaleScratch);\r\n        var newScale = Cartesian3.divideComponents(scale, existingScale, scaleScratch);\r\n        return Matrix4.multiplyByScale(matrix, newScale, result);\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to retrieve.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //returns a Cartesian4 instance with values from the specified column\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * //Example 1: Returns an instance of Cartesian\r\n     * var a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());\r\n     *\r\n     * @example\r\n     * //Example 2: Sets values for a Cartesian instance\r\n     * var a = new Cesium.Cartesian4();\r\n     * Cesium.Matrix4.getRow(m, 2, a);\r\n     *\r\n     * // a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;\r\n     */\r\n    Matrix4.getRow = function(matrix, index, result) {\r\n        \r\n\r\n        var x = matrix[index];\r\n        var y = matrix[index + 4];\r\n        var z = matrix[index + 8];\r\n        var w = matrix[index + 12];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to set.\r\n     * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified row.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //create a new Matrix4 instance with new row values from the Cartesian4 instance\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [99.0, 98.0, 97.0, 96.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     */\r\n    Matrix4.setRow = function(matrix, index, cartesian, result) {\r\n        \r\n\r\n        result = Matrix4.clone(matrix, result);\r\n        result[index] = cartesian.x;\r\n        result[index + 4] = cartesian.y;\r\n        result[index + 8] = cartesian.z;\r\n        result[index + 12] = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    var scratchColumn = new Cartesian3();\r\n\r\n    /**\r\n     * Extracts the non-uniform scale assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter\r\n     */\r\n    Matrix4.getScale = function(matrix, result) {\r\n        \r\n\r\n        result.x = Cartesian3.magnitude(Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));\r\n        result.y = Cartesian3.magnitude(Cartesian3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn));\r\n        result.z = Cartesian3.magnitude(Cartesian3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn));\r\n        return result;\r\n    };\r\n\r\n    var scratchScale = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the maximum scale assuming the matrix is an affine transformation.\r\n     * The maximum scale is the maximum length of the column vectors in the upper-left\r\n     * 3x3 matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @returns {Number} The maximum scale.\r\n     */\r\n    Matrix4.getMaximumScale = function(matrix) {\r\n        Matrix4.getScale(matrix, scratchScale);\r\n        return Cartesian3.maximumComponent(scratchScale);\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.multiply = function(left, right, result) {\r\n        \r\n\r\n        var left0 = left[0];\r\n        var left1 = left[1];\r\n        var left2 = left[2];\r\n        var left3 = left[3];\r\n        var left4 = left[4];\r\n        var left5 = left[5];\r\n        var left6 = left[6];\r\n        var left7 = left[7];\r\n        var left8 = left[8];\r\n        var left9 = left[9];\r\n        var left10 = left[10];\r\n        var left11 = left[11];\r\n        var left12 = left[12];\r\n        var left13 = left[13];\r\n        var left14 = left[14];\r\n        var left15 = left[15];\r\n\r\n        var right0 = right[0];\r\n        var right1 = right[1];\r\n        var right2 = right[2];\r\n        var right3 = right[3];\r\n        var right4 = right[4];\r\n        var right5 = right[5];\r\n        var right6 = right[6];\r\n        var right7 = right[7];\r\n        var right8 = right[8];\r\n        var right9 = right[9];\r\n        var right10 = right[10];\r\n        var right11 = right[11];\r\n        var right12 = right[12];\r\n        var right13 = right[13];\r\n        var right14 = right[14];\r\n        var right15 = right[15];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;\r\n        var column0Row3 = left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;\r\n        var column1Row3 = left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;\r\n        var column2Row3 = left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;\r\n\r\n        var column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;\r\n        var column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;\r\n        var column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;\r\n        var column3Row3 = left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column0Row3;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = column1Row3;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = column3Row3;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the sum of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.add = function(left, right, result) {\r\n        \r\n\r\n        result[0] = left[0] + right[0];\r\n        result[1] = left[1] + right[1];\r\n        result[2] = left[2] + right[2];\r\n        result[3] = left[3] + right[3];\r\n        result[4] = left[4] + right[4];\r\n        result[5] = left[5] + right[5];\r\n        result[6] = left[6] + right[6];\r\n        result[7] = left[7] + right[7];\r\n        result[8] = left[8] + right[8];\r\n        result[9] = left[9] + right[9];\r\n        result[10] = left[10] + right[10];\r\n        result[11] = left[11] + right[11];\r\n        result[12] = left[12] + right[12];\r\n        result[13] = left[13] + right[13];\r\n        result[14] = left[14] + right[14];\r\n        result[15] = left[15] + right[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the difference of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.subtract = function(left, right, result) {\r\n        \r\n\r\n        result[0] = left[0] - right[0];\r\n        result[1] = left[1] - right[1];\r\n        result[2] = left[2] - right[2];\r\n        result[3] = left[3] - right[3];\r\n        result[4] = left[4] - right[4];\r\n        result[5] = left[5] - right[5];\r\n        result[6] = left[6] - right[6];\r\n        result[7] = left[7] - right[7];\r\n        result[8] = left[8] - right[8];\r\n        result[9] = left[9] - right[9];\r\n        result[10] = left[10] - right[10];\r\n        result[11] = left[11] - right[11];\r\n        result[12] = left[12] - right[12];\r\n        result[13] = left[13] - right[13];\r\n        result[14] = left[14] - right[14];\r\n        result[15] = left[15] - right[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices assuming the matrices are\r\n     * affine transformation matrices, where the upper left 3x3 elements\r\n     * are a rotation matrix, and the upper three elements in the fourth\r\n     * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n     * The matrix is not verified to be in the proper form.\r\n     * This method is faster than computing the product for general 4x4\r\n     * matrices using {@link Matrix4.multiply}.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);\r\n     * var m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));\r\n     * var m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());\r\n     */\r\n    Matrix4.multiplyTransformation = function(left, right, result) {\r\n        \r\n\r\n        var left0 = left[0];\r\n        var left1 = left[1];\r\n        var left2 = left[2];\r\n        var left4 = left[4];\r\n        var left5 = left[5];\r\n        var left6 = left[6];\r\n        var left8 = left[8];\r\n        var left9 = left[9];\r\n        var left10 = left[10];\r\n        var left12 = left[12];\r\n        var left13 = left[13];\r\n        var left14 = left[14];\r\n\r\n        var right0 = right[0];\r\n        var right1 = right[1];\r\n        var right2 = right[2];\r\n        var right4 = right[4];\r\n        var right5 = right[5];\r\n        var right6 = right[6];\r\n        var right8 = right[8];\r\n        var right9 = right[9];\r\n        var right10 = right[10];\r\n        var right12 = right[12];\r\n        var right13 = right[13];\r\n        var right14 = right[14];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\r\n\r\n        var column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12;\r\n        var column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13;\r\n        var column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = 0.0;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by a 3x3 rotation matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromRotationTranslation(rotation), m);</code> with less allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The matrix on the left-hand side.\r\n     * @param {Matrix3} rotation The 3x3 rotation matrix on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromRotationTranslation(rotation), m);\r\n     * Cesium.Matrix4.multiplyByMatrix3(m, rotation, m);\r\n     */\r\n    Matrix4.multiplyByMatrix3 = function(matrix, rotation, result) {\r\n        \r\n\r\n        var left0 = matrix[0];\r\n        var left1 = matrix[1];\r\n        var left2 = matrix[2];\r\n        var left4 = matrix[4];\r\n        var left5 = matrix[5];\r\n        var left6 = matrix[6];\r\n        var left8 = matrix[8];\r\n        var left9 = matrix[9];\r\n        var left10 = matrix[10];\r\n\r\n        var right0 = rotation[0];\r\n        var right1 = rotation[1];\r\n        var right2 = rotation[2];\r\n        var right4 = rotation[3];\r\n        var right5 = rotation[4];\r\n        var right6 = rotation[5];\r\n        var right8 = rotation[6];\r\n        var right9 = rotation[7];\r\n        var right10 = rotation[8];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = 0.0;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit translation matrix defined by a {@link Cartesian3}.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The matrix on the left-hand side.\r\n     * @param {Cartesian3} translation The translation on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);\r\n     * Cesium.Matrix4.multiplyByTranslation(m, position, m);\r\n     */\r\n    Matrix4.multiplyByTranslation = function(matrix, translation, result) {\r\n        \r\n\r\n        var x = translation.x;\r\n        var y = translation.y;\r\n        var z = translation.z;\r\n\r\n        var tx = (x * matrix[0]) + (y * matrix[4]) + (z * matrix[8]) + matrix[12];\r\n        var ty = (x * matrix[1]) + (y * matrix[5]) + (z * matrix[9]) + matrix[13];\r\n        var tz = (x * matrix[2]) + (y * matrix[6]) + (z * matrix[10]) + matrix[14];\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = tx;\r\n        result[13] = ty;\r\n        result[14] = tz;\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    var uniformScaleScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit uniform scale matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\r\n     * <code>m</code> must be an affine matrix.\r\n     * This function performs fewer allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The affine matrix on the left-hand side.\r\n     * @param {Number} scale The uniform scale on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);\r\n     * Cesium.Matrix4.multiplyByUniformScale(m, scale, m);\r\n     *\r\n     * @see Matrix4.fromUniformScale\r\n     * @see Matrix4.multiplyByScale\r\n     */\r\n    Matrix4.multiplyByUniformScale = function(matrix, scale, result) {\r\n        \r\n\r\n        uniformScaleScratch.x = scale;\r\n        uniformScaleScratch.y = scale;\r\n        uniformScaleScratch.z = scale;\r\n        return Matrix4.multiplyByScale(matrix, uniformScaleScratch, result);\r\n    };\r\n\r\n    /**\r\n     * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit non-uniform scale matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\r\n     * <code>m</code> must be an affine matrix.\r\n     * This function performs fewer allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The affine matrix on the left-hand side.\r\n     * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);\r\n     * Cesium.Matrix4.multiplyByScale(m, scale, m);\r\n     *\r\n     * @see Matrix4.fromScale\r\n     * @see Matrix4.multiplyByUniformScale\r\n     */\r\n    Matrix4.multiplyByScale = function(matrix, scale, result) {\r\n        \r\n\r\n        var scaleX = scale.x;\r\n        var scaleY = scale.y;\r\n        var scaleZ = scale.z;\r\n\r\n        // Faster than Cartesian3.equals\r\n        if ((scaleX === 1.0) && (scaleY === 1.0) && (scaleZ === 1.0)) {\r\n            return Matrix4.clone(matrix, result);\r\n        }\r\n\r\n        result[0] = scaleX * matrix[0];\r\n        result[1] = scaleX * matrix[1];\r\n        result[2] = scaleX * matrix[2];\r\n        result[3] = 0.0;\r\n        result[4] = scaleY * matrix[4];\r\n        result[5] = scaleY * matrix[5];\r\n        result[6] = scaleY * matrix[6];\r\n        result[7] = 0.0;\r\n        result[8] = scaleZ * matrix[8];\r\n        result[9] = scaleZ * matrix[9];\r\n        result[10] = scaleZ * matrix[10];\r\n        result[11] = 0.0;\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a column vector.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian4} cartesian The vector.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Matrix4.multiplyByVector = function(matrix, cartesian, result) {\r\n        \r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n        var vW = cartesian.w;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;\r\n        var w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a {@link Cartesian3}.  This is equivalent to calling {@link Matrix4.multiplyByVector}\r\n     * with a {@link Cartesian4} with a <code>w</code> component of zero.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The point.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\r\n     * var result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());\r\n     * // A shortcut for\r\n     * //   Cartesian3 p = ...\r\n     * //   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);\r\n     */\r\n    Matrix4.multiplyByPointAsVector = function(matrix, cartesian, result) {\r\n        \r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a {@link Cartesian3}. This is equivalent to calling {@link Matrix4.multiplyByVector}\r\n     * with a {@link Cartesian4} with a <code>w</code> component of 1, but returns a {@link Cartesian3} instead of a {@link Cartesian4}.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The point.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\r\n     * var result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix4.multiplyByPoint = function(matrix, cartesian, result) {\r\n        \r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a scalar.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Number} scalar The number to multiply by.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //create a Matrix4 instance which is a scaled version of the supplied Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [-20.0, -22.0, -24.0, -26.0]\r\n     * //     [-28.0, -30.0, -32.0, -34.0]\r\n     * //     [-36.0, -38.0, -40.0, -42.0]\r\n     * //     [-44.0, -46.0, -48.0, -50.0]\r\n     */\r\n    Matrix4.multiplyByScalar = function(matrix, scalar, result) {\r\n        \r\n\r\n        result[0] = matrix[0] * scalar;\r\n        result[1] = matrix[1] * scalar;\r\n        result[2] = matrix[2] * scalar;\r\n        result[3] = matrix[3] * scalar;\r\n        result[4] = matrix[4] * scalar;\r\n        result[5] = matrix[5] * scalar;\r\n        result[6] = matrix[6] * scalar;\r\n        result[7] = matrix[7] * scalar;\r\n        result[8] = matrix[8] * scalar;\r\n        result[9] = matrix[9] * scalar;\r\n        result[10] = matrix[10] * scalar;\r\n        result[11] = matrix[11] * scalar;\r\n        result[12] = matrix[12] * scalar;\r\n        result[13] = matrix[13] * scalar;\r\n        result[14] = matrix[14] * scalar;\r\n        result[15] = matrix[15] * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a negated copy of the provided matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to negate.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //create a new Matrix4 instance which is a negation of a Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [-10.0, -11.0, -12.0, -13.0]\r\n     * //     [-14.0, -15.0, -16.0, -17.0]\r\n     * //     [-18.0, -19.0, -20.0, -21.0]\r\n     * //     [-22.0, -23.0, -24.0, -25.0]\r\n     */\r\n    Matrix4.negate = function(matrix, result) {\r\n        \r\n\r\n        result[0] = -matrix[0];\r\n        result[1] = -matrix[1];\r\n        result[2] = -matrix[2];\r\n        result[3] = -matrix[3];\r\n        result[4] = -matrix[4];\r\n        result[5] = -matrix[5];\r\n        result[6] = -matrix[6];\r\n        result[7] = -matrix[7];\r\n        result[8] = -matrix[8];\r\n        result[9] = -matrix[9];\r\n        result[10] = -matrix[10];\r\n        result[11] = -matrix[11];\r\n        result[12] = -matrix[12];\r\n        result[13] = -matrix[13];\r\n        result[14] = -matrix[14];\r\n        result[15] = -matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the transpose of the provided matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to transpose.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //returns transpose of a Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     */\r\n    Matrix4.transpose = function(matrix, result) {\r\n        \r\n\r\n        var matrix1 = matrix[1];\r\n        var matrix2 = matrix[2];\r\n        var matrix3 = matrix[3];\r\n        var matrix6 = matrix[6];\r\n        var matrix7 = matrix[7];\r\n        var matrix11 = matrix[11];\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[4];\r\n        result[2] = matrix[8];\r\n        result[3] = matrix[12];\r\n        result[4] = matrix1;\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[9];\r\n        result[7] = matrix[13];\r\n        result[8] = matrix2;\r\n        result[9] = matrix6;\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[14];\r\n        result[12] = matrix3;\r\n        result[13] = matrix7;\r\n        result[14] = matrix11;\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\r\n     *\r\n     * @param {Matrix4} matrix The matrix with signed elements.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.abs = function(matrix, result) {\r\n        \r\n\r\n        result[0] = Math.abs(matrix[0]);\r\n        result[1] = Math.abs(matrix[1]);\r\n        result[2] = Math.abs(matrix[2]);\r\n        result[3] = Math.abs(matrix[3]);\r\n        result[4] = Math.abs(matrix[4]);\r\n        result[5] = Math.abs(matrix[5]);\r\n        result[6] = Math.abs(matrix[6]);\r\n        result[7] = Math.abs(matrix[7]);\r\n        result[8] = Math.abs(matrix[8]);\r\n        result[9] = Math.abs(matrix[9]);\r\n        result[10] = Math.abs(matrix[10]);\r\n        result[11] = Math.abs(matrix[11]);\r\n        result[12] = Math.abs(matrix[12]);\r\n        result[13] = Math.abs(matrix[13]);\r\n        result[14] = Math.abs(matrix[14]);\r\n        result[15] = Math.abs(matrix[15]);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [left] The first matrix.\r\n     * @param {Matrix4} [right] The second matrix.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     *\r\n     * @example\r\n     * //compares two Matrix4 instances\r\n     *\r\n     * // a = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * // b = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * if(Cesium.Matrix4.equals(a,b)) {\r\n     *      console.log(\"Both matrices are equal\");\r\n     * } else {\r\n     *      console.log(\"They are not equal\");\r\n     * }\r\n     *\r\n     * //Prints \"Both matrices are equal\" on the console\r\n     */\r\n    Matrix4.equals = function(left, right) {\r\n        // Given that most matrices will be transformation matrices, the elements\r\n        // are tested in order such that the test is likely to fail as early\r\n        // as possible.  I _think_ this is just as friendly to the L1 cache\r\n        // as testing in index order.  It is certainty faster in practice.\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                // Translation\r\n                left[12] === right[12] &&\r\n                left[13] === right[13] &&\r\n                left[14] === right[14] &&\r\n\r\n                // Rotation/scale\r\n                left[0] === right[0] &&\r\n                left[1] === right[1] &&\r\n                left[2] === right[2] &&\r\n                left[4] === right[4] &&\r\n                left[5] === right[5] &&\r\n                left[6] === right[6] &&\r\n                left[8] === right[8] &&\r\n                left[9] === right[9] &&\r\n                left[10] === right[10] &&\r\n\r\n                // Bottom row\r\n                left[3] === right[3] &&\r\n                left[7] === right[7] &&\r\n                left[11] === right[11] &&\r\n                left[15] === right[15]);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [left] The first matrix.\r\n     * @param {Matrix4} [right] The second matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     *\r\n     * @example\r\n     * //compares two Matrix4 instances\r\n     *\r\n     * // a = [10.5, 14.5, 18.5, 22.5]\r\n     * //     [11.5, 15.5, 19.5, 23.5]\r\n     * //     [12.5, 16.5, 20.5, 24.5]\r\n     * //     [13.5, 17.5, 21.5, 25.5]\r\n     *\r\n     * // b = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){\r\n     *      console.log(\"Difference between both the matrices is less than 0.1\");\r\n     * } else {\r\n     *      console.log(\"Difference between both the matrices is not less than 0.1\");\r\n     * }\r\n     *\r\n     * //Prints \"Difference between both the matrices is not less than 0.1\" on the console\r\n     */\r\n    Matrix4.equalsEpsilon = function(left, right, epsilon) {\r\n        \r\n\r\n        return (left === right) ||\r\n                (defined(left) &&\r\n                defined(right) &&\r\n                Math.abs(left[0] - right[0]) <= epsilon &&\r\n                Math.abs(left[1] - right[1]) <= epsilon &&\r\n                Math.abs(left[2] - right[2]) <= epsilon &&\r\n                Math.abs(left[3] - right[3]) <= epsilon &&\r\n                Math.abs(left[4] - right[4]) <= epsilon &&\r\n                Math.abs(left[5] - right[5]) <= epsilon &&\r\n                Math.abs(left[6] - right[6]) <= epsilon &&\r\n                Math.abs(left[7] - right[7]) <= epsilon &&\r\n                Math.abs(left[8] - right[8]) <= epsilon &&\r\n                Math.abs(left[9] - right[9]) <= epsilon &&\r\n                Math.abs(left[10] - right[10]) <= epsilon &&\r\n                Math.abs(left[11] - right[11]) <= epsilon &&\r\n                Math.abs(left[12] - right[12]) <= epsilon &&\r\n                Math.abs(left[13] - right[13]) <= epsilon &&\r\n                Math.abs(left[14] - right[14]) <= epsilon &&\r\n                Math.abs(left[15] - right[15]) <= epsilon);\r\n    };\r\n\r\n    /**\r\n     * Gets the translation portion of the provided matrix, assuming the matrix is a affine transformation matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix4.getTranslation = function(matrix, result) {\r\n        \r\n\r\n        result.x = matrix[12];\r\n        result.y = matrix[13];\r\n        result.z = matrix[14];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Gets the upper left 3x3 rotation matrix of the provided matrix, assuming the matrix is a affine transformation matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // returns a Matrix3 instance from a Matrix4 instance\r\n     *\r\n     * // m = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * var b = new Cesium.Matrix3();\r\n     * Cesium.Matrix4.getRotation(m,b);\r\n     *\r\n     * // b = [10.0, 14.0, 18.0]\r\n     * //     [11.0, 15.0, 19.0]\r\n     * //     [12.0, 16.0, 20.0]\r\n     */\r\n    Matrix4.getRotation = function(matrix, result) {\r\n        \r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[4];\r\n        result[4] = matrix[5];\r\n        result[5] = matrix[6];\r\n        result[6] = matrix[8];\r\n        result[7] = matrix[9];\r\n        result[8] = matrix[10];\r\n        return result;\r\n    };\r\n\r\n    var scratchInverseRotation = new Matrix3();\r\n    var scratchMatrix3Zero = new Matrix3();\r\n    var scratchBottomRow = new Cartesian4();\r\n    var scratchExpectedBottomRow = new Cartesian4(0.0, 0.0, 0.0, 1.0);\r\n\r\n     /**\r\n      * Computes the inverse of the provided matrix using Cramers Rule.\r\n      * If the determinant is zero, the matrix can not be inverted, and an exception is thrown.\r\n      * If the matrix is an affine transformation matrix, it is more efficient\r\n      * to invert it with {@link Matrix4.inverseTransformation}.\r\n      *\r\n      * @param {Matrix4} matrix The matrix to invert.\r\n      * @param {Matrix4} result The object onto which to store the result.\r\n      * @returns {Matrix4} The modified result parameter.\r\n      *\r\n      * @exception {RuntimeError} matrix is not invertible because its determinate is zero.\r\n      */\r\n    Matrix4.inverse = function(matrix, result) {\r\n        \r\n        //\r\n        // Ported from:\r\n        //   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf\r\n        //\r\n        var src0 = matrix[0];\r\n        var src1 = matrix[4];\r\n        var src2 = matrix[8];\r\n        var src3 = matrix[12];\r\n        var src4 = matrix[1];\r\n        var src5 = matrix[5];\r\n        var src6 = matrix[9];\r\n        var src7 = matrix[13];\r\n        var src8 = matrix[2];\r\n        var src9 = matrix[6];\r\n        var src10 = matrix[10];\r\n        var src11 = matrix[14];\r\n        var src12 = matrix[3];\r\n        var src13 = matrix[7];\r\n        var src14 = matrix[11];\r\n        var src15 = matrix[15];\r\n\r\n        // calculate pairs for first 8 elements (cofactors)\r\n        var tmp0 = src10 * src15;\r\n        var tmp1 = src11 * src14;\r\n        var tmp2 = src9 * src15;\r\n        var tmp3 = src11 * src13;\r\n        var tmp4 = src9 * src14;\r\n        var tmp5 = src10 * src13;\r\n        var tmp6 = src8 * src15;\r\n        var tmp7 = src11 * src12;\r\n        var tmp8 = src8 * src14;\r\n        var tmp9 = src10 * src12;\r\n        var tmp10 = src8 * src13;\r\n        var tmp11 = src9 * src12;\r\n\r\n        // calculate first 8 elements (cofactors)\r\n        var dst0 = (tmp0 * src5 + tmp3 * src6 + tmp4 * src7) - (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);\r\n        var dst1 = (tmp1 * src4 + tmp6 * src6 + tmp9 * src7) - (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);\r\n        var dst2 = (tmp2 * src4 + tmp7 * src5 + tmp10 * src7) - (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);\r\n        var dst3 = (tmp5 * src4 + tmp8 * src5 + tmp11 * src6) - (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);\r\n        var dst4 = (tmp1 * src1 + tmp2 * src2 + tmp5 * src3) - (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);\r\n        var dst5 = (tmp0 * src0 + tmp7 * src2 + tmp8 * src3) - (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);\r\n        var dst6 = (tmp3 * src0 + tmp6 * src1 + tmp11 * src3) - (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);\r\n        var dst7 = (tmp4 * src0 + tmp9 * src1 + tmp10 * src2) - (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);\r\n\r\n        // calculate pairs for second 8 elements (cofactors)\r\n        tmp0 = src2 * src7;\r\n        tmp1 = src3 * src6;\r\n        tmp2 = src1 * src7;\r\n        tmp3 = src3 * src5;\r\n        tmp4 = src1 * src6;\r\n        tmp5 = src2 * src5;\r\n        tmp6 = src0 * src7;\r\n        tmp7 = src3 * src4;\r\n        tmp8 = src0 * src6;\r\n        tmp9 = src2 * src4;\r\n        tmp10 = src0 * src5;\r\n        tmp11 = src1 * src4;\r\n\r\n        // calculate second 8 elements (cofactors)\r\n        var dst8 = (tmp0 * src13 + tmp3 * src14 + tmp4 * src15) - (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);\r\n        var dst9 = (tmp1 * src12 + tmp6 * src14 + tmp9 * src15) - (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);\r\n        var dst10 = (tmp2 * src12 + tmp7 * src13 + tmp10 * src15) - (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);\r\n        var dst11 = (tmp5 * src12 + tmp8 * src13 + tmp11 * src14) - (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);\r\n        var dst12 = (tmp2 * src10 + tmp5 * src11 + tmp1 * src9) - (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);\r\n        var dst13 = (tmp8 * src11 + tmp0 * src8 + tmp7 * src10) - (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);\r\n        var dst14 = (tmp6 * src9 + tmp11 * src11 + tmp3 * src8) - (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);\r\n        var dst15 = (tmp10 * src10 + tmp4 * src8 + tmp9 * src9) - (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);\r\n\r\n        // calculate determinant\r\n        var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;\r\n\r\n        if (Math.abs(det) < CesiumMath.EPSILON21) {\r\n                // Special case for a zero scale matrix that can occur, for example,\r\n                // when a model's node has a [0, 0, 0] scale.\r\n                if (Matrix3.equalsEpsilon(Matrix4.getRotation(matrix, scratchInverseRotation), scratchMatrix3Zero, CesiumMath.EPSILON7) &&\r\n                Cartesian4.equals(Matrix4.getRow(matrix, 3, scratchBottomRow), scratchExpectedBottomRow)) {\r\n\r\n                result[0] = 0.0;\r\n                result[1] = 0.0;\r\n                result[2] = 0.0;\r\n                result[3] = 0.0;\r\n                result[4] = 0.0;\r\n                result[5] = 0.0;\r\n                result[6] = 0.0;\r\n                result[7] = 0.0;\r\n                result[8] = 0.0;\r\n                result[9] = 0.0;\r\n                result[10] = 0.0;\r\n                result[11] = 0.0;\r\n                result[12] = -matrix[12];\r\n                result[13] = -matrix[13];\r\n                result[14] = -matrix[14];\r\n                result[15] = 1.0;\r\n                return result;\r\n            }\r\n\r\n            throw new RuntimeError('matrix is not invertible because its determinate is zero.');\r\n        }\r\n\r\n        // calculate matrix inverse\r\n        det = 1.0 / det;\r\n\r\n        result[0] = dst0 * det;\r\n        result[1] = dst1 * det;\r\n        result[2] = dst2 * det;\r\n        result[3] = dst3 * det;\r\n        result[4] = dst4 * det;\r\n        result[5] = dst5 * det;\r\n        result[6] = dst6 * det;\r\n        result[7] = dst7 * det;\r\n        result[8] = dst8 * det;\r\n        result[9] = dst9 * det;\r\n        result[10] = dst10 * det;\r\n        result[11] = dst11 * det;\r\n        result[12] = dst12 * det;\r\n        result[13] = dst13 * det;\r\n        result[14] = dst14 * det;\r\n        result[15] = dst15 * det;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the inverse of the provided matrix assuming it is\r\n     * an affine transformation matrix, where the upper left 3x3 elements\r\n     * are a rotation matrix, and the upper three elements in the fourth\r\n     * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n     * The matrix is not verified to be in the proper form.\r\n     * This method is faster than computing the inverse for a general 4x4\r\n     * matrix using {@link Matrix4.inverse}.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to invert.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.inverseTransformation = function(matrix, result) {\r\n        \r\n\r\n        //This function is an optimized version of the below 4 lines.\r\n        //var rT = Matrix3.transpose(Matrix4.getRotation(matrix));\r\n        //var rTN = Matrix3.negate(rT);\r\n        //var rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));\r\n        //return Matrix4.fromRotationTranslation(rT, rTT, result);\r\n\r\n        var matrix0 = matrix[0];\r\n        var matrix1 = matrix[1];\r\n        var matrix2 = matrix[2];\r\n        var matrix4 = matrix[4];\r\n        var matrix5 = matrix[5];\r\n        var matrix6 = matrix[6];\r\n        var matrix8 = matrix[8];\r\n        var matrix9 = matrix[9];\r\n        var matrix10 = matrix[10];\r\n\r\n        var vX = matrix[12];\r\n        var vY = matrix[13];\r\n        var vZ = matrix[14];\r\n\r\n        var x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;\r\n        var y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;\r\n        var z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;\r\n\r\n        result[0] = matrix0;\r\n        result[1] = matrix4;\r\n        result[2] = matrix8;\r\n        result[3] = 0.0;\r\n        result[4] = matrix1;\r\n        result[5] = matrix5;\r\n        result[6] = matrix9;\r\n        result[7] = 0.0;\r\n        result[8] = matrix2;\r\n        result[9] = matrix6;\r\n        result[10] = matrix10;\r\n        result[11] = 0.0;\r\n        result[12] = x;\r\n        result[13] = y;\r\n        result[14] = z;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An immutable Matrix4 instance initialized to the identity matrix.\r\n     *\r\n     * @type {Matrix4}\r\n     * @constant\r\n     */\r\n    Matrix4.IDENTITY = freezeObject(new Matrix4(1.0, 0.0, 0.0, 0.0,\r\n                                                0.0, 1.0, 0.0, 0.0,\r\n                                                0.0, 0.0, 1.0, 0.0,\r\n                                                0.0, 0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * An immutable Matrix4 instance initialized to the zero matrix.\r\n     *\r\n     * @type {Matrix4}\r\n     * @constant\r\n     */\r\n    Matrix4.ZERO = freezeObject(new Matrix4(0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW0 = 0;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW1 = 1;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW2 = 2;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW3 = 3;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW0 = 4;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW1 = 5;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW2 = 6;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW3 = 7;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW0 = 8;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW1 = 9;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW2 = 10;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW3 = 11;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW0 = 12;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW1 = 13;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW2 = 14;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW3 = 15;\r\n\r\n    defineProperties(Matrix4.prototype, {\r\n        /**\r\n         * Gets the number of items in the collection.\r\n         * @memberof Matrix4.prototype\r\n         *\r\n         * @type {Number}\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return Matrix4.packedLength;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates the provided Matrix4 instance.\r\n     *\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.prototype.clone = function(result) {\r\n        return Matrix4.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [right] The right hand side matrix.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix4.prototype.equals = function(right) {\r\n        return Matrix4.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Matrix4.equalsArray = function(matrix, array, offset) {\r\n        return matrix[0] === array[offset] &&\r\n               matrix[1] === array[offset + 1] &&\r\n               matrix[2] === array[offset + 2] &&\r\n               matrix[3] === array[offset + 3] &&\r\n               matrix[4] === array[offset + 4] &&\r\n               matrix[5] === array[offset + 5] &&\r\n               matrix[6] === array[offset + 6] &&\r\n               matrix[7] === array[offset + 7] &&\r\n               matrix[8] === array[offset + 8] &&\r\n               matrix[9] === array[offset + 9] &&\r\n               matrix[10] === array[offset + 10] &&\r\n               matrix[11] === array[offset + 11] &&\r\n               matrix[12] === array[offset + 12] &&\r\n               matrix[13] === array[offset + 13] &&\r\n               matrix[14] === array[offset + 14] &&\r\n               matrix[15] === array[offset + 15];\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [right] The right hand side matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix4.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Matrix4.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Computes a string representing this Matrix with each row being\r\n     * on a separate line and in the format '(column0, column1, column2, column3)'.\r\n     *\r\n     * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.\r\n     */\r\n    Matrix4.prototype.toString = function() {\r\n        return '(' + this[0] + ', ' + this[4] + ', ' + this[8] + ', ' + this[12] +')\\n' +\r\n               '(' + this[1] + ', ' + this[5] + ', ' + this[9] + ', ' + this[13] +')\\n' +\r\n               '(' + this[2] + ', ' + this[6] + ', ' + this[10] + ', ' + this[14] +')\\n' +\r\n               '(' + this[3] + ', ' + this[7] + ', ' + this[11] + ', ' + this[15] +')';\r\n    };\r\n\r\n    return Matrix4;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Matrix4.js\n// module id = 20\n// module chunks = 0","define([\r\n        '../Core/freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Represents which vertices should have a value of `true` for the `applyOffset` attribute\r\n     * @private\r\n     */\r\n    var GeometryOffsetAttribute = {\r\n        NONE : 0,\r\n        TOP : 1,\r\n        ALL : 2\r\n    };\r\n\r\n    return freezeObject(GeometryOffsetAttribute);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GeometryOffsetAttribute.js\n// module id = 21\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 22\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './freezeObject'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A vertex format defines what attributes make up a vertex.  A VertexFormat can be provided\r\n     * to a {@link Geometry} to request that certain properties be computed, e.g., just position,\r\n     * position and normal, etc.\r\n     *\r\n     * @param {Object} [options] An object with boolean properties corresponding to VertexFormat properties as shown in the code example.\r\n     *\r\n     * @alias VertexFormat\r\n     * @constructor\r\n     *\r\n     * @example\r\n     * // Create a vertex format with position and 2D texture coordinate attributes.\r\n     * var format = new Cesium.VertexFormat({\r\n     *   position : true,\r\n     *   st : true\r\n     * });\r\n     *\r\n     * @see Geometry#attributes\r\n     * @see Packable\r\n     */\r\n    function VertexFormat(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        /**\r\n         * When <code>true</code>, the vertex has a 3D position attribute.\r\n         * <p>\r\n         * 64-bit floating-point (for precision).  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type Boolean\r\n         *\r\n         * @default false\r\n         */\r\n        this.position = defaultValue(options.position, false);\r\n\r\n        /**\r\n         * When <code>true</code>, the vertex has a normal attribute (normalized), which is commonly used for lighting.\r\n         * <p>\r\n         * 32-bit floating-point.  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type Boolean\r\n         *\r\n         * @default false\r\n         */\r\n        this.normal = defaultValue(options.normal, false);\r\n\r\n        /**\r\n         * When <code>true</code>, the vertex has a 2D texture coordinate attribute.\r\n         * <p>\r\n         * 32-bit floating-point.  2 components per attribute\r\n         * </p>\r\n         *\r\n         * @type Boolean\r\n         *\r\n         * @default false\r\n         */\r\n        this.st = defaultValue(options.st, false);\r\n\r\n        /**\r\n         * When <code>true</code>, the vertex has a bitangent attribute (normalized), which is used for tangent-space effects like bump mapping.\r\n         * <p>\r\n         * 32-bit floating-point.  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type Boolean\r\n         *\r\n         * @default false\r\n         */\r\n        this.bitangent = defaultValue(options.bitangent, false);\r\n\r\n        /**\r\n         * When <code>true</code>, the vertex has a tangent attribute (normalized), which is used for tangent-space effects like bump mapping.\r\n         * <p>\r\n         * 32-bit floating-point.  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type Boolean\r\n         *\r\n         * @default false\r\n         */\r\n        this.tangent = defaultValue(options.tangent, false);\r\n\r\n        /**\r\n         * When <code>true</code>, the vertex has an RGB color attribute.\r\n         * <p>\r\n         * 8-bit unsigned byte.  3 components per attribute.\r\n         * </p>\r\n         *\r\n         * @type Boolean\r\n         *\r\n         * @default false\r\n         */\r\n        this.color = defaultValue(options.color, false);\r\n    }\r\n\r\n    /**\r\n     * An immutable vertex format with only a position attribute.\r\n     *\r\n     * @type {VertexFormat}\r\n     * @constant\r\n     *\r\n     * @see VertexFormat#position\r\n     */\r\n    VertexFormat.POSITION_ONLY = freezeObject(new VertexFormat({\r\n        position : true\r\n    }));\r\n\r\n    /**\r\n     * An immutable vertex format with position and normal attributes.\r\n     * This is compatible with per-instance color appearances like {@link PerInstanceColorAppearance}.\r\n     *\r\n     * @type {VertexFormat}\r\n     * @constant\r\n     *\r\n     * @see VertexFormat#position\r\n     * @see VertexFormat#normal\r\n     */\r\n    VertexFormat.POSITION_AND_NORMAL = freezeObject(new VertexFormat({\r\n        position : true,\r\n        normal : true\r\n    }));\r\n\r\n    /**\r\n     * An immutable vertex format with position, normal, and st attributes.\r\n     * This is compatible with {@link MaterialAppearance} when {@link MaterialAppearance#materialSupport}\r\n     * is <code>TEXTURED/code>.\r\n     *\r\n     * @type {VertexFormat}\r\n     * @constant\r\n     *\r\n     * @see VertexFormat#position\r\n     * @see VertexFormat#normal\r\n     * @see VertexFormat#st\r\n     */\r\n    VertexFormat.POSITION_NORMAL_AND_ST = freezeObject(new VertexFormat({\r\n        position : true,\r\n        normal : true,\r\n        st : true\r\n    }));\r\n\r\n    /**\r\n     * An immutable vertex format with position and st attributes.\r\n     * This is compatible with {@link EllipsoidSurfaceAppearance}.\r\n     *\r\n     * @type {VertexFormat}\r\n     * @constant\r\n     *\r\n     * @see VertexFormat#position\r\n     * @see VertexFormat#st\r\n     */\r\n    VertexFormat.POSITION_AND_ST = freezeObject(new VertexFormat({\r\n        position : true,\r\n        st : true\r\n    }));\r\n\r\n    /**\r\n     * An immutable vertex format with position and color attributes.\r\n     *\r\n     * @type {VertexFormat}\r\n     * @constant\r\n     *\r\n     * @see VertexFormat#position\r\n     * @see VertexFormat#color\r\n     */\r\n    VertexFormat.POSITION_AND_COLOR = freezeObject(new VertexFormat({\r\n        position : true,\r\n        color : true\r\n    }));\r\n\r\n    /**\r\n     * An immutable vertex format with well-known attributes: position, normal, st, tangent, and bitangent.\r\n     *\r\n     * @type {VertexFormat}\r\n     * @constant\r\n     *\r\n     * @see VertexFormat#position\r\n     * @see VertexFormat#normal\r\n     * @see VertexFormat#st\r\n     * @see VertexFormat#tangent\r\n     * @see VertexFormat#bitangent\r\n     */\r\n    VertexFormat.ALL = freezeObject(new VertexFormat({\r\n        position : true,\r\n        normal : true,\r\n        st : true,\r\n        tangent  : true,\r\n        bitangent : true\r\n    }));\r\n\r\n    /**\r\n     * An immutable vertex format with position, normal, and st attributes.\r\n     * This is compatible with most appearances and materials; however\r\n     * normal and st attributes are not always required.  When this is\r\n     * known in advance, another <code>VertexFormat</code> should be used.\r\n     *\r\n     * @type {VertexFormat}\r\n     * @constant\r\n     *\r\n     * @see VertexFormat#position\r\n     * @see VertexFormat#normal\r\n     */\r\n    VertexFormat.DEFAULT = VertexFormat.POSITION_NORMAL_AND_ST;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    VertexFormat.packedLength = 6;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {VertexFormat} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    VertexFormat.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.position ? 1.0 : 0.0;\r\n        array[startingIndex++] = value.normal ? 1.0 : 0.0;\r\n        array[startingIndex++] = value.st ? 1.0 : 0.0;\r\n        array[startingIndex++] = value.tangent ? 1.0 : 0.0;\r\n        array[startingIndex++] = value.bitangent ? 1.0 : 0.0;\r\n        array[startingIndex] = value.color ? 1.0 : 0.0;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {VertexFormat} [result] The object into which to store the result.\r\n     * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided.\r\n     */\r\n    VertexFormat.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new VertexFormat();\r\n        }\r\n\r\n        result.position  = array[startingIndex++] === 1.0;\r\n        result.normal    = array[startingIndex++] === 1.0;\r\n        result.st        = array[startingIndex++] === 1.0;\r\n        result.tangent   = array[startingIndex++] === 1.0;\r\n        result.bitangent = array[startingIndex++] === 1.0;\r\n        result.color     = array[startingIndex] === 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a VertexFormat instance.\r\n     *\r\n     * @param {VertexFormat} vertexFormat The vertex format to duplicate.\r\n     * @param {VertexFormat} [result] The object onto which to store the result.\r\n     * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided. (Returns undefined if vertexFormat is undefined)\r\n     */\r\n    VertexFormat.clone = function(vertexFormat, result) {\r\n        if (!defined(vertexFormat)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            result = new VertexFormat();\r\n        }\r\n\r\n        result.position = vertexFormat.position;\r\n        result.normal = vertexFormat.normal;\r\n        result.st = vertexFormat.st;\r\n        result.tangent = vertexFormat.tangent;\r\n        result.bitangent = vertexFormat.bitangent;\r\n        result.color = vertexFormat.color;\r\n        return result;\r\n    };\r\n\r\n    return VertexFormat;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/VertexFormat.js\n// module id = 23\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 24\n// module chunks = 0","define([\r\n        '../ThirdParty/when',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/formatError'\r\n    ], function(\r\n        when,\r\n        defaultValue,\r\n        defined,\r\n        formatError) {\r\n    'use strict';\r\n\r\n    // createXXXGeometry functions may return Geometry or a Promise that resolves to Geometry\r\n    // if the function requires access to ApproximateTerrainHeights.\r\n    // For fully synchronous functions, just wrapping the function call in a `when` Promise doesn't\r\n    // handle errors correctly, hence try-catch\r\n    function callAndWrap(workerFunction, parameters, transferableObjects) {\r\n        var resultOrPromise;\r\n        try {\r\n            resultOrPromise = workerFunction(parameters, transferableObjects);\r\n            return resultOrPromise; // errors handled by Promise\r\n        } catch (e) {\r\n            return when.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates an adapter function to allow a calculation function to operate as a Web Worker,\r\n     * paired with TaskProcessor, to receive tasks and return results.\r\n     *\r\n     * @exports createTaskProcessorWorker\r\n     *\r\n     * @param {createTaskProcessorWorker~WorkerFunction} workerFunction The calculation function,\r\n     *        which takes parameters and returns a result.\r\n     * @returns {createTaskProcessorWorker~TaskProcessorWorkerFunction} A function that adapts the\r\n     *          calculation function to work as a Web Worker onmessage listener with TaskProcessor.\r\n     *\r\n     *\r\n     * @example\r\n     * function doCalculation(parameters, transferableObjects) {\r\n     *   // calculate some result using the inputs in parameters\r\n     *   return result;\r\n     * }\r\n     *\r\n     * return Cesium.createTaskProcessorWorker(doCalculation);\r\n     * // the resulting function is compatible with TaskProcessor\r\n     *\r\n     * @see TaskProcessor\r\n     * @see {@link http://www.w3.org/TR/workers/|Web Workers}\r\n     * @see {@link http://www.w3.org/TR/html5/common-dom-interfaces.html#transferable-objects|Transferable objects}\r\n     */\r\n    function createTaskProcessorWorker(workerFunction) {\r\n        var postMessage;\r\n\r\n        return function(event) {\r\n            /*global self*/\r\n            var data = event.data;\r\n\r\n            var transferableObjects = [];\r\n            var responseMessage = {\r\n                id : data.id,\r\n                result : undefined,\r\n                error : undefined\r\n            };\r\n\r\n            return when(callAndWrap(workerFunction, data.parameters, transferableObjects))\r\n                .then(function(result) {\r\n                    responseMessage.result = result;\r\n                })\r\n                .otherwise(function(e) {\r\n                    if (e instanceof Error) {\r\n                        // Errors can't be posted in a message, copy the properties\r\n                        responseMessage.error = {\r\n                            name : e.name,\r\n                            message : e.message,\r\n                            stack : e.stack\r\n                        };\r\n                    } else {\r\n                        responseMessage.error = e;\r\n                    }\r\n                })\r\n                .always(function() {\r\n                    if (!defined(postMessage)) {\r\n                        postMessage = defaultValue(self.webkitPostMessage, self.postMessage);\r\n                    }\r\n\r\n                    if (!data.canTransferArrayBuffer) {\r\n                        transferableObjects.length = 0;\r\n                    }\r\n\r\n                    try {\r\n                        postMessage(responseMessage, transferableObjects);\r\n                    } catch (e) {\r\n                        // something went wrong trying to post the message, post a simpler\r\n                        // error that we can be sure will be cloneable\r\n                        responseMessage.result = undefined;\r\n                        responseMessage.error = 'postMessage failed with error: ' + formatError(e) + '\\n  with responseMessage: ' + JSON.stringify(responseMessage);\r\n                        postMessage(responseMessage);\r\n                    }\r\n                });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A function that performs a calculation in a Web Worker.\r\n     * @callback createTaskProcessorWorker~WorkerFunction\r\n     *\r\n     * @param {Object} parameters Parameters to the calculation.\r\n     * @param {Array} transferableObjects An array that should be filled with references to objects inside\r\n     *        the result that should be transferred back to the main document instead of copied.\r\n     * @returns {Object} The result of the calculation.\r\n     *\r\n     * @example\r\n     * function calculate(parameters, transferableObjects) {\r\n     *   // perform whatever calculation is necessary.\r\n     *   var typedArray = new Float32Array(0);\r\n     *\r\n     *   // typed arrays are transferable\r\n     *   transferableObjects.push(typedArray)\r\n     *\r\n     *   return {\r\n     *      typedArray : typedArray\r\n     *   };\r\n     * }\r\n     */\r\n\r\n    /**\r\n     * A Web Worker message event handler function that handles the interaction with TaskProcessor,\r\n     * specifically, task ID management and posting a response message containing the result.\r\n     * @callback createTaskProcessorWorker~TaskProcessorWorkerFunction\r\n     *\r\n     * @param {Object} event The onmessage event object.\r\n     */\r\n\r\n    return createTaskProcessorWorker;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createTaskProcessorWorker.js\n// module id = 25\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Fill an array or a portion of an array with a given value.\r\n     *\r\n     * @param {Array} array The array to fill.\r\n     * @param {*} value The value to fill the array with.\r\n     * @param {Number} [start=0] The index to start filling at.\r\n     * @param {Number} [end=array.length] The index to end stop at.\r\n     *\r\n     * @returns {Array} The resulting array.\r\n     * @private\r\n     */\r\n    function arrayFill(array, value, start, end) {\r\n        \r\n\r\n        if (typeof array.fill === 'function') {\r\n            return array.fill(value, start, end);\r\n        }\r\n\r\n        var length = array.length >>> 0;\r\n        var relativeStart = defaultValue(start, 0);\r\n        // If negative, find wrap around position\r\n        var k = (relativeStart < 0) ? Math.max(length + relativeStart, 0) : Math.min(relativeStart, length);\r\n        var relativeEnd = defaultValue(end, length);\r\n        // If negative, find wrap around position\r\n        var last = (relativeEnd < 0) ? Math.max(length + relativeEnd, 0) : Math.min(relativeEnd, length);\r\n\r\n        // Fill array accordingly\r\n        while (k < last) {\r\n            array[k] = value;\r\n            k++;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    return arrayFill;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/arrayFill.js\n// module id = 26\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './FeatureDetection',\r\n        './freezeObject',\r\n        './Math',\r\n        './Matrix3'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        FeatureDetection,\r\n        freezeObject,\r\n        CesiumMath,\r\n        Matrix3) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A set of 4-dimensional coordinates used to represent rotation in 3-dimensional space.\r\n     * @alias Quaternion\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The X component.\r\n     * @param {Number} [y=0.0] The Y component.\r\n     * @param {Number} [z=0.0] The Z component.\r\n     * @param {Number} [w=0.0] The W component.\r\n     *\r\n     * @see PackableForInterpolation\r\n     */\r\n    function Quaternion(x, y, z, w) {\r\n        /**\r\n         * The X component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The Y component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n\r\n        /**\r\n         * The Z component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.z = defaultValue(z, 0.0);\r\n\r\n        /**\r\n         * The W component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.w = defaultValue(w, 0.0);\r\n    }\r\n\r\n    var fromAxisAngleScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Computes a quaternion representing a rotation around an axis.\r\n     *\r\n     * @param {Cartesian3} axis The axis of rotation.\r\n     * @param {Number} angle The angle in radians to rotate around the axis.\r\n     * @param {Quaternion} [result] The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new Quaternion instance if one was not provided.\r\n     */\r\n    Quaternion.fromAxisAngle = function(axis, angle, result) {\r\n        \r\n\r\n        var halfAngle = angle / 2.0;\r\n        var s = Math.sin(halfAngle);\r\n        fromAxisAngleScratch = Cartesian3.normalize(axis, fromAxisAngleScratch);\r\n\r\n        var x = fromAxisAngleScratch.x * s;\r\n        var y = fromAxisAngleScratch.y * s;\r\n        var z = fromAxisAngleScratch.z * s;\r\n        var w = Math.cos(halfAngle);\r\n        if (!defined(result)) {\r\n            return new Quaternion(x, y, z, w);\r\n        }\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    var fromRotationMatrixNext = [1, 2, 0];\r\n    var fromRotationMatrixQuat = new Array(3);\r\n    /**\r\n     * Computes a Quaternion from the provided Matrix3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The rotation matrix.\r\n     * @param {Quaternion} [result] The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new Quaternion instance if one was not provided.\r\n     *\r\n     * @see Matrix3.fromQuaternion\r\n     */\r\n    Quaternion.fromRotationMatrix = function(matrix, result) {\r\n        \r\n\r\n        var root;\r\n        var x;\r\n        var y;\r\n        var z;\r\n        var w;\r\n\r\n        var m00 = matrix[Matrix3.COLUMN0ROW0];\r\n        var m11 = matrix[Matrix3.COLUMN1ROW1];\r\n        var m22 = matrix[Matrix3.COLUMN2ROW2];\r\n        var trace = m00 + m11 + m22;\r\n\r\n        if (trace > 0.0) {\r\n            // |w| > 1/2, may as well choose w > 1/2\r\n            root = Math.sqrt(trace + 1.0); // 2w\r\n            w = 0.5 * root;\r\n            root = 0.5 / root; // 1/(4w)\r\n\r\n            x = (matrix[Matrix3.COLUMN1ROW2] - matrix[Matrix3.COLUMN2ROW1]) * root;\r\n            y = (matrix[Matrix3.COLUMN2ROW0] - matrix[Matrix3.COLUMN0ROW2]) * root;\r\n            z = (matrix[Matrix3.COLUMN0ROW1] - matrix[Matrix3.COLUMN1ROW0]) * root;\r\n        } else {\r\n            // |w| <= 1/2\r\n            var next = fromRotationMatrixNext;\r\n\r\n            var i = 0;\r\n            if (m11 > m00) {\r\n                i = 1;\r\n            }\r\n            if (m22 > m00 && m22 > m11) {\r\n                i = 2;\r\n            }\r\n            var j = next[i];\r\n            var k = next[j];\r\n\r\n            root = Math.sqrt(matrix[Matrix3.getElementIndex(i, i)] - matrix[Matrix3.getElementIndex(j, j)] - matrix[Matrix3.getElementIndex(k, k)] + 1.0);\r\n\r\n            var quat = fromRotationMatrixQuat;\r\n            quat[i] = 0.5 * root;\r\n            root = 0.5 / root;\r\n            w = (matrix[Matrix3.getElementIndex(k, j)] - matrix[Matrix3.getElementIndex(j, k)]) * root;\r\n            quat[j] = (matrix[Matrix3.getElementIndex(j, i)] + matrix[Matrix3.getElementIndex(i, j)]) * root;\r\n            quat[k] = (matrix[Matrix3.getElementIndex(k, i)] + matrix[Matrix3.getElementIndex(i, k)]) * root;\r\n\r\n            x = -quat[0];\r\n            y = -quat[1];\r\n            z = -quat[2];\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Quaternion(x, y, z, w);\r\n        }\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    var scratchHPRQuaternion = new Quaternion();\r\n    var scratchHeadingQuaternion = new Quaternion();\r\n    var scratchPitchQuaternion = new Quaternion();\r\n    var scratchRollQuaternion = new Quaternion();\r\n\r\n    /**\r\n     * Computes a rotation from the given heading, pitch and roll angles. Heading is the rotation about the\r\n     * negative z axis. Pitch is the rotation about the negative y axis. Roll is the rotation about\r\n     * the positive x axis.\r\n     *\r\n     * @param {HeadingPitchRoll} headingPitchRoll The rotation expressed as a heading, pitch and roll.\r\n     * @param {Quaternion} [result] The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new Quaternion instance if none was provided.\r\n     */\r\n    Quaternion.fromHeadingPitchRoll = function(headingPitchRoll, result) {\r\n        \r\n\r\n        scratchRollQuaternion = Quaternion.fromAxisAngle(Cartesian3.UNIT_X, headingPitchRoll.roll, scratchHPRQuaternion);\r\n        scratchPitchQuaternion = Quaternion.fromAxisAngle(Cartesian3.UNIT_Y, -headingPitchRoll.pitch, result);\r\n        result = Quaternion.multiply(scratchPitchQuaternion, scratchRollQuaternion, scratchPitchQuaternion);\r\n        scratchHeadingQuaternion = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, -headingPitchRoll.heading, scratchHPRQuaternion);\r\n        return Quaternion.multiply(scratchHeadingQuaternion, result, result);\r\n    };\r\n\r\n    var sampledQuaternionAxis = new Cartesian3();\r\n    var sampledQuaternionRotation = new Cartesian3();\r\n    var sampledQuaternionTempQuaternion = new Quaternion();\r\n    var sampledQuaternionQuaternion0 = new Quaternion();\r\n    var sampledQuaternionQuaternion0Conjugate = new Quaternion();\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Quaternion.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Quaternion} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Quaternion.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex++] = value.y;\r\n        array[startingIndex++] = value.z;\r\n        array[startingIndex] = value.w;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Quaternion} [result] The object into which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new Quaternion instance if one was not provided.\r\n     */\r\n    Quaternion.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Quaternion();\r\n        }\r\n        result.x = array[startingIndex];\r\n        result.y = array[startingIndex + 1];\r\n        result.z = array[startingIndex + 2];\r\n        result.w = array[startingIndex + 3];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to store the object into an array in its interpolatable form.\r\n     * @type {Number}\r\n     */\r\n    Quaternion.packedInterpolationLength = 3;\r\n\r\n    /**\r\n     * Converts a packed array into a form suitable for interpolation.\r\n     *\r\n     * @param {Number[]} packedArray The packed array.\r\n     * @param {Number} [startingIndex=0] The index of the first element to be converted.\r\n     * @param {Number} [lastIndex=packedArray.length] The index of the last element to be converted.\r\n     * @param {Number[]} result The object into which to store the result.\r\n     */\r\n    Quaternion.convertPackedArrayForInterpolation = function(packedArray, startingIndex, lastIndex, result) {\r\n        Quaternion.unpack(packedArray, lastIndex * 4, sampledQuaternionQuaternion0Conjugate);\r\n        Quaternion.conjugate(sampledQuaternionQuaternion0Conjugate, sampledQuaternionQuaternion0Conjugate);\r\n\r\n        for (var i = 0, len = lastIndex - startingIndex + 1; i < len; i++) {\r\n            var offset = i * 3;\r\n            Quaternion.unpack(packedArray, (startingIndex + i) * 4, sampledQuaternionTempQuaternion);\r\n\r\n            Quaternion.multiply(sampledQuaternionTempQuaternion, sampledQuaternionQuaternion0Conjugate, sampledQuaternionTempQuaternion);\r\n\r\n            if (sampledQuaternionTempQuaternion.w < 0) {\r\n                Quaternion.negate(sampledQuaternionTempQuaternion, sampledQuaternionTempQuaternion);\r\n            }\r\n\r\n            Quaternion.computeAxis(sampledQuaternionTempQuaternion, sampledQuaternionAxis);\r\n            var angle = Quaternion.computeAngle(sampledQuaternionTempQuaternion);\r\n            result[offset] = sampledQuaternionAxis.x * angle;\r\n            result[offset + 1] = sampledQuaternionAxis.y * angle;\r\n            result[offset + 2] = sampledQuaternionAxis.z * angle;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array converted with {@link convertPackedArrayForInterpolation}.\r\n     *\r\n     * @param {Number[]} array The array previously packed for interpolation.\r\n     * @param {Number[]} sourceArray The original packed array.\r\n     * @param {Number} [firstIndex=0] The firstIndex used to convert the array.\r\n     * @param {Number} [lastIndex=packedArray.length] The lastIndex used to convert the array.\r\n     * @param {Quaternion} [result] The object into which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new Quaternion instance if one was not provided.\r\n     */\r\n    Quaternion.unpackInterpolationResult = function(array, sourceArray, firstIndex, lastIndex, result) {\r\n        if (!defined(result)) {\r\n            result = new Quaternion();\r\n        }\r\n        Cartesian3.fromArray(array, 0, sampledQuaternionRotation);\r\n        var magnitude = Cartesian3.magnitude(sampledQuaternionRotation);\r\n\r\n        Quaternion.unpack(sourceArray, lastIndex * 4, sampledQuaternionQuaternion0);\r\n\r\n        if (magnitude === 0) {\r\n            Quaternion.clone(Quaternion.IDENTITY, sampledQuaternionTempQuaternion);\r\n        } else {\r\n            Quaternion.fromAxisAngle(sampledQuaternionRotation, magnitude, sampledQuaternionTempQuaternion);\r\n        }\r\n\r\n        return Quaternion.multiply(sampledQuaternionTempQuaternion, sampledQuaternionQuaternion0, result);\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Quaternion instance.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to duplicate.\r\n     * @param {Quaternion} [result] The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new Quaternion instance if one was not provided. (Returns undefined if quaternion is undefined)\r\n     */\r\n    Quaternion.clone = function(quaternion, result) {\r\n        if (!defined(quaternion)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Quaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\r\n        }\r\n\r\n        result.x = quaternion.x;\r\n        result.y = quaternion.y;\r\n        result.z = quaternion.z;\r\n        result.w = quaternion.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the conjugate of the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to conjugate.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.conjugate = function(quaternion, result) {\r\n        \r\n\r\n        result.x = -quaternion.x;\r\n        result.y = -quaternion.y;\r\n        result.z = -quaternion.z;\r\n        result.w = quaternion.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes magnitude squared for the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to conjugate.\r\n     * @returns {Number} The magnitude squared.\r\n     */\r\n    Quaternion.magnitudeSquared = function(quaternion) {\r\n        \r\n\r\n        return quaternion.x * quaternion.x + quaternion.y * quaternion.y + quaternion.z * quaternion.z + quaternion.w * quaternion.w;\r\n    };\r\n\r\n    /**\r\n     * Computes magnitude for the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to conjugate.\r\n     * @returns {Number} The magnitude.\r\n     */\r\n    Quaternion.magnitude = function(quaternion) {\r\n        return Math.sqrt(Quaternion.magnitudeSquared(quaternion));\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized form of the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to normalize.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.normalize = function(quaternion, result) {\r\n        \r\n\r\n        var inverseMagnitude = 1.0 / Quaternion.magnitude(quaternion);\r\n        var x = quaternion.x * inverseMagnitude;\r\n        var y = quaternion.y * inverseMagnitude;\r\n        var z = quaternion.z * inverseMagnitude;\r\n        var w = quaternion.w * inverseMagnitude;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the inverse of the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to normalize.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.inverse = function(quaternion, result) {\r\n        \r\n\r\n        var magnitudeSquared = Quaternion.magnitudeSquared(quaternion);\r\n        result = Quaternion.conjugate(quaternion, result);\r\n        return Quaternion.multiplyByScalar(result, 1.0 / magnitudeSquared, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two quaternions.\r\n     *\r\n     * @param {Quaternion} left The first quaternion.\r\n     * @param {Quaternion} right The second quaternion.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.add = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x + right.x;\r\n        result.y = left.y + right.y;\r\n        result.z = left.z + right.z;\r\n        result.w = left.w + right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two quaternions.\r\n     *\r\n     * @param {Quaternion} left The first quaternion.\r\n     * @param {Quaternion} right The second quaternion.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.subtract = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x - right.x;\r\n        result.y = left.y - right.y;\r\n        result.z = left.z - right.z;\r\n        result.w = left.w - right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Negates the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to be negated.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.negate = function(quaternion, result) {\r\n        \r\n\r\n        result.x = -quaternion.x;\r\n        result.y = -quaternion.y;\r\n        result.z = -quaternion.z;\r\n        result.w = -quaternion.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the dot (scalar) product of two quaternions.\r\n     *\r\n     * @param {Quaternion} left The first quaternion.\r\n     * @param {Quaternion} right The second quaternion.\r\n     * @returns {Number} The dot product.\r\n     */\r\n    Quaternion.dot = function(left, right) {\r\n        \r\n\r\n        return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two quaternions.\r\n     *\r\n     * @param {Quaternion} left The first quaternion.\r\n     * @param {Quaternion} right The second quaternion.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.multiply = function(left, right, result) {\r\n        \r\n\r\n        var leftX = left.x;\r\n        var leftY = left.y;\r\n        var leftZ = left.z;\r\n        var leftW = left.w;\r\n\r\n        var rightX = right.x;\r\n        var rightY = right.y;\r\n        var rightZ = right.z;\r\n        var rightW = right.w;\r\n\r\n        var x = leftW * rightX + leftX * rightW + leftY * rightZ - leftZ * rightY;\r\n        var y = leftW * rightY - leftX * rightZ + leftY * rightW + leftZ * rightX;\r\n        var z = leftW * rightZ + leftX * rightY - leftY * rightX + leftZ * rightW;\r\n        var w = leftW * rightW - leftX * rightX - leftY * rightY - leftZ * rightZ;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided quaternion componentwise by the provided scalar.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.multiplyByScalar = function(quaternion, scalar, result) {\r\n        \r\n\r\n        result.x = quaternion.x * scalar;\r\n        result.y = quaternion.y * scalar;\r\n        result.z = quaternion.z * scalar;\r\n        result.w = quaternion.w * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided quaternion componentwise by the provided scalar.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to be divided.\r\n     * @param {Number} scalar The scalar to divide by.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.divideByScalar = function(quaternion, scalar, result) {\r\n        \r\n\r\n        result.x = quaternion.x / scalar;\r\n        result.y = quaternion.y / scalar;\r\n        result.z = quaternion.z / scalar;\r\n        result.w = quaternion.w / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the axis of rotation of the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to use.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Quaternion.computeAxis = function(quaternion, result) {\r\n        \r\n\r\n        var w = quaternion.w;\r\n        if (Math.abs(w - 1.0) < CesiumMath.EPSILON6) {\r\n            result.x = result.y = result.z = 0;\r\n            return result;\r\n        }\r\n\r\n        var scalar = 1.0 / Math.sqrt(1.0 - (w * w));\r\n\r\n        result.x = quaternion.x * scalar;\r\n        result.y = quaternion.y * scalar;\r\n        result.z = quaternion.z * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the angle of rotation of the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion to use.\r\n     * @returns {Number} The angle of rotation.\r\n     */\r\n    Quaternion.computeAngle = function(quaternion) {\r\n        \r\n\r\n        if (Math.abs(quaternion.w - 1.0) < CesiumMath.EPSILON6) {\r\n            return 0.0;\r\n        }\r\n        return 2.0 * Math.acos(quaternion.w);\r\n    };\r\n\r\n    var lerpScratch = new Quaternion();\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t using the provided quaternions.\r\n     *\r\n     * @param {Quaternion} start The value corresponding to t at 0.0.\r\n     * @param {Quaternion} end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.lerp = function(start, end, t, result) {\r\n        \r\n\r\n        lerpScratch = Quaternion.multiplyByScalar(end, t, lerpScratch);\r\n        result = Quaternion.multiplyByScalar(start, 1.0 - t, result);\r\n        return Quaternion.add(lerpScratch, result, result);\r\n    };\r\n\r\n    var slerpEndNegated = new Quaternion();\r\n    var slerpScaledP = new Quaternion();\r\n    var slerpScaledR = new Quaternion();\r\n    /**\r\n     * Computes the spherical linear interpolation or extrapolation at t using the provided quaternions.\r\n     *\r\n     * @param {Quaternion} start The value corresponding to t at 0.0.\r\n     * @param {Quaternion} end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     *\r\n     * @see Quaternion#fastSlerp\r\n     */\r\n    Quaternion.slerp = function(start, end, t, result) {\r\n        \r\n\r\n        var dot = Quaternion.dot(start, end);\r\n\r\n        // The angle between start must be acute. Since q and -q represent\r\n        // the same rotation, negate q to get the acute angle.\r\n        var r = end;\r\n        if (dot < 0.0) {\r\n            dot = -dot;\r\n            r = slerpEndNegated = Quaternion.negate(end, slerpEndNegated);\r\n        }\r\n\r\n        // dot > 0, as the dot product approaches 1, the angle between the\r\n        // quaternions vanishes. use linear interpolation.\r\n        if (1.0 - dot < CesiumMath.EPSILON6) {\r\n            return Quaternion.lerp(start, r, t, result);\r\n        }\r\n\r\n        var theta = Math.acos(dot);\r\n        slerpScaledP = Quaternion.multiplyByScalar(start, Math.sin((1 - t) * theta), slerpScaledP);\r\n        slerpScaledR = Quaternion.multiplyByScalar(r, Math.sin(t * theta), slerpScaledR);\r\n        result = Quaternion.add(slerpScaledP, slerpScaledR, result);\r\n        return Quaternion.multiplyByScalar(result, 1.0 / Math.sin(theta), result);\r\n    };\r\n\r\n    /**\r\n     * The logarithmic quaternion function.\r\n     *\r\n     * @param {Quaternion} quaternion The unit quaternion.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Quaternion.log = function(quaternion, result) {\r\n        \r\n\r\n        var theta = CesiumMath.acosClamped(quaternion.w);\r\n        var thetaOverSinTheta = 0.0;\r\n\r\n        if (theta !== 0.0) {\r\n            thetaOverSinTheta = theta / Math.sin(theta);\r\n        }\r\n\r\n        return Cartesian3.multiplyByScalar(quaternion, thetaOverSinTheta, result);\r\n    };\r\n\r\n    /**\r\n     * The exponential quaternion function.\r\n     *\r\n     * @param {Cartesian3} cartesian The cartesian.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     */\r\n    Quaternion.exp = function(cartesian, result) {\r\n        \r\n\r\n        var theta = Cartesian3.magnitude(cartesian);\r\n        var sinThetaOverTheta = 0.0;\r\n\r\n        if (theta !== 0.0) {\r\n            sinThetaOverTheta = Math.sin(theta) / theta;\r\n        }\r\n\r\n        result.x = cartesian.x * sinThetaOverTheta;\r\n        result.y = cartesian.y * sinThetaOverTheta;\r\n        result.z = cartesian.z * sinThetaOverTheta;\r\n        result.w = Math.cos(theta);\r\n\r\n        return result;\r\n    };\r\n\r\n    var squadScratchCartesian0 = new Cartesian3();\r\n    var squadScratchCartesian1 = new Cartesian3();\r\n    var squadScratchQuaternion0 = new Quaternion();\r\n    var squadScratchQuaternion1 = new Quaternion();\r\n\r\n    /**\r\n     * Computes an inner quadrangle point.\r\n     * <p>This will compute quaternions that ensure a squad curve is C<sup>1</sup>.</p>\r\n     *\r\n     * @param {Quaternion} q0 The first quaternion.\r\n     * @param {Quaternion} q1 The second quaternion.\r\n     * @param {Quaternion} q2 The third quaternion.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     *\r\n     * @see Quaternion#squad\r\n     */\r\n    Quaternion.computeInnerQuadrangle = function(q0, q1, q2, result) {\r\n        \r\n\r\n        var qInv = Quaternion.conjugate(q1, squadScratchQuaternion0);\r\n        Quaternion.multiply(qInv, q2, squadScratchQuaternion1);\r\n        var cart0 = Quaternion.log(squadScratchQuaternion1, squadScratchCartesian0);\r\n\r\n        Quaternion.multiply(qInv, q0, squadScratchQuaternion1);\r\n        var cart1 = Quaternion.log(squadScratchQuaternion1, squadScratchCartesian1);\r\n\r\n        Cartesian3.add(cart0, cart1, cart0);\r\n        Cartesian3.multiplyByScalar(cart0, 0.25, cart0);\r\n        Cartesian3.negate(cart0, cart0);\r\n        Quaternion.exp(cart0, squadScratchQuaternion0);\r\n\r\n        return Quaternion.multiply(q1, squadScratchQuaternion0, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the spherical quadrangle interpolation between quaternions.\r\n     *\r\n     * @param {Quaternion} q0 The first quaternion.\r\n     * @param {Quaternion} q1 The second quaternion.\r\n     * @param {Quaternion} s0 The first inner quadrangle.\r\n     * @param {Quaternion} s1 The second inner quadrangle.\r\n     * @param {Number} t The time in [0,1] used to interpolate.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // 1. compute the squad interpolation between two quaternions on a curve\r\n     * var s0 = Cesium.Quaternion.computeInnerQuadrangle(quaternions[i - 1], quaternions[i], quaternions[i + 1], new Cesium.Quaternion());\r\n     * var s1 = Cesium.Quaternion.computeInnerQuadrangle(quaternions[i], quaternions[i + 1], quaternions[i + 2], new Cesium.Quaternion());\r\n     * var q = Cesium.Quaternion.squad(quaternions[i], quaternions[i + 1], s0, s1, t, new Cesium.Quaternion());\r\n     *\r\n     * // 2. compute the squad interpolation as above but where the first quaternion is a end point.\r\n     * var s1 = Cesium.Quaternion.computeInnerQuadrangle(quaternions[0], quaternions[1], quaternions[2], new Cesium.Quaternion());\r\n     * var q = Cesium.Quaternion.squad(quaternions[0], quaternions[1], quaternions[0], s1, t, new Cesium.Quaternion());\r\n     *\r\n     * @see Quaternion#computeInnerQuadrangle\r\n     */\r\n    Quaternion.squad = function(q0, q1, s0, s1, t, result) {\r\n        \r\n\r\n        var slerp0 = Quaternion.slerp(q0, q1, t, squadScratchQuaternion0);\r\n        var slerp1 = Quaternion.slerp(s0, s1, t, squadScratchQuaternion1);\r\n        return Quaternion.slerp(slerp0, slerp1, 2.0 * t * (1.0 - t), result);\r\n    };\r\n\r\n    var fastSlerpScratchQuaternion = new Quaternion();\r\n    var opmu = 1.90110745351730037;\r\n    var u = FeatureDetection.supportsTypedArrays() ? new Float32Array(8) : [];\r\n    var v = FeatureDetection.supportsTypedArrays() ? new Float32Array(8) : [];\r\n    var bT = FeatureDetection.supportsTypedArrays() ? new Float32Array(8) : [];\r\n    var bD = FeatureDetection.supportsTypedArrays() ? new Float32Array(8) : [];\r\n\r\n    for (var i = 0; i < 7; ++i) {\r\n        var s = i + 1.0;\r\n        var t = 2.0 * s + 1.0;\r\n        u[i] = 1.0 / (s * t);\r\n        v[i] = s / t;\r\n    }\r\n\r\n    u[7] = opmu / (8.0 * 17.0);\r\n    v[7] = opmu * 8.0 / 17.0;\r\n\r\n    /**\r\n     * Computes the spherical linear interpolation or extrapolation at t using the provided quaternions.\r\n     * This implementation is faster than {@link Quaternion#slerp}, but is only accurate up to 10<sup>-6</sup>.\r\n     *\r\n     * @param {Quaternion} start The value corresponding to t at 0.0.\r\n     * @param {Quaternion} end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter.\r\n     *\r\n     * @see Quaternion#slerp\r\n     */\r\n    Quaternion.fastSlerp = function(start, end, t, result) {\r\n        \r\n\r\n        var x = Quaternion.dot(start, end);\r\n\r\n        var sign;\r\n        if (x >= 0) {\r\n            sign = 1.0;\r\n        } else {\r\n            sign = -1.0;\r\n            x = -x;\r\n        }\r\n\r\n        var xm1 = x - 1.0;\r\n        var d = 1.0 - t;\r\n        var sqrT = t * t;\r\n        var sqrD = d * d;\r\n\r\n        for (var i = 7; i >= 0; --i) {\r\n            bT[i] = (u[i] * sqrT - v[i]) * xm1;\r\n            bD[i] = (u[i] * sqrD - v[i]) * xm1;\r\n        }\r\n\r\n        var cT = sign * t * (\r\n            1.0 + bT[0] * (1.0 + bT[1] * (1.0 + bT[2] * (1.0 + bT[3] * (\r\n            1.0 + bT[4] * (1.0 + bT[5] * (1.0 + bT[6] * (1.0 + bT[7]))))))));\r\n        var cD = d * (\r\n            1.0 + bD[0] * (1.0 + bD[1] * (1.0 + bD[2] * (1.0 + bD[3] * (\r\n            1.0 + bD[4] * (1.0 + bD[5] * (1.0 + bD[6] * (1.0 + bD[7]))))))));\r\n\r\n        var temp = Quaternion.multiplyByScalar(start, cD, fastSlerpScratchQuaternion);\r\n        Quaternion.multiplyByScalar(end, cT, result);\r\n        return Quaternion.add(temp, result, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the spherical quadrangle interpolation between quaternions.\r\n     * An implementation that is faster than {@link Quaternion#squad}, but less accurate.\r\n     *\r\n     * @param {Quaternion} q0 The first quaternion.\r\n     * @param {Quaternion} q1 The second quaternion.\r\n     * @param {Quaternion} s0 The first inner quadrangle.\r\n     * @param {Quaternion} s1 The second inner quadrangle.\r\n     * @param {Number} t The time in [0,1] used to interpolate.\r\n     * @param {Quaternion} result The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new instance if none was provided.\r\n     *\r\n     * @see Quaternion#squad\r\n     */\r\n    Quaternion.fastSquad = function(q0, q1, s0, s1, t, result) {\r\n        \r\n\r\n        var slerp0 = Quaternion.fastSlerp(q0, q1, t, squadScratchQuaternion0);\r\n        var slerp1 = Quaternion.fastSlerp(s0, s1, t, squadScratchQuaternion1);\r\n        return Quaternion.fastSlerp(slerp0, slerp1, 2.0 * t * (1.0 - t), result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided quaternions componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Quaternion} [left] The first quaternion.\r\n     * @param {Quaternion} [right] The second quaternion.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Quaternion.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.x === right.x) &&\r\n                (left.y === right.y) &&\r\n                (left.z === right.z) &&\r\n                (left.w === right.w));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided quaternions componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Quaternion} [left] The first quaternion.\r\n     * @param {Quaternion} [right] The second quaternion.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Quaternion.equalsEpsilon = function(left, right, epsilon) {\r\n        \r\n\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (Math.abs(left.x - right.x) <= epsilon) &&\r\n                (Math.abs(left.y - right.y) <= epsilon) &&\r\n                (Math.abs(left.z - right.z) <= epsilon) &&\r\n                (Math.abs(left.w - right.w) <= epsilon));\r\n    };\r\n\r\n    /**\r\n     * An immutable Quaternion instance initialized to (0.0, 0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Quaternion}\r\n     * @constant\r\n     */\r\n    Quaternion.ZERO = freezeObject(new Quaternion(0.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Quaternion instance initialized to (0.0, 0.0, 0.0, 1.0).\r\n     *\r\n     * @type {Quaternion}\r\n     * @constant\r\n     */\r\n    Quaternion.IDENTITY = freezeObject(new Quaternion(0.0, 0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * Duplicates this Quaternion instance.\r\n     *\r\n     * @param {Quaternion} [result] The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new Quaternion instance if one was not provided.\r\n     */\r\n    Quaternion.prototype.clone = function(result) {\r\n        return Quaternion.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this and the provided quaternion componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Quaternion} [right] The right hand side quaternion.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Quaternion.prototype.equals = function(right) {\r\n        return Quaternion.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this and the provided quaternion componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Quaternion} [right] The right hand side quaternion.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Quaternion.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Quaternion.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Returns a string representing this quaternion in the format (x, y, z, w).\r\n     *\r\n     * @returns {String} A string representing this Quaternion.\r\n     */\r\n    Quaternion.prototype.toString = function() {\r\n        return '(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';\r\n    };\r\n\r\n    return Quaternion;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Quaternion.js\n// module id = 27\n// module chunks = 0","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/buffer/index.js\n// module id = 28\n// module chunks = 0","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/inherits/inherits_browser.js\n// module id = 29\n// module chunks = 0","define([\r\n        '../ThirdParty/earcut-2.1.1',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './Math',\r\n        './PrimitiveType',\r\n        './WindingOrder'\r\n    ], function(\r\n        earcut,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        CesiumMath,\r\n        PrimitiveType,\r\n        WindingOrder) {\r\n    'use strict';\r\n\r\n    var scaleToGeodeticHeightN = new Cartesian3();\r\n    var scaleToGeodeticHeightP = new Cartesian3();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PolygonPipeline = {};\r\n\r\n    /**\r\n     * @exception {DeveloperError} At least three positions are required.\r\n     */\r\n    PolygonPipeline.computeArea2D = function(positions) {\r\n        \r\n\r\n        var length = positions.length;\r\n        var area = 0.0;\r\n\r\n        for ( var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\r\n            var v0 = positions[i0];\r\n            var v1 = positions[i1];\r\n\r\n            area += (v0.x * v1.y) - (v1.x * v0.y);\r\n        }\r\n\r\n        return area * 0.5;\r\n    };\r\n\r\n    /**\r\n     * @returns {WindingOrder} The winding order.\r\n     *\r\n     * @exception {DeveloperError} At least three positions are required.\r\n     */\r\n    PolygonPipeline.computeWindingOrder2D = function(positions) {\r\n        var area = PolygonPipeline.computeArea2D(positions);\r\n        return (area > 0.0) ? WindingOrder.COUNTER_CLOCKWISE : WindingOrder.CLOCKWISE;\r\n    };\r\n\r\n    /**\r\n     * Triangulate a polygon.\r\n     *\r\n     * @param {Cartesian2[]} positions Cartesian2 array containing the vertices of the polygon\r\n     * @param {Number[]} [holes] An array of the staring indices of the holes.\r\n     * @returns {Number[]} Index array representing triangles that fill the polygon\r\n     */\r\n    PolygonPipeline.triangulate = function(positions, holes) {\r\n        \r\n\r\n        var flattenedPositions = Cartesian2.packArray(positions);\r\n        return earcut(flattenedPositions, holes, 2);\r\n    };\r\n\r\n    var subdivisionV0Scratch = new Cartesian3();\r\n    var subdivisionV1Scratch = new Cartesian3();\r\n    var subdivisionV2Scratch = new Cartesian3();\r\n    var subdivisionS0Scratch = new Cartesian3();\r\n    var subdivisionS1Scratch = new Cartesian3();\r\n    var subdivisionS2Scratch = new Cartesian3();\r\n    var subdivisionMidScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Subdivides positions and raises points to the surface of the ellipsoid.\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid the polygon in on.\r\n     * @param {Cartesian3[]} positions An array of {@link Cartesian3} positions of the polygon.\r\n     * @param {Number[]} indices An array of indices that determines the triangles in the polygon.\r\n     * @param {Number} [granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     *\r\n     * @exception {DeveloperError} At least three indices are required.\r\n     * @exception {DeveloperError} The number of indices must be divisable by three.\r\n     * @exception {DeveloperError} Granularity must be greater than zero.\r\n     */\r\n    PolygonPipeline.computeSubdivision = function(ellipsoid, positions, indices, granularity) {\r\n        granularity = defaultValue(granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n\r\n        \r\n\r\n        // triangles that need (or might need) to be subdivided.\r\n        var triangles = indices.slice(0);\r\n\r\n        // New positions due to edge splits are appended to the positions list.\r\n        var i;\r\n        var length = positions.length;\r\n        var subdividedPositions = new Array(length * 3);\r\n        var q = 0;\r\n        for (i = 0; i < length; i++) {\r\n            var item = positions[i];\r\n            subdividedPositions[q++] = item.x;\r\n            subdividedPositions[q++] = item.y;\r\n            subdividedPositions[q++] = item.z;\r\n        }\r\n\r\n        var subdividedIndices = [];\r\n\r\n        // Used to make sure shared edges are not split more than once.\r\n        var edges = {};\r\n\r\n        var radius = ellipsoid.maximumRadius;\r\n        var minDistance = CesiumMath.chordLength(granularity, radius);\r\n        var minDistanceSqrd = minDistance * minDistance;\r\n\r\n        while (triangles.length > 0) {\r\n            var i2 = triangles.pop();\r\n            var i1 = triangles.pop();\r\n            var i0 = triangles.pop();\r\n\r\n            var v0 = Cartesian3.fromArray(subdividedPositions, i0 * 3, subdivisionV0Scratch);\r\n            var v1 = Cartesian3.fromArray(subdividedPositions, i1 * 3, subdivisionV1Scratch);\r\n            var v2 = Cartesian3.fromArray(subdividedPositions, i2 * 3, subdivisionV2Scratch);\r\n\r\n            var s0 = Cartesian3.multiplyByScalar(Cartesian3.normalize(v0, subdivisionS0Scratch), radius, subdivisionS0Scratch);\r\n            var s1 = Cartesian3.multiplyByScalar(Cartesian3.normalize(v1, subdivisionS1Scratch), radius, subdivisionS1Scratch);\r\n            var s2 = Cartesian3.multiplyByScalar(Cartesian3.normalize(v2, subdivisionS2Scratch), radius, subdivisionS2Scratch);\r\n\r\n            var g0 = Cartesian3.magnitudeSquared(Cartesian3.subtract(s0, s1, subdivisionMidScratch));\r\n            var g1 = Cartesian3.magnitudeSquared(Cartesian3.subtract(s1, s2, subdivisionMidScratch));\r\n            var g2 = Cartesian3.magnitudeSquared(Cartesian3.subtract(s2, s0, subdivisionMidScratch));\r\n\r\n            var max = Math.max(g0, g1, g2);\r\n            var edge;\r\n            var mid;\r\n\r\n            // if the max length squared of a triangle edge is greater than the chord length of squared\r\n            // of the granularity, subdivide the triangle\r\n            if (max > minDistanceSqrd) {\r\n                if (g0 === max) {\r\n                    edge = Math.min(i0, i1) + ' ' + Math.max(i0, i1);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = Cartesian3.add(v0, v1, subdivisionMidScratch);\r\n                        Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n                        subdividedPositions.push(mid.x, mid.y, mid.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i0, i, i2);\r\n                    triangles.push(i, i1, i2);\r\n                } else if (g1 === max) {\r\n                    edge = Math.min(i1, i2) + ' ' + Math.max(i1, i2);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = Cartesian3.add(v1, v2, subdivisionMidScratch);\r\n                        Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n                        subdividedPositions.push(mid.x, mid.y, mid.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i1, i, i0);\r\n                    triangles.push(i, i2, i0);\r\n                } else if (g2 === max) {\r\n                    edge = Math.min(i2, i0) + ' ' + Math.max(i2, i0);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = Cartesian3.add(v2, v0, subdivisionMidScratch);\r\n                        Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n                        subdividedPositions.push(mid.x, mid.y, mid.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i2, i, i1);\r\n                    triangles.push(i, i0, i1);\r\n                }\r\n            } else {\r\n                subdividedIndices.push(i0);\r\n                subdividedIndices.push(i1);\r\n                subdividedIndices.push(i2);\r\n            }\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : {\r\n                position : new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute : 3,\r\n                    values : subdividedPositions\r\n                })\r\n            },\r\n            indices : subdividedIndices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Scales each position of a geometry's position attribute to a height, in place.\r\n     *\r\n     * @param {Number[]} positions The array of numbers representing the positions to be scaled\r\n     * @param {Number} [height=0.0] The desired height to add to the positions\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n     * @param {Boolean} [scaleToSurface=true] <code>true</code> if the positions need to be scaled to the surface before the height is added.\r\n     * @returns {Number[]} The input array of positions, scaled to height\r\n     */\r\n    PolygonPipeline.scaleToGeodeticHeight = function(positions, height, ellipsoid, scaleToSurface) {\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var n = scaleToGeodeticHeightN;\r\n        var p = scaleToGeodeticHeightP;\r\n\r\n        height = defaultValue(height, 0.0);\r\n        scaleToSurface = defaultValue(scaleToSurface, true);\r\n\r\n        if (defined(positions)) {\r\n            var length = positions.length;\r\n\r\n            for ( var i = 0; i < length; i += 3) {\r\n                Cartesian3.fromArray(positions, i, p);\r\n\r\n                if (scaleToSurface) {\r\n                    p = ellipsoid.scaleToGeodeticSurface(p, p);\r\n                }\r\n\r\n                if (height !== 0) {\r\n                    n = ellipsoid.geodeticSurfaceNormal(p, n);\r\n\r\n                    Cartesian3.multiplyByScalar(n, height, n);\r\n                    Cartesian3.add(p, n, p);\r\n                }\r\n\r\n                positions[i] = p.x;\r\n                positions[i + 1] = p.y;\r\n                positions[i + 2] = p.z;\r\n            }\r\n        }\r\n\r\n        return positions;\r\n    };\r\n\r\n    return PolygonPipeline;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolygonPipeline.js\n// module id = 30\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-util-is/lib/util.js\n// module id = 31\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './Math'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    var removeDuplicatesEpsilon = CesiumMath.EPSILON10;\r\n\r\n    /**\r\n     * Removes adjacent duplicate values in an array of values.\r\n     *\r\n     * @param {Array.<*>} [values] The array of values.\r\n     * @param {Function} equalsEpsilon Function to compare values with an epsilon. Boolean equalsEpsilon(left, right, epsilon).\r\n     * @param {Boolean} [wrapAround=false] Compare the last value in the array against the first value.\r\n     * @returns {Array.<*>|undefined} A new array of values with no adjacent duplicate values or the input array if no duplicates were found.\r\n     *\r\n     * @example\r\n     * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0), (1.0, 1.0, 1.0)]\r\n     * var values = [\r\n     *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n     *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n     *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n     *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\r\n     *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\r\n     * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon);\r\n     *\r\n     * @example\r\n     * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0)]\r\n     * var values = [\r\n     *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n     *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n     *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n     *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\r\n     *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\r\n     * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon, true);\r\n     *\r\n     * @private\r\n     */\r\n    function arrayRemoveDuplicates(values, equalsEpsilon, wrapAround) {\r\n        \r\n\r\n        if (!defined(values)) {\r\n            return undefined;\r\n        }\r\n\r\n        wrapAround = defaultValue(wrapAround, false);\r\n\r\n        var length = values.length;\r\n        if (length < 2) {\r\n            return values;\r\n        }\r\n\r\n        var i;\r\n        var v0;\r\n        var v1;\r\n\r\n        for (i = 1; i < length; ++i) {\r\n            v0 = values[i - 1];\r\n            v1 = values[i];\r\n            if (equalsEpsilon(v0, v1, removeDuplicatesEpsilon)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (i === length) {\r\n            if (wrapAround && equalsEpsilon(values[0], values[values.length - 1], removeDuplicatesEpsilon)) {\r\n                return values.slice(1);\r\n            }\r\n            return values;\r\n        }\r\n\r\n        var cleanedvalues = values.slice(0, i);\r\n        for (; i < length; ++i) {\r\n            // v0 is set by either the previous loop, or the previous clean point.\r\n            v1 = values[i];\r\n            if (!equalsEpsilon(v0, v1, removeDuplicatesEpsilon)) {\r\n                cleanedvalues.push(v1);\r\n                v0 = v1;\r\n            }\r\n        }\r\n\r\n        if (wrapAround && cleanedvalues.length > 1 && equalsEpsilon(cleanedvalues[0], cleanedvalues[cleanedvalues.length - 1], removeDuplicatesEpsilon)) {\r\n            cleanedvalues.shift();\r\n        }\r\n\r\n        return cleanedvalues;\r\n    }\r\n\r\n    return arrayRemoveDuplicates;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/arrayRemoveDuplicates.js\n// module id = 32\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './freezeObject',\r\n        './Math'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        freezeObject,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A 4D Cartesian point.\r\n     * @alias Cartesian4\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The X component.\r\n     * @param {Number} [y=0.0] The Y component.\r\n     * @param {Number} [z=0.0] The Z component.\r\n     * @param {Number} [w=0.0] The W component.\r\n     *\r\n     * @see Cartesian2\r\n     * @see Cartesian3\r\n     * @see Packable\r\n     */\r\n    function Cartesian4(x, y, z, w) {\r\n        /**\r\n         * The X component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The Y component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n\r\n        /**\r\n         * The Z component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.z = defaultValue(z, 0.0);\r\n\r\n        /**\r\n         * The W component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.w = defaultValue(w, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a Cartesian4 instance from x, y, z and w coordinates.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {Number} z The z coordinate.\r\n     * @param {Number} w The w coordinate.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.fromElements = function(x, y, z, w, result) {\r\n        if (!defined(result)) {\r\n            return new Cartesian4(x, y, z, w);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian4 instance from a {@link Color}. <code>red</code>, <code>green</code>, <code>blue</code>,\r\n     * and <code>alpha</code> map to <code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>, respectively.\r\n     *\r\n     * @param {Color} color The source color.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.fromColor = function(color, result) {\r\n        \r\n        if (!defined(result)) {\r\n            return new Cartesian4(color.red, color.green, color.blue, color.alpha);\r\n        }\r\n\r\n        result.x = color.red;\r\n        result.y = color.green;\r\n        result.z = color.blue;\r\n        result.w = color.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartesian4 instance.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to duplicate.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n     */\r\n    Cartesian4.clone = function(cartesian, result) {\r\n        if (!defined(cartesian)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Cartesian4(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n        }\r\n\r\n        result.x = cartesian.x;\r\n        result.y = cartesian.y;\r\n        result.z = cartesian.z;\r\n        result.w = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Cartesian4.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Cartesian4} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Cartesian4.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex++] = value.y;\r\n        array[startingIndex++] = value.z;\r\n        array[startingIndex] = value.w;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Cartesian4} [result] The object into which to store the result.\r\n     * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian4();\r\n        }\r\n        result.x = array[startingIndex++];\r\n        result.y = array[startingIndex++];\r\n        result.z = array[startingIndex++];\r\n        result.w = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Flattens an array of Cartesian4s into and array of components.\r\n     *\r\n     * @param {Cartesian4[]} array The array of cartesians to pack.\r\n     * @param {Number[]} result The array onto which to store the result.\r\n     * @returns {Number[]} The packed array.\r\n     */\r\n    Cartesian4.packArray = function(array, result) {\r\n        \r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length * 4);\r\n        } else {\r\n            result.length = length * 4;\r\n        }\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            Cartesian4.pack(array[i], result, i * 4);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks an array of cartesian components into and array of Cartesian4s.\r\n     *\r\n     * @param {Number[]} array The array of components to unpack.\r\n     * @param {Cartesian4[]} result The array onto which to store the result.\r\n     * @returns {Cartesian4[]} The unpacked array.\r\n     */\r\n    Cartesian4.unpackArray = function(array, result) {\r\n        \r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 4);\r\n        } else {\r\n            result.length = length / 4;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 4) {\r\n            var index = i / 4;\r\n            result[index] = Cartesian4.unpack(array, i, result[index]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian4 from four consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose four consecutive elements correspond to the x, y, z, and w components, respectively.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0)\r\n     * var v = [1.0, 2.0, 3.0, 4.0];\r\n     * var p = Cesium.Cartesian4.fromArray(v);\r\n     *\r\n     * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0) using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 2.0, 3.0, 4.0];\r\n     * var p2 = Cesium.Cartesian4.fromArray(v2, 2);\r\n     */\r\n    Cartesian4.fromArray = Cartesian4.unpack;\r\n\r\n    /**\r\n     * Computes the value of the maximum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the maximum component.\r\n     */\r\n    Cartesian4.maximumComponent = function(cartesian) {\r\n        \r\n\r\n        return Math.max(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n    };\r\n\r\n    /**\r\n     * Computes the value of the minimum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the minimum component.\r\n     */\r\n    Cartesian4.minimumComponent = function(cartesian) {\r\n        \r\n\r\n        return Math.min(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian4} first A cartesian to compare.\r\n     * @param {Cartesian4} second A cartesian to compare.\r\n     * @param {Cartesian4} result The object into which to store the result.\r\n     * @returns {Cartesian4} A cartesian with the minimum components.\r\n     */\r\n    Cartesian4.minimumByComponent = function(first, second, result) {\r\n        \r\n\r\n        result.x = Math.min(first.x, second.x);\r\n        result.y = Math.min(first.y, second.y);\r\n        result.z = Math.min(first.z, second.z);\r\n        result.w = Math.min(first.w, second.w);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian4} first A cartesian to compare.\r\n     * @param {Cartesian4} second A cartesian to compare.\r\n     * @param {Cartesian4} result The object into which to store the result.\r\n     * @returns {Cartesian4} A cartesian with the maximum components.\r\n     */\r\n    Cartesian4.maximumByComponent = function(first, second, result) {\r\n        \r\n\r\n        result.x = Math.max(first.x, second.x);\r\n        result.y = Math.max(first.y, second.y);\r\n        result.z = Math.max(first.z, second.z);\r\n        result.w = Math.max(first.w, second.w);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the provided Cartesian's squared magnitude.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n     * @returns {Number} The squared magnitude.\r\n     */\r\n    Cartesian4.magnitudeSquared = function(cartesian) {\r\n        \r\n\r\n        return cartesian.x * cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z + cartesian.w * cartesian.w;\r\n    };\r\n\r\n    /**\r\n     * Computes the Cartesian's magnitude (length).\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian instance whose magnitude is to be computed.\r\n     * @returns {Number} The magnitude.\r\n     */\r\n    Cartesian4.magnitude = function(cartesian) {\r\n        return Math.sqrt(Cartesian4.magnitudeSquared(cartesian));\r\n    };\r\n\r\n    var distanceScratch = new Cartesian4();\r\n\r\n    /**\r\n     * Computes the 4-space distance between two points.\r\n     *\r\n     * @param {Cartesian4} left The first point to compute the distance from.\r\n     * @param {Cartesian4} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 1.0\r\n     * var d = Cesium.Cartesian4.distance(\r\n     *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\r\n     *   new Cesium.Cartesian4(2.0, 0.0, 0.0, 0.0));\r\n     */\r\n    Cartesian4.distance = function(left, right) {\r\n        \r\n\r\n        Cartesian4.subtract(left, right, distanceScratch);\r\n        return Cartesian4.magnitude(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the squared distance between two points.  Comparing squared distances\r\n     * using this function is more efficient than comparing distances using {@link Cartesian4#distance}.\r\n     *\r\n     * @param {Cartesian4} left The first point to compute the distance from.\r\n     * @param {Cartesian4} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 4.0, not 2.0\r\n     * var d = Cesium.Cartesian4.distance(\r\n     *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\r\n     *   new Cesium.Cartesian4(3.0, 0.0, 0.0, 0.0));\r\n     */\r\n    Cartesian4.distanceSquared = function(left, right) {\r\n        \r\n\r\n        Cartesian4.subtract(left, right, distanceScratch);\r\n        return Cartesian4.magnitudeSquared(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized form of the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be normalized.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.normalize = function(cartesian, result) {\r\n        \r\n\r\n        var magnitude = Cartesian4.magnitude(cartesian);\r\n\r\n        result.x = cartesian.x / magnitude;\r\n        result.y = cartesian.y / magnitude;\r\n        result.z = cartesian.z / magnitude;\r\n        result.w = cartesian.w / magnitude;\r\n\r\n        \r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the dot (scalar) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @returns {Number} The dot product.\r\n     */\r\n    Cartesian4.dot = function(left, right) {\r\n        \r\n\r\n        return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.multiplyComponents = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x * right.x;\r\n        result.y = left.y * right.y;\r\n        result.z = left.z * right.z;\r\n        result.w = left.w * right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.divideComponents = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x / right.x;\r\n        result.y = left.y / right.y;\r\n        result.z = left.z / right.z;\r\n        result.w = left.w / right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.add = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x + right.x;\r\n        result.y = left.y + right.y;\r\n        result.z = left.z + right.z;\r\n        result.w = left.w + right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.subtract = function(left, right, result) {\r\n        \r\n\r\n        result.x = left.x - right.x;\r\n        result.y = left.y - right.y;\r\n        result.z = left.z - right.z;\r\n        result.w = left.w - right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.multiplyByScalar = function(cartesian, scalar, result) {\r\n        \r\n\r\n        result.x = cartesian.x * scalar;\r\n        result.y = cartesian.y * scalar;\r\n        result.z = cartesian.z * scalar;\r\n        result.w = cartesian.w * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be divided.\r\n     * @param {Number} scalar The scalar to divide by.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.divideByScalar = function(cartesian, scalar, result) {\r\n        \r\n\r\n        result.x = cartesian.x / scalar;\r\n        result.y = cartesian.y / scalar;\r\n        result.z = cartesian.z / scalar;\r\n        result.w = cartesian.w / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Negates the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be negated.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.negate = function(cartesian, result) {\r\n        \r\n\r\n        result.x = -cartesian.x;\r\n        result.y = -cartesian.y;\r\n        result.z = -cartesian.z;\r\n        result.w = -cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the absolute value of the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian whose absolute value is to be computed.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.abs = function(cartesian, result) {\r\n        \r\n\r\n        result.x = Math.abs(cartesian.x);\r\n        result.y = Math.abs(cartesian.y);\r\n        result.z = Math.abs(cartesian.z);\r\n        result.w = Math.abs(cartesian.w);\r\n        return result;\r\n    };\r\n\r\n    var lerpScratch = new Cartesian4();\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n     *\r\n     * @param {Cartesian4} start The value corresponding to t at 0.0.\r\n     * @param {Cartesian4}end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.lerp = function(start, end, t, result) {\r\n        \r\n\r\n        Cartesian4.multiplyByScalar(end, t, lerpScratch);\r\n        result = Cartesian4.multiplyByScalar(start, 1.0 - t, result);\r\n        return Cartesian4.add(lerpScratch, result, result);\r\n    };\r\n\r\n    var mostOrthogonalAxisScratch = new Cartesian4();\r\n    /**\r\n     * Returns the axis that is most orthogonal to the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian on which to find the most orthogonal axis.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The most orthogonal axis.\r\n     */\r\n    Cartesian4.mostOrthogonalAxis = function(cartesian, result) {\r\n        \r\n\r\n        var f = Cartesian4.normalize(cartesian, mostOrthogonalAxisScratch);\r\n        Cartesian4.abs(f, f);\r\n\r\n        if (f.x <= f.y) {\r\n            if (f.x <= f.z) {\r\n                if (f.x <= f.w) {\r\n                    result = Cartesian4.clone(Cartesian4.UNIT_X, result);\r\n                } else {\r\n                    result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n                }\r\n            } else if (f.z <= f.w) {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\r\n            } else {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n            }\r\n        } else if (f.y <= f.z) {\r\n            if (f.y <= f.w) {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_Y, result);\r\n            } else {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n            }\r\n        } else if (f.z <= f.w) {\r\n            result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\r\n        } else {\r\n            result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [left] The first Cartesian.\r\n     * @param {Cartesian4} [right] The second Cartesian.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.x === right.x) &&\r\n                (left.y === right.y) &&\r\n                (left.z === right.z) &&\r\n                (left.w === right.w));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Cartesian4.equalsArray = function(cartesian, array, offset) {\r\n        return cartesian.x === array[offset] &&\r\n               cartesian.y === array[offset + 1] &&\r\n               cartesian.z === array[offset + 2] &&\r\n               cartesian.w === array[offset + 3];\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [left] The first Cartesian.\r\n     * @param {Cartesian4} [right] The second Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                CesiumMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.w, right.w, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.ZERO = freezeObject(new Cartesian4(0.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (1.0, 0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_X = freezeObject(new Cartesian4(1.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 1.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_Y = freezeObject(new Cartesian4(0.0, 1.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 1.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_Z = freezeObject(new Cartesian4(0.0, 0.0, 1.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 1.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_W = freezeObject(new Cartesian4(0.0, 0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * Duplicates this Cartesian4 instance.\r\n     *\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.prototype.clone = function(result) {\r\n        return Cartesian4.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [right] The right hand side Cartesian.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.prototype.equals = function(right) {\r\n        return Cartesian4.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [right] The right hand side Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {\r\n        return Cartesian4.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Cartesian in the format '(x, y)'.\r\n     *\r\n     * @returns {String} A string representing the provided Cartesian in the format '(x, y)'.\r\n     */\r\n    Cartesian4.prototype.toString = function() {\r\n        return '(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';\r\n    };\r\n\r\n    var scratchFloatArray = new Float32Array(1);\r\n    var SHIFT_LEFT_8 = 256.0;\r\n    var SHIFT_LEFT_16 = 65536.0;\r\n    var SHIFT_LEFT_24 = 16777216.0;\r\n\r\n    var SHIFT_RIGHT_8 = 1.0 / SHIFT_LEFT_8;\r\n    var SHIFT_RIGHT_16 = 1.0 / SHIFT_LEFT_16;\r\n    var SHIFT_RIGHT_24 = 1.0 / SHIFT_LEFT_24;\r\n\r\n    var BIAS = 38.0;\r\n\r\n    /**\r\n     * Packs an arbitrary floating point value to 4 values representable using uint8.\r\n     *\r\n     * @param {Number} value A floating point number\r\n     * @param {Cartesian4} [result] The Cartesian4 that will contain the packed float.\r\n     * @returns {Cartesian4} A Cartesian4 representing the float packed to values in x, y, z, and w.\r\n     */\r\n    Cartesian4.packFloat = function(value, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian4();\r\n        }\r\n\r\n        // Force the value to 32 bit precision\r\n        scratchFloatArray[0] = value;\r\n        value = scratchFloatArray[0];\r\n\r\n        if (value === 0.0) {\r\n            return Cartesian4.clone(Cartesian4.ZERO, result);\r\n        }\r\n\r\n        var sign = value < 0.0 ? 1.0 : 0.0;\r\n        var exponent;\r\n\r\n        if (!isFinite(value)) {\r\n            value = 0.1;\r\n            exponent = BIAS;\r\n        } else {\r\n            value = Math.abs(value);\r\n            exponent = Math.floor(CesiumMath.logBase(value, 10)) + 1.0;\r\n            value = value / Math.pow(10.0, exponent);\r\n        }\r\n\r\n        var temp = value * SHIFT_LEFT_8;\r\n        result.x = Math.floor(temp);\r\n        temp = (temp - result.x) * SHIFT_LEFT_8;\r\n        result.y = Math.floor(temp);\r\n        temp = (temp - result.y) * SHIFT_LEFT_8;\r\n        result.z = Math.floor(temp);\r\n        result.w = (exponent + BIAS) * 2.0 + sign;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks a float packed using Cartesian4.packFloat.\r\n     *\r\n     * @param {Cartesian4} packedFloat A Cartesian4 containing a float packed to 4 values representable using uint8.\r\n     * @returns {Number} The unpacked float.\r\n     * @private\r\n     */\r\n    Cartesian4.unpackFloat = function(packedFloat) {\r\n        \r\n\r\n        var temp = packedFloat.w / 2.0;\r\n        var exponent = Math.floor(temp);\r\n        var sign = (temp - exponent) * 2.0;\r\n        exponent = exponent - BIAS;\r\n\r\n        sign = sign * 2.0 - 1.0;\r\n        sign = -sign;\r\n\r\n        if (exponent >= BIAS) {\r\n            return sign < 0.0 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\r\n        }\r\n\r\n        var unpacked = sign * packedFloat.x * SHIFT_RIGHT_8;\r\n        unpacked += sign * packedFloat.y * SHIFT_RIGHT_16;\r\n        unpacked += sign * packedFloat.z * SHIFT_RIGHT_24;\r\n\r\n        return unpacked * Math.pow(10.0, exponent);\r\n    };\r\n\r\n    return Cartesian4;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Cartesian4.js\n// module id = 33\n// module chunks = 0","define([\r\n        './AttributeCompression',\r\n        './barycentricCoordinates',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './Cartographic',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './EncodedCartesian3',\r\n        './GeographicProjection',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryType',\r\n        './IndexDatatype',\r\n        './Intersect',\r\n        './IntersectionTests',\r\n        './Math',\r\n        './Matrix3',\r\n        './Matrix4',\r\n        './Plane',\r\n        './PrimitiveType',\r\n        './Tipsify'\r\n    ], function(\r\n        AttributeCompression,\r\n        barycentricCoordinates,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartesian4,\r\n        Cartographic,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        EncodedCartesian3,\r\n        GeographicProjection,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryType,\r\n        IndexDatatype,\r\n        Intersect,\r\n        IntersectionTests,\r\n        CesiumMath,\r\n        Matrix3,\r\n        Matrix4,\r\n        Plane,\r\n        PrimitiveType,\r\n        Tipsify) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Content pipeline functions for geometries.\r\n     *\r\n     * @exports GeometryPipeline\r\n     *\r\n     * @see Geometry\r\n     */\r\n    var GeometryPipeline = {};\r\n\r\n    function addTriangle(lines, index, i0, i1, i2) {\r\n        lines[index++] = i0;\r\n        lines[index++] = i1;\r\n\r\n        lines[index++] = i1;\r\n        lines[index++] = i2;\r\n\r\n        lines[index++] = i2;\r\n        lines[index] = i0;\r\n    }\r\n\r\n    function trianglesToLines(triangles) {\r\n        var count = triangles.length;\r\n        var size = (count / 3) * 6;\r\n        var lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n        var index = 0;\r\n        for ( var i = 0; i < count; i += 3, index += 6) {\r\n            addTriangle(lines, index, triangles[i], triangles[i + 1], triangles[i + 2]);\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    function triangleStripToLines(triangles) {\r\n        var count = triangles.length;\r\n        if (count >= 3) {\r\n            var size = (count - 2) * 6;\r\n            var lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n            addTriangle(lines, 0, triangles[0], triangles[1], triangles[2]);\r\n            var index = 6;\r\n\r\n            for ( var i = 3; i < count; ++i, index += 6) {\r\n                addTriangle(lines, index, triangles[i - 1], triangles[i], triangles[i - 2]);\r\n            }\r\n\r\n            return lines;\r\n        }\r\n\r\n        return new Uint16Array();\r\n    }\r\n\r\n    function triangleFanToLines(triangles) {\r\n        if (triangles.length > 0) {\r\n            var count = triangles.length - 1;\r\n            var size = (count - 1) * 6;\r\n            var lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n            var base = triangles[0];\r\n            var index = 0;\r\n            for ( var i = 1; i < count; ++i, index += 6) {\r\n                addTriangle(lines, index, base, triangles[i], triangles[i + 1]);\r\n            }\r\n\r\n            return lines;\r\n        }\r\n\r\n        return new Uint16Array();\r\n    }\r\n\r\n    /**\r\n     * Converts a geometry's triangle indices to line indices.  If the geometry has an <code>indices</code>\r\n     * and its <code>primitiveType</code> is <code>TRIANGLES</code>, <code>TRIANGLE_STRIP</code>,\r\n     * <code>TRIANGLE_FAN</code>, it is converted to <code>LINES</code>; otherwise, the geometry is not changed.\r\n     * <p>\r\n     * This is commonly used to create a wireframe geometry for visual debugging.\r\n     * </p>\r\n     *\r\n     * @param {Geometry} geometry The geometry to modify.\r\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its triangle indices converted to lines.\r\n     *\r\n     * @exception {DeveloperError} geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.\r\n     *\r\n     * @example\r\n     * geometry = Cesium.GeometryPipeline.toWireframe(geometry);\r\n     */\r\n    GeometryPipeline.toWireframe = function(geometry) {\r\n        \r\n\r\n        var indices = geometry.indices;\r\n        if (defined(indices)) {\r\n            switch (geometry.primitiveType) {\r\n                case PrimitiveType.TRIANGLES:\r\n                    geometry.indices = trianglesToLines(indices);\r\n                    break;\r\n                case PrimitiveType.TRIANGLE_STRIP:\r\n                    geometry.indices = triangleStripToLines(indices);\r\n                    break;\r\n                case PrimitiveType.TRIANGLE_FAN:\r\n                    geometry.indices = triangleFanToLines(indices);\r\n                    break;\r\n                \r\n            }\r\n\r\n            geometry.primitiveType = PrimitiveType.LINES;\r\n        }\r\n\r\n        return geometry;\r\n    };\r\n\r\n    /**\r\n     * Creates a new {@link Geometry} with <code>LINES</code> representing the provided\r\n     * attribute (<code>attributeName</code>) for the provided geometry.  This is used to\r\n     * visualize vector attributes like normals, tangents, and bitangents.\r\n     *\r\n     * @param {Geometry} geometry The <code>Geometry</code> instance with the attribute.\r\n     * @param {String} [attributeName='normal'] The name of the attribute.\r\n     * @param {Number} [length=10000.0] The length of each line segment in meters.  This can be negative to point the vector in the opposite direction.\r\n     * @returns {Geometry} A new <code>Geometry</code> instance with line segments for the vector.\r\n     *\r\n     * @exception {DeveloperError} geometry.attributes must have an attribute with the same name as the attributeName parameter.\r\n     *\r\n     * @example\r\n     * var geometry = Cesium.GeometryPipeline.createLineSegmentsForVectors(instance.geometry, 'bitangent', 100000.0);\r\n     */\r\n    GeometryPipeline.createLineSegmentsForVectors = function(geometry, attributeName, length) {\r\n        attributeName = defaultValue(attributeName, 'normal');\r\n\r\n        \r\n\r\n        length = defaultValue(length, 10000.0);\r\n\r\n        var positions = geometry.attributes.position.values;\r\n        var vectors = geometry.attributes[attributeName].values;\r\n        var positionsLength = positions.length;\r\n\r\n        var newPositions = new Float64Array(2 * positionsLength);\r\n\r\n        var j = 0;\r\n        for (var i = 0; i < positionsLength; i += 3) {\r\n            newPositions[j++] = positions[i];\r\n            newPositions[j++] = positions[i + 1];\r\n            newPositions[j++] = positions[i + 2];\r\n\r\n            newPositions[j++] = positions[i] + (vectors[i] * length);\r\n            newPositions[j++] = positions[i + 1] + (vectors[i + 1] * length);\r\n            newPositions[j++] = positions[i + 2] + (vectors[i + 2] * length);\r\n        }\r\n\r\n        var newBoundingSphere;\r\n        var bs = geometry.boundingSphere;\r\n        if (defined(bs)) {\r\n            newBoundingSphere = new BoundingSphere(bs.center, bs.radius + length);\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : {\r\n                position : new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute : 3,\r\n                    values : newPositions\r\n                })\r\n            },\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : newBoundingSphere\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates an object that maps attribute names to unique locations (indices)\r\n     * for matching vertex attributes and shader programs.\r\n     *\r\n     * @param {Geometry} geometry The geometry, which is not modified, to create the object for.\r\n     * @returns {Object} An object with attribute name / index pairs.\r\n     *\r\n     * @example\r\n     * var attributeLocations = Cesium.GeometryPipeline.createAttributeLocations(geometry);\r\n     * // Example output\r\n     * // {\r\n     * //   'position' : 0,\r\n     * //   'normal' : 1\r\n     * // }\r\n     */\r\n    GeometryPipeline.createAttributeLocations = function(geometry) {\r\n        \r\n\r\n        // There can be a WebGL performance hit when attribute 0 is disabled, so\r\n        // assign attribute locations to well-known attributes.\r\n        var semantics = [\r\n            'position',\r\n            'positionHigh',\r\n            'positionLow',\r\n\r\n            // From VertexFormat.position - after 2D projection and high-precision encoding\r\n            'position3DHigh',\r\n            'position3DLow',\r\n            'position2DHigh',\r\n            'position2DLow',\r\n\r\n            // From Primitive\r\n            'pickColor',\r\n\r\n            // From VertexFormat\r\n            'normal',\r\n            'st',\r\n            'tangent',\r\n            'bitangent',\r\n\r\n            // For shadow volumes\r\n            'extrudeDirection',\r\n\r\n            // From compressing texture coordinates and normals\r\n            'compressedAttributes'\r\n        ];\r\n\r\n        var attributes = geometry.attributes;\r\n        var indices = {};\r\n        var j = 0;\r\n        var i;\r\n        var len = semantics.length;\r\n\r\n        // Attribute locations for well-known attributes\r\n        for (i = 0; i < len; ++i) {\r\n            var semantic = semantics[i];\r\n\r\n            if (defined(attributes[semantic])) {\r\n                indices[semantic] = j++;\r\n            }\r\n        }\r\n\r\n        // Locations for custom attributes\r\n        for (var name in attributes) {\r\n            if (attributes.hasOwnProperty(name) && (!defined(indices[name]))) {\r\n                indices[name] = j++;\r\n            }\r\n        }\r\n\r\n        return indices;\r\n    };\r\n\r\n    /**\r\n     * Reorders a geometry's attributes and <code>indices</code> to achieve better performance from the GPU's pre-vertex-shader cache.\r\n     *\r\n     * @param {Geometry} geometry The geometry to modify.\r\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its attributes and indices reordered for the GPU's pre-vertex-shader cache.\r\n     *\r\n     * @exception {DeveloperError} Each attribute array in geometry.attributes must have the same number of attributes.\r\n     *\r\n     *\r\n     * @example\r\n     * geometry = Cesium.GeometryPipeline.reorderForPreVertexCache(geometry);\r\n     *\r\n     * @see GeometryPipeline.reorderForPostVertexCache\r\n     */\r\n    GeometryPipeline.reorderForPreVertexCache = function(geometry) {\r\n        \r\n\r\n        var numVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n        var indices = geometry.indices;\r\n        if (defined(indices)) {\r\n            var indexCrossReferenceOldToNew = new Int32Array(numVertices);\r\n            for ( var i = 0; i < numVertices; i++) {\r\n                indexCrossReferenceOldToNew[i] = -1;\r\n            }\r\n\r\n            // Construct cross reference and reorder indices\r\n            var indicesIn = indices;\r\n            var numIndices = indicesIn.length;\r\n            var indicesOut = IndexDatatype.createTypedArray(numVertices, numIndices);\r\n\r\n            var intoIndicesIn = 0;\r\n            var intoIndicesOut = 0;\r\n            var nextIndex = 0;\r\n            var tempIndex;\r\n            while (intoIndicesIn < numIndices) {\r\n                tempIndex = indexCrossReferenceOldToNew[indicesIn[intoIndicesIn]];\r\n                if (tempIndex !== -1) {\r\n                    indicesOut[intoIndicesOut] = tempIndex;\r\n                } else {\r\n                    tempIndex = indicesIn[intoIndicesIn];\r\n                    indexCrossReferenceOldToNew[tempIndex] = nextIndex;\r\n\r\n                    indicesOut[intoIndicesOut] = nextIndex;\r\n                    ++nextIndex;\r\n                }\r\n                ++intoIndicesIn;\r\n                ++intoIndicesOut;\r\n            }\r\n            geometry.indices = indicesOut;\r\n\r\n            // Reorder attributes\r\n            var attributes = geometry.attributes;\r\n            for ( var property in attributes) {\r\n                if (attributes.hasOwnProperty(property) &&\r\n                        defined(attributes[property]) &&\r\n                        defined(attributes[property].values)) {\r\n\r\n                    var attribute = attributes[property];\r\n                    var elementsIn = attribute.values;\r\n                    var intoElementsIn = 0;\r\n                    var numComponents = attribute.componentsPerAttribute;\r\n                    var elementsOut = ComponentDatatype.createTypedArray(attribute.componentDatatype, nextIndex * numComponents);\r\n                    while (intoElementsIn < numVertices) {\r\n                        var temp = indexCrossReferenceOldToNew[intoElementsIn];\r\n                        if (temp !== -1) {\r\n                            for (var j = 0; j < numComponents; j++) {\r\n                                elementsOut[numComponents * temp + j] = elementsIn[numComponents * intoElementsIn + j];\r\n                            }\r\n                        }\r\n                        ++intoElementsIn;\r\n                    }\r\n                    attribute.values = elementsOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return geometry;\r\n    };\r\n\r\n    /**\r\n     * Reorders a geometry's <code>indices</code> to achieve better performance from the GPU's\r\n     * post vertex-shader cache by using the Tipsify algorithm.  If the geometry <code>primitiveType</code>\r\n     * is not <code>TRIANGLES</code> or the geometry does not have an <code>indices</code>, this function has no effect.\r\n     *\r\n     * @param {Geometry} geometry The geometry to modify.\r\n     * @param {Number} [cacheCapacity=24] The number of vertices that can be held in the GPU's vertex cache.\r\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its indices reordered for the post-vertex-shader cache.\r\n     *\r\n     * @exception {DeveloperError} cacheCapacity must be greater than two.\r\n     *\r\n     *\r\n     * @example\r\n     * geometry = Cesium.GeometryPipeline.reorderForPostVertexCache(geometry);\r\n     *\r\n     * @see GeometryPipeline.reorderForPreVertexCache\r\n     * @see {@link http://gfx.cs.princ0eton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf|Fast Triangle Reordering for Vertex Locality and Reduced Overdraw}\r\n     * by Sander, Nehab, and Barczak\r\n     */\r\n    GeometryPipeline.reorderForPostVertexCache = function(geometry, cacheCapacity) {\r\n        \r\n\r\n        var indices = geometry.indices;\r\n        if ((geometry.primitiveType === PrimitiveType.TRIANGLES) && (defined(indices))) {\r\n            var numIndices = indices.length;\r\n            var maximumIndex = 0;\r\n            for ( var j = 0; j < numIndices; j++) {\r\n                if (indices[j] > maximumIndex) {\r\n                    maximumIndex = indices[j];\r\n                }\r\n            }\r\n            geometry.indices = Tipsify.tipsify({\r\n                indices : indices,\r\n                maximumIndex : maximumIndex,\r\n                cacheSize : cacheCapacity\r\n            });\r\n        }\r\n\r\n        return geometry;\r\n    };\r\n\r\n    function copyAttributesDescriptions(attributes) {\r\n        var newAttributes = {};\r\n\r\n        for ( var attribute in attributes) {\r\n            if (attributes.hasOwnProperty(attribute) &&\r\n                    defined(attributes[attribute]) &&\r\n                    defined(attributes[attribute].values)) {\r\n\r\n                var attr = attributes[attribute];\r\n                newAttributes[attribute] = new GeometryAttribute({\r\n                    componentDatatype : attr.componentDatatype,\r\n                    componentsPerAttribute : attr.componentsPerAttribute,\r\n                    normalize : attr.normalize,\r\n                    values : []\r\n                });\r\n            }\r\n        }\r\n\r\n        return newAttributes;\r\n    }\r\n\r\n    function copyVertex(destinationAttributes, sourceAttributes, index) {\r\n        for ( var attribute in sourceAttributes) {\r\n            if (sourceAttributes.hasOwnProperty(attribute) &&\r\n                    defined(sourceAttributes[attribute]) &&\r\n                    defined(sourceAttributes[attribute].values)) {\r\n\r\n                var attr = sourceAttributes[attribute];\r\n\r\n                for ( var k = 0; k < attr.componentsPerAttribute; ++k) {\r\n                    destinationAttributes[attribute].values.push(attr.values[(index * attr.componentsPerAttribute) + k]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Splits a geometry into multiple geometries, if necessary, to ensure that indices in the\r\n     * <code>indices</code> fit into unsigned shorts.  This is used to meet the WebGL requirements\r\n     * when unsigned int indices are not supported.\r\n     * <p>\r\n     * If the geometry does not have any <code>indices</code>, this function has no effect.\r\n     * </p>\r\n     *\r\n     * @param {Geometry} geometry The geometry to be split into multiple geometries.\r\n     * @returns {Geometry[]} An array of geometries, each with indices that fit into unsigned shorts.\r\n     *\r\n     * @exception {DeveloperError} geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS\r\n     * @exception {DeveloperError} All geometry attribute lists must have the same number of attributes.\r\n     *\r\n     * @example\r\n     * var geometries = Cesium.GeometryPipeline.fitToUnsignedShortIndices(geometry);\r\n     */\r\n    GeometryPipeline.fitToUnsignedShortIndices = function(geometry) {\r\n        \r\n\r\n        var geometries = [];\r\n\r\n        // If there's an index list and more than 64K attributes, it is possible that\r\n        // some indices are outside the range of unsigned short [0, 64K - 1]\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n        if (defined(geometry.indices) && (numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES)) {\r\n            var oldToNewIndex = [];\r\n            var newIndices = [];\r\n            var currentIndex = 0;\r\n            var newAttributes = copyAttributesDescriptions(geometry.attributes);\r\n\r\n            var originalIndices = geometry.indices;\r\n            var numberOfIndices = originalIndices.length;\r\n\r\n            var indicesPerPrimitive;\r\n\r\n            if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\r\n                indicesPerPrimitive = 3;\r\n            } else if (geometry.primitiveType === PrimitiveType.LINES) {\r\n                indicesPerPrimitive = 2;\r\n            } else if (geometry.primitiveType === PrimitiveType.POINTS) {\r\n                indicesPerPrimitive = 1;\r\n            }\r\n\r\n            for ( var j = 0; j < numberOfIndices; j += indicesPerPrimitive) {\r\n                for (var k = 0; k < indicesPerPrimitive; ++k) {\r\n                    var x = originalIndices[j + k];\r\n                    var i = oldToNewIndex[x];\r\n                    if (!defined(i)) {\r\n                        i = currentIndex++;\r\n                        oldToNewIndex[x] = i;\r\n                        copyVertex(newAttributes, geometry.attributes, x);\r\n                    }\r\n                    newIndices.push(i);\r\n                }\r\n\r\n                if (currentIndex + indicesPerPrimitive >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n                    geometries.push(new Geometry({\r\n                        attributes : newAttributes,\r\n                        indices : newIndices,\r\n                        primitiveType : geometry.primitiveType,\r\n                        boundingSphere : geometry.boundingSphere,\r\n                        boundingSphereCV : geometry.boundingSphereCV\r\n                    }));\r\n\r\n                    // Reset for next vertex-array\r\n                    oldToNewIndex = [];\r\n                    newIndices = [];\r\n                    currentIndex = 0;\r\n                    newAttributes = copyAttributesDescriptions(geometry.attributes);\r\n                }\r\n            }\r\n\r\n            if (newIndices.length !== 0) {\r\n                geometries.push(new Geometry({\r\n                    attributes : newAttributes,\r\n                    indices : newIndices,\r\n                    primitiveType : geometry.primitiveType,\r\n                    boundingSphere : geometry.boundingSphere,\r\n                    boundingSphereCV : geometry.boundingSphereCV\r\n                }));\r\n            }\r\n        } else {\r\n            // No need to split into multiple geometries\r\n            geometries.push(geometry);\r\n        }\r\n\r\n        return geometries;\r\n    };\r\n\r\n    var scratchProjectTo2DCartesian3 = new Cartesian3();\r\n    var scratchProjectTo2DCartographic = new Cartographic();\r\n\r\n    /**\r\n     * Projects a geometry's 3D <code>position</code> attribute to 2D, replacing the <code>position</code>\r\n     * attribute with separate <code>position3D</code> and <code>position2D</code> attributes.\r\n     * <p>\r\n     * If the geometry does not have a <code>position</code>, this function has no effect.\r\n     * </p>\r\n     *\r\n     * @param {Geometry} geometry The geometry to modify.\r\n     * @param {String} attributeName The name of the attribute.\r\n     * @param {String} attributeName3D The name of the attribute in 3D.\r\n     * @param {String} attributeName2D The name of the attribute in 2D.\r\n     * @param {Object} [projection=new GeographicProjection()] The projection to use.\r\n     * @returns {Geometry} The modified <code>geometry</code> argument with <code>position3D</code> and <code>position2D</code> attributes.\r\n     *\r\n     * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\r\n     * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\r\n     * @exception {DeveloperError} Could not project a point to 2D.\r\n     *\r\n     * @example\r\n     * geometry = Cesium.GeometryPipeline.projectTo2D(geometry, 'position', 'position3D', 'position2D');\r\n     */\r\n    GeometryPipeline.projectTo2D = function(geometry, attributeName, attributeName3D, attributeName2D, projection) {\r\n        \r\n\r\n        var attribute = geometry.attributes[attributeName];\r\n        projection = (defined(projection)) ? projection : new GeographicProjection();\r\n        var ellipsoid = projection.ellipsoid;\r\n\r\n        // Project original values to 2D.\r\n        var values3D = attribute.values;\r\n        var projectedValues = new Float64Array(values3D.length);\r\n        var index = 0;\r\n\r\n        for ( var i = 0; i < values3D.length; i += 3) {\r\n            var value = Cartesian3.fromArray(values3D, i, scratchProjectTo2DCartesian3);\r\n\r\n            var lonLat = ellipsoid.cartesianToCartographic(value, scratchProjectTo2DCartographic);\r\n            \r\n\r\n            var projectedLonLat = projection.project(lonLat, scratchProjectTo2DCartesian3);\r\n\r\n            projectedValues[index++] = projectedLonLat.x;\r\n            projectedValues[index++] = projectedLonLat.y;\r\n            projectedValues[index++] = projectedLonLat.z;\r\n        }\r\n\r\n        // Rename original cartesians to WGS84 cartesians.\r\n        geometry.attributes[attributeName3D] = attribute;\r\n\r\n        // Replace original cartesians with 2D projected cartesians\r\n        geometry.attributes[attributeName2D] = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : projectedValues\r\n        });\r\n        delete geometry.attributes[attributeName];\r\n\r\n        return geometry;\r\n    };\r\n\r\n    var encodedResult = {\r\n        high : 0.0,\r\n        low : 0.0\r\n    };\r\n\r\n    /**\r\n     * Encodes floating-point geometry attribute values as two separate attributes to improve\r\n     * rendering precision.\r\n     * <p>\r\n     * This is commonly used to create high-precision position vertex attributes.\r\n     * </p>\r\n     *\r\n     * @param {Geometry} geometry The geometry to modify.\r\n     * @param {String} attributeName The name of the attribute.\r\n     * @param {String} attributeHighName The name of the attribute for the encoded high bits.\r\n     * @param {String} attributeLowName The name of the attribute for the encoded low bits.\r\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its encoded attribute.\r\n     *\r\n     * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\r\n     * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\r\n     *\r\n     * @example\r\n     * geometry = Cesium.GeometryPipeline.encodeAttribute(geometry, 'position3D', 'position3DHigh', 'position3DLow');\r\n     */\r\n    GeometryPipeline.encodeAttribute = function(geometry, attributeName, attributeHighName, attributeLowName) {\r\n        \r\n\r\n        var attribute = geometry.attributes[attributeName];\r\n        var values = attribute.values;\r\n        var length = values.length;\r\n        var highValues = new Float32Array(length);\r\n        var lowValues = new Float32Array(length);\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            EncodedCartesian3.encode(values[i], encodedResult);\r\n            highValues[i] = encodedResult.high;\r\n            lowValues[i] = encodedResult.low;\r\n        }\r\n\r\n        var componentsPerAttribute = attribute.componentsPerAttribute;\r\n\r\n        geometry.attributes[attributeHighName] = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : componentsPerAttribute,\r\n            values : highValues\r\n        });\r\n        geometry.attributes[attributeLowName] = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : componentsPerAttribute,\r\n            values : lowValues\r\n        });\r\n        delete geometry.attributes[attributeName];\r\n\r\n        return geometry;\r\n    };\r\n\r\n    var scratchCartesian3 = new Cartesian3();\r\n\r\n    function transformPoint(matrix, attribute) {\r\n        if (defined(attribute)) {\r\n            var values = attribute.values;\r\n            var length = values.length;\r\n            for (var i = 0; i < length; i += 3) {\r\n                Cartesian3.unpack(values, i, scratchCartesian3);\r\n                Matrix4.multiplyByPoint(matrix, scratchCartesian3, scratchCartesian3);\r\n                Cartesian3.pack(scratchCartesian3, values, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transformVector(matrix, attribute) {\r\n        if (defined(attribute)) {\r\n            var values = attribute.values;\r\n            var length = values.length;\r\n            for (var i = 0; i < length; i += 3) {\r\n                Cartesian3.unpack(values, i, scratchCartesian3);\r\n                Matrix3.multiplyByVector(matrix, scratchCartesian3, scratchCartesian3);\r\n                scratchCartesian3 = Cartesian3.normalize(scratchCartesian3, scratchCartesian3);\r\n                Cartesian3.pack(scratchCartesian3, values, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    var inverseTranspose = new Matrix4();\r\n    var normalMatrix = new Matrix3();\r\n\r\n    /**\r\n     * Transforms a geometry instance to world coordinates.  This changes\r\n     * the instance's <code>modelMatrix</code> to {@link Matrix4.IDENTITY} and transforms the\r\n     * following attributes if they are present: <code>position</code>, <code>normal</code>,\r\n     * <code>tangent</code>, and <code>bitangent</code>.\r\n     *\r\n     * @param {GeometryInstance} instance The geometry instance to modify.\r\n     * @returns {GeometryInstance} The modified <code>instance</code> argument, with its attributes transforms to world coordinates.\r\n     *\r\n     * @example\r\n     * Cesium.GeometryPipeline.transformToWorldCoordinates(instance);\r\n     */\r\n    GeometryPipeline.transformToWorldCoordinates = function(instance) {\r\n        \r\n\r\n        var modelMatrix = instance.modelMatrix;\r\n\r\n        if (Matrix4.equals(modelMatrix, Matrix4.IDENTITY)) {\r\n            // Already in world coordinates\r\n            return instance;\r\n        }\r\n\r\n        var attributes = instance.geometry.attributes;\r\n\r\n        // Transform attributes in known vertex formats\r\n        transformPoint(modelMatrix, attributes.position);\r\n        transformPoint(modelMatrix, attributes.prevPosition);\r\n        transformPoint(modelMatrix, attributes.nextPosition);\r\n\r\n        if ((defined(attributes.normal)) ||\r\n            (defined(attributes.tangent)) ||\r\n            (defined(attributes.bitangent))) {\r\n\r\n            Matrix4.inverse(modelMatrix, inverseTranspose);\r\n            Matrix4.transpose(inverseTranspose, inverseTranspose);\r\n            Matrix4.getRotation(inverseTranspose, normalMatrix);\r\n\r\n            transformVector(normalMatrix, attributes.normal);\r\n            transformVector(normalMatrix, attributes.tangent);\r\n            transformVector(normalMatrix, attributes.bitangent);\r\n        }\r\n\r\n        var boundingSphere = instance.geometry.boundingSphere;\r\n        if (defined(boundingSphere)) {\r\n            instance.geometry.boundingSphere = BoundingSphere.transform(boundingSphere, modelMatrix, boundingSphere);\r\n        }\r\n\r\n        instance.modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\r\n\r\n        return instance;\r\n    };\r\n\r\n    function findAttributesInAllGeometries(instances, propertyName) {\r\n        var length = instances.length;\r\n\r\n        var attributesInAllGeometries = {};\r\n\r\n        var attributes0 = instances[0][propertyName].attributes;\r\n        var name;\r\n\r\n        for (name in attributes0) {\r\n            if (attributes0.hasOwnProperty(name) &&\r\n                    defined(attributes0[name]) &&\r\n                    defined(attributes0[name].values)) {\r\n\r\n                var attribute = attributes0[name];\r\n                var numberOfComponents = attribute.values.length;\r\n                var inAllGeometries = true;\r\n\r\n                // Does this same attribute exist in all geometries?\r\n                for (var i = 1; i < length; ++i) {\r\n                    var otherAttribute = instances[i][propertyName].attributes[name];\r\n\r\n                    if ((!defined(otherAttribute)) ||\r\n                        (attribute.componentDatatype !== otherAttribute.componentDatatype) ||\r\n                        (attribute.componentsPerAttribute !== otherAttribute.componentsPerAttribute) ||\r\n                        (attribute.normalize !== otherAttribute.normalize)) {\r\n\r\n                        inAllGeometries = false;\r\n                        break;\r\n                    }\r\n\r\n                    numberOfComponents += otherAttribute.values.length;\r\n                }\r\n\r\n                if (inAllGeometries) {\r\n                    attributesInAllGeometries[name] = new GeometryAttribute({\r\n                        componentDatatype : attribute.componentDatatype,\r\n                        componentsPerAttribute : attribute.componentsPerAttribute,\r\n                        normalize : attribute.normalize,\r\n                        values : ComponentDatatype.createTypedArray(attribute.componentDatatype, numberOfComponents)\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return attributesInAllGeometries;\r\n    }\r\n\r\n    var tempScratch = new Cartesian3();\r\n\r\n    function combineGeometries(instances, propertyName) {\r\n        var length = instances.length;\r\n\r\n        var name;\r\n        var i;\r\n        var j;\r\n        var k;\r\n\r\n        var m = instances[0].modelMatrix;\r\n        var haveIndices = (defined(instances[0][propertyName].indices));\r\n        var primitiveType = instances[0][propertyName].primitiveType;\r\n\r\n        \r\n\r\n        // Find subset of attributes in all geometries\r\n        var attributes = findAttributesInAllGeometries(instances, propertyName);\r\n        var values;\r\n        var sourceValues;\r\n        var sourceValuesLength;\r\n\r\n        // Combine attributes from each geometry into a single typed array\r\n        for (name in attributes) {\r\n            if (attributes.hasOwnProperty(name)) {\r\n                values = attributes[name].values;\r\n\r\n                k = 0;\r\n                for (i = 0; i < length; ++i) {\r\n                    sourceValues = instances[i][propertyName].attributes[name].values;\r\n                    sourceValuesLength = sourceValues.length;\r\n\r\n                    for (j = 0; j < sourceValuesLength; ++j) {\r\n                        values[k++] = sourceValues[j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Combine index lists\r\n        var indices;\r\n\r\n        if (haveIndices) {\r\n            var numberOfIndices = 0;\r\n            for (i = 0; i < length; ++i) {\r\n                numberOfIndices += instances[i][propertyName].indices.length;\r\n            }\r\n\r\n            var numberOfVertices = Geometry.computeNumberOfVertices(new Geometry({\r\n                attributes : attributes,\r\n                primitiveType : PrimitiveType.POINTS\r\n            }));\r\n            var destIndices = IndexDatatype.createTypedArray(numberOfVertices, numberOfIndices);\r\n\r\n            var destOffset = 0;\r\n            var offset = 0;\r\n\r\n            for (i = 0; i < length; ++i) {\r\n                var sourceIndices = instances[i][propertyName].indices;\r\n                var sourceIndicesLen = sourceIndices.length;\r\n\r\n                for (k = 0; k < sourceIndicesLen; ++k) {\r\n                    destIndices[destOffset++] = offset + sourceIndices[k];\r\n                }\r\n\r\n                offset += Geometry.computeNumberOfVertices(instances[i][propertyName]);\r\n            }\r\n\r\n            indices = destIndices;\r\n        }\r\n\r\n        // Create bounding sphere that includes all instances\r\n        var center = new Cartesian3();\r\n        var radius = 0.0;\r\n        var bs;\r\n\r\n        for (i = 0; i < length; ++i) {\r\n            bs = instances[i][propertyName].boundingSphere;\r\n            if (!defined(bs)) {\r\n                // If any geometries have an undefined bounding sphere, then so does the combined geometry\r\n                center = undefined;\r\n                break;\r\n            }\r\n\r\n            Cartesian3.add(bs.center, center, center);\r\n        }\r\n\r\n        if (defined(center)) {\r\n            Cartesian3.divideByScalar(center, length, center);\r\n\r\n            for (i = 0; i < length; ++i) {\r\n                bs = instances[i][propertyName].boundingSphere;\r\n                var tempRadius = Cartesian3.magnitude(Cartesian3.subtract(bs.center, center, tempScratch)) + bs.radius;\r\n\r\n                if (tempRadius > radius) {\r\n                    radius = tempRadius;\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : primitiveType,\r\n            boundingSphere : (defined(center)) ? new BoundingSphere(center, radius) : undefined\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Combines geometry from several {@link GeometryInstance} objects into one geometry.\r\n     * This concatenates the attributes, concatenates and adjusts the indices, and creates\r\n     * a bounding sphere encompassing all instances.\r\n     * <p>\r\n     * If the instances do not have the same attributes, a subset of attributes common\r\n     * to all instances is used, and the others are ignored.\r\n     * </p>\r\n     * <p>\r\n     * This is used by {@link Primitive} to efficiently render a large amount of static data.\r\n     * </p>\r\n     *\r\n     * @private\r\n     *\r\n     * @param {GeometryInstance[]} [instances] The array of {@link GeometryInstance} objects whose geometry will be combined.\r\n     * @returns {Geometry} A single geometry created from the provided geometry instances.\r\n     *\r\n     * @exception {DeveloperError} All instances must have the same modelMatrix.\r\n     * @exception {DeveloperError} All instance geometries must have an indices or not have one.\r\n     * @exception {DeveloperError} All instance geometries must have the same primitiveType.\r\n     *\r\n     *\r\n     * @example\r\n     * for (var i = 0; i < instances.length; ++i) {\r\n     *   Cesium.GeometryPipeline.transformToWorldCoordinates(instances[i]);\r\n     * }\r\n     * var geometries = Cesium.GeometryPipeline.combineInstances(instances);\r\n     *\r\n     * @see GeometryPipeline.transformToWorldCoordinates\r\n     */\r\n    GeometryPipeline.combineInstances = function(instances) {\r\n        \r\n\r\n        var instanceGeometry = [];\r\n        var instanceSplitGeometry = [];\r\n        var length = instances.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            var instance = instances[i];\r\n\r\n            if (defined(instance.geometry)) {\r\n                instanceGeometry.push(instance);\r\n            } else if (defined(instance.westHemisphereGeometry) && defined(instance.eastHemisphereGeometry)) {\r\n                instanceSplitGeometry.push(instance);\r\n            }\r\n        }\r\n\r\n        var geometries = [];\r\n        if (instanceGeometry.length > 0) {\r\n            geometries.push(combineGeometries(instanceGeometry, 'geometry'));\r\n        }\r\n\r\n        if (instanceSplitGeometry.length > 0) {\r\n            geometries.push(combineGeometries(instanceSplitGeometry, 'westHemisphereGeometry'));\r\n            geometries.push(combineGeometries(instanceSplitGeometry, 'eastHemisphereGeometry'));\r\n        }\r\n\r\n        return geometries;\r\n    };\r\n\r\n    var normal = new Cartesian3();\r\n    var v0 = new Cartesian3();\r\n    var v1 = new Cartesian3();\r\n    var v2 = new Cartesian3();\r\n\r\n    /**\r\n     * Computes per-vertex normals for a geometry containing <code>TRIANGLES</code> by averaging the normals of\r\n     * all triangles incident to the vertex.  The result is a new <code>normal</code> attribute added to the geometry.\r\n     * This assumes a counter-clockwise winding order.\r\n     *\r\n     * @param {Geometry} geometry The geometry to modify.\r\n     * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>normal</code> attribute.\r\n     *\r\n     * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\r\n     * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\r\n     *\r\n     * @example\r\n     * Cesium.GeometryPipeline.computeNormal(geometry);\r\n     */\r\n    GeometryPipeline.computeNormal = function(geometry) {\r\n        \r\n\r\n        var indices = geometry.indices;\r\n        var attributes = geometry.attributes;\r\n        var vertices = attributes.position.values;\r\n        var numVertices = attributes.position.values.length / 3;\r\n        var numIndices = indices.length;\r\n        var normalsPerVertex = new Array(numVertices);\r\n        var normalsPerTriangle = new Array(numIndices / 3);\r\n        var normalIndices = new Array(numIndices);\r\n        var i;\r\n        for ( i = 0; i < numVertices; i++) {\r\n            normalsPerVertex[i] = {\r\n                indexOffset : 0,\r\n                count : 0,\r\n                currentCount : 0\r\n            };\r\n        }\r\n\r\n        var j = 0;\r\n        for (i = 0; i < numIndices; i += 3) {\r\n            var i0 = indices[i];\r\n            var i1 = indices[i + 1];\r\n            var i2 = indices[i + 2];\r\n            var i03 = i0 * 3;\r\n            var i13 = i1 * 3;\r\n            var i23 = i2 * 3;\r\n\r\n            v0.x = vertices[i03];\r\n            v0.y = vertices[i03 + 1];\r\n            v0.z = vertices[i03 + 2];\r\n            v1.x = vertices[i13];\r\n            v1.y = vertices[i13 + 1];\r\n            v1.z = vertices[i13 + 2];\r\n            v2.x = vertices[i23];\r\n            v2.y = vertices[i23 + 1];\r\n            v2.z = vertices[i23 + 2];\r\n\r\n            normalsPerVertex[i0].count++;\r\n            normalsPerVertex[i1].count++;\r\n            normalsPerVertex[i2].count++;\r\n\r\n            Cartesian3.subtract(v1, v0, v1);\r\n            Cartesian3.subtract(v2, v0, v2);\r\n            normalsPerTriangle[j] = Cartesian3.cross(v1, v2, new Cartesian3());\r\n            j++;\r\n        }\r\n\r\n        var indexOffset = 0;\r\n        for (i = 0; i < numVertices; i++) {\r\n            normalsPerVertex[i].indexOffset += indexOffset;\r\n            indexOffset += normalsPerVertex[i].count;\r\n        }\r\n\r\n        j = 0;\r\n        var vertexNormalData;\r\n        for (i = 0; i < numIndices; i += 3) {\r\n            vertexNormalData = normalsPerVertex[indices[i]];\r\n            var index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n            normalIndices[index] = j;\r\n            vertexNormalData.currentCount++;\r\n\r\n            vertexNormalData = normalsPerVertex[indices[i + 1]];\r\n            index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n            normalIndices[index] = j;\r\n            vertexNormalData.currentCount++;\r\n\r\n            vertexNormalData = normalsPerVertex[indices[i + 2]];\r\n            index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n            normalIndices[index] = j;\r\n            vertexNormalData.currentCount++;\r\n\r\n            j++;\r\n        }\r\n\r\n        var normalValues = new Float32Array(numVertices * 3);\r\n        for (i = 0; i < numVertices; i++) {\r\n            var i3 = i * 3;\r\n            vertexNormalData = normalsPerVertex[i];\r\n            Cartesian3.clone(Cartesian3.ZERO, normal);\r\n            if (vertexNormalData.count > 0) {\r\n                for (j = 0; j < vertexNormalData.count; j++) {\r\n                    Cartesian3.add(normal, normalsPerTriangle[normalIndices[vertexNormalData.indexOffset + j]], normal);\r\n                }\r\n\r\n                // We can run into an issue where a vertex is used with 2 primitives that have opposite winding order.\r\n                if (Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)) {\r\n                    Cartesian3.clone(normalsPerTriangle[normalIndices[vertexNormalData.indexOffset]], normal);\r\n                }\r\n            }\r\n\r\n            // We end up with a zero vector probably because of a degenerate triangle\r\n            if (Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)) {\r\n                // Default to (0,0,1)\r\n                normal.z = 1.0;\r\n            }\r\n\r\n            Cartesian3.normalize(normal, normal);\r\n            normalValues[i3] = normal.x;\r\n            normalValues[i3 + 1] = normal.y;\r\n            normalValues[i3 + 2] = normal.z;\r\n        }\r\n\r\n        geometry.attributes.normal = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : 3,\r\n            values : normalValues\r\n        });\r\n\r\n        return geometry;\r\n    };\r\n\r\n    var normalScratch = new Cartesian3();\r\n    var normalScale = new Cartesian3();\r\n    var tScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Computes per-vertex tangents and bitangents for a geometry containing <code>TRIANGLES</code>.\r\n     * The result is new <code>tangent</code> and <code>bitangent</code> attributes added to the geometry.\r\n     * This assumes a counter-clockwise winding order.\r\n     * <p>\r\n     * Based on <a href=\"http://www.terathon.com/code/tangent.html\">Computing Tangent Space Basis Vectors\r\n     * for an Arbitrary Mesh</a> by Eric Lengyel.\r\n     * </p>\r\n     *\r\n     * @param {Geometry} geometry The geometry to modify.\r\n     * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>tangent</code> and <code>bitangent</code> attributes.\r\n     *\r\n     * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\r\n     * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\r\n     *\r\n     * @example\r\n     * Cesium.GeometryPipeline.computeTangentAndBiTangent(geometry);\r\n     */\r\n    GeometryPipeline.computeTangentAndBitangent = function(geometry) {\r\n        \r\n\r\n        var attributes = geometry.attributes;\r\n        var indices = geometry.indices;\r\n\r\n        \r\n\r\n        var vertices = geometry.attributes.position.values;\r\n        var normals = geometry.attributes.normal.values;\r\n        var st = geometry.attributes.st.values;\r\n\r\n        var numVertices = geometry.attributes.position.values.length / 3;\r\n        var numIndices = indices.length;\r\n        var tan1 = new Array(numVertices * 3);\r\n\r\n        var i;\r\n        for ( i = 0; i < tan1.length; i++) {\r\n            tan1[i] = 0;\r\n        }\r\n\r\n        var i03;\r\n        var i13;\r\n        var i23;\r\n        for (i = 0; i < numIndices; i += 3) {\r\n            var i0 = indices[i];\r\n            var i1 = indices[i + 1];\r\n            var i2 = indices[i + 2];\r\n            i03 = i0 * 3;\r\n            i13 = i1 * 3;\r\n            i23 = i2 * 3;\r\n            var i02 = i0 * 2;\r\n            var i12 = i1 * 2;\r\n            var i22 = i2 * 2;\r\n\r\n            var ux = vertices[i03];\r\n            var uy = vertices[i03 + 1];\r\n            var uz = vertices[i03 + 2];\r\n\r\n            var wx = st[i02];\r\n            var wy = st[i02 + 1];\r\n            var t1 = st[i12 + 1] - wy;\r\n            var t2 = st[i22 + 1] - wy;\r\n\r\n            var r = 1.0 / ((st[i12] - wx) * t2 - (st[i22] - wx) * t1);\r\n            var sdirx = (t2 * (vertices[i13] - ux) - t1 * (vertices[i23] - ux)) * r;\r\n            var sdiry = (t2 * (vertices[i13 + 1] - uy) - t1 * (vertices[i23 + 1] - uy)) * r;\r\n            var sdirz = (t2 * (vertices[i13 + 2] - uz) - t1 * (vertices[i23 + 2] - uz)) * r;\r\n\r\n            tan1[i03] += sdirx;\r\n            tan1[i03 + 1] += sdiry;\r\n            tan1[i03 + 2] += sdirz;\r\n\r\n            tan1[i13] += sdirx;\r\n            tan1[i13 + 1] += sdiry;\r\n            tan1[i13 + 2] += sdirz;\r\n\r\n            tan1[i23] += sdirx;\r\n            tan1[i23 + 1] += sdiry;\r\n            tan1[i23 + 2] += sdirz;\r\n        }\r\n\r\n        var tangentValues = new Float32Array(numVertices * 3);\r\n        var bitangentValues = new Float32Array(numVertices * 3);\r\n\r\n        for (i = 0; i < numVertices; i++) {\r\n            i03 = i * 3;\r\n            i13 = i03 + 1;\r\n            i23 = i03 + 2;\r\n\r\n            var n = Cartesian3.fromArray(normals, i03, normalScratch);\r\n            var t = Cartesian3.fromArray(tan1, i03, tScratch);\r\n            var scalar = Cartesian3.dot(n, t);\r\n            Cartesian3.multiplyByScalar(n, scalar, normalScale);\r\n            Cartesian3.normalize(Cartesian3.subtract(t, normalScale, t), t);\r\n\r\n            tangentValues[i03] = t.x;\r\n            tangentValues[i13] = t.y;\r\n            tangentValues[i23] = t.z;\r\n\r\n            Cartesian3.normalize(Cartesian3.cross(n, t, t), t);\r\n\r\n            bitangentValues[i03] = t.x;\r\n            bitangentValues[i13] = t.y;\r\n            bitangentValues[i23] = t.z;\r\n        }\r\n\r\n        geometry.attributes.tangent = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : 3,\r\n            values : tangentValues\r\n        });\r\n\r\n        geometry.attributes.bitangent = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : 3,\r\n            values : bitangentValues\r\n        });\r\n\r\n        return geometry;\r\n    };\r\n\r\n    var scratchCartesian2 = new Cartesian2();\r\n    var toEncode1 = new Cartesian3();\r\n    var toEncode2 = new Cartesian3();\r\n    var toEncode3 = new Cartesian3();\r\n    var encodeResult2 = new Cartesian2();\r\n    /**\r\n     * Compresses and packs geometry normal attribute values to save memory.\r\n     *\r\n     * @param {Geometry} geometry The geometry to modify.\r\n     * @returns {Geometry} The modified <code>geometry</code> argument, with its normals compressed and packed.\r\n     *\r\n     * @example\r\n     * geometry = Cesium.GeometryPipeline.compressVertices(geometry);\r\n     */\r\n    GeometryPipeline.compressVertices = function(geometry) {\r\n        \r\n\r\n        var extrudeAttribute = geometry.attributes.extrudeDirection;\r\n        var i;\r\n        var numVertices;\r\n        if (defined(extrudeAttribute)) {\r\n            //only shadow volumes use extrudeDirection, and shadow volumes use vertexFormat: POSITION_ONLY so we don't need to check other attributes\r\n            var extrudeDirections = extrudeAttribute.values;\r\n            numVertices = extrudeDirections.length / 3.0;\r\n            var compressedDirections = new Float32Array(numVertices * 2);\r\n\r\n            var i2 = 0;\r\n            for (i = 0; i < numVertices; ++i) {\r\n                Cartesian3.fromArray(extrudeDirections, i * 3.0, toEncode1);\r\n                if (Cartesian3.equals(toEncode1, Cartesian3.ZERO)) {\r\n                    i2 += 2;\r\n                    continue;\r\n                }\r\n                encodeResult2 = AttributeCompression.octEncodeInRange(toEncode1, 65535, encodeResult2);\r\n                compressedDirections[i2++] = encodeResult2.x;\r\n                compressedDirections[i2++] = encodeResult2.y;\r\n            }\r\n\r\n            geometry.attributes.compressedAttributes = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : compressedDirections\r\n            });\r\n            delete geometry.attributes.extrudeDirection;\r\n            return geometry;\r\n        }\r\n\r\n        var normalAttribute = geometry.attributes.normal;\r\n        var stAttribute = geometry.attributes.st;\r\n\r\n        var hasNormal = defined(normalAttribute);\r\n        var hasSt = defined(stAttribute);\r\n        if (!hasNormal && !hasSt) {\r\n            return geometry;\r\n        }\r\n\r\n        var tangentAttribute = geometry.attributes.tangent;\r\n        var bitangentAttribute = geometry.attributes.bitangent;\r\n\r\n        var hasTangent = defined(tangentAttribute);\r\n        var hasBitangent = defined(bitangentAttribute);\r\n\r\n        var normals;\r\n        var st;\r\n        var tangents;\r\n        var bitangents;\r\n\r\n        if (hasNormal) {\r\n            normals = normalAttribute.values;\r\n        }\r\n        if (hasSt) {\r\n            st = stAttribute.values;\r\n        }\r\n        if (hasTangent) {\r\n            tangents = tangentAttribute.values;\r\n        }\r\n        if (hasBitangent) {\r\n            bitangents = bitangentAttribute.values;\r\n        }\r\n\r\n        var length = hasNormal ? normals.length : st.length;\r\n        var numComponents = hasNormal ? 3.0 : 2.0;\r\n        numVertices = length / numComponents;\r\n\r\n        var compressedLength = numVertices;\r\n        var numCompressedComponents = hasSt && hasNormal ? 2.0 : 1.0;\r\n        numCompressedComponents += hasTangent || hasBitangent ? 1.0 : 0.0;\r\n        compressedLength *= numCompressedComponents;\r\n\r\n        var compressedAttributes = new Float32Array(compressedLength);\r\n\r\n        var normalIndex = 0;\r\n        for (i = 0; i < numVertices; ++i) {\r\n            if (hasSt) {\r\n                Cartesian2.fromArray(st, i * 2.0, scratchCartesian2);\r\n                compressedAttributes[normalIndex++] = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\r\n            }\r\n\r\n            var index = i * 3.0;\r\n            if (hasNormal && defined(tangents) && defined(bitangents)) {\r\n                Cartesian3.fromArray(normals, index, toEncode1);\r\n                Cartesian3.fromArray(tangents, index, toEncode2);\r\n                Cartesian3.fromArray(bitangents, index, toEncode3);\r\n\r\n                AttributeCompression.octPack(toEncode1, toEncode2, toEncode3, scratchCartesian2);\r\n                compressedAttributes[normalIndex++] = scratchCartesian2.x;\r\n                compressedAttributes[normalIndex++] = scratchCartesian2.y;\r\n            } else {\r\n                if (hasNormal) {\r\n                    Cartesian3.fromArray(normals, index, toEncode1);\r\n                    compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\r\n                }\r\n\r\n                if (hasTangent) {\r\n                    Cartesian3.fromArray(tangents, index, toEncode1);\r\n                    compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\r\n                }\r\n\r\n                if (hasBitangent) {\r\n                    Cartesian3.fromArray(bitangents, index, toEncode1);\r\n                    compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\r\n                }\r\n            }\r\n        }\r\n\r\n        geometry.attributes.compressedAttributes = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : numCompressedComponents,\r\n            values : compressedAttributes\r\n        });\r\n\r\n        if (hasNormal) {\r\n            delete geometry.attributes.normal;\r\n        }\r\n        if (hasSt) {\r\n            delete geometry.attributes.st;\r\n        }\r\n        if (hasBitangent) {\r\n            delete geometry.attributes.bitangent;\r\n        }\r\n        if (hasTangent) {\r\n            delete geometry.attributes.tangent;\r\n        }\r\n\r\n        return geometry;\r\n    };\r\n\r\n    function indexTriangles(geometry) {\r\n        if (defined(geometry.indices)) {\r\n            return geometry;\r\n        }\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n        \r\n\r\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices);\r\n        for (var i = 0; i < numberOfVertices; ++i) {\r\n            indices[i] = i;\r\n        }\r\n\r\n        geometry.indices = indices;\r\n        return geometry;\r\n    }\r\n\r\n    function indexTriangleFan(geometry) {\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n        \r\n\r\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 2) * 3);\r\n        indices[0] = 1;\r\n        indices[1] = 0;\r\n        indices[2] = 2;\r\n\r\n        var indicesIndex = 3;\r\n        for (var i = 3; i < numberOfVertices; ++i) {\r\n            indices[indicesIndex++] = i - 1;\r\n            indices[indicesIndex++] = 0;\r\n            indices[indicesIndex++] = i;\r\n        }\r\n\r\n        geometry.indices = indices;\r\n        geometry.primitiveType = PrimitiveType.TRIANGLES;\r\n        return geometry;\r\n    }\r\n\r\n    function indexTriangleStrip(geometry) {\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n        \r\n\r\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 2) * 3);\r\n        indices[0] = 0;\r\n        indices[1] = 1;\r\n        indices[2] = 2;\r\n\r\n        if (numberOfVertices > 3) {\r\n            indices[3] = 0;\r\n            indices[4] = 2;\r\n            indices[5] = 3;\r\n        }\r\n\r\n        var indicesIndex = 6;\r\n        for (var i = 3; i < numberOfVertices - 1; i += 2) {\r\n            indices[indicesIndex++] = i;\r\n            indices[indicesIndex++] = i - 1;\r\n            indices[indicesIndex++] = i + 1;\r\n\r\n            if (i + 2 < numberOfVertices) {\r\n                indices[indicesIndex++] = i;\r\n                indices[indicesIndex++] = i + 1;\r\n                indices[indicesIndex++] = i + 2;\r\n            }\r\n        }\r\n\r\n        geometry.indices = indices;\r\n        geometry.primitiveType = PrimitiveType.TRIANGLES;\r\n        return geometry;\r\n    }\r\n\r\n    function indexLines(geometry) {\r\n        if (defined(geometry.indices)) {\r\n            return geometry;\r\n        }\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n        \r\n\r\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices);\r\n        for (var i = 0; i < numberOfVertices; ++i) {\r\n            indices[i] = i;\r\n        }\r\n\r\n        geometry.indices = indices;\r\n        return geometry;\r\n    }\r\n\r\n    function indexLineStrip(geometry) {\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n        \r\n\r\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 1) * 2);\r\n        indices[0] = 0;\r\n        indices[1] = 1;\r\n        var indicesIndex = 2;\r\n        for (var i = 2; i < numberOfVertices; ++i) {\r\n            indices[indicesIndex++] = i - 1;\r\n            indices[indicesIndex++] = i;\r\n        }\r\n\r\n        geometry.indices = indices;\r\n        geometry.primitiveType = PrimitiveType.LINES;\r\n        return geometry;\r\n    }\r\n\r\n    function indexLineLoop(geometry) {\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n        \r\n\r\n        var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices * 2);\r\n\r\n        indices[0] = 0;\r\n        indices[1] = 1;\r\n\r\n        var indicesIndex = 2;\r\n        for (var i = 2; i < numberOfVertices; ++i) {\r\n            indices[indicesIndex++] = i - 1;\r\n            indices[indicesIndex++] = i;\r\n        }\r\n\r\n        indices[indicesIndex++] = numberOfVertices - 1;\r\n        indices[indicesIndex] = 0;\r\n\r\n        geometry.indices = indices;\r\n        geometry.primitiveType = PrimitiveType.LINES;\r\n        return geometry;\r\n    }\r\n\r\n    function indexPrimitive(geometry) {\r\n        switch (geometry.primitiveType) {\r\n        case PrimitiveType.TRIANGLE_FAN:\r\n            return indexTriangleFan(geometry);\r\n        case PrimitiveType.TRIANGLE_STRIP:\r\n            return indexTriangleStrip(geometry);\r\n        case PrimitiveType.TRIANGLES:\r\n            return indexTriangles(geometry);\r\n        case PrimitiveType.LINE_STRIP:\r\n            return indexLineStrip(geometry);\r\n        case PrimitiveType.LINE_LOOP:\r\n            return indexLineLoop(geometry);\r\n        case PrimitiveType.LINES:\r\n            return indexLines(geometry);\r\n        }\r\n\r\n        return geometry;\r\n    }\r\n\r\n    function offsetPointFromXZPlane(p, isBehind) {\r\n        if (Math.abs(p.y) < CesiumMath.EPSILON6){\r\n            if (isBehind) {\r\n                p.y = -CesiumMath.EPSILON6;\r\n            } else {\r\n                p.y = CesiumMath.EPSILON6;\r\n            }\r\n        }\r\n    }\r\n\r\n    function offsetTriangleFromXZPlane(p0, p1, p2) {\r\n        if (p0.y !== 0.0 && p1.y !== 0.0 && p2.y !== 0.0) {\r\n            offsetPointFromXZPlane(p0, p0.y < 0.0);\r\n            offsetPointFromXZPlane(p1, p1.y < 0.0);\r\n            offsetPointFromXZPlane(p2, p2.y < 0.0);\r\n            return;\r\n        }\r\n\r\n        var p0y = Math.abs(p0.y);\r\n        var p1y = Math.abs(p1.y);\r\n        var p2y = Math.abs(p2.y);\r\n\r\n        var sign;\r\n        if (p0y > p1y) {\r\n            if (p0y > p2y) {\r\n                sign = CesiumMath.sign(p0.y);\r\n            } else {\r\n                sign = CesiumMath.sign(p2.y);\r\n            }\r\n        } else if (p1y > p2y) {\r\n            sign = CesiumMath.sign(p1.y);\r\n        } else {\r\n            sign = CesiumMath.sign(p2.y);\r\n        }\r\n\r\n        var isBehind = sign < 0.0;\r\n        offsetPointFromXZPlane(p0, isBehind);\r\n        offsetPointFromXZPlane(p1, isBehind);\r\n        offsetPointFromXZPlane(p2, isBehind);\r\n    }\r\n\r\n    var c3 = new Cartesian3();\r\n    function getXZIntersectionOffsetPoints(p, p1, u1, v1) {\r\n        Cartesian3.add(p, Cartesian3.multiplyByScalar(Cartesian3.subtract(p1, p, c3), p.y/(p.y-p1.y), c3), u1);\r\n        Cartesian3.clone(u1, v1);\r\n        offsetPointFromXZPlane(u1, true);\r\n        offsetPointFromXZPlane(v1, false);\r\n    }\r\n\r\n    var u1 = new Cartesian3();\r\n    var u2 = new Cartesian3();\r\n    var q1 = new Cartesian3();\r\n    var q2 = new Cartesian3();\r\n\r\n    var splitTriangleResult = {\r\n        positions : new Array(7),\r\n        indices : new Array(3 * 3)\r\n    };\r\n\r\n    function splitTriangle(p0, p1, p2) {\r\n        // In WGS84 coordinates, for a triangle approximately on the\r\n        // ellipsoid to cross the IDL, first it needs to be on the\r\n        // negative side of the plane x = 0.\r\n        if ((p0.x >= 0.0) || (p1.x >= 0.0) || (p2.x >= 0.0)) {\r\n            return undefined;\r\n        }\r\n\r\n        offsetTriangleFromXZPlane(p0, p1, p2);\r\n\r\n        var p0Behind = p0.y < 0.0;\r\n        var p1Behind = p1.y < 0.0;\r\n        var p2Behind = p2.y < 0.0;\r\n\r\n        var numBehind = 0;\r\n        numBehind += p0Behind ? 1 : 0;\r\n        numBehind += p1Behind ? 1 : 0;\r\n        numBehind += p2Behind ? 1 : 0;\r\n\r\n        var indices = splitTriangleResult.indices;\r\n\r\n        if (numBehind === 1) {\r\n            indices[1] = 3;\r\n            indices[2] = 4;\r\n            indices[5] = 6;\r\n            indices[7] = 6;\r\n            indices[8] = 5;\r\n\r\n            if (p0Behind) {\r\n                getXZIntersectionOffsetPoints(p0, p1, u1, q1);\r\n                getXZIntersectionOffsetPoints(p0, p2, u2, q2);\r\n\r\n                indices[0] = 0;\r\n                indices[3] = 1;\r\n                indices[4] = 2;\r\n                indices[6] = 1;\r\n            } else if (p1Behind) {\r\n                getXZIntersectionOffsetPoints(p1, p2, u1, q1);\r\n                getXZIntersectionOffsetPoints(p1, p0, u2, q2);\r\n\r\n                indices[0] = 1;\r\n                indices[3] = 2;\r\n                indices[4] = 0;\r\n                indices[6] = 2;\r\n            } else if (p2Behind) {\r\n                getXZIntersectionOffsetPoints(p2, p0, u1, q1);\r\n                getXZIntersectionOffsetPoints(p2, p1, u2, q2);\r\n\r\n                indices[0] = 2;\r\n                indices[3] = 0;\r\n                indices[4] = 1;\r\n                indices[6] = 0;\r\n            }\r\n        } else if (numBehind === 2) {\r\n            indices[2] = 4;\r\n            indices[4] = 4;\r\n            indices[5] = 3;\r\n            indices[7] = 5;\r\n            indices[8] = 6;\r\n\r\n            if (!p0Behind) {\r\n                getXZIntersectionOffsetPoints(p0, p1, u1, q1);\r\n                getXZIntersectionOffsetPoints(p0, p2, u2, q2);\r\n\r\n                indices[0] = 1;\r\n                indices[1] = 2;\r\n                indices[3] = 1;\r\n                indices[6] = 0;\r\n            } else if (!p1Behind) {\r\n                getXZIntersectionOffsetPoints(p1, p2, u1, q1);\r\n                getXZIntersectionOffsetPoints(p1, p0, u2, q2);\r\n\r\n                indices[0] = 2;\r\n                indices[1] = 0;\r\n                indices[3] = 2;\r\n                indices[6] = 1;\r\n            } else if (!p2Behind) {\r\n                getXZIntersectionOffsetPoints(p2, p0, u1, q1);\r\n                getXZIntersectionOffsetPoints(p2, p1, u2, q2);\r\n\r\n                indices[0] = 0;\r\n                indices[1] = 1;\r\n                indices[3] = 0;\r\n                indices[6] = 2;\r\n            }\r\n        }\r\n\r\n        var positions = splitTriangleResult.positions;\r\n        positions[0] = p0;\r\n        positions[1] = p1;\r\n        positions[2] = p2;\r\n        positions.length = 3;\r\n\r\n        if (numBehind === 1 || numBehind === 2) {\r\n            positions[3] = u1;\r\n            positions[4] = u2;\r\n            positions[5] = q1;\r\n            positions[6] = q2;\r\n            positions.length = 7;\r\n        }\r\n\r\n        return splitTriangleResult;\r\n    }\r\n\r\n    function updateGeometryAfterSplit(geometry, computeBoundingSphere) {\r\n        var attributes = geometry.attributes;\r\n\r\n        if (attributes.position.values.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        for (var property in attributes) {\r\n            if (attributes.hasOwnProperty(property) &&\r\n                    defined(attributes[property]) &&\r\n                    defined(attributes[property].values)) {\r\n\r\n                var attribute = attributes[property];\r\n                attribute.values = ComponentDatatype.createTypedArray(attribute.componentDatatype, attribute.values);\r\n            }\r\n        }\r\n\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n        geometry.indices = IndexDatatype.createTypedArray(numberOfVertices, geometry.indices);\r\n\r\n        if (computeBoundingSphere) {\r\n            geometry.boundingSphere = BoundingSphere.fromVertices(attributes.position.values);\r\n        }\r\n\r\n        return geometry;\r\n    }\r\n\r\n    function copyGeometryForSplit(geometry) {\r\n        var attributes = geometry.attributes;\r\n        var copiedAttributes = {};\r\n\r\n        for (var property in attributes) {\r\n            if (attributes.hasOwnProperty(property) &&\r\n                    defined(attributes[property]) &&\r\n                    defined(attributes[property].values)) {\r\n\r\n                var attribute = attributes[property];\r\n                copiedAttributes[property] = new GeometryAttribute({\r\n                    componentDatatype : attribute.componentDatatype,\r\n                    componentsPerAttribute : attribute.componentsPerAttribute,\r\n                    normalize : attribute.normalize,\r\n                    values : []\r\n                });\r\n            }\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : copiedAttributes,\r\n            indices : [],\r\n            primitiveType : geometry.primitiveType\r\n        });\r\n    }\r\n\r\n    function updateInstanceAfterSplit(instance, westGeometry, eastGeometry) {\r\n        var computeBoundingSphere = defined(instance.geometry.boundingSphere);\r\n\r\n        westGeometry = updateGeometryAfterSplit(westGeometry, computeBoundingSphere);\r\n        eastGeometry = updateGeometryAfterSplit(eastGeometry, computeBoundingSphere);\r\n\r\n        if (defined(eastGeometry) && !defined(westGeometry)) {\r\n            instance.geometry = eastGeometry;\r\n        } else if (!defined(eastGeometry) && defined(westGeometry)) {\r\n            instance.geometry = westGeometry;\r\n        } else {\r\n            instance.westHemisphereGeometry = westGeometry;\r\n            instance.eastHemisphereGeometry = eastGeometry;\r\n            instance.geometry = undefined;\r\n        }\r\n    }\r\n\r\n    function generateBarycentricInterpolateFunction(CartesianType, numberOfComponents) {\r\n        var v0Scratch = new CartesianType();\r\n        var v1Scratch = new CartesianType();\r\n        var v2Scratch = new CartesianType();\r\n\r\n        return function(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, normalize) {\r\n            var v0 = CartesianType.fromArray(sourceValues, i0 * numberOfComponents, v0Scratch);\r\n            var v1 = CartesianType.fromArray(sourceValues, i1 * numberOfComponents, v1Scratch);\r\n            var v2 = CartesianType.fromArray(sourceValues, i2 * numberOfComponents, v2Scratch);\r\n\r\n            CartesianType.multiplyByScalar(v0, coords.x, v0);\r\n            CartesianType.multiplyByScalar(v1, coords.y, v1);\r\n            CartesianType.multiplyByScalar(v2, coords.z, v2);\r\n\r\n            var value = CartesianType.add(v0, v1, v0);\r\n            CartesianType.add(value, v2, value);\r\n\r\n            if (normalize) {\r\n                CartesianType.normalize(value, value);\r\n            }\r\n\r\n            CartesianType.pack(value, currentValues, insertedIndex * numberOfComponents);\r\n        };\r\n    }\r\n\r\n    var interpolateAndPackCartesian4 = generateBarycentricInterpolateFunction(Cartesian4, 4);\r\n    var interpolateAndPackCartesian3 = generateBarycentricInterpolateFunction(Cartesian3, 3);\r\n    var interpolateAndPackCartesian2 = generateBarycentricInterpolateFunction(Cartesian2, 2);\r\n    var interpolateAndPackBoolean = function(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex) {\r\n        var v1 = sourceValues[i0] * coords.x;\r\n        var v2 = sourceValues[i1] * coords.y;\r\n        var v3 = sourceValues[i2] * coords.z;\r\n        currentValues[insertedIndex] = (v1 + v2 + v3) > CesiumMath.EPSILON6 ? 1 : 0;\r\n    };\r\n\r\n    var p0Scratch = new Cartesian3();\r\n    var p1Scratch = new Cartesian3();\r\n    var p2Scratch = new Cartesian3();\r\n    var barycentricScratch = new Cartesian3();\r\n\r\n    function computeTriangleAttributes(i0, i1, i2, point, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, allAttributes, insertedIndex) {\r\n        if (!defined(normals) && !defined(tangents) && !defined(bitangents) && !defined(texCoords) && !defined(extrudeDirections) && customAttributesLength === 0) {\r\n            return;\r\n        }\r\n\r\n        var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n        var p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\r\n        var p2 = Cartesian3.fromArray(positions, i2 * 3, p2Scratch);\r\n        var coords = barycentricCoordinates(point, p0, p1, p2, barycentricScratch);\r\n\r\n        if (defined(normals)) {\r\n            interpolateAndPackCartesian3(i0, i1, i2, coords, normals, currentAttributes.normal.values, insertedIndex, true);\r\n        }\r\n\r\n        if (defined(extrudeDirections)) {\r\n            var d0 = Cartesian3.fromArray(extrudeDirections, i0 * 3, p0Scratch);\r\n            var d1 = Cartesian3.fromArray(extrudeDirections, i1 * 3, p1Scratch);\r\n            var d2 = Cartesian3.fromArray(extrudeDirections, i2 * 3, p2Scratch);\r\n\r\n            Cartesian3.multiplyByScalar(d0, coords.x, d0);\r\n            Cartesian3.multiplyByScalar(d1, coords.y, d1);\r\n            Cartesian3.multiplyByScalar(d2, coords.z, d2);\r\n\r\n            var direction;\r\n            if (!Cartesian3.equals(d0, Cartesian3.ZERO) || !Cartesian3.equals(d1, Cartesian3.ZERO) || !Cartesian3.equals(d2, Cartesian3.ZERO)) {\r\n                direction = Cartesian3.add(d0, d1, d0);\r\n                Cartesian3.add(direction, d2, direction);\r\n                Cartesian3.normalize(direction, direction);\r\n            } else {\r\n                direction = p0Scratch;\r\n                direction.x = 0;\r\n                direction.y = 0;\r\n                direction.z = 0;\r\n            }\r\n            Cartesian3.pack(direction, currentAttributes.extrudeDirection.values, insertedIndex * 3);\r\n        }\r\n\r\n        if (defined(applyOffset)) {\r\n            interpolateAndPackBoolean(i0, i1, i2, coords, applyOffset, currentAttributes.applyOffset.values, insertedIndex);\r\n        }\r\n\r\n        if (defined(tangents)) {\r\n            interpolateAndPackCartesian3(i0, i1, i2, coords, tangents, currentAttributes.tangent.values, insertedIndex, true);\r\n        }\r\n\r\n        if (defined(bitangents)) {\r\n            interpolateAndPackCartesian3(i0, i1, i2, coords, bitangents, currentAttributes.bitangent.values, insertedIndex, true);\r\n        }\r\n\r\n        if (defined(texCoords)) {\r\n            interpolateAndPackCartesian2(i0, i1, i2, coords, texCoords, currentAttributes.st.values, insertedIndex);\r\n        }\r\n\r\n        if (customAttributesLength > 0) {\r\n            for (var i = 0; i < customAttributesLength; i++) {\r\n                var attributeName = customAttributeNames[i];\r\n                genericInterpolate(i0, i1, i2, coords, insertedIndex, allAttributes[attributeName], currentAttributes[attributeName]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function genericInterpolate(i0, i1, i2, coords, insertedIndex, sourceAttribute, currentAttribute) {\r\n        var componentsPerAttribute = sourceAttribute.componentsPerAttribute;\r\n        var sourceValues = sourceAttribute.values;\r\n        var currentValues = currentAttribute.values;\r\n        switch(componentsPerAttribute) {\r\n            case 4:\r\n                interpolateAndPackCartesian4(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\r\n                break;\r\n            case 3:\r\n                interpolateAndPackCartesian3(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\r\n                break;\r\n            case 2:\r\n                interpolateAndPackCartesian2(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\r\n                break;\r\n            default:\r\n                currentValues[insertedIndex] = sourceValues[i0] * coords.x + sourceValues[i1] * coords.y + sourceValues[i2] * coords.z;\r\n        }\r\n    }\r\n\r\n    function insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, currentIndex, point) {\r\n        var insertIndex = currentAttributes.position.values.length / 3;\r\n\r\n        if (currentIndex !== -1) {\r\n            var prevIndex = indices[currentIndex];\r\n            var newIndex = currentIndexMap[prevIndex];\r\n\r\n            if (newIndex === -1) {\r\n                currentIndexMap[prevIndex] = insertIndex;\r\n                currentAttributes.position.values.push(point.x, point.y, point.z);\r\n                currentIndices.push(insertIndex);\r\n                return insertIndex;\r\n            }\r\n\r\n            currentIndices.push(newIndex);\r\n            return newIndex;\r\n        }\r\n\r\n        currentAttributes.position.values.push(point.x, point.y, point.z);\r\n        currentIndices.push(insertIndex);\r\n        return insertIndex;\r\n    }\r\n\r\n    var NAMED_ATTRIBUTES = {\r\n        position : true,\r\n        normal : true,\r\n        bitangent : true,\r\n        tangent : true,\r\n        st : true,\r\n        extrudeDirection : true,\r\n        applyOffset: true\r\n    };\r\n    function splitLongitudeTriangles(instance) {\r\n        var geometry = instance.geometry;\r\n        var attributes = geometry.attributes;\r\n        var positions = attributes.position.values;\r\n        var normals = (defined(attributes.normal)) ? attributes.normal.values : undefined;\r\n        var bitangents = (defined(attributes.bitangent)) ? attributes.bitangent.values : undefined;\r\n        var tangents = (defined(attributes.tangent)) ? attributes.tangent.values : undefined;\r\n        var texCoords = (defined(attributes.st)) ? attributes.st.values : undefined;\r\n        var extrudeDirections = (defined(attributes.extrudeDirection)) ? attributes.extrudeDirection.values : undefined;\r\n        var applyOffset = defined(attributes.applyOffset) ? attributes.applyOffset.values : undefined;\r\n        var indices = geometry.indices;\r\n\r\n        var customAttributeNames = [];\r\n        for (var attributeName in attributes) {\r\n            if (attributes.hasOwnProperty(attributeName) && !NAMED_ATTRIBUTES[attributeName] && defined(attributes[attributeName])) {\r\n                customAttributeNames.push(attributeName);\r\n            }\r\n        }\r\n        var customAttributesLength = customAttributeNames.length;\r\n\r\n        var eastGeometry = copyGeometryForSplit(geometry);\r\n        var westGeometry = copyGeometryForSplit(geometry);\r\n\r\n        var currentAttributes;\r\n        var currentIndices;\r\n        var currentIndexMap;\r\n        var insertedIndex;\r\n        var i;\r\n\r\n        var westGeometryIndexMap = [];\r\n        westGeometryIndexMap.length = positions.length / 3;\r\n\r\n        var eastGeometryIndexMap = [];\r\n        eastGeometryIndexMap.length = positions.length / 3;\r\n\r\n        for (i = 0; i < westGeometryIndexMap.length; ++i) {\r\n            westGeometryIndexMap[i] = -1;\r\n            eastGeometryIndexMap[i] = -1;\r\n        }\r\n\r\n        var len = indices.length;\r\n        for (i = 0; i < len; i += 3) {\r\n            var i0 = indices[i];\r\n            var i1 = indices[i + 1];\r\n            var i2 = indices[i + 2];\r\n\r\n            var p0 = Cartesian3.fromArray(positions, i0 * 3);\r\n            var p1 = Cartesian3.fromArray(positions, i1 * 3);\r\n            var p2 = Cartesian3.fromArray(positions, i2 * 3);\r\n\r\n            var result = splitTriangle(p0, p1, p2);\r\n            if (defined(result) && result.positions.length > 3) {\r\n                var resultPositions = result.positions;\r\n                var resultIndices = result.indices;\r\n                var resultLength = resultIndices.length;\r\n\r\n                for (var j = 0; j < resultLength; ++j) {\r\n                    var resultIndex = resultIndices[j];\r\n                    var point = resultPositions[resultIndex];\r\n\r\n                    if (point.y < 0.0) {\r\n                        currentAttributes = westGeometry.attributes;\r\n                        currentIndices = westGeometry.indices;\r\n                        currentIndexMap = westGeometryIndexMap;\r\n                    } else {\r\n                        currentAttributes = eastGeometry.attributes;\r\n                        currentIndices = eastGeometry.indices;\r\n                        currentIndexMap = eastGeometryIndexMap;\r\n                    }\r\n\r\n                    insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, resultIndex < 3 ? i + resultIndex : -1, point);\r\n                    computeTriangleAttributes(i0, i1, i2, point, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, attributes, insertedIndex);\r\n                }\r\n            } else {\r\n                if (defined(result)) {\r\n                    p0 = result.positions[0];\r\n                    p1 = result.positions[1];\r\n                    p2 = result.positions[2];\r\n                }\r\n\r\n                if (p0.y < 0.0) {\r\n                    currentAttributes = westGeometry.attributes;\r\n                    currentIndices = westGeometry.indices;\r\n                    currentIndexMap = westGeometryIndexMap;\r\n                } else {\r\n                    currentAttributes = eastGeometry.attributes;\r\n                    currentIndices = eastGeometry.indices;\r\n                    currentIndexMap = eastGeometryIndexMap;\r\n                }\r\n\r\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i, p0);\r\n                computeTriangleAttributes(i0, i1, i2, p0, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, attributes, insertedIndex);\r\n\r\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 1, p1);\r\n                computeTriangleAttributes(i0, i1, i2, p1, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, attributes, insertedIndex);\r\n\r\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 2, p2);\r\n                computeTriangleAttributes(i0, i1, i2, p2, positions, normals, tangents, bitangents, texCoords, extrudeDirections, applyOffset, currentAttributes, customAttributeNames, customAttributesLength, attributes, insertedIndex);\r\n            }\r\n        }\r\n\r\n        updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n    }\r\n\r\n    var xzPlane = Plane.fromPointNormal(Cartesian3.ZERO, Cartesian3.UNIT_Y);\r\n\r\n    var offsetScratch = new Cartesian3();\r\n    var offsetPointScratch = new Cartesian3();\r\n\r\n    function computeLineAttributes(i0, i1, point, positions, insertIndex, currentAttributes, applyOffset) {\r\n        if (!defined(applyOffset)) {\r\n            return;\r\n        }\r\n\r\n        var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n        if (Cartesian3.equalsEpsilon(p0, point, CesiumMath.EPSILON10)) {\r\n            currentAttributes.applyOffset.values[insertIndex] = applyOffset[i0];\r\n        } else {\r\n            currentAttributes.applyOffset.values[insertIndex] = applyOffset[i1];\r\n        }\r\n\r\n    }\r\n\r\n    function splitLongitudeLines(instance) {\r\n        var geometry = instance.geometry;\r\n        var attributes = geometry.attributes;\r\n        var positions = attributes.position.values;\r\n        var applyOffset = defined(attributes.applyOffset) ? attributes.applyOffset.values : undefined;\r\n        var indices = geometry.indices;\r\n\r\n        var eastGeometry = copyGeometryForSplit(geometry);\r\n        var westGeometry = copyGeometryForSplit(geometry);\r\n\r\n        var i;\r\n        var length = indices.length;\r\n\r\n        var westGeometryIndexMap = [];\r\n        westGeometryIndexMap.length = positions.length / 3;\r\n\r\n        var eastGeometryIndexMap = [];\r\n        eastGeometryIndexMap.length = positions.length / 3;\r\n\r\n        for (i = 0; i < westGeometryIndexMap.length; ++i) {\r\n            westGeometryIndexMap[i] = -1;\r\n            eastGeometryIndexMap[i] = -1;\r\n        }\r\n\r\n        for (i = 0; i < length; i += 2) {\r\n            var i0 = indices[i];\r\n            var i1 = indices[i + 1];\r\n\r\n            var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n            var p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\r\n            var insertIndex;\r\n\r\n            if (Math.abs(p0.y) < CesiumMath.EPSILON6){\r\n                if (p0.y < 0.0) {\r\n                    p0.y = -CesiumMath.EPSILON6;\r\n                } else {\r\n                    p0.y = CesiumMath.EPSILON6;\r\n                }\r\n            }\r\n\r\n            if (Math.abs(p1.y) < CesiumMath.EPSILON6){\r\n                if (p1.y < 0.0) {\r\n                    p1.y = -CesiumMath.EPSILON6;\r\n                } else {\r\n                    p1.y = CesiumMath.EPSILON6;\r\n                }\r\n            }\r\n\r\n            var p0Attributes = eastGeometry.attributes;\r\n            var p0Indices = eastGeometry.indices;\r\n            var p0IndexMap = eastGeometryIndexMap;\r\n            var p1Attributes = westGeometry.attributes;\r\n            var p1Indices = westGeometry.indices;\r\n            var p1IndexMap = westGeometryIndexMap;\r\n\r\n            var intersection = IntersectionTests.lineSegmentPlane(p0, p1, xzPlane, p2Scratch);\r\n            if (defined(intersection)) {\r\n                // move point on the xz-plane slightly away from the plane\r\n                var offset = Cartesian3.multiplyByScalar(Cartesian3.UNIT_Y, 5.0 * CesiumMath.EPSILON9, offsetScratch);\r\n                if (p0.y < 0.0) {\r\n                    Cartesian3.negate(offset, offset);\r\n\r\n                    p0Attributes = westGeometry.attributes;\r\n                    p0Indices = westGeometry.indices;\r\n                    p0IndexMap = westGeometryIndexMap;\r\n                    p1Attributes = eastGeometry.attributes;\r\n                    p1Indices = eastGeometry.indices;\r\n                    p1IndexMap = eastGeometryIndexMap;\r\n                }\r\n\r\n                var offsetPoint = Cartesian3.add(intersection, offset, offsetPointScratch);\r\n\r\n                insertIndex = insertSplitPoint(p0Attributes, p0Indices, p0IndexMap, indices, i, p0);\r\n                computeLineAttributes(i0, i1, p0, positions, insertIndex, p0Attributes, applyOffset);\r\n\r\n                insertIndex = insertSplitPoint(p0Attributes, p0Indices, p0IndexMap, indices, -1, offsetPoint);\r\n                computeLineAttributes(i0, i1, offsetPoint, positions, insertIndex, p0Attributes, applyOffset);\r\n\r\n                Cartesian3.negate(offset, offset);\r\n                Cartesian3.add(intersection, offset, offsetPoint);\r\n                insertIndex = insertSplitPoint(p1Attributes, p1Indices, p1IndexMap, indices, -1, offsetPoint);\r\n                computeLineAttributes(i0, i1, offsetPoint, positions, insertIndex, p1Attributes, applyOffset);\r\n\r\n                insertIndex = insertSplitPoint(p1Attributes, p1Indices, p1IndexMap, indices, i + 1, p1);\r\n                computeLineAttributes(i0, i1, p1, positions, insertIndex, p1Attributes, applyOffset);\r\n            } else {\r\n                var currentAttributes;\r\n                var currentIndices;\r\n                var currentIndexMap;\r\n\r\n                if (p0.y < 0.0) {\r\n                    currentAttributes = westGeometry.attributes;\r\n                    currentIndices = westGeometry.indices;\r\n                    currentIndexMap = westGeometryIndexMap;\r\n                } else {\r\n                    currentAttributes = eastGeometry.attributes;\r\n                    currentIndices = eastGeometry.indices;\r\n                    currentIndexMap = eastGeometryIndexMap;\r\n                }\r\n\r\n                insertIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i, p0);\r\n                computeLineAttributes(i0, i1, p0, positions, insertIndex, currentAttributes, applyOffset);\r\n\r\n                insertIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 1, p1);\r\n                computeLineAttributes(i0, i1, p1, positions, insertIndex, currentAttributes, applyOffset);\r\n            }\r\n        }\r\n\r\n        updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n    }\r\n\r\n    var cartesian2Scratch0 = new Cartesian2();\r\n    var cartesian2Scratch1 = new Cartesian2();\r\n\r\n    var cartesian3Scratch0 = new Cartesian3();\r\n    var cartesian3Scratch2 = new Cartesian3();\r\n    var cartesian3Scratch3 = new Cartesian3();\r\n    var cartesian3Scratch4 = new Cartesian3();\r\n    var cartesian3Scratch5 = new Cartesian3();\r\n    var cartesian3Scratch6 = new Cartesian3();\r\n\r\n    var cartesian4Scratch0 = new Cartesian4();\r\n\r\n    function updateAdjacencyAfterSplit(geometry) {\r\n        var attributes = geometry.attributes;\r\n        var positions = attributes.position.values;\r\n        var prevPositions = attributes.prevPosition.values;\r\n        var nextPositions = attributes.nextPosition.values;\r\n\r\n        var length = positions.length;\r\n        for (var j = 0; j < length; j += 3) {\r\n            var position = Cartesian3.unpack(positions, j, cartesian3Scratch0);\r\n            if (position.x > 0.0) {\r\n                continue;\r\n            }\r\n\r\n            var prevPosition = Cartesian3.unpack(prevPositions, j, cartesian3Scratch2);\r\n            if ((position.y < 0.0 && prevPosition.y > 0.0) || (position.y > 0.0 && prevPosition.y < 0.0)) {\r\n                if (j - 3 > 0) {\r\n                    prevPositions[j] = positions[j - 3];\r\n                    prevPositions[j + 1] = positions[j - 2];\r\n                    prevPositions[j + 2] = positions[j - 1];\r\n                } else {\r\n                    Cartesian3.pack(position, prevPositions, j);\r\n                }\r\n            }\r\n\r\n            var nextPosition = Cartesian3.unpack(nextPositions, j, cartesian3Scratch3);\r\n            if ((position.y < 0.0 && nextPosition.y > 0.0) || (position.y > 0.0 && nextPosition.y < 0.0)) {\r\n                if (j + 3 < length) {\r\n                    nextPositions[j] = positions[j + 3];\r\n                    nextPositions[j + 1] = positions[j + 4];\r\n                    nextPositions[j + 2] = positions[j + 5];\r\n                } else {\r\n                    Cartesian3.pack(position, nextPositions, j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    var offsetScalar = 5.0 * CesiumMath.EPSILON9;\r\n    var coplanarOffset = CesiumMath.EPSILON6;\r\n\r\n    function splitLongitudePolyline(instance) {\r\n        var geometry = instance.geometry;\r\n        var attributes = geometry.attributes;\r\n        var positions = attributes.position.values;\r\n        var prevPositions = attributes.prevPosition.values;\r\n        var nextPositions = attributes.nextPosition.values;\r\n        var expandAndWidths = attributes.expandAndWidth.values;\r\n\r\n        var texCoords = (defined(attributes.st)) ? attributes.st.values : undefined;\r\n        var colors = (defined(attributes.color)) ? attributes.color.values : undefined;\r\n\r\n        var eastGeometry = copyGeometryForSplit(geometry);\r\n        var westGeometry = copyGeometryForSplit(geometry);\r\n\r\n        var i;\r\n        var j;\r\n        var index;\r\n\r\n        var intersectionFound = false;\r\n\r\n        var length = positions.length / 3;\r\n        for (i = 0; i < length; i += 4) {\r\n            var i0 = i;\r\n            var i2 = i + 2;\r\n\r\n            var p0 = Cartesian3.fromArray(positions, i0 * 3, cartesian3Scratch0);\r\n            var p2 = Cartesian3.fromArray(positions, i2 * 3, cartesian3Scratch2);\r\n\r\n            // Offset points that are close to the 180 longitude and change the previous/next point\r\n            // to be the same offset point so it can be projected to 2D. There is special handling in the\r\n            // shader for when position == prevPosition || position == nextPosition.\r\n            if (Math.abs(p0.y) < coplanarOffset) {\r\n                p0.y = coplanarOffset * (p2.y < 0.0 ? -1.0 : 1.0);\r\n                positions[i * 3 + 1] = p0.y;\r\n                positions[(i + 1) * 3 + 1] = p0.y;\r\n\r\n                for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\r\n                    prevPositions[j] = positions[i * 3];\r\n                    prevPositions[j + 1] = positions[i * 3 + 1];\r\n                    prevPositions[j + 2] = positions[i * 3 + 2];\r\n                }\r\n            }\r\n\r\n            // Do the same but for when the line crosses 180 longitude in the opposite direction.\r\n            if (Math.abs(p2.y) < coplanarOffset) {\r\n                p2.y = coplanarOffset * (p0.y < 0.0 ? -1.0 : 1.0);\r\n                positions[(i + 2) * 3 + 1] = p2.y;\r\n                positions[(i + 3) * 3 + 1] = p2.y;\r\n\r\n                for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\r\n                    nextPositions[j] = positions[(i + 2) * 3];\r\n                    nextPositions[j + 1] = positions[(i + 2) * 3 + 1];\r\n                    nextPositions[j + 2] = positions[(i + 2) * 3 + 2];\r\n                }\r\n            }\r\n\r\n            var p0Attributes = eastGeometry.attributes;\r\n            var p0Indices = eastGeometry.indices;\r\n            var p2Attributes = westGeometry.attributes;\r\n            var p2Indices = westGeometry.indices;\r\n\r\n            var intersection = IntersectionTests.lineSegmentPlane(p0, p2, xzPlane, cartesian3Scratch4);\r\n            if (defined(intersection)) {\r\n                intersectionFound = true;\r\n\r\n                // move point on the xz-plane slightly away from the plane\r\n                var offset = Cartesian3.multiplyByScalar(Cartesian3.UNIT_Y, offsetScalar, cartesian3Scratch5);\r\n                if (p0.y < 0.0) {\r\n                    Cartesian3.negate(offset, offset);\r\n                    p0Attributes = westGeometry.attributes;\r\n                    p0Indices = westGeometry.indices;\r\n                    p2Attributes = eastGeometry.attributes;\r\n                    p2Indices = eastGeometry.indices;\r\n                }\r\n\r\n                var offsetPoint = Cartesian3.add(intersection, offset, cartesian3Scratch6);\r\n                p0Attributes.position.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\r\n                p0Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p0Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n\r\n                p0Attributes.prevPosition.values.push(prevPositions[i0 * 3], prevPositions[i0 * 3 + 1], prevPositions[i0 * 3 + 2]);\r\n                p0Attributes.prevPosition.values.push(prevPositions[i0 * 3 + 3], prevPositions[i0 * 3 + 4], prevPositions[i0 * 3 + 5]);\r\n                p0Attributes.prevPosition.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\r\n\r\n                p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n\r\n                Cartesian3.negate(offset, offset);\r\n                Cartesian3.add(intersection, offset, offsetPoint);\r\n                p2Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p2Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p2Attributes.position.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\r\n\r\n                p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n                p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n\r\n                p2Attributes.nextPosition.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\r\n                p2Attributes.nextPosition.values.push(nextPositions[i2 * 3], nextPositions[i2 * 3 + 1], nextPositions[i2 * 3 + 2]);\r\n                p2Attributes.nextPosition.values.push(nextPositions[i2 * 3 + 3], nextPositions[i2 * 3 + 4], nextPositions[i2 * 3 + 5]);\r\n\r\n                var ew0 = Cartesian2.fromArray(expandAndWidths, i0 * 2, cartesian2Scratch0);\r\n                var width = Math.abs(ew0.y);\r\n\r\n                p0Attributes.expandAndWidth.values.push(-1,  width, 1,  width);\r\n                p0Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\r\n                p2Attributes.expandAndWidth.values.push(-1,  width, 1,  width);\r\n                p2Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\r\n\r\n                var t = Cartesian3.magnitudeSquared(Cartesian3.subtract(intersection, p0, cartesian3Scratch3));\r\n                t /= Cartesian3.magnitudeSquared(Cartesian3.subtract(p2, p0, cartesian3Scratch3));\r\n\r\n                if (defined(colors)) {\r\n                    var c0 = Cartesian4.fromArray(colors, i0 * 4, cartesian4Scratch0);\r\n                    var c2 = Cartesian4.fromArray(colors, i2 * 4, cartesian4Scratch0);\r\n\r\n                    var r = CesiumMath.lerp(c0.x, c2.x, t);\r\n                    var g = CesiumMath.lerp(c0.y, c2.y, t);\r\n                    var b = CesiumMath.lerp(c0.z, c2.z, t);\r\n                    var a = CesiumMath.lerp(c0.w, c2.w, t);\r\n\r\n                    for (j = i0 * 4; j < i0 * 4 + 2 * 4; ++j) {\r\n                        p0Attributes.color.values.push(colors[j]);\r\n                    }\r\n                    p0Attributes.color.values.push(r, g, b, a);\r\n                    p0Attributes.color.values.push(r, g, b, a);\r\n                    p2Attributes.color.values.push(r, g, b, a);\r\n                    p2Attributes.color.values.push(r, g, b, a);\r\n                    for (j = i2 * 4; j < i2 * 4 + 2 * 4; ++j) {\r\n                        p2Attributes.color.values.push(colors[j]);\r\n                    }\r\n                }\r\n\r\n                if (defined(texCoords)) {\r\n                    var s0 = Cartesian2.fromArray(texCoords, i0 * 2, cartesian2Scratch0);\r\n                    var s3 = Cartesian2.fromArray(texCoords, (i + 3) * 2, cartesian2Scratch1);\r\n\r\n                    var sx = CesiumMath.lerp(s0.x, s3.x, t);\r\n\r\n                    for (j = i0 * 2; j < i0 * 2 + 2 * 2; ++j) {\r\n                        p0Attributes.st.values.push(texCoords[j]);\r\n                    }\r\n                    p0Attributes.st.values.push(sx, s0.y);\r\n                    p0Attributes.st.values.push(sx, s3.y);\r\n                    p2Attributes.st.values.push(sx, s0.y);\r\n                    p2Attributes.st.values.push(sx, s3.y);\r\n                    for (j = i2 * 2; j < i2 * 2 + 2 * 2; ++j) {\r\n                        p2Attributes.st.values.push(texCoords[j]);\r\n                    }\r\n                }\r\n\r\n                index = p0Attributes.position.values.length / 3 - 4;\r\n                p0Indices.push(index, index + 2, index + 1);\r\n                p0Indices.push(index + 1, index + 2, index + 3);\r\n\r\n                index = p2Attributes.position.values.length / 3 - 4;\r\n                p2Indices.push(index, index + 2, index + 1);\r\n                p2Indices.push(index + 1, index + 2, index + 3);\r\n            } else {\r\n                var currentAttributes;\r\n                var currentIndices;\r\n\r\n                if (p0.y < 0.0) {\r\n                    currentAttributes = westGeometry.attributes;\r\n                    currentIndices = westGeometry.indices;\r\n                } else {\r\n                    currentAttributes = eastGeometry.attributes;\r\n                    currentIndices = eastGeometry.indices;\r\n                }\r\n\r\n                currentAttributes.position.values.push(p0.x, p0.y, p0.z);\r\n                currentAttributes.position.values.push(p0.x, p0.y, p0.z);\r\n                currentAttributes.position.values.push(p2.x, p2.y, p2.z);\r\n                currentAttributes.position.values.push(p2.x, p2.y, p2.z);\r\n\r\n                for (j = i * 3; j < i * 3 + 4 * 3; ++j) {\r\n                    currentAttributes.prevPosition.values.push(prevPositions[j]);\r\n                    currentAttributes.nextPosition.values.push(nextPositions[j]);\r\n                }\r\n\r\n                for (j = i * 2; j < i * 2 + 4 * 2; ++j) {\r\n                    currentAttributes.expandAndWidth.values.push(expandAndWidths[j]);\r\n                    if (defined(texCoords)) {\r\n                        currentAttributes.st.values.push(texCoords[j]);\r\n                    }\r\n                }\r\n\r\n                if (defined(colors)) {\r\n                    for (j = i * 4; j < i * 4 + 4 * 4; ++j) {\r\n                        currentAttributes.color.values.push(colors[j]);\r\n                    }\r\n                }\r\n\r\n                index = currentAttributes.position.values.length / 3 - 4;\r\n                currentIndices.push(index, index + 2, index + 1);\r\n                currentIndices.push(index + 1, index + 2, index + 3);\r\n            }\r\n        }\r\n\r\n        if (intersectionFound) {\r\n            updateAdjacencyAfterSplit(westGeometry);\r\n            updateAdjacencyAfterSplit(eastGeometry);\r\n        }\r\n\r\n        updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n    }\r\n\r\n    /**\r\n     * Splits the instances's geometry, by introducing new vertices and indices,that\r\n     * intersect the International Date Line and Prime Meridian so that no primitives cross longitude\r\n     * -180/180 degrees.  This is not required for 3D drawing, but is required for\r\n     * correcting drawing in 2D and Columbus view.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {GeometryInstance} instance The instance to modify.\r\n     * @returns {GeometryInstance} The modified <code>instance</code> argument, with it's geometry split at the International Date Line.\r\n     *\r\n     * @example\r\n     * instance = Cesium.GeometryPipeline.splitLongitude(instance);\r\n     */\r\n    GeometryPipeline.splitLongitude = function(instance) {\r\n        \r\n\r\n        var geometry = instance.geometry;\r\n        var boundingSphere = geometry.boundingSphere;\r\n        if (defined(boundingSphere)) {\r\n            var minX = boundingSphere.center.x - boundingSphere.radius;\r\n            if (minX > 0 || BoundingSphere.intersectPlane(boundingSphere, Plane.ORIGIN_ZX_PLANE) !== Intersect.INTERSECTING) {\r\n                return instance;\r\n            }\r\n        }\r\n\r\n        if (geometry.geometryType !== GeometryType.NONE) {\r\n            switch (geometry.geometryType) {\r\n            case GeometryType.POLYLINES:\r\n                splitLongitudePolyline(instance);\r\n                break;\r\n            case GeometryType.TRIANGLES:\r\n                splitLongitudeTriangles(instance);\r\n                break;\r\n            case GeometryType.LINES:\r\n                splitLongitudeLines(instance);\r\n                break;\r\n            }\r\n        } else {\r\n            indexPrimitive(geometry);\r\n            if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\r\n                splitLongitudeTriangles(instance);\r\n            } else if (geometry.primitiveType === PrimitiveType.LINES) {\r\n                splitLongitudeLines(instance);\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    };\r\n\r\n    return GeometryPipeline;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GeometryPipeline.js\n// module id = 34\n// module chunks = 0","define([\r\n        './defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Constructs an exception object that is thrown due to an error that can occur at runtime, e.g.,\r\n     * out of memory, could not compile shader, etc.  If a function may throw this\r\n     * exception, the calling code should be prepared to catch it.\r\n     * <br /><br />\r\n     * On the other hand, a {@link DeveloperError} indicates an exception due\r\n     * to a developer error, e.g., invalid argument, that usually indicates a bug in the\r\n     * calling code.\r\n     *\r\n     * @alias RuntimeError\r\n     * @constructor\r\n     * @extends Error\r\n     *\r\n     * @param {String} [message] The error message for this exception.\r\n     *\r\n     * @see DeveloperError\r\n     */\r\n    function RuntimeError(message) {\r\n        /**\r\n         * 'RuntimeError' indicating that this exception was thrown due to a runtime error.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.name = 'RuntimeError';\r\n\r\n        /**\r\n         * The explanation for why this exception was thrown.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.message = message;\r\n\r\n        //Browsers such as IE don't have a stack property until you actually throw the error.\r\n        var stack;\r\n        try {\r\n            throw new Error();\r\n        } catch (e) {\r\n            stack = e.stack;\r\n        }\r\n\r\n        /**\r\n         * The stack trace of this exception, if available.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.stack = stack;\r\n    }\r\n\r\n    if (defined(Object.create)) {\r\n        RuntimeError.prototype = Object.create(Error.prototype);\r\n        RuntimeError.prototype.constructor = RuntimeError;\r\n    }\r\n\r\n    RuntimeError.prototype.toString = function() {\r\n        var str = this.name + ': ' + this.message;\r\n\r\n        if (defined(this.stack)) {\r\n            str += '\\n' + this.stack.toString();\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n    return RuntimeError;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/RuntimeError.js\n// module id = 35\n// module chunks = 0","/**\r\n  @license\r\n  when.js - https-colon-slashslash github.com/cujojs/when\r\n\r\n  MIT License (c) copyright B Cavalier & J Hann\r\n\r\n * A lightweight CommonJS Promises/A and when() implementation\r\n * when is part of the cujo.js family of libraries (http-colon-slashslash cujojs.com/)\r\n *\r\n * Licensed under the MIT License at:\r\n * http-colon-slashslash www.opensource.org/licenses/mit-license.php\r\n *\r\n * @version 1.7.1\r\n */\r\n\r\n(function(define) { 'use strict';\r\ndefine(function () {\r\n\tvar reduceArray, slice, undef;\r\n\r\n\t//\r\n\t// Public API\r\n\t//\r\n\r\n\twhen.defer     = defer;     // Create a deferred\r\n\twhen.resolve   = resolve;   // Create a resolved promise\r\n\twhen.reject    = reject;    // Create a rejected promise\r\n\r\n\twhen.join      = join;      // Join 2 or more promises\r\n\r\n\twhen.all       = all;       // Resolve a list of promises\r\n\twhen.map       = map;       // Array.map() for promises\r\n\twhen.reduce    = reduce;    // Array.reduce() for promises\r\n\r\n\twhen.any       = any;       // One-winner race\r\n\twhen.some      = some;      // Multi-winner race\r\n\r\n\twhen.chain     = chain;     // Make a promise trigger another resolver\r\n\r\n\twhen.isPromise = isPromise; // Determine if a thing is a promise\r\n\r\n\t/**\r\n\t * Register an observer for a promise or immediate value.\r\n\t *\r\n\t * @param {*} promiseOrValue\r\n\t * @param {function?} [onFulfilled] callback to be called when promiseOrValue is\r\n\t *   successfully fulfilled.  If promiseOrValue is an immediate value, callback\r\n\t *   will be invoked immediately.\r\n\t * @param {function?} [onRejected] callback to be called when promiseOrValue is\r\n\t *   rejected.\r\n\t * @param {function?} [onProgress] callback to be called when progress updates\r\n\t *   are issued for promiseOrValue.\r\n\t * @returns {Promise} a new {@link Promise} that will complete with the return\r\n\t *   value of callback or errback or the completion value of promiseOrValue if\r\n\t *   callback and/or errback is not supplied.\r\n\t */\r\n\tfunction when(promiseOrValue, onFulfilled, onRejected, onProgress) {\r\n\t\t// Get a trusted promise for the input promiseOrValue, and then\r\n\t\t// register promise handlers\r\n\t\treturn resolve(promiseOrValue).then(onFulfilled, onRejected, onProgress);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns promiseOrValue if promiseOrValue is a {@link Promise}, a new Promise if\r\n\t * promiseOrValue is a foreign promise, or a new, already-fulfilled {@link Promise}\r\n\t * whose value is promiseOrValue if promiseOrValue is an immediate value.\r\n\t *\r\n\t * @param {*} promiseOrValue\r\n\t * @returns Guaranteed to return a trusted Promise.  If promiseOrValue is a when.js {@link Promise}\r\n\t *   returns promiseOrValue, otherwise, returns a new, already-resolved, when.js {@link Promise}\r\n\t *   whose resolution value is:\r\n\t *   * the resolution value of promiseOrValue if it's a foreign promise, or\r\n\t *   * promiseOrValue if it's a value\r\n\t */\r\n\tfunction resolve(promiseOrValue) {\r\n\t\tvar promise, deferred;\r\n\r\n\t\tif(promiseOrValue instanceof Promise) {\r\n\t\t\t// It's a when.js promise, so we trust it\r\n\t\t\tpromise = promiseOrValue;\r\n\r\n\t\t} else {\r\n\t\t\t// It's not a when.js promise. See if it's a foreign promise or a value.\r\n\t\t\tif(isPromise(promiseOrValue)) {\r\n\t\t\t\t// It's a thenable, but we don't know where it came from, so don't trust\r\n\t\t\t\t// its implementation entirely.  Introduce a trusted middleman when.js promise\r\n\t\t\t\tdeferred = defer();\r\n\r\n\t\t\t\t// IMPORTANT: This is the only place when.js should ever call .then() on an\r\n\t\t\t\t// untrusted promise. Don't expose the return value to the untrusted promise\r\n\t\t\t\tpromiseOrValue.then(\r\n\t\t\t\t\tfunction(value)  { deferred.resolve(value); },\r\n\t\t\t\t\tfunction(reason) { deferred.reject(reason); },\r\n\t\t\t\t\tfunction(update) { deferred.progress(update); }\r\n\t\t\t\t);\r\n\r\n\t\t\t\tpromise = deferred.promise;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// It's a value, not a promise.  Create a resolved promise for it.\r\n\t\t\t\tpromise = fulfilled(promiseOrValue);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn promise;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a rejected promise for the supplied promiseOrValue.  The returned\r\n\t * promise will be rejected with:\r\n\t * - promiseOrValue, if it is a value, or\r\n\t * - if promiseOrValue is a promise\r\n\t *   - promiseOrValue's value after it is fulfilled\r\n\t *   - promiseOrValue's reason after it is rejected\r\n\t * @param {*} promiseOrValue the rejected value of the returned {@link Promise}\r\n\t * @returns {Promise} rejected {@link Promise}\r\n\t */\r\n\tfunction reject(promiseOrValue) {\r\n\t\treturn when(promiseOrValue, rejected);\r\n\t}\r\n\r\n\t/**\r\n\t * Trusted Promise constructor.  A Promise created from this constructor is\r\n\t * a trusted when.js promise.  Any other duck-typed promise is considered\r\n\t * untrusted.\r\n\t * @constructor\r\n\t * @name Promise\r\n\t */\r\n\tfunction Promise(then) {\r\n\t\tthis.then = then;\r\n\t}\r\n\r\n\tPromise.prototype = {\r\n\t\t/**\r\n\t\t * Register a callback that will be called when a promise is\r\n\t\t * fulfilled or rejected.  Optionally also register a progress handler.\r\n\t\t * Shortcut for .then(onFulfilledOrRejected, onFulfilledOrRejected, onProgress)\r\n\t\t * @param {function?} [onFulfilledOrRejected]\r\n\t\t * @param {function?} [onProgress]\r\n\t\t * @returns {Promise}\r\n\t\t */\r\n\t\talways: function(onFulfilledOrRejected, onProgress) {\r\n\t\t\treturn this.then(onFulfilledOrRejected, onFulfilledOrRejected, onProgress);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Register a rejection handler.  Shortcut for .then(undefined, onRejected)\r\n\t\t * @param {function?} onRejected\r\n\t\t * @returns {Promise}\r\n\t\t */\r\n\t\totherwise: function(onRejected) {\r\n\t\t\treturn this.then(undef, onRejected);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Shortcut for .then(function() { return value; })\r\n\t\t * @param  {*} value\r\n\t\t * @returns {Promise} a promise that:\r\n\t\t *  - is fulfilled if value is not a promise, or\r\n\t\t *  - if value is a promise, will fulfill with its value, or reject\r\n\t\t *    with its reason.\r\n\t\t */\r\n\t\tyield: function(value) {\r\n\t\t\treturn this.then(function() {\r\n\t\t\t\treturn value;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Assumes that this promise will fulfill with an array, and arranges\r\n\t\t * for the onFulfilled to be called with the array as its argument list\r\n\t\t * i.e. onFulfilled.spread(undefined, array).\r\n\t\t * @param {function} onFulfilled function to receive spread arguments\r\n\t\t * @returns {Promise}\r\n\t\t */\r\n\t\tspread: function(onFulfilled) {\r\n\t\t\treturn this.then(function(array) {\r\n\t\t\t\t// array may contain promises, so resolve its contents.\r\n\t\t\t\treturn all(array, function(array) {\r\n\t\t\t\t\treturn onFulfilled.apply(undef, array);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create an already-resolved promise for the supplied value\r\n\t * @private\r\n\t *\r\n\t * @param {*} value\r\n\t * @returns {Promise} fulfilled promise\r\n\t */\r\n\tfunction fulfilled(value) {\r\n\t\tvar p = new Promise(function(onFulfilled) {\r\n\t\t\t// TODO: Promises/A+ check typeof onFulfilled\r\n\t\t\ttry {\r\n\t\t\t\treturn resolve(onFulfilled ? onFulfilled(value) : value);\r\n\t\t\t} catch(e) {\r\n\t\t\t\treturn rejected(e);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Create an already-rejected {@link Promise} with the supplied\r\n\t * rejection reason.\r\n\t * @private\r\n\t *\r\n\t * @param {*} reason\r\n\t * @returns {Promise} rejected promise\r\n\t */\r\n\tfunction rejected(reason) {\r\n\t\tvar p = new Promise(function(_, onRejected) {\r\n\t\t\t// TODO: Promises/A+ check typeof onRejected\r\n\t\t\ttry {\r\n\t\t\t\treturn onRejected ? resolve(onRejected(reason)) : rejected(reason);\r\n\t\t\t} catch(e) {\r\n\t\t\t\treturn rejected(e);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new, Deferred with fully isolated resolver and promise parts,\r\n\t * either or both of which may be given out safely to consumers.\r\n\t * The Deferred itself has the full API: resolve, reject, progress, and\r\n\t * then. The resolver has resolve, reject, and progress.  The promise\r\n\t * only has then.\r\n\t *\r\n\t * @returns {Deferred}\r\n\t */\r\n\tfunction defer() {\r\n\t\tvar deferred, promise, handlers, progressHandlers,\r\n\t\t\t_then, _progress, _resolve;\r\n\r\n\t\t/**\r\n\t\t * The promise for the new deferred\r\n\t\t * @type {Promise}\r\n\t\t */\r\n\t\tpromise = new Promise(then);\r\n\r\n\t\t/**\r\n\t\t * The full Deferred object, with {@link Promise} and {@link Resolver} parts\r\n\t\t * @class Deferred\r\n\t\t * @name Deferred\r\n\t\t */\r\n\t\tdeferred = {\r\n\t\t\tthen:     then, // DEPRECATED: use deferred.promise.then\r\n\t\t\tresolve:  promiseResolve,\r\n\t\t\treject:   promiseReject,\r\n\t\t\t// TODO: Consider renaming progress() to notify()\r\n\t\t\tprogress: promiseProgress,\r\n\r\n\t\t\tpromise:  promise,\r\n\r\n\t\t\tresolver: {\r\n\t\t\t\tresolve:  promiseResolve,\r\n\t\t\t\treject:   promiseReject,\r\n\t\t\t\tprogress: promiseProgress\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\thandlers = [];\r\n\t\tprogressHandlers = [];\r\n\r\n\t\t/**\r\n\t\t * Pre-resolution then() that adds the supplied callback, errback, and progback\r\n\t\t * functions to the registered listeners\r\n\t\t * @private\r\n\t\t *\r\n\t\t * @param {function?} [onFulfilled] resolution handler\r\n\t\t * @param {function?} [onRejected] rejection handler\r\n\t\t * @param {function?} [onProgress] progress handler\r\n\t\t */\r\n\t\t_then = function(onFulfilled, onRejected, onProgress) {\r\n\t\t\t// TODO: Promises/A+ check typeof onFulfilled, onRejected, onProgress\r\n\t\t\tvar deferred, progressHandler;\r\n\r\n\t\t\tdeferred = defer();\r\n\r\n\t\t\tprogressHandler = typeof onProgress === 'function'\r\n\t\t\t\t? function(update) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// Allow progress handler to transform progress event\r\n\t\t\t\t\t\tdeferred.progress(onProgress(update));\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\t// Use caught value as progress\r\n\t\t\t\t\t\tdeferred.progress(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t: function(update) { deferred.progress(update); };\r\n\r\n\t\t\thandlers.push(function(promise) {\r\n\t\t\t\tpromise.then(onFulfilled, onRejected)\r\n\t\t\t\t\t.then(deferred.resolve, deferred.reject, progressHandler);\r\n\t\t\t});\r\n\r\n\t\t\tprogressHandlers.push(progressHandler);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Issue a progress event, notifying all progress listeners\r\n\t\t * @private\r\n\t\t * @param {*} update progress event payload to pass to all listeners\r\n\t\t */\r\n\t\t_progress = function(update) {\r\n\t\t\tprocessQueue(progressHandlers, update);\r\n\t\t\treturn update;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Transition from pre-resolution state to post-resolution state, notifying\r\n\t\t * all listeners of the resolution or rejection\r\n\t\t * @private\r\n\t\t * @param {*} value the value of this deferred\r\n\t\t */\r\n\t\t_resolve = function(value) {\r\n\t\t\tvalue = resolve(value);\r\n\r\n\t\t\t// Replace _then with one that directly notifies with the result.\r\n\t\t\t_then = value.then;\r\n\t\t\t// Replace _resolve so that this Deferred can only be resolved once\r\n\t\t\t_resolve = resolve;\r\n\t\t\t// Make _progress a noop, to disallow progress for the resolved promise.\r\n\t\t\t_progress = noop;\r\n\r\n\t\t\t// Notify handlers\r\n\t\t\tprocessQueue(handlers, value);\r\n\r\n\t\t\t// Free progressHandlers array since we'll never issue progress events\r\n\t\t\tprogressHandlers = handlers = undef;\r\n\r\n\t\t\treturn value;\r\n\t\t};\r\n\r\n\t\treturn deferred;\r\n\r\n\t\t/**\r\n\t\t * Wrapper to allow _then to be replaced safely\r\n\t\t * @param {function?} [onFulfilled] resolution handler\r\n\t\t * @param {function?} [onRejected] rejection handler\r\n\t\t * @param {function?} [onProgress] progress handler\r\n\t\t * @returns {Promise} new promise\r\n\t\t */\r\n\t\tfunction then(onFulfilled, onRejected, onProgress) {\r\n\t\t\t// TODO: Promises/A+ check typeof onFulfilled, onRejected, onProgress\r\n\t\t\treturn _then(onFulfilled, onRejected, onProgress);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Wrapper to allow _resolve to be replaced\r\n\t\t */\r\n\t\tfunction promiseResolve(val) {\r\n\t\t\treturn _resolve(val);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Wrapper to allow _reject to be replaced\r\n\t\t */\r\n\t\tfunction promiseReject(err) {\r\n\t\t\treturn _resolve(rejected(err));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Wrapper to allow _progress to be replaced\r\n\t\t */\r\n\t\tfunction promiseProgress(update) {\r\n\t\t\treturn _progress(update);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if promiseOrValue is a promise or not.  Uses the feature\r\n\t * test from http-colon-slashslash wiki.commonjs.org/wiki/Promises/A to determine if\r\n\t * promiseOrValue is a promise.\r\n\t *\r\n\t * @param {*} promiseOrValue anything\r\n\t * @returns {boolean} true if promiseOrValue is a {@link Promise}\r\n\t */\r\n\tfunction isPromise(promiseOrValue) {\r\n\t\treturn promiseOrValue && typeof promiseOrValue.then === 'function';\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates a competitive race, returning a promise that will resolve when\r\n\t * howMany of the supplied promisesOrValues have resolved, or will reject when\r\n\t * it becomes impossible for howMany to resolve, for example, when\r\n\t * (promisesOrValues.length - howMany) + 1 input promises reject.\r\n\t *\r\n\t * @param {Array} promisesOrValues array of anything, may contain a mix\r\n\t *      of promises and values\r\n\t * @param howMany {number} number of promisesOrValues to resolve\r\n\t * @param {function?} [onFulfilled] resolution handler\r\n\t * @param {function?} [onRejected] rejection handler\r\n\t * @param {function?} [onProgress] progress handler\r\n\t * @returns {Promise} promise that will resolve to an array of howMany values that\r\n\t * resolved first, or will reject with an array of (promisesOrValues.length - howMany) + 1\r\n\t * rejection reasons.\r\n\t */\r\n\tfunction some(promisesOrValues, howMany, onFulfilled, onRejected, onProgress) {\r\n\r\n\t\tcheckCallbacks(2, arguments);\r\n\r\n\t\treturn when(promisesOrValues, function(promisesOrValues) {\r\n\r\n\t\t\tvar toResolve, toReject, values, reasons, deferred, fulfillOne, rejectOne, progress, len, i;\r\n\r\n\t\t\tlen = promisesOrValues.length >>> 0;\r\n\r\n\t\t\ttoResolve = Math.max(0, Math.min(howMany, len));\r\n\t\t\tvalues = [];\r\n\r\n\t\t\ttoReject = (len - toResolve) + 1;\r\n\t\t\treasons = [];\r\n\r\n\t\t\tdeferred = defer();\r\n\r\n\t\t\t// No items in the input, resolve immediately\r\n\t\t\tif (!toResolve) {\r\n\t\t\t\tdeferred.resolve(values);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tprogress = deferred.progress;\r\n\r\n\t\t\t\trejectOne = function(reason) {\r\n\t\t\t\t\treasons.push(reason);\r\n\t\t\t\t\tif(!--toReject) {\r\n\t\t\t\t\t\tfulfillOne = rejectOne = noop;\r\n\t\t\t\t\t\tdeferred.reject(reasons);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfulfillOne = function(val) {\r\n\t\t\t\t\t// This orders the values based on promise resolution order\r\n\t\t\t\t\t// Another strategy would be to use the original position of\r\n\t\t\t\t\t// the corresponding promise.\r\n\t\t\t\t\tvalues.push(val);\r\n\r\n\t\t\t\t\tif (!--toResolve) {\r\n\t\t\t\t\t\tfulfillOne = rejectOne = noop;\r\n\t\t\t\t\t\tdeferred.resolve(values);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfor(i = 0; i < len; ++i) {\r\n\t\t\t\t\tif(i in promisesOrValues) {\r\n\t\t\t\t\t\twhen(promisesOrValues[i], fulfiller, rejecter, progress);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn deferred.then(onFulfilled, onRejected, onProgress);\r\n\r\n\t\t\tfunction rejecter(reason) {\r\n\t\t\t\trejectOne(reason);\r\n\t\t\t}\r\n\r\n\t\t\tfunction fulfiller(val) {\r\n\t\t\t\tfulfillOne(val);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates a competitive race, returning a promise that will resolve when\r\n\t * any one of the supplied promisesOrValues has resolved or will reject when\r\n\t * *all* promisesOrValues have rejected.\r\n\t *\r\n\t * @param {Array|Promise} promisesOrValues array of anything, may contain a mix\r\n\t *      of {@link Promise}s and values\r\n\t * @param {function?} [onFulfilled] resolution handler\r\n\t * @param {function?} [onRejected] rejection handler\r\n\t * @param {function?} [onProgress] progress handler\r\n\t * @returns {Promise} promise that will resolve to the value that resolved first, or\r\n\t * will reject with an array of all rejected inputs.\r\n\t */\r\n\tfunction any(promisesOrValues, onFulfilled, onRejected, onProgress) {\r\n\r\n\t\tfunction unwrapSingleResult(val) {\r\n\t\t\treturn onFulfilled ? onFulfilled(val[0]) : val[0];\r\n\t\t}\r\n\r\n\t\treturn some(promisesOrValues, 1, unwrapSingleResult, onRejected, onProgress);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a promise that will resolve only once all the supplied promisesOrValues\r\n\t * have resolved. The resolution value of the returned promise will be an array\r\n\t * containing the resolution values of each of the promisesOrValues.\r\n\t * @memberOf when\r\n\t *\r\n\t * @param {Array|Promise} promisesOrValues array of anything, may contain a mix\r\n\t *      of {@link Promise}s and values\r\n\t * @param {function?} [onFulfilled] resolution handler\r\n\t * @param {function?} [onRejected] rejection handler\r\n\t * @param {function?} [onProgress] progress handler\r\n\t * @returns {Promise}\r\n\t */\r\n\tfunction all(promisesOrValues, onFulfilled, onRejected, onProgress) {\r\n\t\tcheckCallbacks(1, arguments);\r\n\t\treturn map(promisesOrValues, identity).then(onFulfilled, onRejected, onProgress);\r\n\t}\r\n\r\n\t/**\r\n\t * Joins multiple promises into a single returned promise.\r\n\t * @returns {Promise} a promise that will fulfill when *all* the input promises\r\n\t * have fulfilled, or will reject when *any one* of the input promises rejects.\r\n\t */\r\n\tfunction join(/* ...promises */) {\r\n\t\treturn map(arguments, identity);\r\n\t}\r\n\r\n\t/**\r\n\t * Traditional map function, similar to `Array.prototype.map()`, but allows\r\n\t * input to contain {@link Promise}s and/or values, and mapFunc may return\r\n\t * either a value or a {@link Promise}\r\n\t *\r\n\t * @param {Array|Promise} promise array of anything, may contain a mix\r\n\t *      of {@link Promise}s and values\r\n\t * @param {function} mapFunc mapping function mapFunc(value) which may return\r\n\t *      either a {@link Promise} or value\r\n\t * @returns {Promise} a {@link Promise} that will resolve to an array containing\r\n\t *      the mapped output values.\r\n\t */\r\n\tfunction map(promise, mapFunc) {\r\n\t\treturn when(promise, function(array) {\r\n\t\t\tvar results, len, toResolve, resolve, i, d;\r\n\r\n\t\t\t// Since we know the resulting length, we can preallocate the results\r\n\t\t\t// array to avoid array expansions.\r\n\t\t\ttoResolve = len = array.length >>> 0;\r\n\t\t\tresults = [];\r\n\t\t\td = defer();\r\n\r\n\t\t\tif(!toResolve) {\r\n\t\t\t\td.resolve(results);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresolve = function resolveOne(item, i) {\r\n\t\t\t\t\twhen(item, mapFunc).then(function(mapped) {\r\n\t\t\t\t\t\tresults[i] = mapped;\r\n\r\n\t\t\t\t\t\tif(!--toResolve) {\r\n\t\t\t\t\t\t\td.resolve(results);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, d.reject);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Since mapFunc may be async, get all invocations of it into flight\r\n\t\t\t\tfor(i = 0; i < len; i++) {\r\n\t\t\t\t\tif(i in array) {\r\n\t\t\t\t\t\tresolve(array[i], i);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t--toResolve;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn d.promise;\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Traditional reduce function, similar to `Array.prototype.reduce()`, but\r\n\t * input may contain promises and/or values, and reduceFunc\r\n\t * may return either a value or a promise, *and* initialValue may\r\n\t * be a promise for the starting value.\r\n\t *\r\n\t * @param {Array|Promise} promise array or promise for an array of anything,\r\n\t *      may contain a mix of promises and values.\r\n\t * @param {function} reduceFunc reduce function reduce(currentValue, nextValue, index, total),\r\n\t *      where total is the total number of items being reduced, and will be the same\r\n\t *      in each call to reduceFunc.\r\n\t * @returns {Promise} that will resolve to the final reduced value\r\n\t */\r\n\tfunction reduce(promise, reduceFunc /*, initialValue */) {\r\n\t\tvar args = slice.call(arguments, 1);\r\n\r\n\t\treturn when(promise, function(array) {\r\n\t\t\tvar total;\r\n\r\n\t\t\ttotal = array.length;\r\n\r\n\t\t\t// Wrap the supplied reduceFunc with one that handles promises and then\r\n\t\t\t// delegates to the supplied.\r\n\t\t\targs[0] = function (current, val, i) {\r\n\t\t\t\treturn when(current, function (c) {\r\n\t\t\t\t\treturn when(val, function (value) {\r\n\t\t\t\t\t\treturn reduceFunc(c, value, i, total);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\treturn reduceArray.apply(array, args);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Ensure that resolution of promiseOrValue will trigger resolver with the\r\n\t * value or reason of promiseOrValue, or instead with resolveValue if it is provided.\r\n\t *\r\n\t * @param promiseOrValue\r\n\t * @param {Object} resolver\r\n\t * @param {function} resolver.resolve\r\n\t * @param {function} resolver.reject\r\n\t * @param {*} [resolveValue]\r\n\t * @returns {Promise}\r\n\t */\r\n\tfunction chain(promiseOrValue, resolver, resolveValue) {\r\n\t\tvar useResolveValue = arguments.length > 2;\r\n\r\n\t\treturn when(promiseOrValue,\r\n\t\t\tfunction(val) {\r\n\t\t\t\tval = useResolveValue ? resolveValue : val;\r\n\t\t\t\tresolver.resolve(val);\r\n\t\t\t\treturn val;\r\n\t\t\t},\r\n\t\t\tfunction(reason) {\r\n\t\t\t\tresolver.reject(reason);\r\n\t\t\t\treturn rejected(reason);\r\n\t\t\t},\r\n\t\t\tresolver.progress\r\n\t\t);\r\n\t}\r\n\r\n\t//\r\n\t// Utility functions\r\n\t//\r\n\r\n\t/**\r\n\t * Apply all functions in queue to value\r\n\t * @param {Array} queue array of functions to execute\r\n\t * @param {*} value argument passed to each function\r\n\t */\r\n\tfunction processQueue(queue, value) {\r\n\t\tvar handler, i = 0;\r\n\r\n\t\twhile (handler = queue[i++]) {\r\n\t\t\thandler(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Helper that checks arrayOfCallbacks to ensure that each element is either\r\n\t * a function, or null or undefined.\r\n\t * @private\r\n\t * @param {number} start index at which to start checking items in arrayOfCallbacks\r\n\t * @param {Array} arrayOfCallbacks array to check\r\n\t * @throws {Error} if any element of arrayOfCallbacks is something other than\r\n\t * a functions, null, or undefined.\r\n\t */\r\n\tfunction checkCallbacks(start, arrayOfCallbacks) {\r\n\t\t// TODO: Promises/A+ update type checking and docs\r\n\t\tvar arg, i = arrayOfCallbacks.length;\r\n\r\n\t\twhile(i > start) {\r\n\t\t\targ = arrayOfCallbacks[--i];\r\n\r\n\t\t\tif (arg != null && typeof arg != 'function') {\r\n\t\t\t\tthrow new Error('arg '+i+' must be a function');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * No-Op function used in method replacement\r\n\t * @private\r\n\t */\r\n\tfunction noop() {}\r\n\r\n\tslice = [].slice;\r\n\r\n\t// ES5 reduce implementation if native not available\r\n\t// See: http://es5.github.com/#x15.4.4.21 as there are many\r\n\t// specifics and edge cases.\r\n\treduceArray = [].reduce ||\r\n\t\tfunction(reduceFunc /*, initialValue */) {\r\n\t\t\t/*jshint maxcomplexity: 7*/\r\n\r\n\t\t\t// ES5 dictates that reduce.length === 1\r\n\r\n\t\t\t// This implementation deviates from ES5 spec in the following ways:\r\n\t\t\t// 1. It does not check if reduceFunc is a Callable\r\n\r\n\t\t\tvar arr, args, reduced, len, i;\r\n\r\n\t\t\ti = 0;\r\n\t\t\t// This generates a jshint warning, despite being valid\r\n\t\t\t// \"Missing 'new' prefix when invoking a constructor.\"\r\n\t\t\t// See https://github.com/jshint/jshint/issues/392\r\n\t\t\tarr = Object(this);\r\n\t\t\tlen = arr.length >>> 0;\r\n\t\t\targs = arguments;\r\n\r\n\t\t\t// If no initialValue, use first item of array (we know length !== 0 here)\r\n\t\t\t// and adjust i to start at second item\r\n\t\t\tif(args.length <= 1) {\r\n\t\t\t\t// Skip to the first real element in the array\r\n\t\t\t\tfor(;;) {\r\n\t\t\t\t\tif(i in arr) {\r\n\t\t\t\t\t\treduced = arr[i++];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// If we reached the end of the array without finding any real\r\n\t\t\t\t\t// elements, it's a TypeError\r\n\t\t\t\t\tif(++i >= len) {\r\n\t\t\t\t\t\tthrow new TypeError();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// If initialValue provided, use it\r\n\t\t\t\treduced = args[1];\r\n\t\t\t}\r\n\r\n\t\t\t// Do the actual reduce\r\n\t\t\tfor(;i < len; ++i) {\r\n\t\t\t\t// Skip holes\r\n\t\t\t\tif(i in arr) {\r\n\t\t\t\t\treduced = reduceFunc(reduced, arr[i], i, arr);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn reduced;\r\n\t\t};\r\n\r\n\tfunction identity(x) {\r\n\t\treturn x;\r\n\t}\r\n\r\n\treturn when;\r\n});\r\n})(typeof define == 'function' && define.amd\r\n\t? define\r\n\t: function (factory) { typeof exports === 'object'\r\n\t\t? (module.exports = factory())\r\n\t\t: (this.when      = factory());\r\n\t}\r\n\t// Boilerplate for AMD, Node, and browser global\r\n);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/when.js\n// module id = 36\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Ellipsoid'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartographic,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Ellipsoid) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A simple map projection where longitude and latitude are linearly mapped to X and Y by multiplying\r\n     * them by the {@link Ellipsoid#maximumRadius}.  This projection\r\n     * is commonly known as geographic, equirectangular, equidistant cylindrical, or plate carrée.  It\r\n     * is also known as EPSG:4326.\r\n     *\r\n     * @alias GeographicProjection\r\n     * @constructor\r\n     *\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\r\n     *\r\n     * @see WebMercatorProjection\r\n     */\r\n    function GeographicProjection(ellipsoid) {\r\n        this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        this._semimajorAxis = this._ellipsoid.maximumRadius;\r\n        this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\r\n    }\r\n\r\n    defineProperties(GeographicProjection.prototype, {\r\n        /**\r\n         * Gets the {@link Ellipsoid}.\r\n         *\r\n         * @memberof GeographicProjection.prototype\r\n         *\r\n         * @type {Ellipsoid}\r\n         * @readonly\r\n         */\r\n        ellipsoid : {\r\n            get : function() {\r\n                return this._ellipsoid;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Projects a set of {@link Cartographic} coordinates, in radians, to map coordinates, in meters.\r\n     * X and Y are the longitude and latitude, respectively, multiplied by the maximum radius of the\r\n     * ellipsoid.  Z is the unmodified height.\r\n     *\r\n     * @param {Cartographic} cartographic The coordinates to project.\r\n     * @param {Cartesian3} [result] An instance into which to copy the result.  If this parameter is\r\n     *        undefined, a new instance is created and returned.\r\n     * @returns {Cartesian3} The projected coordinates.  If the result parameter is not undefined, the\r\n     *          coordinates are copied there and that instance is returned.  Otherwise, a new instance is\r\n     *          created and returned.\r\n     */\r\n    GeographicProjection.prototype.project = function(cartographic, result) {\r\n        // Actually this is the special case of equidistant cylindrical called the plate carree\r\n        var semimajorAxis = this._semimajorAxis;\r\n        var x = cartographic.longitude * semimajorAxis;\r\n        var y = cartographic.latitude * semimajorAxis;\r\n        var z = cartographic.height;\r\n\r\n        if (!defined(result)) {\r\n            return new Cartesian3(x, y, z);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unprojects a set of projected {@link Cartesian3} coordinates, in meters, to {@link Cartographic}\r\n     * coordinates, in radians.  Longitude and Latitude are the X and Y coordinates, respectively,\r\n     * divided by the maximum radius of the ellipsoid.  Height is the unmodified Z coordinate.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to unproject with height (z) in meters.\r\n     * @param {Cartographic} [result] An instance into which to copy the result.  If this parameter is\r\n     *        undefined, a new instance is created and returned.\r\n     * @returns {Cartographic} The unprojected coordinates.  If the result parameter is not undefined, the\r\n     *          coordinates are copied there and that instance is returned.  Otherwise, a new instance is\r\n     *          created and returned.\r\n     */\r\n    GeographicProjection.prototype.unproject = function(cartesian, result) {\r\n        \r\n\r\n        var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\r\n        var longitude = cartesian.x * oneOverEarthSemimajorAxis;\r\n        var latitude = cartesian.y * oneOverEarthSemimajorAxis;\r\n        var height = cartesian.z;\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude, height);\r\n        }\r\n\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = height;\r\n        return result;\r\n    };\r\n\r\n    return GeographicProjection;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GeographicProjection.js\n// module id = 37\n// module chunks = 0","// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/lib/_stream_duplex.js\n// module id = 38\n// module chunks = 0","define([\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Check',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Math'\r\n    ], function(\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Check,\r\n        defined,\r\n        DeveloperError,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    var RIGHT_SHIFT = 1.0 / 256.0;\r\n    var LEFT_SHIFT = 256.0;\r\n\r\n    /**\r\n     * Attribute compression and decompression functions.\r\n     *\r\n     * @exports AttributeCompression\r\n     *\r\n     * @private\r\n     */\r\n    var AttributeCompression = {};\r\n\r\n    /**\r\n     * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the 'oct' encoding.\r\n     *\r\n     * Oct encoding is a compact representation of unit length vectors.\r\n     * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\r\n     * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\r\n     *\r\n     * @param {Cartesian3} vector The normalized vector to be compressed into 2 component 'oct' encoding.\r\n     * @param {Cartesian2} result The 2 component oct-encoded unit length vector.\r\n     * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\r\n     * @returns {Cartesian2} The 2 component oct-encoded unit length vector.\r\n     *\r\n     * @exception {DeveloperError} vector must be normalized.\r\n     *\r\n     * @see AttributeCompression.octDecodeInRange\r\n     */\r\n    AttributeCompression.octEncodeInRange = function(vector, rangeMax, result) {\r\n        \r\n\r\n        result.x = vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\r\n        result.y = vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\r\n        if (vector.z < 0) {\r\n            var x = result.x;\r\n            var y = result.y;\r\n            result.x = (1.0 - Math.abs(y)) * CesiumMath.signNotZero(x);\r\n            result.y = (1.0 - Math.abs(x)) * CesiumMath.signNotZero(y);\r\n        }\r\n\r\n        result.x = CesiumMath.toSNorm(result.x, rangeMax);\r\n        result.y = CesiumMath.toSNorm(result.y, rangeMax);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding.\r\n     *\r\n     * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\r\n     * @param {Cartesian2} result The 2 byte oct-encoded unit length vector.\r\n     * @returns {Cartesian2} The 2 byte oct-encoded unit length vector.\r\n     *\r\n     * @exception {DeveloperError} vector must be normalized.\r\n     *\r\n     * @see AttributeCompression.octEncodeInRange\r\n     * @see AttributeCompression.octDecode\r\n     */\r\n    AttributeCompression.octEncode = function(vector, result) {\r\n        return AttributeCompression.octEncodeInRange(vector, 255, result);\r\n    };\r\n\r\n    var octEncodeScratch = new Cartesian2();\r\n    var uint8ForceArray = new Uint8Array(1);\r\n    function forceUint8(value) {\r\n        uint8ForceArray[0] = value;\r\n        return uint8ForceArray[0];\r\n    }\r\n    /**\r\n     * @param {Cartesian3} vector The normalized vector to be compressed into 4 byte 'oct' encoding.\r\n     * @param {Cartesian4} result The 4 byte oct-encoded unit length vector.\r\n     * @returns {Cartesian4} The 4 byte oct-encoded unit length vector.\r\n     *\r\n     * @exception {DeveloperError} vector must be normalized.\r\n     *\r\n     * @see AttributeCompression.octEncodeInRange\r\n     * @see AttributeCompression.octDecodeFromCartesian4\r\n     */\r\n    AttributeCompression.octEncodeToCartesian4 = function(vector, result) {\r\n        AttributeCompression.octEncodeInRange(vector, 65535, octEncodeScratch);\r\n        result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\r\n        result.y = forceUint8(octEncodeScratch.x);\r\n        result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\r\n        result.w = forceUint8(octEncodeScratch.y);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component vector.\r\n     *\r\n     * @param {Number} x The x component of the oct-encoded unit length vector.\r\n     * @param {Number} y The y component of the oct-encoded unit length vector.\r\n     * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\r\n     * @param {Cartesian3} result The decoded and normalized vector\r\n     * @returns {Cartesian3} The decoded and normalized vector.\r\n     *\r\n     * @exception {DeveloperError} x and y must be unsigned normalized integers between 0 and rangeMax.\r\n     *\r\n     * @see AttributeCompression.octEncodeInRange\r\n     */\r\n    AttributeCompression.octDecodeInRange = function(x, y, rangeMax, result) {\r\n        \r\n\r\n        result.x = CesiumMath.fromSNorm(x, rangeMax);\r\n        result.y = CesiumMath.fromSNorm(y, rangeMax);\r\n        result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\r\n\r\n        if (result.z < 0.0)\r\n        {\r\n            var oldVX = result.x;\r\n            result.x = (1.0 - Math.abs(result.y)) * CesiumMath.signNotZero(oldVX);\r\n            result.y = (1.0 - Math.abs(oldVX)) * CesiumMath.signNotZero(result.y);\r\n        }\r\n\r\n        return Cartesian3.normalize(result, result);\r\n    };\r\n\r\n    /**\r\n     * Decodes a unit-length vector in 2 byte 'oct' encoding to a normalized 3-component vector.\r\n     *\r\n     * @param {Number} x The x component of the oct-encoded unit length vector.\r\n     * @param {Number} y The y component of the oct-encoded unit length vector.\r\n     * @param {Cartesian3} result The decoded and normalized vector.\r\n     * @returns {Cartesian3} The decoded and normalized vector.\r\n     *\r\n     * @exception {DeveloperError} x and y must be an unsigned normalized integer between 0 and 255.\r\n     *\r\n     * @see AttributeCompression.octDecodeInRange\r\n     */\r\n    AttributeCompression.octDecode = function(x, y, result) {\r\n        return AttributeCompression.octDecodeInRange(x, y, 255, result);\r\n    };\r\n\r\n    /**\r\n     * Decodes a unit-length vector in 4 byte 'oct' encoding to a normalized 3-component vector.\r\n     *\r\n     * @param {Cartesian4} encoded The oct-encoded unit length vector.\r\n     * @param {Cartesian3} result The decoded and normalized vector.\r\n     * @returns {Cartesian3} The decoded and normalized vector.\r\n     *\r\n     * @exception {DeveloperError} x, y, z, and w must be unsigned normalized integers between 0 and 255.\r\n     *\r\n     * @see AttributeCompression.octDecodeInRange\r\n     * @see AttributeCompression.octEncodeToCartesian4\r\n     */\r\n    AttributeCompression.octDecodeFromCartesian4 = function(encoded, result) {\r\n        \r\n        var x = encoded.x;\r\n        var y = encoded.y;\r\n        var z = encoded.z;\r\n        var w = encoded.w;\r\n        \r\n\r\n        var xOct16 = x * LEFT_SHIFT + y;\r\n        var yOct16 = z * LEFT_SHIFT + w;\r\n        return AttributeCompression.octDecodeInRange(xOct16, yOct16, 65535, result);\r\n    };\r\n\r\n    /**\r\n     * Packs an oct encoded vector into a single floating-point number.\r\n     *\r\n     * @param {Cartesian2} encoded The oct encoded vector.\r\n     * @returns {Number} The oct encoded vector packed into a single float.\r\n     *\r\n     */\r\n    AttributeCompression.octPackFloat = function(encoded) {\r\n        \r\n        return 256.0 * encoded.x + encoded.y;\r\n    };\r\n\r\n    var scratchEncodeCart2 = new Cartesian2();\r\n\r\n    /**\r\n     * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding and\r\n     * stores those values in a single float-point number.\r\n     *\r\n     * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\r\n     * @returns {Number} The 2 byte oct-encoded unit length vector.\r\n     *\r\n     * @exception {DeveloperError} vector must be normalized.\r\n     */\r\n    AttributeCompression.octEncodeFloat = function(vector) {\r\n        AttributeCompression.octEncode(vector, scratchEncodeCart2);\r\n        return AttributeCompression.octPackFloat(scratchEncodeCart2);\r\n    };\r\n\r\n    /**\r\n     * Decodes a unit-length vector in 'oct' encoding packed in a floating-point number to a normalized 3-component vector.\r\n     *\r\n     * @param {Number} value The oct-encoded unit length vector stored as a single floating-point number.\r\n     * @param {Cartesian3} result The decoded and normalized vector\r\n     * @returns {Cartesian3} The decoded and normalized vector.\r\n     *\r\n     */\r\n    AttributeCompression.octDecodeFloat = function(value, result) {\r\n        \r\n\r\n        var temp = value / 256.0;\r\n        var x = Math.floor(temp);\r\n        var y = (temp - x) * 256.0;\r\n\r\n        return AttributeCompression.octDecode(x, y, result);\r\n    };\r\n\r\n    /**\r\n     * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the 'oct' encoding and\r\n     * packs those into two floating-point numbers.\r\n     *\r\n     * @param {Cartesian3} v1 A normalized vector to be compressed.\r\n     * @param {Cartesian3} v2 A normalized vector to be compressed.\r\n     * @param {Cartesian3} v3 A normalized vector to be compressed.\r\n     * @param {Cartesian2} result The 'oct' encoded vectors packed into two floating-point numbers.\r\n     * @returns {Cartesian2} The 'oct' encoded vectors packed into two floating-point numbers.\r\n     *\r\n     */\r\n    AttributeCompression.octPack = function(v1, v2, v3, result) {\r\n        \r\n\r\n        var encoded1 = AttributeCompression.octEncodeFloat(v1);\r\n        var encoded2 = AttributeCompression.octEncodeFloat(v2);\r\n\r\n        var encoded3 = AttributeCompression.octEncode(v3, scratchEncodeCart2);\r\n        result.x = 65536.0 * encoded3.x + encoded1;\r\n        result.y = 65536.0 * encoded3.y + encoded2;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Decodes three unit-length vectors in 'oct' encoding packed into a floating-point number to a normalized 3-component vector.\r\n     *\r\n     * @param {Cartesian2} packed The three oct-encoded unit length vectors stored as two floating-point number.\r\n     * @param {Cartesian3} v1 One decoded and normalized vector.\r\n     * @param {Cartesian3} v2 One decoded and normalized vector.\r\n     * @param {Cartesian3} v3 One decoded and normalized vector.\r\n     */\r\n    AttributeCompression.octUnpack = function(packed, v1, v2, v3) {\r\n        \r\n\r\n        var temp = packed.x / 65536.0;\r\n        var x = Math.floor(temp);\r\n        var encodedFloat1 = (temp - x) * 65536.0;\r\n\r\n        temp = packed.y / 65536.0;\r\n        var y = Math.floor(temp);\r\n        var encodedFloat2 = (temp - y) * 65536.0;\r\n\r\n        AttributeCompression.octDecodeFloat(encodedFloat1, v1);\r\n        AttributeCompression.octDecodeFloat(encodedFloat2, v2);\r\n        AttributeCompression.octDecode(x, y, v3);\r\n    };\r\n\r\n    /**\r\n     * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\r\n     *\r\n     * @param {Cartesian2} textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\r\n     * @returns {Number} The packed texture coordinates.\r\n     *\r\n     */\r\n    AttributeCompression.compressTextureCoordinates = function(textureCoordinates) {\r\n        \r\n\r\n        // Move x and y to the range 0-4095;\r\n        var x = (textureCoordinates.x * 4095.0) | 0;\r\n        var y = (textureCoordinates.y * 4095.0) | 0;\r\n        return 4096.0 * x + y;\r\n    };\r\n\r\n    /**\r\n     * Decompresses texture coordinates that were packed into a single float.\r\n     *\r\n     * @param {Number} compressed The compressed texture coordinates.\r\n     * @param {Cartesian2} result The decompressed texture coordinates.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     *\r\n     */\r\n    AttributeCompression.decompressTextureCoordinates = function(compressed, result) {\r\n        \r\n\r\n        var temp = compressed / 4096.0;\r\n        var xZeroTo4095 = Math.floor(temp);\r\n        result.x = xZeroTo4095 / 4095.0;\r\n        result.y = (compressed - xZeroTo4095 * 4096) / 4095;\r\n        return result;\r\n    };\r\n\r\n    function zigZagDecode(value) {\r\n        return (value >> 1) ^ (-(value & 1));\r\n    }\r\n\r\n    /**\r\n     * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\r\n     *\r\n     * @param {Uint16Array} uBuffer The buffer view of u values.\r\n     * @param {Uint16Array} vBuffer The buffer view of v values.\r\n     * @param {Uint16Array} [heightBuffer] The buffer view of height values.\r\n     *\r\n     * @see {@link https://github.com/AnalyticalGraphicsInc/quantized-mesh|quantized-mesh-1.0 terrain format}\r\n     */\r\n    AttributeCompression.zigZagDeltaDecode = function(uBuffer, vBuffer, heightBuffer) {\r\n        \r\n\r\n        var count = uBuffer.length;\r\n\r\n        var u = 0;\r\n        var v = 0;\r\n        var height = 0;\r\n\r\n        for (var i = 0; i < count; ++i) {\r\n            u += zigZagDecode(uBuffer[i]);\r\n            v += zigZagDecode(vBuffer[i]);\r\n\r\n            uBuffer[i] = u;\r\n            vBuffer[i] = v;\r\n\r\n            if (defined(heightBuffer)) {\r\n                height += zigZagDecode(heightBuffer[i]);\r\n                heightBuffer[i] = height;\r\n            }\r\n        }\r\n    };\r\n\r\n    return AttributeCompression;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/AttributeCompression.js\n// module id = 39\n// module chunks = 0","define([\r\n        './freezeObject',\r\n        './WebGLConstants'\r\n    ], function(\r\n        freezeObject,\r\n        WebGLConstants) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Winding order defines the order of vertices for a triangle to be considered front-facing.\r\n     *\r\n     * @exports WindingOrder\r\n     */\r\n    var WindingOrder = {\r\n        /**\r\n         * Vertices are in clockwise order.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        CLOCKWISE : WebGLConstants.CW,\r\n\r\n        /**\r\n         * Vertices are in counter-clockwise order.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        COUNTER_CLOCKWISE : WebGLConstants.CCW,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        validate : function(windingOrder) {\r\n            return windingOrder === WindingOrder.CLOCKWISE ||\r\n                   windingOrder === WindingOrder.COUNTER_CLOCKWISE;\r\n        }\r\n    };\r\n\r\n    return freezeObject(WindingOrder);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/WindingOrder.js\n// module id = 40\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Enum containing WebGL Constant values by name.\r\n     * for use without an active WebGL context, or in cases where certain constants are unavailable using the WebGL context\r\n     * (For example, in [Safari 9]{@link https://github.com/AnalyticalGraphicsInc/cesium/issues/2989}).\r\n     *\r\n     * These match the constants from the [WebGL 1.0]{@link https://www.khronos.org/registry/webgl/specs/latest/1.0/}\r\n     * and [WebGL 2.0]{@link https://www.khronos.org/registry/webgl/specs/latest/2.0/}\r\n     * specifications.\r\n     *\r\n     * @exports WebGLConstants\r\n     */\r\n    var WebGLConstants = {\r\n        DEPTH_BUFFER_BIT : 0x00000100,\r\n        STENCIL_BUFFER_BIT : 0x00000400,\r\n        COLOR_BUFFER_BIT : 0x00004000,\r\n        POINTS : 0x0000,\r\n        LINES : 0x0001,\r\n        LINE_LOOP : 0x0002,\r\n        LINE_STRIP : 0x0003,\r\n        TRIANGLES : 0x0004,\r\n        TRIANGLE_STRIP : 0x0005,\r\n        TRIANGLE_FAN : 0x0006,\r\n        ZERO : 0,\r\n        ONE : 1,\r\n        SRC_COLOR : 0x0300,\r\n        ONE_MINUS_SRC_COLOR : 0x0301,\r\n        SRC_ALPHA : 0x0302,\r\n        ONE_MINUS_SRC_ALPHA : 0x0303,\r\n        DST_ALPHA : 0x0304,\r\n        ONE_MINUS_DST_ALPHA : 0x0305,\r\n        DST_COLOR : 0x0306,\r\n        ONE_MINUS_DST_COLOR : 0x0307,\r\n        SRC_ALPHA_SATURATE : 0x0308,\r\n        FUNC_ADD : 0x8006,\r\n        BLEND_EQUATION : 0x8009,\r\n        BLEND_EQUATION_RGB : 0x8009, // same as BLEND_EQUATION\r\n        BLEND_EQUATION_ALPHA : 0x883D,\r\n        FUNC_SUBTRACT : 0x800A,\r\n        FUNC_REVERSE_SUBTRACT : 0x800B,\r\n        BLEND_DST_RGB : 0x80C8,\r\n        BLEND_SRC_RGB : 0x80C9,\r\n        BLEND_DST_ALPHA : 0x80CA,\r\n        BLEND_SRC_ALPHA : 0x80CB,\r\n        CONSTANT_COLOR : 0x8001,\r\n        ONE_MINUS_CONSTANT_COLOR : 0x8002,\r\n        CONSTANT_ALPHA : 0x8003,\r\n        ONE_MINUS_CONSTANT_ALPHA : 0x8004,\r\n        BLEND_COLOR : 0x8005,\r\n        ARRAY_BUFFER : 0x8892,\r\n        ELEMENT_ARRAY_BUFFER : 0x8893,\r\n        ARRAY_BUFFER_BINDING : 0x8894,\r\n        ELEMENT_ARRAY_BUFFER_BINDING : 0x8895,\r\n        STREAM_DRAW : 0x88E0,\r\n        STATIC_DRAW : 0x88E4,\r\n        DYNAMIC_DRAW : 0x88E8,\r\n        BUFFER_SIZE : 0x8764,\r\n        BUFFER_USAGE : 0x8765,\r\n        CURRENT_VERTEX_ATTRIB : 0x8626,\r\n        FRONT : 0x0404,\r\n        BACK : 0x0405,\r\n        FRONT_AND_BACK : 0x0408,\r\n        CULL_FACE : 0x0B44,\r\n        BLEND : 0x0BE2,\r\n        DITHER : 0x0BD0,\r\n        STENCIL_TEST : 0x0B90,\r\n        DEPTH_TEST : 0x0B71,\r\n        SCISSOR_TEST : 0x0C11,\r\n        POLYGON_OFFSET_FILL : 0x8037,\r\n        SAMPLE_ALPHA_TO_COVERAGE : 0x809E,\r\n        SAMPLE_COVERAGE : 0x80A0,\r\n        NO_ERROR : 0,\r\n        INVALID_ENUM : 0x0500,\r\n        INVALID_VALUE : 0x0501,\r\n        INVALID_OPERATION : 0x0502,\r\n        OUT_OF_MEMORY : 0x0505,\r\n        CW : 0x0900,\r\n        CCW : 0x0901,\r\n        LINE_WIDTH : 0x0B21,\r\n        ALIASED_POINT_SIZE_RANGE : 0x846D,\r\n        ALIASED_LINE_WIDTH_RANGE : 0x846E,\r\n        CULL_FACE_MODE : 0x0B45,\r\n        FRONT_FACE : 0x0B46,\r\n        DEPTH_RANGE : 0x0B70,\r\n        DEPTH_WRITEMASK : 0x0B72,\r\n        DEPTH_CLEAR_VALUE : 0x0B73,\r\n        DEPTH_FUNC : 0x0B74,\r\n        STENCIL_CLEAR_VALUE : 0x0B91,\r\n        STENCIL_FUNC : 0x0B92,\r\n        STENCIL_FAIL : 0x0B94,\r\n        STENCIL_PASS_DEPTH_FAIL : 0x0B95,\r\n        STENCIL_PASS_DEPTH_PASS : 0x0B96,\r\n        STENCIL_REF : 0x0B97,\r\n        STENCIL_VALUE_MASK : 0x0B93,\r\n        STENCIL_WRITEMASK : 0x0B98,\r\n        STENCIL_BACK_FUNC : 0x8800,\r\n        STENCIL_BACK_FAIL : 0x8801,\r\n        STENCIL_BACK_PASS_DEPTH_FAIL : 0x8802,\r\n        STENCIL_BACK_PASS_DEPTH_PASS : 0x8803,\r\n        STENCIL_BACK_REF : 0x8CA3,\r\n        STENCIL_BACK_VALUE_MASK : 0x8CA4,\r\n        STENCIL_BACK_WRITEMASK : 0x8CA5,\r\n        VIEWPORT : 0x0BA2,\r\n        SCISSOR_BOX : 0x0C10,\r\n        COLOR_CLEAR_VALUE : 0x0C22,\r\n        COLOR_WRITEMASK : 0x0C23,\r\n        UNPACK_ALIGNMENT : 0x0CF5,\r\n        PACK_ALIGNMENT : 0x0D05,\r\n        MAX_TEXTURE_SIZE : 0x0D33,\r\n        MAX_VIEWPORT_DIMS : 0x0D3A,\r\n        SUBPIXEL_BITS : 0x0D50,\r\n        RED_BITS : 0x0D52,\r\n        GREEN_BITS : 0x0D53,\r\n        BLUE_BITS : 0x0D54,\r\n        ALPHA_BITS : 0x0D55,\r\n        DEPTH_BITS : 0x0D56,\r\n        STENCIL_BITS : 0x0D57,\r\n        POLYGON_OFFSET_UNITS : 0x2A00,\r\n        POLYGON_OFFSET_FACTOR : 0x8038,\r\n        TEXTURE_BINDING_2D : 0x8069,\r\n        SAMPLE_BUFFERS : 0x80A8,\r\n        SAMPLES : 0x80A9,\r\n        SAMPLE_COVERAGE_VALUE : 0x80AA,\r\n        SAMPLE_COVERAGE_INVERT : 0x80AB,\r\n        COMPRESSED_TEXTURE_FORMATS : 0x86A3,\r\n        DONT_CARE : 0x1100,\r\n        FASTEST : 0x1101,\r\n        NICEST : 0x1102,\r\n        GENERATE_MIPMAP_HINT : 0x8192,\r\n        BYTE : 0x1400,\r\n        UNSIGNED_BYTE : 0x1401,\r\n        SHORT : 0x1402,\r\n        UNSIGNED_SHORT : 0x1403,\r\n        INT : 0x1404,\r\n        UNSIGNED_INT : 0x1405,\r\n        FLOAT : 0x1406,\r\n        DEPTH_COMPONENT : 0x1902,\r\n        ALPHA : 0x1906,\r\n        RGB : 0x1907,\r\n        RGBA : 0x1908,\r\n        LUMINANCE : 0x1909,\r\n        LUMINANCE_ALPHA : 0x190A,\r\n        UNSIGNED_SHORT_4_4_4_4 : 0x8033,\r\n        UNSIGNED_SHORT_5_5_5_1 : 0x8034,\r\n        UNSIGNED_SHORT_5_6_5 : 0x8363,\r\n        FRAGMENT_SHADER : 0x8B30,\r\n        VERTEX_SHADER : 0x8B31,\r\n        MAX_VERTEX_ATTRIBS : 0x8869,\r\n        MAX_VERTEX_UNIFORM_VECTORS : 0x8DFB,\r\n        MAX_VARYING_VECTORS : 0x8DFC,\r\n        MAX_COMBINED_TEXTURE_IMAGE_UNITS : 0x8B4D,\r\n        MAX_VERTEX_TEXTURE_IMAGE_UNITS : 0x8B4C,\r\n        MAX_TEXTURE_IMAGE_UNITS : 0x8872,\r\n        MAX_FRAGMENT_UNIFORM_VECTORS : 0x8DFD,\r\n        SHADER_TYPE : 0x8B4F,\r\n        DELETE_STATUS : 0x8B80,\r\n        LINK_STATUS : 0x8B82,\r\n        VALIDATE_STATUS : 0x8B83,\r\n        ATTACHED_SHADERS : 0x8B85,\r\n        ACTIVE_UNIFORMS : 0x8B86,\r\n        ACTIVE_ATTRIBUTES : 0x8B89,\r\n        SHADING_LANGUAGE_VERSION : 0x8B8C,\r\n        CURRENT_PROGRAM : 0x8B8D,\r\n        NEVER : 0x0200,\r\n        LESS : 0x0201,\r\n        EQUAL : 0x0202,\r\n        LEQUAL : 0x0203,\r\n        GREATER : 0x0204,\r\n        NOTEQUAL : 0x0205,\r\n        GEQUAL : 0x0206,\r\n        ALWAYS : 0x0207,\r\n        KEEP : 0x1E00,\r\n        REPLACE : 0x1E01,\r\n        INCR : 0x1E02,\r\n        DECR : 0x1E03,\r\n        INVERT : 0x150A,\r\n        INCR_WRAP : 0x8507,\r\n        DECR_WRAP : 0x8508,\r\n        VENDOR : 0x1F00,\r\n        RENDERER : 0x1F01,\r\n        VERSION : 0x1F02,\r\n        NEAREST : 0x2600,\r\n        LINEAR : 0x2601,\r\n        NEAREST_MIPMAP_NEAREST : 0x2700,\r\n        LINEAR_MIPMAP_NEAREST : 0x2701,\r\n        NEAREST_MIPMAP_LINEAR : 0x2702,\r\n        LINEAR_MIPMAP_LINEAR : 0x2703,\r\n        TEXTURE_MAG_FILTER : 0x2800,\r\n        TEXTURE_MIN_FILTER : 0x2801,\r\n        TEXTURE_WRAP_S : 0x2802,\r\n        TEXTURE_WRAP_T : 0x2803,\r\n        TEXTURE_2D : 0x0DE1,\r\n        TEXTURE : 0x1702,\r\n        TEXTURE_CUBE_MAP : 0x8513,\r\n        TEXTURE_BINDING_CUBE_MAP : 0x8514,\r\n        TEXTURE_CUBE_MAP_POSITIVE_X : 0x8515,\r\n        TEXTURE_CUBE_MAP_NEGATIVE_X : 0x8516,\r\n        TEXTURE_CUBE_MAP_POSITIVE_Y : 0x8517,\r\n        TEXTURE_CUBE_MAP_NEGATIVE_Y : 0x8518,\r\n        TEXTURE_CUBE_MAP_POSITIVE_Z : 0x8519,\r\n        TEXTURE_CUBE_MAP_NEGATIVE_Z : 0x851A,\r\n        MAX_CUBE_MAP_TEXTURE_SIZE : 0x851C,\r\n        TEXTURE0 : 0x84C0,\r\n        TEXTURE1 : 0x84C1,\r\n        TEXTURE2 : 0x84C2,\r\n        TEXTURE3 : 0x84C3,\r\n        TEXTURE4 : 0x84C4,\r\n        TEXTURE5 : 0x84C5,\r\n        TEXTURE6 : 0x84C6,\r\n        TEXTURE7 : 0x84C7,\r\n        TEXTURE8 : 0x84C8,\r\n        TEXTURE9 : 0x84C9,\r\n        TEXTURE10 : 0x84CA,\r\n        TEXTURE11 : 0x84CB,\r\n        TEXTURE12 : 0x84CC,\r\n        TEXTURE13 : 0x84CD,\r\n        TEXTURE14 : 0x84CE,\r\n        TEXTURE15 : 0x84CF,\r\n        TEXTURE16 : 0x84D0,\r\n        TEXTURE17 : 0x84D1,\r\n        TEXTURE18 : 0x84D2,\r\n        TEXTURE19 : 0x84D3,\r\n        TEXTURE20 : 0x84D4,\r\n        TEXTURE21 : 0x84D5,\r\n        TEXTURE22 : 0x84D6,\r\n        TEXTURE23 : 0x84D7,\r\n        TEXTURE24 : 0x84D8,\r\n        TEXTURE25 : 0x84D9,\r\n        TEXTURE26 : 0x84DA,\r\n        TEXTURE27 : 0x84DB,\r\n        TEXTURE28 : 0x84DC,\r\n        TEXTURE29 : 0x84DD,\r\n        TEXTURE30 : 0x84DE,\r\n        TEXTURE31 : 0x84DF,\r\n        ACTIVE_TEXTURE : 0x84E0,\r\n        REPEAT : 0x2901,\r\n        CLAMP_TO_EDGE : 0x812F,\r\n        MIRRORED_REPEAT : 0x8370,\r\n        FLOAT_VEC2 : 0x8B50,\r\n        FLOAT_VEC3 : 0x8B51,\r\n        FLOAT_VEC4 : 0x8B52,\r\n        INT_VEC2 : 0x8B53,\r\n        INT_VEC3 : 0x8B54,\r\n        INT_VEC4 : 0x8B55,\r\n        BOOL : 0x8B56,\r\n        BOOL_VEC2 : 0x8B57,\r\n        BOOL_VEC3 : 0x8B58,\r\n        BOOL_VEC4 : 0x8B59,\r\n        FLOAT_MAT2 : 0x8B5A,\r\n        FLOAT_MAT3 : 0x8B5B,\r\n        FLOAT_MAT4 : 0x8B5C,\r\n        SAMPLER_2D : 0x8B5E,\r\n        SAMPLER_CUBE : 0x8B60,\r\n        VERTEX_ATTRIB_ARRAY_ENABLED : 0x8622,\r\n        VERTEX_ATTRIB_ARRAY_SIZE : 0x8623,\r\n        VERTEX_ATTRIB_ARRAY_STRIDE : 0x8624,\r\n        VERTEX_ATTRIB_ARRAY_TYPE : 0x8625,\r\n        VERTEX_ATTRIB_ARRAY_NORMALIZED : 0x886A,\r\n        VERTEX_ATTRIB_ARRAY_POINTER : 0x8645,\r\n        VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 0x889F,\r\n        IMPLEMENTATION_COLOR_READ_TYPE : 0x8B9A,\r\n        IMPLEMENTATION_COLOR_READ_FORMAT : 0x8B9B,\r\n        COMPILE_STATUS : 0x8B81,\r\n        LOW_FLOAT : 0x8DF0,\r\n        MEDIUM_FLOAT : 0x8DF1,\r\n        HIGH_FLOAT : 0x8DF2,\r\n        LOW_INT : 0x8DF3,\r\n        MEDIUM_INT : 0x8DF4,\r\n        HIGH_INT : 0x8DF5,\r\n        FRAMEBUFFER : 0x8D40,\r\n        RENDERBUFFER : 0x8D41,\r\n        RGBA4 : 0x8056,\r\n        RGB5_A1 : 0x8057,\r\n        RGB565 : 0x8D62,\r\n        DEPTH_COMPONENT16 : 0x81A5,\r\n        STENCIL_INDEX : 0x1901,\r\n        STENCIL_INDEX8 : 0x8D48,\r\n        DEPTH_STENCIL : 0x84F9,\r\n        RENDERBUFFER_WIDTH : 0x8D42,\r\n        RENDERBUFFER_HEIGHT : 0x8D43,\r\n        RENDERBUFFER_INTERNAL_FORMAT : 0x8D44,\r\n        RENDERBUFFER_RED_SIZE : 0x8D50,\r\n        RENDERBUFFER_GREEN_SIZE : 0x8D51,\r\n        RENDERBUFFER_BLUE_SIZE : 0x8D52,\r\n        RENDERBUFFER_ALPHA_SIZE : 0x8D53,\r\n        RENDERBUFFER_DEPTH_SIZE : 0x8D54,\r\n        RENDERBUFFER_STENCIL_SIZE : 0x8D55,\r\n        FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 0x8CD0,\r\n        FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 0x8CD1,\r\n        FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 0x8CD2,\r\n        FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : 0x8CD3,\r\n        COLOR_ATTACHMENT0 : 0x8CE0,\r\n        DEPTH_ATTACHMENT : 0x8D00,\r\n        STENCIL_ATTACHMENT : 0x8D20,\r\n        DEPTH_STENCIL_ATTACHMENT : 0x821A,\r\n        NONE : 0,\r\n        FRAMEBUFFER_COMPLETE : 0x8CD5,\r\n        FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 0x8CD6,\r\n        FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : 0x8CD7,\r\n        FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 0x8CD9,\r\n        FRAMEBUFFER_UNSUPPORTED : 0x8CDD,\r\n        FRAMEBUFFER_BINDING : 0x8CA6,\r\n        RENDERBUFFER_BINDING : 0x8CA7,\r\n        MAX_RENDERBUFFER_SIZE : 0x84E8,\r\n        INVALID_FRAMEBUFFER_OPERATION : 0x0506,\r\n        UNPACK_FLIP_Y_WEBGL : 0x9240,\r\n        UNPACK_PREMULTIPLY_ALPHA_WEBGL : 0x9241,\r\n        CONTEXT_LOST_WEBGL : 0x9242,\r\n        UNPACK_COLORSPACE_CONVERSION_WEBGL : 0x9243,\r\n        BROWSER_DEFAULT_WEBGL : 0x9244,\r\n\r\n        // WEBGL_compressed_texture_s3tc\r\n        COMPRESSED_RGB_S3TC_DXT1_EXT : 0x83F0,\r\n        COMPRESSED_RGBA_S3TC_DXT1_EXT : 0x83F1,\r\n        COMPRESSED_RGBA_S3TC_DXT3_EXT : 0x83F2,\r\n        COMPRESSED_RGBA_S3TC_DXT5_EXT : 0x83F3,\r\n\r\n        // WEBGL_compressed_texture_pvrtc\r\n        COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 0x8C00,\r\n        COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 0x8C01,\r\n        COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 0x8C02,\r\n        COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 0x8C03,\r\n\r\n        // WEBGL_compressed_texture_etc1\r\n        COMPRESSED_RGB_ETC1_WEBGL : 0x8D64,\r\n\r\n        // EXT_color_buffer_half_float\r\n        HALF_FLOAT_OES : 0x8D61,\r\n\r\n        // Desktop OpenGL\r\n        DOUBLE : 0x140A,\r\n\r\n        // WebGL 2\r\n        READ_BUFFER : 0x0C02,\r\n        UNPACK_ROW_LENGTH : 0x0CF2,\r\n        UNPACK_SKIP_ROWS : 0x0CF3,\r\n        UNPACK_SKIP_PIXELS : 0x0CF4,\r\n        PACK_ROW_LENGTH : 0x0D02,\r\n        PACK_SKIP_ROWS : 0x0D03,\r\n        PACK_SKIP_PIXELS : 0x0D04,\r\n        COLOR : 0x1800,\r\n        DEPTH : 0x1801,\r\n        STENCIL : 0x1802,\r\n        RED : 0x1903,\r\n        RGB8 : 0x8051,\r\n        RGBA8 : 0x8058,\r\n        RGB10_A2 : 0x8059,\r\n        TEXTURE_BINDING_3D : 0x806A,\r\n        UNPACK_SKIP_IMAGES : 0x806D,\r\n        UNPACK_IMAGE_HEIGHT : 0x806E,\r\n        TEXTURE_3D : 0x806F,\r\n        TEXTURE_WRAP_R : 0x8072,\r\n        MAX_3D_TEXTURE_SIZE : 0x8073,\r\n        UNSIGNED_INT_2_10_10_10_REV : 0x8368,\r\n        MAX_ELEMENTS_VERTICES : 0x80E8,\r\n        MAX_ELEMENTS_INDICES : 0x80E9,\r\n        TEXTURE_MIN_LOD : 0x813A,\r\n        TEXTURE_MAX_LOD : 0x813B,\r\n        TEXTURE_BASE_LEVEL : 0x813C,\r\n        TEXTURE_MAX_LEVEL : 0x813D,\r\n        MIN : 0x8007,\r\n        MAX : 0x8008,\r\n        DEPTH_COMPONENT24 : 0x81A6,\r\n        MAX_TEXTURE_LOD_BIAS : 0x84FD,\r\n        TEXTURE_COMPARE_MODE : 0x884C,\r\n        TEXTURE_COMPARE_FUNC : 0x884D,\r\n        CURRENT_QUERY : 0x8865,\r\n        QUERY_RESULT : 0x8866,\r\n        QUERY_RESULT_AVAILABLE : 0x8867,\r\n        STREAM_READ : 0x88E1,\r\n        STREAM_COPY : 0x88E2,\r\n        STATIC_READ : 0x88E5,\r\n        STATIC_COPY : 0x88E6,\r\n        DYNAMIC_READ : 0x88E9,\r\n        DYNAMIC_COPY : 0x88EA,\r\n        MAX_DRAW_BUFFERS : 0x8824,\r\n        DRAW_BUFFER0 : 0x8825,\r\n        DRAW_BUFFER1 : 0x8826,\r\n        DRAW_BUFFER2 : 0x8827,\r\n        DRAW_BUFFER3 : 0x8828,\r\n        DRAW_BUFFER4 : 0x8829,\r\n        DRAW_BUFFER5 : 0x882A,\r\n        DRAW_BUFFER6 : 0x882B,\r\n        DRAW_BUFFER7 : 0x882C,\r\n        DRAW_BUFFER8 : 0x882D,\r\n        DRAW_BUFFER9 : 0x882E,\r\n        DRAW_BUFFER10 : 0x882F,\r\n        DRAW_BUFFER11 : 0x8830,\r\n        DRAW_BUFFER12 : 0x8831,\r\n        DRAW_BUFFER13 : 0x8832,\r\n        DRAW_BUFFER14 : 0x8833,\r\n        DRAW_BUFFER15 : 0x8834,\r\n        MAX_FRAGMENT_UNIFORM_COMPONENTS : 0x8B49,\r\n        MAX_VERTEX_UNIFORM_COMPONENTS : 0x8B4A,\r\n        SAMPLER_3D : 0x8B5F,\r\n        SAMPLER_2D_SHADOW : 0x8B62,\r\n        FRAGMENT_SHADER_DERIVATIVE_HINT : 0x8B8B,\r\n        PIXEL_PACK_BUFFER : 0x88EB,\r\n        PIXEL_UNPACK_BUFFER : 0x88EC,\r\n        PIXEL_PACK_BUFFER_BINDING : 0x88ED,\r\n        PIXEL_UNPACK_BUFFER_BINDING : 0x88EF,\r\n        FLOAT_MAT2x3 : 0x8B65,\r\n        FLOAT_MAT2x4 : 0x8B66,\r\n        FLOAT_MAT3x2 : 0x8B67,\r\n        FLOAT_MAT3x4 : 0x8B68,\r\n        FLOAT_MAT4x2 : 0x8B69,\r\n        FLOAT_MAT4x3 : 0x8B6A,\r\n        SRGB : 0x8C40,\r\n        SRGB8 : 0x8C41,\r\n        SRGB8_ALPHA8 : 0x8C43,\r\n        COMPARE_REF_TO_TEXTURE : 0x884E,\r\n        RGBA32F : 0x8814,\r\n        RGB32F : 0x8815,\r\n        RGBA16F : 0x881A,\r\n        RGB16F : 0x881B,\r\n        VERTEX_ATTRIB_ARRAY_INTEGER : 0x88FD,\r\n        MAX_ARRAY_TEXTURE_LAYERS : 0x88FF,\r\n        MIN_PROGRAM_TEXEL_OFFSET : 0x8904,\r\n        MAX_PROGRAM_TEXEL_OFFSET : 0x8905,\r\n        MAX_VARYING_COMPONENTS : 0x8B4B,\r\n        TEXTURE_2D_ARRAY : 0x8C1A,\r\n        TEXTURE_BINDING_2D_ARRAY : 0x8C1D,\r\n        R11F_G11F_B10F : 0x8C3A,\r\n        UNSIGNED_INT_10F_11F_11F_REV : 0x8C3B,\r\n        RGB9_E5 : 0x8C3D,\r\n        UNSIGNED_INT_5_9_9_9_REV : 0x8C3E,\r\n        TRANSFORM_FEEDBACK_BUFFER_MODE : 0x8C7F,\r\n        MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : 0x8C80,\r\n        TRANSFORM_FEEDBACK_VARYINGS : 0x8C83,\r\n        TRANSFORM_FEEDBACK_BUFFER_START : 0x8C84,\r\n        TRANSFORM_FEEDBACK_BUFFER_SIZE : 0x8C85,\r\n        TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 0x8C88,\r\n        RASTERIZER_DISCARD : 0x8C89,\r\n        MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS : 0x8C8A,\r\n        MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS : 0x8C8B,\r\n        INTERLEAVED_ATTRIBS : 0x8C8C,\r\n        SEPARATE_ATTRIBS : 0x8C8D,\r\n        TRANSFORM_FEEDBACK_BUFFER : 0x8C8E,\r\n        TRANSFORM_FEEDBACK_BUFFER_BINDING : 0x8C8F,\r\n        RGBA32UI : 0x8D70,\r\n        RGB32UI : 0x8D71,\r\n        RGBA16UI : 0x8D76,\r\n        RGB16UI : 0x8D77,\r\n        RGBA8UI : 0x8D7C,\r\n        RGB8UI : 0x8D7D,\r\n        RGBA32I : 0x8D82,\r\n        RGB32I : 0x8D83,\r\n        RGBA16I : 0x8D88,\r\n        RGB16I : 0x8D89,\r\n        RGBA8I : 0x8D8E,\r\n        RGB8I : 0x8D8F,\r\n        RED_INTEGER : 0x8D94,\r\n        RGB_INTEGER : 0x8D98,\r\n        RGBA_INTEGER : 0x8D99,\r\n        SAMPLER_2D_ARRAY : 0x8DC1,\r\n        SAMPLER_2D_ARRAY_SHADOW : 0x8DC4,\r\n        SAMPLER_CUBE_SHADOW : 0x8DC5,\r\n        UNSIGNED_INT_VEC2 : 0x8DC6,\r\n        UNSIGNED_INT_VEC3 : 0x8DC7,\r\n        UNSIGNED_INT_VEC4 : 0x8DC8,\r\n        INT_SAMPLER_2D : 0x8DCA,\r\n        INT_SAMPLER_3D : 0x8DCB,\r\n        INT_SAMPLER_CUBE : 0x8DCC,\r\n        INT_SAMPLER_2D_ARRAY : 0x8DCF,\r\n        UNSIGNED_INT_SAMPLER_2D : 0x8DD2,\r\n        UNSIGNED_INT_SAMPLER_3D : 0x8DD3,\r\n        UNSIGNED_INT_SAMPLER_CUBE : 0x8DD4,\r\n        UNSIGNED_INT_SAMPLER_2D_ARRAY : 0x8DD7,\r\n        DEPTH_COMPONENT32F : 0x8CAC,\r\n        DEPTH32F_STENCIL8 : 0x8CAD,\r\n        FLOAT_32_UNSIGNED_INT_24_8_REV : 0x8DAD,\r\n        FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 0x8210,\r\n        FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 0x8211,\r\n        FRAMEBUFFER_ATTACHMENT_RED_SIZE : 0x8212,\r\n        FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 0x8213,\r\n        FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 0x8214,\r\n        FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 0x8215,\r\n        FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 0x8216,\r\n        FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 0x8217,\r\n        FRAMEBUFFER_DEFAULT : 0x8218,\r\n        UNSIGNED_INT_24_8 : 0x84FA,\r\n        DEPTH24_STENCIL8 : 0x88F0,\r\n        UNSIGNED_NORMALIZED : 0x8C17,\r\n        DRAW_FRAMEBUFFER_BINDING : 0x8CA6, // Same as FRAMEBUFFER_BINDING\r\n        READ_FRAMEBUFFER : 0x8CA8,\r\n        DRAW_FRAMEBUFFER : 0x8CA9,\r\n        READ_FRAMEBUFFER_BINDING : 0x8CAA,\r\n        RENDERBUFFER_SAMPLES : 0x8CAB,\r\n        FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 0x8CD4,\r\n        MAX_COLOR_ATTACHMENTS : 0x8CDF,\r\n        COLOR_ATTACHMENT1 : 0x8CE1,\r\n        COLOR_ATTACHMENT2 : 0x8CE2,\r\n        COLOR_ATTACHMENT3 : 0x8CE3,\r\n        COLOR_ATTACHMENT4 : 0x8CE4,\r\n        COLOR_ATTACHMENT5 : 0x8CE5,\r\n        COLOR_ATTACHMENT6 : 0x8CE6,\r\n        COLOR_ATTACHMENT7 : 0x8CE7,\r\n        COLOR_ATTACHMENT8 : 0x8CE8,\r\n        COLOR_ATTACHMENT9 : 0x8CE9,\r\n        COLOR_ATTACHMENT10 : 0x8CEA,\r\n        COLOR_ATTACHMENT11 : 0x8CEB,\r\n        COLOR_ATTACHMENT12 : 0x8CEC,\r\n        COLOR_ATTACHMENT13 : 0x8CED,\r\n        COLOR_ATTACHMENT14 : 0x8CEE,\r\n        COLOR_ATTACHMENT15 : 0x8CEF,\r\n        FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 0x8D56,\r\n        MAX_SAMPLES : 0x8D57,\r\n        HALF_FLOAT : 0x140B,\r\n        RG : 0x8227,\r\n        RG_INTEGER : 0x8228,\r\n        R8 : 0x8229,\r\n        RG8 : 0x822B,\r\n        R16F : 0x822D,\r\n        R32F : 0x822E,\r\n        RG16F : 0x822F,\r\n        RG32F : 0x8230,\r\n        R8I : 0x8231,\r\n        R8UI : 0x8232,\r\n        R16I : 0x8233,\r\n        R16UI : 0x8234,\r\n        R32I : 0x8235,\r\n        R32UI : 0x8236,\r\n        RG8I : 0x8237,\r\n        RG8UI : 0x8238,\r\n        RG16I : 0x8239,\r\n        RG16UI : 0x823A,\r\n        RG32I : 0x823B,\r\n        RG32UI : 0x823C,\r\n        VERTEX_ARRAY_BINDING : 0x85B5,\r\n        R8_SNORM : 0x8F94,\r\n        RG8_SNORM : 0x8F95,\r\n        RGB8_SNORM : 0x8F96,\r\n        RGBA8_SNORM : 0x8F97,\r\n        SIGNED_NORMALIZED : 0x8F9C,\r\n        COPY_READ_BUFFER : 0x8F36,\r\n        COPY_WRITE_BUFFER : 0x8F37,\r\n        COPY_READ_BUFFER_BINDING : 0x8F36, // Same as COPY_READ_BUFFER\r\n        COPY_WRITE_BUFFER_BINDING : 0x8F37, // Same as COPY_WRITE_BUFFER\r\n        UNIFORM_BUFFER : 0x8A11,\r\n        UNIFORM_BUFFER_BINDING : 0x8A28,\r\n        UNIFORM_BUFFER_START : 0x8A29,\r\n        UNIFORM_BUFFER_SIZE : 0x8A2A,\r\n        MAX_VERTEX_UNIFORM_BLOCKS : 0x8A2B,\r\n        MAX_FRAGMENT_UNIFORM_BLOCKS : 0x8A2D,\r\n        MAX_COMBINED_UNIFORM_BLOCKS : 0x8A2E,\r\n        MAX_UNIFORM_BUFFER_BINDINGS : 0x8A2F,\r\n        MAX_UNIFORM_BLOCK_SIZE : 0x8A30,\r\n        MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 0x8A31,\r\n        MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS : 0x8A33,\r\n        UNIFORM_BUFFER_OFFSET_ALIGNMENT : 0x8A34,\r\n        ACTIVE_UNIFORM_BLOCKS : 0x8A36,\r\n        UNIFORM_TYPE : 0x8A37,\r\n        UNIFORM_SIZE : 0x8A38,\r\n        UNIFORM_BLOCK_INDEX : 0x8A3A,\r\n        UNIFORM_OFFSET : 0x8A3B,\r\n        UNIFORM_ARRAY_STRIDE : 0x8A3C,\r\n        UNIFORM_MATRIX_STRIDE : 0x8A3D,\r\n        UNIFORM_IS_ROW_MAJOR : 0x8A3E,\r\n        UNIFORM_BLOCK_BINDING : 0x8A3F,\r\n        UNIFORM_BLOCK_DATA_SIZE : 0x8A40,\r\n        UNIFORM_BLOCK_ACTIVE_UNIFORMS : 0x8A42,\r\n        UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 0x8A43,\r\n        UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER : 0x8A44,\r\n        UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER : 0x8A46,\r\n        INVALID_INDEX : 0xFFFFFFFF,\r\n        MAX_VERTEX_OUTPUT_COMPONENTS : 0x9122,\r\n        MAX_FRAGMENT_INPUT_COMPONENTS : 0x9125,\r\n        MAX_SERVER_WAIT_TIMEOUT : 0x9111,\r\n        OBJECT_TYPE : 0x9112,\r\n        SYNC_CONDITION : 0x9113,\r\n        SYNC_STATUS : 0x9114,\r\n        SYNC_FLAGS : 0x9115,\r\n        SYNC_FENCE : 0x9116,\r\n        SYNC_GPU_COMMANDS_COMPLETE : 0x9117,\r\n        UNSIGNALED : 0x9118,\r\n        SIGNALED : 0x9119,\r\n        ALREADY_SIGNALED : 0x911A,\r\n        TIMEOUT_EXPIRED : 0x911B,\r\n        CONDITION_SATISFIED : 0x911C,\r\n        WAIT_FAILED : 0x911D,\r\n        SYNC_FLUSH_COMMANDS_BIT : 0x00000001,\r\n        VERTEX_ATTRIB_ARRAY_DIVISOR : 0x88FE,\r\n        ANY_SAMPLES_PASSED : 0x8C2F,\r\n        ANY_SAMPLES_PASSED_CONSERVATIVE : 0x8D6A,\r\n        SAMPLER_BINDING : 0x8919,\r\n        RGB10_A2UI : 0x906F,\r\n        INT_2_10_10_10_REV : 0x8D9F,\r\n        TRANSFORM_FEEDBACK : 0x8E22,\r\n        TRANSFORM_FEEDBACK_PAUSED : 0x8E23,\r\n        TRANSFORM_FEEDBACK_ACTIVE : 0x8E24,\r\n        TRANSFORM_FEEDBACK_BINDING : 0x8E25,\r\n        COMPRESSED_R11_EAC : 0x9270,\r\n        COMPRESSED_SIGNED_R11_EAC : 0x9271,\r\n        COMPRESSED_RG11_EAC : 0x9272,\r\n        COMPRESSED_SIGNED_RG11_EAC : 0x9273,\r\n        COMPRESSED_RGB8_ETC2 : 0x9274,\r\n        COMPRESSED_SRGB8_ETC2 : 0x9275,\r\n        COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,\r\n        COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9277,\r\n        COMPRESSED_RGBA8_ETC2_EAC : 0x9278,\r\n        COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,\r\n        TEXTURE_IMMUTABLE_FORMAT : 0x912F,\r\n        MAX_ELEMENT_INDEX : 0x8D6B,\r\n        TEXTURE_IMMUTABLE_LEVELS : 0x82DF,\r\n\r\n        // Extensions\r\n        MAX_TEXTURE_MAX_ANISOTROPY_EXT : 0x84FF\r\n    };\r\n\r\n    return freezeObject(WebGLConstants);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/WebGLConstants.js\n// module id = 41\n// module chunks = 0","define([\r\n        '../ThirdParty/when',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './Cartographic',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './EarthOrientationParameters',\r\n        './EarthOrientationParametersSample',\r\n        './Ellipsoid',\r\n        './HeadingPitchRoll',\r\n        './Iau2006XysData',\r\n        './Iau2006XysSample',\r\n        './JulianDate',\r\n        './Math',\r\n        './Matrix3',\r\n        './Matrix4',\r\n        './Quaternion',\r\n        './TimeConstants'\r\n    ], function(\r\n        when,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartesian4,\r\n        Cartographic,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        EarthOrientationParameters,\r\n        EarthOrientationParametersSample,\r\n        Ellipsoid,\r\n        HeadingPitchRoll,\r\n        Iau2006XysData,\r\n        Iau2006XysSample,\r\n        JulianDate,\r\n        CesiumMath,\r\n        Matrix3,\r\n        Matrix4,\r\n        Quaternion,\r\n        TimeConstants) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Contains functions for transforming positions to various reference frames.\r\n     *\r\n     * @exports Transforms\r\n     */\r\n    var Transforms = {};\r\n\r\n    var vectorProductLocalFrame = {\r\n        up : {\r\n            south : 'east',\r\n            north : 'west',\r\n            west : 'south',\r\n            east : 'north'\r\n        },\r\n        down : {\r\n            south : 'west',\r\n            north : 'east',\r\n            west : 'north',\r\n            east : 'south'\r\n        },\r\n        south : {\r\n            up : 'west',\r\n            down : 'east',\r\n            west : 'down',\r\n            east : 'up'\r\n        },\r\n        north : {\r\n            up : 'east',\r\n            down : 'west',\r\n            west : 'up',\r\n            east : 'down'\r\n        },\r\n        west : {\r\n            up : 'north',\r\n            down : 'south',\r\n            north : 'down',\r\n            south : 'up'\r\n        },\r\n        east : {\r\n            up : 'south',\r\n            down : 'north',\r\n            north : 'up',\r\n            south : 'down'\r\n        }\r\n    };\r\n\r\n    var degeneratePositionLocalFrame = {\r\n        north : [-1, 0, 0],\r\n        east : [0, 1, 0],\r\n        up : [0, 0, 1],\r\n        south : [1, 0, 0],\r\n        west : [0, -1, 0],\r\n        down : [0, 0, -1]\r\n    };\r\n\r\n    var localFrameToFixedFrameCache = {};\r\n\r\n    var scratchCalculateCartesian = {\r\n        east : new Cartesian3(),\r\n        north : new Cartesian3(),\r\n        up : new Cartesian3(),\r\n        west : new Cartesian3(),\r\n        south : new Cartesian3(),\r\n        down : new Cartesian3()\r\n    };\r\n    var scratchFirstCartesian = new Cartesian3();\r\n    var scratchSecondCartesian = new Cartesian3();\r\n    var scratchThirdCartesian = new Cartesian3();\r\n    /**\r\n    * Generates a function that computes a 4x4 transformation matrix from a reference frame\r\n    * centered at the provided origin to the provided ellipsoid's fixed reference frame.\r\n    * @param  {String} firstAxis  name of the first axis of the local reference frame. Must be\r\n    *  'east', 'north', 'up', 'west', 'south' or 'down'.\r\n    * @param  {String} secondAxis  name of the second axis of the local reference frame. Must be\r\n    *  'east', 'north', 'up', 'west', 'south' or 'down'.\r\n    * @return {localFrameToFixedFrameGenerator~resultat} The function that will computes a\r\n    * 4x4 transformation matrix from a reference frame, with first axis and second axis compliant with the parameters,\r\n    */\r\n    Transforms.localFrameToFixedFrameGenerator = function (firstAxis, secondAxis) {\r\n        if (!vectorProductLocalFrame.hasOwnProperty(firstAxis) || !vectorProductLocalFrame[firstAxis].hasOwnProperty(secondAxis)) {\r\n            throw new DeveloperError('firstAxis and secondAxis must be east, north, up, west, south or down.');\r\n        }\r\n        var thirdAxis = vectorProductLocalFrame[firstAxis][secondAxis];\r\n\r\n        /**\r\n         * Computes a 4x4 transformation matrix from a reference frame\r\n         * centered at the provided origin to the provided ellipsoid's fixed reference frame.\r\n         * @callback Transforms~LocalFrameToFixedFrame\r\n         * @param {Cartesian3} origin The center point of the local reference frame.\r\n         * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\r\n         * @param {Matrix4} [result] The object onto which to store the result.\r\n         * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\r\n         */\r\n        var resultat;\r\n        var hashAxis = firstAxis + secondAxis;\r\n        if (defined(localFrameToFixedFrameCache[hashAxis])) {\r\n            resultat = localFrameToFixedFrameCache[hashAxis];\r\n        } else {\r\n            resultat = function (origin, ellipsoid, result) {\r\n                \r\n                if (!defined(result)) {\r\n                    result = new Matrix4();\r\n                }\r\n                // If x and y are zero, assume origin is at a pole, which is a special case.\r\n                if (CesiumMath.equalsEpsilon(origin.x, 0.0, CesiumMath.EPSILON14) && CesiumMath.equalsEpsilon(origin.y, 0.0, CesiumMath.EPSILON14)) {\r\n                    var sign = CesiumMath.sign(origin.z);\r\n\r\n                    Cartesian3.unpack(degeneratePositionLocalFrame[firstAxis], 0, scratchFirstCartesian);\r\n                    if (firstAxis !== 'east' && firstAxis !== 'west') {\r\n                        Cartesian3.multiplyByScalar(scratchFirstCartesian, sign, scratchFirstCartesian);\r\n                    }\r\n\r\n                    Cartesian3.unpack(degeneratePositionLocalFrame[secondAxis], 0, scratchSecondCartesian);\r\n                    if (secondAxis !== 'east' && secondAxis !== 'west') {\r\n                        Cartesian3.multiplyByScalar(scratchSecondCartesian, sign, scratchSecondCartesian);\r\n                    }\r\n\r\n                    Cartesian3.unpack(degeneratePositionLocalFrame[thirdAxis], 0, scratchThirdCartesian);\r\n                    if (thirdAxis !== 'east' && thirdAxis !== 'west') {\r\n                        Cartesian3.multiplyByScalar(scratchThirdCartesian, sign, scratchThirdCartesian);\r\n                    }\r\n                } else {\r\n                    ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n                    ellipsoid.geodeticSurfaceNormal(origin, scratchCalculateCartesian.up);\r\n\r\n                    var up = scratchCalculateCartesian.up;\r\n                    var east = scratchCalculateCartesian.east;\r\n                    east.x = -origin.y;\r\n                    east.y = origin.x;\r\n                    east.z = 0.0;\r\n                    Cartesian3.normalize(east, scratchCalculateCartesian.east);\r\n                    Cartesian3.cross(up, east, scratchCalculateCartesian.north);\r\n\r\n                    Cartesian3.multiplyByScalar(scratchCalculateCartesian.up, -1, scratchCalculateCartesian.down);\r\n                    Cartesian3.multiplyByScalar(scratchCalculateCartesian.east, -1, scratchCalculateCartesian.west);\r\n                    Cartesian3.multiplyByScalar(scratchCalculateCartesian.north, -1, scratchCalculateCartesian.south);\r\n\r\n                    scratchFirstCartesian = scratchCalculateCartesian[firstAxis];\r\n                    scratchSecondCartesian = scratchCalculateCartesian[secondAxis];\r\n                    scratchThirdCartesian = scratchCalculateCartesian[thirdAxis];\r\n                }\r\n                result[0] = scratchFirstCartesian.x;\r\n                result[1] = scratchFirstCartesian.y;\r\n                result[2] = scratchFirstCartesian.z;\r\n                result[3] = 0.0;\r\n                result[4] = scratchSecondCartesian.x;\r\n                result[5] = scratchSecondCartesian.y;\r\n                result[6] = scratchSecondCartesian.z;\r\n                result[7] = 0.0;\r\n                result[8] = scratchThirdCartesian.x;\r\n                result[9] = scratchThirdCartesian.y;\r\n                result[10] = scratchThirdCartesian.z;\r\n                result[11] = 0.0;\r\n                result[12] = origin.x;\r\n                result[13] = origin.y;\r\n                result[14] = origin.z;\r\n                result[15] = 1.0;\r\n                return result;\r\n            };\r\n            localFrameToFixedFrameCache[hashAxis] = resultat;\r\n        }\r\n        return resultat;\r\n    };\r\n\r\n    /**\r\n     * Computes a 4x4 transformation matrix from a reference frame with an east-north-up axes\r\n     * centered at the provided origin to the provided ellipsoid's fixed reference frame.\r\n     * The local axes are defined as:\r\n     * <ul>\r\n     * <li>The <code>x</code> axis points in the local east direction.</li>\r\n     * <li>The <code>y</code> axis points in the local north direction.</li>\r\n     * <li>The <code>z</code> axis points in the direction of the ellipsoid surface normal which passes through the position.</li>\r\n     * </ul>\r\n     *\r\n     * @function\r\n     * @param {Cartesian3} origin The center point of the local reference frame.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\r\n     *\r\n     * @example\r\n     * // Get the transform from local east-north-up at cartographic (0.0, 0.0) to Earth's fixed frame.\r\n     * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\r\n     * var transform = Cesium.Transforms.eastNorthUpToFixedFrame(center);\r\n     */\r\n    Transforms.eastNorthUpToFixedFrame = Transforms.localFrameToFixedFrameGenerator('east','north');\r\n\r\n    /**\r\n     * Computes a 4x4 transformation matrix from a reference frame with an north-east-down axes\r\n     * centered at the provided origin to the provided ellipsoid's fixed reference frame.\r\n     * The local axes are defined as:\r\n     * <ul>\r\n     * <li>The <code>x</code> axis points in the local north direction.</li>\r\n     * <li>The <code>y</code> axis points in the local east direction.</li>\r\n     * <li>The <code>z</code> axis points in the opposite direction of the ellipsoid surface normal which passes through the position.</li>\r\n     * </ul>\r\n     *\r\n     * @function\r\n     * @param {Cartesian3} origin The center point of the local reference frame.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\r\n     *\r\n     * @example\r\n     * // Get the transform from local north-east-down at cartographic (0.0, 0.0) to Earth's fixed frame.\r\n     * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\r\n     * var transform = Cesium.Transforms.northEastDownToFixedFrame(center);\r\n     */\r\n    Transforms.northEastDownToFixedFrame = Transforms.localFrameToFixedFrameGenerator('north','east');\r\n\r\n    /**\r\n     * Computes a 4x4 transformation matrix from a reference frame with an north-up-east axes\r\n     * centered at the provided origin to the provided ellipsoid's fixed reference frame.\r\n     * The local axes are defined as:\r\n     * <ul>\r\n     * <li>The <code>x</code> axis points in the local north direction.</li>\r\n     * <li>The <code>y</code> axis points in the direction of the ellipsoid surface normal which passes through the position.</li>\r\n     * <li>The <code>z</code> axis points in the local east direction.</li>\r\n     * </ul>\r\n     *\r\n     * @function\r\n     * @param {Cartesian3} origin The center point of the local reference frame.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\r\n     *\r\n     * @example\r\n     * // Get the transform from local north-up-east at cartographic (0.0, 0.0) to Earth's fixed frame.\r\n     * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\r\n     * var transform = Cesium.Transforms.northUpEastToFixedFrame(center);\r\n     */\r\n    Transforms.northUpEastToFixedFrame = Transforms.localFrameToFixedFrameGenerator('north','up');\r\n\r\n    /**\r\n     * Computes a 4x4 transformation matrix from a reference frame with an north-west-up axes\r\n     * centered at the provided origin to the provided ellipsoid's fixed reference frame.\r\n     * The local axes are defined as:\r\n     * <ul>\r\n     * <li>The <code>x</code> axis points in the local north direction.</li>\r\n     * <li>The <code>y</code> axis points in the local west direction.</li>\r\n     * <li>The <code>z</code> axis points in the direction of the ellipsoid surface normal which passes through the position.</li>\r\n     * </ul>\r\n     *\r\n     * @function\r\n     * @param {Cartesian3} origin The center point of the local reference frame.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\r\n     *\r\n      * @example\r\n     * // Get the transform from local north-West-Up at cartographic (0.0, 0.0) to Earth's fixed frame.\r\n     * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\r\n     * var transform = Cesium.Transforms.northWestUpToFixedFrame(center);\r\n     */\r\n    Transforms.northWestUpToFixedFrame = Transforms.localFrameToFixedFrameGenerator('north','west');\r\n\r\n    var scratchHPRQuaternion = new Quaternion();\r\n    var scratchScale = new Cartesian3(1.0, 1.0, 1.0);\r\n    var scratchHPRMatrix4 = new Matrix4();\r\n\r\n    /**\r\n     * Computes a 4x4 transformation matrix from a reference frame with axes computed from the heading-pitch-roll angles\r\n     * centered at the provided origin to the provided ellipsoid's fixed reference frame. Heading is the rotation from the local north\r\n     * direction where a positive angle is increasing eastward. Pitch is the rotation from the local east-north plane. Positive pitch angles\r\n     * are above the plane. Negative pitch angles are below the plane. Roll is the first rotation applied about the local east axis.\r\n     *\r\n     * @param {Cartesian3} origin The center point of the local reference frame.\r\n     * @param {HeadingPitchRoll} headingPitchRoll The heading, pitch, and roll.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\r\n     * @param {Transforms~LocalFrameToFixedFrame} [fixedFrameTransform=Transforms.eastNorthUpToFixedFrame] A 4x4 transformation\r\n     *  matrix from a reference frame to the provided ellipsoid's fixed reference frame\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if none was provided.\r\n     *\r\n     * @example\r\n     * // Get the transform from local heading-pitch-roll at cartographic (0.0, 0.0) to Earth's fixed frame.\r\n     * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\r\n     * var heading = -Cesium.Math.PI_OVER_TWO;\r\n     * var pitch = Cesium.Math.PI_OVER_FOUR;\r\n     * var roll = 0.0;\r\n     * var hpr = new Cesium.HeadingPitchRoll(heading, pitch, roll);\r\n     * var transform = Cesium.Transforms.headingPitchRollToFixedFrame(center, hpr);\r\n     */\r\n    Transforms.headingPitchRollToFixedFrame = function(origin, headingPitchRoll, ellipsoid, fixedFrameTransform, result) {\r\n        \r\n\r\n        fixedFrameTransform = defaultValue(fixedFrameTransform, Transforms.eastNorthUpToFixedFrame);\r\n        var hprQuaternion = Quaternion.fromHeadingPitchRoll(headingPitchRoll, scratchHPRQuaternion);\r\n        var hprMatrix = Matrix4.fromTranslationQuaternionRotationScale(Cartesian3.ZERO, hprQuaternion, scratchScale, scratchHPRMatrix4);\r\n        result = fixedFrameTransform(origin, ellipsoid, result);\r\n        return Matrix4.multiply(result, hprMatrix, result);\r\n    };\r\n\r\n    var scratchENUMatrix4 = new Matrix4();\r\n    var scratchHPRMatrix3 = new Matrix3();\r\n\r\n    /**\r\n     * Computes a quaternion from a reference frame with axes computed from the heading-pitch-roll angles\r\n     * centered at the provided origin. Heading is the rotation from the local north\r\n     * direction where a positive angle is increasing eastward. Pitch is the rotation from the local east-north plane. Positive pitch angles\r\n     * are above the plane. Negative pitch angles are below the plane. Roll is the first rotation applied about the local east axis.\r\n     *\r\n     * @param {Cartesian3} origin The center point of the local reference frame.\r\n     * @param {HeadingPitchRoll} headingPitchRoll The heading, pitch, and roll.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\r\n     * @param {Transforms~LocalFrameToFixedFrame} [fixedFrameTransform=Transforms.eastNorthUpToFixedFrame] A 4x4 transformation\r\n     *  matrix from a reference frame to the provided ellipsoid's fixed reference frame\r\n     * @param {Quaternion} [result] The object onto which to store the result.\r\n     * @returns {Quaternion} The modified result parameter or a new Quaternion instance if none was provided.\r\n     *\r\n     * @example\r\n     * // Get the quaternion from local heading-pitch-roll at cartographic (0.0, 0.0) to Earth's fixed frame.\r\n     * var center = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\r\n     * var heading = -Cesium.Math.PI_OVER_TWO;\r\n     * var pitch = Cesium.Math.PI_OVER_FOUR;\r\n     * var roll = 0.0;\r\n     * var hpr = new HeadingPitchRoll(heading, pitch, roll);\r\n     * var quaternion = Cesium.Transforms.headingPitchRollQuaternion(center, hpr);\r\n     */\r\n    Transforms.headingPitchRollQuaternion = function(origin, headingPitchRoll, ellipsoid, fixedFrameTransform, result) {\r\n        \r\n\r\n        var transform = Transforms.headingPitchRollToFixedFrame(origin, headingPitchRoll, ellipsoid, fixedFrameTransform, scratchENUMatrix4);\r\n        var rotation = Matrix4.getRotation(transform, scratchHPRMatrix3);\r\n        return Quaternion.fromRotationMatrix(rotation, result);\r\n    };\r\n\r\n    var noScale = new Cartesian3(1.0, 1.0, 1.0);\r\n    var hprCenterScratch = new Cartesian3();\r\n    var ffScratch = new Matrix4();\r\n    var hprTransformScratch = new Matrix4();\r\n    var hprRotationScratch = new Matrix3();\r\n    var hprQuaternionScratch = new Quaternion();\r\n    /**\r\n     * Computes heading-pitch-roll angles from a transform in a particular reference frame. Heading is the rotation from the local north\r\n     * direction where a positive angle is increasing eastward. Pitch is the rotation from the local east-north plane. Positive pitch angles\r\n     * are above the plane. Negative pitch angles are below the plane. Roll is the first rotation applied about the local east axis.\r\n     *\r\n     * @param {Matrix4} transform The transform\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid whose fixed frame is used in the transformation.\r\n     * @param {Transforms~LocalFrameToFixedFrame} [fixedFrameTransform=Transforms.eastNorthUpToFixedFrame] A 4x4 transformation\r\n     *  matrix from a reference frame to the provided ellipsoid's fixed reference frame\r\n     * @param {HeadingPitchRoll} [result] The object onto which to store the result.\r\n     * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if none was provided.\r\n     */\r\n    Transforms.fixedFrameToHeadingPitchRoll = function(transform, ellipsoid, fixedFrameTransform, result) {\r\n        \r\n\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        fixedFrameTransform = defaultValue(fixedFrameTransform, Transforms.eastNorthUpToFixedFrame);\r\n        if (!defined(result)) {\r\n            result = new HeadingPitchRoll();\r\n        }\r\n\r\n        var center = Matrix4.getTranslation(transform, hprCenterScratch);\r\n        if (Cartesian3.equals(center, Cartesian3.ZERO)) {\r\n            result.heading = 0;\r\n            result.pitch = 0;\r\n            result.roll = 0;\r\n            return result;\r\n        }\r\n        var toFixedFrame = Matrix4.inverseTransformation(fixedFrameTransform(center, ellipsoid, ffScratch), ffScratch);\r\n        var transformCopy = Matrix4.setScale(transform, noScale, hprTransformScratch);\r\n        transformCopy = Matrix4.setTranslation(transformCopy, Cartesian3.ZERO, transformCopy);\r\n\r\n        toFixedFrame = Matrix4.multiply(toFixedFrame, transformCopy, toFixedFrame);\r\n        var quaternionRotation = Quaternion.fromRotationMatrix(Matrix4.getRotation(toFixedFrame, hprRotationScratch), hprQuaternionScratch);\r\n        quaternionRotation = Quaternion.normalize(quaternionRotation, quaternionRotation);\r\n\r\n        return HeadingPitchRoll.fromQuaternion(quaternionRotation, result);\r\n    };\r\n\r\n    var gmstConstant0 = 6 * 3600 + 41 * 60 + 50.54841;\r\n    var gmstConstant1 = 8640184.812866;\r\n    var gmstConstant2 = 0.093104;\r\n    var gmstConstant3 = -6.2E-6;\r\n    var rateCoef = 1.1772758384668e-19;\r\n    var wgs84WRPrecessing = 7.2921158553E-5;\r\n    var twoPiOverSecondsInDay = CesiumMath.TWO_PI / 86400.0;\r\n    var dateInUtc = new JulianDate();\r\n\r\n    /**\r\n     * Computes a rotation matrix to transform a point or vector from True Equator Mean Equinox (TEME) axes to the\r\n     * pseudo-fixed axes at a given time.  This method treats the UT1 time standard as equivalent to UTC.\r\n     *\r\n     * @param {JulianDate} date The time at which to compute the rotation matrix.\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if none was provided.\r\n     *\r\n     * @example\r\n     * //Set the view to the inertial frame.\r\n     * scene.postUpdate.addEventListener(function(scene, time) {\r\n     *    var now = Cesium.JulianDate.now();\r\n     *    var offset = Cesium.Matrix4.multiplyByPoint(camera.transform, camera.position, new Cesium.Cartesian3());\r\n     *    var transform = Cesium.Matrix4.fromRotationTranslation(Cesium.Transforms.computeTemeToPseudoFixedMatrix(now));\r\n     *    var inverseTransform = Cesium.Matrix4.inverseTransformation(transform, new Cesium.Matrix4());\r\n     *    Cesium.Matrix4.multiplyByPoint(inverseTransform, offset, offset);\r\n     *    camera.lookAtTransform(transform, offset);\r\n     * });\r\n     */\r\n    Transforms.computeTemeToPseudoFixedMatrix = function (date, result) {\r\n        \r\n\r\n        // GMST is actually computed using UT1.  We're using UTC as an approximation of UT1.\r\n        // We do not want to use the function like convertTaiToUtc in JulianDate because\r\n        // we explicitly do not want to fail when inside the leap second.\r\n\r\n        dateInUtc = JulianDate.addSeconds(date, -JulianDate.computeTaiMinusUtc(date), dateInUtc);\r\n        var utcDayNumber = dateInUtc.dayNumber;\r\n        var utcSecondsIntoDay = dateInUtc.secondsOfDay;\r\n\r\n        var t;\r\n        var diffDays = utcDayNumber - 2451545;\r\n        if (utcSecondsIntoDay >= 43200.0) {\r\n            t = (diffDays + 0.5) / TimeConstants.DAYS_PER_JULIAN_CENTURY;\r\n        } else {\r\n            t = (diffDays - 0.5) / TimeConstants.DAYS_PER_JULIAN_CENTURY;\r\n        }\r\n\r\n        var gmst0 = gmstConstant0 + t * (gmstConstant1 + t * (gmstConstant2 + t * gmstConstant3));\r\n        var angle = (gmst0 * twoPiOverSecondsInDay) % CesiumMath.TWO_PI;\r\n        var ratio = wgs84WRPrecessing + rateCoef * (utcDayNumber - 2451545.5);\r\n        var secondsSinceMidnight = (utcSecondsIntoDay + TimeConstants.SECONDS_PER_DAY * 0.5) % TimeConstants.SECONDS_PER_DAY;\r\n        var gha = angle + (ratio * secondsSinceMidnight);\r\n        var cosGha = Math.cos(gha);\r\n        var sinGha = Math.sin(gha);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(cosGha, sinGha, 0.0,\r\n                              -sinGha, cosGha, 0.0,\r\n                                  0.0,    0.0, 1.0);\r\n        }\r\n        result[0] = cosGha;\r\n        result[1] = -sinGha;\r\n        result[2] = 0.0;\r\n        result[3] = sinGha;\r\n        result[4] = cosGha;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The source of IAU 2006 XYS data, used for computing the transformation between the\r\n     * Fixed and ICRF axes.\r\n     * @type {Iau2006XysData}\r\n     *\r\n     * @see Transforms.computeIcrfToFixedMatrix\r\n     * @see Transforms.computeFixedToIcrfMatrix\r\n     *\r\n     * @private\r\n     */\r\n    Transforms.iau2006XysData = new Iau2006XysData();\r\n\r\n    /**\r\n     * The source of Earth Orientation Parameters (EOP) data, used for computing the transformation\r\n     * between the Fixed and ICRF axes.  By default, zero values are used for all EOP values,\r\n     * yielding a reasonable but not completely accurate representation of the ICRF axes.\r\n     * @type {EarthOrientationParameters}\r\n     *\r\n     * @see Transforms.computeIcrfToFixedMatrix\r\n     * @see Transforms.computeFixedToIcrfMatrix\r\n     *\r\n     * @private\r\n     */\r\n    Transforms.earthOrientationParameters = EarthOrientationParameters.NONE;\r\n\r\n    var ttMinusTai = 32.184;\r\n    var j2000ttDays = 2451545.0;\r\n\r\n    /**\r\n     * Preloads the data necessary to transform between the ICRF and Fixed axes, in either\r\n     * direction, over a given interval.  This function returns a promise that, when resolved,\r\n     * indicates that the preload has completed.\r\n     *\r\n     * @param {TimeInterval} timeInterval The interval to preload.\r\n     * @returns {Promise.<undefined>} A promise that, when resolved, indicates that the preload has completed\r\n     *          and evaluation of the transformation between the fixed and ICRF axes will\r\n     *          no longer return undefined for a time inside the interval.\r\n     *\r\n     *\r\n     * @example\r\n     * var interval = new Cesium.TimeInterval(...);\r\n     * when(Cesium.Transforms.preloadIcrfFixed(interval), function() {\r\n     *     // the data is now loaded\r\n     * });\r\n     *\r\n     * @see Transforms.computeIcrfToFixedMatrix\r\n     * @see Transforms.computeFixedToIcrfMatrix\r\n     * @see when\r\n     */\r\n    Transforms.preloadIcrfFixed = function(timeInterval) {\r\n        var startDayTT = timeInterval.start.dayNumber;\r\n        var startSecondTT = timeInterval.start.secondsOfDay + ttMinusTai;\r\n        var stopDayTT = timeInterval.stop.dayNumber;\r\n        var stopSecondTT = timeInterval.stop.secondsOfDay + ttMinusTai;\r\n\r\n        var xysPromise = Transforms.iau2006XysData.preload(startDayTT, startSecondTT, stopDayTT, stopSecondTT);\r\n        var eopPromise = Transforms.earthOrientationParameters.getPromiseToLoad();\r\n\r\n        return when.all([xysPromise, eopPromise]);\r\n    };\r\n\r\n    /**\r\n     * Computes a rotation matrix to transform a point or vector from the International Celestial\r\n     * Reference Frame (GCRF/ICRF) inertial frame axes to the Earth-Fixed frame axes (ITRF)\r\n     * at a given time.  This function may return undefined if the data necessary to\r\n     * do the transformation is not yet loaded.\r\n     *\r\n     * @param {JulianDate} date The time at which to compute the rotation matrix.\r\n     * @param {Matrix3} [result] The object onto which to store the result.  If this parameter is\r\n     *                  not specified, a new instance is created and returned.\r\n     * @returns {Matrix3} The rotation matrix, or undefined if the data necessary to do the\r\n     *                   transformation is not yet loaded.\r\n     *\r\n     *\r\n     * @example\r\n     * scene.postUpdate.addEventListener(function(scene, time) {\r\n     *   // View in ICRF.\r\n     *   var icrfToFixed = Cesium.Transforms.computeIcrfToFixedMatrix(time);\r\n     *   if (Cesium.defined(icrfToFixed)) {\r\n     *     var offset = Cesium.Cartesian3.clone(camera.position);\r\n     *     var transform = Cesium.Matrix4.fromRotationTranslation(icrfToFixed);\r\n     *     camera.lookAtTransform(transform, offset);\r\n     *   }\r\n     * });\r\n     *\r\n     * @see Transforms.preloadIcrfFixed\r\n     */\r\n    Transforms.computeIcrfToFixedMatrix = function(date, result) {\r\n        \r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        var fixedToIcrfMtx = Transforms.computeFixedToIcrfMatrix(date, result);\r\n        if (!defined(fixedToIcrfMtx)) {\r\n            return undefined;\r\n        }\r\n\r\n        return Matrix3.transpose(fixedToIcrfMtx, result);\r\n    };\r\n\r\n    var xysScratch = new Iau2006XysSample(0.0, 0.0, 0.0);\r\n    var eopScratch = new EarthOrientationParametersSample(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\r\n    var rotation1Scratch = new Matrix3();\r\n    var rotation2Scratch = new Matrix3();\r\n\r\n    /**\r\n     * Computes a rotation matrix to transform a point or vector from the Earth-Fixed frame axes (ITRF)\r\n     * to the International Celestial Reference Frame (GCRF/ICRF) inertial frame axes\r\n     * at a given time.  This function may return undefined if the data necessary to\r\n     * do the transformation is not yet loaded.\r\n     *\r\n     * @param {JulianDate} date The time at which to compute the rotation matrix.\r\n     * @param {Matrix3} [result] The object onto which to store the result.  If this parameter is\r\n     *                  not specified, a new instance is created and returned.\r\n     * @returns {Matrix3} The rotation matrix, or undefined if the data necessary to do the\r\n     *                   transformation is not yet loaded.\r\n     *\r\n     *\r\n     * @example\r\n     * // Transform a point from the ICRF axes to the Fixed axes.\r\n     * var now = Cesium.JulianDate.now();\r\n     * var pointInFixed = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\r\n     * var fixedToIcrf = Cesium.Transforms.computeIcrfToFixedMatrix(now);\r\n     * var pointInInertial = new Cesium.Cartesian3();\r\n     * if (Cesium.defined(fixedToIcrf)) {\r\n     *     pointInInertial = Cesium.Matrix3.multiplyByVector(fixedToIcrf, pointInFixed, pointInInertial);\r\n     * }\r\n     *\r\n     * @see Transforms.preloadIcrfFixed\r\n     */\r\n    Transforms.computeFixedToIcrfMatrix = function(date, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        // Compute pole wander\r\n        var eop = Transforms.earthOrientationParameters.compute(date, eopScratch);\r\n        if (!defined(eop)) {\r\n            return undefined;\r\n        }\r\n\r\n        // There is no external conversion to Terrestrial Time (TT).\r\n        // So use International Atomic Time (TAI) and convert using offsets.\r\n        // Here we are assuming that dayTT and secondTT are positive\r\n        var dayTT = date.dayNumber;\r\n        // It's possible here that secondTT could roll over 86400\r\n        // This does not seem to affect the precision (unit tests check for this)\r\n        var secondTT = date.secondsOfDay + ttMinusTai;\r\n\r\n        var xys = Transforms.iau2006XysData.computeXysRadians(dayTT, secondTT, xysScratch);\r\n        if (!defined(xys)) {\r\n            return undefined;\r\n        }\r\n\r\n        var x = xys.x + eop.xPoleOffset;\r\n        var y = xys.y + eop.yPoleOffset;\r\n\r\n        // Compute XYS rotation\r\n        var a = 1.0 / (1.0 + Math.sqrt(1.0 - x * x - y * y));\r\n\r\n        var rotation1 = rotation1Scratch;\r\n        rotation1[0] = 1.0 - a * x * x;\r\n        rotation1[3] = -a * x * y;\r\n        rotation1[6] = x;\r\n        rotation1[1] = -a * x * y;\r\n        rotation1[4] = 1 - a * y * y;\r\n        rotation1[7] = y;\r\n        rotation1[2] = -x;\r\n        rotation1[5] = -y;\r\n        rotation1[8] = 1 - a * (x * x + y * y);\r\n\r\n        var rotation2 = Matrix3.fromRotationZ(-xys.s, rotation2Scratch);\r\n        var matrixQ = Matrix3.multiply(rotation1, rotation2, rotation1Scratch);\r\n\r\n        // Similar to TT conversions above\r\n        // It's possible here that secondTT could roll over 86400\r\n        // This does not seem to affect the precision (unit tests check for this)\r\n        var dateUt1day = date.dayNumber;\r\n        var dateUt1sec = date.secondsOfDay - JulianDate.computeTaiMinusUtc(date) + eop.ut1MinusUtc;\r\n\r\n        // Compute Earth rotation angle\r\n        // The IERS standard for era is\r\n        //    era = 0.7790572732640 + 1.00273781191135448 * Tu\r\n        // where\r\n        //    Tu = JulianDateInUt1 - 2451545.0\r\n        // However, you get much more precision if you make the following simplification\r\n        //    era = a + (1 + b) * (JulianDayNumber + FractionOfDay - 2451545)\r\n        //    era = a + (JulianDayNumber - 2451545) + FractionOfDay + b (JulianDayNumber - 2451545 + FractionOfDay)\r\n        //    era = a + FractionOfDay + b (JulianDayNumber - 2451545 + FractionOfDay)\r\n        // since (JulianDayNumber - 2451545) represents an integer number of revolutions which will be discarded anyway.\r\n        var daysSinceJ2000 = dateUt1day - 2451545;\r\n        var fractionOfDay = dateUt1sec / TimeConstants.SECONDS_PER_DAY;\r\n        var era = 0.7790572732640 + fractionOfDay + 0.00273781191135448 * (daysSinceJ2000 + fractionOfDay);\r\n        era = (era % 1.0) * CesiumMath.TWO_PI;\r\n\r\n        var earthRotation = Matrix3.fromRotationZ(era, rotation2Scratch);\r\n\r\n        // pseudoFixed to ICRF\r\n        var pfToIcrf = Matrix3.multiply(matrixQ, earthRotation, rotation1Scratch);\r\n\r\n        // Compute pole wander matrix\r\n        var cosxp = Math.cos(eop.xPoleWander);\r\n        var cosyp = Math.cos(eop.yPoleWander);\r\n        var sinxp = Math.sin(eop.xPoleWander);\r\n        var sinyp = Math.sin(eop.yPoleWander);\r\n\r\n        var ttt = (dayTT - j2000ttDays) + secondTT / TimeConstants.SECONDS_PER_DAY;\r\n        ttt /= 36525.0;\r\n\r\n        // approximate sp value in rad\r\n        var sp = -47.0e-6 * ttt * CesiumMath.RADIANS_PER_DEGREE / 3600.0;\r\n        var cossp = Math.cos(sp);\r\n        var sinsp = Math.sin(sp);\r\n\r\n        var fToPfMtx = rotation2Scratch;\r\n        fToPfMtx[0] = cosxp * cossp;\r\n        fToPfMtx[1] = cosxp * sinsp;\r\n        fToPfMtx[2] = sinxp;\r\n        fToPfMtx[3] = -cosyp * sinsp + sinyp * sinxp * cossp;\r\n        fToPfMtx[4] = cosyp * cossp + sinyp * sinxp * sinsp;\r\n        fToPfMtx[5] = -sinyp * cosxp;\r\n        fToPfMtx[6] = -sinyp * sinsp - cosyp * sinxp * cossp;\r\n        fToPfMtx[7] = sinyp * cossp - cosyp * sinxp * sinsp;\r\n        fToPfMtx[8] = cosyp * cosxp;\r\n\r\n        return Matrix3.multiply(pfToIcrf, fToPfMtx, result);\r\n    };\r\n\r\n    var pointToWindowCoordinatesTemp = new Cartesian4();\r\n\r\n    /**\r\n     * Transform a point from model coordinates to window coordinates.\r\n     *\r\n     * @param {Matrix4} modelViewProjectionMatrix The 4x4 model-view-projection matrix.\r\n     * @param {Matrix4} viewportTransformation The 4x4 viewport transformation.\r\n     * @param {Cartesian3} point The point to transform.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided.\r\n     */\r\n    Transforms.pointToWindowCoordinates = function (modelViewProjectionMatrix, viewportTransformation, point, result) {\r\n        result = Transforms.pointToGLWindowCoordinates(modelViewProjectionMatrix, viewportTransformation, point, result);\r\n        result.y = 2.0 * viewportTransformation[5] - result.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Transforms.pointToGLWindowCoordinates = function(modelViewProjectionMatrix, viewportTransformation, point, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian2();\r\n        }\r\n\r\n        var tmp = pointToWindowCoordinatesTemp;\r\n\r\n        Matrix4.multiplyByVector(modelViewProjectionMatrix, Cartesian4.fromElements(point.x, point.y, point.z, 1, tmp), tmp);\r\n        Cartesian4.multiplyByScalar(tmp, 1.0 / tmp.w, tmp);\r\n        Matrix4.multiplyByVector(viewportTransformation, tmp, tmp);\r\n        return Cartesian2.fromCartesian4(tmp, result);\r\n    };\r\n\r\n    var normalScratch = new Cartesian3();\r\n    var rightScratch = new Cartesian3();\r\n    var upScratch = new Cartesian3();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Transforms.rotationMatrixFromPositionVelocity = function(position, velocity, ellipsoid, result) {\r\n        \r\n\r\n        var normal = defaultValue(ellipsoid, Ellipsoid.WGS84).geodeticSurfaceNormal(position, normalScratch);\r\n        var right = Cartesian3.cross(velocity, normal, rightScratch);\r\n\r\n        if (Cartesian3.equalsEpsilon(right, Cartesian3.ZERO, CesiumMath.EPSILON6)) {\r\n            right = Cartesian3.clone(Cartesian3.UNIT_X, right);\r\n        }\r\n\r\n        var up = Cartesian3.cross(right, velocity, upScratch);\r\n        Cartesian3.normalize(up, up);\r\n        Cartesian3.cross(velocity, up, right);\r\n        Cartesian3.negate(right, right);\r\n        Cartesian3.normalize(right, right);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        result[0] = velocity.x;\r\n        result[1] = velocity.y;\r\n        result[2] = velocity.z;\r\n        result[3] = right.x;\r\n        result[4] = right.y;\r\n        result[5] = right.z;\r\n        result[6] = up.x;\r\n        result[7] = up.y;\r\n        result[8] = up.z;\r\n\r\n        return result;\r\n    };\r\n\r\n    var swizzleMatrix = new Matrix4(\r\n        0.0, 0.0, 1.0, 0.0,\r\n        1.0, 0.0, 0.0, 0.0,\r\n        0.0, 1.0, 0.0, 0.0,\r\n        0.0, 0.0, 0.0, 1.0\r\n    );\r\n\r\n    var scratchCartographic = new Cartographic();\r\n    var scratchCartesian3Projection = new Cartesian3();\r\n    var scratchCenter = new Cartesian3();\r\n    var scratchRotation = new Matrix3();\r\n    var scratchFromENU = new Matrix4();\r\n    var scratchToENU = new Matrix4();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Transforms.basisTo2D = function(projection, matrix, result) {\r\n        \r\n\r\n        var rtcCenter = Matrix4.getTranslation(matrix, scratchCenter);\r\n        var ellipsoid = projection.ellipsoid;\r\n\r\n        // Get the 2D Center\r\n        var cartographic = ellipsoid.cartesianToCartographic(rtcCenter, scratchCartographic);\r\n        var projectedPosition = projection.project(cartographic, scratchCartesian3Projection);\r\n        Cartesian3.fromElements(projectedPosition.z, projectedPosition.x, projectedPosition.y, projectedPosition);\r\n\r\n        // Assuming the instance are positioned in WGS84, invert the WGS84 transform to get the local transform and then convert to 2D\r\n        var fromENU = Transforms.eastNorthUpToFixedFrame(rtcCenter, ellipsoid, scratchFromENU);\r\n        var toENU = Matrix4.inverseTransformation(fromENU, scratchToENU);\r\n        var rotation = Matrix4.getRotation(matrix, scratchRotation);\r\n        var local = Matrix4.multiplyByMatrix3(toENU, rotation, result);\r\n        Matrix4.multiply(swizzleMatrix, local, result); // Swap x, y, z for 2D\r\n        Matrix4.setTranslation(result, projectedPosition, result); // Use the projected center\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Transforms.wgs84To2DModelMatrix = function(projection, center, result) {\r\n        \r\n\r\n        var ellipsoid = projection.ellipsoid;\r\n\r\n        var fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, scratchFromENU);\r\n        var toENU = Matrix4.inverseTransformation(fromENU, scratchToENU);\r\n\r\n        var cartographic = ellipsoid.cartesianToCartographic(center, scratchCartographic);\r\n        var projectedPosition = projection.project(cartographic, scratchCartesian3Projection);\r\n        Cartesian3.fromElements(projectedPosition.z, projectedPosition.x, projectedPosition.y, projectedPosition);\r\n\r\n        var translation = Matrix4.fromTranslation(projectedPosition, scratchFromENU);\r\n        Matrix4.multiply(swizzleMatrix, toENU, result);\r\n        Matrix4.multiply(translation, result, result);\r\n\r\n        return result;\r\n    };\r\n\r\n    return Transforms;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Transforms.js\n// module id = 42\n// module chunks = 0","/**\r\n * @license\r\n *\r\n * Grauw URI utilities\r\n *\r\n * See: http-colon-slashslash hg.grauw.nl/grauw-lib/file/tip/src/uri.js\r\n *\r\n * @author Laurens Holst (http-colon-slashslash www.grauw.nl/)\r\n *\r\n *   Copyright 2012 Laurens Holst\r\n *\r\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *   you may not use this file except in compliance with the License.\r\n *   You may obtain a copy of the License at\r\n *\r\n *       http-colon-slashslash www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *   Unless required by applicable law or agreed to in writing, software\r\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *   See the License for the specific language governing permissions and\r\n *   limitations under the License.\r\n *\r\n */\r\ndefine(function() {\r\n\r\n\t/**\r\n\t * Constructs a URI object.\r\n\t * @constructor\r\n\t * @class Implementation of URI parsing and base URI resolving algorithm in RFC 3986.\r\n\t * @param {string|URI} uri A string or URI object to create the object from.\r\n\t */\r\n\tfunction URI(uri) {\r\n\t\tif (uri instanceof URI) {  // copy constructor\r\n\t\t\tthis.scheme = uri.scheme;\r\n\t\t\tthis.authority = uri.authority;\r\n\t\t\tthis.path = uri.path;\r\n\t\t\tthis.query = uri.query;\r\n\t\t\tthis.fragment = uri.fragment;\r\n\t\t} else if (uri) {  // uri is URI string or cast to string\r\n\t\t\tvar c = parseRegex.exec(uri);\r\n\t\t\tthis.scheme = c[1];\r\n\t\t\tthis.authority = c[2];\r\n\t\t\tthis.path = c[3];\r\n\t\t\tthis.query = c[4];\r\n\t\t\tthis.fragment = c[5];\r\n\t\t}\r\n\t}\r\n\t// Initial values on the prototype\r\n\tURI.prototype.scheme    = null;\r\n\tURI.prototype.authority = null;\r\n\tURI.prototype.path      = '';\r\n\tURI.prototype.query     = null;\r\n\tURI.prototype.fragment  = null;\r\n\r\n\t// Regular expression from RFC 3986 appendix B\r\n\tvar parseRegex = new RegExp('^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\\\\?([^#]*))?(?:#(.*))?$');\r\n\r\n\t/**\r\n\t * Returns the scheme part of the URI.\r\n\t * In \"http-colon-slashslash example.com:80/a/b?x#y\" this is \"http\".\r\n\t */\r\n\tURI.prototype.getScheme = function() {\r\n\t\treturn this.scheme;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the authority part of the URI.\r\n\t * In \"http-colon-slashslash example.com:80/a/b?x#y\" this is \"example.com:80\".\r\n\t */\r\n\tURI.prototype.getAuthority = function() {\r\n\t\treturn this.authority;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the path part of the URI.\r\n\t * In \"http-colon-slashslash example.com:80/a/b?x#y\" this is \"/a/b\".\r\n\t * In \"mailto:mike@example.com\" this is \"mike@example.com\".\r\n\t */\r\n\tURI.prototype.getPath = function() {\r\n\t\treturn this.path;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the query part of the URI.\r\n\t * In \"http-colon-slashslash example.com:80/a/b?x#y\" this is \"x\".\r\n\t */\r\n\tURI.prototype.getQuery = function() {\r\n\t\treturn this.query;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the fragment part of the URI.\r\n\t * In \"http-colon-slashslash example.com:80/a/b?x#y\" this is \"y\".\r\n\t */\r\n\tURI.prototype.getFragment = function() {\r\n\t\treturn this.fragment;\r\n\t};\r\n\r\n\t/**\r\n\t * Tests whether the URI is an absolute URI.\r\n\t * See RFC 3986 section 4.3.\r\n\t */\r\n\tURI.prototype.isAbsolute = function() {\r\n\t\treturn !!this.scheme && !this.fragment;\r\n\t};\r\n\r\n\t///**\r\n\t//* Extensive validation of the URI against the ABNF in RFC 3986\r\n\t//*/\r\n\t//URI.prototype.validate\r\n\r\n\t/**\r\n\t * Tests whether the URI is a same-document reference.\r\n\t * See RFC 3986 section 4.4.\r\n\t *\r\n\t * To perform more thorough comparison, you can normalise the URI objects.\r\n\t */\r\n\tURI.prototype.isSameDocumentAs = function(uri) {\r\n\t\treturn uri.scheme == this.scheme &&\r\n\t\t    uri.authority == this.authority &&\r\n\t\t         uri.path == this.path &&\r\n\t\t        uri.query == this.query;\r\n\t};\r\n\r\n\t/**\r\n\t * Simple String Comparison of two URIs.\r\n\t * See RFC 3986 section 6.2.1.\r\n\t *\r\n\t * To perform more thorough comparison, you can normalise the URI objects.\r\n\t */\r\n\tURI.prototype.equals = function(uri) {\r\n\t\treturn this.isSameDocumentAs(uri) && uri.fragment == this.fragment;\r\n\t};\r\n\r\n\t/**\r\n\t * Normalizes the URI using syntax-based normalization.\r\n\t * This includes case normalization, percent-encoding normalization and path segment normalization.\r\n\t * XXX: Percent-encoding normalization does not escape characters that need to be escaped.\r\n\t *      (Although that would not be a valid URI in the first place. See validate().)\r\n\t * See RFC 3986 section 6.2.2.\r\n\t */\r\n\tURI.prototype.normalize = function() {\r\n\t\tthis.removeDotSegments();\r\n\t\tif (this.scheme)\r\n\t\t\tthis.scheme = this.scheme.toLowerCase();\r\n\t\tif (this.authority)\r\n\t\t\tthis.authority = this.authority.replace(authorityRegex, replaceAuthority).\r\n\t\t\t\t\t\t\t\t\treplace(caseRegex, replaceCase);\r\n\t\tif (this.path)\r\n\t\t\tthis.path = this.path.replace(caseRegex, replaceCase);\r\n\t\tif (this.query)\r\n\t\t\tthis.query = this.query.replace(caseRegex, replaceCase);\r\n\t\tif (this.fragment)\r\n\t\t\tthis.fragment = this.fragment.replace(caseRegex, replaceCase);\r\n\t};\r\n\r\n\tvar caseRegex = /%[0-9a-z]{2}/gi;\r\n\tvar percentRegex = /[a-zA-Z0-9\\-\\._~]/;\r\n\tvar authorityRegex = /(.*@)?([^@:]*)(:.*)?/;\r\n\r\n\tfunction replaceCase(str) {\r\n\t\tvar dec = unescape(str);\r\n\t\treturn percentRegex.test(dec) ? dec : str.toUpperCase();\r\n\t}\r\n\r\n\tfunction replaceAuthority(str, p1, p2, p3) {\r\n\t\treturn (p1 || '') + p2.toLowerCase() + (p3 || '');\r\n\t}\r\n\r\n\t/**\r\n\t * Resolve a relative URI (this) against a base URI.\r\n\t * The base URI must be an absolute URI.\r\n\t * See RFC 3986 section 5.2\r\n\t */\r\n\tURI.prototype.resolve = function(baseURI) {\r\n\t\tvar uri = new URI();\r\n\t\tif (this.scheme) {\r\n\t\t\turi.scheme = this.scheme;\r\n\t\t\turi.authority = this.authority;\r\n\t\t\turi.path = this.path;\r\n\t\t\turi.query = this.query;\r\n\t\t} else {\r\n\t\t\turi.scheme = baseURI.scheme;\r\n\t\t\tif (this.authority) {\r\n\t\t\t\turi.authority = this.authority;\r\n\t\t\t\turi.path = this.path;\r\n\t\t\t\turi.query = this.query;\r\n\t\t\t} else {\r\n\t\t\t\turi.authority = baseURI.authority;\r\n\t\t\t\tif (this.path == '') {\r\n\t\t\t\t\turi.path = baseURI.path;\r\n\t\t\t\t\turi.query = this.query || baseURI.query;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (this.path.charAt(0) == '/') {\r\n\t\t\t\t\t\turi.path = this.path;\r\n\t\t\t\t\t\turi.removeDotSegments();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (baseURI.authority && baseURI.path == '') {\r\n\t\t\t\t\t\t\turi.path = '/' + this.path;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\turi.path = baseURI.path.substring(0, baseURI.path.lastIndexOf('/') + 1) + this.path;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\turi.removeDotSegments();\r\n\t\t\t\t\t}\r\n\t\t\t\t\turi.query = this.query;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\turi.fragment = this.fragment;\r\n\t\treturn uri;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove dot segments from path.\r\n\t * See RFC 3986 section 5.2.4\r\n\t * @private\r\n\t */\r\n\tURI.prototype.removeDotSegments = function() {\r\n\t\tvar input = this.path.split('/'),\r\n\t\t\toutput = [],\r\n\t\t\tsegment,\r\n\t\t\tabsPath = input[0] == '';\r\n\t\tif (absPath)\r\n\t\t\tinput.shift();\r\n\t\tvar sFirst = input[0] == '' ? input.shift() : null;\r\n\t\twhile (input.length) {\r\n\t\t\tsegment = input.shift();\r\n\t\t\tif (segment == '..') {\r\n\t\t\t\toutput.pop();\r\n\t\t\t} else if (segment != '.') {\r\n\t\t\t\toutput.push(segment);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (segment == '.' || segment == '..')\r\n\t\t\toutput.push('');\r\n\t\tif (absPath)\r\n\t\t\toutput.unshift('');\r\n\t\tthis.path = output.join('/');\r\n\t};\r\n\r\n\t// We don't like this function because it builds up a cache that is never cleared.\r\n//\t/**\r\n//\t * Resolves a relative URI against an absolute base URI.\r\n//\t * Convenience method.\r\n//\t * @param {String} uri the relative URI to resolve\r\n//\t * @param {String} baseURI the base URI (must be absolute) to resolve against\r\n//\t */\r\n//\tURI.resolve = function(sURI, sBaseURI) {\r\n//\t\tvar uri = cache[sURI] || (cache[sURI] = new URI(sURI));\r\n//\t\tvar baseURI = cache[sBaseURI] || (cache[sBaseURI] = new URI(sBaseURI));\r\n//\t\treturn uri.resolve(baseURI).toString();\r\n//\t};\r\n\r\n//\tvar cache = {};\r\n\r\n\t/**\r\n\t * Serialises the URI to a string.\r\n\t */\r\n\tURI.prototype.toString = function() {\r\n\t\tvar result = '';\r\n\t\tif (this.scheme)\r\n\t\t\tresult += this.scheme + ':';\r\n\t\tif (this.authority)\r\n\t\t\tresult += '//' + this.authority;\r\n\t\tresult += this.path;\r\n\t\tif (this.query)\r\n\t\t\tresult += '?' + this.query;\r\n\t\tif (this.fragment)\r\n\t\t\tresult += '#' + this.fragment;\r\n\t\treturn result;\r\n\t};\r\n\r\nreturn URI;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/Uri.js\n// module id = 43\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 44\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/lib/_stream_duplex.js\n// module id = 45\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This enumerated type is used in determining where, relative to the frustum, an\r\n     * object is located. The object can either be fully contained within the frustum (INSIDE),\r\n     * partially inside the frustum and partially outside (INTERSECTING), or somwhere entirely\r\n     * outside of the frustum's 6 planes (OUTSIDE).\r\n     *\r\n     * @exports Intersect\r\n     */\r\n    var Intersect = {\r\n        /**\r\n         * Represents that an object is not contained within the frustum.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        OUTSIDE : -1,\r\n\r\n        /**\r\n         * Represents that an object intersects one of the frustum's planes.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        INTERSECTING : 0,\r\n\r\n        /**\r\n         * Represents that an object is fully within the frustum.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        INSIDE : 1\r\n    };\r\n\r\n    return freezeObject(Intersect);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Intersect.js\n// module id = 46\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defined',\r\n        './DeveloperError',\r\n        './freezeObject',\r\n        './Math',\r\n        './Matrix4'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defined,\r\n        DeveloperError,\r\n        freezeObject,\r\n        CesiumMath,\r\n        Matrix4) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A plane in Hessian Normal Form defined by\r\n     * <pre>\r\n     * ax + by + cz + d = 0\r\n     * </pre>\r\n     * where (a, b, c) is the plane's <code>normal</code>, d is the signed\r\n     * <code>distance</code> to the plane, and (x, y, z) is any point on\r\n     * the plane.\r\n     *\r\n     * @alias Plane\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} normal The plane's normal (normalized).\r\n     * @param {Number} distance The shortest distance from the origin to the plane.  The sign of\r\n     * <code>distance</code> determines which side of the plane the origin\r\n     * is on.  If <code>distance</code> is positive, the origin is in the half-space\r\n     * in the direction of the normal; if negative, the origin is in the half-space\r\n     * opposite to the normal; if zero, the plane passes through the origin.\r\n     *\r\n     * @example\r\n     * // The plane x=0\r\n     * var plane = new Cesium.Plane(Cesium.Cartesian3.UNIT_X, 0.0);\r\n     *\r\n     * @exception {DeveloperError} Normal must be normalized\r\n     */\r\n    function Plane(normal, distance) {\r\n        \r\n\r\n        /**\r\n         * The plane's normal.\r\n         *\r\n         * @type {Cartesian3}\r\n         */\r\n        this.normal = Cartesian3.clone(normal);\r\n\r\n        /**\r\n         * The shortest distance from the origin to the plane.  The sign of\r\n         * <code>distance</code> determines which side of the plane the origin\r\n         * is on.  If <code>distance</code> is positive, the origin is in the half-space\r\n         * in the direction of the normal; if negative, the origin is in the half-space\r\n         * opposite to the normal; if zero, the plane passes through the origin.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.distance = distance;\r\n    }\r\n\r\n    /**\r\n     * Creates a plane from a normal and a point on the plane.\r\n     *\r\n     * @param {Cartesian3} point The point on the plane.\r\n     * @param {Cartesian3} normal The plane's normal (normalized).\r\n     * @param {Plane} [result] The object onto which to store the result.\r\n     * @returns {Plane} A new plane instance or the modified result parameter.\r\n     *\r\n     * @example\r\n     * var point = Cesium.Cartesian3.fromDegrees(-72.0, 40.0);\r\n     * var normal = ellipsoid.geodeticSurfaceNormal(point);\r\n     * var tangentPlane = Cesium.Plane.fromPointNormal(point, normal);\r\n     *\r\n     * @exception {DeveloperError} Normal must be normalized\r\n     */\r\n    Plane.fromPointNormal = function(point, normal, result) {\r\n        \r\n\r\n        var distance = -Cartesian3.dot(normal, point);\r\n\r\n        if (!defined(result)) {\r\n            return new Plane(normal, distance);\r\n        }\r\n\r\n        Cartesian3.clone(normal, result.normal);\r\n        result.distance = distance;\r\n        return result;\r\n    };\r\n\r\n    var scratchNormal = new Cartesian3();\r\n    /**\r\n     * Creates a plane from the general equation\r\n     *\r\n     * @param {Cartesian4} coefficients The plane's normal (normalized).\r\n     * @param {Plane} [result] The object onto which to store the result.\r\n     * @returns {Plane} A new plane instance or the modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} Normal must be normalized\r\n     */\r\n    Plane.fromCartesian4 = function(coefficients, result) {\r\n        \r\n\r\n        var normal = Cartesian3.fromCartesian4(coefficients, scratchNormal);\r\n        var distance = coefficients.w;\r\n\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Plane(normal, distance);\r\n        }\r\n        Cartesian3.clone(normal, result.normal);\r\n        result.distance = distance;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the signed shortest distance of a point to a plane.\r\n     * The sign of the distance determines which side of the plane the point\r\n     * is on.  If the distance is positive, the point is in the half-space\r\n     * in the direction of the normal; if negative, the point is in the half-space\r\n     * opposite to the normal; if zero, the plane passes through the point.\r\n     *\r\n     * @param {Plane} plane The plane.\r\n     * @param {Cartesian3} point The point.\r\n     * @returns {Number} The signed shortest distance of the point to the plane.\r\n     */\r\n    Plane.getPointDistance = function(plane, point) {\r\n        \r\n\r\n        return Cartesian3.dot(plane.normal, point) + plane.distance;\r\n    };\r\n\r\n    var scratchCartesian = new Cartesian3();\r\n    /**\r\n     * Projects a point onto the plane.\r\n     * @param {Plane} plane The plane to project the point onto\r\n     * @param {Cartesian3} point The point to project onto the plane\r\n     * @param {Cartesian3} [result] The result point.  If undefined, a new Cartesian3 will be created.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Plane.projectPointOntoPlane = function(plane, point, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        // projectedPoint = point - (normal.point + scale) * normal\r\n        var pointDistance = Plane.getPointDistance(plane, point);\r\n        var scaledNormal = Cartesian3.multiplyByScalar(plane.normal, pointDistance, scratchCartesian);\r\n\r\n        return Cartesian3.subtract(point, scaledNormal, result);\r\n    };\r\n\r\n    var scratchPosition = new Cartesian3();\r\n    /**\r\n     * Transforms the plane by the given transformation matrix.\r\n     *\r\n     * @param {Plane} plane The plane.\r\n     * @param {Matrix4} transform The transformation matrix.\r\n     * @param {Plane} [result] The object into which to store the result.\r\n     * @returns {Plane} The plane transformed by the given transformation matrix.\r\n     */\r\n    Plane.transform = function(plane, transform, result) {\r\n        \r\n\r\n        Matrix4.multiplyByPointAsVector(transform, plane.normal, scratchNormal);\r\n        Cartesian3.normalize(scratchNormal, scratchNormal);\r\n\r\n        Cartesian3.multiplyByScalar(plane.normal, -plane.distance, scratchPosition);\r\n        Matrix4.multiplyByPoint(transform, scratchPosition, scratchPosition);\r\n\r\n        return Plane.fromPointNormal(scratchPosition, scratchNormal, result);\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Plane instance.\r\n     *\r\n     * @param {Plane} plane The plane to duplicate.\r\n     * @param {Plane} [result] The object onto which to store the result.\r\n     * @returns {Plane} The modified result parameter or a new Plane instance if one was not provided.\r\n     */\r\n    Plane.clone = function(plane, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Plane(plane.normal, plane.distance);\r\n        }\r\n\r\n        Cartesian3.clone(plane.normal, result.normal);\r\n        result.distance = plane.distance;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Planes by normal and distance and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Plane} left The first plane.\r\n     * @param {Plane} right The second plane.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Plane.equals = function(left, right) {\r\n        \r\n\r\n        return (left.distance === right.distance) && Cartesian3.equals(left.normal, right.normal);\r\n    };\r\n\r\n    /**\r\n     * A constant initialized to the XY plane passing through the origin, with normal in positive Z.\r\n     *\r\n     * @type {Plane}\r\n     * @constant\r\n     */\r\n    Plane.ORIGIN_XY_PLANE = freezeObject(new Plane(Cartesian3.UNIT_Z, 0.0));\r\n\r\n    /**\r\n     * A constant initialized to the YZ plane passing through the origin, with normal in positive X.\r\n     *\r\n     * @type {Plane}\r\n     * @constant\r\n     */\r\n    Plane.ORIGIN_YZ_PLANE = freezeObject(new Plane(Cartesian3.UNIT_X, 0.0));\r\n\r\n    /**\r\n     * A constant initialized to the ZX plane passing through the origin, with normal in positive Y.\r\n     *\r\n     * @type {Plane}\r\n     * @constant\r\n     */\r\n    Plane.ORIGIN_ZX_PLANE = freezeObject(new Plane(Cartesian3.UNIT_Y, 0.0));\r\n\r\n    return Plane;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Plane.js\n// module id = 47\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Matrix4'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Matrix4) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Geometry instancing allows one {@link Geometry} object to be positions in several\r\n     * different locations and colored uniquely.  For example, one {@link BoxGeometry} can\r\n     * be instanced several times, each with a different <code>modelMatrix</code> to change\r\n     * its position, rotation, and scale.\r\n     *\r\n     * @alias GeometryInstance\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Geometry} options.geometry The geometry to instance.\r\n     * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The model matrix that transforms to transform the geometry from model to world coordinates.\r\n     * @param {Object} [options.id] A user-defined object to return when the instance is picked with {@link Scene#pick} or get/set per-instance attributes with {@link Primitive#getGeometryInstanceAttributes}.\r\n     * @param {Object} [options.attributes] Per-instance attributes like a show or color attribute shown in the example below.\r\n     *\r\n     *\r\n     * @example\r\n     * // Create geometry for a box, and two instances that refer to it.\r\n     * // One instance positions the box on the bottom and colored aqua.\r\n     * // The other instance positions the box on the top and color white.\r\n     * var geometry = Cesium.BoxGeometry.fromDimensions({\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\r\n     *   dimensions : new Cesium.Cartesian3(1000000.0, 1000000.0, 500000.0)\r\n     * });\r\n     * var instanceBottom = new Cesium.GeometryInstance({\r\n     *   geometry : geometry,\r\n     *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n     *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\r\n     *   attributes : {\r\n     *     color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.AQUA)\r\n     *   },\r\n     *   id : 'bottom'\r\n     * });\r\n     * var instanceTop = new Cesium.GeometryInstance({\r\n     *   geometry : geometry,\r\n     *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n     *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 3000000.0), new Cesium.Matrix4()),\r\n     *   attributes : {\r\n     *     color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.AQUA)\r\n     *   },\r\n     *   id : 'top'\r\n     * });\r\n     *\r\n     * @see Geometry\r\n     */\r\n    function GeometryInstance(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        \r\n\r\n        /**\r\n         * The geometry being instanced.\r\n         *\r\n         * @type Geometry\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.geometry = options.geometry;\r\n\r\n        /**\r\n         * The 4x4 transformation matrix that transforms the geometry from model to world coordinates.\r\n         * When this is the identity matrix, the geometry is drawn in world coordinates, i.e., Earth's WGS84 coordinates.\r\n         * Local reference frames can be used by providing a different transformation matrix, like that returned\r\n         * by {@link Transforms.eastNorthUpToFixedFrame}.\r\n         *\r\n         * @type Matrix4\r\n         *\r\n         * @default Matrix4.IDENTITY\r\n         */\r\n        this.modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\r\n\r\n        /**\r\n         * User-defined object returned when the instance is picked or used to get/set per-instance attributes.\r\n         *\r\n         * @type Object\r\n         *\r\n         * @default undefined\r\n         *\r\n         * @see Scene#pick\r\n         * @see Primitive#getGeometryInstanceAttributes\r\n         */\r\n        this.id = options.id;\r\n\r\n        /**\r\n         * Used for picking primitives that wrap geometry instances.\r\n         *\r\n         * @private\r\n         */\r\n        this.pickPrimitive = options.pickPrimitive;\r\n\r\n        /**\r\n         * Per-instance attributes like {@link ColorGeometryInstanceAttribute} or {@link ShowGeometryInstanceAttribute}.\r\n         * {@link Geometry} attributes varying per vertex; these attributes are constant for the entire instance.\r\n         *\r\n         * @type Object\r\n         *\r\n         * @default undefined\r\n         */\r\n        this.attributes = defaultValue(options.attributes, {});\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        this.westHemisphereGeometry = undefined;\r\n        /**\r\n         * @private\r\n         */\r\n        this.eastHemisphereGeometry = undefined;\r\n    }\r\n\r\n    return GeometryInstance;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GeometryInstance.js\n// module id = 48\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './EllipsoidTangentPlane',\r\n        './Intersect',\r\n        './Interval',\r\n        './Math',\r\n        './Matrix3',\r\n        './Plane',\r\n        './Rectangle'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        EllipsoidTangentPlane,\r\n        Intersect,\r\n        Interval,\r\n        CesiumMath,\r\n        Matrix3,\r\n        Plane,\r\n        Rectangle) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates an instance of an OrientedBoundingBox.\r\n     * An OrientedBoundingBox of some object is a closed and convex cuboid. It can provide a tighter bounding volume than {@link BoundingSphere} or {@link AxisAlignedBoundingBox} in many cases.\r\n     * @alias OrientedBoundingBox\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} [center=Cartesian3.ZERO] The center of the box.\r\n     * @param {Matrix3} [halfAxes=Matrix3.ZERO] The three orthogonal half-axes of the bounding box.\r\n     *                                          Equivalently, the transformation matrix, to rotate and scale a 0x0x0\r\n     *                                          cube centered at the origin.\r\n     *\r\n     *\r\n     * @example\r\n     * // Create an OrientedBoundingBox using a transformation matrix, a position where the box will be translated, and a scale.\r\n     * var center = new Cesium.Cartesian3(1.0, 0.0, 0.0);\r\n     * var halfAxes = Cesium.Matrix3.fromScale(new Cesium.Cartesian3(1.0, 3.0, 2.0), new Cesium.Matrix3());\r\n     *\r\n     * var obb = new Cesium.OrientedBoundingBox(center, halfAxes);\r\n     *\r\n     * @see BoundingSphere\r\n     * @see BoundingRectangle\r\n     */\r\n    function OrientedBoundingBox(center, halfAxes) {\r\n        /**\r\n         * The center of the box.\r\n         * @type {Cartesian3}\r\n         * @default {@link Cartesian3.ZERO}\r\n         */\r\n        this.center = Cartesian3.clone(defaultValue(center, Cartesian3.ZERO));\r\n        /**\r\n         * The transformation matrix, to rotate the box to the right position.\r\n         * @type {Matrix3}\r\n         * @default {@link Matrix3.ZERO}\r\n         */\r\n        this.halfAxes = Matrix3.clone(defaultValue(halfAxes, Matrix3.ZERO));\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    OrientedBoundingBox.packedLength = Cartesian3.packedLength + Matrix3.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {OrientedBoundingBox} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    OrientedBoundingBox.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value.center, array, startingIndex);\r\n        Matrix3.pack(value.halfAxes, array, startingIndex + Cartesian3.packedLength);\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {OrientedBoundingBox} [result] The object into which to store the result.\r\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if one was not provided.\r\n     */\r\n    OrientedBoundingBox.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new OrientedBoundingBox();\r\n        }\r\n\r\n        Cartesian3.unpack(array, startingIndex, result.center);\r\n        Matrix3.unpack(array, startingIndex + Cartesian3.packedLength, result.halfAxes);\r\n        return result;\r\n    };\r\n\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var scratchCartesian2 = new Cartesian3();\r\n    var scratchCartesian3 = new Cartesian3();\r\n    var scratchCartesian4 = new Cartesian3();\r\n    var scratchCartesian5 = new Cartesian3();\r\n    var scratchCartesian6 = new Cartesian3();\r\n    var scratchCovarianceResult = new Matrix3();\r\n    var scratchEigenResult = {\r\n        unitary : new Matrix3(),\r\n        diagonal : new Matrix3()\r\n    };\r\n\r\n    /**\r\n     * Computes an instance of an OrientedBoundingBox of the given positions.\r\n     * This is an implementation of Stefan Gottschalk's Collision Queries using Oriented Bounding Boxes solution (PHD thesis).\r\n     * Reference: http://gamma.cs.unc.edu/users/gottschalk/main.pdf\r\n     *\r\n     * @param {Cartesian3[]} [positions] List of {@link Cartesian3} points that the bounding box will enclose.\r\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\r\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Compute an object oriented bounding box enclosing two points.\r\n     * var box = Cesium.OrientedBoundingBox.fromPoints([new Cesium.Cartesian3(2, 0, 0), new Cesium.Cartesian3(-2, 0, 0)]);\r\n     */\r\n    OrientedBoundingBox.fromPoints = function(positions, result) {\r\n        if (!defined(result)) {\r\n            result = new OrientedBoundingBox();\r\n        }\r\n\r\n        if (!defined(positions) || positions.length === 0) {\r\n            result.halfAxes = Matrix3.ZERO;\r\n            result.center = Cartesian3.ZERO;\r\n            return result;\r\n        }\r\n\r\n        var i;\r\n        var length = positions.length;\r\n\r\n        var meanPoint = Cartesian3.clone(positions[0], scratchCartesian1);\r\n        for (i = 1; i < length; i++) {\r\n            Cartesian3.add(meanPoint, positions[i], meanPoint);\r\n        }\r\n        var invLength = 1.0 / length;\r\n        Cartesian3.multiplyByScalar(meanPoint, invLength, meanPoint);\r\n\r\n        var exx = 0.0;\r\n        var exy = 0.0;\r\n        var exz = 0.0;\r\n        var eyy = 0.0;\r\n        var eyz = 0.0;\r\n        var ezz = 0.0;\r\n        var p;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            p = Cartesian3.subtract(positions[i], meanPoint, scratchCartesian2);\r\n            exx += p.x * p.x;\r\n            exy += p.x * p.y;\r\n            exz += p.x * p.z;\r\n            eyy += p.y * p.y;\r\n            eyz += p.y * p.z;\r\n            ezz += p.z * p.z;\r\n        }\r\n\r\n        exx *= invLength;\r\n        exy *= invLength;\r\n        exz *= invLength;\r\n        eyy *= invLength;\r\n        eyz *= invLength;\r\n        ezz *= invLength;\r\n\r\n        var covarianceMatrix = scratchCovarianceResult;\r\n        covarianceMatrix[0] = exx;\r\n        covarianceMatrix[1] = exy;\r\n        covarianceMatrix[2] = exz;\r\n        covarianceMatrix[3] = exy;\r\n        covarianceMatrix[4] = eyy;\r\n        covarianceMatrix[5] = eyz;\r\n        covarianceMatrix[6] = exz;\r\n        covarianceMatrix[7] = eyz;\r\n        covarianceMatrix[8] = ezz;\r\n\r\n        var eigenDecomposition = Matrix3.computeEigenDecomposition(covarianceMatrix, scratchEigenResult);\r\n        var rotation = Matrix3.clone(eigenDecomposition.unitary, result.halfAxes);\r\n\r\n        var v1 = Matrix3.getColumn(rotation, 0, scratchCartesian4);\r\n        var v2 = Matrix3.getColumn(rotation, 1, scratchCartesian5);\r\n        var v3 = Matrix3.getColumn(rotation, 2, scratchCartesian6);\r\n\r\n        var u1 = -Number.MAX_VALUE;\r\n        var u2 = -Number.MAX_VALUE;\r\n        var u3 = -Number.MAX_VALUE;\r\n        var l1 = Number.MAX_VALUE;\r\n        var l2 = Number.MAX_VALUE;\r\n        var l3 = Number.MAX_VALUE;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            p = positions[i];\r\n            u1 = Math.max(Cartesian3.dot(v1, p), u1);\r\n            u2 = Math.max(Cartesian3.dot(v2, p), u2);\r\n            u3 = Math.max(Cartesian3.dot(v3, p), u3);\r\n\r\n            l1 = Math.min(Cartesian3.dot(v1, p), l1);\r\n            l2 = Math.min(Cartesian3.dot(v2, p), l2);\r\n            l3 = Math.min(Cartesian3.dot(v3, p), l3);\r\n        }\r\n\r\n        v1 = Cartesian3.multiplyByScalar(v1, 0.5 * (l1 + u1), v1);\r\n        v2 = Cartesian3.multiplyByScalar(v2, 0.5 * (l2 + u2), v2);\r\n        v3 = Cartesian3.multiplyByScalar(v3, 0.5 * (l3 + u3), v3);\r\n\r\n        var center = Cartesian3.add(v1, v2, result.center);\r\n        Cartesian3.add(center, v3, center);\r\n\r\n        var scale = scratchCartesian3;\r\n        scale.x = u1 - l1;\r\n        scale.y = u2 - l2;\r\n        scale.z = u3 - l3;\r\n        Cartesian3.multiplyByScalar(scale, 0.5, scale);\r\n        Matrix3.multiplyByScale(result.halfAxes, scale, result.halfAxes);\r\n\r\n        return result;\r\n    };\r\n\r\n    var scratchOffset = new Cartesian3();\r\n    var scratchScale = new Cartesian3();\r\n    /**\r\n     * Computes an OrientedBoundingBox given extents in the east-north-up space of the tangent plane.\r\n     *\r\n     * @param {Plane} tangentPlane The tangent place corresponding to east-north-up.\r\n     * @param {Number} minimumX Minimum X extent in tangent plane space.\r\n     * @param {Number} maximumX Maximum X extent in tangent plane space.\r\n     * @param {Number} minimumY Minimum Y extent in tangent plane space.\r\n     * @param {Number} maximumY Maximum Y extent in tangent plane space.\r\n     * @param {Number} minimumZ Minimum Z extent in tangent plane space.\r\n     * @param {Number} maximumZ Maximum Z extent in tangent plane space.\r\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\r\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if one was not provided.\r\n     */\r\n    function fromTangentPlaneExtents(tangentPlane, minimumX, maximumX, minimumY, maximumY, minimumZ, maximumZ, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new OrientedBoundingBox();\r\n        }\r\n\r\n        var halfAxes = result.halfAxes;\r\n        Matrix3.setColumn(halfAxes, 0, tangentPlane.xAxis, halfAxes);\r\n        Matrix3.setColumn(halfAxes, 1, tangentPlane.yAxis, halfAxes);\r\n        Matrix3.setColumn(halfAxes, 2, tangentPlane.zAxis, halfAxes);\r\n\r\n        var centerOffset = scratchOffset;\r\n        centerOffset.x = (minimumX + maximumX) / 2.0;\r\n        centerOffset.y = (minimumY + maximumY) / 2.0;\r\n        centerOffset.z = (minimumZ + maximumZ) / 2.0;\r\n\r\n        var scale = scratchScale;\r\n        scale.x = (maximumX - minimumX) / 2.0;\r\n        scale.y = (maximumY - minimumY) / 2.0;\r\n        scale.z = (maximumZ - minimumZ) / 2.0;\r\n\r\n        var center = result.center;\r\n        centerOffset = Matrix3.multiplyByVector(halfAxes, centerOffset, centerOffset);\r\n        Cartesian3.add(tangentPlane.origin, centerOffset, center);\r\n        Matrix3.multiplyByScale(halfAxes, scale, halfAxes);\r\n\r\n        return result;\r\n    }\r\n\r\n    var scratchRectangleCenterCartographic = new Cartographic();\r\n    var scratchRectangleCenter = new Cartesian3();\r\n    var perimeterCartographicScratch = [new Cartographic(), new Cartographic(), new Cartographic(), new Cartographic(), new Cartographic(), new Cartographic(), new Cartographic(), new Cartographic()];\r\n    var perimeterCartesianScratch = [new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3()];\r\n    var perimeterProjectedScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2(), new Cartesian2(), new Cartesian2(), new Cartesian2(), new Cartesian2(), new Cartesian2()];\r\n    /**\r\n     * Computes an OrientedBoundingBox that bounds a {@link Rectangle} on the surface of an {@link Ellipsoid}.\r\n     * There are no guarantees about the orientation of the bounding box.\r\n     *\r\n     * @param {Rectangle} rectangle The cartographic rectangle on the surface of the ellipsoid.\r\n     * @param {Number} [minimumHeight=0.0] The minimum height (elevation) within the tile.\r\n     * @param {Number} [maximumHeight=0.0] The maximum height (elevation) within the tile.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle is defined.\r\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\r\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if none was provided.\r\n     *\r\n     * @exception {DeveloperError} rectangle.width must be between 0 and pi.\r\n     * @exception {DeveloperError} rectangle.height must be between 0 and pi.\r\n     * @exception {DeveloperError} ellipsoid must be an ellipsoid of revolution (<code>radii.x == radii.y</code>)\r\n     */\r\n    OrientedBoundingBox.fromRectangle = function(rectangle, minimumHeight, maximumHeight, ellipsoid, result) {\r\n        \r\n\r\n        minimumHeight = defaultValue(minimumHeight, 0.0);\r\n        maximumHeight = defaultValue(maximumHeight, 0.0);\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        // The bounding box will be aligned with the tangent plane at the center of the rectangle.\r\n        var tangentPointCartographic = Rectangle.center(rectangle, scratchRectangleCenterCartographic);\r\n        var tangentPoint = ellipsoid.cartographicToCartesian(tangentPointCartographic, scratchRectangleCenter);\r\n        var tangentPlane = new EllipsoidTangentPlane(tangentPoint, ellipsoid);\r\n        var plane = tangentPlane.plane;\r\n\r\n        // Corner arrangement:\r\n        //          N/+y\r\n        //      [0] [1] [2]\r\n        // W/-x [7]     [3] E/+x\r\n        //      [6] [5] [4]\r\n        //          S/-y\r\n        // \"C\" refers to the central lat/long, which by default aligns with the tangent point (above).\r\n        // If the rectangle spans the equator, CW and CE are instead aligned with the equator.\r\n        var perimeterNW = perimeterCartographicScratch[0];\r\n        var perimeterNC = perimeterCartographicScratch[1];\r\n        var perimeterNE = perimeterCartographicScratch[2];\r\n        var perimeterCE = perimeterCartographicScratch[3];\r\n        var perimeterSE = perimeterCartographicScratch[4];\r\n        var perimeterSC = perimeterCartographicScratch[5];\r\n        var perimeterSW = perimeterCartographicScratch[6];\r\n        var perimeterCW = perimeterCartographicScratch[7];\r\n\r\n        var lonCenter = tangentPointCartographic.longitude;\r\n        var latCenter = (rectangle.south < 0.0 && rectangle.north > 0.0) ? 0.0 : tangentPointCartographic.latitude;\r\n        perimeterSW.latitude = perimeterSC.latitude = perimeterSE.latitude = rectangle.south;\r\n        perimeterCW.latitude = perimeterCE.latitude = latCenter;\r\n        perimeterNW.latitude = perimeterNC.latitude = perimeterNE.latitude = rectangle.north;\r\n        perimeterSW.longitude = perimeterCW.longitude = perimeterNW.longitude = rectangle.west;\r\n        perimeterSC.longitude = perimeterNC.longitude = lonCenter;\r\n        perimeterSE.longitude = perimeterCE.longitude = perimeterNE.longitude = rectangle.east;\r\n\r\n        // Compute XY extents using the rectangle at maximum height\r\n        perimeterNE.height = perimeterNC.height = perimeterNW.height = perimeterCW.height = perimeterSW.height = perimeterSC.height = perimeterSE.height = perimeterCE.height = maximumHeight;\r\n\r\n        ellipsoid.cartographicArrayToCartesianArray(perimeterCartographicScratch, perimeterCartesianScratch);\r\n        tangentPlane.projectPointsToNearestOnPlane(perimeterCartesianScratch, perimeterProjectedScratch);\r\n        // See the `perimeterXX` definitions above for what these are\r\n        var minX = Math.min(perimeterProjectedScratch[6].x, perimeterProjectedScratch[7].x, perimeterProjectedScratch[0].x);\r\n        var maxX = Math.max(perimeterProjectedScratch[2].x, perimeterProjectedScratch[3].x, perimeterProjectedScratch[4].x);\r\n        var minY = Math.min(perimeterProjectedScratch[4].y, perimeterProjectedScratch[5].y, perimeterProjectedScratch[6].y);\r\n        var maxY = Math.max(perimeterProjectedScratch[0].y, perimeterProjectedScratch[1].y, perimeterProjectedScratch[2].y);\r\n\r\n        // Compute minimum Z using the rectangle at minimum height\r\n        perimeterNE.height = perimeterNW.height = perimeterSE.height = perimeterSW.height = minimumHeight;\r\n        ellipsoid.cartographicArrayToCartesianArray(perimeterCartographicScratch, perimeterCartesianScratch);\r\n        var minZ = Math.min(Plane.getPointDistance(plane, perimeterCartesianScratch[0]),\r\n                            Plane.getPointDistance(plane, perimeterCartesianScratch[2]),\r\n                            Plane.getPointDistance(plane, perimeterCartesianScratch[4]),\r\n                            Plane.getPointDistance(plane, perimeterCartesianScratch[6]));\r\n        var maxZ = maximumHeight;  // Since the tangent plane touches the surface at height = 0, this is okay\r\n\r\n        return fromTangentPlaneExtents(tangentPlane, minX, maxX, minY, maxY, minZ, maxZ, result);\r\n    };\r\n\r\n    /**\r\n     * Duplicates a OrientedBoundingBox instance.\r\n     *\r\n     * @param {OrientedBoundingBox} box The bounding box to duplicate.\r\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\r\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if none was provided. (Returns undefined if box is undefined)\r\n     */\r\n    OrientedBoundingBox.clone = function(box, result) {\r\n        if (!defined(box)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new OrientedBoundingBox(box.center, box.halfAxes);\r\n        }\r\n\r\n        Cartesian3.clone(box.center, result.center);\r\n        Matrix3.clone(box.halfAxes, result.halfAxes);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determines which side of a plane the oriented bounding box is located.\r\n     *\r\n     * @param {OrientedBoundingBox} box The oriented bounding box to test.\r\n     * @param {Plane} plane The plane to test against.\r\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\r\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\r\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\r\n     *                      intersects the plane.\r\n     */\r\n    OrientedBoundingBox.intersectPlane = function(box, plane) {\r\n        \r\n\r\n        var center = box.center;\r\n        var normal = plane.normal;\r\n        var halfAxes = box.halfAxes;\r\n        var normalX = normal.x, normalY = normal.y, normalZ = normal.z;\r\n        // plane is used as if it is its normal; the first three components are assumed to be normalized\r\n        var radEffective = Math.abs(normalX * halfAxes[Matrix3.COLUMN0ROW0] + normalY * halfAxes[Matrix3.COLUMN0ROW1] + normalZ * halfAxes[Matrix3.COLUMN0ROW2]) +\r\n                           Math.abs(normalX * halfAxes[Matrix3.COLUMN1ROW0] + normalY * halfAxes[Matrix3.COLUMN1ROW1] + normalZ * halfAxes[Matrix3.COLUMN1ROW2]) +\r\n                           Math.abs(normalX * halfAxes[Matrix3.COLUMN2ROW0] + normalY * halfAxes[Matrix3.COLUMN2ROW1] + normalZ * halfAxes[Matrix3.COLUMN2ROW2]);\r\n        var distanceToPlane = Cartesian3.dot(normal, center) + plane.distance;\r\n\r\n        if (distanceToPlane <= -radEffective) {\r\n            // The entire box is on the negative side of the plane normal\r\n            return Intersect.OUTSIDE;\r\n        } else if (distanceToPlane >= radEffective) {\r\n            // The entire box is on the positive side of the plane normal\r\n            return Intersect.INSIDE;\r\n        }\r\n        return Intersect.INTERSECTING;\r\n    };\r\n\r\n    var scratchCartesianU = new Cartesian3();\r\n    var scratchCartesianV = new Cartesian3();\r\n    var scratchCartesianW = new Cartesian3();\r\n    var scratchPPrime = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the estimated distance squared from the closest point on a bounding box to a point.\r\n     *\r\n     * @param {OrientedBoundingBox} box The box.\r\n     * @param {Cartesian3} cartesian The point\r\n     * @returns {Number} The estimated distance squared from the bounding sphere to the point.\r\n     *\r\n     * @example\r\n     * // Sort bounding boxes from back to front\r\n     * boxes.sort(function(a, b) {\r\n     *     return Cesium.OrientedBoundingBox.distanceSquaredTo(b, camera.positionWC) - Cesium.OrientedBoundingBox.distanceSquaredTo(a, camera.positionWC);\r\n     * });\r\n     */\r\n    OrientedBoundingBox.distanceSquaredTo = function(box, cartesian) {\r\n        // See Geometric Tools for Computer Graphics 10.4.2\r\n\r\n        \r\n\r\n        var offset = Cartesian3.subtract(cartesian, box.center, scratchOffset);\r\n\r\n        var halfAxes = box.halfAxes;\r\n        var u = Matrix3.getColumn(halfAxes, 0, scratchCartesianU);\r\n        var v = Matrix3.getColumn(halfAxes, 1, scratchCartesianV);\r\n        var w = Matrix3.getColumn(halfAxes, 2, scratchCartesianW);\r\n\r\n        var uHalf = Cartesian3.magnitude(u);\r\n        var vHalf = Cartesian3.magnitude(v);\r\n        var wHalf = Cartesian3.magnitude(w);\r\n\r\n        Cartesian3.normalize(u, u);\r\n        Cartesian3.normalize(v, v);\r\n        Cartesian3.normalize(w, w);\r\n\r\n        var pPrime = scratchPPrime;\r\n        pPrime.x = Cartesian3.dot(offset, u);\r\n        pPrime.y = Cartesian3.dot(offset, v);\r\n        pPrime.z = Cartesian3.dot(offset, w);\r\n\r\n        var distanceSquared = 0.0;\r\n        var d;\r\n\r\n        if (pPrime.x < -uHalf) {\r\n            d = pPrime.x + uHalf;\r\n            distanceSquared += d * d;\r\n        } else if (pPrime.x > uHalf) {\r\n            d = pPrime.x - uHalf;\r\n            distanceSquared += d * d;\r\n        }\r\n\r\n        if (pPrime.y < -vHalf) {\r\n            d = pPrime.y + vHalf;\r\n            distanceSquared += d * d;\r\n        } else if (pPrime.y > vHalf) {\r\n            d = pPrime.y - vHalf;\r\n            distanceSquared += d * d;\r\n        }\r\n\r\n        if (pPrime.z < -wHalf) {\r\n            d = pPrime.z + wHalf;\r\n            distanceSquared += d * d;\r\n        } else if (pPrime.z > wHalf) {\r\n            d = pPrime.z - wHalf;\r\n            distanceSquared += d * d;\r\n        }\r\n\r\n        return distanceSquared;\r\n    };\r\n\r\n    var scratchCorner = new Cartesian3();\r\n    var scratchToCenter = new Cartesian3();\r\n\r\n    /**\r\n     * The distances calculated by the vector from the center of the bounding box to position projected onto direction.\r\n     * <br>\r\n     * If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the\r\n     * closest and farthest planes from position that intersect the bounding box.\r\n     *\r\n     * @param {OrientedBoundingBox} box The bounding box to calculate the distance to.\r\n     * @param {Cartesian3} position The position to calculate the distance from.\r\n     * @param {Cartesian3} direction The direction from position.\r\n     * @param {Interval} [result] A Interval to store the nearest and farthest distances.\r\n     * @returns {Interval} The nearest and farthest distances on the bounding box from position in direction.\r\n     */\r\n    OrientedBoundingBox.computePlaneDistances = function(box, position, direction, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Interval();\r\n        }\r\n\r\n        var minDist = Number.POSITIVE_INFINITY;\r\n        var maxDist = Number.NEGATIVE_INFINITY;\r\n\r\n        var center = box.center;\r\n        var halfAxes = box.halfAxes;\r\n\r\n        var u = Matrix3.getColumn(halfAxes, 0, scratchCartesianU);\r\n        var v = Matrix3.getColumn(halfAxes, 1, scratchCartesianV);\r\n        var w = Matrix3.getColumn(halfAxes, 2, scratchCartesianW);\r\n\r\n        // project first corner\r\n        var corner = Cartesian3.add(u, v, scratchCorner);\r\n        Cartesian3.add(corner, w, corner);\r\n        Cartesian3.add(corner, center, corner);\r\n\r\n        var toCenter = Cartesian3.subtract(corner, position, scratchToCenter);\r\n        var mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        minDist = Math.min(mag, minDist);\r\n        maxDist = Math.max(mag, maxDist);\r\n\r\n        // project second corner\r\n        Cartesian3.add(center, u, corner);\r\n        Cartesian3.add(corner, v, corner);\r\n        Cartesian3.subtract(corner, w, corner);\r\n\r\n        Cartesian3.subtract(corner, position, toCenter);\r\n        mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        minDist = Math.min(mag, minDist);\r\n        maxDist = Math.max(mag, maxDist);\r\n\r\n        // project third corner\r\n        Cartesian3.add(center, u, corner);\r\n        Cartesian3.subtract(corner, v, corner);\r\n        Cartesian3.add(corner, w, corner);\r\n\r\n        Cartesian3.subtract(corner, position, toCenter);\r\n        mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        minDist = Math.min(mag, minDist);\r\n        maxDist = Math.max(mag, maxDist);\r\n\r\n        // project fourth corner\r\n        Cartesian3.add(center, u, corner);\r\n        Cartesian3.subtract(corner, v, corner);\r\n        Cartesian3.subtract(corner, w, corner);\r\n\r\n        Cartesian3.subtract(corner, position, toCenter);\r\n        mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        minDist = Math.min(mag, minDist);\r\n        maxDist = Math.max(mag, maxDist);\r\n\r\n        // project fifth corner\r\n        Cartesian3.subtract(center, u, corner);\r\n        Cartesian3.add(corner, v, corner);\r\n        Cartesian3.add(corner, w, corner);\r\n\r\n        Cartesian3.subtract(corner, position, toCenter);\r\n        mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        minDist = Math.min(mag, minDist);\r\n        maxDist = Math.max(mag, maxDist);\r\n\r\n        // project sixth corner\r\n        Cartesian3.subtract(center, u, corner);\r\n        Cartesian3.add(corner, v, corner);\r\n        Cartesian3.subtract(corner, w, corner);\r\n\r\n        Cartesian3.subtract(corner, position, toCenter);\r\n        mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        minDist = Math.min(mag, minDist);\r\n        maxDist = Math.max(mag, maxDist);\r\n\r\n        // project seventh corner\r\n        Cartesian3.subtract(center, u, corner);\r\n        Cartesian3.subtract(corner, v, corner);\r\n        Cartesian3.add(corner, w, corner);\r\n\r\n        Cartesian3.subtract(corner, position, toCenter);\r\n        mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        minDist = Math.min(mag, minDist);\r\n        maxDist = Math.max(mag, maxDist);\r\n\r\n        // project eighth corner\r\n        Cartesian3.subtract(center, u, corner);\r\n        Cartesian3.subtract(corner, v, corner);\r\n        Cartesian3.subtract(corner, w, corner);\r\n\r\n        Cartesian3.subtract(corner, position, toCenter);\r\n        mag = Cartesian3.dot(direction, toCenter);\r\n\r\n        minDist = Math.min(mag, minDist);\r\n        maxDist = Math.max(mag, maxDist);\r\n\r\n        result.start = minDist;\r\n        result.stop = maxDist;\r\n        return result;\r\n    };\r\n\r\n    var scratchBoundingSphere = new BoundingSphere();\r\n\r\n    /**\r\n     * Determines whether or not a bounding box is hidden from view by the occluder.\r\n     *\r\n     * @param {OrientedBoundingBox} box The bounding box surrounding the occludee object.\r\n     * @param {Occluder} occluder The occluder.\r\n     * @returns {Boolean} <code>true</code> if the box is not visible; otherwise <code>false</code>.\r\n     */\r\n    OrientedBoundingBox.isOccluded = function(box, occluder) {\r\n        \r\n\r\n        var sphere = BoundingSphere.fromOrientedBoundingBox(box, scratchBoundingSphere);\r\n\r\n        return !occluder.isBoundingSphereVisible(sphere);\r\n    };\r\n\r\n    /**\r\n     * Determines which side of a plane the oriented bounding box is located.\r\n     *\r\n     * @param {Plane} plane The plane to test against.\r\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\r\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\r\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\r\n     *                      intersects the plane.\r\n     */\r\n    OrientedBoundingBox.prototype.intersectPlane = function(plane) {\r\n        return OrientedBoundingBox.intersectPlane(this, plane);\r\n    };\r\n\r\n    /**\r\n     * Computes the estimated distance squared from the closest point on a bounding box to a point.\r\n     *\r\n     * @param {Cartesian3} cartesian The point\r\n     * @returns {Number} The estimated distance squared from the bounding sphere to the point.\r\n     *\r\n     * @example\r\n     * // Sort bounding boxes from back to front\r\n     * boxes.sort(function(a, b) {\r\n     *     return b.distanceSquaredTo(camera.positionWC) - a.distanceSquaredTo(camera.positionWC);\r\n     * });\r\n     */\r\n    OrientedBoundingBox.prototype.distanceSquaredTo = function(cartesian) {\r\n        return OrientedBoundingBox.distanceSquaredTo(this, cartesian);\r\n    };\r\n\r\n    /**\r\n     * The distances calculated by the vector from the center of the bounding box to position projected onto direction.\r\n     * <br>\r\n     * If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the\r\n     * closest and farthest planes from position that intersect the bounding box.\r\n     *\r\n     * @param {Cartesian3} position The position to calculate the distance from.\r\n     * @param {Cartesian3} direction The direction from position.\r\n     * @param {Interval} [result] A Interval to store the nearest and farthest distances.\r\n     * @returns {Interval} The nearest and farthest distances on the bounding box from position in direction.\r\n     */\r\n    OrientedBoundingBox.prototype.computePlaneDistances = function(position, direction, result) {\r\n        return OrientedBoundingBox.computePlaneDistances(this, position, direction, result);\r\n    };\r\n\r\n    /**\r\n     * Determines whether or not a bounding box is hidden from view by the occluder.\r\n     *\r\n     * @param {Occluder} occluder The occluder.\r\n     * @returns {Boolean} <code>true</code> if the sphere is not visible; otherwise <code>false</code>.\r\n     */\r\n    OrientedBoundingBox.prototype.isOccluded = function(occluder) {\r\n        return OrientedBoundingBox.isOccluded(this, occluder);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrientedBoundingBox componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {OrientedBoundingBox} left The first OrientedBoundingBox.\r\n     * @param {OrientedBoundingBox} right The second OrientedBoundingBox.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    OrientedBoundingBox.equals = function(left, right) {\r\n        return (left === right) ||\r\n                ((defined(left)) &&\r\n                 (defined(right)) &&\r\n                 Cartesian3.equals(left.center, right.center) &&\r\n                 Matrix3.equals(left.halfAxes, right.halfAxes));\r\n    };\r\n\r\n    /**\r\n     * Duplicates this OrientedBoundingBox instance.\r\n     *\r\n     * @param {OrientedBoundingBox} [result] The object onto which to store the result.\r\n     * @returns {OrientedBoundingBox} The modified result parameter or a new OrientedBoundingBox instance if one was not provided.\r\n     */\r\n    OrientedBoundingBox.prototype.clone = function(result) {\r\n        return OrientedBoundingBox.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this OrientedBoundingBox against the provided OrientedBoundingBox componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {OrientedBoundingBox} [right] The right hand side OrientedBoundingBox.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    OrientedBoundingBox.prototype.equals = function(right) {\r\n        return OrientedBoundingBox.equals(this, right);\r\n    };\r\n\r\n    return OrientedBoundingBox;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/OrientedBoundingBox.js\n// module id = 49\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Style options for corners.\r\n     *\r\n     * @demo The {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\r\n     * demonstrates the three corner types, as used by {@link CorridorGraphics}.\r\n     *\r\n     * @exports CornerType\r\n     */\r\n    var CornerType = {\r\n        /**\r\n         * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner has a smooth edge.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        ROUNDED : 0,\r\n\r\n        /**\r\n         * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner point is the intersection of adjacent edges.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        MITERED : 1,\r\n\r\n        /**\r\n         * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner is clipped.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        BEVELED : 2\r\n    };\r\n\r\n    return freezeObject(CornerType);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CornerType.js\n// module id = 50\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Interval',\r\n        './Math',\r\n        './Matrix3',\r\n        './QuadraticRealPolynomial',\r\n        './QuarticRealPolynomial',\r\n        './Ray'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartographic,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Interval,\r\n        CesiumMath,\r\n        Matrix3,\r\n        QuadraticRealPolynomial,\r\n        QuarticRealPolynomial,\r\n        Ray) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Functions for computing the intersection between geometries such as rays, planes, triangles, and ellipsoids.\r\n     *\r\n     * @exports IntersectionTests\r\n     */\r\n    var IntersectionTests = {};\r\n\r\n    /**\r\n     * Computes the intersection of a ray and a plane.\r\n     *\r\n     * @param {Ray} ray The ray.\r\n     * @param {Plane} plane The plane.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n     */\r\n    IntersectionTests.rayPlane = function(ray, plane, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var origin = ray.origin;\r\n        var direction = ray.direction;\r\n        var normal = plane.normal;\r\n        var denominator = Cartesian3.dot(normal, direction);\r\n\r\n        if (Math.abs(denominator) < CesiumMath.EPSILON15) {\r\n            // Ray is parallel to plane.  The ray may be in the polygon's plane.\r\n            return undefined;\r\n        }\r\n\r\n        var t = (-plane.distance - Cartesian3.dot(normal, origin)) / denominator;\r\n\r\n        if (t < 0) {\r\n            return undefined;\r\n        }\r\n\r\n        result = Cartesian3.multiplyByScalar(direction, t, result);\r\n        return Cartesian3.add(origin, result, result);\r\n    };\r\n\r\n    var scratchEdge0 = new Cartesian3();\r\n    var scratchEdge1 = new Cartesian3();\r\n    var scratchPVec = new Cartesian3();\r\n    var scratchTVec = new Cartesian3();\r\n    var scratchQVec = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the intersection of a ray and a triangle as a parametric distance along the input ray.\r\n     *\r\n     * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\r\n     * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\r\n     *\r\n     * @memberof IntersectionTests\r\n     *\r\n     * @param {Ray} ray The ray.\r\n     * @param {Cartesian3} p0 The first vertex of the triangle.\r\n     * @param {Cartesian3} p1 The second vertex of the triangle.\r\n     * @param {Cartesian3} p2 The third vertex of the triangle.\r\n     * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n     *                  and return undefined for intersections with the back face.\r\n     * @returns {Number} The intersection as a parametric distance along the ray, or undefined if there is no intersection.\r\n     */\r\n    IntersectionTests.rayTriangleParametric  = function(ray, p0, p1, p2, cullBackFaces) {\r\n        \r\n\r\n        cullBackFaces = defaultValue(cullBackFaces, false);\r\n\r\n        var origin = ray.origin;\r\n        var direction = ray.direction;\r\n\r\n        var edge0 = Cartesian3.subtract(p1, p0, scratchEdge0);\r\n        var edge1 = Cartesian3.subtract(p2, p0, scratchEdge1);\r\n\r\n        var p = Cartesian3.cross(direction, edge1, scratchPVec);\r\n        var det = Cartesian3.dot(edge0, p);\r\n\r\n        var tvec;\r\n        var q;\r\n\r\n        var u;\r\n        var v;\r\n        var t;\r\n\r\n        if (cullBackFaces) {\r\n            if (det < CesiumMath.EPSILON6) {\r\n                return undefined;\r\n            }\r\n\r\n            tvec = Cartesian3.subtract(origin, p0, scratchTVec);\r\n            u = Cartesian3.dot(tvec, p);\r\n            if (u < 0.0 || u > det) {\r\n                return undefined;\r\n            }\r\n\r\n            q = Cartesian3.cross(tvec, edge0, scratchQVec);\r\n\r\n            v = Cartesian3.dot(direction, q);\r\n            if (v < 0.0 || u + v > det) {\r\n                return undefined;\r\n            }\r\n\r\n            t = Cartesian3.dot(edge1, q) / det;\r\n        } else {\r\n            if (Math.abs(det) < CesiumMath.EPSILON6) {\r\n                return undefined;\r\n            }\r\n            var invDet = 1.0 / det;\r\n\r\n            tvec = Cartesian3.subtract(origin, p0, scratchTVec);\r\n            u = Cartesian3.dot(tvec, p) * invDet;\r\n            if (u < 0.0 || u > 1.0) {\r\n                return undefined;\r\n            }\r\n\r\n            q = Cartesian3.cross(tvec, edge0, scratchQVec);\r\n\r\n            v = Cartesian3.dot(direction, q) * invDet;\r\n            if (v < 0.0 || u + v > 1.0) {\r\n                return undefined;\r\n            }\r\n\r\n            t = Cartesian3.dot(edge1, q) * invDet;\r\n        }\r\n\r\n        return t;\r\n    };\r\n\r\n    /**\r\n     * Computes the intersection of a ray and a triangle as a Cartesian3 coordinate.\r\n     *\r\n     * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\r\n     * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\r\n     *\r\n     * @memberof IntersectionTests\r\n     *\r\n     * @param {Ray} ray The ray.\r\n     * @param {Cartesian3} p0 The first vertex of the triangle.\r\n     * @param {Cartesian3} p1 The second vertex of the triangle.\r\n     * @param {Cartesian3} p2 The third vertex of the triangle.\r\n     * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n     *                  and return undefined for intersections with the back face.\r\n     * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\r\n     * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n     */\r\n    IntersectionTests.rayTriangle = function(ray, p0, p1, p2, cullBackFaces, result) {\r\n        var t = IntersectionTests.rayTriangleParametric(ray, p0, p1, p2, cullBackFaces);\r\n        if (!defined(t) || t < 0.0) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n        return Cartesian3.add(ray.origin, result, result);\r\n    };\r\n\r\n    var scratchLineSegmentTriangleRay = new Ray();\r\n\r\n    /**\r\n     * Computes the intersection of a line segment and a triangle.\r\n     * @memberof IntersectionTests\r\n     *\r\n     * @param {Cartesian3} v0 The an end point of the line segment.\r\n     * @param {Cartesian3} v1 The other end point of the line segment.\r\n     * @param {Cartesian3} p0 The first vertex of the triangle.\r\n     * @param {Cartesian3} p1 The second vertex of the triangle.\r\n     * @param {Cartesian3} p2 The third vertex of the triangle.\r\n     * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n     *                  and return undefined for intersections with the back face.\r\n     * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\r\n     * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n     */\r\n    IntersectionTests.lineSegmentTriangle = function(v0, v1, p0, p1, p2, cullBackFaces, result) {\r\n        \r\n\r\n        var ray = scratchLineSegmentTriangleRay;\r\n        Cartesian3.clone(v0, ray.origin);\r\n        Cartesian3.subtract(v1, v0, ray.direction);\r\n        Cartesian3.normalize(ray.direction, ray.direction);\r\n\r\n        var t = IntersectionTests.rayTriangleParametric(ray, p0, p1, p2, cullBackFaces);\r\n        if (!defined(t) || t < 0.0 || t > Cartesian3.distance(v0, v1)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n        return Cartesian3.add(ray.origin, result, result);\r\n    };\r\n\r\n    function solveQuadratic(a, b, c, result) {\r\n        var det = b * b - 4.0 * a * c;\r\n        if (det < 0.0) {\r\n            return undefined;\r\n        } else if (det > 0.0) {\r\n            var denom = 1.0 / (2.0 * a);\r\n            var disc = Math.sqrt(det);\r\n            var root0 = (-b + disc) * denom;\r\n            var root1 = (-b - disc) * denom;\r\n\r\n            if (root0 < root1) {\r\n                result.root0 = root0;\r\n                result.root1 = root1;\r\n            } else {\r\n                result.root0 = root1;\r\n                result.root1 = root0;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        var root = -b / (2.0 * a);\r\n        if (root === 0.0) {\r\n            return undefined;\r\n        }\r\n\r\n        result.root0 = result.root1 = root;\r\n        return result;\r\n    }\r\n\r\n    var raySphereRoots = {\r\n        root0 : 0.0,\r\n        root1 : 0.0\r\n    };\r\n\r\n    function raySphere(ray, sphere, result) {\r\n        if (!defined(result)) {\r\n            result = new Interval();\r\n        }\r\n\r\n        var origin = ray.origin;\r\n        var direction = ray.direction;\r\n\r\n        var center = sphere.center;\r\n        var radiusSquared = sphere.radius * sphere.radius;\r\n\r\n        var diff = Cartesian3.subtract(origin, center, scratchPVec);\r\n\r\n        var a = Cartesian3.dot(direction, direction);\r\n        var b = 2.0 * Cartesian3.dot(direction, diff);\r\n        var c = Cartesian3.magnitudeSquared(diff) - radiusSquared;\r\n\r\n        var roots = solveQuadratic(a, b, c, raySphereRoots);\r\n        if (!defined(roots)) {\r\n            return undefined;\r\n        }\r\n\r\n        result.start = roots.root0;\r\n        result.stop = roots.root1;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Computes the intersection points of a ray with a sphere.\r\n     * @memberof IntersectionTests\r\n     *\r\n     * @param {Ray} ray The ray.\r\n     * @param {BoundingSphere} sphere The sphere.\r\n     * @param {Interval} [result] The result onto which to store the result.\r\n     * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n     */\r\n    IntersectionTests.raySphere = function(ray, sphere, result) {\r\n        \r\n\r\n        result = raySphere(ray, sphere, result);\r\n        if (!defined(result) || result.stop < 0.0) {\r\n            return undefined;\r\n        }\r\n\r\n        result.start = Math.max(result.start, 0.0);\r\n        return result;\r\n    };\r\n\r\n    var scratchLineSegmentRay = new Ray();\r\n\r\n    /**\r\n     * Computes the intersection points of a line segment with a sphere.\r\n     * @memberof IntersectionTests\r\n     *\r\n     * @param {Cartesian3} p0 An end point of the line segment.\r\n     * @param {Cartesian3} p1 The other end point of the line segment.\r\n     * @param {BoundingSphere} sphere The sphere.\r\n     * @param {Interval} [result] The result onto which to store the result.\r\n     * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n     */\r\n    IntersectionTests.lineSegmentSphere = function(p0, p1, sphere, result) {\r\n        \r\n\r\n        var ray = scratchLineSegmentRay;\r\n        Cartesian3.clone(p0, ray.origin);\r\n        var direction = Cartesian3.subtract(p1, p0, ray.direction);\r\n\r\n        var maxT = Cartesian3.magnitude(direction);\r\n        Cartesian3.normalize(direction, direction);\r\n\r\n        result = raySphere(ray, sphere, result);\r\n        if (!defined(result) || result.stop < 0.0 || result.start > maxT) {\r\n            return undefined;\r\n        }\r\n\r\n        result.start = Math.max(result.start, 0.0);\r\n        result.stop = Math.min(result.stop, maxT);\r\n        return result;\r\n    };\r\n\r\n    var scratchQ = new Cartesian3();\r\n    var scratchW = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the intersection points of a ray with an ellipsoid.\r\n     *\r\n     * @param {Ray} ray The ray.\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid.\r\n     * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n     */\r\n    IntersectionTests.rayEllipsoid = function(ray, ellipsoid) {\r\n        \r\n\r\n        var inverseRadii = ellipsoid.oneOverRadii;\r\n        var q = Cartesian3.multiplyComponents(inverseRadii, ray.origin, scratchQ);\r\n        var w = Cartesian3.multiplyComponents(inverseRadii, ray.direction, scratchW);\r\n\r\n        var q2 = Cartesian3.magnitudeSquared(q);\r\n        var qw = Cartesian3.dot(q, w);\r\n\r\n        var difference, w2, product, discriminant, temp;\r\n\r\n        if (q2 > 1.0) {\r\n            // Outside ellipsoid.\r\n            if (qw >= 0.0) {\r\n                // Looking outward or tangent (0 intersections).\r\n                return undefined;\r\n            }\r\n\r\n            // qw < 0.0.\r\n            var qw2 = qw * qw;\r\n            difference = q2 - 1.0; // Positively valued.\r\n            w2 = Cartesian3.magnitudeSquared(w);\r\n            product = w2 * difference;\r\n\r\n            if (qw2 < product) {\r\n                // Imaginary roots (0 intersections).\r\n                return undefined;\r\n            } else if (qw2 > product) {\r\n                // Distinct roots (2 intersections).\r\n                discriminant = qw * qw - product;\r\n                temp = -qw + Math.sqrt(discriminant); // Avoid cancellation.\r\n                var root0 = temp / w2;\r\n                var root1 = difference / temp;\r\n                if (root0 < root1) {\r\n                    return new Interval(root0, root1);\r\n                }\r\n\r\n                return {\r\n                    start : root1,\r\n                    stop : root0\r\n                };\r\n            }\r\n            // qw2 == product.  Repeated roots (2 intersections).\r\n            var root = Math.sqrt(difference / w2);\r\n            return new Interval(root, root);\r\n        } else if (q2 < 1.0) {\r\n            // Inside ellipsoid (2 intersections).\r\n            difference = q2 - 1.0; // Negatively valued.\r\n            w2 = Cartesian3.magnitudeSquared(w);\r\n            product = w2 * difference; // Negatively valued.\r\n\r\n            discriminant = qw * qw - product;\r\n            temp = -qw + Math.sqrt(discriminant); // Positively valued.\r\n            return new Interval(0.0, temp / w2);\r\n        }\r\n        // q2 == 1.0. On ellipsoid.\r\n        if (qw < 0.0) {\r\n            // Looking inward.\r\n            w2 = Cartesian3.magnitudeSquared(w);\r\n            return new Interval(0.0, -qw / w2);\r\n        }\r\n\r\n        // qw >= 0.0.  Looking outward or tangent.\r\n        return undefined;\r\n    };\r\n\r\n    function addWithCancellationCheck(left, right, tolerance) {\r\n        var difference = left + right;\r\n        if ((CesiumMath.sign(left) !== CesiumMath.sign(right)) &&\r\n                Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {\r\n            return 0.0;\r\n        }\r\n\r\n        return difference;\r\n    }\r\n\r\n    function quadraticVectorExpression(A, b, c, x, w) {\r\n        var xSquared = x * x;\r\n        var wSquared = w * w;\r\n\r\n        var l2 = (A[Matrix3.COLUMN1ROW1] - A[Matrix3.COLUMN2ROW2]) * wSquared;\r\n        var l1 = w * (x * addWithCancellationCheck(A[Matrix3.COLUMN1ROW0], A[Matrix3.COLUMN0ROW1], CesiumMath.EPSILON15) + b.y);\r\n        var l0 = (A[Matrix3.COLUMN0ROW0] * xSquared + A[Matrix3.COLUMN2ROW2] * wSquared) + x * b.x + c;\r\n\r\n        var r1 = wSquared * addWithCancellationCheck(A[Matrix3.COLUMN2ROW1], A[Matrix3.COLUMN1ROW2], CesiumMath.EPSILON15);\r\n        var r0 = w * (x * addWithCancellationCheck(A[Matrix3.COLUMN2ROW0], A[Matrix3.COLUMN0ROW2]) + b.z);\r\n\r\n        var cosines;\r\n        var solutions = [];\r\n        if (r0 === 0.0 && r1 === 0.0) {\r\n            cosines = QuadraticRealPolynomial.computeRealRoots(l2, l1, l0);\r\n            if (cosines.length === 0) {\r\n                return solutions;\r\n            }\r\n\r\n            var cosine0 = cosines[0];\r\n            var sine0 = Math.sqrt(Math.max(1.0 - cosine0 * cosine0, 0.0));\r\n            solutions.push(new Cartesian3(x, w * cosine0, w * -sine0));\r\n            solutions.push(new Cartesian3(x, w * cosine0, w * sine0));\r\n\r\n            if (cosines.length === 2) {\r\n                var cosine1 = cosines[1];\r\n                var sine1 = Math.sqrt(Math.max(1.0 - cosine1 * cosine1, 0.0));\r\n                solutions.push(new Cartesian3(x, w * cosine1, w * -sine1));\r\n                solutions.push(new Cartesian3(x, w * cosine1, w * sine1));\r\n            }\r\n\r\n            return solutions;\r\n        }\r\n\r\n        var r0Squared = r0 * r0;\r\n        var r1Squared = r1 * r1;\r\n        var l2Squared = l2 * l2;\r\n        var r0r1 = r0 * r1;\r\n\r\n        var c4 = l2Squared + r1Squared;\r\n        var c3 = 2.0 * (l1 * l2 + r0r1);\r\n        var c2 = 2.0 * l0 * l2 + l1 * l1 - r1Squared + r0Squared;\r\n        var c1 = 2.0 * (l0 * l1 - r0r1);\r\n        var c0 = l0 * l0 - r0Squared;\r\n\r\n        if (c4 === 0.0 && c3 === 0.0 && c2 === 0.0 && c1 === 0.0) {\r\n            return solutions;\r\n        }\r\n\r\n        cosines = QuarticRealPolynomial.computeRealRoots(c4, c3, c2, c1, c0);\r\n        var length = cosines.length;\r\n        if (length === 0) {\r\n            return solutions;\r\n        }\r\n\r\n        for ( var i = 0; i < length; ++i) {\r\n            var cosine = cosines[i];\r\n            var cosineSquared = cosine * cosine;\r\n            var sineSquared = Math.max(1.0 - cosineSquared, 0.0);\r\n            var sine = Math.sqrt(sineSquared);\r\n\r\n            //var left = l2 * cosineSquared + l1 * cosine + l0;\r\n            var left;\r\n            if (CesiumMath.sign(l2) === CesiumMath.sign(l0)) {\r\n                left = addWithCancellationCheck(l2 * cosineSquared + l0, l1 * cosine, CesiumMath.EPSILON12);\r\n            } else if (CesiumMath.sign(l0) === CesiumMath.sign(l1 * cosine)) {\r\n                left = addWithCancellationCheck(l2 * cosineSquared, l1 * cosine + l0, CesiumMath.EPSILON12);\r\n            } else {\r\n                left = addWithCancellationCheck(l2 * cosineSquared + l1 * cosine, l0, CesiumMath.EPSILON12);\r\n            }\r\n\r\n            var right = addWithCancellationCheck(r1 * cosine, r0, CesiumMath.EPSILON15);\r\n            var product = left * right;\r\n\r\n            if (product < 0.0) {\r\n                solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n            } else if (product > 0.0) {\r\n                solutions.push(new Cartesian3(x, w * cosine, w * -sine));\r\n            } else if (sine !== 0.0) {\r\n                solutions.push(new Cartesian3(x, w * cosine, w * -sine));\r\n                solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n                ++i;\r\n            } else {\r\n                solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n            }\r\n        }\r\n\r\n        return solutions;\r\n    }\r\n\r\n    var firstAxisScratch = new Cartesian3();\r\n    var secondAxisScratch = new Cartesian3();\r\n    var thirdAxisScratch = new Cartesian3();\r\n    var referenceScratch = new Cartesian3();\r\n    var bCart = new Cartesian3();\r\n    var bScratch = new Matrix3();\r\n    var btScratch = new Matrix3();\r\n    var diScratch = new Matrix3();\r\n    var dScratch = new Matrix3();\r\n    var cScratch = new Matrix3();\r\n    var tempMatrix = new Matrix3();\r\n    var aScratch = new Matrix3();\r\n    var sScratch = new Cartesian3();\r\n    var closestScratch = new Cartesian3();\r\n    var surfPointScratch = new Cartographic();\r\n\r\n    /**\r\n     * Provides the point along the ray which is nearest to the ellipsoid.\r\n     *\r\n     * @param {Ray} ray The ray.\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid.\r\n     * @returns {Cartesian3} The nearest planetodetic point on the ray.\r\n     */\r\n    IntersectionTests.grazingAltitudeLocation = function(ray, ellipsoid) {\r\n        \r\n\r\n        var position = ray.origin;\r\n        var direction = ray.direction;\r\n\r\n        if (!Cartesian3.equals(position, Cartesian3.ZERO)) {\r\n            var normal = ellipsoid.geodeticSurfaceNormal(position, firstAxisScratch);\r\n            if (Cartesian3.dot(direction, normal) >= 0.0) { // The location provided is the closest point in altitude\r\n                return position;\r\n            }\r\n        }\r\n\r\n        var intersects = defined(this.rayEllipsoid(ray, ellipsoid));\r\n\r\n        // Compute the scaled direction vector.\r\n        var f = ellipsoid.transformPositionToScaledSpace(direction, firstAxisScratch);\r\n\r\n        // Constructs a basis from the unit scaled direction vector. Construct its rotation and transpose.\r\n        var firstAxis = Cartesian3.normalize(f, f);\r\n        var reference = Cartesian3.mostOrthogonalAxis(f, referenceScratch);\r\n        var secondAxis = Cartesian3.normalize(Cartesian3.cross(reference, firstAxis, secondAxisScratch), secondAxisScratch);\r\n        var thirdAxis  = Cartesian3.normalize(Cartesian3.cross(firstAxis, secondAxis, thirdAxisScratch), thirdAxisScratch);\r\n        var B = bScratch;\r\n        B[0] = firstAxis.x;\r\n        B[1] = firstAxis.y;\r\n        B[2] = firstAxis.z;\r\n        B[3] = secondAxis.x;\r\n        B[4] = secondAxis.y;\r\n        B[5] = secondAxis.z;\r\n        B[6] = thirdAxis.x;\r\n        B[7] = thirdAxis.y;\r\n        B[8] = thirdAxis.z;\r\n\r\n        var B_T = Matrix3.transpose(B, btScratch);\r\n\r\n        // Get the scaling matrix and its inverse.\r\n        var D_I = Matrix3.fromScale(ellipsoid.radii, diScratch);\r\n        var D = Matrix3.fromScale(ellipsoid.oneOverRadii, dScratch);\r\n\r\n        var C = cScratch;\r\n        C[0] = 0.0;\r\n        C[1] = -direction.z;\r\n        C[2] = direction.y;\r\n        C[3] = direction.z;\r\n        C[4] = 0.0;\r\n        C[5] = -direction.x;\r\n        C[6] = -direction.y;\r\n        C[7] = direction.x;\r\n        C[8] = 0.0;\r\n\r\n        var temp = Matrix3.multiply(Matrix3.multiply(B_T, D, tempMatrix), C, tempMatrix);\r\n        var A = Matrix3.multiply(Matrix3.multiply(temp, D_I, aScratch), B, aScratch);\r\n        var b = Matrix3.multiplyByVector(temp, position, bCart);\r\n\r\n        // Solve for the solutions to the expression in standard form:\r\n        var solutions = quadraticVectorExpression(A, Cartesian3.negate(b, firstAxisScratch), 0.0, 0.0, 1.0);\r\n\r\n        var s;\r\n        var altitude;\r\n        var length = solutions.length;\r\n        if (length > 0) {\r\n            var closest = Cartesian3.clone(Cartesian3.ZERO, closestScratch);\r\n            var maximumValue = Number.NEGATIVE_INFINITY;\r\n\r\n            for ( var i = 0; i < length; ++i) {\r\n                s = Matrix3.multiplyByVector(D_I, Matrix3.multiplyByVector(B, solutions[i], sScratch), sScratch);\r\n                var v = Cartesian3.normalize(Cartesian3.subtract(s, position, referenceScratch), referenceScratch);\r\n                var dotProduct = Cartesian3.dot(v, direction);\r\n\r\n                if (dotProduct > maximumValue) {\r\n                    maximumValue = dotProduct;\r\n                    closest = Cartesian3.clone(s, closest);\r\n                }\r\n            }\r\n\r\n            var surfacePoint = ellipsoid.cartesianToCartographic(closest, surfPointScratch);\r\n            maximumValue = CesiumMath.clamp(maximumValue, 0.0, 1.0);\r\n            altitude = Cartesian3.magnitude(Cartesian3.subtract(closest, position, referenceScratch)) * Math.sqrt(1.0 - maximumValue * maximumValue);\r\n            altitude = intersects ? -altitude : altitude;\r\n            surfacePoint.height = altitude;\r\n            return ellipsoid.cartographicToCartesian(surfacePoint, new Cartesian3());\r\n        }\r\n\r\n        return undefined;\r\n    };\r\n\r\n    var lineSegmentPlaneDifference = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the intersection of a line segment and a plane.\r\n     *\r\n     * @param {Cartesian3} endPoint0 An end point of the line segment.\r\n     * @param {Cartesian3} endPoint1 The other end point of the line segment.\r\n     * @param {Plane} plane The plane.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The intersection point or undefined if there is no intersection.\r\n     *\r\n     * @example\r\n     * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\r\n     * var normal = ellipsoid.geodeticSurfaceNormal(origin);\r\n     * var plane = Cesium.Plane.fromPointNormal(origin, normal);\r\n     *\r\n     * var p0 = new Cesium.Cartesian3(...);\r\n     * var p1 = new Cesium.Cartesian3(...);\r\n     *\r\n     * // find the intersection of the line segment from p0 to p1 and the tangent plane at origin.\r\n     * var intersection = Cesium.IntersectionTests.lineSegmentPlane(p0, p1, plane);\r\n     */\r\n    IntersectionTests.lineSegmentPlane = function(endPoint0, endPoint1, plane, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var difference = Cartesian3.subtract(endPoint1, endPoint0, lineSegmentPlaneDifference);\r\n        var normal = plane.normal;\r\n        var nDotDiff = Cartesian3.dot(normal, difference);\r\n\r\n        // check if the segment and plane are parallel\r\n        if (Math.abs(nDotDiff) < CesiumMath.EPSILON6) {\r\n            return undefined;\r\n        }\r\n\r\n        var nDotP0 = Cartesian3.dot(normal, endPoint0);\r\n        var t = -(plane.distance + nDotP0) / nDotDiff;\r\n\r\n        // intersection only if t is in [0, 1]\r\n        if (t < 0.0 || t > 1.0) {\r\n            return undefined;\r\n        }\r\n\r\n        // intersection is endPoint0 + t * (endPoint1 - endPoint0)\r\n        Cartesian3.multiplyByScalar(difference, t, result);\r\n        Cartesian3.add(endPoint0, result, result);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the intersection of a triangle and a plane\r\n     *\r\n     * @param {Cartesian3} p0 First point of the triangle\r\n     * @param {Cartesian3} p1 Second point of the triangle\r\n     * @param {Cartesian3} p2 Third point of the triangle\r\n     * @param {Plane} plane Intersection plane\r\n     * @returns {Object} An object with properties <code>positions</code> and <code>indices</code>, which are arrays that represent three triangles that do not cross the plane. (Undefined if no intersection exists)\r\n     *\r\n     * @example\r\n     * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\r\n     * var normal = ellipsoid.geodeticSurfaceNormal(origin);\r\n     * var plane = Cesium.Plane.fromPointNormal(origin, normal);\r\n     *\r\n     * var p0 = new Cesium.Cartesian3(...);\r\n     * var p1 = new Cesium.Cartesian3(...);\r\n     * var p2 = new Cesium.Cartesian3(...);\r\n     *\r\n     * // convert the triangle composed of points (p0, p1, p2) to three triangles that don't cross the plane\r\n     * var triangles = Cesium.IntersectionTests.trianglePlaneIntersection(p0, p1, p2, plane);\r\n     */\r\n    IntersectionTests.trianglePlaneIntersection = function(p0, p1, p2, plane) {\r\n        \r\n\r\n        var planeNormal = plane.normal;\r\n        var planeD = plane.distance;\r\n        var p0Behind = (Cartesian3.dot(planeNormal, p0) + planeD) < 0.0;\r\n        var p1Behind = (Cartesian3.dot(planeNormal, p1) + planeD) < 0.0;\r\n        var p2Behind = (Cartesian3.dot(planeNormal, p2) + planeD) < 0.0;\r\n        // Given these dots products, the calls to lineSegmentPlaneIntersection\r\n        // always have defined results.\r\n\r\n        var numBehind = 0;\r\n        numBehind += p0Behind ? 1 : 0;\r\n        numBehind += p1Behind ? 1 : 0;\r\n        numBehind += p2Behind ? 1 : 0;\r\n\r\n        var u1, u2;\r\n        if (numBehind === 1 || numBehind === 2) {\r\n            u1 = new Cartesian3();\r\n            u2 = new Cartesian3();\r\n        }\r\n\r\n        if (numBehind === 1) {\r\n            if (p0Behind) {\r\n                IntersectionTests.lineSegmentPlane(p0, p1, plane, u1);\r\n                IntersectionTests.lineSegmentPlane(p0, p2, plane, u2);\r\n\r\n                return {\r\n                    positions : [p0, p1, p2, u1, u2 ],\r\n                    indices : [\r\n                        // Behind\r\n                        0, 3, 4,\r\n\r\n                        // In front\r\n                        1, 2, 4,\r\n                        1, 4, 3\r\n                    ]\r\n                };\r\n            } else if (p1Behind) {\r\n                IntersectionTests.lineSegmentPlane(p1, p2, plane, u1);\r\n                IntersectionTests.lineSegmentPlane(p1, p0, plane, u2);\r\n\r\n                return {\r\n                    positions : [p0, p1, p2, u1, u2 ],\r\n                    indices : [\r\n                        // Behind\r\n                        1, 3, 4,\r\n\r\n                        // In front\r\n                        2, 0, 4,\r\n                        2, 4, 3\r\n                    ]\r\n                };\r\n            } else if (p2Behind) {\r\n                IntersectionTests.lineSegmentPlane(p2, p0, plane, u1);\r\n                IntersectionTests.lineSegmentPlane(p2, p1, plane, u2);\r\n\r\n                return {\r\n                    positions : [p0, p1, p2, u1, u2 ],\r\n                    indices : [\r\n                        // Behind\r\n                        2, 3, 4,\r\n\r\n                        // In front\r\n                        0, 1, 4,\r\n                        0, 4, 3\r\n                    ]\r\n                };\r\n            }\r\n        } else if (numBehind === 2) {\r\n            if (!p0Behind) {\r\n                IntersectionTests.lineSegmentPlane(p1, p0, plane, u1);\r\n                IntersectionTests.lineSegmentPlane(p2, p0, plane, u2);\r\n\r\n                return {\r\n                    positions : [p0, p1, p2, u1, u2 ],\r\n                    indices : [\r\n                        // Behind\r\n                        1, 2, 4,\r\n                        1, 4, 3,\r\n\r\n                        // In front\r\n                        0, 3, 4\r\n                    ]\r\n                };\r\n            } else if (!p1Behind) {\r\n                IntersectionTests.lineSegmentPlane(p2, p1, plane, u1);\r\n                IntersectionTests.lineSegmentPlane(p0, p1, plane, u2);\r\n\r\n                return {\r\n                    positions : [p0, p1, p2, u1, u2 ],\r\n                    indices : [\r\n                        // Behind\r\n                        2, 0, 4,\r\n                        2, 4, 3,\r\n\r\n                        // In front\r\n                        1, 3, 4\r\n                    ]\r\n                };\r\n            } else if (!p2Behind) {\r\n                IntersectionTests.lineSegmentPlane(p0, p2, plane, u1);\r\n                IntersectionTests.lineSegmentPlane(p1, p2, plane, u2);\r\n\r\n                return {\r\n                    positions : [p0, p1, p2, u1, u2 ],\r\n                    indices : [\r\n                        // Behind\r\n                        0, 1, 4,\r\n                        0, 4, 3,\r\n\r\n                        // In front\r\n                        2, 3, 4\r\n                    ]\r\n                };\r\n            }\r\n        }\r\n\r\n        // if numBehind is 3, the triangle is completely behind the plane;\r\n        // otherwise, it is completely in front (numBehind is 0).\r\n        return undefined;\r\n    };\r\n\r\n    return IntersectionTests;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/IntersectionTests.js\n// module id = 51\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Math'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartographic,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The map projection used by Google Maps, Bing Maps, and most of ArcGIS Online, EPSG:3857.  This\r\n     * projection use longitude and latitude expressed with the WGS84 and transforms them to Mercator using\r\n     * the spherical (rather than ellipsoidal) equations.\r\n     *\r\n     * @alias WebMercatorProjection\r\n     * @constructor\r\n     *\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\r\n     *\r\n     * @see GeographicProjection\r\n     */\r\n    function WebMercatorProjection(ellipsoid) {\r\n        this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        this._semimajorAxis = this._ellipsoid.maximumRadius;\r\n        this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\r\n    }\r\n\r\n    defineProperties(WebMercatorProjection.prototype, {\r\n        /**\r\n         * Gets the {@link Ellipsoid}.\r\n         *\r\n         * @memberof WebMercatorProjection.prototype\r\n         *\r\n         * @type {Ellipsoid}\r\n         * @readonly\r\n         */\r\n        ellipsoid : {\r\n            get : function() {\r\n                return this._ellipsoid;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Converts a Mercator angle, in the range -PI to PI, to a geodetic latitude\r\n     * in the range -PI/2 to PI/2.\r\n     *\r\n     * @param {Number} mercatorAngle The angle to convert.\r\n     * @returns {Number} The geodetic latitude in radians.\r\n     */\r\n    WebMercatorProjection.mercatorAngleToGeodeticLatitude = function(mercatorAngle) {\r\n        return CesiumMath.PI_OVER_TWO - (2.0 * Math.atan(Math.exp(-mercatorAngle)));\r\n    };\r\n\r\n    /**\r\n     * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator\r\n     * angle in the range -PI to PI.\r\n     *\r\n     * @param {Number} latitude The geodetic latitude in radians.\r\n     * @returns {Number} The Mercator angle.\r\n     */\r\n    WebMercatorProjection.geodeticLatitudeToMercatorAngle = function(latitude) {\r\n        // Clamp the latitude coordinate to the valid Mercator bounds.\r\n        if (latitude > WebMercatorProjection.MaximumLatitude) {\r\n            latitude = WebMercatorProjection.MaximumLatitude;\r\n        } else if (latitude < -WebMercatorProjection.MaximumLatitude) {\r\n            latitude = -WebMercatorProjection.MaximumLatitude;\r\n        }\r\n        var sinLatitude = Math.sin(latitude);\r\n        return 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\r\n    };\r\n\r\n    /**\r\n     * The maximum latitude (both North and South) supported by a Web Mercator\r\n     * (EPSG:3857) projection.  Technically, the Mercator projection is defined\r\n     * for any latitude up to (but not including) 90 degrees, but it makes sense\r\n     * to cut it off sooner because it grows exponentially with increasing latitude.\r\n     * The logic behind this particular cutoff value, which is the one used by\r\n     * Google Maps, Bing Maps, and Esri, is that it makes the projection\r\n     * square.  That is, the rectangle is equal in the X and Y directions.\r\n     *\r\n     * The constant value is computed by calling:\r\n     *    WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI)\r\n     *\r\n     * @type {Number}\r\n     */\r\n    WebMercatorProjection.MaximumLatitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI);\r\n\r\n    /**\r\n     * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator\r\n     * X, Y, Z coordinates expressed in meters and returned in a {@link Cartesian3}.  The height\r\n     * is copied unmodified to the Z coordinate.\r\n     *\r\n     * @param {Cartographic} cartographic The cartographic coordinates in radians.\r\n     * @param {Cartesian3} [result] The instance to which to copy the result, or undefined if a\r\n     *        new instance should be created.\r\n     * @returns {Cartesian3} The equivalent web mercator X, Y, Z coordinates, in meters.\r\n     */\r\n    WebMercatorProjection.prototype.project = function(cartographic, result) {\r\n        var semimajorAxis = this._semimajorAxis;\r\n        var x = cartographic.longitude * semimajorAxis;\r\n        var y = WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographic.latitude) * semimajorAxis;\r\n        var z = cartographic.height;\r\n\r\n        if (!defined(result)) {\r\n            return new Cartesian3(x, y, z);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts Web Mercator X, Y coordinates, expressed in meters, to a {@link Cartographic}\r\n     * containing geodetic ellipsoid coordinates.  The Z coordinate is copied unmodified to the\r\n     * height.\r\n     *\r\n     * @param {Cartesian3} cartesian The web mercator Cartesian position to unrproject with height (z) in meters.\r\n     * @param {Cartographic} [result] The instance to which to copy the result, or undefined if a\r\n     *        new instance should be created.\r\n     * @returns {Cartographic} The equivalent cartographic coordinates.\r\n     */\r\n    WebMercatorProjection.prototype.unproject = function(cartesian, result) {\r\n        \r\n\r\n        var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\r\n        var longitude = cartesian.x * oneOverEarthSemimajorAxis;\r\n        var latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(cartesian.y * oneOverEarthSemimajorAxis);\r\n        var height = cartesian.z;\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude, height);\r\n        }\r\n\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = height;\r\n        return result;\r\n    };\r\n\r\n    return WebMercatorProjection;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/WebMercatorProjection.js\n// module id = 52\n// module chunks = 0","define([\r\n        './AxisAlignedBoundingBox',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './IntersectionTests',\r\n        './Matrix4',\r\n        './Plane',\r\n        './Ray',\r\n        './Transforms'\r\n    ], function(\r\n        AxisAlignedBoundingBox,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartesian4,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        IntersectionTests,\r\n        Matrix4,\r\n        Plane,\r\n        Ray,\r\n        Transforms) {\r\n    'use strict';\r\n\r\n    var scratchCart4 = new Cartesian4();\r\n    /**\r\n     * A plane tangent to the provided ellipsoid at the provided origin.\r\n     * If origin is not on the surface of the ellipsoid, it's surface projection will be used.\r\n     * If origin is at the center of the ellipsoid, an exception will be thrown.\r\n     * @alias EllipsoidTangentPlane\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} origin The point on the surface of the ellipsoid where the tangent plane touches.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n     *\r\n     * @exception {DeveloperError} origin must not be at the center of the ellipsoid.\r\n     */\r\n    function EllipsoidTangentPlane(origin, ellipsoid) {\r\n        \r\n\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        origin = ellipsoid.scaleToGeodeticSurface(origin);\r\n\r\n        \r\n\r\n        var eastNorthUp = Transforms.eastNorthUpToFixedFrame(origin, ellipsoid);\r\n        this._ellipsoid = ellipsoid;\r\n        this._origin = origin;\r\n        this._xAxis = Cartesian3.fromCartesian4(Matrix4.getColumn(eastNorthUp, 0, scratchCart4));\r\n        this._yAxis = Cartesian3.fromCartesian4(Matrix4.getColumn(eastNorthUp, 1, scratchCart4));\r\n\r\n        var normal = Cartesian3.fromCartesian4(Matrix4.getColumn(eastNorthUp, 2, scratchCart4));\r\n        this._plane = Plane.fromPointNormal(origin, normal);\r\n    }\r\n\r\n    defineProperties(EllipsoidTangentPlane.prototype, {\r\n        /**\r\n         * Gets the ellipsoid.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @type {Ellipsoid}\r\n         */\r\n        ellipsoid : {\r\n            get : function() {\r\n                return this._ellipsoid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the origin.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @type {Cartesian3}\r\n         */\r\n        origin : {\r\n            get : function() {\r\n                return this._origin;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the plane which is tangent to the ellipsoid.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @readonly\r\n         * @type {Plane}\r\n         */\r\n        plane : {\r\n            get : function() {\r\n                return this._plane;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the local X-axis (east) of the tangent plane.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @readonly\r\n         * @type {Cartesian3}\r\n         */\r\n        xAxis : {\r\n            get : function() {\r\n                return this._xAxis;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the local Y-axis (north) of the tangent plane.\r\n         * @memberof EllipsoidTangentPlane.prototype\r\n         * @readonly\r\n         * @type {Cartesian3}\r\n         */\r\n        yAxis : {\r\n            get : function() {\r\n                return this._yAxis;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the local Z-axis (up) of the tangent plane.\r\n         * @member EllipsoidTangentPlane.prototype\r\n         * @readonly\r\n         * @type {Cartesian3}\r\n         */\r\n        zAxis : {\r\n            get : function() {\r\n                return this._plane.normal;\r\n            }\r\n        }\r\n    });\r\n\r\n    var tmp = new AxisAlignedBoundingBox();\r\n    /**\r\n     * Creates a new instance from the provided ellipsoid and the center\r\n     * point of the provided Cartesians.\r\n     *\r\n     * @param {Cartesian3} cartesians The list of positions surrounding the center point.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n     */\r\n    EllipsoidTangentPlane.fromPoints = function(cartesians, ellipsoid) {\r\n        \r\n\r\n        var box = AxisAlignedBoundingBox.fromPoints(cartesians, tmp);\r\n        return new EllipsoidTangentPlane(box.center, ellipsoid);\r\n    };\r\n\r\n    var scratchProjectPointOntoPlaneRay = new Ray();\r\n    var scratchProjectPointOntoPlaneCartesian3 = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the projection of the provided 3D position onto the 2D plane, radially outward from the {@link EllipsoidTangentPlane.ellipsoid} coordinate system origin.\r\n     *\r\n     * @param {Cartesian3} cartesian The point to project.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided. Undefined if there is no intersection point\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointOntoPlane = function(cartesian, result) {\r\n        \r\n\r\n        var ray = scratchProjectPointOntoPlaneRay;\r\n        ray.origin = cartesian;\r\n        Cartesian3.normalize(cartesian, ray.direction);\r\n\r\n        var intersectionPoint = IntersectionTests.rayPlane(ray, this._plane, scratchProjectPointOntoPlaneCartesian3);\r\n        if (!defined(intersectionPoint)) {\r\n            Cartesian3.negate(ray.direction, ray.direction);\r\n            intersectionPoint = IntersectionTests.rayPlane(ray, this._plane, scratchProjectPointOntoPlaneCartesian3);\r\n        }\r\n\r\n        if (defined(intersectionPoint)) {\r\n            var v = Cartesian3.subtract(intersectionPoint, this._origin, intersectionPoint);\r\n            var x = Cartesian3.dot(this._xAxis, v);\r\n            var y = Cartesian3.dot(this._yAxis, v);\r\n\r\n            if (!defined(result)) {\r\n                return new Cartesian2(x, y);\r\n            }\r\n            result.x = x;\r\n            result.y = y;\r\n            return result;\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Computes the projection of the provided 3D positions onto the 2D plane (where possible), radially outward from the global origin.\r\n     * The resulting array may be shorter than the input array - if a single projection is impossible it will not be included.\r\n     *\r\n     * @see EllipsoidTangentPlane.projectPointOntoPlane\r\n     *\r\n     * @param {Cartesian3[]} cartesians The array of points to project.\r\n     * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\r\n     * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointsOntoPlane = function(cartesians, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n\r\n        var count = 0;\r\n        var length = cartesians.length;\r\n        for ( var i = 0; i < length; i++) {\r\n            var p = this.projectPointOntoPlane(cartesians[i], result[count]);\r\n            if (defined(p)) {\r\n                result[count] = p;\r\n                count++;\r\n            }\r\n        }\r\n        result.length = count;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the projection of the provided 3D position onto the 2D plane, along the plane normal.\r\n     *\r\n     * @param {Cartesian3} cartesian The point to project.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointToNearestOnPlane = function(cartesian, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian2();\r\n        }\r\n\r\n        var ray = scratchProjectPointOntoPlaneRay;\r\n        ray.origin = cartesian;\r\n        Cartesian3.clone(this._plane.normal, ray.direction);\r\n\r\n        var intersectionPoint = IntersectionTests.rayPlane(ray, this._plane, scratchProjectPointOntoPlaneCartesian3);\r\n        if (!defined(intersectionPoint)) {\r\n            Cartesian3.negate(ray.direction, ray.direction);\r\n            intersectionPoint = IntersectionTests.rayPlane(ray, this._plane, scratchProjectPointOntoPlaneCartesian3);\r\n        }\r\n\r\n        var v = Cartesian3.subtract(intersectionPoint, this._origin, intersectionPoint);\r\n        var x = Cartesian3.dot(this._xAxis, v);\r\n        var y = Cartesian3.dot(this._yAxis, v);\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the projection of the provided 3D positions onto the 2D plane, along the plane normal.\r\n     *\r\n     * @see EllipsoidTangentPlane.projectPointToNearestOnPlane\r\n     *\r\n     * @param {Cartesian3[]} cartesians The array of points to project.\r\n     * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\r\n     * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided. This will have the same length as <code>cartesians</code>.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointsToNearestOnPlane = function(cartesians, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n\r\n        var length = cartesians.length;\r\n        result.length = length;\r\n        for (var i = 0; i < length; i++) {\r\n            result[i] = this.projectPointToNearestOnPlane(cartesians[i], result[i]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    var projectPointsOntoEllipsoidScratch = new Cartesian3();\r\n    /**\r\n     * Computes the projection of the provided 2D position onto the 3D ellipsoid.\r\n     *\r\n     * @param {Cartesian2} cartesian The points to project.\r\n     * @param {Cartesian3} [result] The Cartesian3 instance to store result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointOntoEllipsoid = function(cartesian, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var ellipsoid = this._ellipsoid;\r\n        var origin = this._origin;\r\n        var xAxis = this._xAxis;\r\n        var yAxis = this._yAxis;\r\n        var tmp = projectPointsOntoEllipsoidScratch;\r\n\r\n        Cartesian3.multiplyByScalar(xAxis, cartesian.x, tmp);\r\n        result = Cartesian3.add(origin, tmp, result);\r\n        Cartesian3.multiplyByScalar(yAxis, cartesian.y, tmp);\r\n        Cartesian3.add(result, tmp, result);\r\n        ellipsoid.scaleToGeocentricSurface(result, result);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the projection of the provided 2D positions onto the 3D ellipsoid.\r\n     *\r\n     * @param {Cartesian2[]} cartesians The array of points to project.\r\n     * @param {Cartesian3[]} [result] The array of Cartesian3 instances onto which to store results.\r\n     * @returns {Cartesian3[]} The modified result parameter or a new array of Cartesian3 instances if none was provided.\r\n     */\r\n    EllipsoidTangentPlane.prototype.projectPointsOntoEllipsoid = function(cartesians, result) {\r\n        \r\n\r\n        var length = cartesians.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length);\r\n        } else {\r\n            result.length = length;\r\n        }\r\n\r\n        for ( var i = 0; i < length; ++i) {\r\n            result[i] = this.projectPointOntoEllipsoid(cartesians[i], result[i]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    return EllipsoidTangentPlane;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EllipsoidTangentPlane.js\n// module id = 53\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './EllipsoidGeodesic',\r\n        './IntersectionTests',\r\n        './isArray',\r\n        './Math',\r\n        './Matrix4',\r\n        './Plane'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartographic,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        EllipsoidGeodesic,\r\n        IntersectionTests,\r\n        isArray,\r\n        CesiumMath,\r\n        Matrix4,\r\n        Plane) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PolylinePipeline = {};\r\n\r\n    PolylinePipeline.numberOfPoints = function(p0, p1, minDistance) {\r\n        var distance = Cartesian3.distance(p0, p1);\r\n        return Math.ceil(distance / minDistance);\r\n    };\r\n\r\n    var cartoScratch = new Cartographic();\r\n    PolylinePipeline.extractHeights = function(positions, ellipsoid) {\r\n        var length = positions.length;\r\n        var heights = new Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            var p = positions[i];\r\n            heights[i] = ellipsoid.cartesianToCartographic(p, cartoScratch).height;\r\n        }\r\n        return heights;\r\n    };\r\n\r\n    var wrapLongitudeInversMatrix = new Matrix4();\r\n    var wrapLongitudeOrigin = new Cartesian3();\r\n    var wrapLongitudeXZNormal = new Cartesian3();\r\n    var wrapLongitudeXZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\r\n    var wrapLongitudeYZNormal = new Cartesian3();\r\n    var wrapLongitudeYZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\r\n    var wrapLongitudeIntersection = new Cartesian3();\r\n    var wrapLongitudeOffset = new Cartesian3();\r\n\r\n    var subdivideHeightsScratchArray = [];\r\n\r\n    function subdivideHeights(numPoints, h0, h1) {\r\n        var heights = subdivideHeightsScratchArray;\r\n        heights.length = numPoints;\r\n\r\n        var i;\r\n        if (h0 === h1) {\r\n            for (i = 0; i < numPoints; i++) {\r\n                heights[i] = h0;\r\n            }\r\n            return heights;\r\n        }\r\n\r\n        var dHeight = h1 - h0;\r\n        var heightPerVertex = dHeight / numPoints;\r\n\r\n        for (i = 0; i < numPoints; i++) {\r\n            var h = h0 + i*heightPerVertex;\r\n            heights[i] = h;\r\n        }\r\n\r\n        return heights;\r\n    }\r\n\r\n    var carto1 = new Cartographic();\r\n    var carto2 = new Cartographic();\r\n    var cartesian = new Cartesian3();\r\n    var scaleFirst = new Cartesian3();\r\n    var scaleLast = new Cartesian3();\r\n    var ellipsoidGeodesic = new EllipsoidGeodesic();\r\n\r\n    //Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\r\n    //Result includes p1, but not include p2.  This function is called for a sequence of line segments,\r\n    //and this prevents duplication of end point.\r\n    function generateCartesianArc(p0, p1, minDistance, ellipsoid, h0, h1, array, offset) {\r\n        var first = ellipsoid.scaleToGeodeticSurface(p0, scaleFirst);\r\n        var last = ellipsoid.scaleToGeodeticSurface(p1, scaleLast);\r\n        var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\r\n        var start = ellipsoid.cartesianToCartographic(first, carto1);\r\n        var end = ellipsoid.cartesianToCartographic(last, carto2);\r\n        var heights = subdivideHeights(numPoints, h0, h1);\r\n\r\n        ellipsoidGeodesic.setEndPoints(start, end);\r\n        var surfaceDistanceBetweenPoints = ellipsoidGeodesic.surfaceDistance / numPoints;\r\n\r\n        var index = offset;\r\n        start.height = h0;\r\n        var cart = ellipsoid.cartographicToCartesian(start, cartesian);\r\n        Cartesian3.pack(cart, array, index);\r\n        index += 3;\r\n\r\n        for (var i = 1; i < numPoints; i++) {\r\n            var carto = ellipsoidGeodesic.interpolateUsingSurfaceDistance(i * surfaceDistanceBetweenPoints, carto2);\r\n            carto.height = heights[i];\r\n            cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n            Cartesian3.pack(cart, array, index);\r\n            index += 3;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Breaks a {@link Polyline} into segments such that it does not cross the &plusmn;180 degree meridian of an ellipsoid.\r\n     *\r\n     * @param {Cartesian3[]} positions The polyline's Cartesian positions.\r\n     * @param {Matrix4} [modelMatrix=Matrix4.IDENTITY] The polyline's model matrix. Assumed to be an affine\r\n     * transformation matrix, where the upper left 3x3 elements are a rotation matrix, and\r\n     * the upper three elements in the fourth column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n     * The matrix is not verified to be in the proper form.\r\n     * @returns {Object} An object with a <code>positions</code> property that is an array of positions and a\r\n     * <code>segments</code> property.\r\n     *\r\n     *\r\n     * @example\r\n     * var polylines = new Cesium.PolylineCollection();\r\n     * var polyline = polylines.add(...);\r\n     * var positions = polyline.positions;\r\n     * var modelMatrix = polylines.modelMatrix;\r\n     * var segments = Cesium.PolylinePipeline.wrapLongitude(positions, modelMatrix);\r\n     *\r\n     * @see PolygonPipeline.wrapLongitude\r\n     * @see Polyline\r\n     * @see PolylineCollection\r\n     */\r\n    PolylinePipeline.wrapLongitude = function(positions, modelMatrix) {\r\n        var cartesians = [];\r\n        var segments = [];\r\n\r\n        if (defined(positions) && positions.length > 0) {\r\n            modelMatrix = defaultValue(modelMatrix, Matrix4.IDENTITY);\r\n            var inverseModelMatrix = Matrix4.inverseTransformation(modelMatrix, wrapLongitudeInversMatrix);\r\n\r\n            var origin = Matrix4.multiplyByPoint(inverseModelMatrix, Cartesian3.ZERO, wrapLongitudeOrigin);\r\n            var xzNormal = Cartesian3.normalize(Matrix4.multiplyByPointAsVector(inverseModelMatrix, Cartesian3.UNIT_Y, wrapLongitudeXZNormal), wrapLongitudeXZNormal);\r\n            var xzPlane = Plane.fromPointNormal(origin, xzNormal, wrapLongitudeXZPlane);\r\n            var yzNormal = Cartesian3.normalize(Matrix4.multiplyByPointAsVector(inverseModelMatrix, Cartesian3.UNIT_X, wrapLongitudeYZNormal), wrapLongitudeYZNormal);\r\n            var yzPlane = Plane.fromPointNormal(origin, yzNormal, wrapLongitudeYZPlane);\r\n\r\n            var count = 1;\r\n            cartesians.push(Cartesian3.clone(positions[0]));\r\n            var prev = cartesians[0];\r\n\r\n            var length = positions.length;\r\n            for (var i = 1; i < length; ++i) {\r\n                var cur = positions[i];\r\n\r\n                // intersects the IDL if either endpoint is on the negative side of the yz-plane\r\n                if (Plane.getPointDistance(yzPlane, prev) < 0.0 || Plane.getPointDistance(yzPlane, cur) < 0.0) {\r\n                    // and intersects the xz-plane\r\n                    var intersection = IntersectionTests.lineSegmentPlane(prev, cur, xzPlane, wrapLongitudeIntersection);\r\n                    if (defined(intersection)) {\r\n                        // move point on the xz-plane slightly away from the plane\r\n                        var offset = Cartesian3.multiplyByScalar(xzNormal, 5.0e-9, wrapLongitudeOffset);\r\n                        if (Plane.getPointDistance(xzPlane, prev) < 0.0) {\r\n                            Cartesian3.negate(offset, offset);\r\n                        }\r\n\r\n                        cartesians.push(Cartesian3.add(intersection, offset, new Cartesian3()));\r\n                        segments.push(count + 1);\r\n\r\n                        Cartesian3.negate(offset, offset);\r\n                        cartesians.push(Cartesian3.add(intersection, offset, new Cartesian3()));\r\n                        count = 1;\r\n                    }\r\n                }\r\n\r\n                cartesians.push(Cartesian3.clone(positions[i]));\r\n                count++;\r\n\r\n                prev = cur;\r\n            }\r\n\r\n            segments.push(count);\r\n        }\r\n\r\n        return {\r\n            positions : cartesians,\r\n            lengths : segments\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Subdivides polyline and raises all points to the specified height.  Returns an array of numbers to represent the positions.\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n     * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n     *   -105.0, 40.0,\r\n     *   -100.0, 38.0,\r\n     *   -105.0, 35.0,\r\n     *   -100.0, 32.0\r\n     * ]);\r\n     * var surfacePositions = Cesium.PolylinePipeline.generateArc({\r\n     *   positons: positions\r\n     * });\r\n     */\r\n    PolylinePipeline.generateArc = function(options) {\r\n        if (!defined(options)) {\r\n            options = {};\r\n        }\r\n        var positions = options.positions;\r\n        \r\n\r\n        var length = positions.length;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var height = defaultValue(options.height, 0);\r\n        var hasHeightArray = isArray(height);\r\n\r\n        if (length < 1) {\r\n            return [];\r\n        } else if (length === 1) {\r\n            var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\r\n            height = hasHeightArray ? height[0] : height;\r\n            if (height !== 0) {\r\n                var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\r\n                Cartesian3.multiplyByScalar(n, height, n);\r\n                Cartesian3.add(p, n, p);\r\n            }\r\n\r\n            return [p.x, p.y, p.z];\r\n        }\r\n\r\n        var minDistance = options.minDistance;\r\n        if (!defined(minDistance)) {\r\n            var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n            minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n        }\r\n\r\n        var numPoints = 0;\r\n        var i;\r\n\r\n        for (i = 0; i < length -1; i++) {\r\n            numPoints += PolylinePipeline.numberOfPoints(positions[i], positions[i+1], minDistance);\r\n        }\r\n\r\n        var arrayLength = (numPoints + 1) * 3;\r\n        var newPositions = new Array(arrayLength);\r\n        var offset = 0;\r\n\r\n        for (i = 0; i < length - 1; i++) {\r\n            var p0 = positions[i];\r\n            var p1 = positions[i + 1];\r\n\r\n            var h0 = hasHeightArray ? height[i] : height;\r\n            var h1 = hasHeightArray ? height[i + 1] : height;\r\n\r\n            offset = generateCartesianArc(p0, p1, minDistance, ellipsoid, h0, h1, newPositions, offset);\r\n        }\r\n\r\n        subdivideHeightsScratchArray.length = 0;\r\n\r\n        var lastPoint = positions[length - 1];\r\n        var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\r\n        carto.height = hasHeightArray ? height[length - 1] : height;\r\n        var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n        Cartesian3.pack(cart, newPositions, arrayLength - 3);\r\n\r\n        return newPositions;\r\n    };\r\n\r\n    /**\r\n     * Subdivides polyline and raises all points to the specified height. Returns an array of new {Cartesian3} positions.\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n     * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n     *   -105.0, 40.0,\r\n     *   -100.0, 38.0,\r\n     *   -105.0, 35.0,\r\n     *   -100.0, 32.0\r\n     * ]);\r\n     * var surfacePositions = Cesium.PolylinePipeline.generateCartesianArc({\r\n     *   positons: positions\r\n     * });\r\n     */\r\n    PolylinePipeline.generateCartesianArc = function(options) {\r\n        var numberArray = PolylinePipeline.generateArc(options);\r\n        var size = numberArray.length/3;\r\n        var newPositions = new Array(size);\r\n        for (var i = 0; i < size; i++) {\r\n            newPositions[i] = Cartesian3.unpack(numberArray, i*3);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    return PolylinePipeline;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolylinePipeline.js\n// module id = 54\n// module chunks = 0","define([\r\n        './Cartesian2',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './freezeObject'\r\n    ], function(\r\n        Cartesian2,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A 2x2 matrix, indexable as a column-major order array.\r\n     * Constructor parameters are in row-major order for code readability.\r\n     * @alias Matrix2\r\n     * @constructor\r\n     *\r\n     * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\r\n     * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\r\n     * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\r\n     * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\r\n     *\r\n     * @see Matrix2.fromColumnMajorArray\r\n     * @see Matrix2.fromRowMajorArray\r\n     * @see Matrix2.fromScale\r\n     * @see Matrix2.fromUniformScale\r\n     * @see Matrix3\r\n     * @see Matrix4\r\n     */\r\n    function Matrix2(column0Row0, column1Row0, column0Row1, column1Row1) {\r\n        this[0] = defaultValue(column0Row0, 0.0);\r\n        this[1] = defaultValue(column0Row1, 0.0);\r\n        this[2] = defaultValue(column1Row0, 0.0);\r\n        this[3] = defaultValue(column1Row1, 0.0);\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Matrix2.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Matrix2} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Matrix2.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value[0];\r\n        array[startingIndex++] = value[1];\r\n        array[startingIndex++] = value[2];\r\n        array[startingIndex++] = value[3];\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Matrix2} [result] The object into which to store the result.\r\n     * @returns {Matrix2} The modified result parameter or a new Matrix2 instance if one was not provided.\r\n     */\r\n    Matrix2.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix2();\r\n        }\r\n\r\n        result[0] = array[startingIndex++];\r\n        result[1] = array[startingIndex++];\r\n        result[2] = array[startingIndex++];\r\n        result[3] = array[startingIndex++];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Matrix2 instance.\r\n     *\r\n     * @param {Matrix2} matrix The matrix to duplicate.\r\n     * @param {Matrix2} [result] The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter or a new Matrix2 instance if one was not provided. (Returns undefined if matrix is undefined)\r\n     */\r\n    Matrix2.clone = function(matrix, result) {\r\n        if (!defined(matrix)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Matrix2(matrix[0], matrix[2],\r\n                               matrix[1], matrix[3]);\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix2 from 4 consecutive elements in an array.\r\n     *\r\n     * @param {Number[]} array The array whose 4 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\r\n     * @param {Matrix2} [result] The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter or a new Matrix2 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create the Matrix2:\r\n     * // [1.0, 2.0]\r\n     * // [1.0, 2.0]\r\n     *\r\n     * var v = [1.0, 1.0, 2.0, 2.0];\r\n     * var m = Cesium.Matrix2.fromArray(v);\r\n     *\r\n     * // Create same Matrix2 with using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 1.0, 2.0, 2.0];\r\n     * var m2 = Cesium.Matrix2.fromArray(v2, 2);\r\n     */\r\n    Matrix2.fromArray = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix2();\r\n        }\r\n\r\n        result[0] = array[startingIndex];\r\n        result[1] = array[startingIndex + 1];\r\n        result[2] = array[startingIndex + 2];\r\n        result[3] = array[startingIndex + 3];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix2 instance from a column-major order array.\r\n     *\r\n     * @param {Number[]} values The column-major order array.\r\n     * @param {Matrix2} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix2} The modified result parameter, or a new Matrix2 instance if one was not provided.\r\n     */\r\n    Matrix2.fromColumnMajorArray = function(values, result) {\r\n        \r\n\r\n        return Matrix2.clone(values, result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix2 instance from a row-major order array.\r\n     * The resulting matrix will be in column-major order.\r\n     *\r\n     * @param {Number[]} values The row-major order array.\r\n     * @param {Matrix2} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix2} The modified result parameter, or a new Matrix2 instance if one was not provided.\r\n     */\r\n    Matrix2.fromRowMajorArray = function(values, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix2(values[0], values[1],\r\n                               values[2], values[3]);\r\n        }\r\n        result[0] = values[0];\r\n        result[1] = values[2];\r\n        result[2] = values[1];\r\n        result[3] = values[3];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix2 instance representing a non-uniform scale.\r\n     *\r\n     * @param {Cartesian2} scale The x and y scale factors.\r\n     * @param {Matrix2} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix2} The modified result parameter, or a new Matrix2 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [7.0, 0.0]\r\n     * //   [0.0, 8.0]\r\n     * var m = Cesium.Matrix2.fromScale(new Cesium.Cartesian2(7.0, 8.0));\r\n     */\r\n    Matrix2.fromScale = function(scale, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix2(\r\n                scale.x, 0.0,\r\n                0.0,     scale.y);\r\n        }\r\n\r\n        result[0] = scale.x;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = scale.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix2 instance representing a uniform scale.\r\n     *\r\n     * @param {Number} scale The uniform scale factor.\r\n     * @param {Matrix2} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix2} The modified result parameter, or a new Matrix2 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [2.0, 0.0]\r\n     * //   [0.0, 2.0]\r\n     * var m = Cesium.Matrix2.fromUniformScale(2.0);\r\n     */\r\n    Matrix2.fromUniformScale = function(scale, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Matrix2(\r\n                scale, 0.0,\r\n                0.0,   scale);\r\n        }\r\n\r\n        result[0] = scale;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = scale;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix2} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix2} The modified result parameter, or a new Matrix2 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise.\r\n     * var p = new Cesium.Cartesian2(5, 6);\r\n     * var m = Cesium.Matrix2.fromRotation(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix2.multiplyByVector(m, p, new Cesium.Cartesian2());\r\n     */\r\n    Matrix2.fromRotation = function(angle, result) {\r\n        \r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix2(\r\n                cosAngle, -sinAngle,\r\n                sinAngle, cosAngle);\r\n        }\r\n        result[0] = cosAngle;\r\n        result[1] = sinAngle;\r\n        result[2] = -sinAngle;\r\n        result[3] = cosAngle;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates an Array from the provided Matrix2 instance.\r\n     * The array will be in column-major order.\r\n     *\r\n     * @param {Matrix2} matrix The matrix to use..\r\n     * @param {Number[]} [result] The Array onto which to store the result.\r\n     * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\r\n     */\r\n    Matrix2.toArray = function(matrix, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return [matrix[0], matrix[1], matrix[2], matrix[3]];\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the array index of the element at the provided row and column.\r\n     *\r\n     * @param {Number} row The zero-based index of the row.\r\n     * @param {Number} column The zero-based index of the column.\r\n     * @returns {Number} The index of the element at the provided row and column.\r\n     *\r\n     * @exception {DeveloperError} row must be 0 or 1.\r\n     * @exception {DeveloperError} column must be 0 or 1.\r\n     *\r\n     * @example\r\n     * var myMatrix = new Cesium.Matrix2();\r\n     * var column1Row0Index = Cesium.Matrix2.getElementIndex(1, 0);\r\n     * var column1Row0 = myMatrix[column1Row0Index]\r\n     * myMatrix[column1Row0Index] = 10.0;\r\n     */\r\n    Matrix2.getElementIndex = function(column, row) {\r\n        \r\n\r\n        return column * 2 + row;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix column at the provided index as a Cartesian2 instance.\r\n     *\r\n     * @param {Matrix2} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to retrieve.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0 or 1.\r\n     */\r\n    Matrix2.getColumn = function(matrix, index, result) {\r\n        \r\n\r\n        var startIndex = index * 2;\r\n        var x = matrix[startIndex];\r\n        var y = matrix[startIndex + 1];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian2 instance.\r\n     *\r\n     * @param {Matrix2} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to set.\r\n     * @param {Cartesian2} cartesian The Cartesian whose values will be assigned to the specified column.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0 or 1.\r\n     */\r\n    Matrix2.setColumn = function(matrix, index, cartesian, result) {\r\n        \r\n\r\n        result = Matrix2.clone(matrix, result);\r\n        var startIndex = index * 2;\r\n        result[startIndex] = cartesian.x;\r\n        result[startIndex + 1] = cartesian.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix row at the provided index as a Cartesian2 instance.\r\n     *\r\n     * @param {Matrix2} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to retrieve.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0 or 1.\r\n     */\r\n    Matrix2.getRow = function(matrix, index, result) {\r\n        \r\n\r\n        var x = matrix[index];\r\n        var y = matrix[index + 2];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian2 instance.\r\n     *\r\n     * @param {Matrix2} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to set.\r\n     * @param {Cartesian2} cartesian The Cartesian whose values will be assigned to the specified row.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0 or 1.\r\n     */\r\n    Matrix2.setRow = function(matrix, index, cartesian, result) {\r\n        \r\n\r\n        result = Matrix2.clone(matrix, result);\r\n        result[index] = cartesian.x;\r\n        result[index + 2] = cartesian.y;\r\n        return result;\r\n    };\r\n\r\n    var scratchColumn = new Cartesian2();\r\n\r\n    /**\r\n     * Extracts the non-uniform scale assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix2} matrix The matrix.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Matrix2.getScale = function(matrix, result) {\r\n        \r\n\r\n        result.x = Cartesian2.magnitude(Cartesian2.fromElements(matrix[0], matrix[1], scratchColumn));\r\n        result.y = Cartesian2.magnitude(Cartesian2.fromElements(matrix[2], matrix[3], scratchColumn));\r\n        return result;\r\n    };\r\n\r\n    var scratchScale = new Cartesian2();\r\n\r\n    /**\r\n     * Computes the maximum scale assuming the matrix is an affine transformation.\r\n     * The maximum scale is the maximum length of the column vectors.\r\n     *\r\n     * @param {Matrix2} matrix The matrix.\r\n     * @returns {Number} The maximum scale.\r\n     */\r\n    Matrix2.getMaximumScale = function(matrix) {\r\n        Matrix2.getScale(matrix, scratchScale);\r\n        return Cartesian2.maximumComponent(scratchScale);\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices.\r\n     *\r\n     * @param {Matrix2} left The first matrix.\r\n     * @param {Matrix2} right The second matrix.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     */\r\n    Matrix2.multiply = function(left, right, result) {\r\n        \r\n\r\n        var column0Row0 = left[0] * right[0] + left[2] * right[1];\r\n        var column1Row0 = left[0] * right[2] + left[2] * right[3];\r\n        var column0Row1 = left[1] * right[0] + left[3] * right[1];\r\n        var column1Row1 = left[1] * right[2] + left[3] * right[3];\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column1Row0;\r\n        result[3] = column1Row1;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the sum of two matrices.\r\n     *\r\n     * @param {Matrix2} left The first matrix.\r\n     * @param {Matrix2} right The second matrix.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     */\r\n    Matrix2.add = function(left, right, result) {\r\n        \r\n\r\n        result[0] = left[0] + right[0];\r\n        result[1] = left[1] + right[1];\r\n        result[2] = left[2] + right[2];\r\n        result[3] = left[3] + right[3];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the difference of two matrices.\r\n     *\r\n     * @param {Matrix2} left The first matrix.\r\n     * @param {Matrix2} right The second matrix.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     */\r\n    Matrix2.subtract = function(left, right, result) {\r\n        \r\n\r\n        result[0] = left[0] - right[0];\r\n        result[1] = left[1] - right[1];\r\n        result[2] = left[2] - right[2];\r\n        result[3] = left[3] - right[3];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a column vector.\r\n     *\r\n     * @param {Matrix2} matrix The matrix.\r\n     * @param {Cartesian2} cartesian The column.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Matrix2.multiplyByVector = function(matrix, cartesian, result) {\r\n        \r\n\r\n        var x = matrix[0] * cartesian.x + matrix[2] * cartesian.y;\r\n        var y = matrix[1] * cartesian.x + matrix[3] * cartesian.y;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a scalar.\r\n     *\r\n     * @param {Matrix2} matrix The matrix.\r\n     * @param {Number} scalar The number to multiply by.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     */\r\n    Matrix2.multiplyByScalar = function(matrix, scalar, result) {\r\n        \r\n\r\n        result[0] = matrix[0] * scalar;\r\n        result[1] = matrix[1] * scalar;\r\n        result[2] = matrix[2] * scalar;\r\n        result[3] = matrix[3] * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix times a (non-uniform) scale, as if the scale were a scale matrix.\r\n     *\r\n     * @param {Matrix2} matrix The matrix on the left-hand side.\r\n     * @param {Cartesian2} scale The non-uniform scale on the right-hand side.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix2.multiply(m, Cesium.Matrix2.fromScale(scale), m);\r\n     * Cesium.Matrix2.multiplyByScale(m, scale, m);\r\n     *\r\n     * @see Matrix2.fromScale\r\n     * @see Matrix2.multiplyByUniformScale\r\n     */\r\n    Matrix2.multiplyByScale = function(matrix, scale, result) {\r\n        \r\n\r\n        result[0] = matrix[0] * scale.x;\r\n        result[1] = matrix[1] * scale.x;\r\n        result[2] = matrix[2] * scale.y;\r\n        result[3] = matrix[3] * scale.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a negated copy of the provided matrix.\r\n     *\r\n     * @param {Matrix2} matrix The matrix to negate.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     */\r\n    Matrix2.negate = function(matrix, result) {\r\n        \r\n\r\n        result[0] = -matrix[0];\r\n        result[1] = -matrix[1];\r\n        result[2] = -matrix[2];\r\n        result[3] = -matrix[3];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the transpose of the provided matrix.\r\n     *\r\n     * @param {Matrix2} matrix The matrix to transpose.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     */\r\n    Matrix2.transpose = function(matrix, result) {\r\n        \r\n\r\n        var column0Row0 = matrix[0];\r\n        var column0Row1 = matrix[2];\r\n        var column1Row0 = matrix[1];\r\n        var column1Row1 = matrix[3];\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column1Row0;\r\n        result[3] = column1Row1;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\r\n     *\r\n     * @param {Matrix2} matrix The matrix with signed elements.\r\n     * @param {Matrix2} result The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter.\r\n     */\r\n    Matrix2.abs = function(matrix, result) {\r\n        \r\n\r\n        result[0] = Math.abs(matrix[0]);\r\n        result[1] = Math.abs(matrix[1]);\r\n        result[2] = Math.abs(matrix[2]);\r\n        result[3] = Math.abs(matrix[3]);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix2} [left] The first matrix.\r\n     * @param {Matrix2} [right] The second matrix.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix2.equals = function(left, right) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                left[0] === right[0] &&\r\n                left[1] === right[1] &&\r\n                left[2] === right[2] &&\r\n                left[3] === right[3]);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Matrix2.equalsArray = function(matrix, array, offset) {\r\n        return matrix[0] === array[offset] &&\r\n               matrix[1] === array[offset + 1] &&\r\n               matrix[2] === array[offset + 2] &&\r\n               matrix[3] === array[offset + 3];\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix2} [left] The first matrix.\r\n     * @param {Matrix2} [right] The second matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix2.equalsEpsilon = function(left, right, epsilon) {\r\n        \r\n\r\n        return (left === right) ||\r\n                (defined(left) &&\r\n                defined(right) &&\r\n                Math.abs(left[0] - right[0]) <= epsilon &&\r\n                Math.abs(left[1] - right[1]) <= epsilon &&\r\n                Math.abs(left[2] - right[2]) <= epsilon &&\r\n                Math.abs(left[3] - right[3]) <= epsilon);\r\n    };\r\n\r\n    /**\r\n     * An immutable Matrix2 instance initialized to the identity matrix.\r\n     *\r\n     * @type {Matrix2}\r\n     * @constant\r\n     */\r\n    Matrix2.IDENTITY = freezeObject(new Matrix2(1.0, 0.0,\r\n                                                0.0, 1.0));\r\n\r\n    /**\r\n     * An immutable Matrix2 instance initialized to the zero matrix.\r\n     *\r\n     * @type {Matrix2}\r\n     * @constant\r\n     */\r\n    Matrix2.ZERO = freezeObject(new Matrix2(0.0, 0.0,\r\n                                            0.0, 0.0));\r\n\r\n    /**\r\n     * The index into Matrix2 for column 0, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     *\r\n     * @example\r\n     * var matrix = new Cesium.Matrix2();\r\n     * matrix[Cesium.Matrix2.COLUMN0ROW0] = 5.0; // set column 0, row 0 to 5.0\r\n     */\r\n    Matrix2.COLUMN0ROW0 = 0;\r\n\r\n    /**\r\n     * The index into Matrix2 for column 0, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     *\r\n     * @example\r\n     * var matrix = new Cesium.Matrix2();\r\n     * matrix[Cesium.Matrix2.COLUMN0ROW1] = 5.0; // set column 0, row 1 to 5.0\r\n     */\r\n    Matrix2.COLUMN0ROW1 = 1;\r\n\r\n    /**\r\n     * The index into Matrix2 for column 1, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     *\r\n     * @example\r\n     * var matrix = new Cesium.Matrix2();\r\n     * matrix[Cesium.Matrix2.COLUMN1ROW0] = 5.0; // set column 1, row 0 to 5.0\r\n     */\r\n    Matrix2.COLUMN1ROW0 = 2;\r\n\r\n    /**\r\n     * The index into Matrix2 for column 1, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     *\r\n     * @example\r\n     * var matrix = new Cesium.Matrix2();\r\n     * matrix[Cesium.Matrix2.COLUMN1ROW1] = 5.0; // set column 1, row 1 to 5.0\r\n     */\r\n    Matrix2.COLUMN1ROW1 = 3;\r\n\r\n    defineProperties(Matrix2.prototype, {\r\n        /**\r\n         * Gets the number of items in the collection.\r\n         * @memberof Matrix2.prototype\r\n         *\r\n         * @type {Number}\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return Matrix2.packedLength;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates the provided Matrix2 instance.\r\n     *\r\n     * @param {Matrix2} [result] The object onto which to store the result.\r\n     * @returns {Matrix2} The modified result parameter or a new Matrix2 instance if one was not provided.\r\n     */\r\n    Matrix2.prototype.clone = function(result) {\r\n        return Matrix2.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix2} [right] The right hand side matrix.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix2.prototype.equals = function(right) {\r\n        return Matrix2.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix2} [right] The right hand side matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix2.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Matrix2.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Matrix with each row being\r\n     * on a separate line and in the format '(column0, column1)'.\r\n     *\r\n     * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1)'.\r\n     */\r\n    Matrix2.prototype.toString = function() {\r\n        return '(' + this[0] + ', ' + this[2] + ')\\n' +\r\n               '(' + this[1] + ', ' + this[3] + ')';\r\n    };\r\n\r\n    return Matrix2;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Matrix2.js\n// module id = 55\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './Fullscreen'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        Fullscreen) {\r\n    'use strict';\r\n    /*global CanvasPixelArray*/\r\n\r\n    var theNavigator;\r\n    if (typeof navigator !== 'undefined') {\r\n        theNavigator = navigator;\r\n    } else {\r\n        theNavigator = {};\r\n    }\r\n\r\n    function extractVersion(versionString) {\r\n        var parts = versionString.split('.');\r\n        for (var i = 0, len = parts.length; i < len; ++i) {\r\n            parts[i] = parseInt(parts[i], 10);\r\n        }\r\n        return parts;\r\n    }\r\n\r\n    var isChromeResult;\r\n    var chromeVersionResult;\r\n    function isChrome() {\r\n        if (!defined(isChromeResult)) {\r\n            isChromeResult = false;\r\n            // Edge contains Chrome in the user agent too\r\n            if (!isEdge()) {\r\n                var fields = (/ Chrome\\/([\\.0-9]+)/).exec(theNavigator.userAgent);\r\n                if (fields !== null) {\r\n                    isChromeResult = true;\r\n                    chromeVersionResult = extractVersion(fields[1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return isChromeResult;\r\n    }\r\n\r\n    function chromeVersion() {\r\n        return isChrome() && chromeVersionResult;\r\n    }\r\n\r\n    var isSafariResult;\r\n    var safariVersionResult;\r\n    function isSafari() {\r\n        if (!defined(isSafariResult)) {\r\n            isSafariResult = false;\r\n\r\n            // Chrome and Edge contain Safari in the user agent too\r\n            if (!isChrome() && !isEdge() && (/ Safari\\/[\\.0-9]+/).test(theNavigator.userAgent)) {\r\n                var fields = (/ Version\\/([\\.0-9]+)/).exec(theNavigator.userAgent);\r\n                if (fields !== null) {\r\n                    isSafariResult = true;\r\n                    safariVersionResult = extractVersion(fields[1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return isSafariResult;\r\n    }\r\n\r\n    function safariVersion() {\r\n        return isSafari() && safariVersionResult;\r\n    }\r\n\r\n    var isWebkitResult;\r\n    var webkitVersionResult;\r\n    function isWebkit() {\r\n        if (!defined(isWebkitResult)) {\r\n            isWebkitResult = false;\r\n\r\n            var fields = (/ AppleWebKit\\/([\\.0-9]+)(\\+?)/).exec(theNavigator.userAgent);\r\n            if (fields !== null) {\r\n                isWebkitResult = true;\r\n                webkitVersionResult = extractVersion(fields[1]);\r\n                webkitVersionResult.isNightly = !!fields[2];\r\n            }\r\n        }\r\n\r\n        return isWebkitResult;\r\n    }\r\n\r\n    function webkitVersion() {\r\n        return isWebkit() && webkitVersionResult;\r\n    }\r\n\r\n    var isInternetExplorerResult;\r\n    var internetExplorerVersionResult;\r\n    function isInternetExplorer() {\r\n        if (!defined(isInternetExplorerResult)) {\r\n            isInternetExplorerResult = false;\r\n\r\n            var fields;\r\n            if (theNavigator.appName === 'Microsoft Internet Explorer') {\r\n                fields = /MSIE ([0-9]{1,}[\\.0-9]{0,})/.exec(theNavigator.userAgent);\r\n                if (fields !== null) {\r\n                    isInternetExplorerResult = true;\r\n                    internetExplorerVersionResult = extractVersion(fields[1]);\r\n                }\r\n            } else if (theNavigator.appName === 'Netscape') {\r\n                fields = /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(theNavigator.userAgent);\r\n                if (fields !== null) {\r\n                    isInternetExplorerResult = true;\r\n                    internetExplorerVersionResult = extractVersion(fields[1]);\r\n                }\r\n            }\r\n        }\r\n        return isInternetExplorerResult;\r\n    }\r\n\r\n    function internetExplorerVersion() {\r\n        return isInternetExplorer() && internetExplorerVersionResult;\r\n    }\r\n\r\n    var isEdgeResult;\r\n    var edgeVersionResult;\r\n    function isEdge() {\r\n        if (!defined(isEdgeResult)) {\r\n            isEdgeResult = false;\r\n            var fields = (/ Edge\\/([\\.0-9]+)/).exec(theNavigator.userAgent);\r\n            if (fields !== null) {\r\n                isEdgeResult = true;\r\n                edgeVersionResult = extractVersion(fields[1]);\r\n            }\r\n        }\r\n        return isEdgeResult;\r\n    }\r\n\r\n    function edgeVersion() {\r\n        return isEdge() && edgeVersionResult;\r\n    }\r\n\r\n    var isFirefoxResult;\r\n    var firefoxVersionResult;\r\n    function isFirefox() {\r\n        if (!defined(isFirefoxResult)) {\r\n            isFirefoxResult = false;\r\n\r\n            var fields = /Firefox\\/([\\.0-9]+)/.exec(theNavigator.userAgent);\r\n            if (fields !== null) {\r\n                isFirefoxResult = true;\r\n                firefoxVersionResult = extractVersion(fields[1]);\r\n            }\r\n        }\r\n        return isFirefoxResult;\r\n    }\r\n\r\n    var isWindowsResult;\r\n    function isWindows() {\r\n        if (!defined(isWindowsResult)) {\r\n            isWindowsResult = /Windows/i.test(theNavigator.appVersion);\r\n        }\r\n        return isWindowsResult;\r\n    }\r\n\r\n    function firefoxVersion() {\r\n        return isFirefox() && firefoxVersionResult;\r\n    }\r\n\r\n    var hasPointerEvents;\r\n    function supportsPointerEvents() {\r\n        if (!defined(hasPointerEvents)) {\r\n            //While navigator.pointerEnabled is deprecated in the W3C specification\r\n            //we still need to use it if it exists in order to support browsers\r\n            //that rely on it, such as the Windows WebBrowser control which defines\r\n            //PointerEvent but sets navigator.pointerEnabled to false.\r\n\r\n            //Firefox disabled because of https://github.com/AnalyticalGraphicsInc/cesium/issues/6372\r\n            hasPointerEvents = !isFirefox() && typeof PointerEvent !== 'undefined' && (!defined(theNavigator.pointerEnabled) || theNavigator.pointerEnabled);\r\n        }\r\n        return hasPointerEvents;\r\n    }\r\n\r\n    var imageRenderingValueResult;\r\n    var supportsImageRenderingPixelatedResult;\r\n    function supportsImageRenderingPixelated() {\r\n        if (!defined(supportsImageRenderingPixelatedResult)) {\r\n            var canvas = document.createElement('canvas');\r\n            canvas.setAttribute('style',\r\n                                'image-rendering: -moz-crisp-edges;' +\r\n                                'image-rendering: pixelated;');\r\n            //canvas.style.imageRendering will be undefined, null or an empty string on unsupported browsers.\r\n            var tmp = canvas.style.imageRendering;\r\n            supportsImageRenderingPixelatedResult = defined(tmp) && tmp !== '';\r\n            if (supportsImageRenderingPixelatedResult) {\r\n                imageRenderingValueResult = tmp;\r\n            }\r\n        }\r\n        return supportsImageRenderingPixelatedResult;\r\n    }\r\n\r\n    function imageRenderingValue() {\r\n        return supportsImageRenderingPixelated() ? imageRenderingValueResult : undefined;\r\n    }\r\n\r\n    var typedArrayTypes = [];\r\n    if (typeof ArrayBuffer !== 'undefined') {\r\n        typedArrayTypes.push(Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array);\r\n\r\n        if (typeof Uint8ClampedArray !== 'undefined') {\r\n            typedArrayTypes.push(Uint8ClampedArray);\r\n        }\r\n\r\n        if (typeof CanvasPixelArray !== 'undefined') {\r\n            typedArrayTypes.push(CanvasPixelArray);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A set of functions to detect whether the current browser supports\r\n     * various features.\r\n     *\r\n     * @exports FeatureDetection\r\n     */\r\n    var FeatureDetection = {\r\n        isChrome : isChrome,\r\n        chromeVersion : chromeVersion,\r\n        isSafari : isSafari,\r\n        safariVersion : safariVersion,\r\n        isWebkit : isWebkit,\r\n        webkitVersion : webkitVersion,\r\n        isInternetExplorer : isInternetExplorer,\r\n        internetExplorerVersion : internetExplorerVersion,\r\n        isEdge : isEdge,\r\n        edgeVersion : edgeVersion,\r\n        isFirefox : isFirefox,\r\n        firefoxVersion : firefoxVersion,\r\n        isWindows : isWindows,\r\n        hardwareConcurrency : defaultValue(theNavigator.hardwareConcurrency, 3),\r\n        supportsPointerEvents : supportsPointerEvents,\r\n        supportsImageRenderingPixelated: supportsImageRenderingPixelated,\r\n        imageRenderingValue: imageRenderingValue,\r\n        typedArrayTypes: typedArrayTypes\r\n    };\r\n\r\n    /**\r\n     * Detects whether the current browser supports the full screen standard.\r\n     *\r\n     * @returns {Boolean} true if the browser supports the full screen standard, false if not.\r\n     *\r\n     * @see Fullscreen\r\n     * @see {@link http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html|W3C Fullscreen Living Specification}\r\n     */\r\n    FeatureDetection.supportsFullscreen = function() {\r\n        return Fullscreen.supportsFullscreen();\r\n    };\r\n\r\n    /**\r\n     * Detects whether the current browser supports typed arrays.\r\n     *\r\n     * @returns {Boolean} true if the browser supports typed arrays, false if not.\r\n     *\r\n     * @see {@link http://www.khronos.org/registry/typedarray/specs/latest/|Typed Array Specification}\r\n     */\r\n    FeatureDetection.supportsTypedArrays = function() {\r\n        return typeof ArrayBuffer !== 'undefined';\r\n    };\r\n\r\n    /**\r\n     * Detects whether the current browser supports Web Workers.\r\n     *\r\n     * @returns {Boolean} true if the browsers supports Web Workers, false if not.\r\n     *\r\n     * @see {@link http://www.w3.org/TR/workers/}\r\n     */\r\n    FeatureDetection.supportsWebWorkers = function() {\r\n        return typeof Worker !== 'undefined';\r\n    };\r\n\r\n    /**\r\n     * Detects whether the current browser supports Web Assembly.\r\n     *\r\n     * @returns {Boolean} true if the browsers supports Web Assembly, false if not.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/WebAssembly}\r\n     */\r\n    FeatureDetection.supportsWebAssembly = function() {\r\n        return typeof WebAssembly !== 'undefined' && !FeatureDetection.isEdge();\r\n    };\r\n\r\n    return FeatureDetection;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/FeatureDetection.js\n// module id = 56\n// module chunks = 0","define([\r\n        '../ThirdParty/Uri',\r\n        '../ThirdParty/when',\r\n        './appendForwardSlash',\r\n        './Check',\r\n        './clone',\r\n        './combine',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './deprecationWarning',\r\n        './DeveloperError',\r\n        './freezeObject',\r\n        './getAbsoluteUri',\r\n        './getBaseUri',\r\n        './getExtensionFromUri',\r\n        './isBlobUri',\r\n        './isCrossOriginUrl',\r\n        './isDataUri',\r\n        './loadAndExecuteScript',\r\n        './objectToQuery',\r\n        './queryToObject',\r\n        './Request',\r\n        './RequestErrorEvent',\r\n        './RequestScheduler',\r\n        './RequestState',\r\n        './RuntimeError',\r\n        './TrustedServers'\r\n    ], function(\r\n        Uri,\r\n        when,\r\n        appendForwardSlash,\r\n        Check,\r\n        clone,\r\n        combine,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        deprecationWarning,\r\n        DeveloperError,\r\n        freezeObject,\r\n        getAbsoluteUri,\r\n        getBaseUri,\r\n        getExtensionFromUri,\r\n        isBlobUri,\r\n        isCrossOriginUrl,\r\n        isDataUri,\r\n        loadAndExecuteScript,\r\n        objectToQuery,\r\n        queryToObject,\r\n        Request,\r\n        RequestErrorEvent,\r\n        RequestScheduler,\r\n        RequestState,\r\n        RuntimeError,\r\n        TrustedServers) {\r\n    'use strict';\r\n\r\n    var xhrBlobSupported = (function() {\r\n        try {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('GET', '#', true);\r\n            xhr.responseType = 'blob';\r\n            return xhr.responseType === 'blob';\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Parses a query string and returns the object equivalent.\r\n     *\r\n     * @param {Uri} uri The Uri with a query object.\r\n     * @param {Resource} resource The Resource that will be assigned queryParameters.\r\n     * @param {Boolean} merge If true, we'll merge with the resource's existing queryParameters. Otherwise they will be replaced.\r\n     * @param {Boolean} preserveQueryParameters If true duplicate parameters will be concatenated into an array. If false, keys in uri will take precedence.\r\n     *\r\n     * @private\r\n     */\r\n    function parseQuery(uri, resource, merge, preserveQueryParameters) {\r\n        var queryString = uri.query;\r\n        if (!defined(queryString) || (queryString.length === 0)) {\r\n            return {};\r\n        }\r\n\r\n        var query;\r\n        // Special case we run into where the querystring is just a string, not key/value pairs\r\n        if (queryString.indexOf('=') === -1) {\r\n            var result = {};\r\n            result[queryString] = undefined;\r\n            query = result;\r\n        } else {\r\n            query = queryToObject(queryString);\r\n        }\r\n\r\n        if (merge) {\r\n            resource._queryParameters = combineQueryParameters(query, resource._queryParameters, preserveQueryParameters);\r\n        } else {\r\n            resource._queryParameters = query;\r\n        }\r\n        uri.query = undefined;\r\n    }\r\n\r\n    /**\r\n     * Converts a query object into a string.\r\n     *\r\n     * @param {Uri} uri The Uri object that will have the query object set.\r\n     * @param {Resource} resource The resource that has queryParameters\r\n     *\r\n     * @private\r\n     */\r\n    function stringifyQuery(uri, resource) {\r\n        var queryObject = resource._queryParameters;\r\n\r\n        var keys = Object.keys(queryObject);\r\n\r\n        // We have 1 key with an undefined value, so this is just a string, not key/value pairs\r\n        if (keys.length === 1 && !defined(queryObject[keys[0]])) {\r\n            uri.query = keys[0];\r\n        } else {\r\n            uri.query = objectToQuery(queryObject);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones a value if it is defined, otherwise returns the default value\r\n     *\r\n     * @param {*} [val] The value to clone.\r\n     * @param {*} [defaultVal] The default value.\r\n     *\r\n     * @returns {*} A clone of val or the defaultVal.\r\n     *\r\n     * @private\r\n     */\r\n    function defaultClone(val, defaultVal) {\r\n        if (!defined(val)) {\r\n            return defaultVal;\r\n        }\r\n\r\n        return defined(val.clone) ? val.clone() : clone(val);\r\n    }\r\n\r\n    /**\r\n     * Checks to make sure the Resource isn't already being requested.\r\n     *\r\n     * @param {Request} request The request to check.\r\n     *\r\n     * @private\r\n     */\r\n    function checkAndResetRequest(request) {\r\n        if (request.state === RequestState.ISSUED || request.state === RequestState.ACTIVE) {\r\n            throw new RuntimeError('The Resource is already being fetched.');\r\n        }\r\n\r\n        request.state = RequestState.UNISSUED;\r\n        request.deferred = undefined;\r\n    }\r\n\r\n    /**\r\n     * This combines a map of query parameters.\r\n     *\r\n     * @param {Object} q1 The first map of query parameters. Values in this map will take precedence if preserveQueryParameters is false.\r\n     * @param {Object} q2 The second map of query parameters.\r\n     * @param {Boolean} preserveQueryParameters If true duplicate parameters will be concatenated into an array. If false, keys in q1 will take precedence.\r\n     *\r\n     * @returns {Object} The combined map of query parameters.\r\n     *\r\n     * @example\r\n     * var q1 = {\r\n     *   a: 1,\r\n     *   b: 2\r\n     * };\r\n     * var q2 = {\r\n     *   a: 3,\r\n     *   c: 4\r\n     * };\r\n     * var q3 = {\r\n     *   b: [5, 6],\r\n     *   d: 7\r\n     * }\r\n     *\r\n     * // Returns\r\n     * // {\r\n     * //   a: [1, 3],\r\n     * //   b: 2,\r\n     * //   c: 4\r\n     * // };\r\n     * combineQueryParameters(q1, q2, true);\r\n     *\r\n     * // Returns\r\n     * // {\r\n     * //   a: 1,\r\n     * //   b: 2,\r\n     * //   c: 4\r\n     * // };\r\n     * combineQueryParameters(q1, q2, false);\r\n     *\r\n     * // Returns\r\n     * // {\r\n     * //   a: 1,\r\n     * //   b: [2, 5, 6],\r\n     * //   d: 7\r\n     * // };\r\n     * combineQueryParameters(q1, q3, true);\r\n     *\r\n     * // Returns\r\n     * // {\r\n     * //   a: 1,\r\n     * //   b: 2,\r\n     * //   d: 7\r\n     * // };\r\n     * combineQueryParameters(q1, q3, false);\r\n     *\r\n     * @private\r\n     */\r\n    function combineQueryParameters(q1, q2, preserveQueryParameters) {\r\n        if (!preserveQueryParameters) {\r\n            return combine(q1, q2);\r\n        }\r\n\r\n        var result = clone(q1, true);\r\n        for (var param in q2) {\r\n            if (q2.hasOwnProperty(param)) {\r\n                var value = result[param];\r\n                var q2Value = q2[param];\r\n                if (defined(value)) {\r\n                    if (!Array.isArray(value)) {\r\n                        value = result[param] = [value];\r\n                    }\r\n\r\n                    result[param] = value.concat(q2Value);\r\n                } else {\r\n                    result[param] = Array.isArray(q2Value) ? q2Value.slice() : q2Value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A resource that includes the location and any other parameters we need to retrieve it or create derived resources. It also provides the ability to retry requests.\r\n     *\r\n     * @alias Resource\r\n     * @constructor\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     *\r\n     * @example\r\n     * function refreshTokenRetryCallback(resource, error) {\r\n     *   if (error.statusCode === 403) {\r\n     *     // 403 status code means a new token should be generated\r\n     *     return getNewAccessToken()\r\n     *       .then(function(token) {\r\n     *         resource.queryParameters.access_token = token;\r\n     *         return true;\r\n     *       })\r\n     *       .otherwise(function() {\r\n     *         return false;\r\n     *       });\r\n     *   }\r\n     *\r\n     *   return false;\r\n     * }\r\n     *\r\n     * var resource = new Resource({\r\n     *    url: 'http://server.com/path/to/resource.json',\r\n     *    proxy: new DefaultProxy('/proxy/'),\r\n     *    headers: {\r\n     *      'X-My-Header': 'valueOfHeader'\r\n     *    },\r\n     *    queryParameters: {\r\n     *      'access_token': '123-435-456-000'\r\n     *    },\r\n     *    retryCallback: refreshTokenRetryCallback,\r\n     *    retryAttempts: 1\r\n     * });\r\n     */\r\n    function Resource(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        if (typeof options === 'string') {\r\n            options = {\r\n                url: options\r\n            };\r\n        }\r\n\r\n        \r\n\r\n        this._url = undefined;\r\n        this._templateValues = defaultClone(options.templateValues, {});\r\n        this._queryParameters = defaultClone(options.queryParameters, {});\r\n\r\n        /**\r\n         * Additional HTTP headers that will be sent with the request.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.headers = defaultClone(options.headers, {});\r\n\r\n        /**\r\n         * A Request object that will be used. Intended for internal use only.\r\n         *\r\n         * @type {Request}\r\n         */\r\n        this.request = defaultValue(options.request, new Request());\r\n\r\n        /**\r\n         * A proxy to be used when loading the resource.\r\n         *\r\n         * @type {DefaultProxy}\r\n         */\r\n        this.proxy = options.proxy;\r\n\r\n        /**\r\n         * Function to call when a request for this resource fails. If it returns true or a Promise that resolves to true, the request will be retried.\r\n         *\r\n         * @type {Function}\r\n         */\r\n        this.retryCallback = options.retryCallback;\r\n\r\n        /**\r\n         * The number of times the retryCallback should be called before giving up.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.retryAttempts = defaultValue(options.retryAttempts, 0);\r\n        this._retryCount = 0;\r\n\r\n        // True if the URL contains {placeholders}. We need to take care to avoid turning these into %7Bplaceholders%7D.\r\n        var open = options.url.indexOf('%7B');\r\n        this._containsPlaceholders = !(open >= 0 && open < options.url.indexOf('%7D'));\r\n\r\n        var uri = new Uri(options.url);\r\n        parseQuery(uri, this, true, true);\r\n\r\n        // Remove the fragment as it's not sent with a request\r\n        uri.fragment = undefined;\r\n\r\n        this._url = uri.toString();\r\n    }\r\n\r\n    /**\r\n     * A helper function to create a resource depending on whether we have a String or a Resource\r\n     *\r\n     * @param {Resource|String} resource A Resource or a String to use when creating a new Resource.\r\n     *\r\n     * @returns {Resource} If resource is a String, a Resource constructed with the url and options. Otherwise the resource parameter is returned.\r\n     *\r\n     * @private\r\n     */\r\n    Resource.createIfNeeded = function(resource) {\r\n        if (resource instanceof Resource) {\r\n            // Keep existing request object. This function is used internally to duplicate a Resource, so that it can't\r\n            //  be modified outside of a class that holds it (eg. an imagery or terrain provider). Since the Request objects\r\n            //  are managed outside of the providers, by the tile loading code, we want to keep the request property the same so if it is changed\r\n            //  in the underlying tiling code the requests for this resource will use it.\r\n            return  resource.getDerivedResource({\r\n                request: resource.request\r\n            });\r\n        }\r\n\r\n        if (typeof resource !== 'string') {\r\n            return resource;\r\n        }\r\n\r\n        return new Resource({\r\n            url: resource\r\n        });\r\n    };\r\n\r\n    defineProperties(Resource, {\r\n        /**\r\n         * Returns true if blobs are supported.\r\n         *\r\n         * @memberof Resource\r\n         * @type {Boolean}\r\n         *\r\n         * @readonly\r\n         */\r\n        isBlobSupported : {\r\n            get : function() {\r\n                return xhrBlobSupported;\r\n            }\r\n        }\r\n    });\r\n\r\n    defineProperties(Resource.prototype, {\r\n        /**\r\n         * Query parameters appended to the url.\r\n         *\r\n         * @memberof Resource.prototype\r\n         * @type {Object}\r\n         *\r\n         * @readonly\r\n         */\r\n        queryParameters: {\r\n            get: function() {\r\n                return this._queryParameters;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The key/value pairs used to replace template parameters in the url.\r\n         *\r\n         * @memberof Resource.prototype\r\n         * @type {Object}\r\n         *\r\n         * @readonly\r\n         */\r\n        templateValues: {\r\n            get: function() {\r\n                return this._templateValues;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The url to the resource with template values replaced, query string appended and encoded by proxy if one was set.\r\n         *\r\n         * @memberof Resource.prototype\r\n         * @type {String}\r\n         */\r\n        url: {\r\n            get: function() {\r\n                return this.getUrlComponent(true, true);\r\n            },\r\n            set: function(value) {\r\n                var uri = new Uri(value);\r\n\r\n                parseQuery(uri, this, false);\r\n\r\n                // Remove the fragment as it's not sent with a request\r\n                uri.fragment = undefined;\r\n\r\n                this._url = uri.toString();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The file extension of the resource.\r\n         *\r\n         * @memberof Resource.prototype\r\n         * @type {String}\r\n         *\r\n         * @readonly\r\n         */\r\n        extension: {\r\n            get: function() {\r\n                return getExtensionFromUri(this._url);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * True if the Resource refers to a data URI.\r\n         *\r\n         * @memberof Resource.prototype\r\n         * @type {Boolean}\r\n         */\r\n        isDataUri: {\r\n            get: function() {\r\n                return isDataUri(this._url);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * True if the Resource refers to a blob URI.\r\n         *\r\n         * @memberof Resource.prototype\r\n         * @type {Boolean}\r\n         */\r\n        isBlobUri: {\r\n            get: function() {\r\n                return isBlobUri(this._url);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * True if the Resource refers to a cross origin URL.\r\n         *\r\n         * @memberof Resource.prototype\r\n         * @type {Boolean}\r\n         */\r\n        isCrossOriginUrl: {\r\n            get: function() {\r\n                return isCrossOriginUrl(this._url);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * True if the Resource has request headers. This is equivalent to checking if the headers property has any keys.\r\n         *\r\n         * @memberof Resource.prototype\r\n         * @type {Boolean}\r\n         */\r\n        hasHeaders: {\r\n            get: function() {\r\n                return (Object.keys(this.headers).length > 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Returns the url, optional with the query string and processed by a proxy.\r\n     *\r\n     * @param {Boolean} [query=false] If true, the query string is included.\r\n     * @param {Boolean} [proxy=false] If true, the url is processed the proxy object if defined.\r\n     *\r\n     * @returns {String} The url with all the requested components.\r\n     */\r\n    Resource.prototype.getUrlComponent = function(query, proxy) {\r\n        if(this.isDataUri) {\r\n            return this._url;\r\n        }\r\n\r\n        var uri = new Uri(this._url);\r\n\r\n        if (query) {\r\n            stringifyQuery(uri, this);\r\n        }\r\n\r\n        // objectToQuery escapes the placeholders.  Undo that.\r\n        var url = uri.toString();\r\n\r\n        if (this._containsPlaceholders) {\r\n            url = url.replace(/%7B/g, '{').replace(/%7D/g, '}');\r\n        }\r\n\r\n        var template = this._templateValues;\r\n        var keys = Object.keys(template);\r\n        if (keys.length > 0) {\r\n            for (var i = 0; i < keys.length; i++) {\r\n                var key = keys[i];\r\n                var value = template[key];\r\n                url = url.replace(new RegExp('{' + key + '}', 'g'), encodeURIComponent(value));\r\n            }\r\n        }\r\n        if (proxy && defined(this.proxy)) {\r\n            url = this.proxy.getURL(url);\r\n        }\r\n        return url;\r\n    };\r\n\r\n    /**\r\n     * Combines the specified object and the existing query parameters. This allows you to add many parameters at once,\r\n     *  as opposed to adding them one at a time to the queryParameters property. If a value is already set, it will be replaced with the new value.\r\n     *\r\n     * @param {Object} params The query parameters\r\n     * @param {Boolean} [useAsDefault=false] If true the params will be used as the default values, so they will only be set if they are undefined.\r\n     */\r\n    Resource.prototype.setQueryParameters = function(params, useAsDefault) {\r\n        if (useAsDefault) {\r\n            this._queryParameters = combineQueryParameters(this._queryParameters, params, false);\r\n        } else {\r\n            this._queryParameters = combineQueryParameters(params, this._queryParameters, false);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Combines the specified object and the existing query parameters. This allows you to add many parameters at once,\r\n     *  as opposed to adding them one at a time to the queryParameters property. If a value is already set, it will be replaced with the new value.\r\n     *\r\n     * @param {Object} params The query parameters\r\n     * @param {Boolean} [useAsDefault=false] If true the params will be used as the default values, so they will only be set if they are undefined.\r\n     *\r\n     * @deprecated\r\n     */\r\n    Resource.prototype.addQueryParameters = function(params, useAsDefault) {\r\n        deprecationWarning('Resource.addQueryParameters', 'addQueryParameters has been deprecated and will be removed 1.45. Use setQueryParameters or appendQueryParameters instead.');\r\n\r\n        return this.setQueryParameters(params, useAsDefault);\r\n    };\r\n\r\n    /**\r\n     * Combines the specified object and the existing query parameters. This allows you to add many parameters at once,\r\n     *  as opposed to adding them one at a time to the queryParameters property.\r\n     *\r\n     * @param {Object} params The query parameters\r\n     */\r\n    Resource.prototype.appendQueryParameters = function(params) {\r\n        this._queryParameters = combineQueryParameters(params, this._queryParameters, true);\r\n    };\r\n\r\n    /**\r\n     * Combines the specified object and the existing template values. This allows you to add many values at once,\r\n     *  as opposed to adding them one at a time to the templateValues property. If a value is already set, it will become an array and the new value will be appended.\r\n     *\r\n     * @param {Object} template The template values\r\n     * @param {Boolean} [useAsDefault=false] If true the values will be used as the default values, so they will only be set if they are undefined.\r\n     */\r\n    Resource.prototype.setTemplateValues = function(template, useAsDefault) {\r\n        if (useAsDefault) {\r\n            this._templateValues = combine(this._templateValues, template);\r\n        } else {\r\n            this._templateValues = combine(template, this._templateValues);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Combines the specified object and the existing template values. This allows you to add many values at once,\r\n     *  as opposed to adding them one at a time to the templateValues property. If a value is already set, it will become an array and the new value will be appended.\r\n     *\r\n     * @param {Object} template The template values\r\n     * @param {Boolean} [useAsDefault=false] If true the values will be used as the default values, so they will only be set if they are undefined.\r\n     *\r\n     * @deprecated\r\n     */\r\n    Resource.prototype.addTemplateValues = function(template, useAsDefault) {\r\n        deprecationWarning('Resource.addTemplateValues', 'addTemplateValues has been deprecated and will be removed 1.45. Use setTemplateValues.');\r\n\r\n        return this.setTemplateValues(template, useAsDefault);\r\n    };\r\n\r\n    /**\r\n     * Returns a resource relative to the current instance. All properties remain the same as the current instance unless overridden in options.\r\n     *\r\n     * @param {Object} options An object with the following properties\r\n     * @param {String} [options.url]  The url that will be resolved relative to the url of the current instance.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be combined with those of the current instance.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}). These will be combined with those of the current instance.\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The function to call when loading the resource fails.\r\n     * @param {Number} [options.retryAttempts] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {Boolean} [options.preserveQueryParameters=false] If true, this will keep all query parameters from the current resource and derived resource. If false, derived parameters will replace those of the current resource.\r\n     *\r\n     * @returns {Resource} The resource derived from the current one.\r\n     */\r\n    Resource.prototype.getDerivedResource = function(options) {\r\n        var resource = this.clone();\r\n        resource._retryCount = 0;\r\n\r\n        if (defined(options.url)) {\r\n            var uri = new Uri(options.url);\r\n\r\n            var preserveQueryParameters = defaultValue(options.preserveQueryParameters, false);\r\n            parseQuery(uri, resource, true, preserveQueryParameters);\r\n\r\n            // Remove the fragment as it's not sent with a request\r\n            uri.fragment = undefined;\r\n\r\n            resource._url = uri.resolve(new Uri(getAbsoluteUri(this._url))).toString();\r\n        }\r\n\r\n        if (defined(options.queryParameters)) {\r\n            resource._queryParameters = combine(options.queryParameters, resource._queryParameters);\r\n        }\r\n        if (defined(options.templateValues)) {\r\n            resource._templateValues = combine(options.templateValues, resource.templateValues);\r\n        }\r\n        if (defined(options.headers)) {\r\n            resource.headers = combine(options.headers, resource.headers);\r\n        }\r\n        if (defined(options.proxy)) {\r\n            resource.proxy = options.proxy;\r\n        }\r\n        if (defined(options.request)) {\r\n            resource.request = options.request;\r\n        }\r\n        if (defined(options.retryCallback)) {\r\n            resource.retryCallback = options.retryCallback;\r\n        }\r\n        if (defined(options.retryAttempts)) {\r\n            resource.retryAttempts = options.retryAttempts;\r\n        }\r\n\r\n        return resource;\r\n    };\r\n\r\n    /**\r\n     * Called when a resource fails to load. This will call the retryCallback function if defined until retryAttempts is reached.\r\n     *\r\n     * @param {Error} [error] The error that was encountered.\r\n     *\r\n     * @returns {Promise<Boolean>} A promise to a boolean, that if true will cause the resource request to be retried.\r\n     *\r\n     * @private\r\n     */\r\n    Resource.prototype.retryOnError = function(error) {\r\n        var retryCallback = this.retryCallback;\r\n        if ((typeof retryCallback !== 'function') || (this._retryCount >= this.retryAttempts)) {\r\n            return when(false);\r\n        }\r\n\r\n        var that = this;\r\n        return when(retryCallback(this, error))\r\n            .then(function(result) {\r\n                ++that._retryCount;\r\n\r\n                return result;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Resource instance.\r\n     *\r\n     * @param {Resource} [result] The object onto which to store the result.\r\n     *\r\n     * @returns {Resource} The modified result parameter or a new Resource instance if one was not provided.\r\n     */\r\n    Resource.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new Resource({\r\n                url : this._url\r\n            });\r\n        }\r\n\r\n        result._url = this._url;\r\n        result._queryParameters = clone(this._queryParameters);\r\n        result._templateValues = clone(this._templateValues);\r\n        result.headers = clone(this.headers);\r\n        result.proxy = this.proxy;\r\n        result.retryCallback = this.retryCallback;\r\n        result.retryAttempts = this.retryAttempts;\r\n        result._retryCount = 0;\r\n        result.request = this.request.clone();\r\n        result._containsPlaceholders = this._containsPlaceholders;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns the base path of the Resource.\r\n     *\r\n     * @param {Boolean} [includeQuery = false] Whether or not to include the query string and fragment form the uri\r\n     *\r\n     * @returns {String} The base URI of the resource\r\n     */\r\n    Resource.prototype.getBaseUri = function(includeQuery) {\r\n        return getBaseUri(this.getUrlComponent(includeQuery), includeQuery);\r\n    };\r\n\r\n    /**\r\n     * Appends a forward slash to the URL.\r\n     */\r\n    Resource.prototype.appendForwardSlash = function() {\r\n        this._url = appendForwardSlash(this._url);\r\n    };\r\n\r\n    /**\r\n     * Asynchronously loads the resource as raw binary data.  Returns a promise that will resolve to\r\n     * an ArrayBuffer once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @returns {Promise.<ArrayBuffer>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     * @example\r\n     * // load a single URL asynchronously\r\n     * resource.fetchArrayBuffer().then(function(arrayBuffer) {\r\n     *     // use the data\r\n     * }).otherwise(function(error) {\r\n     *     // an error occurred\r\n     * });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.fetchArrayBuffer = function () {\r\n        return this.fetch({\r\n            responseType : 'arraybuffer'\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource and calls fetchArrayBuffer() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @returns {Promise.<ArrayBuffer>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.fetchArrayBuffer = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.fetchArrayBuffer();\r\n    };\r\n\r\n    /**\r\n     * Asynchronously loads the given resource as a blob.  Returns a promise that will resolve to\r\n     * a Blob once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @returns {Promise.<Blob>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     * @example\r\n     * // load a single URL asynchronously\r\n     * resource.fetchBlob().then(function(blob) {\r\n     *     // use the data\r\n     * }).otherwise(function(error) {\r\n     *     // an error occurred\r\n     * });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.fetchBlob = function () {\r\n        return this.fetch({\r\n            responseType : 'blob'\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource and calls fetchBlob() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @returns {Promise.<Blob>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.fetchBlob = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.fetchBlob();\r\n    };\r\n\r\n    /**\r\n     * Asynchronously loads the given image resource.  Returns a promise that will resolve to\r\n     * an {@link Image} once loaded, or reject if the image failed to load.\r\n     *\r\n     * @param {Boolean} [preferBlob = false]  If true, we will load the image via a blob.\r\n     * @returns {Promise.<Image>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * // load a single image asynchronously\r\n     * resource.fetchImage().then(function(image) {\r\n     *     // use the loaded image\r\n     * }).otherwise(function(error) {\r\n     *     // an error occurred\r\n     * });\r\n     *\r\n     * // load several images in parallel\r\n     * when.all([resource1.fetchImage(), resource2.fetchImage()]).then(function(images) {\r\n     *     // images is an array containing all the loaded images\r\n     * });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.fetchImage = function (preferBlob) {\r\n        preferBlob = defaultValue(preferBlob, false);\r\n\r\n        checkAndResetRequest(this.request);\r\n\r\n        // We try to load the image normally if\r\n        // 1. Blobs aren't supported\r\n        // 2. It's a data URI\r\n        // 3. It's a blob URI\r\n        // 4. It doesn't have request headers and we preferBlob is false\r\n        if (!xhrBlobSupported || this.isDataUri || this.isBlobUri || (!this.hasHeaders && !preferBlob)) {\r\n            return fetchImage(this, true);\r\n        }\r\n\r\n        var blobPromise = this.fetchBlob();\r\n        if (!defined(blobPromise)) {\r\n            return;\r\n        }\r\n\r\n        var generatedBlobResource;\r\n        var generatedBlob;\r\n        return blobPromise\r\n            .then(function(blob) {\r\n                if (!defined(blob)) {\r\n                    return;\r\n                }\r\n                generatedBlob = blob;\r\n                var blobUrl = window.URL.createObjectURL(blob);\r\n                generatedBlobResource = new Resource({\r\n                    url: blobUrl\r\n                });\r\n\r\n                return fetchImage(generatedBlobResource);\r\n            })\r\n            .then(function(image) {\r\n                if (!defined(image)) {\r\n                    return;\r\n                }\r\n                window.URL.revokeObjectURL(generatedBlobResource.url);\r\n\r\n                // This is because the blob object is needed for DiscardMissingTileImagePolicy\r\n                // See https://github.com/AnalyticalGraphicsInc/cesium/issues/1353\r\n                image.blob = generatedBlob;\r\n                return image;\r\n            })\r\n            .otherwise(function(error) {\r\n                if (defined(generatedBlobResource)) {\r\n                    window.URL.revokeObjectURL(generatedBlobResource.url);\r\n                }\r\n\r\n                return when.reject(error);\r\n            });\r\n    };\r\n\r\n    function fetchImage(resource) {\r\n        var request = resource.request;\r\n        request.url = resource.url;\r\n        request.requestFunction = function() {\r\n            var url = resource.url;\r\n            var crossOrigin = false;\r\n\r\n            // data URIs can't have crossorigin set.\r\n            if (!resource.isDataUri && !resource.isBlobUri) {\r\n                crossOrigin = resource.isCrossOriginUrl;\r\n            }\r\n\r\n            var deferred = when.defer();\r\n\r\n            Resource._Implementations.createImage(url, crossOrigin, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        var promise = RequestScheduler.request(request);\r\n        if (!defined(promise)) {\r\n            return;\r\n        }\r\n\r\n        return promise\r\n            .otherwise(function(e) {\r\n                // Don't retry cancelled or otherwise aborted requests\r\n                if (request.state !== RequestState.FAILED) {\r\n                    return when.reject(e);\r\n                }\r\n\r\n                return resource.retryOnError(e)\r\n                    .then(function(retry) {\r\n                        if (retry) {\r\n                            // Reset request so it can try again\r\n                            request.state = RequestState.UNISSUED;\r\n                            request.deferred = undefined;\r\n\r\n                            return fetchImage(resource);\r\n                        }\r\n\r\n                        return when.reject(e);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Creates a Resource and calls fetchImage() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {Boolean} [options.preferBlob = false]  If true, we will load the image via a blob.\r\n     * @returns {Promise.<Image>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.fetchImage = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.fetchImage(options.preferBlob);\r\n    };\r\n\r\n    /**\r\n     * Asynchronously loads the given resource as text.  Returns a promise that will resolve to\r\n     * a String once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @returns {Promise.<String>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     * @example\r\n     * // load text from a URL, setting a custom header\r\n     * var resource = new Resource({\r\n     *   url: 'http://someUrl.com/someJson.txt',\r\n     *   headers: {\r\n     *     'X-Custom-Header' : 'some value'\r\n     *   }\r\n     * });\r\n     * resource.fetchText().then(function(text) {\r\n     *     // Do something with the text\r\n     * }).otherwise(function(error) {\r\n     *     // an error occurred\r\n     * });\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest|XMLHttpRequest}\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.fetchText = function() {\r\n        return this.fetch({\r\n            responseType : 'text'\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource and calls fetchText() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @returns {Promise.<String>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.fetchText = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.fetchText();\r\n    };\r\n\r\n    // note: &#42;&#47;&#42; below is */* but that ends the comment block early\r\n    /**\r\n     * Asynchronously loads the given resource as JSON.  Returns a promise that will resolve to\r\n     * a JSON object once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled. This function\r\n     * adds 'Accept: application/json,&#42;&#47;&#42;;q=0.01' to the request headers, if not\r\n     * already specified.\r\n     *\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * resource.fetchJson().then(function(jsonData) {\r\n     *     // Do something with the JSON object\r\n     * }).otherwise(function(error) {\r\n     *     // an error occurred\r\n     * });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.fetchJson = function() {\r\n        var promise = this.fetch({\r\n            responseType : 'text',\r\n            headers: {\r\n                Accept : 'application/json,*/*;q=0.01'\r\n            }\r\n        });\r\n\r\n        if (!defined(promise)) {\r\n            return undefined;\r\n        }\r\n\r\n        return promise\r\n            .then(function(value) {\r\n                if (!defined(value)) {\r\n                    return;\r\n                }\r\n                return JSON.parse(value);\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource and calls fetchJson() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.fetchJson = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.fetchJson();\r\n    };\r\n\r\n    /**\r\n     * Asynchronously loads the given resource as XML.  Returns a promise that will resolve to\r\n     * an XML Document once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @returns {Promise.<XMLDocument>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * // load XML from a URL, setting a custom header\r\n     * Cesium.loadXML('http://someUrl.com/someXML.xml', {\r\n     *   'X-Custom-Header' : 'some value'\r\n     * }).then(function(document) {\r\n     *     // Do something with the document\r\n     * }).otherwise(function(error) {\r\n     *     // an error occurred\r\n     * });\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest|XMLHttpRequest}\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.fetchXML = function() {\r\n        return this.fetch({\r\n            responseType : 'document',\r\n            overrideMimeType : 'text/xml'\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource and calls fetchXML() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @returns {Promise.<XMLDocument>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.fetchXML = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.fetchXML();\r\n    };\r\n\r\n    /**\r\n     * Requests a resource using JSONP.\r\n     *\r\n     * @param {String} [callbackParameterName='callback'] The callback parameter name that the server expects.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * // load a data asynchronously\r\n     * resource.fetchJsonp().then(function(data) {\r\n     *     // use the loaded data\r\n     * }).otherwise(function(error) {\r\n     *     // an error occurred\r\n     * });\r\n     *\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.fetchJsonp = function(callbackParameterName) {\r\n        callbackParameterName = defaultValue(callbackParameterName, 'callback');\r\n\r\n        checkAndResetRequest(this.request);\r\n\r\n        //generate a unique function name\r\n        var functionName;\r\n        do {\r\n            functionName = 'loadJsonp' + Math.random().toString().substring(2, 8);\r\n        } while (defined(window[functionName]));\r\n\r\n        return fetchJsonp(this, callbackParameterName, functionName);\r\n    };\r\n\r\n    function fetchJsonp(resource, callbackParameterName, functionName) {\r\n        var callbackQuery = {};\r\n        callbackQuery[callbackParameterName] = functionName;\r\n        resource.setQueryParameters(callbackQuery);\r\n\r\n        var request = resource.request;\r\n        request.url = resource.url;\r\n        request.requestFunction = function() {\r\n            var deferred = when.defer();\r\n\r\n            //assign a function with that name in the global scope\r\n            window[functionName] = function(data) {\r\n                deferred.resolve(data);\r\n\r\n                try {\r\n                    delete window[functionName];\r\n                } catch (e) {\r\n                    window[functionName] = undefined;\r\n                }\r\n            };\r\n\r\n            Resource._Implementations.loadAndExecuteScript(resource.url, functionName, deferred);\r\n            return deferred.promise;\r\n        };\r\n\r\n        var promise = RequestScheduler.request(request);\r\n        if (!defined(promise)) {\r\n            return;\r\n        }\r\n\r\n        return promise\r\n            .otherwise(function(e) {\r\n                if (request.state !== RequestState.FAILED) {\r\n                    return when.reject(e);\r\n                }\r\n\r\n                return resource.retryOnError(e)\r\n                    .then(function(retry) {\r\n                        if (retry) {\r\n                            // Reset request so it can try again\r\n                            request.state = RequestState.UNISSUED;\r\n                            request.deferred = undefined;\r\n\r\n                            return fetchJsonp(resource, callbackParameterName, functionName);\r\n                        }\r\n\r\n                        return when.reject(e);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Creates a Resource from a URL and calls fetchJsonp() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {String} [options.callbackParameterName='callback'] The callback parameter name that the server expects.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.fetchJsonp = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.fetchJsonp(options.callbackParameterName);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Resource.prototype._makeRequest = function(options) {\r\n        var resource = this;\r\n        checkAndResetRequest(resource.request);\r\n\r\n        var request = resource.request;\r\n        request.url = resource.url;\r\n\r\n        request.requestFunction = function() {\r\n            var responseType = options.responseType;\r\n            var headers = combine(options.headers, resource.headers);\r\n            var overrideMimeType = options.overrideMimeType;\r\n            var method = options.method;\r\n            var timeout = options.timeout;\r\n            var data = options.data;\r\n            var deferred = when.defer();\r\n            var xhr = Resource._Implementations.loadWithXhr(resource.url, responseType, method, data, headers, deferred, overrideMimeType, timeout);\r\n            if (defined(xhr) && defined(xhr.abort)) {\r\n                request.cancelFunction = function() {\r\n                    xhr.abort();\r\n                };\r\n            }\r\n            return deferred.promise;\r\n        };\r\n\r\n        var promise = RequestScheduler.request(request);\r\n        if (!defined(promise)) {\r\n            return;\r\n        }\r\n\r\n        return promise\r\n            .then(function(data) {\r\n                return data;\r\n            })\r\n            .otherwise(function(e) {\r\n                if (request.state !== RequestState.FAILED) {\r\n                    return when.reject(e);\r\n                }\r\n\r\n                return resource.retryOnError(e)\r\n                    .then(function(retry) {\r\n                        if (retry) {\r\n                            // Reset request so it can try again\r\n                            request.state = RequestState.UNISSUED;\r\n                            request.deferred = undefined;\r\n\r\n                            return resource.fetch(options);\r\n                        }\r\n\r\n                        return when.reject(e);\r\n                    });\r\n            });\r\n    };\r\n\r\n    var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n\r\n    function decodeDataUriText(isBase64, data) {\r\n        var result = decodeURIComponent(data);\r\n        if (isBase64) {\r\n            return atob(result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function decodeDataUriArrayBuffer(isBase64, data) {\r\n        var byteString = decodeDataUriText(isBase64, data);\r\n        var buffer = new ArrayBuffer(byteString.length);\r\n        var view = new Uint8Array(buffer);\r\n        for (var i = 0; i < byteString.length; i++) {\r\n            view[i] = byteString.charCodeAt(i);\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    function decodeDataUri(dataUriRegexResult, responseType) {\r\n        responseType = defaultValue(responseType, '');\r\n        var mimeType = dataUriRegexResult[1];\r\n        var isBase64 = !!dataUriRegexResult[2];\r\n        var data = dataUriRegexResult[3];\r\n\r\n        switch (responseType) {\r\n            case '':\r\n            case 'text':\r\n                return decodeDataUriText(isBase64, data);\r\n            case 'arraybuffer':\r\n                return decodeDataUriArrayBuffer(isBase64, data);\r\n            case 'blob':\r\n                var buffer = decodeDataUriArrayBuffer(isBase64, data);\r\n                return new Blob([buffer], {\r\n                    type : mimeType\r\n                });\r\n            case 'document':\r\n                var parser = new DOMParser();\r\n                return parser.parseFromString(decodeDataUriText(isBase64, data), mimeType);\r\n            case 'json':\r\n                return JSON.parse(decodeDataUriText(isBase64, data));\r\n            default:\r\n                \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asynchronously loads the given resource.  Returns a promise that will resolve to\r\n     * the result once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled. It's recommended that you use\r\n     * the more specific functions eg. fetchJson, fetchBlob, etc.\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {Object} [options.headers] Additional HTTP headers to send with the request, if any.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * resource.fetch()\r\n     *   .then(function(body) {\r\n     *       // use the data\r\n     *   }).otherwise(function(error) {\r\n     *       // an error occurred\r\n     *   });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.fetch = function(options) {\r\n        options = defaultClone(options, {});\r\n        options.method = 'GET';\r\n\r\n        return this._makeRequest(options);\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource from a URL and calls fetch() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.fetch = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.fetch({\r\n            // Make copy of just the needed fields because headers can be passed to both the constructor and to fetch\r\n            responseType: options.responseType,\r\n            overrideMimeType: options.overrideMimeType,\r\n            timeout: options.timeout\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Asynchronously deletes the given resource.  Returns a promise that will resolve to\r\n     * the result once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {Object} [options.headers] Additional HTTP headers to send with the request, if any.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * resource.delete()\r\n     *   .then(function(body) {\r\n     *       // use the data\r\n     *   }).otherwise(function(error) {\r\n     *       // an error occurred\r\n     *   });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.delete = function(options) {\r\n        options = defaultClone(options, {});\r\n        options.method = 'DELETE';\r\n\r\n        return this._makeRequest(options);\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource from a URL and calls delete() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.data] Data that is posted with the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.delete = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.delete({\r\n            // Make copy of just the needed fields because headers can be passed to both the constructor and to fetch\r\n            responseType: options.responseType,\r\n            overrideMimeType: options.overrideMimeType,\r\n            timeout: options.timeout,\r\n            data: options.data\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Asynchronously gets headers the given resource.  Returns a promise that will resolve to\r\n     * the result once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {Object} [options.headers] Additional HTTP headers to send with the request, if any.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * resource.head()\r\n     *   .then(function(headers) {\r\n     *       // use the data\r\n     *   }).otherwise(function(error) {\r\n     *       // an error occurred\r\n     *   });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.head = function(options) {\r\n        options = defaultClone(options, {});\r\n        options.method = 'HEAD';\r\n\r\n        return this._makeRequest(options);\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource from a URL and calls head() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.head = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.head({\r\n            // Make copy of just the needed fields because headers can be passed to both the constructor and to fetch\r\n            responseType: options.responseType,\r\n            overrideMimeType: options.overrideMimeType,\r\n            timeout: options.timeout\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Asynchronously gets options the given resource.  Returns a promise that will resolve to\r\n     * the result once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {Object} [options.headers] Additional HTTP headers to send with the request, if any.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * resource.options()\r\n     *   .then(function(headers) {\r\n     *       // use the data\r\n     *   }).otherwise(function(error) {\r\n     *       // an error occurred\r\n     *   });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.options = function(options) {\r\n        options = defaultClone(options, {});\r\n        options.method = 'OPTIONS';\r\n\r\n        return this._makeRequest(options);\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource from a URL and calls options() on it.\r\n     *\r\n     * @param {String|Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.options = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.options({\r\n            // Make copy of just the needed fields because headers can be passed to both the constructor and to fetch\r\n            responseType: options.responseType,\r\n            overrideMimeType: options.overrideMimeType,\r\n            timeout: options.timeout\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Asynchronously posts data to the given resource.  Returns a promise that will resolve to\r\n     * the result once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @param {Object} data Data that is posted with the resource.\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Object} [options.data] Data that is posted with the resource.\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {Object} [options.headers] Additional HTTP headers to send with the request, if any.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * resource.post(data)\r\n     *   .then(function(result) {\r\n     *       // use the result\r\n     *   }).otherwise(function(error) {\r\n     *       // an error occurred\r\n     *   });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.post = function(data, options) {\r\n        Check.defined('data', data);\r\n\r\n        options = defaultClone(options, {});\r\n        options.method = 'POST';\r\n        options.data = data;\r\n\r\n        return this._makeRequest(options);\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource from a URL and calls post() on it.\r\n     *\r\n     * @param {Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} options.data Data that is posted with the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.post = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.post(options.data, {\r\n            // Make copy of just the needed fields because headers can be passed to both the constructor and to post\r\n            responseType: options.responseType,\r\n            overrideMimeType: options.overrideMimeType,\r\n            timeout: options.timeout\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Asynchronously puts data to the given resource.  Returns a promise that will resolve to\r\n     * the result once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @param {Object} data Data that is posted with the resource.\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {Object} [options.headers] Additional HTTP headers to send with the request, if any.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * resource.put(data)\r\n     *   .then(function(result) {\r\n     *       // use the result\r\n     *   }).otherwise(function(error) {\r\n     *       // an error occurred\r\n     *   });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.put = function(data, options) {\r\n        Check.defined('data', data);\r\n\r\n        options = defaultClone(options, {});\r\n        options.method = 'PUT';\r\n        options.data = data;\r\n\r\n        return this._makeRequest(options);\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource from a URL and calls put() on it.\r\n     *\r\n     * @param {Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} options.data Data that is posted with the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.put = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.put(options.data, {\r\n            // Make copy of just the needed fields because headers can be passed to both the constructor and to post\r\n            responseType: options.responseType,\r\n            overrideMimeType: options.overrideMimeType,\r\n            timeout: options.timeout\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Asynchronously patches data to the given resource.  Returns a promise that will resolve to\r\n     * the result once loaded, or reject if the resource failed to load.  The data is loaded\r\n     * using XMLHttpRequest, which means that in order to make requests to another origin,\r\n     * the server must have Cross-Origin Resource Sharing (CORS) headers enabled.\r\n     *\r\n     * @param {Object} data Data that is posted with the resource.\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {Object} [options.headers] Additional HTTP headers to send with the request, if any.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     *\r\n     *\r\n     * @example\r\n     * resource.patch(data)\r\n     *   .then(function(result) {\r\n     *       // use the result\r\n     *   }).otherwise(function(error) {\r\n     *       // an error occurred\r\n     *   });\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\r\n     */\r\n    Resource.prototype.patch = function(data, options) {\r\n        Check.defined('data', data);\r\n\r\n        options = defaultClone(options, {});\r\n        options.method = 'PATCH';\r\n        options.data = data;\r\n\r\n        return this._makeRequest(options);\r\n    };\r\n\r\n    /**\r\n     * Creates a Resource from a URL and calls patch() on it.\r\n     *\r\n     * @param {Object} options A url or an object with the following properties\r\n     * @param {String} options.url The url of the resource.\r\n     * @param {Object} options.data Data that is posted with the resource.\r\n     * @param {Object} [options.queryParameters] An object containing query parameters that will be sent when retrieving the resource.\r\n     * @param {Object} [options.templateValues] Key/Value pairs that are used to replace template values (eg. {x}).\r\n     * @param {Object} [options.headers={}] Additional HTTP headers that will be sent.\r\n     * @param {DefaultProxy} [options.proxy] A proxy to be used when loading the resource.\r\n     * @param {Resource~RetryCallback} [options.retryCallback] The Function to call when a request for this resource fails. If it returns true, the request will be retried.\r\n     * @param {Number} [options.retryAttempts=0] The number of times the retryCallback should be called before giving up.\r\n     * @param {Request} [options.request] A Request object that will be used. Intended for internal use only.\r\n     * @param {String} [options.responseType] The type of response.  This controls the type of item returned.\r\n     * @param {String} [options.overrideMimeType] Overrides the MIME type returned by the server.\r\n     * @param {Number} [options.timeout] The timeout of the request, in milliseconds.  If the request does not complete\r\n     *                 within this timeout, it is aborted and the promise is rejected with a RequestErrorEvent with the\r\n     *                 isTimeout property set to true.  If this property is undefined, no client-side timeout applies.\r\n     * @returns {Promise.<Object>|undefined} a promise that will resolve to the requested data when loaded. Returns undefined if <code>request.throttle</code> is true and the request does not have high enough priority.\r\n     */\r\n    Resource.patch = function (options) {\r\n        var resource = new Resource(options);\r\n        return resource.patch(options.data, {\r\n            // Make copy of just the needed fields because headers can be passed to both the constructor and to post\r\n            responseType: options.responseType,\r\n            overrideMimeType: options.overrideMimeType,\r\n            timeout: options.timeout\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Contains implementations of functions that can be replaced for testing\r\n     *\r\n     * @private\r\n     */\r\n    Resource._Implementations = {};\r\n\r\n    Resource._Implementations.createImage = function(url, crossOrigin, deferred) {\r\n        var image = new Image();\r\n\r\n        image.onload = function() {\r\n            deferred.resolve(image);\r\n        };\r\n\r\n        image.onerror = function(e) {\r\n            deferred.reject(e);\r\n        };\r\n\r\n        if (crossOrigin) {\r\n            if (TrustedServers.contains(url)) {\r\n                image.crossOrigin = 'use-credentials';\r\n            } else {\r\n                image.crossOrigin = '';\r\n            }\r\n        }\r\n\r\n        image.src = url;\r\n    };\r\n\r\n    function decodeResponse(loadWithHttpResponse, responseType) {\r\n        switch (responseType) {\r\n          case 'text':\r\n              return loadWithHttpResponse.toString('utf8');\r\n          case 'json':\r\n              return JSON.parse(loadWithHttpResponse.toString('utf8'));\r\n          default:\r\n              return new Uint8Array(loadWithHttpResponse).buffer;\r\n        }\r\n    }\r\n\r\n    function loadWithHttpRequest(url, responseType, method, data, headers, deferred, overrideMimeType) {\r\n        // Note: only the 'json' and 'text' responseTypes transforms the loaded buffer\r\n        var URL = require('url').parse(url);\r\n        var http = URL.protocol === 'https:' ? require('https') : require('http');\r\n        var zlib = require('zlib');\r\n        var options = {\r\n            protocol : URL.protocol,\r\n            hostname : URL.hostname,\r\n            port : URL.port,\r\n            path : URL.path,\r\n            query : URL.query,\r\n            method : method,\r\n            headers : headers\r\n        };\r\n\r\n        http.request(options)\r\n            .on('response', function(res) {\r\n                if (res.statusCode < 200 || res.statusCode >= 300) {\r\n                    deferred.reject(new RequestErrorEvent(res.statusCode, res, res.headers));\r\n                    return;\r\n                }\r\n\r\n                var chunkArray = [];\r\n                res.on('data', function(chunk) {\r\n                    chunkArray.push(chunk);\r\n                });\r\n\r\n                res.on('end', function() {\r\n                    var result = Buffer.concat(chunkArray); // eslint-disable-line\r\n                    if (res.headers['content-encoding'] === 'gzip') {\r\n                        zlib.gunzip(result, function(error, resultUnzipped) {\r\n                            if (error) {\r\n                                deferred.reject(new RuntimeError('Error decompressing response.'));\r\n                            } else {\r\n                                deferred.resolve(decodeResponse(resultUnzipped, responseType));\r\n                            }\r\n                        });\r\n                    } else {\r\n                        deferred.resolve(decodeResponse(result, responseType));\r\n                    }\r\n                });\r\n            }).on('error', function(e) {\r\n                deferred.reject(new RequestErrorEvent());\r\n            }).end();\r\n    }\r\n\r\n    var noXMLHttpRequest = typeof XMLHttpRequest === 'undefined';\r\n    Resource._Implementations.loadWithXhr = function(url, responseType, method, data, headers, deferred, overrideMimeType, timeout) {\r\n        var dataUriRegexResult = dataUriRegex.exec(url);\r\n        if (dataUriRegexResult !== null) {\r\n            deferred.resolve(decodeDataUri(dataUriRegexResult, responseType));\r\n            return;\r\n        }\r\n\r\n        if (noXMLHttpRequest) {\r\n            loadWithHttpRequest(url, responseType, method, data, headers, deferred, overrideMimeType);\r\n            return;\r\n        }\r\n\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        if (TrustedServers.contains(url)) {\r\n            xhr.withCredentials = true;\r\n        }\r\n\r\n        xhr.open(method, url, true);\r\n\r\n        if (defined(overrideMimeType) && defined(xhr.overrideMimeType)) {\r\n            xhr.overrideMimeType(overrideMimeType);\r\n        }\r\n\r\n        if (defined(headers)) {\r\n            for (var key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    xhr.setRequestHeader(key, headers[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (defined(responseType)) {\r\n            xhr.responseType = responseType;\r\n        }\r\n\r\n        if (defined(timeout)) {\r\n            xhr.timeout = timeout;\r\n        }\r\n\r\n        // While non-standard, file protocol always returns a status of 0 on success\r\n        var localFile = false;\r\n        if (typeof url === 'string') {\r\n            localFile = (url.indexOf('file://') === 0) || (typeof window !== 'undefined' && window.location.origin === 'file://');\r\n        }\r\n\r\n        xhr.onload = function() {\r\n            if ((xhr.status < 200 || xhr.status >= 300) && !(localFile && xhr.status === 0)) {\r\n                deferred.reject(new RequestErrorEvent(xhr.status, xhr.response, xhr.getAllResponseHeaders()));\r\n                return;\r\n            }\r\n\r\n            var response = typeof xhr.response !== 'undefined' ? xhr.response : xhr.responseText;\r\n            var browserResponseType = xhr.responseType;\r\n\r\n            if (method === 'HEAD' || method === 'OPTIONS') {\r\n                var responseHeaderString = xhr.getAllResponseHeaders();\r\n                var splitHeaders = responseHeaderString.trim().split(/[\\r\\n]+/);\r\n\r\n                var responseHeaders = {};\r\n                splitHeaders.forEach(function (line) {\r\n                    var parts = line.split(': ');\r\n                    var header = parts.shift();\r\n                    responseHeaders[header] = parts.join(': ');\r\n                });\r\n\r\n                deferred.resolve(responseHeaders);\r\n                return;\r\n            }\r\n\r\n            //All modern browsers will go into either the first or second if block or last else block.\r\n            //Other code paths support older browsers that either do not support the supplied responseType\r\n            //or do not support the xhr.response property.\r\n            if (xhr.status === 204) {\r\n                // accept no content\r\n                deferred.resolve();\r\n            } else if (defined(xhr.response) && (!defined(responseType) || (browserResponseType === responseType))) {\r\n                deferred.resolve(response);\r\n            } else if ((responseType === 'json') && typeof response === 'string') {\r\n                try {\r\n                    deferred.resolve(JSON.parse(response));\r\n                } catch (e) {\r\n                    deferred.reject(e);\r\n                }\r\n            } else if ((responseType === 'document') && typeof response === 'string') {\r\n                try {\r\n                    var parser = new DOMParser();\r\n                    deferred.resolve(parser.parseFromString(response, 'text/xml'));\r\n                } catch (e) {\r\n                    deferred.reject(e);\r\n                }\r\n            } else if ((browserResponseType === '' || browserResponseType === 'document') && defined(xhr.responseXML) && xhr.responseXML.hasChildNodes()) {\r\n                deferred.resolve(xhr.responseXML);\r\n            } else if ((browserResponseType === '' || browserResponseType === 'text') && defined(xhr.responseText)) {\r\n                deferred.resolve(xhr.responseText);\r\n            } else if (typeof response === 'string') {\r\n                deferred.resolve(response);\r\n            } else {\r\n                deferred.reject(new RuntimeError('Invalid XMLHttpRequest response type.'));\r\n            }\r\n        };\r\n\r\n        xhr.onerror = function(e) {\r\n            deferred.reject(new RequestErrorEvent());\r\n        };\r\n\r\n        xhr.ontimeout = function(e) {\r\n            var timeout = new RequestErrorEvent();\r\n            timeout.isTimeout = true;\r\n            deferred.reject(timeout);\r\n        };\r\n\r\n        xhr.send(data);\r\n\r\n        return xhr;\r\n    };\r\n\r\n    Resource._Implementations.loadAndExecuteScript = function(url, functionName, deferred) {\r\n        return loadAndExecuteScript(url, functionName).otherwise(deferred.reject);\r\n    };\r\n\r\n    /**\r\n     * The default implementations\r\n     *\r\n     * @private\r\n     */\r\n    Resource._DefaultImplementations = {};\r\n    Resource._DefaultImplementations.createImage = Resource._Implementations.createImage;\r\n    Resource._DefaultImplementations.loadWithXhr = Resource._Implementations.loadWithXhr;\r\n    Resource._DefaultImplementations.loadAndExecuteScript = Resource._Implementations.loadAndExecuteScript;\r\n\r\n    /**\r\n     * A resource instance initialized to the current browser location\r\n     *\r\n     * @type {Resource}\r\n     * @constant\r\n     */\r\n    Resource.DEFAULT = freezeObject(new Resource({\r\n        url: (typeof document === 'undefined') ? '' : document.location.href.split('?')[0]\r\n    }));\r\n\r\n    /**\r\n     * A function that returns the value of the property.\r\n     * @callback Resource~RetryCallback\r\n     *\r\n     * @param {Resource} [resource] The resource that failed to load.\r\n     * @param {Error} [error] The error that occurred during the loading of the resource.\r\n     * @returns {Boolean|Promise<Boolean>} If true or a promise that resolved to true, the resource will be retried. Otherwise the failure will be returned.\r\n     */\r\n\r\n    return Resource;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Resource.js\n// module id = 57\n// module chunks = 0","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/process-nextick-args/index.js\n// module id = 58\n// module chunks = 0","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/safe-buffer/index.js\n// module id = 59\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/node-libs-browser/node_modules/string_decoder/lib/string_decoder.js\n// module id = 60\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-browserify/index.js\n// module id = 61\n// module chunks = 0","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/utils/common.js\n// module id = 62\n// module chunks = 0","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-options.js\n// module id = 63\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './Intersect'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        Intersect) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.\r\n     * @alias AxisAlignedBoundingBox\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} [minimum=Cartesian3.ZERO] The minimum point along the x, y, and z axes.\r\n     * @param {Cartesian3} [maximum=Cartesian3.ZERO] The maximum point along the x, y, and z axes.\r\n     * @param {Cartesian3} [center] The center of the box; automatically computed if not supplied.\r\n     *\r\n     * @see BoundingSphere\r\n     * @see BoundingRectangle\r\n     */\r\n    function AxisAlignedBoundingBox(minimum, maximum, center) {\r\n        /**\r\n         * The minimum point defining the bounding box.\r\n         * @type {Cartesian3}\r\n         * @default {@link Cartesian3.ZERO}\r\n         */\r\n        this.minimum = Cartesian3.clone(defaultValue(minimum, Cartesian3.ZERO));\r\n\r\n        /**\r\n         * The maximum point defining the bounding box.\r\n         * @type {Cartesian3}\r\n         * @default {@link Cartesian3.ZERO}\r\n         */\r\n        this.maximum = Cartesian3.clone(defaultValue(maximum, Cartesian3.ZERO));\r\n\r\n        //If center was not defined, compute it.\r\n        if (!defined(center)) {\r\n            center = Cartesian3.midpoint(this.minimum, this.maximum, new Cartesian3());\r\n        } else {\r\n            center = Cartesian3.clone(center);\r\n        }\r\n\r\n        /**\r\n         * The center point of the bounding box.\r\n         * @type {Cartesian3}\r\n         */\r\n        this.center = center;\r\n    }\r\n\r\n    /**\r\n     * Computes an instance of an AxisAlignedBoundingBox. The box is determined by\r\n     * finding the points spaced the farthest apart on the x, y, and z axes.\r\n     *\r\n     * @param {Cartesian3[]} positions List of points that the bounding box will enclose.  Each point must have a <code>x</code>, <code>y</code>, and <code>z</code> properties.\r\n     * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\r\n     * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Compute an axis aligned bounding box enclosing two points.\r\n     * var box = Cesium.AxisAlignedBoundingBox.fromPoints([new Cesium.Cartesian3(2, 0, 0), new Cesium.Cartesian3(-2, 0, 0)]);\r\n     */\r\n    AxisAlignedBoundingBox.fromPoints = function(positions, result) {\r\n        if (!defined(result)) {\r\n            result = new AxisAlignedBoundingBox();\r\n        }\r\n\r\n        if (!defined(positions) || positions.length === 0) {\r\n            result.minimum = Cartesian3.clone(Cartesian3.ZERO, result.minimum);\r\n            result.maximum = Cartesian3.clone(Cartesian3.ZERO, result.maximum);\r\n            result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n            return result;\r\n        }\r\n\r\n        var minimumX = positions[0].x;\r\n        var minimumY = positions[0].y;\r\n        var minimumZ = positions[0].z;\r\n\r\n        var maximumX = positions[0].x;\r\n        var maximumY = positions[0].y;\r\n        var maximumZ = positions[0].z;\r\n\r\n        var length = positions.length;\r\n        for ( var i = 1; i < length; i++) {\r\n            var p = positions[i];\r\n            var x = p.x;\r\n            var y = p.y;\r\n            var z = p.z;\r\n\r\n            minimumX = Math.min(x, minimumX);\r\n            maximumX = Math.max(x, maximumX);\r\n            minimumY = Math.min(y, minimumY);\r\n            maximumY = Math.max(y, maximumY);\r\n            minimumZ = Math.min(z, minimumZ);\r\n            maximumZ = Math.max(z, maximumZ);\r\n        }\r\n\r\n        var minimum = result.minimum;\r\n        minimum.x = minimumX;\r\n        minimum.y = minimumY;\r\n        minimum.z = minimumZ;\r\n\r\n        var maximum = result.maximum;\r\n        maximum.x = maximumX;\r\n        maximum.y = maximumY;\r\n        maximum.z = maximumZ;\r\n\r\n        result.center = Cartesian3.midpoint(minimum, maximum, result.center);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a AxisAlignedBoundingBox instance.\r\n     *\r\n     * @param {AxisAlignedBoundingBox} box The bounding box to duplicate.\r\n     * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\r\n     * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if none was provided. (Returns undefined if box is undefined)\r\n     */\r\n    AxisAlignedBoundingBox.clone = function(box, result) {\r\n        if (!defined(box)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new AxisAlignedBoundingBox(box.minimum, box.maximum, box.center);\r\n        }\r\n\r\n        result.minimum = Cartesian3.clone(box.minimum, result.minimum);\r\n        result.maximum = Cartesian3.clone(box.maximum, result.maximum);\r\n        result.center = Cartesian3.clone(box.center, result.center);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided AxisAlignedBoundingBox componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {AxisAlignedBoundingBox} [left] The first AxisAlignedBoundingBox.\r\n     * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    AxisAlignedBoundingBox.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                Cartesian3.equals(left.center, right.center) &&\r\n                Cartesian3.equals(left.minimum, right.minimum) &&\r\n                Cartesian3.equals(left.maximum, right.maximum));\r\n    };\r\n\r\n    var intersectScratch = new Cartesian3();\r\n    /**\r\n     * Determines which side of a plane a box is located.\r\n     *\r\n     * @param {AxisAlignedBoundingBox} box The bounding box to test.\r\n     * @param {Plane} plane The plane to test against.\r\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\r\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\r\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\r\n     *                      intersects the plane.\r\n     */\r\n    AxisAlignedBoundingBox.intersectPlane = function(box, plane) {\r\n        \r\n\r\n        intersectScratch = Cartesian3.subtract(box.maximum, box.minimum, intersectScratch);\r\n        var h = Cartesian3.multiplyByScalar(intersectScratch, 0.5, intersectScratch); //The positive half diagonal\r\n        var normal = plane.normal;\r\n        var e = h.x * Math.abs(normal.x) + h.y * Math.abs(normal.y) + h.z * Math.abs(normal.z);\r\n        var s = Cartesian3.dot(box.center, normal) + plane.distance; //signed distance from center\r\n\r\n        if (s - e > 0) {\r\n            return Intersect.INSIDE;\r\n        }\r\n\r\n        if (s + e < 0) {\r\n            //Not in front because normals point inward\r\n            return Intersect.OUTSIDE;\r\n        }\r\n\r\n        return Intersect.INTERSECTING;\r\n    };\r\n\r\n    /**\r\n     * Duplicates this AxisAlignedBoundingBox instance.\r\n     *\r\n     * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\r\n     * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\r\n     */\r\n    AxisAlignedBoundingBox.prototype.clone = function(result) {\r\n        return AxisAlignedBoundingBox.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Determines which side of a plane this box is located.\r\n     *\r\n     * @param {Plane} plane The plane to test against.\r\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\r\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\r\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\r\n     *                      intersects the plane.\r\n     */\r\n    AxisAlignedBoundingBox.prototype.intersectPlane = function(plane) {\r\n        return AxisAlignedBoundingBox.intersectPlane(this, plane);\r\n    };\r\n\r\n    /**\r\n     * Compares this AxisAlignedBoundingBox against the provided AxisAlignedBoundingBox componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {AxisAlignedBoundingBox} [right] The right hand side AxisAlignedBoundingBox.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    AxisAlignedBoundingBox.prototype.equals = function(right) {\r\n        return AxisAlignedBoundingBox.equals(this, right);\r\n    };\r\n\r\n    return AxisAlignedBoundingBox;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/AxisAlignedBoundingBox.js\n// module id = 64\n// module chunks = 0","define([\r\n        './Cartesian2',\r\n        './Cartographic',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './GeographicProjection',\r\n        './Intersect',\r\n        './Rectangle'\r\n    ], function(\r\n        Cartesian2,\r\n        Cartographic,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        GeographicProjection,\r\n        Intersect,\r\n        Rectangle) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A bounding rectangle given by a corner, width and height.\r\n     * @alias BoundingRectangle\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The x coordinate of the rectangle.\r\n     * @param {Number} [y=0.0] The y coordinate of the rectangle.\r\n     * @param {Number} [width=0.0] The width of the rectangle.\r\n     * @param {Number} [height=0.0] The height of the rectangle.\r\n     *\r\n     * @see BoundingSphere\r\n     * @see Packable\r\n     */\r\n    function BoundingRectangle(x, y, width, height) {\r\n        /**\r\n         * The x coordinate of the rectangle.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The y coordinate of the rectangle.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n\r\n        /**\r\n         * The width of the rectangle.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.width = defaultValue(width, 0.0);\r\n\r\n        /**\r\n         * The height of the rectangle.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.height = defaultValue(height, 0.0);\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    BoundingRectangle.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {BoundingRectangle} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    BoundingRectangle.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex++] = value.y;\r\n        array[startingIndex++] = value.width;\r\n        array[startingIndex] = value.height;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {BoundingRectangle} [result] The object into which to store the result.\r\n     * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n     */\r\n    BoundingRectangle.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingRectangle();\r\n        }\r\n        result.x = array[startingIndex++];\r\n        result.y = array[startingIndex++];\r\n        result.width = array[startingIndex++];\r\n        result.height = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a bounding rectangle enclosing the list of 2D points.\r\n     * The rectangle is oriented with the corner at the bottom left.\r\n     *\r\n     * @param {Cartesian2[]} positions List of points that the bounding rectangle will enclose.  Each point must have <code>x</code> and <code>y</code> properties.\r\n     * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n     * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n     */\r\n    BoundingRectangle.fromPoints = function(positions, result) {\r\n        if (!defined(result)) {\r\n            result = new BoundingRectangle();\r\n        }\r\n\r\n        if (!defined(positions) || positions.length === 0) {\r\n            result.x = 0;\r\n            result.y = 0;\r\n            result.width = 0;\r\n            result.height = 0;\r\n            return result;\r\n        }\r\n\r\n        var length = positions.length;\r\n\r\n        var minimumX = positions[0].x;\r\n        var minimumY = positions[0].y;\r\n\r\n        var maximumX = positions[0].x;\r\n        var maximumY = positions[0].y;\r\n\r\n        for ( var i = 1; i < length; i++) {\r\n            var p = positions[i];\r\n            var x = p.x;\r\n            var y = p.y;\r\n\r\n            minimumX = Math.min(x, minimumX);\r\n            maximumX = Math.max(x, maximumX);\r\n            minimumY = Math.min(y, minimumY);\r\n            maximumY = Math.max(y, maximumY);\r\n        }\r\n\r\n        result.x = minimumX;\r\n        result.y = minimumY;\r\n        result.width = maximumX - minimumX;\r\n        result.height = maximumY - minimumY;\r\n        return result;\r\n    };\r\n\r\n    var defaultProjection = new GeographicProjection();\r\n    var fromRectangleLowerLeft = new Cartographic();\r\n    var fromRectangleUpperRight = new Cartographic();\r\n    /**\r\n     * Computes a bounding rectangle from a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The valid rectangle used to create a bounding rectangle.\r\n     * @param {Object} [projection=GeographicProjection] The projection used to project the rectangle into 2D.\r\n     * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n     * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n     */\r\n    BoundingRectangle.fromRectangle = function(rectangle, projection, result) {\r\n        if (!defined(result)) {\r\n            result = new BoundingRectangle();\r\n        }\r\n\r\n        if (!defined(rectangle)) {\r\n            result.x = 0;\r\n            result.y = 0;\r\n            result.width = 0;\r\n            result.height = 0;\r\n            return result;\r\n        }\r\n\r\n        projection = defaultValue(projection, defaultProjection);\r\n\r\n        var lowerLeft = projection.project(Rectangle.southwest(rectangle, fromRectangleLowerLeft));\r\n        var upperRight = projection.project(Rectangle.northeast(rectangle, fromRectangleUpperRight));\r\n\r\n        Cartesian2.subtract(upperRight, lowerLeft, upperRight);\r\n\r\n        result.x = lowerLeft.x;\r\n        result.y = lowerLeft.y;\r\n        result.width = upperRight.x;\r\n        result.height = upperRight.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a BoundingRectangle instance.\r\n     *\r\n     * @param {BoundingRectangle} rectangle The bounding rectangle to duplicate.\r\n     * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n     * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided. (Returns undefined if rectangle is undefined)\r\n     */\r\n    BoundingRectangle.clone = function(rectangle, result) {\r\n        if (!defined(rectangle)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new BoundingRectangle(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\r\n        }\r\n\r\n        result.x = rectangle.x;\r\n        result.y = rectangle.y;\r\n        result.width = rectangle.width;\r\n        result.height = rectangle.height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a bounding rectangle that is the union of the left and right bounding rectangles.\r\n     *\r\n     * @param {BoundingRectangle} left A rectangle to enclose in bounding rectangle.\r\n     * @param {BoundingRectangle} right A rectangle to enclose in a bounding rectangle.\r\n     * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n     * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n     */\r\n    BoundingRectangle.union = function(left, right, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new BoundingRectangle();\r\n        }\r\n\r\n        var lowerLeftX = Math.min(left.x, right.x);\r\n        var lowerLeftY = Math.min(left.y, right.y);\r\n        var upperRightX = Math.max(left.x + left.width, right.x + right.width);\r\n        var upperRightY = Math.max(left.y + left.height, right.y + right.height);\r\n\r\n        result.x = lowerLeftX;\r\n        result.y = lowerLeftY;\r\n        result.width = upperRightX - lowerLeftX;\r\n        result.height = upperRightY - lowerLeftY;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a bounding rectangle by enlarging the provided rectangle until it contains the provided point.\r\n     *\r\n     * @param {BoundingRectangle} rectangle A rectangle to expand.\r\n     * @param {Cartesian2} point A point to enclose in a bounding rectangle.\r\n     * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n     * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n     */\r\n    BoundingRectangle.expand = function(rectangle, point, result) {\r\n        \r\n\r\n        result = BoundingRectangle.clone(rectangle, result);\r\n\r\n        var width = point.x - result.x;\r\n        var height = point.y - result.y;\r\n\r\n        if (width > result.width) {\r\n            result.width = width;\r\n        } else if (width < 0) {\r\n            result.width -= width;\r\n            result.x = point.x;\r\n        }\r\n\r\n        if (height > result.height) {\r\n            result.height = height;\r\n        } else if (height < 0) {\r\n            result.height -= height;\r\n            result.y = point.y;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determines if two rectangles intersect.\r\n     *\r\n     * @param {BoundingRectangle} left A rectangle to check for intersection.\r\n     * @param {BoundingRectangle} right The other rectangle to check for intersection.\r\n     * @returns {Intersect} <code>Intersect.INTESECTING</code> if the rectangles intersect, <code>Intersect.OUTSIDE</code> otherwise.\r\n     */\r\n    BoundingRectangle.intersect = function(left, right) {\r\n        \r\n\r\n        var leftX = left.x;\r\n        var leftY = left.y;\r\n        var rightX = right.x;\r\n        var rightY = right.y;\r\n        if (!(leftX > rightX + right.width ||\r\n              leftX + left.width < rightX ||\r\n              leftY + left.height < rightY ||\r\n              leftY > rightY + right.height)) {\r\n            return Intersect.INTERSECTING;\r\n        }\r\n\r\n        return Intersect.OUTSIDE;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided BoundingRectangles componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {BoundingRectangle} [left] The first BoundingRectangle.\r\n     * @param {BoundingRectangle} [right] The second BoundingRectangle.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    BoundingRectangle.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.x === right.x) &&\r\n                (left.y === right.y) &&\r\n                (left.width === right.width) &&\r\n                (left.height === right.height));\r\n    };\r\n\r\n    /**\r\n     * Duplicates this BoundingRectangle instance.\r\n     *\r\n     * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n     * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n     */\r\n    BoundingRectangle.prototype.clone = function(result) {\r\n        return BoundingRectangle.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Determines if this rectangle intersects with another.\r\n     *\r\n     * @param {BoundingRectangle} right A rectangle to check for intersection.\r\n     * @returns {Intersect} <code>Intersect.INTESECTING</code> if the rectangles intersect, <code>Intersect.OUTSIDE</code> otherwise.\r\n     */\r\n    BoundingRectangle.prototype.intersect = function(right) {\r\n        return BoundingRectangle.intersect(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this BoundingRectangle against the provided BoundingRectangle componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {BoundingRectangle} [right] The right hand side BoundingRectangle.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    BoundingRectangle.prototype.equals = function(right) {\r\n        return BoundingRectangle.equals(this, right);\r\n    };\r\n\r\n    return BoundingRectangle;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/BoundingRectangle.js\n// module id = 65\n// module chunks = 0","define([\r\n        './arrayRemoveDuplicates',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryPipeline',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './Matrix3',\r\n        './PolygonPipeline',\r\n        './PrimitiveType',\r\n        './Quaternion',\r\n        './Queue',\r\n        './WindingOrder'\r\n    ], function(\r\n        arrayRemoveDuplicates,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryPipeline,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        Matrix3,\r\n        PolygonPipeline,\r\n        PrimitiveType,\r\n        Quaternion,\r\n        Queue,\r\n        WindingOrder) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PolygonGeometryLibrary = {};\r\n\r\n    PolygonGeometryLibrary.computeHierarchyPackedLength = function(polygonHierarchy) {\r\n        var numComponents = 0;\r\n        var stack = [polygonHierarchy];\r\n        while (stack.length > 0) {\r\n            var hierarchy = stack.pop();\r\n            if (!defined(hierarchy)) {\r\n                continue;\r\n            }\r\n\r\n            numComponents += 2;\r\n\r\n            var positions = hierarchy.positions;\r\n            var holes = hierarchy.holes;\r\n\r\n            if (defined(positions)) {\r\n                numComponents += positions.length * Cartesian3.packedLength;\r\n            }\r\n\r\n            if (defined(holes)) {\r\n                var length = holes.length;\r\n                for (var i = 0; i < length; ++i) {\r\n                    stack.push(holes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return numComponents;\r\n    };\r\n\r\n    PolygonGeometryLibrary.packPolygonHierarchy = function(polygonHierarchy, array, startingIndex) {\r\n        var stack = [polygonHierarchy];\r\n        while (stack.length > 0) {\r\n            var hierarchy = stack.pop();\r\n            if (!defined(hierarchy)) {\r\n                continue;\r\n            }\r\n\r\n            var positions = hierarchy.positions;\r\n            var holes = hierarchy.holes;\r\n\r\n            array[startingIndex++] = defined(positions) ? positions.length : 0;\r\n            array[startingIndex++] = defined(holes) ? holes.length : 0;\r\n\r\n            if (defined(positions)) {\r\n                var positionsLength = positions.length;\r\n                for (var i = 0; i < positionsLength; ++i, startingIndex += 3) {\r\n                    Cartesian3.pack(positions[i], array, startingIndex);\r\n                }\r\n            }\r\n\r\n            if (defined(holes)) {\r\n                var holesLength = holes.length;\r\n                for (var j = 0; j < holesLength; ++j) {\r\n                    stack.push(holes[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return startingIndex;\r\n    };\r\n\r\n    PolygonGeometryLibrary.unpackPolygonHierarchy = function(array, startingIndex) {\r\n        var positionsLength = array[startingIndex++];\r\n        var holesLength = array[startingIndex++];\r\n\r\n        var positions = new Array(positionsLength);\r\n        var holes = holesLength > 0 ? new Array(holesLength) : undefined;\r\n\r\n        for (var i = 0; i < positionsLength; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        for (var j = 0; j < holesLength; ++j) {\r\n            holes[j] = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n            startingIndex = holes[j].startingIndex;\r\n            delete holes[j].startingIndex;\r\n        }\r\n\r\n        return {\r\n            positions : positions,\r\n            holes : holes,\r\n            startingIndex : startingIndex\r\n        };\r\n    };\r\n\r\n    var distanceScratch = new Cartesian3();\r\n    function getPointAtDistance(p0, p1, distance, length) {\r\n        Cartesian3.subtract(p1, p0, distanceScratch);\r\n        Cartesian3.multiplyByScalar(distanceScratch, distance / length, distanceScratch);\r\n        Cartesian3.add(p0, distanceScratch, distanceScratch);\r\n        return [distanceScratch.x, distanceScratch.y, distanceScratch.z];\r\n    }\r\n\r\n    PolygonGeometryLibrary.subdivideLineCount = function(p0, p1, minDistance) {\r\n        var distance = Cartesian3.distance(p0, p1);\r\n        var n = distance / minDistance;\r\n        var countDivide = Math.max(0, Math.ceil(Math.log(n) / Math.log(2)));\r\n        return Math.pow(2, countDivide);\r\n    };\r\n\r\n    PolygonGeometryLibrary.subdivideLine = function(p0, p1, minDistance, result) {\r\n        var numVertices = PolygonGeometryLibrary.subdivideLineCount(p0, p1, minDistance);\r\n        var length = Cartesian3.distance(p0, p1);\r\n        var distanceBetweenVertices = length / numVertices;\r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n\r\n        var positions = result;\r\n        positions.length = numVertices * 3;\r\n\r\n        var index = 0;\r\n        for ( var i = 0; i < numVertices; i++) {\r\n            var p = getPointAtDistance(p0, p1, i * distanceBetweenVertices, length);\r\n            positions[index++] = p[0];\r\n            positions[index++] = p[1];\r\n            positions[index++] = p[2];\r\n        }\r\n\r\n        return positions;\r\n    };\r\n\r\n    var scaleToGeodeticHeightN1 = new Cartesian3();\r\n    var scaleToGeodeticHeightN2 = new Cartesian3();\r\n    var scaleToGeodeticHeightP1 = new Cartesian3();\r\n    var scaleToGeodeticHeightP2 = new Cartesian3();\r\n\r\n    PolygonGeometryLibrary.scaleToGeodeticHeightExtruded = function(geometry, maxHeight, minHeight, ellipsoid, perPositionHeight) {\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var n1 = scaleToGeodeticHeightN1;\r\n        var n2 = scaleToGeodeticHeightN2;\r\n        var p = scaleToGeodeticHeightP1;\r\n        var p2 = scaleToGeodeticHeightP2;\r\n\r\n        if (defined(geometry) && defined(geometry.attributes) && defined(geometry.attributes.position)) {\r\n            var positions = geometry.attributes.position.values;\r\n            var length = positions.length / 2;\r\n\r\n            for ( var i = 0; i < length; i += 3) {\r\n                Cartesian3.fromArray(positions, i, p);\r\n\r\n                ellipsoid.geodeticSurfaceNormal(p, n1);\r\n                p2 = ellipsoid.scaleToGeodeticSurface(p, p2);\r\n                n2 = Cartesian3.multiplyByScalar(n1, minHeight, n2);\r\n                n2 = Cartesian3.add(p2, n2, n2);\r\n                positions[i + length] = n2.x;\r\n                positions[i + 1 + length] = n2.y;\r\n                positions[i + 2 + length] = n2.z;\r\n\r\n                if (perPositionHeight) {\r\n                    p2 = Cartesian3.clone(p, p2);\r\n                }\r\n                n2 = Cartesian3.multiplyByScalar(n1, maxHeight, n2);\r\n                n2 = Cartesian3.add(p2, n2, n2);\r\n                positions[i] = n2.x;\r\n                positions[i + 1] = n2.y;\r\n                positions[i + 2] = n2.z;\r\n            }\r\n        }\r\n        return geometry;\r\n    };\r\n\r\n    PolygonGeometryLibrary.polygonOutlinesFromHierarchy = function(polygonHierarchy, scaleToEllipsoidSurface, ellipsoid) {\r\n        // create from a polygon hierarchy\r\n        // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\r\n        var polygons = [];\r\n        var queue = new Queue();\r\n        queue.enqueue(polygonHierarchy);\r\n        var i;\r\n        var j;\r\n        var length;\r\n        while (queue.length !== 0) {\r\n            var outerNode = queue.dequeue();\r\n            var outerRing = outerNode.positions;\r\n            if (scaleToEllipsoidSurface) {\r\n                length = outerRing.length;\r\n                for (i = 0; i < length; i++) {\r\n                    ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\r\n                }\r\n            }\r\n            outerRing = arrayRemoveDuplicates(outerRing, Cartesian3.equalsEpsilon, true);\r\n            if (outerRing.length < 3) {\r\n                continue;\r\n            }\r\n\r\n            var numChildren = outerNode.holes ? outerNode.holes.length : 0;\r\n            // The outer polygon contains inner polygons\r\n            for (i = 0; i < numChildren; i++) {\r\n                var hole = outerNode.holes[i];\r\n                var holePositions = hole.positions;\r\n                if (scaleToEllipsoidSurface) {\r\n                    length = holePositions.length;\r\n                    for (j = 0; j < length; ++j) {\r\n                        ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\r\n                    }\r\n                }\r\n                holePositions = arrayRemoveDuplicates(holePositions, Cartesian3.equalsEpsilon, true);\r\n                if (holePositions.length < 3) {\r\n                    continue;\r\n                }\r\n                polygons.push(holePositions);\r\n\r\n                var numGrandchildren = 0;\r\n                if (defined(hole.holes)) {\r\n                    numGrandchildren = hole.holes.length;\r\n                }\r\n\r\n                for (j = 0; j < numGrandchildren; j++) {\r\n                    queue.enqueue(hole.holes[j]);\r\n                }\r\n            }\r\n\r\n            polygons.push(outerRing);\r\n        }\r\n\r\n        return polygons;\r\n    };\r\n\r\n    PolygonGeometryLibrary.polygonsFromHierarchy = function(polygonHierarchy, projectPointsTo2D, scaleToEllipsoidSurface, ellipsoid) {\r\n        // create from a polygon hierarchy\r\n        // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\r\n        var hierarchy = [];\r\n        var polygons = [];\r\n\r\n        var queue = new Queue();\r\n        queue.enqueue(polygonHierarchy);\r\n\r\n        while (queue.length !== 0) {\r\n            var outerNode = queue.dequeue();\r\n            var outerRing = outerNode.positions;\r\n            var holes = outerNode.holes;\r\n\r\n            var i;\r\n            var length;\r\n            if (scaleToEllipsoidSurface) {\r\n                length = outerRing.length;\r\n                for (i = 0; i < length; i++) {\r\n                    ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\r\n                }\r\n            }\r\n\r\n            outerRing = arrayRemoveDuplicates(outerRing, Cartesian3.equalsEpsilon, true);\r\n            if (outerRing.length < 3) {\r\n                continue;\r\n            }\r\n\r\n            var positions2D = projectPointsTo2D(outerRing);\r\n            if (!defined(positions2D)) {\r\n                continue;\r\n            }\r\n            var holeIndices = [];\r\n\r\n            var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n            if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n                positions2D.reverse();\r\n                outerRing = outerRing.slice().reverse();\r\n            }\r\n\r\n            var positions = outerRing.slice();\r\n            var numChildren = defined(holes) ? holes.length : 0;\r\n            var polygonHoles = [];\r\n            var j;\r\n\r\n            for (i = 0; i < numChildren; i++) {\r\n                var hole = holes[i];\r\n                var holePositions = hole.positions;\r\n                if (scaleToEllipsoidSurface) {\r\n                    length = holePositions.length;\r\n                    for (j = 0; j < length; ++j) {\r\n                        ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\r\n                    }\r\n                }\r\n\r\n                holePositions = arrayRemoveDuplicates(holePositions, Cartesian3.equalsEpsilon, true);\r\n                if (holePositions.length < 3) {\r\n                    continue;\r\n                }\r\n\r\n                var holePositions2D = projectPointsTo2D(holePositions);\r\n                if (!defined(holePositions2D)) {\r\n                    continue;\r\n                }\r\n\r\n                originalWindingOrder = PolygonPipeline.computeWindingOrder2D(holePositions2D);\r\n                if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n                    holePositions2D.reverse();\r\n                    holePositions = holePositions.slice().reverse();\r\n                }\r\n\r\n                polygonHoles.push(holePositions);\r\n                holeIndices.push(positions.length);\r\n                positions = positions.concat(holePositions);\r\n                positions2D = positions2D.concat(holePositions2D);\r\n\r\n                var numGrandchildren = 0;\r\n                if (defined(hole.holes)) {\r\n                    numGrandchildren = hole.holes.length;\r\n                }\r\n\r\n                for (j = 0; j < numGrandchildren; j++) {\r\n                    queue.enqueue(hole.holes[j]);\r\n                }\r\n            }\r\n\r\n            hierarchy.push({\r\n                outerRing : outerRing,\r\n                holes : polygonHoles\r\n            });\r\n            polygons.push({\r\n                positions : positions,\r\n                positions2D : positions2D,\r\n                holes : holeIndices\r\n            });\r\n        }\r\n\r\n        return {\r\n            hierarchy : hierarchy,\r\n            polygons : polygons\r\n        };\r\n    };\r\n\r\n    var computeBoundingRectangleCartesian2 = new Cartesian2();\r\n    var computeBoundingRectangleCartesian3 = new Cartesian3();\r\n    var computeBoundingRectangleQuaternion = new Quaternion();\r\n    var computeBoundingRectangleMatrix3 = new Matrix3();\r\n    PolygonGeometryLibrary.computeBoundingRectangle = function (planeNormal, projectPointTo2D, positions, angle, result) {\r\n        var rotation = Quaternion.fromAxisAngle(planeNormal, angle, computeBoundingRectangleQuaternion);\r\n        var textureMatrix = Matrix3.fromQuaternion(rotation, computeBoundingRectangleMatrix3);\r\n\r\n        var minX = Number.POSITIVE_INFINITY;\r\n        var maxX = Number.NEGATIVE_INFINITY;\r\n        var minY = Number.POSITIVE_INFINITY;\r\n        var maxY = Number.NEGATIVE_INFINITY;\r\n\r\n        var length = positions.length;\r\n        for ( var i = 0; i < length; ++i) {\r\n            var p = Cartesian3.clone(positions[i], computeBoundingRectangleCartesian3);\r\n            Matrix3.multiplyByVector(textureMatrix, p, p);\r\n            var st = projectPointTo2D(p, computeBoundingRectangleCartesian2);\r\n\r\n            if (defined(st)) {\r\n                minX = Math.min(minX, st.x);\r\n                maxX = Math.max(maxX, st.x);\r\n\r\n                minY = Math.min(minY, st.y);\r\n                maxY = Math.max(maxY, st.y);\r\n            }\r\n        }\r\n\r\n        result.x = minX;\r\n        result.y = minY;\r\n        result.width = maxX - minX;\r\n        result.height = maxY - minY;\r\n        return result;\r\n    };\r\n\r\n    PolygonGeometryLibrary.createGeometryFromPositions = function(ellipsoid, polygon, granularity, perPositionHeight, vertexFormat) {\r\n        var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\r\n\r\n        /* If polygon is completely unrenderable, just use the first three vertices */\r\n        if (indices.length < 3) {\r\n            indices = [0, 1, 2];\r\n        }\r\n\r\n        var positions = polygon.positions;\r\n\r\n        if (perPositionHeight) {\r\n            var length = positions.length;\r\n            var flattenedPositions = new Array(length * 3);\r\n            var index = 0;\r\n            for ( var i = 0; i < length; i++) {\r\n                var p = positions[i];\r\n                flattenedPositions[index++] = p.x;\r\n                flattenedPositions[index++] = p.y;\r\n                flattenedPositions[index++] = p.z;\r\n            }\r\n            var geometry = new Geometry({\r\n                attributes : {\r\n                    position : new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.DOUBLE,\r\n                        componentsPerAttribute : 3,\r\n                        values : flattenedPositions\r\n                    })\r\n                },\r\n                indices : indices,\r\n                primitiveType : PrimitiveType.TRIANGLES\r\n            });\r\n\r\n            if (vertexFormat.normal) {\r\n                return GeometryPipeline.computeNormal(geometry);\r\n            }\r\n\r\n            return geometry;\r\n        }\r\n\r\n        return PolygonPipeline.computeSubdivision(ellipsoid, positions, indices, granularity);\r\n    };\r\n\r\n    var computeWallIndicesSubdivided = [];\r\n    var p1Scratch = new Cartesian3();\r\n    var p2Scratch = new Cartesian3();\r\n\r\n    PolygonGeometryLibrary.computeWallGeometry = function(positions, ellipsoid, granularity, perPositionHeight) {\r\n        var edgePositions;\r\n        var topEdgeLength;\r\n        var i;\r\n        var p1;\r\n        var p2;\r\n\r\n        var length = positions.length;\r\n        var index = 0;\r\n\r\n        if (!perPositionHeight) {\r\n            var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n            var numVertices = 0;\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n\r\n            topEdgeLength = (numVertices + length) * 3;\r\n            edgePositions = new Array(topEdgeLength * 2);\r\n            for (i = 0; i < length; i++) {\r\n                p1 = positions[i];\r\n                p2 = positions[(i + 1) % length];\r\n\r\n                var tempPositions = PolygonGeometryLibrary.subdivideLine(p1, p2, minDistance, computeWallIndicesSubdivided);\r\n                var tempPositionsLength = tempPositions.length;\r\n                for (var j = 0; j < tempPositionsLength; ++j, ++index) {\r\n                    edgePositions[index] = tempPositions[j];\r\n                    edgePositions[index + topEdgeLength] = tempPositions[j];\r\n                }\r\n\r\n                edgePositions[index] = p2.x;\r\n                edgePositions[index + topEdgeLength] = p2.x;\r\n                ++index;\r\n\r\n                edgePositions[index] = p2.y;\r\n                edgePositions[index + topEdgeLength] = p2.y;\r\n                ++index;\r\n\r\n                edgePositions[index] = p2.z;\r\n                edgePositions[index + topEdgeLength] = p2.z;\r\n                ++index;\r\n            }\r\n        } else {\r\n            topEdgeLength = length * 3 * 2;\r\n            edgePositions = new Array(topEdgeLength * 2);\r\n            for (i = 0; i < length; i++) {\r\n                p1 = positions[i];\r\n                p2 = positions[(i + 1) % length];\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.x;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.y;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.z;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.x;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.y;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.z;\r\n                ++index;\r\n            }\r\n        }\r\n\r\n        length = edgePositions.length;\r\n        var indices = IndexDatatype.createTypedArray(length / 3, length - positions.length * 6);\r\n        var edgeIndex = 0;\r\n        length /= 6;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            var UL = i;\r\n            var UR = UL + 1;\r\n            var LL = UL + length;\r\n            var LR = LL + 1;\r\n\r\n            p1 = Cartesian3.fromArray(edgePositions, UL * 3, p1Scratch);\r\n            p2 = Cartesian3.fromArray(edgePositions, UR * 3, p2Scratch);\r\n            if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON14)) {\r\n                continue;\r\n            }\r\n\r\n            indices[edgeIndex++] = UL;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = LR;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : new GeometryAttributes({\r\n                position : new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute : 3,\r\n                    values : edgePositions\r\n                })\r\n            }),\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n    };\r\n\r\n    return PolygonGeometryLibrary;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolygonGeometryLibrary.js\n// module id = 66\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './FeatureDetection',\r\n        './freezeObject',\r\n        './Math'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        FeatureDetection,\r\n        freezeObject,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    function hue2rgb(m1, m2, h) {\r\n        if (h < 0) {\r\n            h += 1;\r\n        }\r\n        if (h > 1) {\r\n            h -= 1;\r\n        }\r\n        if (h * 6 < 1) {\r\n            return m1 + (m2 - m1) * 6 * h;\r\n        }\r\n        if (h * 2 < 1) {\r\n            return m2;\r\n        }\r\n        if (h * 3 < 2) {\r\n            return m1 + (m2 - m1) * (2 / 3 - h) * 6;\r\n        }\r\n        return m1;\r\n    }\r\n\r\n    /**\r\n     * A color, specified using red, green, blue, and alpha values,\r\n     * which range from <code>0</code> (no intensity) to <code>1.0</code> (full intensity).\r\n     * @param {Number} [red=1.0] The red component.\r\n     * @param {Number} [green=1.0] The green component.\r\n     * @param {Number} [blue=1.0] The blue component.\r\n     * @param {Number} [alpha=1.0] The alpha component.\r\n     *\r\n     * @constructor\r\n     * @alias Color\r\n     *\r\n     * @see Packable\r\n     */\r\n    function Color(red, green, blue, alpha) {\r\n        /**\r\n         * The red component.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.red = defaultValue(red, 1.0);\r\n        /**\r\n         * The green component.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.green = defaultValue(green, 1.0);\r\n        /**\r\n         * The blue component.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.blue = defaultValue(blue, 1.0);\r\n        /**\r\n         * The alpha component.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.alpha = defaultValue(alpha, 1.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a Color instance from a {@link Cartesian4}. <code>x</code>, <code>y</code>, <code>z</code>,\r\n     * and <code>w</code> map to <code>red</code>, <code>green</code>, <code>blue</code>, and <code>alpha</code>, respectively.\r\n     *\r\n     * @param {Cartesian4} cartesian The source cartesian.\r\n     * @param {Color} [result] The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     */\r\n    Color.fromCartesian4 = function(cartesian, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Color(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n        }\r\n\r\n        result.red = cartesian.x;\r\n        result.green = cartesian.y;\r\n        result.blue = cartesian.z;\r\n        result.alpha = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Color specified using red, green, blue, and alpha values\r\n     * that are in the range of 0 to 255, converting them internally to a range of 0.0 to 1.0.\r\n     *\r\n     * @param {Number} [red=255] The red component.\r\n     * @param {Number} [green=255] The green component.\r\n     * @param {Number} [blue=255] The blue component.\r\n     * @param {Number} [alpha=255] The alpha component.\r\n     * @param {Color} [result] The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     */\r\n    Color.fromBytes = function(red, green, blue, alpha, result) {\r\n        red = Color.byteToFloat(defaultValue(red, 255.0));\r\n        green = Color.byteToFloat(defaultValue(green, 255.0));\r\n        blue = Color.byteToFloat(defaultValue(blue, 255.0));\r\n        alpha = Color.byteToFloat(defaultValue(alpha, 255.0));\r\n\r\n        if (!defined(result)) {\r\n            return new Color(red, green, blue, alpha);\r\n        }\r\n\r\n        result.red = red;\r\n        result.green = green;\r\n        result.blue = blue;\r\n        result.alpha = alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Color that has the same red, green, and blue components\r\n     * of the specified color, but with the specified alpha value.\r\n     *\r\n     * @param {Color} color The base color\r\n     * @param {Number} alpha The new alpha component.\r\n     * @param {Color} [result] The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     *\r\n     * @example var translucentRed = Cesium.Color.fromAlpha(Cesium.Color.RED, 0.9);\r\n     */\r\n    Color.fromAlpha = function(color, alpha, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new Color(color.red, color.green, color.blue, alpha);\r\n        }\r\n\r\n        result.red = color.red;\r\n        result.green = color.green;\r\n        result.blue = color.blue;\r\n        result.alpha = alpha;\r\n        return result;\r\n    };\r\n\r\n    var scratchArrayBuffer;\r\n    var scratchUint32Array;\r\n    var scratchUint8Array;\r\n    if (FeatureDetection.supportsTypedArrays()) {\r\n        scratchArrayBuffer = new ArrayBuffer(4);\r\n        scratchUint32Array = new Uint32Array(scratchArrayBuffer);\r\n        scratchUint8Array = new Uint8Array(scratchArrayBuffer);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color from a single numeric unsigned 32-bit RGBA value, using the endianness\r\n     * of the system.\r\n     *\r\n     * @param {Number} rgba A single numeric unsigned 32-bit RGBA value.\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The color object.\r\n     *\r\n     * @example\r\n     * var color = Cesium.Color.fromRgba(0x67ADDFFF);\r\n     *\r\n     * @see Color#toRgba\r\n     */\r\n    Color.fromRgba = function(rgba, result) {\r\n        // scratchUint32Array and scratchUint8Array share an underlying array buffer\r\n        scratchUint32Array[0] = rgba;\r\n        return Color.fromBytes(scratchUint8Array[0], scratchUint8Array[1], scratchUint8Array[2], scratchUint8Array[3], result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Color instance from hue, saturation, and lightness.\r\n     *\r\n     * @param {Number} [hue=0] The hue angle 0...1\r\n     * @param {Number} [saturation=0] The saturation value 0...1\r\n     * @param {Number} [lightness=0] The lightness value 0...1\r\n     * @param {Number} [alpha=1.0] The alpha component 0...1\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The color object.\r\n     *\r\n     * @see {@link http://www.w3.org/TR/css3-color/#hsl-color|CSS color values}\r\n     */\r\n    Color.fromHsl = function(hue, saturation, lightness, alpha, result) {\r\n        hue = defaultValue(hue, 0.0) % 1.0;\r\n        saturation = defaultValue(saturation, 0.0);\r\n        lightness = defaultValue(lightness, 0.0);\r\n        alpha = defaultValue(alpha, 1.0);\r\n\r\n        var red = lightness;\r\n        var green = lightness;\r\n        var blue = lightness;\r\n\r\n        if (saturation !== 0) {\r\n            var m2;\r\n            if (lightness < 0.5) {\r\n                m2 = lightness * (1 + saturation);\r\n            } else {\r\n                m2 = lightness + saturation - lightness * saturation;\r\n            }\r\n\r\n            var m1 = 2.0 * lightness - m2;\r\n            red = hue2rgb(m1, m2, hue + 1 / 3);\r\n            green = hue2rgb(m1, m2, hue);\r\n            blue = hue2rgb(m1, m2, hue - 1 / 3);\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Color(red, green, blue, alpha);\r\n        }\r\n\r\n        result.red = red;\r\n        result.green = green;\r\n        result.blue = blue;\r\n        result.alpha = alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a random color using the provided options. For reproducible random colors, you should\r\n     * call {@link CesiumMath#setRandomNumberSeed} once at the beginning of your application.\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Number} [options.red] If specified, the red component to use instead of a randomized value.\r\n     * @param {Number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.\r\n     * @param {Number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.\r\n     * @param {Number} [options.green] If specified, the green component to use instead of a randomized value.\r\n     * @param {Number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.\r\n     * @param {Number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.\r\n     * @param {Number} [options.blue] If specified, the blue component to use instead of a randomized value.\r\n     * @param {Number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.\r\n     * @param {Number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.\r\n     * @param {Number} [options.alpha] If specified, the alpha component to use instead of a randomized value.\r\n     * @param {Number} [options.minimumAlpha=0.0] The maximum alpha value to generate if none was specified.\r\n     * @param {Number} [options.maximumAlpha=1.0] The minimum alpha value to generate if none was specified.\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The modified result parameter or a new instance if result was undefined.\r\n     *\r\n     * @exception {DeveloperError} minimumRed must be less than or equal to maximumRed.\r\n     * @exception {DeveloperError} minimumGreen must be less than or equal to maximumGreen.\r\n     * @exception {DeveloperError} minimumBlue must be less than or equal to maximumBlue.\r\n     * @exception {DeveloperError} minimumAlpha must be less than or equal to maximumAlpha.\r\n     *\r\n     * @example\r\n     * //Create a completely random color\r\n     * var color = Cesium.Color.fromRandom();\r\n     *\r\n     * //Create a random shade of yellow.\r\n     * var color = Cesium.Color.fromRandom({\r\n     *     red : 1.0,\r\n     *     green : 1.0,\r\n     *     alpha : 1.0\r\n     * });\r\n     *\r\n     * //Create a random bright color.\r\n     * var color = Cesium.Color.fromRandom({\r\n     *     minimumRed : 0.75,\r\n     *     minimumGreen : 0.75,\r\n     *     minimumBlue : 0.75,\r\n     *     alpha : 1.0\r\n     * });\r\n     */\r\n    Color.fromRandom = function(options, result) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var red = options.red;\r\n        if (!defined(red)) {\r\n            var minimumRed = defaultValue(options.minimumRed, 0);\r\n            var maximumRed = defaultValue(options.maximumRed, 1.0);\r\n\r\n            \r\n\r\n            red = minimumRed + (CesiumMath.nextRandomNumber() * (maximumRed - minimumRed));\r\n        }\r\n\r\n        var green = options.green;\r\n        if (!defined(green)) {\r\n            var minimumGreen = defaultValue(options.minimumGreen, 0);\r\n            var maximumGreen = defaultValue(options.maximumGreen, 1.0);\r\n\r\n            \r\n            green = minimumGreen + (CesiumMath.nextRandomNumber() * (maximumGreen - minimumGreen));\r\n        }\r\n\r\n        var blue = options.blue;\r\n        if (!defined(blue)) {\r\n            var minimumBlue = defaultValue(options.minimumBlue, 0);\r\n            var maximumBlue = defaultValue(options.maximumBlue, 1.0);\r\n\r\n            \r\n\r\n            blue = minimumBlue + (CesiumMath.nextRandomNumber() * (maximumBlue - minimumBlue));\r\n        }\r\n\r\n        var alpha = options.alpha;\r\n        if (!defined(alpha)) {\r\n            var minimumAlpha = defaultValue(options.minimumAlpha, 0);\r\n            var maximumAlpha = defaultValue(options.maximumAlpha, 1.0);\r\n\r\n            \r\n\r\n            alpha = minimumAlpha + (CesiumMath.nextRandomNumber() * (maximumAlpha - minimumAlpha));\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Color(red, green, blue, alpha);\r\n        }\r\n\r\n        result.red = red;\r\n        result.green = green;\r\n        result.blue = blue;\r\n        result.alpha = alpha;\r\n        return result;\r\n    };\r\n\r\n    //#rgb\r\n    var rgbMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i;\r\n    //#rrggbb\r\n    var rrggbbMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i;\r\n    //rgb(), rgba(), or rgb%()\r\n    var rgbParenthesesMatcher = /^rgba?\\(\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\r\n    //hsl(), hsla(), or hsl%()\r\n    var hslParenthesesMatcher = /^hsla?\\(\\s*([0-9.]+)\\s*,\\s*([0-9.]+%)\\s*,\\s*([0-9.]+%)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\r\n\r\n    /**\r\n     * Creates a Color instance from a CSS color value.\r\n     *\r\n     * @param {String} color The CSS color value in #rgb, #rrggbb, rgb(), rgba(), hsl(), or hsla() format.\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The color object, or undefined if the string was not a valid CSS color.\r\n     *\r\n     *\r\n     * @example\r\n     * var cesiumBlue = Cesium.Color.fromCssColorString('#67ADDF');\r\n     * var green = Cesium.Color.fromCssColorString('green');\r\n     *\r\n     * @see {@link http://www.w3.org/TR/css3-color|CSS color values}\r\n     */\r\n    Color.fromCssColorString = function(color, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Color();\r\n        }\r\n\r\n        var namedColor = Color[color.toUpperCase()];\r\n        if (defined(namedColor)) {\r\n            Color.clone(namedColor, result);\r\n            return result;\r\n        }\r\n\r\n        var matches = rgbMatcher.exec(color);\r\n        if (matches !== null) {\r\n            result.red = parseInt(matches[1], 16) / 15;\r\n            result.green = parseInt(matches[2], 16) / 15.0;\r\n            result.blue = parseInt(matches[3], 16) / 15.0;\r\n            result.alpha = 1.0;\r\n            return result;\r\n        }\r\n\r\n        matches = rrggbbMatcher.exec(color);\r\n        if (matches !== null) {\r\n            result.red = parseInt(matches[1], 16) / 255.0;\r\n            result.green = parseInt(matches[2], 16) / 255.0;\r\n            result.blue = parseInt(matches[3], 16) / 255.0;\r\n            result.alpha = 1.0;\r\n            return result;\r\n        }\r\n\r\n        matches = rgbParenthesesMatcher.exec(color);\r\n        if (matches !== null) {\r\n            result.red = parseFloat(matches[1]) / ('%' === matches[1].substr(-1) ? 100.0 : 255.0);\r\n            result.green = parseFloat(matches[2]) / ('%' === matches[2].substr(-1) ? 100.0 : 255.0);\r\n            result.blue = parseFloat(matches[3]) / ('%' === matches[3].substr(-1) ? 100.0 : 255.0);\r\n            result.alpha = parseFloat(defaultValue(matches[4], '1.0'));\r\n            return result;\r\n        }\r\n\r\n        matches = hslParenthesesMatcher.exec(color);\r\n        if (matches !== null) {\r\n            return Color.fromHsl(parseFloat(matches[1]) / 360.0,\r\n                                 parseFloat(matches[2]) / 100.0,\r\n                                 parseFloat(matches[3]) / 100.0,\r\n                                 parseFloat(defaultValue(matches[4], '1.0')), result);\r\n        }\r\n\r\n        result = undefined;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Color.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Color} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Color.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n        array[startingIndex++] = value.red;\r\n        array[startingIndex++] = value.green;\r\n        array[startingIndex++] = value.blue;\r\n        array[startingIndex] = value.alpha;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Color} [result] The object into which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     */\r\n    Color.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n        if (!defined(result)) {\r\n            result = new Color();\r\n        }\r\n        result.red = array[startingIndex++];\r\n        result.green = array[startingIndex++];\r\n        result.blue = array[startingIndex++];\r\n        result.alpha = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts a 'byte' color component in the range of 0 to 255 into\r\n     * a 'float' color component in the range of 0 to 1.0.\r\n     *\r\n     * @param {Number} number The number to be converted.\r\n     * @returns {Number} The converted number.\r\n     */\r\n    Color.byteToFloat = function(number) {\r\n        return number / 255.0;\r\n    };\r\n\r\n    /**\r\n     * Converts a 'float' color component in the range of 0 to 1.0 into\r\n     * a 'byte' color component in the range of 0 to 255.\r\n     *\r\n     * @param {Number} number The number to be converted.\r\n     * @returns {Number} The converted number.\r\n     */\r\n    Color.floatToByte = function(number) {\r\n        return number === 1.0 ? 255.0 : (number * 256.0) | 0;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Color.\r\n     *\r\n     * @param {Color} color The Color to duplicate.\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The modified result parameter or a new instance if result was undefined. (Returns undefined if color is undefined)\r\n     */\r\n    Color.clone = function(color, result) {\r\n        if (!defined(color)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Color(color.red, color.green, color.blue, color.alpha);\r\n        }\r\n        result.red = color.red;\r\n        result.green = color.green;\r\n        result.blue = color.blue;\r\n        result.alpha = color.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the first Color equals the second color.\r\n     *\r\n     * @param {Color} left The first Color to compare for equality.\r\n     * @param {Color} right The second Color to compare for equality.\r\n     * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\r\n     */\r\n    Color.equals = function(left, right) {\r\n        return (left === right) || //\r\n               (defined(left) && //\r\n                defined(right) && //\r\n                left.red === right.red && //\r\n                left.green === right.green && //\r\n                left.blue === right.blue && //\r\n                left.alpha === right.alpha);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Color.equalsArray = function(color, array, offset) {\r\n        return color.red === array[offset] &&\r\n               color.green === array[offset + 1] &&\r\n               color.blue === array[offset + 2] &&\r\n               color.alpha === array[offset + 3];\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a Color instance.\r\n     *\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The modified result parameter or a new instance if result was undefined.\r\n     */\r\n    Color.prototype.clone = function(result) {\r\n        return Color.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Returns true if this Color equals other.\r\n     *\r\n     * @param {Color} other The Color to compare for equality.\r\n     * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\r\n     */\r\n    Color.prototype.equals = function(other) {\r\n        return Color.equals(this, other);\r\n    };\r\n\r\n    /**\r\n     * Returns <code>true</code> if this Color equals other componentwise within the specified epsilon.\r\n     *\r\n     * @param {Color} other The Color to compare for equality.\r\n     * @param {Number} [epsilon=0.0] The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if the Colors are equal within the specified epsilon; otherwise, <code>false</code>.\r\n     */\r\n    Color.prototype.equalsEpsilon = function(other, epsilon) {\r\n        return (this === other) || //\r\n               ((defined(other)) && //\r\n                (Math.abs(this.red - other.red) <= epsilon) && //\r\n                (Math.abs(this.green - other.green) <= epsilon) && //\r\n                (Math.abs(this.blue - other.blue) <= epsilon) && //\r\n                (Math.abs(this.alpha - other.alpha) <= epsilon));\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Color in the format '(red, green, blue, alpha)'.\r\n     *\r\n     * @returns {String} A string representing this Color in the format '(red, green, blue, alpha)'.\r\n     */\r\n    Color.prototype.toString = function() {\r\n        return '(' + this.red + ', ' + this.green + ', ' + this.blue + ', ' + this.alpha + ')';\r\n    };\r\n\r\n    /**\r\n     * Creates a string containing the CSS color value for this color.\r\n     *\r\n     * @returns {String} The CSS equivalent of this color.\r\n     *\r\n     * @see {@link http://www.w3.org/TR/css3-color/#rgba-color|CSS RGB or RGBA color values}\r\n     */\r\n    Color.prototype.toCssColorString = function() {\r\n        var red = Color.floatToByte(this.red);\r\n        var green = Color.floatToByte(this.green);\r\n        var blue = Color.floatToByte(this.blue);\r\n        if (this.alpha === 1) {\r\n            return 'rgb(' + red + ',' + green + ',' + blue + ')';\r\n        }\r\n        return 'rgba(' + red + ',' + green + ',' + blue + ',' + this.alpha + ')';\r\n    };\r\n\r\n    /**\r\n     * Converts this color to an array of red, green, blue, and alpha values\r\n     * that are in the range of 0 to 255.\r\n     *\r\n     * @param {Number[]} [result] The array to store the result in, if undefined a new instance will be created.\r\n     * @returns {Number[]} The modified result parameter or a new instance if result was undefined.\r\n     */\r\n    Color.prototype.toBytes = function(result) {\r\n        var red = Color.floatToByte(this.red);\r\n        var green = Color.floatToByte(this.green);\r\n        var blue = Color.floatToByte(this.blue);\r\n        var alpha = Color.floatToByte(this.alpha);\r\n\r\n        if (!defined(result)) {\r\n            return [red, green, blue, alpha];\r\n        }\r\n        result[0] = red;\r\n        result[1] = green;\r\n        result[2] = blue;\r\n        result[3] = alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts this color to a single numeric unsigned 32-bit RGBA value, using the endianness\r\n     * of the system.\r\n     *\r\n     * @returns {Number} A single numeric unsigned 32-bit RGBA value.\r\n     *\r\n     *\r\n     * @example\r\n     * var rgba = Cesium.Color.BLUE.toRgba();\r\n     *\r\n     * @see Color.fromRgba\r\n     */\r\n    Color.prototype.toRgba = function() {\r\n        // scratchUint32Array and scratchUint8Array share an underlying array buffer\r\n        scratchUint8Array[0] = Color.floatToByte(this.red);\r\n        scratchUint8Array[1] = Color.floatToByte(this.green);\r\n        scratchUint8Array[2] = Color.floatToByte(this.blue);\r\n        scratchUint8Array[3] = Color.floatToByte(this.alpha);\r\n        return scratchUint32Array[0];\r\n    };\r\n\r\n    /**\r\n     * Brightens this color by the provided magnitude.\r\n     *\r\n     * @param {Number} magnitude A positive number indicating the amount to brighten.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var brightBlue = Cesium.Color.BLUE.brighten(0.5, new Cesium.Color());\r\n     */\r\n    Color.prototype.brighten = function(magnitude, result) {\r\n        \r\n\r\n        magnitude = (1.0 - magnitude);\r\n        result.red = 1.0 - ((1.0 - this.red) * magnitude);\r\n        result.green = 1.0 - ((1.0 - this.green) * magnitude);\r\n        result.blue = 1.0 - ((1.0 - this.blue) * magnitude);\r\n        result.alpha = this.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Darkens this color by the provided magnitude.\r\n     *\r\n     * @param {Number} magnitude A positive number indicating the amount to darken.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var darkBlue = Cesium.Color.BLUE.darken(0.5, new Cesium.Color());\r\n     */\r\n    Color.prototype.darken = function(magnitude, result) {\r\n        \r\n\r\n        magnitude = (1.0 - magnitude);\r\n        result.red = this.red * magnitude;\r\n        result.green = this.green * magnitude;\r\n        result.blue = this.blue * magnitude;\r\n        result.alpha = this.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Color that has the same red, green, and blue components\r\n     * as this Color, but with the specified alpha value.\r\n     *\r\n     * @param {Number} alpha The new alpha component.\r\n     * @param {Color} [result] The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     *\r\n     * @example var translucentRed = Cesium.Color.RED.withAlpha(0.9);\r\n     */\r\n    Color.prototype.withAlpha = function(alpha, result) {\r\n        return Color.fromAlpha(this, alpha, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.add = function(left, right, result) {\r\n        \r\n\r\n        result.red = left.red + right.red;\r\n        result.green = left.green + right.green;\r\n        result.blue = left.blue + right.blue;\r\n        result.alpha = left.alpha + right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.subtract = function(left, right, result) {\r\n        \r\n\r\n        result.red = left.red - right.red;\r\n        result.green = left.green - right.green;\r\n        result.blue = left.blue - right.blue;\r\n        result.alpha = left.alpha - right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.multiply = function(left, right, result) {\r\n        \r\n\r\n        result.red = left.red * right.red;\r\n        result.green = left.green * right.green;\r\n        result.blue = left.blue * right.blue;\r\n        result.alpha = left.alpha * right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.divide = function(left, right, result) {\r\n        \r\n\r\n        result.red = left.red / right.red;\r\n        result.green = left.green / right.green;\r\n        result.blue = left.blue / right.blue;\r\n        result.alpha = left.alpha / right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise modulus of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.mod = function(left, right, result) {\r\n        \r\n\r\n        result.red = left.red % right.red;\r\n        result.green = left.green % right.green;\r\n        result.blue = left.blue % right.blue;\r\n        result.alpha = left.alpha % right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Color componentwise by the provided scalar.\r\n     *\r\n     * @param {Color} color The Color to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.multiplyByScalar = function(color, scalar, result) {\r\n        \r\n\r\n        result.red = color.red * scalar;\r\n        result.green = color.green * scalar;\r\n        result.blue = color.blue * scalar;\r\n        result.alpha = color.alpha * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Color componentwise by the provided scalar.\r\n     *\r\n     * @param {Color} color The Color to be divided.\r\n     * @param {Number} scalar The scalar to divide with.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.divideByScalar = function(color, scalar, result) {\r\n        \r\n\r\n        result.red = color.red / scalar;\r\n        result.green = color.green / scalar;\r\n        result.blue = color.blue / scalar;\r\n        result.alpha = color.alpha / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F0F8FF\r\n     * <span class=\"colorSwath\" style=\"background: #F0F8FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ALICEBLUE = freezeObject(Color.fromCssColorString('#F0F8FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FAEBD7\r\n     * <span class=\"colorSwath\" style=\"background: #FAEBD7;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ANTIQUEWHITE = freezeObject(Color.fromCssColorString('#FAEBD7'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FFFF\r\n     * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.AQUA = freezeObject(Color.fromCssColorString('#00FFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #7FFFD4\r\n     * <span class=\"colorSwath\" style=\"background: #7FFFD4;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.AQUAMARINE = freezeObject(Color.fromCssColorString('#7FFFD4'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F0FFFF\r\n     * <span class=\"colorSwath\" style=\"background: #F0FFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.AZURE = freezeObject(Color.fromCssColorString('#F0FFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F5F5DC\r\n     * <span class=\"colorSwath\" style=\"background: #F5F5DC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BEIGE = freezeObject(Color.fromCssColorString('#F5F5DC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFE4C4\r\n     * <span class=\"colorSwath\" style=\"background: #FFE4C4;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BISQUE = freezeObject(Color.fromCssColorString('#FFE4C4'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #000000\r\n     * <span class=\"colorSwath\" style=\"background: #000000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BLACK = freezeObject(Color.fromCssColorString('#000000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFEBCD\r\n     * <span class=\"colorSwath\" style=\"background: #FFEBCD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BLANCHEDALMOND = freezeObject(Color.fromCssColorString('#FFEBCD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #0000FF\r\n     * <span class=\"colorSwath\" style=\"background: #0000FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BLUE = freezeObject(Color.fromCssColorString('#0000FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8A2BE2\r\n     * <span class=\"colorSwath\" style=\"background: #8A2BE2;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BLUEVIOLET = freezeObject(Color.fromCssColorString('#8A2BE2'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #A52A2A\r\n     * <span class=\"colorSwath\" style=\"background: #A52A2A;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BROWN = freezeObject(Color.fromCssColorString('#A52A2A'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DEB887\r\n     * <span class=\"colorSwath\" style=\"background: #DEB887;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BURLYWOOD = freezeObject(Color.fromCssColorString('#DEB887'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #5F9EA0\r\n     * <span class=\"colorSwath\" style=\"background: #5F9EA0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CADETBLUE = freezeObject(Color.fromCssColorString('#5F9EA0'));\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #7FFF00\r\n     * <span class=\"colorSwath\" style=\"background: #7FFF00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CHARTREUSE = freezeObject(Color.fromCssColorString('#7FFF00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D2691E\r\n     * <span class=\"colorSwath\" style=\"background: #D2691E;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CHOCOLATE = freezeObject(Color.fromCssColorString('#D2691E'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF7F50\r\n     * <span class=\"colorSwath\" style=\"background: #FF7F50;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CORAL = freezeObject(Color.fromCssColorString('#FF7F50'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #6495ED\r\n     * <span class=\"colorSwath\" style=\"background: #6495ED;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CORNFLOWERBLUE = freezeObject(Color.fromCssColorString('#6495ED'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFF8DC\r\n     * <span class=\"colorSwath\" style=\"background: #FFF8DC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CORNSILK = freezeObject(Color.fromCssColorString('#FFF8DC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DC143C\r\n     * <span class=\"colorSwath\" style=\"background: #DC143C;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CRIMSON = freezeObject(Color.fromCssColorString('#DC143C'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FFFF\r\n     * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CYAN = freezeObject(Color.fromCssColorString('#00FFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00008B\r\n     * <span class=\"colorSwath\" style=\"background: #00008B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKBLUE = freezeObject(Color.fromCssColorString('#00008B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #008B8B\r\n     * <span class=\"colorSwath\" style=\"background: #008B8B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKCYAN = freezeObject(Color.fromCssColorString('#008B8B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #B8860B\r\n     * <span class=\"colorSwath\" style=\"background: #B8860B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKGOLDENROD = freezeObject(Color.fromCssColorString('#B8860B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #A9A9A9\r\n     * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKGRAY = freezeObject(Color.fromCssColorString('#A9A9A9'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #006400\r\n     * <span class=\"colorSwath\" style=\"background: #006400;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKGREEN = freezeObject(Color.fromCssColorString('#006400'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #A9A9A9\r\n     * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKGREY = Color.DARKGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #BDB76B\r\n     * <span class=\"colorSwath\" style=\"background: #BDB76B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKKHAKI = freezeObject(Color.fromCssColorString('#BDB76B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8B008B\r\n     * <span class=\"colorSwath\" style=\"background: #8B008B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKMAGENTA = freezeObject(Color.fromCssColorString('#8B008B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #556B2F\r\n     * <span class=\"colorSwath\" style=\"background: #556B2F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKOLIVEGREEN = freezeObject(Color.fromCssColorString('#556B2F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF8C00\r\n     * <span class=\"colorSwath\" style=\"background: #FF8C00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKORANGE = freezeObject(Color.fromCssColorString('#FF8C00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #9932CC\r\n     * <span class=\"colorSwath\" style=\"background: #9932CC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKORCHID = freezeObject(Color.fromCssColorString('#9932CC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8B0000\r\n     * <span class=\"colorSwath\" style=\"background: #8B0000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKRED = freezeObject(Color.fromCssColorString('#8B0000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #E9967A\r\n     * <span class=\"colorSwath\" style=\"background: #E9967A;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSALMON = freezeObject(Color.fromCssColorString('#E9967A'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8FBC8F\r\n     * <span class=\"colorSwath\" style=\"background: #8FBC8F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSEAGREEN = freezeObject(Color.fromCssColorString('#8FBC8F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #483D8B\r\n     * <span class=\"colorSwath\" style=\"background: #483D8B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSLATEBLUE = freezeObject(Color.fromCssColorString('#483D8B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #2F4F4F\r\n     * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSLATEGRAY = freezeObject(Color.fromCssColorString('#2F4F4F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #2F4F4F\r\n     * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSLATEGREY = Color.DARKSLATEGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00CED1\r\n     * <span class=\"colorSwath\" style=\"background: #00CED1;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKTURQUOISE = freezeObject(Color.fromCssColorString('#00CED1'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #9400D3\r\n     * <span class=\"colorSwath\" style=\"background: #9400D3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKVIOLET = freezeObject(Color.fromCssColorString('#9400D3'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF1493\r\n     * <span class=\"colorSwath\" style=\"background: #FF1493;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DEEPPINK = freezeObject(Color.fromCssColorString('#FF1493'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00BFFF\r\n     * <span class=\"colorSwath\" style=\"background: #00BFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DEEPSKYBLUE = freezeObject(Color.fromCssColorString('#00BFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #696969\r\n     * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DIMGRAY = freezeObject(Color.fromCssColorString('#696969'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #696969\r\n     * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DIMGREY = Color.DIMGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #1E90FF\r\n     * <span class=\"colorSwath\" style=\"background: #1E90FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DODGERBLUE = freezeObject(Color.fromCssColorString('#1E90FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #B22222\r\n     * <span class=\"colorSwath\" style=\"background: #B22222;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.FIREBRICK = freezeObject(Color.fromCssColorString('#B22222'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFAF0\r\n     * <span class=\"colorSwath\" style=\"background: #FFFAF0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.FLORALWHITE = freezeObject(Color.fromCssColorString('#FFFAF0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #228B22\r\n     * <span class=\"colorSwath\" style=\"background: #228B22;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.FORESTGREEN = freezeObject(Color.fromCssColorString('#228B22'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF00FF\r\n     * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.FUCHSIA = freezeObject(Color.fromCssColorString('#FF00FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DCDCDC\r\n     * <span class=\"colorSwath\" style=\"background: #DCDCDC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GAINSBORO = freezeObject(Color.fromCssColorString('#DCDCDC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F8F8FF\r\n     * <span class=\"colorSwath\" style=\"background: #F8F8FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GHOSTWHITE = freezeObject(Color.fromCssColorString('#F8F8FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFD700\r\n     * <span class=\"colorSwath\" style=\"background: #FFD700;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GOLD = freezeObject(Color.fromCssColorString('#FFD700'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DAA520\r\n     * <span class=\"colorSwath\" style=\"background: #DAA520;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GOLDENROD = freezeObject(Color.fromCssColorString('#DAA520'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #808080\r\n     * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GRAY = freezeObject(Color.fromCssColorString('#808080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #008000\r\n     * <span class=\"colorSwath\" style=\"background: #008000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GREEN = freezeObject(Color.fromCssColorString('#008000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #ADFF2F\r\n     * <span class=\"colorSwath\" style=\"background: #ADFF2F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GREENYELLOW = freezeObject(Color.fromCssColorString('#ADFF2F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #808080\r\n     * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GREY = Color.GRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F0FFF0\r\n     * <span class=\"colorSwath\" style=\"background: #F0FFF0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.HONEYDEW = freezeObject(Color.fromCssColorString('#F0FFF0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF69B4\r\n     * <span class=\"colorSwath\" style=\"background: #FF69B4;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.HOTPINK = freezeObject(Color.fromCssColorString('#FF69B4'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #CD5C5C\r\n     * <span class=\"colorSwath\" style=\"background: #CD5C5C;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.INDIANRED = freezeObject(Color.fromCssColorString('#CD5C5C'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #4B0082\r\n     * <span class=\"colorSwath\" style=\"background: #4B0082;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.INDIGO = freezeObject(Color.fromCssColorString('#4B0082'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFFF0\r\n     * <span class=\"colorSwath\" style=\"background: #FFFFF0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.IVORY = freezeObject(Color.fromCssColorString('#FFFFF0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F0E68C\r\n     * <span class=\"colorSwath\" style=\"background: #F0E68C;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.KHAKI = freezeObject(Color.fromCssColorString('#F0E68C'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #E6E6FA\r\n     * <span class=\"colorSwath\" style=\"background: #E6E6FA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LAVENDER = freezeObject(Color.fromCssColorString('#E6E6FA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFF0F5\r\n     * <span class=\"colorSwath\" style=\"background: #FFF0F5;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LAVENDAR_BLUSH = freezeObject(Color.fromCssColorString('#FFF0F5'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #7CFC00\r\n     * <span class=\"colorSwath\" style=\"background: #7CFC00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LAWNGREEN = freezeObject(Color.fromCssColorString('#7CFC00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFACD\r\n     * <span class=\"colorSwath\" style=\"background: #FFFACD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LEMONCHIFFON = freezeObject(Color.fromCssColorString('#FFFACD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #ADD8E6\r\n     * <span class=\"colorSwath\" style=\"background: #ADD8E6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTBLUE = freezeObject(Color.fromCssColorString('#ADD8E6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F08080\r\n     * <span class=\"colorSwath\" style=\"background: #F08080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTCORAL = freezeObject(Color.fromCssColorString('#F08080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #E0FFFF\r\n     * <span class=\"colorSwath\" style=\"background: #E0FFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTCYAN = freezeObject(Color.fromCssColorString('#E0FFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FAFAD2\r\n     * <span class=\"colorSwath\" style=\"background: #FAFAD2;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTGOLDENRODYELLOW = freezeObject(Color.fromCssColorString('#FAFAD2'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D3D3D3\r\n     * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTGRAY = freezeObject(Color.fromCssColorString('#D3D3D3'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #90EE90\r\n     * <span class=\"colorSwath\" style=\"background: #90EE90;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTGREEN = freezeObject(Color.fromCssColorString('#90EE90'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D3D3D3\r\n     * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTGREY = Color.LIGHTGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFB6C1\r\n     * <span class=\"colorSwath\" style=\"background: #FFB6C1;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTPINK = freezeObject(Color.fromCssColorString('#FFB6C1'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #20B2AA\r\n     * <span class=\"colorSwath\" style=\"background: #20B2AA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSEAGREEN = freezeObject(Color.fromCssColorString('#20B2AA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #87CEFA\r\n     * <span class=\"colorSwath\" style=\"background: #87CEFA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSKYBLUE = freezeObject(Color.fromCssColorString('#87CEFA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #778899\r\n     * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSLATEGRAY = freezeObject(Color.fromCssColorString('#778899'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #778899\r\n     * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSLATEGREY = Color.LIGHTSLATEGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #B0C4DE\r\n     * <span class=\"colorSwath\" style=\"background: #B0C4DE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSTEELBLUE = freezeObject(Color.fromCssColorString('#B0C4DE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFFE0\r\n     * <span class=\"colorSwath\" style=\"background: #FFFFE0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTYELLOW = freezeObject(Color.fromCssColorString('#FFFFE0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FF00\r\n     * <span class=\"colorSwath\" style=\"background: #00FF00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIME = freezeObject(Color.fromCssColorString('#00FF00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #32CD32\r\n     * <span class=\"colorSwath\" style=\"background: #32CD32;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIMEGREEN = freezeObject(Color.fromCssColorString('#32CD32'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FAF0E6\r\n     * <span class=\"colorSwath\" style=\"background: #FAF0E6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LINEN = freezeObject(Color.fromCssColorString('#FAF0E6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF00FF\r\n     * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MAGENTA = freezeObject(Color.fromCssColorString('#FF00FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #800000\r\n     * <span class=\"colorSwath\" style=\"background: #800000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MAROON = freezeObject(Color.fromCssColorString('#800000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #66CDAA\r\n     * <span class=\"colorSwath\" style=\"background: #66CDAA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMAQUAMARINE = freezeObject(Color.fromCssColorString('#66CDAA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #0000CD\r\n     * <span class=\"colorSwath\" style=\"background: #0000CD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMBLUE = freezeObject(Color.fromCssColorString('#0000CD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #BA55D3\r\n     * <span class=\"colorSwath\" style=\"background: #BA55D3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMORCHID = freezeObject(Color.fromCssColorString('#BA55D3'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #9370DB\r\n     * <span class=\"colorSwath\" style=\"background: #9370DB;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMPURPLE = freezeObject(Color.fromCssColorString('#9370DB'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #3CB371\r\n     * <span class=\"colorSwath\" style=\"background: #3CB371;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMSEAGREEN = freezeObject(Color.fromCssColorString('#3CB371'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #7B68EE\r\n     * <span class=\"colorSwath\" style=\"background: #7B68EE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMSLATEBLUE = freezeObject(Color.fromCssColorString('#7B68EE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FA9A\r\n     * <span class=\"colorSwath\" style=\"background: #00FA9A;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMSPRINGGREEN = freezeObject(Color.fromCssColorString('#00FA9A'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #48D1CC\r\n     * <span class=\"colorSwath\" style=\"background: #48D1CC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMTURQUOISE = freezeObject(Color.fromCssColorString('#48D1CC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #C71585\r\n     * <span class=\"colorSwath\" style=\"background: #C71585;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMVIOLETRED = freezeObject(Color.fromCssColorString('#C71585'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #191970\r\n     * <span class=\"colorSwath\" style=\"background: #191970;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MIDNIGHTBLUE = freezeObject(Color.fromCssColorString('#191970'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F5FFFA\r\n     * <span class=\"colorSwath\" style=\"background: #F5FFFA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MINTCREAM = freezeObject(Color.fromCssColorString('#F5FFFA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFE4E1\r\n     * <span class=\"colorSwath\" style=\"background: #FFE4E1;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MISTYROSE = freezeObject(Color.fromCssColorString('#FFE4E1'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFE4B5\r\n     * <span class=\"colorSwath\" style=\"background: #FFE4B5;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MOCCASIN = freezeObject(Color.fromCssColorString('#FFE4B5'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFDEAD\r\n     * <span class=\"colorSwath\" style=\"background: #FFDEAD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.NAVAJOWHITE = freezeObject(Color.fromCssColorString('#FFDEAD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #000080\r\n     * <span class=\"colorSwath\" style=\"background: #000080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.NAVY = freezeObject(Color.fromCssColorString('#000080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FDF5E6\r\n     * <span class=\"colorSwath\" style=\"background: #FDF5E6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.OLDLACE = freezeObject(Color.fromCssColorString('#FDF5E6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #808000\r\n     * <span class=\"colorSwath\" style=\"background: #808000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.OLIVE = freezeObject(Color.fromCssColorString('#808000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #6B8E23\r\n     * <span class=\"colorSwath\" style=\"background: #6B8E23;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.OLIVEDRAB = freezeObject(Color.fromCssColorString('#6B8E23'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFA500\r\n     * <span class=\"colorSwath\" style=\"background: #FFA500;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ORANGE = freezeObject(Color.fromCssColorString('#FFA500'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF4500\r\n     * <span class=\"colorSwath\" style=\"background: #FF4500;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ORANGERED = freezeObject(Color.fromCssColorString('#FF4500'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DA70D6\r\n     * <span class=\"colorSwath\" style=\"background: #DA70D6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ORCHID = freezeObject(Color.fromCssColorString('#DA70D6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #EEE8AA\r\n     * <span class=\"colorSwath\" style=\"background: #EEE8AA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PALEGOLDENROD = freezeObject(Color.fromCssColorString('#EEE8AA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #98FB98\r\n     * <span class=\"colorSwath\" style=\"background: #98FB98;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PALEGREEN = freezeObject(Color.fromCssColorString('#98FB98'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #AFEEEE\r\n     * <span class=\"colorSwath\" style=\"background: #AFEEEE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PALETURQUOISE = freezeObject(Color.fromCssColorString('#AFEEEE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DB7093\r\n     * <span class=\"colorSwath\" style=\"background: #DB7093;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PALEVIOLETRED = freezeObject(Color.fromCssColorString('#DB7093'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFEFD5\r\n     * <span class=\"colorSwath\" style=\"background: #FFEFD5;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PAPAYAWHIP = freezeObject(Color.fromCssColorString('#FFEFD5'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFDAB9\r\n     * <span class=\"colorSwath\" style=\"background: #FFDAB9;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PEACHPUFF = freezeObject(Color.fromCssColorString('#FFDAB9'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #CD853F\r\n     * <span class=\"colorSwath\" style=\"background: #CD853F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PERU = freezeObject(Color.fromCssColorString('#CD853F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFC0CB\r\n     * <span class=\"colorSwath\" style=\"background: #FFC0CB;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PINK = freezeObject(Color.fromCssColorString('#FFC0CB'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DDA0DD\r\n     * <span class=\"colorSwath\" style=\"background: #DDA0DD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PLUM = freezeObject(Color.fromCssColorString('#DDA0DD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #B0E0E6\r\n     * <span class=\"colorSwath\" style=\"background: #B0E0E6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.POWDERBLUE = freezeObject(Color.fromCssColorString('#B0E0E6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #800080\r\n     * <span class=\"colorSwath\" style=\"background: #800080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PURPLE = freezeObject(Color.fromCssColorString('#800080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF0000\r\n     * <span class=\"colorSwath\" style=\"background: #FF0000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.RED = freezeObject(Color.fromCssColorString('#FF0000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #BC8F8F\r\n     * <span class=\"colorSwath\" style=\"background: #BC8F8F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ROSYBROWN = freezeObject(Color.fromCssColorString('#BC8F8F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #4169E1\r\n     * <span class=\"colorSwath\" style=\"background: #4169E1;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ROYALBLUE = freezeObject(Color.fromCssColorString('#4169E1'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8B4513\r\n     * <span class=\"colorSwath\" style=\"background: #8B4513;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SADDLEBROWN = freezeObject(Color.fromCssColorString('#8B4513'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FA8072\r\n     * <span class=\"colorSwath\" style=\"background: #FA8072;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SALMON = freezeObject(Color.fromCssColorString('#FA8072'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F4A460\r\n     * <span class=\"colorSwath\" style=\"background: #F4A460;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SANDYBROWN = freezeObject(Color.fromCssColorString('#F4A460'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #2E8B57\r\n     * <span class=\"colorSwath\" style=\"background: #2E8B57;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SEAGREEN = freezeObject(Color.fromCssColorString('#2E8B57'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFF5EE\r\n     * <span class=\"colorSwath\" style=\"background: #FFF5EE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SEASHELL = freezeObject(Color.fromCssColorString('#FFF5EE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #A0522D\r\n     * <span class=\"colorSwath\" style=\"background: #A0522D;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SIENNA = freezeObject(Color.fromCssColorString('#A0522D'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #C0C0C0\r\n     * <span class=\"colorSwath\" style=\"background: #C0C0C0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SILVER = freezeObject(Color.fromCssColorString('#C0C0C0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #87CEEB\r\n     * <span class=\"colorSwath\" style=\"background: #87CEEB;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SKYBLUE = freezeObject(Color.fromCssColorString('#87CEEB'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #6A5ACD\r\n     * <span class=\"colorSwath\" style=\"background: #6A5ACD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SLATEBLUE = freezeObject(Color.fromCssColorString('#6A5ACD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #708090\r\n     * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SLATEGRAY = freezeObject(Color.fromCssColorString('#708090'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #708090\r\n     * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SLATEGREY = Color.SLATEGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFAFA\r\n     * <span class=\"colorSwath\" style=\"background: #FFFAFA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SNOW = freezeObject(Color.fromCssColorString('#FFFAFA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FF7F\r\n     * <span class=\"colorSwath\" style=\"background: #00FF7F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SPRINGGREEN = freezeObject(Color.fromCssColorString('#00FF7F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #4682B4\r\n     * <span class=\"colorSwath\" style=\"background: #4682B4;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.STEELBLUE = freezeObject(Color.fromCssColorString('#4682B4'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D2B48C\r\n     * <span class=\"colorSwath\" style=\"background: #D2B48C;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TAN = freezeObject(Color.fromCssColorString('#D2B48C'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #008080\r\n     * <span class=\"colorSwath\" style=\"background: #008080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TEAL = freezeObject(Color.fromCssColorString('#008080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D8BFD8\r\n     * <span class=\"colorSwath\" style=\"background: #D8BFD8;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.THISTLE = freezeObject(Color.fromCssColorString('#D8BFD8'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF6347\r\n     * <span class=\"colorSwath\" style=\"background: #FF6347;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TOMATO = freezeObject(Color.fromCssColorString('#FF6347'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #40E0D0\r\n     * <span class=\"colorSwath\" style=\"background: #40E0D0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TURQUOISE = freezeObject(Color.fromCssColorString('#40E0D0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #EE82EE\r\n     * <span class=\"colorSwath\" style=\"background: #EE82EE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.VIOLET = freezeObject(Color.fromCssColorString('#EE82EE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F5DEB3\r\n     * <span class=\"colorSwath\" style=\"background: #F5DEB3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.WHEAT = freezeObject(Color.fromCssColorString('#F5DEB3'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFFFF\r\n     * <span class=\"colorSwath\" style=\"background: #FFFFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.WHITE = freezeObject(Color.fromCssColorString('#FFFFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F5F5F5\r\n     * <span class=\"colorSwath\" style=\"background: #F5F5F5;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.WHITESMOKE = freezeObject(Color.fromCssColorString('#F5F5F5'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFF00\r\n     * <span class=\"colorSwath\" style=\"background: #FFFF00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.YELLOW = freezeObject(Color.fromCssColorString('#FFFF00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #9ACD32\r\n     * <span class=\"colorSwath\" style=\"background: #9ACD32;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.YELLOWGREEN = freezeObject(Color.fromCssColorString('#9ACD32'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS transparent.\r\n     * <span class=\"colorSwath\" style=\"background: transparent;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TRANSPARENT = freezeObject(new Color(0, 0, 0, 0));\r\n\r\n    return Color;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Color.js\n// module id = 67\n// module chunks = 0","define([\r\n        './AttributeCompression',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './Math',\r\n        './Matrix4',\r\n        './TerrainQuantization'\r\n    ], function(\r\n        AttributeCompression,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        CesiumMath,\r\n        Matrix4,\r\n        TerrainQuantization) {\r\n    'use strict';\r\n\r\n    var cartesian3Scratch = new Cartesian3();\r\n    var cartesian3DimScratch = new Cartesian3();\r\n    var cartesian2Scratch = new Cartesian2();\r\n    var matrix4Scratch = new Matrix4();\r\n    var matrix4Scratch2 = new Matrix4();\r\n\r\n    var SHIFT_LEFT_12 = Math.pow(2.0, 12.0);\r\n\r\n    /**\r\n     * Data used to quantize and pack the terrain mesh. The position can be unpacked for picking and all attributes\r\n     * are unpacked in the vertex shader.\r\n     *\r\n     * @alias TerrainEncoding\r\n     * @constructor\r\n     *\r\n     * @param {AxisAlignedBoundingBox} axisAlignedBoundingBox The bounds of the tile in the east-north-up coordinates at the tiles center.\r\n     * @param {Number} minimumHeight The minimum height.\r\n     * @param {Number} maximumHeight The maximum height.\r\n     * @param {Matrix4} fromENU The east-north-up to fixed frame matrix at the center of the terrain mesh.\r\n     * @param {Boolean} hasVertexNormals If the mesh has vertex normals.\r\n     * @param {Boolean} [hasWebMercatorT=false] true if the terrain data includes a Web Mercator texture coordinate; otherwise, false.\r\n     *\r\n     * @private\r\n     */\r\n    function TerrainEncoding(axisAlignedBoundingBox, minimumHeight, maximumHeight, fromENU, hasVertexNormals, hasWebMercatorT) {\r\n        var quantization;\r\n        var center;\r\n        var toENU;\r\n        var matrix;\r\n\r\n        if (defined(axisAlignedBoundingBox) && defined(minimumHeight) && defined(maximumHeight) && defined(fromENU)) {\r\n            var minimum = axisAlignedBoundingBox.minimum;\r\n            var maximum = axisAlignedBoundingBox.maximum;\r\n\r\n            var dimensions = Cartesian3.subtract(maximum, minimum, cartesian3DimScratch);\r\n            var hDim = maximumHeight - minimumHeight;\r\n            var maxDim = Math.max(Cartesian3.maximumComponent(dimensions), hDim);\r\n\r\n            if (maxDim < SHIFT_LEFT_12 - 1.0) {\r\n                quantization = TerrainQuantization.BITS12;\r\n            } else {\r\n                quantization = TerrainQuantization.NONE;\r\n            }\r\n\r\n            center = axisAlignedBoundingBox.center;\r\n            toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\r\n\r\n            var translation = Cartesian3.negate(minimum, cartesian3Scratch);\r\n            Matrix4.multiply(Matrix4.fromTranslation(translation, matrix4Scratch), toENU, toENU);\r\n\r\n            var scale = cartesian3Scratch;\r\n            scale.x = 1.0 / dimensions.x;\r\n            scale.y = 1.0 / dimensions.y;\r\n            scale.z = 1.0 / dimensions.z;\r\n            Matrix4.multiply(Matrix4.fromScale(scale, matrix4Scratch), toENU, toENU);\r\n\r\n            matrix = Matrix4.clone(fromENU);\r\n            Matrix4.setTranslation(matrix, Cartesian3.ZERO, matrix);\r\n\r\n            fromENU = Matrix4.clone(fromENU, new Matrix4());\r\n\r\n            var translationMatrix = Matrix4.fromTranslation(minimum, matrix4Scratch);\r\n            var scaleMatrix =  Matrix4.fromScale(dimensions, matrix4Scratch2);\r\n            var st = Matrix4.multiply(translationMatrix, scaleMatrix,matrix4Scratch);\r\n\r\n            Matrix4.multiply(fromENU, st, fromENU);\r\n            Matrix4.multiply(matrix, st, matrix);\r\n        }\r\n\r\n        /**\r\n         * How the vertices of the mesh were compressed.\r\n         * @type {TerrainQuantization}\r\n         */\r\n        this.quantization = quantization;\r\n\r\n        /**\r\n         * The minimum height of the tile including the skirts.\r\n         * @type {Number}\r\n         */\r\n        this.minimumHeight = minimumHeight;\r\n\r\n        /**\r\n         * The maximum height of the tile.\r\n         * @type {Number}\r\n         */\r\n        this.maximumHeight = maximumHeight;\r\n\r\n        /**\r\n         * The center of the tile.\r\n         * @type {Cartesian3}\r\n         */\r\n        this.center = center;\r\n\r\n        /**\r\n         * A matrix that takes a vertex from the tile, transforms it to east-north-up at the center and scales\r\n         * it so each component is in the [0, 1] range.\r\n         * @type {Matrix4}\r\n         */\r\n        this.toScaledENU = toENU;\r\n\r\n        /**\r\n         * A matrix that restores a vertex transformed with toScaledENU back to the earth fixed reference frame\r\n         * @type {Matrix4}\r\n         */\r\n        this.fromScaledENU = fromENU;\r\n\r\n        /**\r\n         * The matrix used to decompress the terrain vertices in the shader for RTE rendering.\r\n         * @type {Matrix4}\r\n         */\r\n        this.matrix = matrix;\r\n\r\n        /**\r\n         * The terrain mesh contains normals.\r\n         * @type {Boolean}\r\n         */\r\n        this.hasVertexNormals = hasVertexNormals;\r\n\r\n        /**\r\n         * The terrain mesh contains a vertical texture coordinate following the Web Mercator projection.\r\n         * @type {Boolean}\r\n         */\r\n        this.hasWebMercatorT = defaultValue(hasWebMercatorT, false);\r\n    }\r\n\r\n    TerrainEncoding.prototype.encode = function(vertexBuffer, bufferIndex, position, uv, height, normalToPack, webMercatorT) {\r\n        var u = uv.x;\r\n        var v = uv.y;\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            position = Matrix4.multiplyByPoint(this.toScaledENU, position, cartesian3Scratch);\r\n\r\n            position.x = CesiumMath.clamp(position.x, 0.0, 1.0);\r\n            position.y = CesiumMath.clamp(position.y, 0.0, 1.0);\r\n            position.z = CesiumMath.clamp(position.z, 0.0, 1.0);\r\n\r\n            var hDim = this.maximumHeight - this.minimumHeight;\r\n            var h = CesiumMath.clamp((height - this.minimumHeight) / hDim, 0.0, 1.0);\r\n\r\n            Cartesian2.fromElements(position.x, position.y, cartesian2Scratch);\r\n            var compressed0 = AttributeCompression.compressTextureCoordinates(cartesian2Scratch);\r\n\r\n            Cartesian2.fromElements(position.z, h, cartesian2Scratch);\r\n            var compressed1 = AttributeCompression.compressTextureCoordinates(cartesian2Scratch);\r\n\r\n            Cartesian2.fromElements(u, v, cartesian2Scratch);\r\n            var compressed2 = AttributeCompression.compressTextureCoordinates(cartesian2Scratch);\r\n\r\n            vertexBuffer[bufferIndex++] = compressed0;\r\n            vertexBuffer[bufferIndex++] = compressed1;\r\n            vertexBuffer[bufferIndex++] = compressed2;\r\n\r\n            if (this.hasWebMercatorT) {\r\n                Cartesian2.fromElements(webMercatorT, 0.0, cartesian2Scratch);\r\n                var compressed3 = AttributeCompression.compressTextureCoordinates(cartesian2Scratch);\r\n                vertexBuffer[bufferIndex++] = compressed3;\r\n            }\r\n        } else {\r\n            Cartesian3.subtract(position, this.center, cartesian3Scratch);\r\n\r\n            vertexBuffer[bufferIndex++] = cartesian3Scratch.x;\r\n            vertexBuffer[bufferIndex++] = cartesian3Scratch.y;\r\n            vertexBuffer[bufferIndex++] = cartesian3Scratch.z;\r\n            vertexBuffer[bufferIndex++] = height;\r\n            vertexBuffer[bufferIndex++] = u;\r\n            vertexBuffer[bufferIndex++] = v;\r\n\r\n            if (this.hasWebMercatorT) {\r\n                vertexBuffer[bufferIndex++] = webMercatorT;\r\n            }\r\n        }\r\n\r\n        if (this.hasVertexNormals) {\r\n            vertexBuffer[bufferIndex++] = AttributeCompression.octPackFloat(normalToPack);\r\n        }\r\n\r\n        return bufferIndex;\r\n    };\r\n\r\n    TerrainEncoding.prototype.decodePosition = function(buffer, index, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        index *= this.getStride();\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            var xy = AttributeCompression.decompressTextureCoordinates(buffer[index], cartesian2Scratch);\r\n            result.x = xy.x;\r\n            result.y = xy.y;\r\n\r\n            var zh = AttributeCompression.decompressTextureCoordinates(buffer[index + 1], cartesian2Scratch);\r\n            result.z = zh.x;\r\n\r\n            return Matrix4.multiplyByPoint(this.fromScaledENU, result, result);\r\n        }\r\n\r\n        result.x = buffer[index];\r\n        result.y = buffer[index + 1];\r\n        result.z = buffer[index + 2];\r\n        return Cartesian3.add(result, this.center, result);\r\n    };\r\n\r\n    TerrainEncoding.prototype.decodeTextureCoordinates = function(buffer, index, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian2();\r\n        }\r\n\r\n        index *= this.getStride();\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            return AttributeCompression.decompressTextureCoordinates(buffer[index + 2], result);\r\n        }\r\n\r\n        return Cartesian2.fromElements(buffer[index + 4], buffer[index + 5], result);\r\n    };\r\n\r\n    TerrainEncoding.prototype.decodeHeight = function(buffer, index) {\r\n        index *= this.getStride();\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            var zh = AttributeCompression.decompressTextureCoordinates(buffer[index + 1], cartesian2Scratch);\r\n            return zh.y * (this.maximumHeight - this.minimumHeight) + this.minimumHeight;\r\n        }\r\n\r\n        return buffer[index + 3];\r\n    };\r\n\r\n    TerrainEncoding.prototype.getOctEncodedNormal = function(buffer, index, result) {\r\n        var stride = this.getStride();\r\n        index = (index + 1) * stride - 1;\r\n\r\n        var temp = buffer[index] / 256.0;\r\n        var x = Math.floor(temp);\r\n        var y = (temp - x) * 256.0;\r\n\r\n        return Cartesian2.fromElements(x, y, result);\r\n    };\r\n\r\n    TerrainEncoding.prototype.getStride = function() {\r\n        var vertexStride;\r\n\r\n        switch (this.quantization) {\r\n            case TerrainQuantization.BITS12:\r\n                vertexStride = 3;\r\n                break;\r\n            default:\r\n                vertexStride = 6;\r\n        }\r\n\r\n        if (this.hasWebMercatorT) {\r\n            ++vertexStride;\r\n        }\r\n\r\n        if (this.hasVertexNormals) {\r\n            ++vertexStride;\r\n        }\r\n\r\n        return vertexStride;\r\n    };\r\n\r\n    var attributesNone = {\r\n        position3DAndHeight : 0,\r\n        textureCoordAndEncodedNormals : 1\r\n    };\r\n    var attributes = {\r\n        compressed0 : 0,\r\n        compressed1 : 1\r\n    };\r\n\r\n    TerrainEncoding.prototype.getAttributes = function(buffer) {\r\n        var datatype = ComponentDatatype.FLOAT;\r\n        var sizeInBytes = ComponentDatatype.getSizeInBytes(datatype);\r\n        var stride;\r\n\r\n        if (this.quantization === TerrainQuantization.NONE) {\r\n            var position3DAndHeightLength = 4;\r\n            var numTexCoordComponents = 2;\r\n\r\n            if (this.hasWebMercatorT) {\r\n                ++numTexCoordComponents;\r\n            }\r\n\r\n            if (this.hasVertexNormals) {\r\n                ++numTexCoordComponents;\r\n            }\r\n\r\n            stride = (position3DAndHeightLength + numTexCoordComponents) * sizeInBytes;\r\n\r\n            return [{\r\n                index : attributesNone.position3DAndHeight,\r\n                vertexBuffer : buffer,\r\n                componentDatatype : datatype,\r\n                componentsPerAttribute : position3DAndHeightLength,\r\n                offsetInBytes : 0,\r\n                strideInBytes : stride\r\n            }, {\r\n                index : attributesNone.textureCoordAndEncodedNormals,\r\n                vertexBuffer : buffer,\r\n                componentDatatype : datatype,\r\n                componentsPerAttribute : numTexCoordComponents,\r\n                offsetInBytes : position3DAndHeightLength * sizeInBytes,\r\n                strideInBytes : stride\r\n            }];\r\n        }\r\n\r\n        var numCompressed0 = 3;\r\n        var numCompressed1 = 0;\r\n\r\n        if (this.hasWebMercatorT || this.hasVertexNormals) {\r\n            ++numCompressed0;\r\n        }\r\n\r\n        if (this.hasWebMercatorT && this.hasVertexNormals) {\r\n            ++numCompressed1;\r\n\r\n            stride = (numCompressed0 + numCompressed1) * sizeInBytes;\r\n\r\n            return [{\r\n                index : attributes.compressed0,\r\n                vertexBuffer : buffer,\r\n                componentDatatype : datatype,\r\n                componentsPerAttribute : numCompressed0,\r\n                offsetInBytes : 0,\r\n                strideInBytes : stride\r\n            }, {\r\n                index : attributes.compressed1,\r\n                vertexBuffer : buffer,\r\n                componentDatatype : datatype,\r\n                componentsPerAttribute : numCompressed1,\r\n                offsetInBytes : numCompressed0 * sizeInBytes,\r\n                strideInBytes : stride\r\n            }];\r\n        }\r\n        return [{\r\n            index : attributes.compressed0,\r\n            vertexBuffer : buffer,\r\n            componentDatatype : datatype,\r\n            componentsPerAttribute : numCompressed0\r\n        }];\r\n    };\r\n\r\n    TerrainEncoding.prototype.getAttributeLocations = function() {\r\n        if (this.quantization === TerrainQuantization.NONE) {\r\n            return attributesNone;\r\n        }\r\n        return attributes;\r\n    };\r\n\r\n    TerrainEncoding.clone = function(encoding, result) {\r\n        if (!defined(result)) {\r\n            result = new TerrainEncoding();\r\n        }\r\n\r\n        result.quantization = encoding.quantization;\r\n        result.minimumHeight = encoding.minimumHeight;\r\n        result.maximumHeight = encoding.maximumHeight;\r\n        result.center = Cartesian3.clone(encoding.center);\r\n        result.toScaledENU = Matrix4.clone(encoding.toScaledENU);\r\n        result.fromScaledENU = Matrix4.clone(encoding.fromScaledENU);\r\n        result.matrix = Matrix4.clone(encoding.matrix);\r\n        result.hasVertexNormals = encoding.hasVertexNormals;\r\n        result.hasWebMercatorT = encoding.hasWebMercatorT;\r\n        return result;\r\n    };\r\n\r\n    return TerrainEncoding;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/TerrainEncoding.js\n// module id = 68\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var GeometryType = {\r\n        NONE : 0,\r\n        TRIANGLES : 1,\r\n        LINES : 2,\r\n        POLYLINES : 3\r\n    };\r\n\r\n    return freezeObject(GeometryType);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GeometryType.js\n// module id = 69\n// module chunks = 0","define([\r\n        '../ThirdParty/sprintf',\r\n        './binarySearch',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './GregorianDate',\r\n        './isLeapYear',\r\n        './LeapSecond',\r\n        './TimeConstants',\r\n        './TimeStandard'\r\n    ], function(\r\n        sprintf,\r\n        binarySearch,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        GregorianDate,\r\n        isLeapYear,\r\n        LeapSecond,\r\n        TimeConstants,\r\n        TimeStandard) {\r\n    'use strict';\r\n\r\n    var gregorianDateScratch = new GregorianDate();\r\n    var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n    var daysInLeapFeburary = 29;\r\n\r\n    function compareLeapSecondDates(leapSecond, dateToFind) {\r\n        return JulianDate.compare(leapSecond.julianDate, dateToFind.julianDate);\r\n    }\r\n\r\n    // we don't really need a leap second instance, anything with a julianDate property will do\r\n    var binarySearchScratchLeapSecond = new LeapSecond();\r\n\r\n    function convertUtcToTai(julianDate) {\r\n        //Even though julianDate is in UTC, we'll treat it as TAI and\r\n        //search the leap second table for it.\r\n        binarySearchScratchLeapSecond.julianDate = julianDate;\r\n        var leapSeconds = JulianDate.leapSeconds;\r\n        var index = binarySearch(leapSeconds, binarySearchScratchLeapSecond, compareLeapSecondDates);\r\n\r\n        if (index < 0) {\r\n            index = ~index;\r\n        }\r\n\r\n        if (index >= leapSeconds.length) {\r\n            index = leapSeconds.length - 1;\r\n        }\r\n\r\n        var offset = leapSeconds[index].offset;\r\n        if (index > 0) {\r\n            //Now we have the index of the closest leap second that comes on or after our UTC time.\r\n            //However, if the difference between the UTC date being converted and the TAI\r\n            //defined leap second is greater than the offset, we are off by one and need to use\r\n            //the previous leap second.\r\n            var difference = JulianDate.secondsDifference(leapSeconds[index].julianDate, julianDate);\r\n            if (difference > offset) {\r\n                index--;\r\n                offset = leapSeconds[index].offset;\r\n            }\r\n        }\r\n\r\n        JulianDate.addSeconds(julianDate, offset, julianDate);\r\n    }\r\n\r\n    function convertTaiToUtc(julianDate, result) {\r\n        binarySearchScratchLeapSecond.julianDate = julianDate;\r\n        var leapSeconds = JulianDate.leapSeconds;\r\n        var index = binarySearch(leapSeconds, binarySearchScratchLeapSecond, compareLeapSecondDates);\r\n        if (index < 0) {\r\n            index = ~index;\r\n        }\r\n\r\n        //All times before our first leap second get the first offset.\r\n        if (index === 0) {\r\n            return JulianDate.addSeconds(julianDate, -leapSeconds[0].offset, result);\r\n        }\r\n\r\n        //All times after our leap second get the last offset.\r\n        if (index >= leapSeconds.length) {\r\n            return JulianDate.addSeconds(julianDate, -leapSeconds[index - 1].offset, result);\r\n        }\r\n\r\n        //Compute the difference between the found leap second and the time we are converting.\r\n        var difference = JulianDate.secondsDifference(leapSeconds[index].julianDate, julianDate);\r\n\r\n        if (difference === 0) {\r\n            //The date is in our leap second table.\r\n            return JulianDate.addSeconds(julianDate, -leapSeconds[index].offset, result);\r\n        }\r\n\r\n        if (difference <= 1.0) {\r\n            //The requested date is during the moment of a leap second, then we cannot convert to UTC\r\n            return undefined;\r\n        }\r\n\r\n        //The time is in between two leap seconds, index is the leap second after the date\r\n        //we're converting, so we subtract one to get the correct LeapSecond instance.\r\n        return JulianDate.addSeconds(julianDate, -leapSeconds[--index].offset, result);\r\n    }\r\n\r\n    function setComponents(wholeDays, secondsOfDay, julianDate) {\r\n        var extraDays = (secondsOfDay / TimeConstants.SECONDS_PER_DAY) | 0;\r\n        wholeDays += extraDays;\r\n        secondsOfDay -= TimeConstants.SECONDS_PER_DAY * extraDays;\r\n\r\n        if (secondsOfDay < 0) {\r\n            wholeDays--;\r\n            secondsOfDay += TimeConstants.SECONDS_PER_DAY;\r\n        }\r\n\r\n        julianDate.dayNumber = wholeDays;\r\n        julianDate.secondsOfDay = secondsOfDay;\r\n        return julianDate;\r\n    }\r\n\r\n    function computeJulianDateComponents(year, month, day, hour, minute, second, millisecond) {\r\n        // Algorithm from page 604 of the Explanatory Supplement to the\r\n        // Astronomical Almanac (Seidelmann 1992).\r\n\r\n        var a = ((month - 14) / 12) | 0;\r\n        var b = year + 4800 + a;\r\n        var dayNumber = (((1461 * b) / 4) | 0) + (((367 * (month - 2 - 12 * a)) / 12) | 0) - (((3 * (((b + 100) / 100) | 0)) / 4) | 0) + day - 32075;\r\n\r\n        // JulianDates are noon-based\r\n        hour = hour - 12;\r\n        if (hour < 0) {\r\n            hour += 24;\r\n        }\r\n\r\n        var secondsOfDay = second + ((hour * TimeConstants.SECONDS_PER_HOUR) + (minute * TimeConstants.SECONDS_PER_MINUTE) + (millisecond * TimeConstants.SECONDS_PER_MILLISECOND));\r\n\r\n        if (secondsOfDay >= 43200.0) {\r\n            dayNumber -= 1;\r\n        }\r\n\r\n        return [dayNumber, secondsOfDay];\r\n    }\r\n\r\n    //Regular expressions used for ISO8601 date parsing.\r\n    //YYYY\r\n    var matchCalendarYear = /^(\\d{4})$/;\r\n    //YYYY-MM (YYYYMM is invalid)\r\n    var matchCalendarMonth = /^(\\d{4})-(\\d{2})$/;\r\n    //YYYY-DDD or YYYYDDD\r\n    var matchOrdinalDate = /^(\\d{4})-?(\\d{3})$/;\r\n    //YYYY-Www or YYYYWww or YYYY-Www-D or YYYYWwwD\r\n    var matchWeekDate = /^(\\d{4})-?W(\\d{2})-?(\\d{1})?$/;\r\n    //YYYY-MM-DD or YYYYMMDD\r\n    var matchCalendarDate = /^(\\d{4})-?(\\d{2})-?(\\d{2})$/;\r\n    // Match utc offset\r\n    var utcOffset = /([Z+\\-])?(\\d{2})?:?(\\d{2})?$/;\r\n    // Match hours HH or HH.xxxxx\r\n    var matchHours = /^(\\d{2})(\\.\\d+)?/.source + utcOffset.source;\r\n    // Match hours/minutes HH:MM HHMM.xxxxx\r\n    var matchHoursMinutes = /^(\\d{2}):?(\\d{2})(\\.\\d+)?/.source + utcOffset.source;\r\n    // Match hours/minutes HH:MM:SS HHMMSS.xxxxx\r\n    var matchHoursMinutesSeconds = /^(\\d{2}):?(\\d{2}):?(\\d{2})(\\.\\d+)?/.source + utcOffset.source;\r\n\r\n    var iso8601ErrorMessage = 'Invalid ISO 8601 date.';\r\n\r\n    /**\r\n     * Represents an astronomical Julian date, which is the number of days since noon on January 1, -4712 (4713 BC).\r\n     * For increased precision, this class stores the whole number part of the date and the seconds\r\n     * part of the date in separate components.  In order to be safe for arithmetic and represent\r\n     * leap seconds, the date is always stored in the International Atomic Time standard\r\n     * {@link TimeStandard.TAI}.\r\n     * @alias JulianDate\r\n     * @constructor\r\n     *\r\n     * @param {Number} [julianDayNumber=0.0] The Julian Day Number representing the number of whole days.  Fractional days will also be handled correctly.\r\n     * @param {Number} [secondsOfDay=0.0] The number of seconds into the current Julian Day Number.  Fractional seconds, negative seconds and seconds greater than a day will be handled correctly.\r\n     * @param {TimeStandard} [timeStandard=TimeStandard.UTC] The time standard in which the first two parameters are defined.\r\n     */\r\n    function JulianDate(julianDayNumber, secondsOfDay, timeStandard) {\r\n        /**\r\n         * Gets or sets the number of whole days.\r\n         * @type {Number}\r\n         */\r\n        this.dayNumber = undefined;\r\n\r\n        /**\r\n         * Gets or sets the number of seconds into the current day.\r\n         * @type {Number}\r\n         */\r\n        this.secondsOfDay = undefined;\r\n\r\n        julianDayNumber = defaultValue(julianDayNumber, 0.0);\r\n        secondsOfDay = defaultValue(secondsOfDay, 0.0);\r\n        timeStandard = defaultValue(timeStandard, TimeStandard.UTC);\r\n\r\n        //If julianDayNumber is fractional, make it an integer and add the number of seconds the fraction represented.\r\n        var wholeDays = julianDayNumber | 0;\r\n        secondsOfDay = secondsOfDay + (julianDayNumber - wholeDays) * TimeConstants.SECONDS_PER_DAY;\r\n\r\n        setComponents(wholeDays, secondsOfDay, this);\r\n\r\n        if (timeStandard === TimeStandard.UTC) {\r\n            convertUtcToTai(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance from a GregorianDate.\r\n     *\r\n     * @param {GregorianDate} date A GregorianDate.\r\n     * @param {JulianDate} [result] An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter or a new instance if none was provided.\r\n     *\r\n     * @exception {DeveloperError} date must be a valid GregorianDate.\r\n     */\r\n    JulianDate.fromGregorianDate = function(date, result) {\r\n        \r\n\r\n        var components = computeJulianDateComponents(date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\r\n        if (!defined(result)) {\r\n            return new JulianDate(components[0], components[1], TimeStandard.UTC);\r\n        }\r\n        setComponents(components[0], components[1], result);\r\n        convertUtcToTai(result);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new instance from a JavaScript Date.\r\n     *\r\n     * @param {Date} date A JavaScript Date.\r\n     * @param {JulianDate} [result] An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter or a new instance if none was provided.\r\n     *\r\n     * @exception {DeveloperError} date must be a valid JavaScript Date.\r\n     */\r\n    JulianDate.fromDate = function(date, result) {\r\n        \r\n\r\n        var components = computeJulianDateComponents(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\r\n        if (!defined(result)) {\r\n            return new JulianDate(components[0], components[1], TimeStandard.UTC);\r\n        }\r\n        setComponents(components[0], components[1], result);\r\n        convertUtcToTai(result);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new instance from a from an {@link http://en.wikipedia.org/wiki/ISO_8601|ISO 8601} date.\r\n     * This method is superior to <code>Date.parse</code> because it will handle all valid formats defined by the ISO 8601\r\n     * specification, including leap seconds and sub-millisecond times, which discarded by most JavaScript implementations.\r\n     *\r\n     * @param {String} iso8601String An ISO 8601 date.\r\n     * @param {JulianDate} [result] An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter or a new instance if none was provided.\r\n     *\r\n     * @exception {DeveloperError} Invalid ISO 8601 date.\r\n     */\r\n    JulianDate.fromIso8601 = function(iso8601String, result) {\r\n        \r\n\r\n        //Comma and decimal point both indicate a fractional number according to ISO 8601,\r\n        //start out by blanket replacing , with . which is the only valid such symbol in JS.\r\n        iso8601String = iso8601String.replace(',', '.');\r\n\r\n        //Split the string into its date and time components, denoted by a mandatory T\r\n        var tokens = iso8601String.split('T');\r\n        var year;\r\n        var month = 1;\r\n        var day = 1;\r\n        var hour = 0;\r\n        var minute = 0;\r\n        var second = 0;\r\n        var millisecond = 0;\r\n\r\n        //Lacking a time is okay, but a missing date is illegal.\r\n        var date = tokens[0];\r\n        var time = tokens[1];\r\n        var tmp;\r\n        var inLeapYear;\r\n        \r\n\r\n        //First match the date against possible regular expressions.\r\n        tokens = date.match(matchCalendarDate);\r\n        if (tokens !== null) {\r\n            \r\n            year = +tokens[1];\r\n            month = +tokens[2];\r\n            day = +tokens[3];\r\n        } else {\r\n            tokens = date.match(matchCalendarMonth);\r\n            if (tokens !== null) {\r\n                year = +tokens[1];\r\n                month = +tokens[2];\r\n            } else {\r\n                tokens = date.match(matchCalendarYear);\r\n                if (tokens !== null) {\r\n                    year = +tokens[1];\r\n                } else {\r\n                    //Not a year/month/day so it must be an ordinal date.\r\n                    var dayOfYear;\r\n                    tokens = date.match(matchOrdinalDate);\r\n                    if (tokens !== null) {\r\n\r\n                        year = +tokens[1];\r\n                        dayOfYear = +tokens[2];\r\n                        inLeapYear = isLeapYear(year);\r\n\r\n                        //This validation is only applicable for this format.\r\n                        \r\n                    } else {\r\n                        tokens = date.match(matchWeekDate);\r\n                        if (tokens !== null) {\r\n                            //ISO week date to ordinal date from\r\n                            //http://en.wikipedia.org/w/index.php?title=ISO_week_date&oldid=474176775\r\n                            year = +tokens[1];\r\n                            var weekNumber = +tokens[2];\r\n                            var dayOfWeek = +tokens[3] || 0;\r\n\r\n                            \r\n\r\n                            var january4 = new Date(Date.UTC(year, 0, 4));\r\n                            dayOfYear = (weekNumber * 7) + dayOfWeek - january4.getUTCDay() - 3;\r\n                        } else {\r\n                            //None of our regular expressions succeeded in parsing the date properly.\r\n                            \r\n                        }\r\n                    }\r\n                    //Split an ordinal date into month/day.\r\n                    tmp = new Date(Date.UTC(year, 0, 1));\r\n                    tmp.setUTCDate(dayOfYear);\r\n                    month = tmp.getUTCMonth() + 1;\r\n                    day = tmp.getUTCDate();\r\n                }\r\n            }\r\n        }\r\n\r\n        //Now that we have all of the date components, validate them to make sure nothing is out of range.\r\n        inLeapYear = isLeapYear(year);\r\n        \r\n\r\n        //Now move onto the time string, which is much simpler.\r\n        //If no time is specified, it is considered the beginning of the day, UTC to match Javascript's implementation.\r\n        var offsetIndex;\r\n        if (defined(time)) {\r\n            tokens = time.match(matchHoursMinutesSeconds);\r\n            if (tokens !== null) {\r\n                \r\n\r\n                hour = +tokens[1];\r\n                minute = +tokens[2];\r\n                second = +tokens[3];\r\n                millisecond = +(tokens[4] || 0) * 1000.0;\r\n                offsetIndex = 5;\r\n            } else {\r\n                tokens = time.match(matchHoursMinutes);\r\n                if (tokens !== null) {\r\n                    \r\n\r\n                    hour = +tokens[1];\r\n                    minute = +tokens[2];\r\n                    second = +(tokens[3] || 0) * 60.0;\r\n                    offsetIndex = 4;\r\n                } else {\r\n                    tokens = time.match(matchHours);\r\n                    if (tokens !== null) {\r\n                        hour = +tokens[1];\r\n                        minute = +(tokens[2] || 0) * 60.0;\r\n                        offsetIndex = 3;\r\n                    } else {\r\n                        \r\n                    }\r\n                }\r\n            }\r\n\r\n            //Validate that all values are in proper range.  Minutes and hours have special cases at 60 and 24.\r\n            \r\n\r\n            //Check the UTC offset value, if no value exists, use local time\r\n            //a Z indicates UTC, + or - are offsets.\r\n            var offset = tokens[offsetIndex];\r\n            var offsetHours = +(tokens[offsetIndex + 1]);\r\n            var offsetMinutes = +(tokens[offsetIndex + 2] || 0);\r\n            switch (offset) {\r\n            case '+':\r\n                hour = hour - offsetHours;\r\n                minute = minute - offsetMinutes;\r\n                break;\r\n            case '-':\r\n                hour = hour + offsetHours;\r\n                minute = minute + offsetMinutes;\r\n                break;\r\n            case 'Z':\r\n                break;\r\n            default:\r\n                minute = minute + new Date(Date.UTC(year, month - 1, day, hour, minute)).getTimezoneOffset();\r\n                break;\r\n            }\r\n        }\r\n\r\n        //ISO8601 denotes a leap second by any time having a seconds component of 60 seconds.\r\n        //If that's the case, we need to temporarily subtract a second in order to build a UTC date.\r\n        //Then we add it back in after converting to TAI.\r\n        var isLeapSecond = second === 60;\r\n        if (isLeapSecond) {\r\n            second--;\r\n        }\r\n\r\n        //Even if we successfully parsed the string into its components, after applying UTC offset or\r\n        //special cases like 24:00:00 denoting midnight, we need to normalize the data appropriately.\r\n\r\n        //milliseconds can never be greater than 1000, and seconds can't be above 60, so we start with minutes\r\n        while (minute >= 60) {\r\n            minute -= 60;\r\n            hour++;\r\n        }\r\n\r\n        while (hour >= 24) {\r\n            hour -= 24;\r\n            day++;\r\n        }\r\n\r\n        tmp = (inLeapYear && month === 2) ? daysInLeapFeburary : daysInMonth[month - 1];\r\n        while (day > tmp) {\r\n            day -= tmp;\r\n            month++;\r\n\r\n            if (month > 12) {\r\n                month -= 12;\r\n                year++;\r\n            }\r\n\r\n            tmp = (inLeapYear && month === 2) ? daysInLeapFeburary : daysInMonth[month - 1];\r\n        }\r\n\r\n        //If UTC offset is at the beginning/end of the day, minutes can be negative.\r\n        while (minute < 0) {\r\n            minute += 60;\r\n            hour--;\r\n        }\r\n\r\n        while (hour < 0) {\r\n            hour += 24;\r\n            day--;\r\n        }\r\n\r\n        while (day < 1) {\r\n            month--;\r\n            if (month < 1) {\r\n                month += 12;\r\n                year--;\r\n            }\r\n\r\n            tmp = (inLeapYear && month === 2) ? daysInLeapFeburary : daysInMonth[month - 1];\r\n            day += tmp;\r\n        }\r\n\r\n        //Now create the JulianDate components from the Gregorian date and actually create our instance.\r\n        var components = computeJulianDateComponents(year, month, day, hour, minute, second, millisecond);\r\n\r\n        if (!defined(result)) {\r\n            result = new JulianDate(components[0], components[1], TimeStandard.UTC);\r\n        } else {\r\n            setComponents(components[0], components[1], result);\r\n            convertUtcToTai(result);\r\n        }\r\n\r\n        //If we were on a leap second, add it back.\r\n        if (isLeapSecond) {\r\n            JulianDate.addSeconds(result, 1, result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new instance that represents the current system time.\r\n     * This is equivalent to calling <code>JulianDate.fromDate(new Date());</code>.\r\n     *\r\n     * @param {JulianDate} [result] An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter or a new instance if none was provided.\r\n     */\r\n    JulianDate.now = function(result) {\r\n        return JulianDate.fromDate(new Date(), result);\r\n    };\r\n\r\n    var toGregorianDateScratch = new JulianDate(0, 0, TimeStandard.TAI);\r\n\r\n    /**\r\n     * Creates a {@link GregorianDate} from the provided instance.\r\n     *\r\n     * @param {JulianDate} julianDate The date to be converted.\r\n     * @param {GregorianDate} [result] An existing instance to use for the result.\r\n     * @returns {GregorianDate} The modified result parameter or a new instance if none was provided.\r\n     */\r\n    JulianDate.toGregorianDate = function(julianDate, result) {\r\n        \r\n\r\n        var isLeapSecond = false;\r\n        var thisUtc = convertTaiToUtc(julianDate, toGregorianDateScratch);\r\n        if (!defined(thisUtc)) {\r\n            //Conversion to UTC will fail if we are during a leap second.\r\n            //If that's the case, subtract a second and convert again.\r\n            //JavaScript doesn't support leap seconds, so this results in second 59 being repeated twice.\r\n            JulianDate.addSeconds(julianDate, -1, toGregorianDateScratch);\r\n            thisUtc = convertTaiToUtc(toGregorianDateScratch, toGregorianDateScratch);\r\n            isLeapSecond = true;\r\n        }\r\n\r\n        var julianDayNumber = thisUtc.dayNumber;\r\n        var secondsOfDay = thisUtc.secondsOfDay;\r\n\r\n        if (secondsOfDay >= 43200.0) {\r\n            julianDayNumber += 1;\r\n        }\r\n\r\n        // Algorithm from page 604 of the Explanatory Supplement to the\r\n        // Astronomical Almanac (Seidelmann 1992).\r\n        var L = (julianDayNumber + 68569) | 0;\r\n        var N = (4 * L / 146097) | 0;\r\n        L = (L - (((146097 * N + 3) / 4) | 0)) | 0;\r\n        var I = ((4000 * (L + 1)) / 1461001) | 0;\r\n        L = (L - (((1461 * I) / 4) | 0) + 31) | 0;\r\n        var J = ((80 * L) / 2447) | 0;\r\n        var day = (L - (((2447 * J) / 80) | 0)) | 0;\r\n        L = (J / 11) | 0;\r\n        var month = (J + 2 - 12 * L) | 0;\r\n        var year = (100 * (N - 49) + I + L) | 0;\r\n\r\n        var hour = (secondsOfDay / TimeConstants.SECONDS_PER_HOUR) | 0;\r\n        var remainingSeconds = secondsOfDay - (hour * TimeConstants.SECONDS_PER_HOUR);\r\n        var minute = (remainingSeconds / TimeConstants.SECONDS_PER_MINUTE) | 0;\r\n        remainingSeconds = remainingSeconds - (minute * TimeConstants.SECONDS_PER_MINUTE);\r\n        var second = remainingSeconds | 0;\r\n        var millisecond = ((remainingSeconds - second) / TimeConstants.SECONDS_PER_MILLISECOND);\r\n\r\n        // JulianDates are noon-based\r\n        hour += 12;\r\n        if (hour > 23) {\r\n            hour -= 24;\r\n        }\r\n\r\n        //If we were on a leap second, add it back.\r\n        if (isLeapSecond) {\r\n            second += 1;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new GregorianDate(year, month, day, hour, minute, second, millisecond, isLeapSecond);\r\n        }\r\n\r\n        result.year = year;\r\n        result.month = month;\r\n        result.day = day;\r\n        result.hour = hour;\r\n        result.minute = minute;\r\n        result.second = second;\r\n        result.millisecond = millisecond;\r\n        result.isLeapSecond = isLeapSecond;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a JavaScript Date from the provided instance.\r\n     * Since JavaScript dates are only accurate to the nearest millisecond and\r\n     * cannot represent a leap second, consider using {@link JulianDate.toGregorianDate} instead.\r\n     * If the provided JulianDate is during a leap second, the previous second is used.\r\n     *\r\n     * @param {JulianDate} julianDate The date to be converted.\r\n     * @returns {Date} A new instance representing the provided date.\r\n     */\r\n    JulianDate.toDate = function(julianDate) {\r\n        \r\n\r\n        var gDate = JulianDate.toGregorianDate(julianDate, gregorianDateScratch);\r\n        var second = gDate.second;\r\n        if (gDate.isLeapSecond) {\r\n            second -= 1;\r\n        }\r\n        return new Date(Date.UTC(gDate.year, gDate.month - 1, gDate.day, gDate.hour, gDate.minute, second, gDate.millisecond));\r\n    };\r\n\r\n    /**\r\n     * Creates an ISO8601 representation of the provided date.\r\n     *\r\n     * @param {JulianDate} julianDate The date to be converted.\r\n     * @param {Number} [precision] The number of fractional digits used to represent the seconds component.  By default, the most precise representation is used.\r\n     * @returns {String} The ISO8601 representation of the provided date.\r\n     */\r\n    JulianDate.toIso8601 = function(julianDate, precision) {\r\n        \r\n\r\n        var gDate = JulianDate.toGregorianDate(julianDate, gregorianDateScratch);\r\n        var year = gDate.year;\r\n        var month = gDate.month;\r\n        var day = gDate.day;\r\n        var hour = gDate.hour;\r\n        var minute = gDate.minute;\r\n        var second = gDate.second;\r\n        var millisecond = gDate.millisecond;\r\n\r\n        // special case - Iso8601.MAXIMUM_VALUE produces a string which we can't parse unless we adjust.\r\n        // 10000-01-01T00:00:00 is the same instant as 9999-12-31T24:00:00\r\n        if (year === 10000 && month === 1 && day === 1 && hour === 0 && minute === 0 && second === 0 && millisecond === 0) {\r\n            year = 9999;\r\n            month = 12;\r\n            day = 31;\r\n            hour = 24;\r\n        }\r\n\r\n        var millisecondStr;\r\n\r\n        if (!defined(precision) && millisecond !== 0) {\r\n            //Forces milliseconds into a number with at least 3 digits to whatever the default toString() precision is.\r\n            millisecondStr = (millisecond * 0.01).toString().replace('.', '');\r\n            return sprintf('%04d-%02d-%02dT%02d:%02d:%02d.%sZ', year, month, day, hour, minute, second, millisecondStr);\r\n        }\r\n\r\n        //Precision is either 0 or milliseconds is 0 with undefined precision, in either case, leave off milliseconds entirely\r\n        if (!defined(precision) || precision === 0) {\r\n            return sprintf('%04d-%02d-%02dT%02d:%02d:%02dZ', year, month, day, hour, minute, second);\r\n        }\r\n\r\n        //Forces milliseconds into a number with at least 3 digits to whatever the specified precision is.\r\n        millisecondStr = (millisecond * 0.01).toFixed(precision).replace('.', '').slice(0, precision);\r\n        return sprintf('%04d-%02d-%02dT%02d:%02d:%02d.%sZ', year, month, day, hour, minute, second, millisecondStr);\r\n    };\r\n\r\n    /**\r\n     * Duplicates a JulianDate instance.\r\n     *\r\n     * @param {JulianDate} julianDate The date to duplicate.\r\n     * @param {JulianDate} [result] An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter or a new instance if none was provided. Returns undefined if julianDate is undefined.\r\n     */\r\n    JulianDate.clone = function(julianDate, result) {\r\n        if (!defined(julianDate)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new JulianDate(julianDate.dayNumber, julianDate.secondsOfDay, TimeStandard.TAI);\r\n        }\r\n        result.dayNumber = julianDate.dayNumber;\r\n        result.secondsOfDay = julianDate.secondsOfDay;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares two instances.\r\n     *\r\n     * @param {JulianDate} left The first instance.\r\n     * @param {JulianDate} right The second instance.\r\n     * @returns {Number} A negative value if left is less than right, a positive value if left is greater than right, or zero if left and right are equal.\r\n     */\r\n    JulianDate.compare = function(left, right) {\r\n        \r\n\r\n        var julianDayNumberDifference = left.dayNumber - right.dayNumber;\r\n        if (julianDayNumberDifference !== 0) {\r\n            return julianDayNumberDifference;\r\n        }\r\n        return left.secondsOfDay - right.secondsOfDay;\r\n    };\r\n\r\n    /**\r\n     * Compares two instances and returns <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {JulianDate} [left] The first instance.\r\n     * @param {JulianDate} [right] The second instance.\r\n     * @returns {Boolean} <code>true</code> if the dates are equal; otherwise, <code>false</code>.\r\n     */\r\n    JulianDate.equals = function(left, right) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                left.dayNumber === right.dayNumber &&\r\n                left.secondsOfDay === right.secondsOfDay);\r\n    };\r\n\r\n    /**\r\n     * Compares two instances and returns <code>true</code> if they are within <code>epsilon</code> seconds of\r\n     * each other.  That is, in order for the dates to be considered equal (and for\r\n     * this function to return <code>true</code>), the absolute value of the difference between them, in\r\n     * seconds, must be less than <code>epsilon</code>.\r\n     *\r\n     * @param {JulianDate} [left] The first instance.\r\n     * @param {JulianDate} [right] The second instance.\r\n     * @param {Number} epsilon The maximum number of seconds that should separate the two instances.\r\n     * @returns {Boolean} <code>true</code> if the two dates are within <code>epsilon</code> seconds of each other; otherwise <code>false</code>.\r\n     */\r\n    JulianDate.equalsEpsilon = function(left, right, epsilon) {\r\n        \r\n\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                Math.abs(JulianDate.secondsDifference(left, right)) <= epsilon);\r\n    };\r\n\r\n    /**\r\n     * Computes the total number of whole and fractional days represented by the provided instance.\r\n     *\r\n     * @param {JulianDate} julianDate The date.\r\n     * @returns {Number} The Julian date as single floating point number.\r\n     */\r\n    JulianDate.totalDays = function(julianDate) {\r\n        \r\n        return julianDate.dayNumber + (julianDate.secondsOfDay / TimeConstants.SECONDS_PER_DAY);\r\n    };\r\n\r\n    /**\r\n     * Computes the difference in seconds between the provided instance.\r\n     *\r\n     * @param {JulianDate} left The first instance.\r\n     * @param {JulianDate} right The second instance.\r\n     * @returns {Number} The difference, in seconds, when subtracting <code>right</code> from <code>left</code>.\r\n     */\r\n    JulianDate.secondsDifference = function(left, right) {\r\n        \r\n\r\n        var dayDifference = (left.dayNumber - right.dayNumber) * TimeConstants.SECONDS_PER_DAY;\r\n        return (dayDifference + (left.secondsOfDay - right.secondsOfDay));\r\n    };\r\n\r\n    /**\r\n     * Computes the difference in days between the provided instance.\r\n     *\r\n     * @param {JulianDate} left The first instance.\r\n     * @param {JulianDate} right The second instance.\r\n     * @returns {Number} The difference, in days, when subtracting <code>right</code> from <code>left</code>.\r\n     */\r\n    JulianDate.daysDifference = function(left, right) {\r\n        \r\n\r\n        var dayDifference = (left.dayNumber - right.dayNumber);\r\n        var secondDifference = (left.secondsOfDay - right.secondsOfDay) / TimeConstants.SECONDS_PER_DAY;\r\n        return dayDifference + secondDifference;\r\n    };\r\n\r\n    /**\r\n     * Computes the number of seconds the provided instance is ahead of UTC.\r\n     *\r\n     * @param {JulianDate} julianDate The date.\r\n     * @returns {Number} The number of seconds the provided instance is ahead of UTC\r\n     */\r\n    JulianDate.computeTaiMinusUtc = function(julianDate) {\r\n        binarySearchScratchLeapSecond.julianDate = julianDate;\r\n        var leapSeconds = JulianDate.leapSeconds;\r\n        var index = binarySearch(leapSeconds, binarySearchScratchLeapSecond, compareLeapSecondDates);\r\n        if (index < 0) {\r\n            index = ~index;\r\n            --index;\r\n            if (index < 0) {\r\n                index = 0;\r\n            }\r\n        }\r\n        return leapSeconds[index].offset;\r\n    };\r\n\r\n    /**\r\n     * Adds the provided number of seconds to the provided date instance.\r\n     *\r\n     * @param {JulianDate} julianDate The date.\r\n     * @param {Number} seconds The number of seconds to add or subtract.\r\n     * @param {JulianDate} result An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter.\r\n     */\r\n    JulianDate.addSeconds = function(julianDate, seconds, result) {\r\n        \r\n\r\n        return setComponents(julianDate.dayNumber, julianDate.secondsOfDay + seconds, result);\r\n    };\r\n\r\n    /**\r\n     * Adds the provided number of minutes to the provided date instance.\r\n     *\r\n     * @param {JulianDate} julianDate The date.\r\n     * @param {Number} minutes The number of minutes to add or subtract.\r\n     * @param {JulianDate} result An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter.\r\n     */\r\n    JulianDate.addMinutes = function(julianDate, minutes, result) {\r\n        \r\n\r\n        var newSecondsOfDay = julianDate.secondsOfDay + (minutes * TimeConstants.SECONDS_PER_MINUTE);\r\n        return setComponents(julianDate.dayNumber, newSecondsOfDay, result);\r\n    };\r\n\r\n    /**\r\n     * Adds the provided number of hours to the provided date instance.\r\n     *\r\n     * @param {JulianDate} julianDate The date.\r\n     * @param {Number} hours The number of hours to add or subtract.\r\n     * @param {JulianDate} result An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter.\r\n     */\r\n    JulianDate.addHours = function(julianDate, hours, result) {\r\n        \r\n\r\n        var newSecondsOfDay = julianDate.secondsOfDay + (hours * TimeConstants.SECONDS_PER_HOUR);\r\n        return setComponents(julianDate.dayNumber, newSecondsOfDay, result);\r\n    };\r\n\r\n    /**\r\n     * Adds the provided number of days to the provided date instance.\r\n     *\r\n     * @param {JulianDate} julianDate The date.\r\n     * @param {Number} days The number of days to add or subtract.\r\n     * @param {JulianDate} result An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter.\r\n     */\r\n    JulianDate.addDays = function(julianDate, days, result) {\r\n        \r\n\r\n        var newJulianDayNumber = julianDate.dayNumber + days;\r\n        return setComponents(newJulianDayNumber, julianDate.secondsOfDay, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided instances and returns <code>true</code> if <code>left</code> is earlier than <code>right</code>, <code>false</code> otherwise.\r\n     *\r\n     * @param {JulianDate} left The first instance.\r\n     * @param {JulianDate} right The second instance.\r\n     * @returns {Boolean} <code>true</code> if <code>left</code> is earlier than <code>right</code>, <code>false</code> otherwise.\r\n     */\r\n    JulianDate.lessThan = function(left, right) {\r\n        return JulianDate.compare(left, right) < 0;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided instances and returns <code>true</code> if <code>left</code> is earlier than or equal to <code>right</code>, <code>false</code> otherwise.\r\n     *\r\n     * @param {JulianDate} left The first instance.\r\n     * @param {JulianDate} right The second instance.\r\n     * @returns {Boolean} <code>true</code> if <code>left</code> is earlier than or equal to <code>right</code>, <code>false</code> otherwise.\r\n     */\r\n    JulianDate.lessThanOrEquals = function(left, right) {\r\n        return JulianDate.compare(left, right) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided instances and returns <code>true</code> if <code>left</code> is later than <code>right</code>, <code>false</code> otherwise.\r\n     *\r\n     * @param {JulianDate} left The first instance.\r\n     * @param {JulianDate} right The second instance.\r\n     * @returns {Boolean} <code>true</code> if <code>left</code> is later than <code>right</code>, <code>false</code> otherwise.\r\n     */\r\n    JulianDate.greaterThan = function(left, right) {\r\n        return JulianDate.compare(left, right) > 0;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided instances and returns <code>true</code> if <code>left</code> is later than or equal to <code>right</code>, <code>false</code> otherwise.\r\n     *\r\n     * @param {JulianDate} left The first instance.\r\n     * @param {JulianDate} right The second instance.\r\n     * @returns {Boolean} <code>true</code> if <code>left</code> is later than or equal to <code>right</code>, <code>false</code> otherwise.\r\n     */\r\n    JulianDate.greaterThanOrEquals = function(left, right) {\r\n        return JulianDate.compare(left, right) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Duplicates this instance.\r\n     *\r\n     * @param {JulianDate} [result] An existing instance to use for the result.\r\n     * @returns {JulianDate} The modified result parameter or a new instance if none was provided.\r\n     */\r\n    JulianDate.prototype.clone = function(result) {\r\n        return JulianDate.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this and the provided instance and returns <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {JulianDate} [right] The second instance.\r\n     * @returns {Boolean} <code>true</code> if the dates are equal; otherwise, <code>false</code>.\r\n     */\r\n    JulianDate.prototype.equals = function(right) {\r\n        return JulianDate.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this and the provided instance and returns <code>true</code> if they are within <code>epsilon</code> seconds of\r\n     * each other.  That is, in order for the dates to be considered equal (and for\r\n     * this function to return <code>true</code>), the absolute value of the difference between them, in\r\n     * seconds, must be less than <code>epsilon</code>.\r\n     *\r\n     * @param {JulianDate} [right] The second instance.\r\n     * @param {Number} epsilon The maximum number of seconds that should separate the two instances.\r\n     * @returns {Boolean} <code>true</code> if the two dates are within <code>epsilon</code> seconds of each other; otherwise <code>false</code>.\r\n     */\r\n    JulianDate.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return JulianDate.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this date in ISO8601 format.\r\n     *\r\n     * @returns {String} A string representing this date in ISO8601 format.\r\n     */\r\n    JulianDate.prototype.toString = function() {\r\n        return JulianDate.toIso8601(this);\r\n    };\r\n\r\n    /**\r\n     * Gets or sets the list of leap seconds used throughout Cesium.\r\n     * @memberof JulianDate\r\n     * @type {LeapSecond[]}\r\n     */\r\n    JulianDate.leapSeconds = [\r\n                               new LeapSecond(new JulianDate(2441317, 43210.0, TimeStandard.TAI), 10), // January 1, 1972 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2441499, 43211.0, TimeStandard.TAI), 11), // July 1, 1972 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2441683, 43212.0, TimeStandard.TAI), 12), // January 1, 1973 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2442048, 43213.0, TimeStandard.TAI), 13), // January 1, 1974 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2442413, 43214.0, TimeStandard.TAI), 14), // January 1, 1975 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2442778, 43215.0, TimeStandard.TAI), 15), // January 1, 1976 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2443144, 43216.0, TimeStandard.TAI), 16), // January 1, 1977 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2443509, 43217.0, TimeStandard.TAI), 17), // January 1, 1978 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2443874, 43218.0, TimeStandard.TAI), 18), // January 1, 1979 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2444239, 43219.0, TimeStandard.TAI), 19), // January 1, 1980 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2444786, 43220.0, TimeStandard.TAI), 20), // July 1, 1981 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2445151, 43221.0, TimeStandard.TAI), 21), // July 1, 1982 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2445516, 43222.0, TimeStandard.TAI), 22), // July 1, 1983 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2446247, 43223.0, TimeStandard.TAI), 23), // July 1, 1985 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2447161, 43224.0, TimeStandard.TAI), 24), // January 1, 1988 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2447892, 43225.0, TimeStandard.TAI), 25), // January 1, 1990 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2448257, 43226.0, TimeStandard.TAI), 26), // January 1, 1991 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2448804, 43227.0, TimeStandard.TAI), 27), // July 1, 1992 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2449169, 43228.0, TimeStandard.TAI), 28), // July 1, 1993 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2449534, 43229.0, TimeStandard.TAI), 29), // July 1, 1994 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2450083, 43230.0, TimeStandard.TAI), 30), // January 1, 1996 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2450630, 43231.0, TimeStandard.TAI), 31), // July 1, 1997 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2451179, 43232.0, TimeStandard.TAI), 32), // January 1, 1999 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2453736, 43233.0, TimeStandard.TAI), 33), // January 1, 2006 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2454832, 43234.0, TimeStandard.TAI), 34), // January 1, 2009 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2456109, 43235.0, TimeStandard.TAI), 35), // July 1, 2012 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2457204, 43236.0, TimeStandard.TAI), 36), // July 1, 2015 00:00:00 UTC\r\n                               new LeapSecond(new JulianDate(2457754, 43237.0, TimeStandard.TAI), 37)  // January 1, 2017 00:00:00 UTC\r\n                             ];\r\n\r\n    return JulianDate;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/JulianDate.js\n// module id = 70\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Constants for time conversions like those done by {@link JulianDate}.\r\n     *\r\n     * @exports TimeConstants\r\n     *\r\n     * @see JulianDate\r\n     *\r\n     * @private\r\n     */\r\n    var TimeConstants = {\r\n        /**\r\n         * The number of seconds in one millisecond: <code>0.001</code>\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        SECONDS_PER_MILLISECOND : 0.001,\r\n\r\n        /**\r\n         * The number of seconds in one minute: <code>60</code>.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        SECONDS_PER_MINUTE : 60.0,\r\n\r\n        /**\r\n         * The number of minutes in one hour: <code>60</code>.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        MINUTES_PER_HOUR : 60.0,\r\n\r\n        /**\r\n         * The number of hours in one day: <code>24</code>.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        HOURS_PER_DAY : 24.0,\r\n\r\n        /**\r\n         * The number of seconds in one hour: <code>3600</code>.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        SECONDS_PER_HOUR : 3600.0,\r\n\r\n        /**\r\n         * The number of minutes in one day: <code>1440</code>.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        MINUTES_PER_DAY : 1440.0,\r\n\r\n        /**\r\n         * The number of seconds in one day, ignoring leap seconds: <code>86400</code>.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        SECONDS_PER_DAY : 86400.0,\r\n\r\n        /**\r\n         * The number of days in one Julian century: <code>36525</code>.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        DAYS_PER_JULIAN_CENTURY : 36525.0,\r\n\r\n        /**\r\n         * One trillionth of a second.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        PICOSECOND : 0.000000001,\r\n\r\n        /**\r\n         * The number of days to subtract from a Julian date to determine the\r\n         * modified Julian date, which gives the number of days since midnight\r\n         * on November 17, 1858.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        MODIFIED_JULIAN_DATE_DIFFERENCE : 2400000.5\r\n    };\r\n\r\n    return freezeObject(TimeConstants);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/TimeConstants.js\n// module id = 71\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Provides the type of time standards which JulianDate can take as input.\r\n     *\r\n     * @exports TimeStandard\r\n     *\r\n     * @see JulianDate\r\n     */\r\n    var TimeStandard = {\r\n        /**\r\n         * Represents the coordinated Universal Time (UTC) time standard.\r\n         *\r\n         * UTC is related to TAI according to the relationship\r\n         * <code>UTC = TAI - deltaT</code> where <code>deltaT</code> is the number of leap\r\n         * seconds which have been introduced as of the time in TAI.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UTC : 0,\r\n\r\n        /**\r\n         * Represents the International Atomic Time (TAI) time standard.\r\n         * TAI is the principal time standard to which the other time standards are related.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        TAI : 1\r\n    };\r\n\r\n    return freezeObject(TimeStandard);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/TimeStandard.js\n// module id = 72\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/isarray/index.js\n// module id = 73\n// module chunks = 0","define([\r\n        '../ThirdParty/Uri',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        Uri,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Given a relative Uri and a base Uri, returns the absolute Uri of the relative Uri.\r\n     * @exports getAbsoluteUri\r\n     *\r\n     * @param {String} relative The relative Uri.\r\n     * @param {String} [base] The base Uri.\r\n     * @returns {String} The absolute Uri of the given relative Uri.\r\n     *\r\n     * @example\r\n     * //absolute Uri will be \"https://test.com/awesome.png\";\r\n     * var absoluteUri = Cesium.getAbsoluteUri('awesome.png', 'https://test.com');\r\n     */\r\n    function getAbsoluteUri(relative, base) {\r\n        var documentObject;\r\n        if (typeof document !== 'undefined') {\r\n            documentObject = document;\r\n        }\r\n\r\n        return getAbsoluteUri._implementation(relative, base, documentObject);\r\n    }\r\n\r\n    getAbsoluteUri._implementation = function(relative, base, documentObject) {\r\n        \r\n\r\n        if (!defined(base)) {\r\n            if (typeof documentObject === 'undefined') {\r\n                return relative;\r\n            }\r\n            base = defaultValue(documentObject.baseURI, documentObject.location.href);\r\n        }\r\n\r\n        var baseUri = new Uri(base);\r\n        var relativeUri = new Uri(relative);\r\n        return relativeUri.resolve(baseUri).toString();\r\n    };\r\n\r\n    return getAbsoluteUri;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/getAbsoluteUri.js\n// module id = 74\n// module chunks = 0","define([\r\n        './defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Tests an object to see if it is an array.\r\n     * @exports isArray\r\n     *\r\n     * @param {*} value The value to test.\r\n     * @returns {Boolean} true if the value is an array, false otherwise.\r\n     */\r\n    var isArray = Array.isArray;\r\n    if (!defined(isArray)) {\r\n        isArray = function(value) {\r\n            return Object.prototype.toString.call(value) === '[object Array]';\r\n        };\r\n    }\r\n\r\n    return isArray;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/isArray.js\n// module id = 75\n// module chunks = 0","define([\r\n        '../Core/freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * State of the request.\r\n     *\r\n     * @exports RequestState\r\n     */\r\n    var RequestState = {\r\n        /**\r\n         * Initial unissued state.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        UNISSUED : 0,\r\n\r\n        /**\r\n         * Issued but not yet active. Will become active when open slots are available.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        ISSUED : 1,\r\n\r\n        /**\r\n         * Actual http request has been sent.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        ACTIVE : 2,\r\n\r\n        /**\r\n         * Request completed successfully.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        RECEIVED : 3,\r\n\r\n        /**\r\n         * Request was cancelled, either explicitly or automatically because of low priority.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        CANCELLED : 4,\r\n\r\n        /**\r\n         * Request failed.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        FAILED : 5\r\n    };\r\n\r\n    return freezeObject(RequestState);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/RequestState.js\n// module id = 76\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/url/url.js\n// module id = 77\n// module chunks = 0","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process-nextick-args/index.js\n// module id = 78\n// module chunks = 0","// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nvar Duplex;\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // create the two objects needed to store the corked requests\n  // they are not a linked list, as no new elements are inserted in there\n  this.corkedRequestsFree = new CorkedRequest(this);\n  this.corkedRequestsFree.next = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function writableStateGetBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n  } catch (_) {}\n})();\n\nvar Duplex;\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) processNextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n        afterWrite(stream, state, finished, cb);\n      }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    state.corkedRequestsFree = holder.next;\n    holder.next = null;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/lib/_stream_writable.js\n// module id = 79\n// module chunks = 0","// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/lib/_stream_transform.js\n// module id = 80\n// module chunks = 0","define([\r\n        './defaultValue'\r\n    ], function(\r\n        defaultValue) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Represents the closed interval [start, stop].\r\n     * @alias Interval\r\n     * @constructor\r\n     *\r\n     * @param {Number} [start=0.0] The beginning of the interval.\r\n     * @param {Number} [stop=0.0] The end of the interval.\r\n     */\r\n    function Interval(start, stop) {\r\n        /**\r\n         * The beginning of the interval.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.start = defaultValue(start, 0.0);\r\n        /**\r\n         * The end of the interval.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.stop = defaultValue(stop, 0.0);\r\n    }\r\n\r\n    return Interval;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Interval.js\n// module id = 81\n// module chunks = 0","define([\r\n        './DeveloperError',\r\n        './Math'\r\n    ], function(\r\n        DeveloperError,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines functions for 2nd order polynomial functions of one variable with only real coefficients.\r\n     *\r\n     * @exports QuadraticRealPolynomial\r\n     */\r\n    var QuadraticRealPolynomial = {};\r\n\r\n    /**\r\n     * Provides the discriminant of the quadratic equation from the supplied coefficients.\r\n     *\r\n     * @param {Number} a The coefficient of the 2nd order monomial.\r\n     * @param {Number} b The coefficient of the 1st order monomial.\r\n     * @param {Number} c The coefficient of the 0th order monomial.\r\n     * @returns {Number} The value of the discriminant.\r\n     */\r\n    QuadraticRealPolynomial.computeDiscriminant = function(a, b, c) {\r\n        \r\n\r\n        var discriminant = b * b - 4.0 * a * c;\r\n        return discriminant;\r\n    };\r\n\r\n    function addWithCancellationCheck(left, right, tolerance) {\r\n        var difference = left + right;\r\n        if ((CesiumMath.sign(left) !== CesiumMath.sign(right)) &&\r\n                Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {\r\n            return 0.0;\r\n        }\r\n\r\n        return difference;\r\n    }\r\n\r\n    /**\r\n     * Provides the real valued roots of the quadratic polynomial with the provided coefficients.\r\n     *\r\n     * @param {Number} a The coefficient of the 2nd order monomial.\r\n     * @param {Number} b The coefficient of the 1st order monomial.\r\n     * @param {Number} c The coefficient of the 0th order monomial.\r\n     * @returns {Number[]} The real valued roots.\r\n     */\r\n    QuadraticRealPolynomial.computeRealRoots = function(a, b, c) {\r\n        \r\n\r\n        var ratio;\r\n        if (a === 0.0) {\r\n            if (b === 0.0) {\r\n                // Constant function: c = 0.\r\n                return [];\r\n            }\r\n\r\n            // Linear function: b * x + c = 0.\r\n            return [-c / b];\r\n        } else if (b === 0.0) {\r\n            if (c === 0.0) {\r\n                // 2nd order monomial: a * x^2 = 0.\r\n                return [0.0, 0.0];\r\n            }\r\n\r\n            var cMagnitude = Math.abs(c);\r\n            var aMagnitude = Math.abs(a);\r\n\r\n            if ((cMagnitude < aMagnitude) && (cMagnitude / aMagnitude < CesiumMath.EPSILON14)) { // c ~= 0.0.\r\n                // 2nd order monomial: a * x^2 = 0.\r\n                return [0.0, 0.0];\r\n            } else if ((cMagnitude > aMagnitude) && (aMagnitude / cMagnitude < CesiumMath.EPSILON14)) { // a ~= 0.0.\r\n                // Constant function: c = 0.\r\n                return [];\r\n            }\r\n\r\n            // a * x^2 + c = 0\r\n            ratio = -c / a;\r\n\r\n            if (ratio < 0.0) {\r\n                // Both roots are complex.\r\n                return [];\r\n            }\r\n\r\n            // Both roots are real.\r\n            var root = Math.sqrt(ratio);\r\n            return [-root, root];\r\n        } else if (c === 0.0) {\r\n            // a * x^2 + b * x = 0\r\n            ratio = -b / a;\r\n            if (ratio < 0.0) {\r\n                return [ratio, 0.0];\r\n            }\r\n\r\n            return [0.0, ratio];\r\n        }\r\n\r\n        // a * x^2 + b * x + c = 0\r\n        var b2 = b * b;\r\n        var four_ac = 4.0 * a * c;\r\n        var radicand = addWithCancellationCheck(b2, -four_ac, CesiumMath.EPSILON14);\r\n\r\n        if (radicand < 0.0) {\r\n            // Both roots are complex.\r\n            return [];\r\n        }\r\n\r\n        var q = -0.5 * addWithCancellationCheck(b, CesiumMath.sign(b) * Math.sqrt(radicand), CesiumMath.EPSILON14);\r\n        if (b > 0.0) {\r\n            return [q / a, c / q];\r\n        }\r\n\r\n        return [c / q, q / a];\r\n    };\r\n\r\n    return QuadraticRealPolynomial;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/QuadraticRealPolynomial.js\n// module id = 82\n// module chunks = 0","define([\r\n        '../Core/BoxGeometry',\r\n        '../Core/defined'\r\n    ], function(\r\n        BoxGeometry,\r\n        defined) {\r\n    'use strict';\r\n\r\n    return function(boxGeometry, offset) {\r\n        if (defined(offset)) {\r\n            boxGeometry = BoxGeometry.unpack(boxGeometry, offset);\r\n        }\r\n        return BoxGeometry.createGeometry(boxGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createBoxGeometry.js\n// module id = 83\n// module chunks = 0","define([\r\n        '../Core/BoxOutlineGeometry',\r\n        '../Core/defined'\r\n    ], function(\r\n        BoxOutlineGeometry,\r\n        defined) {\r\n    'use strict';\r\n\r\n    return function(boxGeometry, offset) {\r\n        if (defined(offset)) {\r\n            boxGeometry = BoxOutlineGeometry.unpack(boxGeometry, offset);\r\n        }\r\n        return BoxOutlineGeometry.createGeometry(boxGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createBoxOutlineGeometry.js\n// module id = 84\n// module chunks = 0","define([\r\n        '../Core/Cartesian3',\r\n        '../Core/CircleGeometry',\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid'\r\n    ], function(\r\n        Cartesian3,\r\n        CircleGeometry,\r\n        defined,\r\n        Ellipsoid) {\r\n    'use strict';\r\n\r\n    function createCircleGeometry(circleGeometry, offset) {\r\n        if (defined(offset)) {\r\n            circleGeometry = CircleGeometry.unpack(circleGeometry, offset);\r\n        }\r\n        circleGeometry._ellipseGeometry._center = Cartesian3.clone(circleGeometry._ellipseGeometry._center);\r\n        circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(circleGeometry._ellipseGeometry._ellipsoid);\r\n        return CircleGeometry.createGeometry(circleGeometry);\r\n    }\r\n\r\n    return createCircleGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createCircleGeometry.js\n// module id = 85\n// module chunks = 0","define([\r\n        '../Core/Cartesian3',\r\n        '../Core/CircleOutlineGeometry',\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid'\r\n    ], function(\r\n        Cartesian3,\r\n        CircleOutlineGeometry,\r\n        defined,\r\n        Ellipsoid) {\r\n    'use strict';\r\n\r\n    function createCircleOutlineGeometry(circleGeometry, offset) {\r\n        if (defined(offset)) {\r\n            circleGeometry = CircleOutlineGeometry.unpack(circleGeometry, offset);\r\n        }\r\n        circleGeometry._ellipseGeometry._center = Cartesian3.clone(circleGeometry._ellipseGeometry._center);\r\n        circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(circleGeometry._ellipseGeometry._ellipsoid);\r\n        return CircleOutlineGeometry.createGeometry(circleGeometry);\r\n    }\r\n\r\n    return createCircleOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createCircleOutlineGeometry.js\n// module id = 86\n// module chunks = 0","define([\r\n    '../Core/defined',\r\n    '../Core/CoplanarPolygonGeometry'\r\n], function(\r\n    defined,\r\n    CoplanarPolygonGeometry) {\r\n    'use strict';\r\n\r\n    function createCoplanarPolygonGeometry(polygonGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polygonGeometry = CoplanarPolygonGeometry.unpack(polygonGeometry, offset);\r\n        }\r\n        return CoplanarPolygonGeometry.createGeometry(polygonGeometry);\r\n    }\r\n\r\n    return createCoplanarPolygonGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createCoplanarPolygonGeometry.js\n// module id = 87\n// module chunks = 0","define([\r\n    '../Core/defined',\r\n    '../Core/CoplanarPolygonOutlineGeometry',\r\n    '../Core/Ellipsoid'\r\n], function(\r\n    defined,\r\n    CoplanarPolygonOutlineGeometry,\r\n    Ellipsoid) {\r\n    'use strict';\r\n\r\n    function createCoplanarPolygonOutlineGeometry(polygonGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polygonGeometry = CoplanarPolygonOutlineGeometry.unpack(polygonGeometry, offset);\r\n        }\r\n        polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n        return CoplanarPolygonOutlineGeometry.createGeometry(polygonGeometry);\r\n    }\r\n\r\n    return createCoplanarPolygonOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createCoplanarPolygonOutlineGeometry.js\n// module id = 88\n// module chunks = 0","define([\r\n        '../Core/CorridorGeometry',\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid'\r\n    ], function(\r\n        CorridorGeometry,\r\n        defined,\r\n        Ellipsoid) {\r\n    'use strict';\r\n\r\n    function createCorridorGeometry(corridorGeometry, offset) {\r\n        if (defined(offset)) {\r\n            corridorGeometry = CorridorGeometry.unpack(corridorGeometry, offset);\r\n        }\r\n        corridorGeometry._ellipsoid = Ellipsoid.clone(corridorGeometry._ellipsoid);\r\n        return CorridorGeometry.createGeometry(corridorGeometry);\r\n    }\r\n\r\n    return createCorridorGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createCorridorGeometry.js\n// module id = 89\n// module chunks = 0","define([\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './Cartographic',\r\n        './CornerType',\r\n        './EllipsoidTangentPlane',\r\n        './Math',\r\n        './Matrix3',\r\n        './Matrix4',\r\n        './PolylinePipeline',\r\n        './Quaternion',\r\n        './Transforms'\r\n    ], function(\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartesian4,\r\n        Cartographic,\r\n        CornerType,\r\n        EllipsoidTangentPlane,\r\n        CesiumMath,\r\n        Matrix3,\r\n        Matrix4,\r\n        PolylinePipeline,\r\n        Quaternion,\r\n        Transforms) {\r\n    'use strict';\r\n\r\n    var scratch2Array = [new Cartesian3(), new Cartesian3()];\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var scratchCartesian2 = new Cartesian3();\r\n    var scratchCartesian3 = new Cartesian3();\r\n    var scratchCartesian4 = new Cartesian3();\r\n    var scratchCartesian5 = new Cartesian3();\r\n    var scratchCartesian6 = new Cartesian3();\r\n    var scratchCartesian7 = new Cartesian3();\r\n    var scratchCartesian8 = new Cartesian3();\r\n    var scratchCartesian9 = new Cartesian3();\r\n\r\n    var scratch1 = new Cartesian3();\r\n    var scratch2 = new Cartesian3();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PolylineVolumeGeometryLibrary = {};\r\n\r\n    var cartographic = new Cartographic();\r\n    function scaleToSurface(positions, ellipsoid) {\r\n        var heights = new Array(positions.length);\r\n        for (var i = 0; i < positions.length; i++) {\r\n            var pos = positions[i];\r\n            cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\r\n            heights[i] = cartographic.height;\r\n            positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\r\n        }\r\n        return heights;\r\n    }\r\n\r\n    function subdivideHeights(points, h0, h1, granularity) {\r\n        var p0 = points[0];\r\n        var p1 = points[1];\r\n        var angleBetween = Cartesian3.angleBetween(p0, p1);\r\n        var numPoints = Math.ceil(angleBetween / granularity);\r\n        var heights = new Array(numPoints);\r\n        var i;\r\n        if (h0 === h1) {\r\n            for (i = 0; i < numPoints; i++) {\r\n                heights[i] = h0;\r\n            }\r\n            heights.push(h1);\r\n            return heights;\r\n        }\r\n\r\n        var dHeight = h1 - h0;\r\n        var heightPerVertex = dHeight / (numPoints);\r\n\r\n        for (i = 1; i < numPoints; i++) {\r\n            var h = h0 + i * heightPerVertex;\r\n            heights[i] = h;\r\n        }\r\n\r\n        heights[0] = h0;\r\n        heights.push(h1);\r\n        return heights;\r\n    }\r\n\r\n    var nextScratch = new Cartesian3();\r\n    var prevScratch = new Cartesian3();\r\n\r\n    function computeRotationAngle(start, end, position, ellipsoid) {\r\n        var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n        var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, start, nextScratch), nextScratch);\r\n        var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, end, prevScratch), prevScratch);\r\n        var angle = Cartesian2.angleBetween(next, prev);\r\n\r\n        return (prev.x * next.y - prev.y * next.x >= 0.0) ? -angle : angle;\r\n    }\r\n\r\n    var negativeX = new Cartesian3(-1, 0, 0);\r\n    var transform = new Matrix4();\r\n    var translation = new Matrix4();\r\n    var rotationZ = new Matrix3();\r\n    var scaleMatrix = Matrix3.IDENTITY.clone();\r\n    var westScratch = new Cartesian3();\r\n    var finalPosScratch = new Cartesian4();\r\n    var heightCartesian = new Cartesian3();\r\n    function addPosition(center, left, shape, finalPositions, ellipsoid, height, xScalar, repeat) {\r\n        var west = westScratch;\r\n        var finalPosition = finalPosScratch;\r\n        transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\r\n\r\n        west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\r\n        west = Cartesian3.normalize(west, west);\r\n        var angle = computeRotationAngle(west, left, center, ellipsoid);\r\n        rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\r\n\r\n        heightCartesian.z = height;\r\n        transform = Matrix4.multiplyTransformation(transform, Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation), transform);\r\n        var scale = scaleMatrix;\r\n        scale[0] = xScalar;\r\n\r\n        for (var j = 0; j < repeat; j++) {\r\n            for (var i = 0; i < shape.length; i += 3) {\r\n                finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\r\n                finalPosition = Matrix3.multiplyByVector(scale, finalPosition, finalPosition);\r\n                finalPosition = Matrix4.multiplyByPoint(transform, finalPosition, finalPosition);\r\n                finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\r\n            }\r\n        }\r\n\r\n        return finalPositions;\r\n    }\r\n\r\n    var centerScratch = new Cartesian3();\r\n    function addPositions(centers, left, shape, finalPositions, ellipsoid, heights, xScalar) {\r\n        for (var i = 0; i < centers.length; i += 3) {\r\n            var center = Cartesian3.fromArray(centers, i, centerScratch);\r\n            finalPositions = addPosition(center, left, shape, finalPositions, ellipsoid, heights[i / 3], xScalar, 1);\r\n        }\r\n        return finalPositions;\r\n    }\r\n\r\n    function convertShapeTo3DDuplicate(shape2D, boundingRectangle) { //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\r\n        var length = shape2D.length;\r\n        var shape = new Array(length * 6);\r\n        var index = 0;\r\n        var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n        var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n        var point = shape2D[0];\r\n        shape[index++] = point.x - xOffset;\r\n        shape[index++] = 0.0;\r\n        shape[index++] = point.y - yOffset;\r\n        for (var i = 1; i < length; i++) {\r\n            point = shape2D[i];\r\n            var x = point.x - xOffset;\r\n            var z = point.y - yOffset;\r\n            shape[index++] = x;\r\n            shape[index++] = 0.0;\r\n            shape[index++] = z;\r\n\r\n            shape[index++] = x;\r\n            shape[index++] = 0.0;\r\n            shape[index++] = z;\r\n        }\r\n        point = shape2D[0];\r\n        shape[index++] = point.x - xOffset;\r\n        shape[index++] = 0.0;\r\n        shape[index++] = point.y - yOffset;\r\n\r\n        return shape;\r\n    }\r\n\r\n    function convertShapeTo3D(shape2D, boundingRectangle) { //orientate 2D shape to XZ plane center at (0, 0, 0)\r\n        var length = shape2D.length;\r\n        var shape = new Array(length * 3);\r\n        var index = 0;\r\n        var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n        var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            shape[index++] = shape2D[i].x - xOffset;\r\n            shape[index++] = 0;\r\n            shape[index++] = shape2D[i].y - yOffset;\r\n        }\r\n\r\n        return shape;\r\n    }\r\n\r\n    var quaterion = new Quaternion();\r\n    var startPointScratch = new Cartesian3();\r\n    var rotMatrix = new Matrix3();\r\n    function computeRoundCorner(pivot, startPoint, endPoint, cornerType, leftIsOutside, ellipsoid, finalPositions, shape, height, duplicatePoints) {\r\n        var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, pivot, scratch1), Cartesian3.subtract(endPoint, pivot, scratch2));\r\n        var granularity = (cornerType === CornerType.BEVELED) ? 0 : Math.ceil(angle / CesiumMath.toRadians(5));\r\n\r\n        var m;\r\n        if (leftIsOutside) {\r\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(pivot, scratch1), angle / (granularity + 1), quaterion), rotMatrix);\r\n        } else {\r\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion), rotMatrix);\r\n        }\r\n\r\n        var left;\r\n        var surfacePoint;\r\n        startPoint = Cartesian3.clone(startPoint, startPointScratch);\r\n        if (granularity > 0) {\r\n            var repeat = duplicatePoints ? 2 : 1;\r\n            for (var i = 0; i < granularity; i++) {\r\n                startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\r\n                left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n                left = Cartesian3.normalize(left, left);\r\n                if (!leftIsOutside) {\r\n                    left = Cartesian3.negate(left, left);\r\n                }\r\n                surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n                finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, repeat);\r\n            }\r\n        } else {\r\n            left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n            left = Cartesian3.normalize(left, left);\r\n            if (!leftIsOutside) {\r\n                left = Cartesian3.negate(left, left);\r\n            }\r\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\r\n\r\n            endPoint = Cartesian3.clone(endPoint, startPointScratch);\r\n            left = Cartesian3.subtract(endPoint, pivot, scratch1);\r\n            left = Cartesian3.normalize(left, left);\r\n            if (!leftIsOutside) {\r\n                left = Cartesian3.negate(left, left);\r\n            }\r\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\r\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\r\n        }\r\n\r\n        return finalPositions;\r\n    }\r\n\r\n    PolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function(shapePositions) {\r\n        var length = shapePositions.length;\r\n        var cleanedPositions = [];\r\n        for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\r\n            var v0 = shapePositions[i0];\r\n            var v1 = shapePositions[i1];\r\n\r\n            if (!Cartesian2.equals(v0, v1)) {\r\n                cleanedPositions.push(v1); // Shallow copy!\r\n            }\r\n        }\r\n\r\n        return cleanedPositions;\r\n    };\r\n\r\n    PolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function(forward, backward, position, ellipsoid) {\r\n        var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n        var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, forward, nextScratch), nextScratch);\r\n        var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, backward, prevScratch), prevScratch);\r\n\r\n        return ((prev.x * next.y) - (prev.y * next.x)) >= 0.0;\r\n    };\r\n\r\n    var scratchForwardProjection = new Cartesian3();\r\n    var scratchBackwardProjection = new Cartesian3();\r\n\r\n    PolylineVolumeGeometryLibrary.computePositions = function(positions, shape2D, boundingRectangle, geometry, duplicatePoints) {\r\n        var ellipsoid = geometry._ellipsoid;\r\n        var heights = scaleToSurface(positions, ellipsoid);\r\n        var granularity = geometry._granularity;\r\n        var cornerType = geometry._cornerType;\r\n        var shapeForSides = duplicatePoints ? convertShapeTo3DDuplicate(shape2D, boundingRectangle) : convertShapeTo3D(shape2D, boundingRectangle);\r\n        var shapeForEnds = duplicatePoints ? convertShapeTo3D(shape2D, boundingRectangle) : undefined;\r\n        var heightOffset = boundingRectangle.height / 2;\r\n        var width = boundingRectangle.width / 2;\r\n        var length = positions.length;\r\n        var finalPositions = [];\r\n        var ends = duplicatePoints ? [] : undefined;\r\n\r\n        var forward = scratchCartesian1;\r\n        var backward = scratchCartesian2;\r\n        var cornerDirection = scratchCartesian3;\r\n        var surfaceNormal = scratchCartesian4;\r\n        var pivot = scratchCartesian5;\r\n        var start = scratchCartesian6;\r\n        var end = scratchCartesian7;\r\n        var left = scratchCartesian8;\r\n        var previousPosition = scratchCartesian9;\r\n\r\n        var position = positions[0];\r\n        var nextPosition = positions[1];\r\n        surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n        forward = Cartesian3.subtract(nextPosition, position, forward);\r\n        forward = Cartesian3.normalize(forward, forward);\r\n        left = Cartesian3.cross(surfaceNormal, forward, left);\r\n        left = Cartesian3.normalize(left, left);\r\n        var h0 = heights[0];\r\n        var h1 = heights[1];\r\n        if (duplicatePoints) {\r\n            ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h0 + heightOffset, 1, 1);\r\n        }\r\n        previousPosition = Cartesian3.clone(position, previousPosition);\r\n        position = nextPosition;\r\n        backward = Cartesian3.negate(forward, backward);\r\n        var subdividedHeights;\r\n        var subdividedPositions;\r\n        for (var i = 1; i < length - 1; i++) {\r\n            var repeat = duplicatePoints ? 2 : 1;\r\n            nextPosition = positions[i + 1];\r\n            forward = Cartesian3.subtract(nextPosition, position, forward);\r\n            forward = Cartesian3.normalize(forward, forward);\r\n            cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\r\n            cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n            surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n\r\n            var forwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(forward, surfaceNormal), scratchForwardProjection);\r\n            Cartesian3.subtract(forward, forwardProjection, forwardProjection);\r\n            Cartesian3.normalize(forwardProjection, forwardProjection);\r\n\r\n            var backwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(backward, surfaceNormal), scratchBackwardProjection);\r\n            Cartesian3.subtract(backward, backwardProjection, backwardProjection);\r\n            Cartesian3.normalize(backwardProjection, backwardProjection);\r\n\r\n            var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\r\n\r\n            if (doCorner) {\r\n                cornerDirection = Cartesian3.cross(cornerDirection, surfaceNormal, cornerDirection);\r\n                cornerDirection = Cartesian3.cross(surfaceNormal, cornerDirection, cornerDirection);\r\n                cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n                var scalar = 1 / Math.max(0.25, (Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1))));\r\n                var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\r\n                if (leftIsOutside) {\r\n                    pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\r\n                    start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, start), start);\r\n                    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n                    scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n                    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n                    subdividedPositions = PolylinePipeline.generateArc({\r\n                        positions: scratch2Array,\r\n                        granularity: granularity,\r\n                        ellipsoid: ellipsoid\r\n                    });\r\n                    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n                    left = Cartesian3.cross(surfaceNormal, forward, left);\r\n                    left = Cartesian3.normalize(left, left);\r\n                    end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, end), end);\r\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                        computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\r\n                    } else {\r\n                        cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\r\n                        finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\r\n                    }\r\n                    previousPosition = Cartesian3.clone(end, previousPosition);\r\n                } else {\r\n                    pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\r\n                    start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, start), start);\r\n                    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n                    scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n                    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n                    subdividedPositions = PolylinePipeline.generateArc({\r\n                        positions: scratch2Array,\r\n                        granularity: granularity,\r\n                        ellipsoid: ellipsoid\r\n                    });\r\n                    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n                    left = Cartesian3.cross(surfaceNormal, forward, left);\r\n                    left = Cartesian3.normalize(left, left);\r\n                    end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, end), end);\r\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                        computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\r\n                    } else {\r\n                        finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\r\n                    }\r\n                    previousPosition = Cartesian3.clone(end, previousPosition);\r\n                }\r\n                backward = Cartesian3.negate(forward, backward);\r\n            } else {\r\n                finalPositions = addPosition(previousPosition, left, shapeForSides, finalPositions, ellipsoid, h0 + heightOffset, 1, 1);\r\n                previousPosition = position;\r\n            }\r\n            h0 = h1;\r\n            h1 = heights[i + 1];\r\n            position = nextPosition;\r\n        }\r\n\r\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n        scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\r\n        subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n            positions: scratch2Array,\r\n            granularity: granularity,\r\n            ellipsoid: ellipsoid\r\n        });\r\n        finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n        if (duplicatePoints) {\r\n            ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h1 + heightOffset, 1, 1);\r\n        }\r\n\r\n        length = finalPositions.length;\r\n        var posLength = duplicatePoints ? length + ends.length : length;\r\n        var combinedPositions = new Float64Array(posLength);\r\n        combinedPositions.set(finalPositions);\r\n        if (duplicatePoints) {\r\n            combinedPositions.set(ends, length);\r\n        }\r\n\r\n        return combinedPositions;\r\n    };\r\n\r\n    return PolylineVolumeGeometryLibrary;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolylineVolumeGeometryLibrary.js\n// module id = 90\n// module chunks = 0","define([\r\n        '../Core/CorridorOutlineGeometry',\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid'\r\n    ], function(\r\n        CorridorOutlineGeometry,\r\n        defined,\r\n        Ellipsoid) {\r\n    'use strict';\r\n\r\n    function createCorridorOutlineGeometry(corridorOutlineGeometry, offset) {\r\n        if (defined(offset)) {\r\n            corridorOutlineGeometry = CorridorOutlineGeometry.unpack(corridorOutlineGeometry, offset);\r\n        }\r\n        corridorOutlineGeometry._ellipsoid = Ellipsoid.clone(corridorOutlineGeometry._ellipsoid);\r\n        return CorridorOutlineGeometry.createGeometry(corridorOutlineGeometry);\r\n    }\r\n\r\n    return createCorridorOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createCorridorOutlineGeometry.js\n// module id = 91\n// module chunks = 0","define([\r\n        '../Core/CylinderGeometry',\r\n        '../Core/defined'\r\n    ], function(\r\n        CylinderGeometry,\r\n        defined) {\r\n    'use strict';\r\n\r\n    return function(cylinderGeometry, offset) {\r\n        if (defined(offset)) {\r\n            cylinderGeometry = CylinderGeometry.unpack(cylinderGeometry, offset);\r\n        }\r\n        return CylinderGeometry.createGeometry(cylinderGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createCylinderGeometry.js\n// module id = 92\n// module chunks = 0","define([\r\n        '../Core/CylinderOutlineGeometry',\r\n        '../Core/defined'\r\n    ], function(\r\n        CylinderOutlineGeometry,\r\n        defined) {\r\n    'use strict';\r\n\r\n    return function(cylinderGeometry, offset) {\r\n        if (defined(offset)) {\r\n            cylinderGeometry = CylinderOutlineGeometry.unpack(cylinderGeometry, offset);\r\n        }\r\n        return CylinderOutlineGeometry.createGeometry(cylinderGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createCylinderOutlineGeometry.js\n// module id = 93\n// module chunks = 0","define([\r\n        '../Core/Cartesian3',\r\n        '../Core/defined',\r\n        '../Core/EllipseGeometry',\r\n        '../Core/Ellipsoid'\r\n    ], function(\r\n        Cartesian3,\r\n        defined,\r\n        EllipseGeometry,\r\n        Ellipsoid) {\r\n    'use strict';\r\n\r\n    function createEllipseGeometry(ellipseGeometry, offset) {\r\n        if (defined(offset)) {\r\n            ellipseGeometry = EllipseGeometry.unpack(ellipseGeometry, offset);\r\n        }\r\n        ellipseGeometry._center = Cartesian3.clone(ellipseGeometry._center);\r\n        ellipseGeometry._ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid);\r\n        return EllipseGeometry.createGeometry(ellipseGeometry);\r\n    }\r\n\r\n    return createEllipseGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createEllipseGeometry.js\n// module id = 94\n// module chunks = 0","define([\r\n        '../Core/Cartesian3',\r\n        '../Core/defined',\r\n        '../Core/EllipseOutlineGeometry',\r\n        '../Core/Ellipsoid'\r\n    ], function(\r\n        Cartesian3,\r\n        defined,\r\n        EllipseOutlineGeometry,\r\n        Ellipsoid) {\r\n    'use strict';\r\n\r\n    function createEllipseOutlineGeometry(ellipseGeometry, offset) {\r\n        if (defined(offset)) {\r\n            ellipseGeometry = EllipseOutlineGeometry.unpack(ellipseGeometry, offset);\r\n        }\r\n        ellipseGeometry._center = Cartesian3.clone(ellipseGeometry._center);\r\n        ellipseGeometry._ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid);\r\n        return EllipseOutlineGeometry.createGeometry(ellipseGeometry);\r\n    }\r\n\r\n    return createEllipseOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createEllipseOutlineGeometry.js\n// module id = 95\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/EllipsoidGeometry'\r\n    ], function(\r\n        defined,\r\n        EllipsoidGeometry) {\r\n    'use strict';\r\n\r\n    return function(ellipsoidGeometry, offset) {\r\n        if (defined(offset)) {\r\n            ellipsoidGeometry = EllipsoidGeometry.unpack(ellipsoidGeometry, offset);\r\n        }\r\n        return EllipsoidGeometry.createGeometry(ellipsoidGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createEllipsoidGeometry.js\n// module id = 96\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PrimitiveType',\r\n        './VertexFormat'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PrimitiveType,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var scratchPosition = new Cartesian3();\r\n    var scratchNormal = new Cartesian3();\r\n    var scratchTangent = new Cartesian3();\r\n    var scratchBitangent = new Cartesian3();\r\n    var scratchNormalST = new Cartesian3();\r\n    var defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\r\n\r\n    var cos = Math.cos;\r\n    var sin = Math.sin;\r\n\r\n    /**\r\n     * A description of an ellipsoid centered at the origin.\r\n     *\r\n     * @alias EllipsoidGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\r\n     * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\r\n     * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} options.slicePartitions cannot be less than three.\r\n     * @exception {DeveloperError} options.stackPartitions cannot be less than three.\r\n     *\r\n     * @see EllipsoidGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * var ellipsoid = new Cesium.EllipsoidGeometry({\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n     *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0)\r\n     * });\r\n     * var geometry = Cesium.EllipsoidGeometry.createGeometry(ellipsoid);\r\n     */\r\n    function EllipsoidGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var radii = defaultValue(options.radii, defaultRadii);\r\n        var stackPartitions = Math.round(defaultValue(options.stackPartitions, 64));\r\n        var slicePartitions = Math.round(defaultValue(options.slicePartitions, 64));\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n        \r\n\r\n        this._radii = Cartesian3.clone(radii);\r\n        this._stackPartitions = stackPartitions;\r\n        this._slicePartitions = slicePartitions;\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createEllipsoidGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    EllipsoidGeometry.packedLength = Cartesian3.packedLength + VertexFormat.packedLength + 3;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {EllipsoidGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    EllipsoidGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._radii, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._stackPartitions;\r\n        array[startingIndex++] = value._slicePartitions;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchRadii = new Cartesian3();\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        radii : scratchRadii,\r\n        vertexFormat : scratchVertexFormat,\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {EllipsoidGeometry} [result] The object into which to store the result.\r\n     * @returns {EllipsoidGeometry} The modified result parameter or a new EllipsoidGeometry instance if one was not provided.\r\n     */\r\n    EllipsoidGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var stackPartitions = array[startingIndex++];\r\n        var slicePartitions = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.stackPartitions = stackPartitions;\r\n            scratchOptions.slicePartitions = slicePartitions;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new EllipsoidGeometry(scratchOptions);\r\n        }\r\n\r\n        result._radii = Cartesian3.clone(radii, result._radii);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._stackPartitions = stackPartitions;\r\n        result._slicePartitions = slicePartitions;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {EllipsoidGeometry} ellipsoidGeometry A description of the ellipsoid.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    EllipsoidGeometry.createGeometry = function(ellipsoidGeometry) {\r\n        var radii = ellipsoidGeometry._radii;\r\n\r\n        if ((radii.x <= 0) || (radii.y <= 0) || (radii.z <= 0)) {\r\n            return;\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.fromCartesian3(radii);\r\n        var vertexFormat = ellipsoidGeometry._vertexFormat;\r\n\r\n        // The extra slice and stack are for duplicating points at the x axis and poles.\r\n        // We need the texture coordinates to interpolate from (2 * pi - delta) to 2 * pi instead of\r\n        // (2 * pi - delta) to 0.\r\n        var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\r\n        var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\r\n\r\n        var vertexCount = stackPartitions * slicePartitions;\r\n        var positions = new Float64Array(vertexCount * 3);\r\n\r\n        var numIndices = 6 * (slicePartitions - 1) * (stackPartitions - 2);\r\n        var indices = IndexDatatype.createTypedArray(vertexCount, numIndices);\r\n\r\n        var normals = (vertexFormat.normal) ? new Float32Array(vertexCount * 3) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(vertexCount * 3) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(vertexCount * 3) : undefined;\r\n        var st = (vertexFormat.st) ? new Float32Array(vertexCount * 2) : undefined;\r\n\r\n        var cosTheta = new Array(slicePartitions);\r\n        var sinTheta = new Array(slicePartitions);\r\n\r\n        var i;\r\n        var j;\r\n        var index = 0;\r\n\r\n        for (i = 0; i < slicePartitions; i++) {\r\n            var theta = CesiumMath.TWO_PI * i / (slicePartitions - 1);\r\n            cosTheta[i] = cos(theta);\r\n            sinTheta[i] = sin(theta);\r\n\r\n            // duplicate first point for correct\r\n            // texture coordinates at the north pole.\r\n            positions[index++] = 0.0;\r\n            positions[index++] = 0.0;\r\n            positions[index++] = radii.z;\r\n        }\r\n\r\n        for (i = 1; i < stackPartitions - 1; i++) {\r\n            var phi = Math.PI * i / (stackPartitions - 1);\r\n            var sinPhi = sin(phi);\r\n\r\n            var xSinPhi = radii.x * sinPhi;\r\n            var ySinPhi = radii.y * sinPhi;\r\n            var zCosPhi = radii.z * cos(phi);\r\n\r\n            for (j = 0; j < slicePartitions; j++) {\r\n                positions[index++] = cosTheta[j] * xSinPhi;\r\n                positions[index++] = sinTheta[j] * ySinPhi;\r\n                positions[index++] = zCosPhi;\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < slicePartitions; i++) {\r\n            // duplicate first point for correct\r\n            // texture coordinates at the south pole.\r\n            positions[index++] = 0.0;\r\n            positions[index++] = 0.0;\r\n            positions[index++] = -radii.z;\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            });\r\n        }\r\n\r\n        var stIndex = 0;\r\n        var normalIndex = 0;\r\n        var tangentIndex = 0;\r\n        var bitangentIndex = 0;\r\n\r\n        if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n            for( i = 0; i < vertexCount; i++) {\r\n                var position = Cartesian3.fromArray(positions, i * 3, scratchPosition);\r\n                var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\r\n\r\n                if (vertexFormat.st) {\r\n                    var normalST = Cartesian2.negate(normal, scratchNormalST);\r\n\r\n                    // if the point is at or close to the pole, find a point along the same longitude\r\n                    // close to the xy-plane for the s coordinate.\r\n                    if (Cartesian2.magnitude(normalST) < CesiumMath.EPSILON6) {\r\n                        index = (i + slicePartitions * Math.floor(stackPartitions * 0.5)) * 3;\r\n                        if (index > positions.length) {\r\n                            index = (i - slicePartitions * Math.floor(stackPartitions * 0.5)) * 3;\r\n                        }\r\n                        Cartesian3.fromArray(positions, index, normalST);\r\n                        ellipsoid.geodeticSurfaceNormal(normalST, normalST);\r\n                        Cartesian2.negate(normalST, normalST);\r\n                    }\r\n\r\n                    st[stIndex++] = (Math.atan2(normalST.y, normalST.x) / CesiumMath.TWO_PI) + 0.5;\r\n                    st[stIndex++] = (Math.asin(normal.z) / Math.PI) + 0.5;\r\n                }\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                }\r\n\r\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    var tangent = scratchTangent;\r\n                    if (i < slicePartitions || i > vertexCount - slicePartitions - 1) {\r\n                        Cartesian3.cross(Cartesian3.UNIT_X, normal, tangent);\r\n                        Cartesian3.normalize(tangent, tangent);\r\n                    } else {\r\n                        Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\r\n                        Cartesian3.normalize(tangent, tangent);\r\n                    }\r\n\r\n                    if (vertexFormat.tangent) {\r\n                        tangents[tangentIndex++] = tangent.x;\r\n                        tangents[tangentIndex++] = tangent.y;\r\n                        tangents[tangentIndex++] = tangent.z;\r\n                    }\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        var bitangent = Cartesian3.cross(normal, tangent, scratchBitangent);\r\n                        Cartesian3.normalize(bitangent, bitangent);\r\n\r\n                        bitangents[bitangentIndex++] = bitangent.x;\r\n                        bitangents[bitangentIndex++] = bitangent.y;\r\n                        bitangents[bitangentIndex++] = bitangent.z;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (vertexFormat.st) {\r\n                attributes.st = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 2,\r\n                    values : st\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                attributes.normal = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : normals\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                attributes.tangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : tangents\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                attributes.bitangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : bitangents\r\n                });\r\n            }\r\n        }\r\n\r\n        if (defined(ellipsoidGeometry._offsetAttribute)) {\r\n            var length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        index = 0;\r\n        for (j = 0; j < slicePartitions - 1; j++) {\r\n            indices[index++] = slicePartitions + j;\r\n            indices[index++] = slicePartitions + j + 1;\r\n            indices[index++] = j + 1;\r\n        }\r\n\r\n        var topOffset;\r\n        var bottomOffset;\r\n        for (i = 1; i < stackPartitions - 2; i++) {\r\n            topOffset = i * slicePartitions;\r\n            bottomOffset = (i + 1) * slicePartitions;\r\n\r\n            for (j = 0; j < slicePartitions - 1; j++) {\r\n                indices[index++] = bottomOffset + j;\r\n                indices[index++] = bottomOffset + j + 1;\r\n                indices[index++] = topOffset + j + 1;\r\n\r\n                indices[index++] = bottomOffset + j;\r\n                indices[index++] = topOffset + j + 1;\r\n                indices[index++] = topOffset + j;\r\n            }\r\n        }\r\n\r\n        i = stackPartitions - 2;\r\n        topOffset = i * slicePartitions;\r\n        bottomOffset = (i + 1) * slicePartitions;\r\n\r\n        for (j = 0; j < slicePartitions - 1; j++) {\r\n            indices[index++] = bottomOffset + j;\r\n            indices[index++] = topOffset + j + 1;\r\n            indices[index++] = topOffset + j;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : BoundingSphere.fromEllipsoid(ellipsoid),\r\n            offsetAttribute : ellipsoidGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    var unitEllipsoidGeometry;\r\n\r\n    /**\r\n     * Returns the geometric representation of a unit ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     *\r\n     * @private\r\n     */\r\n    EllipsoidGeometry.getUnitEllipsoid = function() {\r\n        if (!defined(unitEllipsoidGeometry)) {\r\n            unitEllipsoidGeometry = EllipsoidGeometry.createGeometry((new EllipsoidGeometry({\r\n                radii : new Cartesian3(1.0, 1.0, 1.0),\r\n                vertexFormat : VertexFormat.POSITION_ONLY\r\n            })));\r\n        }\r\n        return unitEllipsoidGeometry;\r\n    };\r\n\r\n    return EllipsoidGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EllipsoidGeometry.js\n// module id = 97\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/EllipsoidOutlineGeometry'\r\n    ], function(\r\n        defined,\r\n        EllipsoidOutlineGeometry) {\r\n    'use strict';\r\n\r\n    return function(ellipsoidGeometry, offset) {\r\n        if (defined(ellipsoidGeometry.buffer, offset)) {\r\n            ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(ellipsoidGeometry, offset);\r\n        }\r\n        return EllipsoidOutlineGeometry.createGeometry(ellipsoidGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createEllipsoidOutlineGeometry.js\n// module id = 98\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/FrustumGeometry'\r\n    ], function(\r\n        defined,\r\n        FrustumGeometry) {\r\n    'use strict';\r\n\r\n    function createFrustumGeometry(frustumGeometry, offset) {\r\n        if (defined(offset)) {\r\n            frustumGeometry = FrustumGeometry.unpack(frustumGeometry, offset);\r\n        }\r\n        return FrustumGeometry.createGeometry(frustumGeometry);\r\n    }\r\n\r\n    return createFrustumGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createFrustumGeometry.js\n// module id = 99\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/FrustumOutlineGeometry'\r\n    ], function(\r\n        defined,\r\n        FrustumOutlineGeometry) {\r\n    'use strict';\r\n\r\n    function createFrustumOutlineGeometry(frustumGeometry, offset) {\r\n        if (defined(offset)) {\r\n            frustumGeometry = FrustumOutlineGeometry.unpack(frustumGeometry, offset);\r\n        }\r\n        return FrustumOutlineGeometry.createGeometry(frustumGeometry);\r\n    }\r\n\r\n    return createFrustumOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createFrustumOutlineGeometry.js\n// module id = 100\n// module chunks = 0","define([\r\n        '../Core/ApproximateTerrainHeights',\r\n        '../Core/defined',\r\n        '../Core/GroundPolylineGeometry'\r\n    ], function(\r\n        ApproximateTerrainHeights,\r\n        defined,\r\n        GroundPolylineGeometry) {\r\n    'use strict';\r\n\r\n    function createGroundPolylineGeometry(groundPolylineGeometry, offset) {\r\n        return ApproximateTerrainHeights.initialize()\r\n            .then(function() {\r\n                if (defined(offset)) {\r\n                    groundPolylineGeometry = GroundPolylineGeometry.unpack(groundPolylineGeometry, offset);\r\n                }\r\n                return GroundPolylineGeometry.createGeometry(groundPolylineGeometry);\r\n            });\r\n    }\r\n\r\n    return createGroundPolylineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createGroundPolylineGeometry.js\n// module id = 101\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/PlaneGeometry'\r\n    ], function(\r\n        defined,\r\n        PlaneGeometry) {\r\n    'use strict';\r\n\r\n    return function(planeGeometry, offset) {\r\n        if (defined(offset)) {\r\n            planeGeometry = PlaneGeometry.unpack(planeGeometry, offset);\r\n        }\r\n        return PlaneGeometry.createGeometry(planeGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createPlaneGeometry.js\n// module id = 102\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/PlaneOutlineGeometry'\r\n    ], function(\r\n        defined,\r\n        PlaneOutlineGeometry) {\r\n    'use strict';\r\n\r\n    return function(planeGeometry, offset) {\r\n        if (defined(offset)) {\r\n            planeGeometry = PlaneOutlineGeometry.unpack(planeGeometry, offset);\r\n        }\r\n        return PlaneOutlineGeometry.createGeometry(planeGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createPlaneOutlineGeometry.js\n// module id = 103\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/PolygonGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        PolygonGeometry) {\r\n    'use strict';\r\n\r\n    function createPolygonGeometry(polygonGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polygonGeometry = PolygonGeometry.unpack(polygonGeometry, offset);\r\n        }\r\n        polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n        return PolygonGeometry.createGeometry(polygonGeometry);\r\n    }\r\n\r\n    return createPolygonGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createPolygonGeometry.js\n// module id = 104\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/PolygonOutlineGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        PolygonOutlineGeometry) {\r\n    'use strict';\r\n\r\n    function createPolygonOutlineGeometry(polygonGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polygonGeometry = PolygonOutlineGeometry.unpack(polygonGeometry, offset);\r\n        }\r\n        polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n        return PolygonOutlineGeometry.createGeometry(polygonGeometry);\r\n    }\r\n\r\n    return createPolygonOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createPolygonOutlineGeometry.js\n// module id = 105\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/PolylineGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        PolylineGeometry) {\r\n    'use strict';\r\n\r\n    function createPolylineGeometry(polylineGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polylineGeometry = PolylineGeometry.unpack(polylineGeometry, offset);\r\n        }\r\n        polylineGeometry._ellipsoid = Ellipsoid.clone(polylineGeometry._ellipsoid);\r\n        return PolylineGeometry.createGeometry(polylineGeometry);\r\n    }\r\n\r\n    return createPolylineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createPolylineGeometry.js\n// module id = 106\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/PolylineVolumeGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        PolylineVolumeGeometry) {\r\n    'use strict';\r\n\r\n    function createPolylineVolumeGeometry(polylineVolumeGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polylineVolumeGeometry = PolylineVolumeGeometry.unpack(polylineVolumeGeometry, offset);\r\n        }\r\n        polylineVolumeGeometry._ellipsoid = Ellipsoid.clone(polylineVolumeGeometry._ellipsoid);\r\n        return PolylineVolumeGeometry.createGeometry(polylineVolumeGeometry);\r\n    }\r\n\r\n    return createPolylineVolumeGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createPolylineVolumeGeometry.js\n// module id = 107\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/PolylineVolumeOutlineGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        PolylineVolumeOutlineGeometry) {\r\n    'use strict';\r\n\r\n    function createPolylineVolumeOutlineGeometry(polylineVolumeOutlineGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polylineVolumeOutlineGeometry = PolylineVolumeOutlineGeometry.unpack(polylineVolumeOutlineGeometry, offset);\r\n        }\r\n        polylineVolumeOutlineGeometry._ellipsoid = Ellipsoid.clone(polylineVolumeOutlineGeometry._ellipsoid);\r\n        return PolylineVolumeOutlineGeometry.createGeometry(polylineVolumeOutlineGeometry);\r\n    }\r\n\r\n    return createPolylineVolumeOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createPolylineVolumeOutlineGeometry.js\n// module id = 108\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/Rectangle',\r\n        '../Core/RectangleGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        Rectangle,\r\n        RectangleGeometry) {\r\n    'use strict';\r\n\r\n    function createRectangleGeometry(rectangleGeometry, offset) {\r\n        if (defined(offset)) {\r\n            rectangleGeometry = RectangleGeometry.unpack(rectangleGeometry, offset);\r\n        }\r\n        rectangleGeometry._ellipsoid = Ellipsoid.clone(rectangleGeometry._ellipsoid);\r\n        rectangleGeometry._rectangle = Rectangle.clone(rectangleGeometry._rectangle);\r\n        return RectangleGeometry.createGeometry(rectangleGeometry);\r\n    }\r\n\r\n    return createRectangleGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createRectangleGeometry.js\n// module id = 109\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/Rectangle',\r\n        '../Core/RectangleOutlineGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        Rectangle,\r\n        RectangleOutlineGeometry) {\r\n    'use strict';\r\n\r\n    function createRectangleOutlineGeometry(rectangleGeometry, offset) {\r\n        if (defined(offset)) {\r\n            rectangleGeometry = RectangleOutlineGeometry.unpack(rectangleGeometry, offset);\r\n        }\r\n        rectangleGeometry._ellipsoid = Ellipsoid.clone(rectangleGeometry._ellipsoid);\r\n        rectangleGeometry._rectangle = Rectangle.clone(rectangleGeometry._rectangle);\r\n        return RectangleOutlineGeometry.createGeometry(rectangleGeometry);\r\n    }\r\n\r\n    return createRectangleOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createRectangleOutlineGeometry.js\n// module id = 110\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/SimplePolylineGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        SimplePolylineGeometry) {\r\n    'use strict';\r\n\r\n    function createSimplePolylineGeometry(simplePolylineGeometry, offset) {\r\n        if (defined(offset)) {\r\n            simplePolylineGeometry = SimplePolylineGeometry.unpack(simplePolylineGeometry, offset);\r\n        }\r\n        simplePolylineGeometry._ellipsoid = Ellipsoid.clone(simplePolylineGeometry._ellipsoid);\r\n        return SimplePolylineGeometry.createGeometry(simplePolylineGeometry);\r\n    }\r\n\r\n    return createSimplePolylineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createSimplePolylineGeometry.js\n// module id = 111\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/SphereGeometry'\r\n    ], function(\r\n        defined,\r\n        SphereGeometry) {\r\n    'use strict';\r\n\r\n    return function(sphereGeometry, offset) {\r\n        if (defined(offset)) {\r\n            sphereGeometry = SphereGeometry.unpack(sphereGeometry, offset);\r\n        }\r\n        return SphereGeometry.createGeometry(sphereGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createSphereGeometry.js\n// module id = 112\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/SphereOutlineGeometry'\r\n    ], function(\r\n        defined,\r\n        SphereOutlineGeometry) {\r\n    'use strict';\r\n\r\n    return function(sphereGeometry, offset) {\r\n        if (defined(offset)) {\r\n            sphereGeometry = SphereOutlineGeometry.unpack(sphereGeometry, offset);\r\n        }\r\n        return SphereOutlineGeometry.createGeometry(sphereGeometry);\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createSphereOutlineGeometry.js\n// module id = 113\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/WallGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        WallGeometry) {\r\n    'use strict';\r\n\r\n    function createWallGeometry(wallGeometry, offset) {\r\n        if (defined(offset)) {\r\n            wallGeometry = WallGeometry.unpack(wallGeometry, offset);\r\n        }\r\n        wallGeometry._ellipsoid = Ellipsoid.clone(wallGeometry._ellipsoid);\r\n        return WallGeometry.createGeometry(wallGeometry);\r\n    }\r\n\r\n    return createWallGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createWallGeometry.js\n// module id = 114\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/WallOutlineGeometry'\r\n    ], function(\r\n        defined,\r\n        Ellipsoid,\r\n        WallOutlineGeometry) {\r\n    'use strict';\r\n\r\n    function createWallOutlineGeometry(wallGeometry, offset) {\r\n        if (defined(offset)) {\r\n            wallGeometry = WallOutlineGeometry.unpack(wallGeometry, offset);\r\n        }\r\n        wallGeometry._ellipsoid = Ellipsoid.clone(wallGeometry._ellipsoid);\r\n        return WallOutlineGeometry.createGeometry(wallGeometry);\r\n    }\r\n\r\n    return createWallOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createWallOutlineGeometry.js\n// module id = 115\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './Rectangle'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Rectangle) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Determine whether or not other objects are visible or hidden behind the visible horizon defined by\r\n     * an {@link Ellipsoid} and a camera position.  The ellipsoid is assumed to be located at the\r\n     * origin of the coordinate system.  This class uses the algorithm described in the\r\n     * {@link https://cesium.com/blog/2013/04/25/Horizon-culling/|Horizon Culling} blog post.\r\n     *\r\n     * @alias EllipsoidalOccluder\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid to use as an occluder.\r\n     * @param {Cartesian3} [cameraPosition] The coordinate of the viewer/camera.  If this parameter is not\r\n     *        specified, {@link EllipsoidalOccluder#cameraPosition} must be called before\r\n     *        testing visibility.\r\n     *\r\n     * @constructor\r\n     *\r\n     * @example\r\n     * // Construct an ellipsoidal occluder with radii 1.0, 1.1, and 0.9.\r\n     * var cameraPosition = new Cesium.Cartesian3(5.0, 6.0, 7.0);\r\n     * var occluderEllipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n     * var occluder = new Cesium.EllipsoidalOccluder(occluderEllipsoid, cameraPosition);\r\n     *\r\n     * @private\r\n     */\r\n    function EllipsoidalOccluder(ellipsoid, cameraPosition) {\r\n        \r\n\r\n        this._ellipsoid = ellipsoid;\r\n        this._cameraPosition = new Cartesian3();\r\n        this._cameraPositionInScaledSpace = new Cartesian3();\r\n        this._distanceToLimbInScaledSpaceSquared = 0.0;\r\n\r\n        // cameraPosition fills in the above values\r\n        if (defined(cameraPosition)) {\r\n            this.cameraPosition = cameraPosition;\r\n        }\r\n    }\r\n\r\n    defineProperties(EllipsoidalOccluder.prototype, {\r\n        /**\r\n         * Gets the occluding ellipsoid.\r\n         * @memberof EllipsoidalOccluder.prototype\r\n         * @type {Ellipsoid}\r\n         */\r\n        ellipsoid : {\r\n            get: function() {\r\n                return this._ellipsoid;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the position of the camera.\r\n         * @memberof EllipsoidalOccluder.prototype\r\n         * @type {Cartesian3}\r\n         */\r\n        cameraPosition : {\r\n            get : function() {\r\n                return this._cameraPosition;\r\n            },\r\n            set : function(cameraPosition) {\r\n                // See https://cesiumjs.org/2013/04/25/Horizon-culling/\r\n                var ellipsoid = this._ellipsoid;\r\n                var cv = ellipsoid.transformPositionToScaledSpace(cameraPosition, this._cameraPositionInScaledSpace);\r\n                var vhMagnitudeSquared = Cartesian3.magnitudeSquared(cv) - 1.0;\r\n\r\n                Cartesian3.clone(cameraPosition, this._cameraPosition);\r\n                this._cameraPositionInScaledSpace = cv;\r\n                this._distanceToLimbInScaledSpaceSquared = vhMagnitudeSquared;\r\n            }\r\n        }\r\n    });\r\n\r\n    var scratchCartesian = new Cartesian3();\r\n\r\n    /**\r\n     * Determines whether or not a point, the <code>occludee</code>, is hidden from view by the occluder.\r\n     *\r\n     * @param {Cartesian3} occludee The point to test for visibility.\r\n     * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\r\n     *\r\n     * @example\r\n     * var cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\r\n     * var ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n     * var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\r\n     * var point = new Cesium.Cartesian3(0, -3, -3);\r\n     * occluder.isPointVisible(point); //returns true\r\n     */\r\n    EllipsoidalOccluder.prototype.isPointVisible = function(occludee) {\r\n        var ellipsoid = this._ellipsoid;\r\n        var occludeeScaledSpacePosition = ellipsoid.transformPositionToScaledSpace(occludee, scratchCartesian);\r\n        return this.isScaledSpacePointVisible(occludeeScaledSpacePosition);\r\n    };\r\n\r\n    /**\r\n     * Determines whether or not a point expressed in the ellipsoid scaled space, is hidden from view by the\r\n     * occluder.  To transform a Cartesian X, Y, Z position in the coordinate system aligned with the ellipsoid\r\n     * into the scaled space, call {@link Ellipsoid#transformPositionToScaledSpace}.\r\n     *\r\n     * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space.\r\n     * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\r\n     *\r\n     * @example\r\n     * var cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\r\n     * var ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n     * var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\r\n     * var point = new Cesium.Cartesian3(0, -3, -3);\r\n     * var scaledSpacePoint = ellipsoid.transformPositionToScaledSpace(point);\r\n     * occluder.isScaledSpacePointVisible(scaledSpacePoint); //returns true\r\n     */\r\n    EllipsoidalOccluder.prototype.isScaledSpacePointVisible = function(occludeeScaledSpacePosition) {\r\n        // See https://cesiumjs.org/2013/04/25/Horizon-culling/\r\n        var cv = this._cameraPositionInScaledSpace;\r\n        var vhMagnitudeSquared = this._distanceToLimbInScaledSpaceSquared;\r\n        var vt = Cartesian3.subtract(occludeeScaledSpacePosition, cv, scratchCartesian);\r\n        var vtDotVc = -Cartesian3.dot(vt, cv);\r\n        // If vhMagnitudeSquared < 0 then we are below the surface of the ellipsoid and\r\n        // in this case, set the culling plane to be on V.\r\n        var isOccluded = vhMagnitudeSquared < 0 ? vtDotVc > 0 : (vtDotVc > vhMagnitudeSquared &&\r\n                         vtDotVc * vtDotVc / Cartesian3.magnitudeSquared(vt) > vhMagnitudeSquared);\r\n        return !isOccluded;\r\n    };\r\n\r\n    /**\r\n     * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\r\n     * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\r\n     * is expressed in the ellipsoid-scaled space and is suitable for use with\r\n     * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n     *\r\n     * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n     *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n     *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n     *                     be normalized.\r\n     * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\r\n     *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n     *                       ellipsoid's axes.\r\n     * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n     * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n     */\r\n    EllipsoidalOccluder.prototype.computeHorizonCullingPoint = function(directionToPoint, positions, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var ellipsoid = this._ellipsoid;\r\n        var scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint);\r\n        var resultMagnitude = 0.0;\r\n\r\n        for (var i = 0, len = positions.length; i < len; ++i) {\r\n            var position = positions[i];\r\n            var candidateMagnitude = computeMagnitude(ellipsoid, position, scaledSpaceDirectionToPoint);\r\n            resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\r\n        }\r\n\r\n        return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\r\n    };\r\n\r\n    var positionScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\r\n     * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\r\n     * is expressed in the ellipsoid-scaled space and is suitable for use with\r\n     * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n     *\r\n     * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n     *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n     *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n     *                     be normalized.\r\n     * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\r\n     *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n     *                   ellipsoid's axes.\r\n     * @param {Number} [stride=3]\r\n     * @param {Cartesian3} [center=Cartesian3.ZERO]\r\n     * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n     * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n     */\r\n    EllipsoidalOccluder.prototype.computeHorizonCullingPointFromVertices = function(directionToPoint, vertices, stride, center, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        center = defaultValue(center, Cartesian3.ZERO);\r\n        var ellipsoid = this._ellipsoid;\r\n        var scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint);\r\n        var resultMagnitude = 0.0;\r\n\r\n        for (var i = 0, len = vertices.length; i < len; i += stride) {\r\n            positionScratch.x = vertices[i] + center.x;\r\n            positionScratch.y = vertices[i + 1] + center.y;\r\n            positionScratch.z = vertices[i + 2] + center.z;\r\n\r\n            var candidateMagnitude = computeMagnitude(ellipsoid, positionScratch, scaledSpaceDirectionToPoint);\r\n            resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\r\n        }\r\n\r\n        return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\r\n    };\r\n\r\n    var subsampleScratch = [];\r\n\r\n    /**\r\n     * Computes a point that can be used for horizon culling of a rectangle.  If the point is below\r\n     * the horizon, the ellipsoid-conforming rectangle is guaranteed to be below the horizon as well.\r\n     * The returned point is expressed in the ellipsoid-scaled space and is suitable for use with\r\n     * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to compute the horizon culling point.\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid on which the rectangle is defined.  This may be different from\r\n     *                    the ellipsoid used by this instance for occlusion testing.\r\n     * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n     * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n     */\r\n    EllipsoidalOccluder.prototype.computeHorizonCullingPointFromRectangle = function(rectangle, ellipsoid, result) {\r\n        \r\n\r\n        var positions = Rectangle.subsample(rectangle, ellipsoid, 0.0, subsampleScratch);\r\n        var bs = BoundingSphere.fromPoints(positions);\r\n\r\n        // If the bounding sphere center is too close to the center of the occluder, it doesn't make\r\n        // sense to try to horizon cull it.\r\n        if (Cartesian3.magnitude(bs.center) < 0.1 * ellipsoid.minimumRadius) {\r\n            return undefined;\r\n        }\r\n\r\n        return this.computeHorizonCullingPoint(bs.center, positions, result);\r\n    };\r\n\r\n    var scaledSpaceScratch = new Cartesian3();\r\n    var directionScratch = new Cartesian3();\r\n\r\n    function computeMagnitude(ellipsoid, position, scaledSpaceDirectionToPoint) {\r\n        var scaledSpacePosition = ellipsoid.transformPositionToScaledSpace(position, scaledSpaceScratch);\r\n        var magnitudeSquared = Cartesian3.magnitudeSquared(scaledSpacePosition);\r\n        var magnitude = Math.sqrt(magnitudeSquared);\r\n        var direction = Cartesian3.divideByScalar(scaledSpacePosition, magnitude, directionScratch);\r\n\r\n        // For the purpose of this computation, points below the ellipsoid are consider to be on it instead.\r\n        magnitudeSquared = Math.max(1.0, magnitudeSquared);\r\n        magnitude = Math.max(1.0, magnitude);\r\n\r\n        var cosAlpha = Cartesian3.dot(direction, scaledSpaceDirectionToPoint);\r\n        var sinAlpha = Cartesian3.magnitude(Cartesian3.cross(direction, scaledSpaceDirectionToPoint, direction));\r\n        var cosBeta = 1.0 / magnitude;\r\n        var sinBeta = Math.sqrt(magnitudeSquared - 1.0) * cosBeta;\r\n\r\n        return 1.0 / (cosAlpha * cosBeta - sinAlpha * sinBeta);\r\n    }\r\n\r\n    function magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result) {\r\n        // The horizon culling point is undefined if there were no positions from which to compute it,\r\n        // the directionToPoint is pointing opposite all of the positions,  or if we computed NaN or infinity.\r\n        if (resultMagnitude <= 0.0 || resultMagnitude === 1.0 / 0.0 || resultMagnitude !== resultMagnitude) {\r\n            return undefined;\r\n        }\r\n\r\n        return Cartesian3.multiplyByScalar(scaledSpaceDirectionToPoint, resultMagnitude, result);\r\n    }\r\n\r\n    var directionToPointScratch = new Cartesian3();\r\n\r\n    function computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint) {\r\n        if (Cartesian3.equals(directionToPoint, Cartesian3.ZERO)) {\r\n            return directionToPoint;\r\n        }\r\n\r\n        ellipsoid.transformPositionToScaledSpace(directionToPoint, directionToPointScratch);\r\n        return Cartesian3.normalize(directionToPointScratch, directionToPointScratch);\r\n    }\r\n\r\n    return EllipsoidalOccluder;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EllipsoidalOccluder.js\n// module id = 116\n// module chunks = 0","define([\r\n        '../Core/BoundingSphere',\r\n        '../Core/ComponentDatatype',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/DeveloperError',\r\n        '../Core/Ellipsoid',\r\n        '../Core/FeatureDetection',\r\n        '../Core/GeographicProjection',\r\n        '../Core/Geometry',\r\n        '../Core/GeometryAttribute',\r\n        '../Core/GeometryAttributes',\r\n        '../Core/GeometryPipeline',\r\n        '../Core/IndexDatatype',\r\n        '../Core/Matrix4',\r\n        '../Core/OffsetGeometryInstanceAttribute',\r\n        '../Core/WebMercatorProjection'\r\n    ], function(\r\n        BoundingSphere,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        FeatureDetection,\r\n        GeographicProjection,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryPipeline,\r\n        IndexDatatype,\r\n        Matrix4,\r\n        OffsetGeometryInstanceAttribute,\r\n        WebMercatorProjection) {\r\n    'use strict';\r\n\r\n    // Bail out if the browser doesn't support typed arrays, to prevent the setup function\r\n    // from failing, since we won't be able to create a WebGL context anyway.\r\n    if (!FeatureDetection.supportsTypedArrays()) {\r\n        return {};\r\n    }\r\n\r\n    function transformToWorldCoordinates(instances, primitiveModelMatrix, scene3DOnly) {\r\n        var toWorld = !scene3DOnly;\r\n        var length = instances.length;\r\n        var i;\r\n\r\n        if (!toWorld && (length > 1)) {\r\n            var modelMatrix = instances[0].modelMatrix;\r\n\r\n            for (i = 1; i < length; ++i) {\r\n                if (!Matrix4.equals(modelMatrix, instances[i].modelMatrix)) {\r\n                    toWorld = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (toWorld) {\r\n            for (i = 0; i < length; ++i) {\r\n                if (defined(instances[i].geometry)) {\r\n                    GeometryPipeline.transformToWorldCoordinates(instances[i]);\r\n                }\r\n            }\r\n        } else {\r\n            // Leave geometry in local coordinate system; auto update model-matrix.\r\n            Matrix4.multiplyTransformation(primitiveModelMatrix, instances[0].modelMatrix, primitiveModelMatrix);\r\n        }\r\n    }\r\n\r\n    function addGeometryBatchId(geometry, batchId) {\r\n        var attributes = geometry.attributes;\r\n        var positionAttr = attributes.position;\r\n        var numberOfComponents = positionAttr.values.length / positionAttr.componentsPerAttribute;\r\n\r\n        attributes.batchId = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : 1,\r\n            values : new Float32Array(numberOfComponents)\r\n        });\r\n\r\n        var values = attributes.batchId.values;\r\n        for (var j = 0; j < numberOfComponents; ++j) {\r\n            values[j] = batchId;\r\n        }\r\n    }\r\n\r\n    function addBatchIds(instances) {\r\n        var length = instances.length;\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            var instance = instances[i];\r\n            if (defined(instance.geometry)) {\r\n                addGeometryBatchId(instance.geometry, i);\r\n            } else if (defined(instance.westHemisphereGeometry) && defined(instance.eastHemisphereGeometry)) {\r\n                addGeometryBatchId(instance.westHemisphereGeometry, i);\r\n                addGeometryBatchId(instance.eastHemisphereGeometry, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function geometryPipeline(parameters) {\r\n        var instances = parameters.instances;\r\n        var projection = parameters.projection;\r\n        var uintIndexSupport = parameters.elementIndexUintSupported;\r\n        var scene3DOnly = parameters.scene3DOnly;\r\n        var vertexCacheOptimize = parameters.vertexCacheOptimize;\r\n        var compressVertices = parameters.compressVertices;\r\n        var modelMatrix = parameters.modelMatrix;\r\n\r\n        var i;\r\n        var geometry;\r\n        var primitiveType;\r\n        var length = instances.length;\r\n\r\n        for (i = 0; i < length; ++i) {\r\n            if (defined(instances[i].geometry)) {\r\n                primitiveType = instances[i].geometry.primitiveType;\r\n                break;\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        // Unify to world coordinates before combining.\r\n        transformToWorldCoordinates(instances, modelMatrix, scene3DOnly);\r\n\r\n        // Clip to IDL\r\n        if (!scene3DOnly) {\r\n            for (i = 0; i < length; ++i) {\r\n                if (defined(instances[i].geometry)) {\r\n                    GeometryPipeline.splitLongitude(instances[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        addBatchIds(instances);\r\n\r\n        // Optimize for vertex shader caches\r\n        if (vertexCacheOptimize) {\r\n            for (i = 0; i < length; ++i) {\r\n                var instance = instances[i];\r\n                if (defined(instance.geometry)) {\r\n                    GeometryPipeline.reorderForPostVertexCache(instance.geometry);\r\n                    GeometryPipeline.reorderForPreVertexCache(instance.geometry);\r\n                } else if (defined(instance.westHemisphereGeometry) && defined(instance.eastHemisphereGeometry)) {\r\n                    GeometryPipeline.reorderForPostVertexCache(instance.westHemisphereGeometry);\r\n                    GeometryPipeline.reorderForPreVertexCache(instance.westHemisphereGeometry);\r\n\r\n                    GeometryPipeline.reorderForPostVertexCache(instance.eastHemisphereGeometry);\r\n                    GeometryPipeline.reorderForPreVertexCache(instance.eastHemisphereGeometry);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Combine into single geometry for better rendering performance.\r\n        var geometries = GeometryPipeline.combineInstances(instances);\r\n\r\n        length = geometries.length;\r\n        for (i = 0; i < length; ++i) {\r\n            geometry = geometries[i];\r\n\r\n            // Split positions for GPU RTE\r\n            var attributes = geometry.attributes;\r\n            var name;\r\n            if (!scene3DOnly) {\r\n                for (name in attributes) {\r\n                    if (attributes.hasOwnProperty(name) && attributes[name].componentDatatype === ComponentDatatype.DOUBLE) {\r\n                        var name3D = name + '3D';\r\n                        var name2D = name + '2D';\r\n\r\n                        // Compute 2D positions\r\n                        GeometryPipeline.projectTo2D(geometry, name, name3D, name2D, projection);\r\n                        if (defined(geometry.boundingSphere) && name === 'position') {\r\n                            geometry.boundingSphereCV = BoundingSphere.fromVertices(geometry.attributes.position2D.values);\r\n                        }\r\n\r\n                        GeometryPipeline.encodeAttribute(geometry, name3D, name3D + 'High', name3D + 'Low');\r\n                        GeometryPipeline.encodeAttribute(geometry, name2D, name2D + 'High', name2D + 'Low');\r\n                    }\r\n                }\r\n            } else {\r\n                for (name in attributes) {\r\n                    if (attributes.hasOwnProperty(name) && attributes[name].componentDatatype === ComponentDatatype.DOUBLE) {\r\n                        GeometryPipeline.encodeAttribute(geometry, name, name + '3DHigh', name + '3DLow');\r\n                    }\r\n                }\r\n            }\r\n\r\n            // oct encode and pack normals, compress texture coordinates\r\n            if (compressVertices) {\r\n                GeometryPipeline.compressVertices(geometry);\r\n            }\r\n        }\r\n\r\n        if (!uintIndexSupport) {\r\n            // Break into multiple geometries to fit within unsigned short indices if needed\r\n            var splitGeometries = [];\r\n            length = geometries.length;\r\n            for (i = 0; i < length; ++i) {\r\n                geometry = geometries[i];\r\n                splitGeometries = splitGeometries.concat(GeometryPipeline.fitToUnsignedShortIndices(geometry));\r\n            }\r\n\r\n            geometries = splitGeometries;\r\n        }\r\n\r\n        return geometries;\r\n    }\r\n\r\n    function createPickOffsets(instances, geometryName, geometries, pickOffsets) {\r\n        var offset;\r\n        var indexCount;\r\n        var geometryIndex;\r\n\r\n        var offsetIndex = pickOffsets.length - 1;\r\n        if (offsetIndex >= 0) {\r\n            var pickOffset = pickOffsets[offsetIndex];\r\n            offset = pickOffset.offset + pickOffset.count;\r\n            geometryIndex = pickOffset.index;\r\n            indexCount = geometries[geometryIndex].indices.length;\r\n        } else {\r\n            offset = 0;\r\n            geometryIndex = 0;\r\n            indexCount = geometries[geometryIndex].indices.length;\r\n        }\r\n\r\n        var length = instances.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            var instance = instances[i];\r\n            var geometry = instance[geometryName];\r\n            if (!defined(geometry)) {\r\n                continue;\r\n            }\r\n\r\n            var count = geometry.indices.length;\r\n\r\n            if (offset + count > indexCount) {\r\n                offset = 0;\r\n                indexCount = geometries[++geometryIndex].indices.length;\r\n            }\r\n\r\n            pickOffsets.push({\r\n                index : geometryIndex,\r\n                offset : offset,\r\n                count : count\r\n            });\r\n            offset += count;\r\n        }\r\n    }\r\n\r\n    function createInstancePickOffsets(instances, geometries) {\r\n        var pickOffsets = [];\r\n        createPickOffsets(instances, 'geometry', geometries, pickOffsets);\r\n        createPickOffsets(instances, 'westHemisphereGeometry', geometries, pickOffsets);\r\n        createPickOffsets(instances, 'eastHemisphereGeometry', geometries, pickOffsets);\r\n        return pickOffsets;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PrimitivePipeline = {};\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PrimitivePipeline.combineGeometry = function(parameters) {\r\n        var geometries;\r\n        var attributeLocations;\r\n        var instances = parameters.instances;\r\n        var length = instances.length;\r\n        var pickOffsets;\r\n\r\n        var offsetInstanceExtend;\r\n        var hasOffset = false;\r\n        if (length > 0) {\r\n            geometries = geometryPipeline(parameters);\r\n            if (geometries.length > 0) {\r\n                attributeLocations = GeometryPipeline.createAttributeLocations(geometries[0]);\r\n                if (parameters.createPickOffsets) {\r\n                    pickOffsets = createInstancePickOffsets(instances, geometries);\r\n                }\r\n            }\r\n            if (defined(instances[0].attributes) && defined(instances[0].attributes.offset)) {\r\n                offsetInstanceExtend = new Array(length);\r\n                hasOffset = true;\r\n            }\r\n        }\r\n\r\n        var boundingSpheres = new Array(length);\r\n        var boundingSpheresCV = new Array(length);\r\n        for (var i = 0; i < length; ++i) {\r\n            var instance = instances[i];\r\n            var geometry = instance.geometry;\r\n            if (defined(geometry)) {\r\n                boundingSpheres[i] = geometry.boundingSphere;\r\n                boundingSpheresCV[i] = geometry.boundingSphereCV;\r\n                if (hasOffset) {\r\n                    offsetInstanceExtend[i] = instance.geometry.offsetAttribute;\r\n                }\r\n            }\r\n\r\n            var eastHemisphereGeometry = instance.eastHemisphereGeometry;\r\n            var westHemisphereGeometry = instance.westHemisphereGeometry;\r\n            if (defined(eastHemisphereGeometry) && defined(westHemisphereGeometry)) {\r\n                if (defined(eastHemisphereGeometry.boundingSphere) && defined(westHemisphereGeometry.boundingSphere)) {\r\n                    boundingSpheres[i] = BoundingSphere.union(eastHemisphereGeometry.boundingSphere, westHemisphereGeometry.boundingSphere);\r\n                }\r\n                if (defined(eastHemisphereGeometry.boundingSphereCV) && defined(westHemisphereGeometry.boundingSphereCV)) {\r\n                    boundingSpheresCV[i] = BoundingSphere.union(eastHemisphereGeometry.boundingSphereCV, westHemisphereGeometry.boundingSphereCV);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            geometries : geometries,\r\n            modelMatrix : parameters.modelMatrix,\r\n            attributeLocations : attributeLocations,\r\n            pickOffsets : pickOffsets,\r\n            offsetInstanceExtend : offsetInstanceExtend,\r\n            boundingSpheres : boundingSpheres,\r\n            boundingSpheresCV : boundingSpheresCV\r\n        };\r\n    };\r\n\r\n    function transferGeometry(geometry, transferableObjects) {\r\n        var attributes = geometry.attributes;\r\n        for (var name in attributes) {\r\n            if (attributes.hasOwnProperty(name)) {\r\n                var attribute = attributes[name];\r\n\r\n                if (defined(attribute) && defined(attribute.values)) {\r\n                    transferableObjects.push(attribute.values.buffer);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (defined(geometry.indices)) {\r\n            transferableObjects.push(geometry.indices.buffer);\r\n        }\r\n    }\r\n\r\n    function transferGeometries(geometries, transferableObjects) {\r\n        var length = geometries.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            transferGeometry(geometries[i], transferableObjects);\r\n        }\r\n    }\r\n\r\n    // This function was created by simplifying packCreateGeometryResults into a count-only operation.\r\n    function countCreateGeometryResults(items) {\r\n        var count = 1;\r\n        var length = items.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var geometry = items[i];\r\n            ++count;\r\n\r\n            if (!defined(geometry)) {\r\n                continue;\r\n            }\r\n\r\n            var attributes = geometry.attributes;\r\n\r\n            count += 7 + 2 * BoundingSphere.packedLength + (defined(geometry.indices) ? geometry.indices.length : 0);\r\n\r\n            for (var property in attributes) {\r\n                if (attributes.hasOwnProperty(property) && defined(attributes[property])) {\r\n                    var attribute = attributes[property];\r\n                    count += 5 + attribute.values.length;\r\n                }\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PrimitivePipeline.packCreateGeometryResults = function(items, transferableObjects) {\r\n        var packedData = new Float64Array(countCreateGeometryResults(items));\r\n        var stringTable = [];\r\n        var stringHash = {};\r\n\r\n        var length = items.length;\r\n        var count = 0;\r\n        packedData[count++] = length;\r\n        for (var i = 0; i < length; i++) {\r\n            var geometry = items[i];\r\n\r\n            var validGeometry = defined(geometry);\r\n            packedData[count++] = validGeometry ? 1.0 : 0.0;\r\n\r\n            if (!validGeometry) {\r\n                continue;\r\n            }\r\n\r\n            packedData[count++] = geometry.primitiveType;\r\n            packedData[count++] = geometry.geometryType;\r\n            packedData[count++] = defaultValue(geometry.offsetAttribute, -1);\r\n\r\n            var validBoundingSphere = defined(geometry.boundingSphere) ? 1.0 : 0.0;\r\n            packedData[count++] = validBoundingSphere;\r\n            if (validBoundingSphere) {\r\n                BoundingSphere.pack(geometry.boundingSphere, packedData, count);\r\n            }\r\n\r\n            count += BoundingSphere.packedLength;\r\n\r\n            var validBoundingSphereCV = defined(geometry.boundingSphereCV) ? 1.0 : 0.0;\r\n            packedData[count++] = validBoundingSphereCV;\r\n            if (validBoundingSphereCV) {\r\n                BoundingSphere.pack(geometry.boundingSphereCV, packedData, count);\r\n            }\r\n\r\n            count += BoundingSphere.packedLength;\r\n\r\n            var attributes = geometry.attributes;\r\n            var attributesToWrite = [];\r\n            for (var property in attributes) {\r\n                if (attributes.hasOwnProperty(property) && defined(attributes[property])) {\r\n                    attributesToWrite.push(property);\r\n                    if (!defined(stringHash[property])) {\r\n                        stringHash[property] = stringTable.length;\r\n                        stringTable.push(property);\r\n                    }\r\n                }\r\n            }\r\n\r\n            packedData[count++] = attributesToWrite.length;\r\n            for (var q = 0; q < attributesToWrite.length; q++) {\r\n                var name = attributesToWrite[q];\r\n                var attribute = attributes[name];\r\n                packedData[count++] = stringHash[name];\r\n                packedData[count++] = attribute.componentDatatype;\r\n                packedData[count++] = attribute.componentsPerAttribute;\r\n                packedData[count++] = attribute.normalize ? 1 : 0;\r\n                packedData[count++] = attribute.values.length;\r\n                packedData.set(attribute.values, count);\r\n                count += attribute.values.length;\r\n            }\r\n\r\n            var indicesLength = defined(geometry.indices) ? geometry.indices.length : 0;\r\n            packedData[count++] = indicesLength;\r\n\r\n            if (indicesLength > 0) {\r\n                packedData.set(geometry.indices, count);\r\n                count += indicesLength;\r\n            }\r\n        }\r\n\r\n        transferableObjects.push(packedData.buffer);\r\n\r\n        return {\r\n            stringTable : stringTable,\r\n            packedData : packedData\r\n        };\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PrimitivePipeline.unpackCreateGeometryResults = function(createGeometryResult) {\r\n        var stringTable = createGeometryResult.stringTable;\r\n        var packedGeometry = createGeometryResult.packedData;\r\n\r\n        var i;\r\n        var result = new Array(packedGeometry[0]);\r\n        var resultIndex = 0;\r\n\r\n        var packedGeometryIndex = 1;\r\n        while (packedGeometryIndex < packedGeometry.length) {\r\n            var valid = packedGeometry[packedGeometryIndex++] === 1.0;\r\n            if (!valid) {\r\n                result[resultIndex++] = undefined;\r\n                continue;\r\n            }\r\n\r\n            var primitiveType = packedGeometry[packedGeometryIndex++];\r\n            var geometryType = packedGeometry[packedGeometryIndex++];\r\n            var offsetAttribute = packedGeometry[packedGeometryIndex++];\r\n            if (offsetAttribute === -1) {\r\n                offsetAttribute = undefined;\r\n            }\r\n\r\n            var boundingSphere;\r\n            var boundingSphereCV;\r\n\r\n            var validBoundingSphere = packedGeometry[packedGeometryIndex++] === 1.0;\r\n            if (validBoundingSphere) {\r\n                boundingSphere = BoundingSphere.unpack(packedGeometry, packedGeometryIndex);\r\n            }\r\n\r\n            packedGeometryIndex += BoundingSphere.packedLength;\r\n\r\n            var validBoundingSphereCV = packedGeometry[packedGeometryIndex++] === 1.0;\r\n            if (validBoundingSphereCV) {\r\n                boundingSphereCV = BoundingSphere.unpack(packedGeometry, packedGeometryIndex);\r\n            }\r\n\r\n            packedGeometryIndex += BoundingSphere.packedLength;\r\n\r\n            var length;\r\n            var values;\r\n            var componentsPerAttribute;\r\n            var attributes = new GeometryAttributes();\r\n            var numAttributes = packedGeometry[packedGeometryIndex++];\r\n            for (i = 0; i < numAttributes; i++) {\r\n                var name = stringTable[packedGeometry[packedGeometryIndex++]];\r\n                var componentDatatype = packedGeometry[packedGeometryIndex++];\r\n                componentsPerAttribute = packedGeometry[packedGeometryIndex++];\r\n                var normalize = packedGeometry[packedGeometryIndex++] !== 0;\r\n\r\n                length = packedGeometry[packedGeometryIndex++];\r\n                values = ComponentDatatype.createTypedArray(componentDatatype, length);\r\n                for (var valuesIndex = 0; valuesIndex < length; valuesIndex++) {\r\n                    values[valuesIndex] = packedGeometry[packedGeometryIndex++];\r\n                }\r\n\r\n                attributes[name] = new GeometryAttribute({\r\n                    componentDatatype : componentDatatype,\r\n                    componentsPerAttribute : componentsPerAttribute,\r\n                    normalize : normalize,\r\n                    values : values\r\n                });\r\n            }\r\n\r\n            var indices;\r\n            length = packedGeometry[packedGeometryIndex++];\r\n\r\n            if (length > 0) {\r\n                var numberOfVertices = values.length / componentsPerAttribute;\r\n                indices = IndexDatatype.createTypedArray(numberOfVertices, length);\r\n                for (i = 0; i < length; i++) {\r\n                    indices[i] = packedGeometry[packedGeometryIndex++];\r\n                }\r\n            }\r\n\r\n            result[resultIndex++] = new Geometry({\r\n                primitiveType : primitiveType,\r\n                geometryType : geometryType,\r\n                boundingSphere : boundingSphere,\r\n                boundingSphereCV : boundingSphereCV,\r\n                indices : indices,\r\n                attributes : attributes,\r\n                offsetAttribute: offsetAttribute\r\n            });\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    function packInstancesForCombine(instances, transferableObjects) {\r\n        var length = instances.length;\r\n        var packedData = new Float64Array(1 + (length * 19));\r\n        var count = 0;\r\n        packedData[count++] = length;\r\n        for (var i = 0; i < length; i++) {\r\n            var instance = instances[i];\r\n            Matrix4.pack(instance.modelMatrix, packedData, count);\r\n            count += Matrix4.packedLength;\r\n            if (defined(instance.attributes) && defined(instance.attributes.offset)) {\r\n                var values = instance.attributes.offset.value;\r\n                packedData[count] = values[0];\r\n                packedData[count + 1] = values[1];\r\n                packedData[count + 2] = values[2];\r\n            }\r\n            count += 3;\r\n        }\r\n        transferableObjects.push(packedData.buffer);\r\n\r\n        return packedData;\r\n    }\r\n\r\n    function unpackInstancesForCombine(data) {\r\n        var packedInstances = data;\r\n        var result = new Array(packedInstances[0]);\r\n        var count = 0;\r\n\r\n        var i = 1;\r\n        while (i < packedInstances.length) {\r\n            var modelMatrix = Matrix4.unpack(packedInstances, i);\r\n            var attributes;\r\n            i += Matrix4.packedLength;\r\n            if (defined(packedInstances[i])) {\r\n                attributes = {\r\n                    offset : new OffsetGeometryInstanceAttribute(packedInstances[i], packedInstances[i + 1], packedInstances[i + 2])\r\n                };\r\n            }\r\n            i += 3;\r\n\r\n            result[count++] = {\r\n                modelMatrix : modelMatrix,\r\n                attributes : attributes\r\n            };\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PrimitivePipeline.packCombineGeometryParameters = function(parameters, transferableObjects) {\r\n        var createGeometryResults = parameters.createGeometryResults;\r\n        var length = createGeometryResults.length;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            transferableObjects.push(createGeometryResults[i].packedData.buffer);\r\n        }\r\n\r\n        return {\r\n            createGeometryResults : parameters.createGeometryResults,\r\n            packedInstances : packInstancesForCombine(parameters.instances, transferableObjects),\r\n            ellipsoid : parameters.ellipsoid,\r\n            isGeographic : parameters.projection instanceof GeographicProjection,\r\n            elementIndexUintSupported : parameters.elementIndexUintSupported,\r\n            scene3DOnly : parameters.scene3DOnly,\r\n            vertexCacheOptimize : parameters.vertexCacheOptimize,\r\n            compressVertices : parameters.compressVertices,\r\n            modelMatrix : parameters.modelMatrix,\r\n            createPickOffsets : parameters.createPickOffsets\r\n        };\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PrimitivePipeline.unpackCombineGeometryParameters = function(packedParameters) {\r\n        var instances = unpackInstancesForCombine(packedParameters.packedInstances);\r\n        var createGeometryResults = packedParameters.createGeometryResults;\r\n        var length = createGeometryResults.length;\r\n        var instanceIndex = 0;\r\n\r\n        for (var resultIndex = 0; resultIndex < length; resultIndex++) {\r\n            var geometries = PrimitivePipeline.unpackCreateGeometryResults(createGeometryResults[resultIndex]);\r\n            var geometriesLength = geometries.length;\r\n            for (var geometryIndex = 0; geometryIndex < geometriesLength; geometryIndex++) {\r\n                var geometry = geometries[geometryIndex];\r\n                var instance = instances[instanceIndex];\r\n                instance.geometry = geometry;\r\n                ++instanceIndex;\r\n            }\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.clone(packedParameters.ellipsoid);\r\n        var projection = packedParameters.isGeographic ? new GeographicProjection(ellipsoid) : new WebMercatorProjection(ellipsoid);\r\n\r\n        return {\r\n            instances : instances,\r\n            ellipsoid : ellipsoid,\r\n            projection : projection,\r\n            elementIndexUintSupported : packedParameters.elementIndexUintSupported,\r\n            scene3DOnly : packedParameters.scene3DOnly,\r\n            vertexCacheOptimize : packedParameters.vertexCacheOptimize,\r\n            compressVertices : packedParameters.compressVertices,\r\n            modelMatrix : Matrix4.clone(packedParameters.modelMatrix),\r\n            createPickOffsets : packedParameters.createPickOffsets\r\n        };\r\n    };\r\n\r\n    function packBoundingSpheres(boundingSpheres) {\r\n        var length = boundingSpheres.length;\r\n        var bufferLength = 1 + (BoundingSphere.packedLength + 1) * length;\r\n        var buffer = new Float32Array(bufferLength);\r\n\r\n        var bufferIndex = 0;\r\n        buffer[bufferIndex++] = length;\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            var bs = boundingSpheres[i];\r\n            if (!defined(bs)) {\r\n                buffer[bufferIndex++] = 0.0;\r\n            } else {\r\n                buffer[bufferIndex++] = 1.0;\r\n                BoundingSphere.pack(boundingSpheres[i], buffer, bufferIndex);\r\n            }\r\n            bufferIndex += BoundingSphere.packedLength;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    function unpackBoundingSpheres(buffer) {\r\n        var result = new Array(buffer[0]);\r\n        var count = 0;\r\n\r\n        var i = 1;\r\n        while (i < buffer.length) {\r\n            if (buffer[i++] === 1.0) {\r\n                result[count] = BoundingSphere.unpack(buffer, i);\r\n            }\r\n            ++count;\r\n            i += BoundingSphere.packedLength;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PrimitivePipeline.packCombineGeometryResults = function(results, transferableObjects) {\r\n        if (defined(results.geometries)) {\r\n            transferGeometries(results.geometries, transferableObjects);\r\n        }\r\n\r\n        var packedBoundingSpheres = packBoundingSpheres(results.boundingSpheres);\r\n        var packedBoundingSpheresCV = packBoundingSpheres(results.boundingSpheresCV);\r\n        transferableObjects.push(packedBoundingSpheres.buffer, packedBoundingSpheresCV.buffer);\r\n\r\n        return {\r\n            geometries : results.geometries,\r\n            attributeLocations : results.attributeLocations,\r\n            modelMatrix : results.modelMatrix,\r\n            pickOffsets : results.pickOffsets,\r\n            offsetInstanceExtend: results.offsetInstanceExtend,\r\n            boundingSpheres : packedBoundingSpheres,\r\n            boundingSpheresCV : packedBoundingSpheresCV\r\n        };\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PrimitivePipeline.unpackCombineGeometryResults = function(packedResult) {\r\n        return {\r\n            geometries : packedResult.geometries,\r\n            attributeLocations : packedResult.attributeLocations,\r\n            modelMatrix : packedResult.modelMatrix,\r\n            pickOffsets : packedResult.pickOffsets,\r\n            offsetInstanceExtend: packedResult.offsetInstanceExtend,\r\n            boundingSpheres : unpackBoundingSpheres(packedResult.boundingSpheres),\r\n            boundingSpheresCV : unpackBoundingSpheres(packedResult.boundingSpheresCV)\r\n        };\r\n    };\r\n\r\n    return PrimitivePipeline;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Scene/PrimitivePipeline.js\n// module id = 117\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Math'\r\n    ], function(\r\n        Cartesian3,\r\n        defined,\r\n        DeveloperError,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    var scaleToGeodeticSurfaceIntersection = new Cartesian3();\r\n    var scaleToGeodeticSurfaceGradient = new Cartesian3();\r\n\r\n    /**\r\n     * Scales the provided Cartesian position along the geodetic surface normal\r\n     * so that it is on the surface of this ellipsoid.  If the position is\r\n     * at the center of the ellipsoid, this function returns undefined.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n     * @param {Cartesian3} oneOverRadii One over radii of the ellipsoid.\r\n     * @param {Cartesian3} oneOverRadiiSquared One over radii squared of the ellipsoid.\r\n     * @param {Number} centerToleranceSquared Tolerance for closeness to the center.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter, a new Cartesian3 instance if none was provided, or undefined if the position is at the center.\r\n     *\r\n     * @exports scaleToGeodeticSurface\r\n     *\r\n     * @private\r\n     */\r\n    function scaleToGeodeticSurface(cartesian, oneOverRadii, oneOverRadiiSquared, centerToleranceSquared, result) {\r\n        \r\n\r\n        var positionX = cartesian.x;\r\n        var positionY = cartesian.y;\r\n        var positionZ = cartesian.z;\r\n\r\n        var oneOverRadiiX = oneOverRadii.x;\r\n        var oneOverRadiiY = oneOverRadii.y;\r\n        var oneOverRadiiZ = oneOverRadii.z;\r\n\r\n        var x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;\r\n        var y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;\r\n        var z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;\r\n\r\n        // Compute the squared ellipsoid norm.\r\n        var squaredNorm = x2 + y2 + z2;\r\n        var ratio = Math.sqrt(1.0 / squaredNorm);\r\n\r\n        // As an initial approximation, assume that the radial intersection is the projection point.\r\n        var intersection = Cartesian3.multiplyByScalar(cartesian, ratio, scaleToGeodeticSurfaceIntersection);\r\n\r\n        // If the position is near the center, the iteration will not converge.\r\n        if (squaredNorm < centerToleranceSquared) {\r\n            return !isFinite(ratio) ? undefined : Cartesian3.clone(intersection, result);\r\n        }\r\n\r\n        var oneOverRadiiSquaredX = oneOverRadiiSquared.x;\r\n        var oneOverRadiiSquaredY = oneOverRadiiSquared.y;\r\n        var oneOverRadiiSquaredZ = oneOverRadiiSquared.z;\r\n\r\n        // Use the gradient at the intersection point in place of the true unit normal.\r\n        // The difference in magnitude will be absorbed in the multiplier.\r\n        var gradient = scaleToGeodeticSurfaceGradient;\r\n        gradient.x = intersection.x * oneOverRadiiSquaredX * 2.0;\r\n        gradient.y = intersection.y * oneOverRadiiSquaredY * 2.0;\r\n        gradient.z = intersection.z * oneOverRadiiSquaredZ * 2.0;\r\n\r\n        // Compute the initial guess at the normal vector multiplier, lambda.\r\n        var lambda = (1.0 - ratio) * Cartesian3.magnitude(cartesian) / (0.5 * Cartesian3.magnitude(gradient));\r\n        var correction = 0.0;\r\n\r\n        var func;\r\n        var denominator;\r\n        var xMultiplier;\r\n        var yMultiplier;\r\n        var zMultiplier;\r\n        var xMultiplier2;\r\n        var yMultiplier2;\r\n        var zMultiplier2;\r\n        var xMultiplier3;\r\n        var yMultiplier3;\r\n        var zMultiplier3;\r\n\r\n        do {\r\n            lambda -= correction;\r\n\r\n            xMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredX);\r\n            yMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredY);\r\n            zMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredZ);\r\n\r\n            xMultiplier2 = xMultiplier * xMultiplier;\r\n            yMultiplier2 = yMultiplier * yMultiplier;\r\n            zMultiplier2 = zMultiplier * zMultiplier;\r\n\r\n            xMultiplier3 = xMultiplier2 * xMultiplier;\r\n            yMultiplier3 = yMultiplier2 * yMultiplier;\r\n            zMultiplier3 = zMultiplier2 * zMultiplier;\r\n\r\n            func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\r\n\r\n            // \"denominator\" here refers to the use of this expression in the velocity and acceleration\r\n            // computations in the sections to follow.\r\n            denominator = x2 * xMultiplier3 * oneOverRadiiSquaredX + y2 * yMultiplier3 * oneOverRadiiSquaredY + z2 * zMultiplier3 * oneOverRadiiSquaredZ;\r\n\r\n            var derivative = -2.0 * denominator;\r\n\r\n            correction = func / derivative;\r\n        } while (Math.abs(func) > CesiumMath.EPSILON12);\r\n\r\n        if (!defined(result)) {\r\n            return new Cartesian3(positionX * xMultiplier, positionY * yMultiplier, positionZ * zMultiplier);\r\n        }\r\n        result.x = positionX * xMultiplier;\r\n        result.y = positionY * yMultiplier;\r\n        result.z = positionZ * zMultiplier;\r\n        return result;\r\n    }\r\n\r\n    return scaleToGeodeticSurface;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/scaleToGeodeticSurface.js\n// module id = 118\n// module chunks = 0","define([\r\n        './Check'\r\n    ], function(\r\n        Check) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Finds an item in a sorted array.\r\n     *\r\n     * @exports binarySearch\r\n     *\r\n     * @param {Array} array The sorted array to search.\r\n     * @param {*} itemToFind The item to find in the array.\r\n     * @param {binarySearch~Comparator} comparator The function to use to compare the item to\r\n     *        elements in the array.\r\n     * @returns {Number} The index of <code>itemToFind</code> in the array, if it exists.  If <code>itemToFind</code>\r\n     *        does not exist, the return value is a negative number which is the bitwise complement (~)\r\n     *        of the index before which the itemToFind should be inserted in order to maintain the\r\n     *        sorted order of the array.\r\n     *\r\n     * @example\r\n     * // Create a comparator function to search through an array of numbers.\r\n     * function comparator(a, b) {\r\n     *     return a - b;\r\n     * };\r\n     * var numbers = [0, 2, 4, 6, 8];\r\n     * var index = Cesium.binarySearch(numbers, 6, comparator); // 3\r\n     */\r\n    function binarySearch(array, itemToFind, comparator) {\r\n        \r\n\r\n        var low = 0;\r\n        var high = array.length - 1;\r\n        var i;\r\n        var comparison;\r\n\r\n        while (low <= high) {\r\n            i = ~~((low + high) / 2);\r\n            comparison = comparator(array[i], itemToFind);\r\n            if (comparison < 0) {\r\n                low = i + 1;\r\n                continue;\r\n            }\r\n            if (comparison > 0) {\r\n                high = i - 1;\r\n                continue;\r\n            }\r\n            return i;\r\n        }\r\n        return ~(high + 1);\r\n    }\r\n\r\n    /**\r\n     * A function used to compare two items while performing a binary search.\r\n     * @callback binarySearch~Comparator\r\n     *\r\n     * @param {*} a An item in the array.\r\n     * @param {*} b The item being searched for.\r\n     * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\r\n     *          a positive value if <code>a</code> is greater than <code>b</code>, or\r\n     *          0 if <code>a</code> is equal to <code>b</code>.\r\n     *\r\n     * @example\r\n     * function compareNumbers(a, b) {\r\n     *     return a - b;\r\n     * }\r\n     */\r\n\r\n    return binarySearch;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/binarySearch.js\n// module id = 119\n// module chunks = 0","define(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * Describes a single leap second, which is constructed from a {@link JulianDate} and a\r\n     * numerical offset representing the number of seconds TAI is ahead of the UTC time standard.\r\n     * @alias LeapSecond\r\n     * @constructor\r\n     *\r\n     * @param {JulianDate} [date] A Julian date representing the time of the leap second.\r\n     * @param {Number} [offset] The cumulative number of seconds that TAI is ahead of UTC at the provided date.\r\n     */\r\n    function LeapSecond(date, offset) {\r\n        /**\r\n         * Gets or sets the date at which this leap second occurs.\r\n         * @type {JulianDate}\r\n         */\r\n        this.julianDate = date;\r\n\r\n        /**\r\n         * Gets or sets the cumulative number of seconds between the UTC and TAI time standards at the time\r\n         * of this leap second.\r\n         * @type {Number}\r\n         */\r\n        this.offset = offset;\r\n    }\r\n\r\n    return LeapSecond;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/LeapSecond.js\n// module id = 120\n// module chunks = 0","define(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * A set of Earth Orientation Parameters (EOP) sampled at a time.\r\n     *\r\n     * @alias EarthOrientationParametersSample\r\n     * @constructor\r\n     *\r\n     * @param {Number} xPoleWander The pole wander about the X axis, in radians.\r\n     * @param {Number} yPoleWander The pole wander about the Y axis, in radians.\r\n     * @param {Number} xPoleOffset The offset to the Celestial Intermediate Pole (CIP) about the X axis, in radians.\r\n     * @param {Number} yPoleOffset The offset to the Celestial Intermediate Pole (CIP) about the Y axis, in radians.\r\n     * @param {Number} ut1MinusUtc The difference in time standards, UT1 - UTC, in seconds.\r\n     *\r\n     * @private\r\n     */\r\n    function EarthOrientationParametersSample(xPoleWander, yPoleWander, xPoleOffset, yPoleOffset, ut1MinusUtc) {\r\n        /**\r\n         * The pole wander about the X axis, in radians.\r\n         * @type {Number}\r\n         */\r\n        this.xPoleWander = xPoleWander;\r\n\r\n        /**\r\n         * The pole wander about the Y axis, in radians.\r\n         * @type {Number}\r\n         */\r\n        this.yPoleWander = yPoleWander;\r\n\r\n        /**\r\n         * The offset to the Celestial Intermediate Pole (CIP) about the X axis, in radians.\r\n         * @type {Number}\r\n         */\r\n        this.xPoleOffset = xPoleOffset;\r\n\r\n        /**\r\n         * The offset to the Celestial Intermediate Pole (CIP) about the Y axis, in radians.\r\n         * @type {Number}\r\n         */\r\n        this.yPoleOffset = yPoleOffset;\r\n\r\n        /**\r\n         * The difference in time standards, UT1 - UTC, in seconds.\r\n         * @type {Number}\r\n         */\r\n        this.ut1MinusUtc = ut1MinusUtc;\r\n    }\r\n\r\n    return EarthOrientationParametersSample;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EarthOrientationParametersSample.js\n// module id = 121\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    var warnings = {};\r\n\r\n    /**\r\n     * Logs a one time message to the console.  Use this function instead of\r\n     * <code>console.log</code> directly since this does not log duplicate messages\r\n     * unless it is called from multiple workers.\r\n     *\r\n     * @exports oneTimeWarning\r\n     *\r\n     * @param {String} identifier The unique identifier for this warning.\r\n     * @param {String} [message=identifier] The message to log to the console.\r\n     *\r\n     * @example\r\n     * for(var i=0;i<foo.length;++i) {\r\n     *    if (!defined(foo[i].bar)) {\r\n     *       // Something that can be recovered from but may happen a lot\r\n     *       oneTimeWarning('foo.bar undefined', 'foo.bar is undefined. Setting to 0.');\r\n     *       foo[i].bar = 0;\r\n     *       // ...\r\n     *    }\r\n     * }\r\n     *\r\n     * @private\r\n     */\r\n    function oneTimeWarning(identifier, message) {\r\n        \r\n\r\n        if (!defined(warnings[identifier])) {\r\n            warnings[identifier] = true;\r\n            console.warn(defaultValue(message, identifier));\r\n        }\r\n    }\r\n\r\n    oneTimeWarning.geometryOutlines = 'Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.';\r\n\r\n    oneTimeWarning.geometryZIndex = 'Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored';\r\n\r\n    oneTimeWarning.geometryHeightReference = 'Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored';\r\n    oneTimeWarning.geometryExtrudedHeightReference = 'Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored';\r\n\r\n    return oneTimeWarning;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/oneTimeWarning.js\n// module id = 122\n// module chunks = 0","define([\r\n        './Check'\r\n    ], function(\r\n        Check) {\r\n    'use strict';\r\n\r\n    var blobUriRegex = /^blob:/i;\r\n\r\n    /**\r\n     * Determines if the specified uri is a blob uri.\r\n     *\r\n     * @exports isBlobUri\r\n     *\r\n     * @param {String} uri The uri to test.\r\n     * @returns {Boolean} true when the uri is a blob uri; otherwise, false.\r\n     *\r\n     * @private\r\n     */\r\n    function isBlobUri(uri) {\r\n        \r\n\r\n        return blobUriRegex.test(uri);\r\n    }\r\n\r\n    return isBlobUri;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/isBlobUri.js\n// module id = 123\n// module chunks = 0","define([\r\n        './Check'\r\n    ], function(\r\n        Check) {\r\n    'use strict';\r\n\r\n    var dataUriRegex = /^data:/i;\r\n\r\n    /**\r\n     * Determines if the specified uri is a data uri.\r\n     *\r\n     * @exports isDataUri\r\n     *\r\n     * @param {String} uri The uri to test.\r\n     * @returns {Boolean} true when the uri is a data uri; otherwise, false.\r\n     *\r\n     * @private\r\n     */\r\n    function isDataUri(uri) {\r\n        \r\n\r\n        return dataUriRegex.test(uri);\r\n    }\r\n\r\n    return isDataUri;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/isDataUri.js\n// module id = 124\n// module chunks = 0","var ClientRequest = require('./lib/request')\nvar response = require('./lib/response')\nvar extend = require('xtend')\nvar statusCodes = require('builtin-status-codes')\nvar url = require('url')\n\nvar http = exports\n\nhttp.request = function (opts, cb) {\n\tif (typeof opts === 'string')\n\t\topts = url.parse(opts)\n\telse\n\t\topts = extend(opts)\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nhttp.get = function get (opts, cb) {\n\tvar req = http.request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nhttp.ClientRequest = ClientRequest\nhttp.IncomingMessage = response.IncomingMessage\n\nhttp.Agent = function () {}\nhttp.Agent.defaultMaxSockets = 4\n\nhttp.globalAgent = new http.Agent()\n\nhttp.STATUS_CODES = statusCodes\n\nhttp.METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/index.js\n// module id = 125\n// module chunks = 0","exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\nexports.writableStream = isFunction(global.WritableStream)\n\nexports.abortController = isFunction(global.AbortController)\n\nexports.blobConstructor = false\ntry {\n\tnew Blob([new ArrayBuffer(1)])\n\texports.blobConstructor = true\n} catch (e) {}\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr\nfunction getXHR () {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest()\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t} catch(e) {\n\t\t\txhr = null\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null\n\t}\n\treturn xhr\n}\n\nfunction checkTypeSupport (type) {\n\tvar xhr = getXHR()\n\tif (!xhr) return false\n\ttry {\n\t\txhr.responseType = type\n\t\treturn xhr.responseType === type\n\t} catch (e) {}\n\treturn false\n}\n\n// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&\n\tcheckTypeSupport('moz-chunked-arraybuffer')\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\nexports.vbArray = isFunction(global.VBArray)\n\nfunction isFunction (value) {\n\treturn typeof value === 'function'\n}\n\nxhr = null // Help gc\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/lib/capability.js\n// module id = 126\n// module chunks = 0","var capability = require('./capability')\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\nvar rStates = exports.readyStates = {\n\tUNSENT: 0,\n\tOPENED: 1,\n\tHEADERS_RECEIVED: 2,\n\tLOADING: 3,\n\tDONE: 4\n}\n\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {\n\tvar self = this\n\tstream.Readable.call(self)\n\n\tself._mode = mode\n\tself.headers = {}\n\tself.rawHeaders = []\n\tself.trailers = {}\n\tself.rawTrailers = []\n\n\t// Fake the 'close' event, but only once 'end' fires\n\tself.on('end', function () {\n\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\tprocess.nextTick(function () {\n\t\t\tself.emit('close')\n\t\t})\n\t})\n\n\tif (mode === 'fetch') {\n\t\tself._fetchResponse = response\n\n\t\tself.url = response.url\n\t\tself.statusCode = response.status\n\t\tself.statusMessage = response.statusText\n\t\t\n\t\tresponse.headers.forEach(function (header, key){\n\t\t\tself.headers[key.toLowerCase()] = header\n\t\t\tself.rawHeaders.push(key, header)\n\t\t})\n\n\t\tif (capability.writableStream) {\n\t\t\tvar writable = new WritableStream({\n\t\t\t\twrite: function (chunk) {\n\t\t\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t\t\tif (self._destroyed) {\n\t\t\t\t\t\t\treject()\n\t\t\t\t\t\t} else if(self.push(new Buffer(chunk))) {\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself._resumeFetch = resolve\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\tclose: function () {\n\t\t\t\t\tglobal.clearTimeout(fetchTimer)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.push(null)\n\t\t\t\t},\n\t\t\t\tabort: function (err) {\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.emit('error', err)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tresponse.body.pipeTo(writable).catch(function (err) {\n\t\t\t\t\tglobal.clearTimeout(fetchTimer)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this\n\t\t}\n\t\t// fallback for when writableStream or pipeTo aren't available\n\t\tvar reader = response.body.getReader()\n\t\tfunction read () {\n\t\t\treader.read().then(function (result) {\n\t\t\t\tif (self._destroyed)\n\t\t\t\t\treturn\n\t\t\t\tif (result.done) {\n\t\t\t\t\tglobal.clearTimeout(fetchTimer)\n\t\t\t\t\tself.push(null)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tself.push(new Buffer(result.value))\n\t\t\t\tread()\n\t\t\t}).catch(function (err) {\n\t\t\t\tglobal.clearTimeout(fetchTimer)\n\t\t\t\tif (!self._destroyed)\n\t\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t}\n\t\tread()\n\t} else {\n\t\tself._xhr = xhr\n\t\tself._pos = 0\n\n\t\tself.url = xhr.responseURL\n\t\tself.statusCode = xhr.status\n\t\tself.statusMessage = xhr.statusText\n\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/)\n\t\theaders.forEach(function (header) {\n\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/)\n\t\t\tif (matches) {\n\t\t\t\tvar key = matches[1].toLowerCase()\n\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\tself.headers[key] = []\n\t\t\t\t\t}\n\t\t\t\t\tself.headers[key].push(matches[2])\n\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\tself.headers[key] += ', ' + matches[2]\n\t\t\t\t} else {\n\t\t\t\t\tself.headers[key] = matches[2]\n\t\t\t\t}\n\t\t\t\tself.rawHeaders.push(matches[1], matches[2])\n\t\t\t}\n\t\t})\n\n\t\tself._charset = 'x-user-defined'\n\t\tif (!capability.overrideMimeType) {\n\t\t\tvar mimeType = self.rawHeaders['mime-type']\n\t\t\tif (mimeType) {\n\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/)\n\t\t\t\tif (charsetMatch) {\n\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase()\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!self._charset)\n\t\t\t\tself._charset = 'utf-8' // best guess\n\t\t}\n\t}\n}\n\ninherits(IncomingMessage, stream.Readable)\n\nIncomingMessage.prototype._read = function () {\n\tvar self = this\n\n\tvar resolve = self._resumeFetch\n\tif (resolve) {\n\t\tself._resumeFetch = null\n\t\tresolve()\n\t}\n}\n\nIncomingMessage.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tvar xhr = self._xhr\n\n\tvar response = null\n\tswitch (self._mode) {\n\t\tcase 'text:vbarray': // For IE9\n\t\t\tif (xhr.readyState !== rStates.DONE)\n\t\t\t\tbreak\n\t\t\ttry {\n\t\t\t\t// This fails in IE8\n\t\t\t\tresponse = new global.VBArray(xhr.responseBody).toArray()\n\t\t\t} catch (e) {}\n\t\t\tif (response !== null) {\n\t\t\t\tself.push(new Buffer(response))\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// Falls through in IE8\t\n\t\tcase 'text':\n\t\t\ttry { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n\t\t\t\tresponse = xhr.responseText\n\t\t\t} catch (e) {\n\t\t\t\tself._mode = 'text:vbarray'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (response.length > self._pos) {\n\t\t\t\tvar newData = response.substr(self._pos)\n\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\tvar buffer = new Buffer(newData.length)\n\t\t\t\t\tfor (var i = 0; i < newData.length; i++)\n\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff\n\n\t\t\t\t\tself.push(buffer)\n\t\t\t\t} else {\n\t\t\t\t\tself.push(newData, self._charset)\n\t\t\t\t}\n\t\t\t\tself._pos = response.length\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'arraybuffer':\n\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response)\n\t\t\t\tbreak\n\t\t\tresponse = xhr.response\n\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'moz-chunked-arraybuffer': // take whole\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING || !response)\n\t\t\t\tbreak\n\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'ms-stream':\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING)\n\t\t\t\tbreak\n\t\t\tvar reader = new global.MSStreamReader()\n\t\t\treader.onprogress = function () {\n\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\tself.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))\n\t\t\t\t\tself._pos = reader.result.byteLength\n\t\t\t\t}\n\t\t\t}\n\t\t\treader.onload = function () {\n\t\t\t\tself.push(null)\n\t\t\t}\n\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\treader.readAsArrayBuffer(response)\n\t\t\tbreak\n\t}\n\n\t// The ms-stream case handles end separately in reader.onload()\n\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\tself.push(null)\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/lib/response.js\n// module id = 127\n// module chunks = 0","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/readable-browser.js\n// module id = 128\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/lib/_stream_readable.js\n// module id = 129\n// module chunks = 0","module.exports = require('events').EventEmitter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/stream-browser.js\n// module id = 130\n// module chunks = 0","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/destroy.js\n// module id = 131\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/lib/_stream_writable.js\n// module id = 132\n// module chunks = 0","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/timers-browserify/main.js\n// module id = 133\n// module chunks = 0","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/util-deprecate/browser.js\n// module id = 134\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/lib/_stream_transform.js\n// module id = 135\n// module chunks = 0","'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events');\n\n/*<replacement>*/\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = undefined;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/lib/_stream_readable.js\n// module id = 136\n// module chunks = 0","// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/lib/_stream_passthrough.js\n// module id = 137\n// module chunks = 0","'use strict';\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/assert/assert.js\n// module id = 138\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/util/util.js\n// module id = 139\n// module chunks = 0","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/adler32.js\n// module id = 140\n// module chunks = 0","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/crc32.js\n// module id = 141\n// module chunks = 0","/*** IMPORTS FROM imports-loader ***/\nvar require = false;\n\ndefine([\r\n        './defined',\r\n        './DeveloperError',\r\n        './getAbsoluteUri',\r\n        './Resource',\r\n        'require'\r\n    ], function(\r\n        defined,\r\n        DeveloperError,\r\n        getAbsoluteUri,\r\n        Resource,\r\n        require) {\r\n    'use strict';\r\n    /*global CESIUM_BASE_URL*/\r\n\r\n    var cesiumScriptRegex = /((?:.*\\/)|^)cesium[\\w-]*\\.js(?:\\W|$)/i;\r\n    function getBaseUrlFromCesiumScript() {\r\n        var scripts = document.getElementsByTagName('script');\r\n        for ( var i = 0, len = scripts.length; i < len; ++i) {\r\n            var src = scripts[i].getAttribute('src');\r\n            var result = cesiumScriptRegex.exec(src);\r\n            if (result !== null) {\r\n                return result[1];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    var a;\r\n    function tryMakeAbsolute(url) {\r\n        if (typeof document === 'undefined') {\r\n            //Node.js and Web Workers. In both cases, the URL will already be absolute.\r\n            return url;\r\n        }\r\n\r\n        if (!defined(a)) {\r\n            a = document.createElement('a');\r\n        }\r\n        a.href = url;\r\n\r\n        // IE only absolutizes href on get, not set\r\n        a.href = a.href; // eslint-disable-line no-self-assign\r\n        return a.href;\r\n    }\r\n\r\n    var baseResource;\r\n    function getCesiumBaseUrl() {\r\n        if (defined(baseResource)) {\r\n            return baseResource;\r\n        }\r\n\r\n        var baseUrlString;\r\n        if (typeof CESIUM_BASE_URL !== 'undefined') {\r\n            baseUrlString = CESIUM_BASE_URL;\r\n        } else if (defined(define.amd) && !define.amd.toUrlUndefined && defined(require.toUrl)) {\r\n            baseUrlString = getAbsoluteUri('..', buildModuleUrl('Core/buildModuleUrl.js'));\r\n        } else {\r\n            baseUrlString = getBaseUrlFromCesiumScript();\r\n        }\r\n\r\n        \r\n\r\n        baseResource = new Resource({\r\n            url: tryMakeAbsolute(baseUrlString)\r\n        });\r\n        baseResource.appendForwardSlash();\r\n\r\n        return baseResource;\r\n    }\r\n\r\n    function buildModuleUrlFromRequireToUrl(moduleID) {\r\n        //moduleID will be non-relative, so require it relative to this module, in Core.\r\n        return tryMakeAbsolute(require.toUrl('../' + moduleID));\r\n    }\r\n\r\n    function buildModuleUrlFromBaseUrl(moduleID) {\r\n        var resource = getCesiumBaseUrl().getDerivedResource({\r\n            url: moduleID\r\n        });\r\n        return resource.url;\r\n    }\r\n\r\n    var implementation;\r\n\r\n    /**\r\n     * Given a non-relative moduleID, returns an absolute URL to the file represented by that module ID,\r\n     * using, in order of preference, require.toUrl, the value of a global CESIUM_BASE_URL, or\r\n     * the base URL of the Cesium.js script.\r\n     *\r\n     * @private\r\n     */\r\n    function buildModuleUrl(moduleID) {\r\n        if (!defined(implementation)) {\r\n            //select implementation\r\n            if (defined(define.amd) && !define.amd.toUrlUndefined && defined(require.toUrl)) {\r\n                implementation = buildModuleUrlFromRequireToUrl;\r\n            } else {\r\n                implementation = buildModuleUrlFromBaseUrl;\r\n            }\r\n        }\r\n\r\n        var url = implementation(moduleID);\r\n        return url;\r\n    }\r\n\r\n    // exposed for testing\r\n    buildModuleUrl._cesiumScriptRegex = cesiumScriptRegex;\r\n    buildModuleUrl._buildModuleUrlFromBaseUrl = buildModuleUrlFromBaseUrl;\r\n    buildModuleUrl._clearBaseResource = function() {\r\n        baseResource = undefined;\r\n    };\r\n\r\n    /**\r\n     * Sets the base URL for resolving modules.\r\n     * @param {String} value The new base URL.\r\n     */\r\n    buildModuleUrl.setBaseUrl = function(value) {\r\n        baseResource = Resource.DEFAULT.getDerivedResource({\r\n            url: value\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Gets the base URL for resolving modules.\r\n     */\r\n    buildModuleUrl.getCesiumBaseUrl = getCesiumBaseUrl;\r\n\r\n    return buildModuleUrl;\r\n});\r\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/buildModuleUrl.js\n// module id = 142\n// module chunks = 0","define(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * An IAU 2006 XYS value sampled at a particular time.\r\n     *\r\n     * @alias Iau2006XysSample\r\n     * @constructor\r\n     *\r\n     * @param {Number} x The X value.\r\n     * @param {Number} y The Y value.\r\n     * @param {Number} s The S value.\r\n     *\r\n     * @private\r\n     */\r\n    function Iau2006XysSample(x, y, s) {\r\n        /**\r\n         * The X value.\r\n         * @type {Number}\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The Y value.\r\n         * @type {Number}\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The S value.\r\n         * @type {Number}\r\n         */\r\n        this.s = s;\r\n    }\r\n\r\n    return Iau2006XysSample;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Iau2006XysSample.js\n// module id = 143\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defined'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A fixed-point encoding of a {@link Cartesian3} with 64-bit floating-point components, as two {@link Cartesian3}\r\n     * values that, when converted to 32-bit floating-point and added, approximate the original input.\r\n     * <p>\r\n     * This is used to encode positions in vertex buffers for rendering without jittering artifacts\r\n     * as described in {@link http://blogs.agi.com/insight3d/index.php/2008/09/03/precisions-precisions/|Precisions, Precisions}.\r\n     * </p>\r\n     *\r\n     * @alias EncodedCartesian3\r\n     * @constructor\r\n     *\r\n     * @private\r\n     */\r\n    function EncodedCartesian3() {\r\n        /**\r\n         * The high bits for each component.  Bits 0 to 22 store the whole value.  Bits 23 to 31 are not used.\r\n         *\r\n         * @type {Cartesian3}\r\n         * @default {@link Cartesian3.ZERO}\r\n         */\r\n        this.high = Cartesian3.clone(Cartesian3.ZERO);\r\n\r\n        /**\r\n         * The low bits for each component.  Bits 7 to 22 store the whole value, and bits 0 to 6 store the fraction.  Bits 23 to 31 are not used.\r\n         *\r\n         * @type {Cartesian3}\r\n         * @default {@link Cartesian3.ZERO}\r\n         */\r\n        this.low = Cartesian3.clone(Cartesian3.ZERO);\r\n    }\r\n\r\n    /**\r\n     * Encodes a 64-bit floating-point value as two floating-point values that, when converted to\r\n     * 32-bit floating-point and added, approximate the original input.  The returned object\r\n     * has <code>high</code> and <code>low</code> properties for the high and low bits, respectively.\r\n     * <p>\r\n     * The fixed-point encoding follows {@link http://blogs.agi.com/insight3d/index.php/2008/09/03/precisions-precisions/|Precisions, Precisions}.\r\n     * </p>\r\n     *\r\n     * @param {Number} value The floating-point value to encode.\r\n     * @param {Object} [result] The object onto which to store the result.\r\n     * @returns {Object} The modified result parameter or a new instance if one was not provided.\r\n     *\r\n     * @example\r\n     * var value = 1234567.1234567;\r\n     * var splitValue = Cesium.EncodedCartesian3.encode(value);\r\n     */\r\n    EncodedCartesian3.encode = function(value, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = {\r\n                high : 0.0,\r\n                low : 0.0\r\n            };\r\n        }\r\n\r\n        var doubleHigh;\r\n        if (value >= 0.0) {\r\n            doubleHigh = Math.floor(value / 65536.0) * 65536.0;\r\n            result.high = doubleHigh;\r\n            result.low = value - doubleHigh;\r\n        } else {\r\n            doubleHigh = Math.floor(-value / 65536.0) * 65536.0;\r\n            result.high = -doubleHigh;\r\n            result.low = value + doubleHigh;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    var scratchEncode = {\r\n        high : 0.0,\r\n        low : 0.0\r\n    };\r\n\r\n    /**\r\n     * Encodes a {@link Cartesian3} with 64-bit floating-point components as two {@link Cartesian3}\r\n     * values that, when converted to 32-bit floating-point and added, approximate the original input.\r\n     * <p>\r\n     * The fixed-point encoding follows {@link http://blogs.agi.com/insight3d/index.php/2008/09/03/precisions-precisions/|Precisions, Precisions}.\r\n     * </p>\r\n     *\r\n     * @param {Cartesian3} cartesian The cartesian to encode.\r\n     * @param {EncodedCartesian3} [result] The object onto which to store the result.\r\n     * @returns {EncodedCartesian3} The modified result parameter or a new EncodedCartesian3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * var cart = new Cesium.Cartesian3(-10000000.0, 0.0, 10000000.0);\r\n     * var encoded = Cesium.EncodedCartesian3.fromCartesian(cart);\r\n     */\r\n    EncodedCartesian3.fromCartesian = function(cartesian, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new EncodedCartesian3();\r\n        }\r\n\r\n        var high = result.high;\r\n        var low = result.low;\r\n\r\n        EncodedCartesian3.encode(cartesian.x, scratchEncode);\r\n        high.x = scratchEncode.high;\r\n        low.x = scratchEncode.low;\r\n\r\n        EncodedCartesian3.encode(cartesian.y, scratchEncode);\r\n        high.y = scratchEncode.high;\r\n        low.y = scratchEncode.low;\r\n\r\n        EncodedCartesian3.encode(cartesian.z, scratchEncode);\r\n        high.z = scratchEncode.high;\r\n        low.z = scratchEncode.low;\r\n\r\n        return result;\r\n    };\r\n\r\n    var encodedP = new EncodedCartesian3();\r\n\r\n    /**\r\n     * Encodes the provided <code>cartesian</code>, and writes it to an array with <code>high</code>\r\n     * components followed by <code>low</code> components, i.e. <code>[high.x, high.y, high.z, low.x, low.y, low.z]</code>.\r\n     * <p>\r\n     * This is used to create interleaved high-precision position vertex attributes.\r\n     * </p>\r\n     *\r\n     * @param {Cartesian3} cartesian The cartesian to encode.\r\n     * @param {Number[]} cartesianArray The array to write to.\r\n     * @param {Number} index The index into the array to start writing.  Six elements will be written.\r\n     *\r\n     * @exception {DeveloperError} index must be a number greater than or equal to 0.\r\n     *\r\n     * @example\r\n     * var positions = [\r\n     *    new Cesium.Cartesian3(),\r\n     *    // ...\r\n     * ];\r\n     * var encodedPositions = new Float32Array(2 * 3 * positions.length);\r\n     * var j = 0;\r\n     * for (var i = 0; i < positions.length; ++i) {\r\n     *   Cesium.EncodedCartesian3.writeElement(positions[i], encodedPositions, j);\r\n     *   j += 6;\r\n     * }\r\n     */\r\n    EncodedCartesian3.writeElements = function(cartesian, cartesianArray, index) {\r\n        \r\n\r\n        EncodedCartesian3.fromCartesian(cartesian, encodedP);\r\n        var high = encodedP.high;\r\n        var low = encodedP.low;\r\n\r\n        cartesianArray[index] = high.x;\r\n        cartesianArray[index + 1] = high.y;\r\n        cartesianArray[index + 2] = high.z;\r\n        cartesianArray[index + 3] = low.x;\r\n        cartesianArray[index + 4] = low.y;\r\n        cartesianArray[index + 5] = low.z;\r\n    };\r\n\r\n    return EncodedCartesian3;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EncodedCartesian3.js\n// module id = 144\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Represents a ray that extends infinitely from the provided origin in the provided direction.\r\n     * @alias Ray\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} [origin=Cartesian3.ZERO] The origin of the ray.\r\n     * @param {Cartesian3} [direction=Cartesian3.ZERO] The direction of the ray.\r\n     */\r\n    function Ray(origin, direction) {\r\n        direction = Cartesian3.clone(defaultValue(direction, Cartesian3.ZERO));\r\n        if (!Cartesian3.equals(direction, Cartesian3.ZERO)) {\r\n            Cartesian3.normalize(direction, direction);\r\n        }\r\n\r\n        /**\r\n         * The origin of the ray.\r\n         * @type {Cartesian3}\r\n         * @default {@link Cartesian3.ZERO}\r\n         */\r\n        this.origin = Cartesian3.clone(defaultValue(origin, Cartesian3.ZERO));\r\n\r\n        /**\r\n         * The direction of the ray.\r\n         * @type {Cartesian3}\r\n         */\r\n        this.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Duplicates a Ray instance.\r\n     *\r\n     * @param {Ray} ray The ray to duplicate.\r\n     * @param {Ray} [result] The object onto which to store the result.\r\n     * @returns {Ray} The modified result parameter or a new Ray instance if one was not provided. (Returns undefined if ray is undefined)\r\n     */\r\n    Ray.clone = function(ray, result) {\r\n        if (!defined(ray)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Ray(ray.origin, ray.direction);\r\n        }\r\n        result.origin = Cartesian3.clone(ray.origin);\r\n        result.direction = Cartesian3.clone(ray.direction);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the point along the ray given by r(t) = o + t*d,\r\n     * where o is the origin of the ray and d is the direction.\r\n     *\r\n     * @param {Ray} ray The ray.\r\n     * @param {Number} t A scalar value.\r\n     * @param {Cartesian3} [result] The object in which the result will be stored.\r\n     * @returns {Cartesian3} The modified result parameter, or a new instance if none was provided.\r\n     *\r\n     * @example\r\n     * //Get the first intersection point of a ray and an ellipsoid.\r\n     * var intersection = Cesium.IntersectionTests.rayEllipsoid(ray, ellipsoid);\r\n     * var point = Cesium.Ray.getPoint(ray, intersection.start);\r\n     */\r\n    Ray.getPoint = function(ray, t, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        result = Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n        return Cartesian3.add(ray.origin, result, result);\r\n    };\r\n\r\n    return Ray;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Ray.js\n// module id = 145\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './PrimitiveType',\r\n        './VertexFormat'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        PrimitiveType,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var diffScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Describes a cube centered at the origin.\r\n     *\r\n     * @alias BoxGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\r\n     * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @see BoxGeometry.fromDimensions\r\n     * @see BoxGeometry.createGeometry\r\n     * @see Packable\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Box.html|Cesium Sandcastle Box Demo}\r\n     *\r\n     * @example\r\n     * var box = new Cesium.BoxGeometry({\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n     *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\r\n     *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\r\n     * });\r\n     * var geometry = Cesium.BoxGeometry.createGeometry(box);\r\n     */\r\n    function BoxGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var min = options.minimum;\r\n        var max = options.maximum;\r\n\r\n        \r\n\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n        this._minimum = Cartesian3.clone(min);\r\n        this._maximum = Cartesian3.clone(max);\r\n        this._vertexFormat = vertexFormat;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createBoxGeometry';\r\n    }\r\n\r\n    /**\r\n     * Creates a cube centered at the origin given its dimensions.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @returns {BoxGeometry}\r\n     *\r\n     * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\r\n     *\r\n     *\r\n     * @example\r\n     * var box = Cesium.BoxGeometry.fromDimensions({\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n     *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\r\n     * });\r\n     * var geometry = Cesium.BoxGeometry.createGeometry(box);\r\n     *\r\n     * @see BoxGeometry.createGeometry\r\n     */\r\n    BoxGeometry.fromDimensions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var dimensions = options.dimensions;\r\n\r\n        \r\n\r\n        var corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\r\n\r\n        return new BoxGeometry({\r\n            minimum : Cartesian3.negate(corner, new Cartesian3()),\r\n            maximum : corner,\r\n            vertexFormat : options.vertexFormat,\r\n            offsetAttribute: options.offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates a cube from the dimensions of an AxisAlignedBoundingBox.\r\n     *\r\n     * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\r\n     * @returns {BoxGeometry}\r\n     *\r\n     *\r\n     *\r\n     * @example\r\n     * var aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\r\n     *      -72.0, 40.0,\r\n     *      -70.0, 35.0,\r\n     *      -75.0, 30.0,\r\n     *      -70.0, 30.0,\r\n     *      -68.0, 40.0\r\n     * ]));\r\n     * var box = Cesium.BoxGeometry.fromAxisAlignedBoundingBox(aabb);\r\n     *\r\n     * @see BoxGeometry.createGeometry\r\n     */\r\n    BoxGeometry.fromAxisAlignedBoundingBox = function (boundingBox) {\r\n        \r\n\r\n        return new BoxGeometry({\r\n            minimum : boundingBox.minimum,\r\n            maximum : boundingBox.maximum\r\n        });\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    BoxGeometry.packedLength = 2 * Cartesian3.packedLength + VertexFormat.packedLength + 1;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {BoxGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    BoxGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._minimum, array, startingIndex);\r\n        Cartesian3.pack(value._maximum, array, startingIndex + Cartesian3.packedLength);\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex + 2 * Cartesian3.packedLength);\r\n        array[startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchMin = new Cartesian3();\r\n    var scratchMax = new Cartesian3();\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        minimum: scratchMin,\r\n        maximum: scratchMax,\r\n        vertexFormat: scratchVertexFormat,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {BoxGeometry} [result] The object into which to store the result.\r\n     * @returns {BoxGeometry} The modified result parameter or a new BoxGeometry instance if one was not provided.\r\n     */\r\n    BoxGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var min = Cartesian3.unpack(array, startingIndex, scratchMin);\r\n        var max = Cartesian3.unpack(array, startingIndex + Cartesian3.packedLength, scratchMax);\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex + 2 * Cartesian3.packedLength, scratchVertexFormat);\r\n        var offsetAttribute = array[startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new BoxGeometry(scratchOptions);\r\n        }\r\n\r\n        result._minimum = Cartesian3.clone(min, result._minimum);\r\n        result._maximum = Cartesian3.clone(max, result._maximum);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a box, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {BoxGeometry} boxGeometry A description of the box.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    BoxGeometry.createGeometry = function(boxGeometry) {\r\n        var min = boxGeometry._minimum;\r\n        var max = boxGeometry._maximum;\r\n        var vertexFormat = boxGeometry._vertexFormat;\r\n\r\n        if (Cartesian3.equals(min, max)) {\r\n            return;\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        var indices;\r\n        var positions;\r\n\r\n        if (vertexFormat.position &&\r\n                (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent)) {\r\n            if (vertexFormat.position) {\r\n                // 8 corner points.  Duplicated 3 times each for each incident edge/face.\r\n                positions = new Float64Array(6 * 4 * 3);\r\n\r\n                // +z face\r\n                positions[0]  = min.x;\r\n                positions[1]  = min.y;\r\n                positions[2]  = max.z;\r\n                positions[3]  = max.x;\r\n                positions[4]  = min.y;\r\n                positions[5]  = max.z;\r\n                positions[6]  = max.x;\r\n                positions[7]  = max.y;\r\n                positions[8]  = max.z;\r\n                positions[9]  = min.x;\r\n                positions[10] = max.y;\r\n                positions[11] = max.z;\r\n\r\n                // -z face\r\n                positions[12] = min.x;\r\n                positions[13] = min.y;\r\n                positions[14] = min.z;\r\n                positions[15] = max.x;\r\n                positions[16] = min.y;\r\n                positions[17] = min.z;\r\n                positions[18] = max.x;\r\n                positions[19] = max.y;\r\n                positions[20] = min.z;\r\n                positions[21] = min.x;\r\n                positions[22] = max.y;\r\n                positions[23] = min.z;\r\n\r\n                // +x face\r\n                positions[24] = max.x;\r\n                positions[25] = min.y;\r\n                positions[26] = min.z;\r\n                positions[27] = max.x;\r\n                positions[28] = max.y;\r\n                positions[29] = min.z;\r\n                positions[30] = max.x;\r\n                positions[31] = max.y;\r\n                positions[32] = max.z;\r\n                positions[33] = max.x;\r\n                positions[34] = min.y;\r\n                positions[35] = max.z;\r\n\r\n                // -x face\r\n                positions[36] = min.x;\r\n                positions[37] = min.y;\r\n                positions[38] = min.z;\r\n                positions[39] = min.x;\r\n                positions[40] = max.y;\r\n                positions[41] = min.z;\r\n                positions[42] = min.x;\r\n                positions[43] = max.y;\r\n                positions[44] = max.z;\r\n                positions[45] = min.x;\r\n                positions[46] = min.y;\r\n                positions[47] = max.z;\r\n\r\n                // +y face\r\n                positions[48] = min.x;\r\n                positions[49] = max.y;\r\n                positions[50] = min.z;\r\n                positions[51] = max.x;\r\n                positions[52] = max.y;\r\n                positions[53] = min.z;\r\n                positions[54] = max.x;\r\n                positions[55] = max.y;\r\n                positions[56] = max.z;\r\n                positions[57] = min.x;\r\n                positions[58] = max.y;\r\n                positions[59] = max.z;\r\n\r\n                // -y face\r\n                positions[60] = min.x;\r\n                positions[61] = min.y;\r\n                positions[62] = min.z;\r\n                positions[63] = max.x;\r\n                positions[64] = min.y;\r\n                positions[65] = min.z;\r\n                positions[66] = max.x;\r\n                positions[67] = min.y;\r\n                positions[68] = max.z;\r\n                positions[69] = min.x;\r\n                positions[70] = min.y;\r\n                positions[71] = max.z;\r\n\r\n                attributes.position = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute : 3,\r\n                    values : positions\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                var normals = new Float32Array(6 * 4 * 3);\r\n\r\n                // +z face\r\n                normals[0]  = 0.0;\r\n                normals[1]  = 0.0;\r\n                normals[2]  = 1.0;\r\n                normals[3]  = 0.0;\r\n                normals[4]  = 0.0;\r\n                normals[5]  = 1.0;\r\n                normals[6]  = 0.0;\r\n                normals[7]  = 0.0;\r\n                normals[8]  = 1.0;\r\n                normals[9]  = 0.0;\r\n                normals[10] = 0.0;\r\n                normals[11] = 1.0;\r\n\r\n                // -z face\r\n                normals[12] = 0.0;\r\n                normals[13] = 0.0;\r\n                normals[14] = -1.0;\r\n                normals[15] = 0.0;\r\n                normals[16] = 0.0;\r\n                normals[17] = -1.0;\r\n                normals[18] = 0.0;\r\n                normals[19] = 0.0;\r\n                normals[20] = -1.0;\r\n                normals[21] = 0.0;\r\n                normals[22] = 0.0;\r\n                normals[23] = -1.0;\r\n\r\n                // +x face\r\n                normals[24] = 1.0;\r\n                normals[25] = 0.0;\r\n                normals[26] = 0.0;\r\n                normals[27] = 1.0;\r\n                normals[28] = 0.0;\r\n                normals[29] = 0.0;\r\n                normals[30] = 1.0;\r\n                normals[31] = 0.0;\r\n                normals[32] = 0.0;\r\n                normals[33] = 1.0;\r\n                normals[34] = 0.0;\r\n                normals[35] = 0.0;\r\n\r\n                // -x face\r\n                normals[36] = -1.0;\r\n                normals[37] = 0.0;\r\n                normals[38] = 0.0;\r\n                normals[39] = -1.0;\r\n                normals[40] = 0.0;\r\n                normals[41] = 0.0;\r\n                normals[42] = -1.0;\r\n                normals[43] = 0.0;\r\n                normals[44] = 0.0;\r\n                normals[45] = -1.0;\r\n                normals[46] = 0.0;\r\n                normals[47] = 0.0;\r\n\r\n                // +y face\r\n                normals[48] = 0.0;\r\n                normals[49] = 1.0;\r\n                normals[50] = 0.0;\r\n                normals[51] = 0.0;\r\n                normals[52] = 1.0;\r\n                normals[53] = 0.0;\r\n                normals[54] = 0.0;\r\n                normals[55] = 1.0;\r\n                normals[56] = 0.0;\r\n                normals[57] = 0.0;\r\n                normals[58] = 1.0;\r\n                normals[59] = 0.0;\r\n\r\n                // -y face\r\n                normals[60] = 0.0;\r\n                normals[61] = -1.0;\r\n                normals[62] = 0.0;\r\n                normals[63] = 0.0;\r\n                normals[64] = -1.0;\r\n                normals[65] = 0.0;\r\n                normals[66] = 0.0;\r\n                normals[67] = -1.0;\r\n                normals[68] = 0.0;\r\n                normals[69] = 0.0;\r\n                normals[70] = -1.0;\r\n                normals[71] = 0.0;\r\n\r\n                attributes.normal = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : normals\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.st) {\r\n                var texCoords = new Float32Array(6 * 4 * 2);\r\n\r\n                // +z face\r\n                texCoords[0]  = 0.0;\r\n                texCoords[1]  = 0.0;\r\n                texCoords[2]  = 1.0;\r\n                texCoords[3]  = 0.0;\r\n                texCoords[4]  = 1.0;\r\n                texCoords[5]  = 1.0;\r\n                texCoords[6]  = 0.0;\r\n                texCoords[7]  = 1.0;\r\n\r\n                // -z face\r\n                texCoords[8]  = 1.0;\r\n                texCoords[9]  = 0.0;\r\n                texCoords[10] = 0.0;\r\n                texCoords[11] = 0.0;\r\n                texCoords[12] = 0.0;\r\n                texCoords[13] = 1.0;\r\n                texCoords[14] = 1.0;\r\n                texCoords[15] = 1.0;\r\n\r\n                //+x face\r\n                texCoords[16] = 0.0;\r\n                texCoords[17] = 0.0;\r\n                texCoords[18] = 1.0;\r\n                texCoords[19] = 0.0;\r\n                texCoords[20] = 1.0;\r\n                texCoords[21] = 1.0;\r\n                texCoords[22] = 0.0;\r\n                texCoords[23] = 1.0;\r\n\r\n                // -x face\r\n                texCoords[24] = 1.0;\r\n                texCoords[25] = 0.0;\r\n                texCoords[26] = 0.0;\r\n                texCoords[27] = 0.0;\r\n                texCoords[28] = 0.0;\r\n                texCoords[29] = 1.0;\r\n                texCoords[30] = 1.0;\r\n                texCoords[31] = 1.0;\r\n\r\n                // +y face\r\n                texCoords[32] = 1.0;\r\n                texCoords[33] = 0.0;\r\n                texCoords[34] = 0.0;\r\n                texCoords[35] = 0.0;\r\n                texCoords[36] = 0.0;\r\n                texCoords[37] = 1.0;\r\n                texCoords[38] = 1.0;\r\n                texCoords[39] = 1.0;\r\n\r\n                // -y face\r\n                texCoords[40] = 0.0;\r\n                texCoords[41] = 0.0;\r\n                texCoords[42] = 1.0;\r\n                texCoords[43] = 0.0;\r\n                texCoords[44] = 1.0;\r\n                texCoords[45] = 1.0;\r\n                texCoords[46] = 0.0;\r\n                texCoords[47] = 1.0;\r\n\r\n                attributes.st = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 2,\r\n                    values : texCoords\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                var tangents = new Float32Array(6 * 4 * 3);\r\n\r\n                // +z face\r\n                tangents[0]  = 1.0;\r\n                tangents[1]  = 0.0;\r\n                tangents[2]  = 0.0;\r\n                tangents[3]  = 1.0;\r\n                tangents[4]  = 0.0;\r\n                tangents[5]  = 0.0;\r\n                tangents[6]  = 1.0;\r\n                tangents[7]  = 0.0;\r\n                tangents[8]  = 0.0;\r\n                tangents[9]  = 1.0;\r\n                tangents[10] = 0.0;\r\n                tangents[11] = 0.0;\r\n\r\n                // -z face\r\n                tangents[12] = -1.0;\r\n                tangents[13] = 0.0;\r\n                tangents[14] = 0.0;\r\n                tangents[15] = -1.0;\r\n                tangents[16] = 0.0;\r\n                tangents[17] = 0.0;\r\n                tangents[18] = -1.0;\r\n                tangents[19] = 0.0;\r\n                tangents[20] = 0.0;\r\n                tangents[21] = -1.0;\r\n                tangents[22] = 0.0;\r\n                tangents[23] = 0.0;\r\n\r\n                // +x face\r\n                tangents[24] = 0.0;\r\n                tangents[25] = 1.0;\r\n                tangents[26] = 0.0;\r\n                tangents[27] = 0.0;\r\n                tangents[28] = 1.0;\r\n                tangents[29] = 0.0;\r\n                tangents[30] = 0.0;\r\n                tangents[31] = 1.0;\r\n                tangents[32] = 0.0;\r\n                tangents[33] = 0.0;\r\n                tangents[34] = 1.0;\r\n                tangents[35] = 0.0;\r\n\r\n                // -x face\r\n                tangents[36] = 0.0;\r\n                tangents[37] = -1.0;\r\n                tangents[38] = 0.0;\r\n                tangents[39] = 0.0;\r\n                tangents[40] = -1.0;\r\n                tangents[41] = 0.0;\r\n                tangents[42] = 0.0;\r\n                tangents[43] = -1.0;\r\n                tangents[44] = 0.0;\r\n                tangents[45] = 0.0;\r\n                tangents[46] = -1.0;\r\n                tangents[47] = 0.0;\r\n\r\n                // +y face\r\n                tangents[48] = -1.0;\r\n                tangents[49] = 0.0;\r\n                tangents[50] = 0.0;\r\n                tangents[51] = -1.0;\r\n                tangents[52] = 0.0;\r\n                tangents[53] = 0.0;\r\n                tangents[54] = -1.0;\r\n                tangents[55] = 0.0;\r\n                tangents[56] = 0.0;\r\n                tangents[57] = -1.0;\r\n                tangents[58] = 0.0;\r\n                tangents[59] = 0.0;\r\n\r\n                // -y face\r\n                tangents[60] = 1.0;\r\n                tangents[61] = 0.0;\r\n                tangents[62] = 0.0;\r\n                tangents[63] = 1.0;\r\n                tangents[64] = 0.0;\r\n                tangents[65] = 0.0;\r\n                tangents[66] = 1.0;\r\n                tangents[67] = 0.0;\r\n                tangents[68] = 0.0;\r\n                tangents[69] = 1.0;\r\n                tangents[70] = 0.0;\r\n                tangents[71] = 0.0;\r\n\r\n                attributes.tangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : tangents\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                var bitangents = new Float32Array(6 * 4 * 3);\r\n\r\n                // +z face\r\n                bitangents[0] = 0.0;\r\n                bitangents[1] = 1.0;\r\n                bitangents[2] = 0.0;\r\n                bitangents[3] = 0.0;\r\n                bitangents[4] = 1.0;\r\n                bitangents[5] = 0.0;\r\n                bitangents[6] = 0.0;\r\n                bitangents[7] = 1.0;\r\n                bitangents[8] = 0.0;\r\n                bitangents[9] = 0.0;\r\n                bitangents[10] = 1.0;\r\n                bitangents[11] = 0.0;\r\n\r\n                // -z face\r\n                bitangents[12] = 0.0;\r\n                bitangents[13] = 1.0;\r\n                bitangents[14] = 0.0;\r\n                bitangents[15] = 0.0;\r\n                bitangents[16] = 1.0;\r\n                bitangents[17] = 0.0;\r\n                bitangents[18] = 0.0;\r\n                bitangents[19] = 1.0;\r\n                bitangents[20] = 0.0;\r\n                bitangents[21] = 0.0;\r\n                bitangents[22] = 1.0;\r\n                bitangents[23] = 0.0;\r\n\r\n                // +x face\r\n                bitangents[24] = 0.0;\r\n                bitangents[25] = 0.0;\r\n                bitangents[26] = 1.0;\r\n                bitangents[27] = 0.0;\r\n                bitangents[28] = 0.0;\r\n                bitangents[29] = 1.0;\r\n                bitangents[30] = 0.0;\r\n                bitangents[31] = 0.0;\r\n                bitangents[32] = 1.0;\r\n                bitangents[33] = 0.0;\r\n                bitangents[34] = 0.0;\r\n                bitangents[35] = 1.0;\r\n\r\n                // -x face\r\n                bitangents[36] = 0.0;\r\n                bitangents[37] = 0.0;\r\n                bitangents[38] = 1.0;\r\n                bitangents[39] = 0.0;\r\n                bitangents[40] = 0.0;\r\n                bitangents[41] = 1.0;\r\n                bitangents[42] = 0.0;\r\n                bitangents[43] = 0.0;\r\n                bitangents[44] = 1.0;\r\n                bitangents[45] = 0.0;\r\n                bitangents[46] = 0.0;\r\n                bitangents[47] = 1.0;\r\n\r\n                // +y face\r\n                bitangents[48] = 0.0;\r\n                bitangents[49] = 0.0;\r\n                bitangents[50] = 1.0;\r\n                bitangents[51] = 0.0;\r\n                bitangents[52] = 0.0;\r\n                bitangents[53] = 1.0;\r\n                bitangents[54] = 0.0;\r\n                bitangents[55] = 0.0;\r\n                bitangents[56] = 1.0;\r\n                bitangents[57] = 0.0;\r\n                bitangents[58] = 0.0;\r\n                bitangents[59] = 1.0;\r\n\r\n                // -y face\r\n                bitangents[60] = 0.0;\r\n                bitangents[61] = 0.0;\r\n                bitangents[62] = 1.0;\r\n                bitangents[63] = 0.0;\r\n                bitangents[64] = 0.0;\r\n                bitangents[65] = 1.0;\r\n                bitangents[66] = 0.0;\r\n                bitangents[67] = 0.0;\r\n                bitangents[68] = 1.0;\r\n                bitangents[69] = 0.0;\r\n                bitangents[70] = 0.0;\r\n                bitangents[71] = 1.0;\r\n\r\n                attributes.bitangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : bitangents\r\n                });\r\n            }\r\n\r\n            // 12 triangles:  6 faces, 2 triangles each.\r\n            indices = new Uint16Array(6 * 2 * 3);\r\n\r\n            // +z face\r\n            indices[0] = 0;\r\n            indices[1] = 1;\r\n            indices[2] = 2;\r\n            indices[3] = 0;\r\n            indices[4] = 2;\r\n            indices[5] = 3;\r\n\r\n            // -z face\r\n            indices[6] = 4 + 2;\r\n            indices[7] = 4 + 1;\r\n            indices[8] = 4 + 0;\r\n            indices[9] = 4 + 3;\r\n            indices[10] = 4 + 2;\r\n            indices[11] = 4 + 0;\r\n\r\n            // +x face\r\n            indices[12] = 8 + 0;\r\n            indices[13] = 8 + 1;\r\n            indices[14] = 8 + 2;\r\n            indices[15] = 8 + 0;\r\n            indices[16] = 8 + 2;\r\n            indices[17] = 8 + 3;\r\n\r\n            // -x face\r\n            indices[18] = 12 + 2;\r\n            indices[19] = 12 + 1;\r\n            indices[20] = 12 + 0;\r\n            indices[21] = 12 + 3;\r\n            indices[22] = 12 + 2;\r\n            indices[23] = 12 + 0;\r\n\r\n            // +y face\r\n            indices[24] = 16 + 2;\r\n            indices[25] = 16 + 1;\r\n            indices[26] = 16 + 0;\r\n            indices[27] = 16 + 3;\r\n            indices[28] = 16 + 2;\r\n            indices[29] = 16 + 0;\r\n\r\n            // -y face\r\n            indices[30] = 20 + 0;\r\n            indices[31] = 20 + 1;\r\n            indices[32] = 20 + 2;\r\n            indices[33] = 20 + 0;\r\n            indices[34] = 20 + 2;\r\n            indices[35] = 20 + 3;\r\n        } else {\r\n            // Positions only - no need to duplicate corner points\r\n            positions = new Float64Array(8 * 3);\r\n\r\n            positions[0] = min.x;\r\n            positions[1] = min.y;\r\n            positions[2] = min.z;\r\n            positions[3] = max.x;\r\n            positions[4] = min.y;\r\n            positions[5] = min.z;\r\n            positions[6] = max.x;\r\n            positions[7] = max.y;\r\n            positions[8] = min.z;\r\n            positions[9] = min.x;\r\n            positions[10] = max.y;\r\n            positions[11] = min.z;\r\n            positions[12] = min.x;\r\n            positions[13] = min.y;\r\n            positions[14] = max.z;\r\n            positions[15] = max.x;\r\n            positions[16] = min.y;\r\n            positions[17] = max.z;\r\n            positions[18] = max.x;\r\n            positions[19] = max.y;\r\n            positions[20] = max.z;\r\n            positions[21] = min.x;\r\n            positions[22] = max.y;\r\n            positions[23] = max.z;\r\n\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            });\r\n\r\n            // 12 triangles:  6 faces, 2 triangles each.\r\n            indices = new Uint16Array(6 * 2 * 3);\r\n\r\n            // plane z = corner.Z\r\n            indices[0] = 4;\r\n            indices[1] = 5;\r\n            indices[2] = 6;\r\n            indices[3] = 4;\r\n            indices[4] = 6;\r\n            indices[5] = 7;\r\n\r\n            // plane z = -corner.Z\r\n            indices[6] = 1;\r\n            indices[7] = 0;\r\n            indices[8] = 3;\r\n            indices[9] = 1;\r\n            indices[10] = 3;\r\n            indices[11] = 2;\r\n\r\n            // plane x = corner.X\r\n            indices[12] = 1;\r\n            indices[13] = 6;\r\n            indices[14] = 5;\r\n            indices[15] = 1;\r\n            indices[16] = 2;\r\n            indices[17] = 6;\r\n\r\n            // plane y = corner.Y\r\n            indices[18] = 2;\r\n            indices[19] = 3;\r\n            indices[20] = 7;\r\n            indices[21] = 2;\r\n            indices[22] = 7;\r\n            indices[23] = 6;\r\n\r\n            // plane x = -corner.X\r\n            indices[24] = 3;\r\n            indices[25] = 0;\r\n            indices[26] = 4;\r\n            indices[27] = 3;\r\n            indices[28] = 4;\r\n            indices[29] = 7;\r\n\r\n            // plane y = -corner.Y\r\n            indices[30] = 0;\r\n            indices[31] = 1;\r\n            indices[32] = 5;\r\n            indices[33] = 0;\r\n            indices[34] = 5;\r\n            indices[35] = 4;\r\n        }\r\n\r\n        var diff = Cartesian3.subtract(max, min, diffScratch);\r\n        var radius = Cartesian3.magnitude(diff) * 0.5;\r\n\r\n        if (defined(boxGeometry._offsetAttribute)) {\r\n            var length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, radius),\r\n            offsetAttribute : boxGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    var unitBoxGeometry;\r\n\r\n    /**\r\n     * Returns the geometric representation of a unit box, including its vertices, indices, and a bounding sphere.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     *\r\n     * @private\r\n     */\r\n    BoxGeometry.getUnitBox = function() {\r\n        if (!defined(unitBoxGeometry)) {\r\n            unitBoxGeometry = BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\r\n                dimensions : new Cartesian3(1.0, 1.0, 1.0),\r\n                vertexFormat : VertexFormat.POSITION_ONLY\r\n            }));\r\n        }\r\n        return unitBoxGeometry;\r\n    };\r\n\r\n    return BoxGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/BoxGeometry.js\n// module id = 146\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './EllipseGeometryLibrary',\r\n        './Ellipsoid',\r\n        './GeographicProjection',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryInstance',\r\n        './GeometryOffsetAttribute',\r\n        './GeometryPipeline',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './Matrix3',\r\n        './PrimitiveType',\r\n        './Quaternion',\r\n        './Rectangle',\r\n        './VertexFormat'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        EllipseGeometryLibrary,\r\n        Ellipsoid,\r\n        GeographicProjection,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryInstance,\r\n        GeometryOffsetAttribute,\r\n        GeometryPipeline,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        Matrix3,\r\n        PrimitiveType,\r\n        Quaternion,\r\n        Rectangle,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var scratchCartesian2 = new Cartesian3();\r\n    var scratchCartesian3 = new Cartesian3();\r\n    var scratchCartesian4 = new Cartesian3();\r\n    var texCoordScratch = new Cartesian2();\r\n    var textureMatrixScratch = new Matrix3();\r\n    var tangentMatrixScratch = new Matrix3();\r\n    var quaternionScratch = new Quaternion();\r\n\r\n    var scratchNormal = new Cartesian3();\r\n    var scratchTangent = new Cartesian3();\r\n    var scratchBitangent = new Cartesian3();\r\n\r\n    var scratchCartographic = new Cartographic();\r\n    var projectedCenterScratch = new Cartesian3();\r\n\r\n    var scratchMinTexCoord = new Cartesian2();\r\n    var scratchMaxTexCoord = new Cartesian2();\r\n\r\n    function computeTopBottomAttributes(positions, options, extrude) {\r\n        var vertexFormat = options.vertexFormat;\r\n        var center = options.center;\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var ellipsoid = options.ellipsoid;\r\n        var stRotation = options.stRotation;\r\n        var size = (extrude) ? positions.length / 3 * 2 : positions.length / 3;\r\n        var shadowVolume = options.shadowVolume;\r\n\r\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\r\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\r\n\r\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\r\n\r\n        var textureCoordIndex = 0;\r\n\r\n        // Raise positions to a height above the ellipsoid and compute the\r\n        // texture coordinates, normals, tangents, and bitangents.\r\n        var normal = scratchNormal;\r\n        var tangent = scratchTangent;\r\n        var bitangent = scratchBitangent;\r\n\r\n        var projection = new GeographicProjection(ellipsoid);\r\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\r\n\r\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\r\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\r\n\r\n        var textureMatrix = textureMatrixScratch;\r\n        var tangentMatrix = tangentMatrixScratch;\r\n        if (stRotation !== 0) {\r\n            var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\r\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n            rotation = Quaternion.fromAxisAngle(geodeticNormal, -stRotation, quaternionScratch);\r\n            tangentMatrix = Matrix3.fromQuaternion(rotation, tangentMatrix);\r\n        } else {\r\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n            tangentMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentMatrix);\r\n        }\r\n\r\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\r\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\r\n\r\n        var length = positions.length;\r\n        var bottomOffset = (extrude) ? length : 0;\r\n        var stOffset = bottomOffset / 3 * 2;\r\n        for (var i = 0; i < length; i += 3) {\r\n            var i1 = i + 1;\r\n            var i2 = i + 2;\r\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\r\n\r\n            if (vertexFormat.st) {\r\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\r\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\r\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\r\n\r\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\r\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\r\n\r\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\r\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\r\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\r\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\r\n\r\n                if (extrude) {\r\n                    textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\r\n                    textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\r\n                }\r\n\r\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\r\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\r\n            }\r\n\r\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\r\n                normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n\r\n                if (shadowVolume) {\r\n                    extrudeNormals[i + bottomOffset] = -normal.x;\r\n                    extrudeNormals[i1 + bottomOffset] = -normal.y;\r\n                    extrudeNormals[i2 + bottomOffset] = -normal.z;\r\n                }\r\n\r\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\r\n                        Matrix3.multiplyByVector(tangentMatrix, tangent, tangent);\r\n                    }\r\n                    if (vertexFormat.normal) {\r\n                        normals[i] = normal.x;\r\n                        normals[i1] = normal.y;\r\n                        normals[i2] = normal.z;\r\n                        if (extrude) {\r\n                            normals[i + bottomOffset] = -normal.x;\r\n                            normals[i1 + bottomOffset] = -normal.y;\r\n                            normals[i2 + bottomOffset] = -normal.z;\r\n                        }\r\n                    }\r\n\r\n                    if (vertexFormat.tangent) {\r\n                        tangents[i] = tangent.x;\r\n                        tangents[i1] = tangent.y;\r\n                        tangents[i2] = tangent.z;\r\n                        if (extrude) {\r\n                            tangents[i + bottomOffset] = -tangent.x;\r\n                            tangents[i1 + bottomOffset] = -tangent.y;\r\n                            tangents[i2 + bottomOffset] = -tangent.z;\r\n                        }\r\n                    }\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                        bitangents[i ] = bitangent.x;\r\n                        bitangents[i1] = bitangent.y;\r\n                        bitangents[i2] = bitangent.z;\r\n                        if (extrude) {\r\n                            bitangents[i + bottomOffset] = bitangent.x;\r\n                            bitangents[i1 + bottomOffset] = bitangent.y;\r\n                            bitangents[i2 + bottomOffset] = bitangent.z;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            length = textureCoordinates.length;\r\n            for (var k = 0; k < length; k += 2) {\r\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\r\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        if (vertexFormat.position) {\r\n            var finalPositions = EllipseGeometryLibrary.raisePositionsToHeight(positions, options, extrude);\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : finalPositions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (shadowVolume) {\r\n            attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : extrudeNormals\r\n            });\r\n        }\r\n\r\n        if (extrude && defined(options.offsetAttribute)) {\r\n            var offsetAttribute = new Uint8Array(size);\r\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n            } else {\r\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : offsetAttribute\r\n            });\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    function topIndices(numPts) {\r\n        // numTriangles in half = 3 + 8 + 12 + ... = -1 + 4 + (4 + 4) + (4 + 4 + 4) + ... = -1 + 4 * (1 + 2 + 3 + ...)\r\n        //              = -1 + 4 * ((n * ( n + 1)) / 2)\r\n        // total triangles = 2 * numTrangles in half\r\n        // indices = total triangles * 3;\r\n        // Substitute numPts for n above\r\n\r\n        var indices = new Array(12 * (numPts * ( numPts + 1)) - 6);\r\n        var indicesIndex = 0;\r\n        var prevIndex;\r\n        var numInterior;\r\n        var positionIndex;\r\n        var i;\r\n        var j;\r\n        // Indices triangles to the 'right' of the north vector\r\n\r\n        prevIndex = 0;\r\n        positionIndex = 1;\r\n        for (i = 0; i < 3; i++) {\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n\r\n        for (i = 2; i < numPts + 1; ++i) {\r\n            positionIndex = i * (i + 1) - 1;\r\n            prevIndex = (i - 1) * i - 1;\r\n\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n\r\n            numInterior = 2 * i;\r\n            for (j = 0; j < numInterior - 1; ++j) {\r\n\r\n                indices[indicesIndex++] = positionIndex;\r\n                indices[indicesIndex++] = prevIndex++;\r\n                indices[indicesIndex++] = prevIndex;\r\n\r\n                indices[indicesIndex++] = positionIndex++;\r\n                indices[indicesIndex++] = prevIndex;\r\n                indices[indicesIndex++] = positionIndex;\r\n            }\r\n\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n\r\n        // Indices for center column of triangles\r\n        numInterior = numPts * 2;\r\n        ++positionIndex;\r\n        ++prevIndex;\r\n        for (i = 0; i < numInterior - 1; ++i) {\r\n            indices[indicesIndex++] = positionIndex;\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n\r\n        indices[indicesIndex++] = positionIndex;\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n\r\n        indices[indicesIndex++] = positionIndex++;\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n\r\n        // Reverse the process creating indices to the 'left' of the north vector\r\n        ++prevIndex;\r\n        for (i = numPts - 1; i > 1; --i) {\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n\r\n            numInterior = 2 * i;\r\n            for (j = 0; j < numInterior - 1; ++j) {\r\n                indices[indicesIndex++] = positionIndex;\r\n                indices[indicesIndex++] = prevIndex++;\r\n                indices[indicesIndex++] = prevIndex;\r\n\r\n                indices[indicesIndex++] = positionIndex++;\r\n                indices[indicesIndex++] = prevIndex;\r\n                indices[indicesIndex++] = positionIndex;\r\n            }\r\n\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = positionIndex++;\r\n        }\r\n\r\n        for (i = 0; i < 3; i++) {\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n        return indices;\r\n    }\r\n\r\n    var boundingSphereCenter = new Cartesian3();\r\n\r\n    function computeEllipse(options) {\r\n        var center = options.center;\r\n        boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\r\n        boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\r\n        var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\r\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, false);\r\n        var positions = cep.positions;\r\n        var numPts = cep.numPts;\r\n        var attributes = computeTopBottomAttributes(positions, options, false);\r\n        var indices = topIndices(numPts);\r\n        indices = IndexDatatype.createTypedArray(positions.length / 3, indices);\r\n        return {\r\n            boundingSphere : boundingSphere,\r\n            attributes : attributes,\r\n            indices : indices\r\n        };\r\n    }\r\n\r\n    function computeWallAttributes(positions, options) {\r\n        var vertexFormat = options.vertexFormat;\r\n        var center = options.center;\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var ellipsoid = options.ellipsoid;\r\n        var height = options.height;\r\n        var extrudedHeight = options.extrudedHeight;\r\n        var stRotation = options.stRotation;\r\n        var size = positions.length / 3 * 2;\r\n\r\n        var finalPositions = new Float64Array(size * 3);\r\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\r\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\r\n\r\n        var shadowVolume = options.shadowVolume;\r\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\r\n\r\n        var textureCoordIndex = 0;\r\n\r\n        // Raise positions to a height above the ellipsoid and compute the\r\n        // texture coordinates, normals, tangents, and bitangents.\r\n        var normal = scratchNormal;\r\n        var tangent = scratchTangent;\r\n        var bitangent = scratchBitangent;\r\n\r\n        var projection = new GeographicProjection(ellipsoid);\r\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\r\n\r\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\r\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\r\n        var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\r\n        var textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrixScratch);\r\n\r\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\r\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\r\n\r\n        var length = positions.length;\r\n        var stOffset = length / 3 * 2;\r\n        for (var i = 0; i < length; i += 3) {\r\n            var i1 = i + 1;\r\n            var i2 = i + 2;\r\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\r\n            var extrudedPosition;\r\n\r\n            if (vertexFormat.st) {\r\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\r\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\r\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\r\n\r\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\r\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\r\n\r\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\r\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\r\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\r\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\r\n\r\n                textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\r\n                textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\r\n\r\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\r\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\r\n            }\r\n\r\n            position = ellipsoid.scaleToGeodeticSurface(position, position);\r\n            extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\r\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n\r\n            if (shadowVolume) {\r\n                extrudeNormals[i + length] = -normal.x;\r\n                extrudeNormals[i1 + length] = -normal.y;\r\n                extrudeNormals[i2 + length] = -normal.z;\r\n            }\r\n\r\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian4);\r\n            position = Cartesian3.add(position, scaledNormal, position);\r\n            scaledNormal = Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\r\n            extrudedPosition = Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\r\n\r\n            if (vertexFormat.position) {\r\n                finalPositions[i + length] = extrudedPosition.x;\r\n                finalPositions[i1 + length] = extrudedPosition.y;\r\n                finalPositions[i2 + length] = extrudedPosition.z;\r\n\r\n                finalPositions[i] = position.x;\r\n                finalPositions[i1] = position.y;\r\n                finalPositions[i2] = position.z;\r\n            }\r\n\r\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n\r\n                bitangent = Cartesian3.clone(normal, bitangent);\r\n                var next = Cartesian3.fromArray(positions, (i + 3) % length, scratchCartesian4);\r\n                Cartesian3.subtract(next, position, next);\r\n                var bottom = Cartesian3.subtract(extrudedPosition, position, scratchCartesian3);\r\n\r\n                normal = Cartesian3.normalize(Cartesian3.cross(bottom, next, normal), normal);\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[i] = normal.x;\r\n                    normals[i1] = normal.y;\r\n                    normals[i2] = normal.z;\r\n\r\n                    normals[i + length] = normal.x;\r\n                    normals[i1 + length] = normal.y;\r\n                    normals[i2 + length] = normal.z;\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                    tangents[i] = tangent.x;\r\n                    tangents[i1] = tangent.y;\r\n                    tangents[i2] = tangent.z;\r\n\r\n                    tangents[i + length] = tangent.x;\r\n                    tangents[i + 1 + length] = tangent.y;\r\n                    tangents[i + 2 + length] = tangent.z;\r\n                }\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[i ] = bitangent.x;\r\n                    bitangents[i1] = bitangent.y;\r\n                    bitangents[i2] = bitangent.z;\r\n\r\n                    bitangents[i + length] = bitangent.x;\r\n                    bitangents[i1 + length] = bitangent.y;\r\n                    bitangents[i2 + length] = bitangent.z;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            length = textureCoordinates.length;\r\n            for (var k = 0; k < length; k += 2) {\r\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\r\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : finalPositions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (shadowVolume) {\r\n            attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : extrudeNormals\r\n            });\r\n        }\r\n\r\n        if (defined(options.offsetAttribute)) {\r\n            var offsetAttribute = new Uint8Array(size);\r\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n            } else {\r\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : offsetAttribute\r\n            });\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    function computeWallIndices(positions) {\r\n        var length = positions.length / 3;\r\n        var indices = IndexDatatype.createTypedArray(length, length * 6);\r\n        var index = 0;\r\n        for (var i = 0; i < length; i++) {\r\n            var UL = i;\r\n            var LL = i + length;\r\n            var UR = (UL + 1) % length;\r\n            var LR = UR + length;\r\n            indices[index++] = UL;\r\n            indices[index++] = LL;\r\n            indices[index++] = UR;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n        }\r\n\r\n        return indices;\r\n    }\r\n\r\n    var topBoundingSphere = new BoundingSphere();\r\n    var bottomBoundingSphere = new BoundingSphere();\r\n\r\n    function computeExtrudedEllipse(options) {\r\n        var center = options.center;\r\n        var ellipsoid = options.ellipsoid;\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\r\n        topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\r\n        topBoundingSphere.radius = semiMajorAxis;\r\n\r\n        scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\r\n        bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\r\n        bottomBoundingSphere.radius = semiMajorAxis;\r\n\r\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, true);\r\n        var positions = cep.positions;\r\n        var numPts = cep.numPts;\r\n        var outerPositions = cep.outerPositions;\r\n        var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\r\n        var topBottomAttributes = computeTopBottomAttributes(positions, options, true);\r\n        var indices = topIndices(numPts);\r\n        var length = indices.length;\r\n        indices.length = length * 2;\r\n        var posLength = positions.length / 3;\r\n        for (var i = 0; i < length; i += 3) {\r\n            indices[i + length] = indices[i + 2] + posLength;\r\n            indices[i + 1 + length] = indices[i + 1] + posLength;\r\n            indices[i + 2 + length] = indices[i] + posLength;\r\n        }\r\n\r\n        var topBottomIndices = IndexDatatype.createTypedArray(posLength * 2 / 3, indices);\r\n\r\n        var topBottomGeo = new Geometry({\r\n            attributes : topBottomAttributes,\r\n            indices : topBottomIndices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n\r\n        var wallAttributes = computeWallAttributes(outerPositions, options);\r\n        indices = computeWallIndices(outerPositions);\r\n        var wallIndices = IndexDatatype.createTypedArray(outerPositions.length * 2 / 3, indices);\r\n\r\n        var wallGeo = new Geometry({\r\n            attributes : wallAttributes,\r\n            indices : wallIndices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n\r\n        var geo = GeometryPipeline.combineInstances([\r\n            new GeometryInstance({\r\n                geometry : topBottomGeo\r\n            }),\r\n            new GeometryInstance({\r\n                geometry : wallGeo\r\n            })\r\n        ]);\r\n\r\n        return {\r\n            boundingSphere : boundingSphere,\r\n            attributes : geo[0].attributes,\r\n            indices : geo[0].indices\r\n        };\r\n    }\r\n\r\n    function computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result) {\r\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\r\n            center : center,\r\n            semiMajorAxis : semiMajorAxis,\r\n            semiMinorAxis : semiMinorAxis,\r\n            rotation : rotation,\r\n            granularity : granularity\r\n        }, false, true);\r\n        var positionsFlat = cep.outerPositions;\r\n        var positionsCount = positionsFlat.length / 3;\r\n        var positions = new Array(positionsCount);\r\n        for (var i = 0; i < positionsCount; ++i) {\r\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\r\n        }\r\n        var rectangle = Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n        // Rectangle width goes beyond 180 degrees when the ellipse crosses a pole.\r\n        // When this happens, make the rectangle into a \"circle\" around the pole\r\n        if (rectangle.width > CesiumMath.PI) {\r\n            rectangle.north = rectangle.north > 0.0 ? CesiumMath.PI_OVER_TWO - CesiumMath.EPSILON7 : rectangle.north;\r\n            rectangle.south = rectangle.south < 0.0 ? CesiumMath.EPSILON7 - CesiumMath.PI_OVER_TWO : rectangle.south;\r\n            rectangle.east = CesiumMath.PI;\r\n            rectangle.west = -CesiumMath.PI;\r\n        }\r\n        return rectangle;\r\n    }\r\n\r\n    /**\r\n     * A description of an ellipse on an ellipsoid. Ellipse geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias EllipseGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\r\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\r\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\r\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates counter-clockwise from north.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\r\n     * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\r\n     * @exception {DeveloperError} granularity must be greater than zero.\r\n     *\r\n     *\r\n     * @example\r\n     * // Create an ellipse.\r\n     * var ellipse = new Cesium.EllipseGeometry({\r\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n     *   semiMajorAxis : 500000.0,\r\n     *   semiMinorAxis : 300000.0,\r\n     *   rotation : Cesium.Math.toRadians(60.0)\r\n     * });\r\n     * var geometry = Cesium.EllipseGeometry.createGeometry(ellipse);\r\n     *\r\n     * @see EllipseGeometry.createGeometry\r\n     */\r\n    function EllipseGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var center = options.center;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n        \r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._center = Cartesian3.clone(center);\r\n        this._semiMajorAxis = semiMajorAxis;\r\n        this._semiMinorAxis = semiMinorAxis;\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._rotation = defaultValue(options.rotation, 0.0);\r\n        this._stRotation = defaultValue(options.stRotation, 0.0);\r\n        this._height = Math.max(extrudedHeight, height);\r\n        this._granularity = granularity;\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._extrudedHeight = Math.min(extrudedHeight, height);\r\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n        this._workerName = 'createEllipseGeometry';\r\n        this._offsetAttribute = options.offsetAttribute;\r\n\r\n        this._rectangle = undefined;\r\n        this._textureCoordinateRotationPoints = undefined;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    EllipseGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 9;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {EllipseGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    EllipseGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._center, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._semiMajorAxis;\r\n        array[startingIndex++] = value._semiMinorAxis;\r\n        array[startingIndex++] = value._rotation;\r\n        array[startingIndex++] = value._stRotation;\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchCenter = new Cartesian3();\r\n    var scratchEllipsoid = new Ellipsoid();\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        center : scratchCenter,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        semiMajorAxis : undefined,\r\n        semiMinorAxis : undefined,\r\n        rotation : undefined,\r\n        stRotation : undefined,\r\n        height : undefined,\r\n        granularity : undefined,\r\n        extrudedHeight : undefined,\r\n        shadowVolume: undefined,\r\n        offsetAttribute: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {EllipseGeometry} [result] The object into which to store the result.\r\n     * @returns {EllipseGeometry} The modified result parameter or a new EllipseGeometry instance if one was not provided.\r\n     */\r\n    EllipseGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var semiMajorAxis = array[startingIndex++];\r\n        var semiMinorAxis = array[startingIndex++];\r\n        var rotation = array[startingIndex++];\r\n        var stRotation = array[startingIndex++];\r\n        var height = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var shadowVolume = array[startingIndex++] === 1.0;\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.height = height;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.stRotation = stRotation;\r\n            scratchOptions.rotation = rotation;\r\n            scratchOptions.semiMajorAxis = semiMajorAxis;\r\n            scratchOptions.semiMinorAxis = semiMinorAxis;\r\n            scratchOptions.shadowVolume = shadowVolume;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n            return new EllipseGeometry(scratchOptions);\r\n        }\r\n\r\n        result._center = Cartesian3.clone(center, result._center);\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._semiMajorAxis = semiMajorAxis;\r\n        result._semiMinorAxis = semiMinorAxis;\r\n        result._rotation = rotation;\r\n        result._stRotation = stRotation;\r\n        result._height = height;\r\n        result._granularity = granularity;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._shadowVolume = shadowVolume;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the bounding rectangle based on the provided options\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\r\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\r\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\r\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\r\n     * @param {Rectangle} [result] An object in which to store the result\r\n     *\r\n     * @returns {Rectangle} The result rectangle\r\n     */\r\n    EllipseGeometry.computeRectangle = function(options, result) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var center = options.center;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n        \r\n\r\n        return computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {EllipseGeometry} ellipseGeometry A description of the ellipse.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    EllipseGeometry.createGeometry = function(ellipseGeometry) {\r\n        if ((ellipseGeometry._semiMajorAxis <= 0.0) || (ellipseGeometry._semiMinorAxis <= 0.0)) {\r\n            return;\r\n        }\r\n\r\n        var height = ellipseGeometry._height;\r\n        var extrudedHeight = ellipseGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\r\n        var options = {\r\n            center : ellipseGeometry._center,\r\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\r\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\r\n            ellipsoid : ellipseGeometry._ellipsoid,\r\n            rotation : ellipseGeometry._rotation,\r\n            height : height,\r\n            granularity : ellipseGeometry._granularity,\r\n            vertexFormat : ellipseGeometry._vertexFormat,\r\n            stRotation : ellipseGeometry._stRotation\r\n        };\r\n        var geometry;\r\n        if (extrude) {\r\n            options.extrudedHeight = extrudedHeight;\r\n            options.shadowVolume = ellipseGeometry._shadowVolume;\r\n            options.offsetAttribute = ellipseGeometry._offsetAttribute;\r\n            geometry = computeExtrudedEllipse(options);\r\n        } else {\r\n            geometry = computeEllipse(options);\r\n\r\n            if (defined(ellipseGeometry._offsetAttribute)) {\r\n                var length = geometry.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : geometry.boundingSphere,\r\n            offsetAttribute : ellipseGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    EllipseGeometry.createShadowVolume = function(ellipseGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = ellipseGeometry._granularity;\r\n        var ellipsoid = ellipseGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new EllipseGeometry({\r\n            center : ellipseGeometry._center,\r\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\r\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\r\n            ellipsoid : ellipsoid,\r\n            rotation : ellipseGeometry._rotation,\r\n            stRotation : ellipseGeometry._stRotation,\r\n            granularity : granularity,\r\n            extrudedHeight : minHeight,\r\n            height : maxHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume: true\r\n        });\r\n    };\r\n\r\n    function textureCoordinateRotationPoints(ellipseGeometry) {\r\n        var stRotation = -ellipseGeometry._stRotation;\r\n        if (stRotation === 0.0) {\r\n            return [0, 0, 0, 1, 1, 0];\r\n        }\r\n\r\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\r\n            center : ellipseGeometry._center,\r\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\r\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\r\n            rotation : ellipseGeometry._rotation,\r\n            granularity : ellipseGeometry._granularity\r\n        }, false, true);\r\n        var positionsFlat = cep.outerPositions;\r\n        var positionsCount = positionsFlat.length / 3;\r\n        var positions = new Array(positionsCount);\r\n        for (var i = 0; i < positionsCount; ++i) {\r\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\r\n        }\r\n\r\n        var ellipsoid = ellipseGeometry._ellipsoid;\r\n        var boundingRectangle = ellipseGeometry.rectangle;\r\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\r\n    }\r\n\r\n    defineProperties(EllipseGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                if (!defined(this._rectangle)) {\r\n                    this._rectangle = computeRectangle(this._center, this._semiMajorAxis, this._semiMinorAxis, this._rotation, this._granularity, this._ellipsoid);\r\n                }\r\n                return this._rectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                if (!defined(this._textureCoordinateRotationPoints)) {\r\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\r\n                }\r\n                return this._textureCoordinateRotationPoints;\r\n            }\r\n        }\r\n    });\r\n\r\n    return EllipseGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EllipseGeometry.js\n// module id = 147\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Math',\r\n        './Matrix3',\r\n        './Quaternion'\r\n    ], function(\r\n        Cartesian3,\r\n        CesiumMath,\r\n        Matrix3,\r\n        Quaternion) {\r\n    'use strict';\r\n\r\n    var EllipseGeometryLibrary = {};\r\n\r\n    var rotAxis = new Cartesian3();\r\n    var tempVec = new Cartesian3();\r\n    var unitQuat = new Quaternion();\r\n    var rotMtx = new Matrix3();\r\n\r\n    function pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, result) {\r\n        var azimuth = theta + rotation;\r\n\r\n        Cartesian3.multiplyByScalar(eastVec, Math.cos(azimuth), rotAxis);\r\n        Cartesian3.multiplyByScalar(northVec, Math.sin(azimuth), tempVec);\r\n        Cartesian3.add(rotAxis, tempVec, rotAxis);\r\n\r\n        var cosThetaSquared = Math.cos(theta);\r\n        cosThetaSquared = cosThetaSquared * cosThetaSquared;\r\n\r\n        var sinThetaSquared = Math.sin(theta);\r\n        sinThetaSquared = sinThetaSquared * sinThetaSquared;\r\n\r\n        var radius = ab / Math.sqrt(bSqr * cosThetaSquared + aSqr * sinThetaSquared);\r\n        var angle = radius / mag;\r\n\r\n        // Create the quaternion to rotate the position vector to the boundary of the ellipse.\r\n        Quaternion.fromAxisAngle(rotAxis, angle, unitQuat);\r\n        Matrix3.fromQuaternion(unitQuat, rotMtx);\r\n\r\n        Matrix3.multiplyByVector(rotMtx, unitPos, result);\r\n        Cartesian3.normalize(result, result);\r\n        Cartesian3.multiplyByScalar(result, mag, result);\r\n        return result;\r\n    }\r\n\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var scratchCartesian2 = new Cartesian3();\r\n    var scratchCartesian3 = new Cartesian3();\r\n    var scratchNormal = new Cartesian3();\r\n    /**\r\n     * Returns the positions raised to the given heights\r\n     * @private\r\n     */\r\n    EllipseGeometryLibrary.raisePositionsToHeight = function(positions, options, extrude) {\r\n        var ellipsoid = options.ellipsoid;\r\n        var height = options.height;\r\n        var extrudedHeight = options.extrudedHeight;\r\n        var size = (extrude) ? positions.length / 3 * 2 : positions.length / 3;\r\n\r\n        var finalPositions = new Float64Array(size * 3);\r\n\r\n        var length = positions.length;\r\n        var bottomOffset = (extrude) ? length : 0;\r\n        for (var i = 0; i < length; i += 3) {\r\n            var i1 = i + 1;\r\n            var i2 = i + 2;\r\n\r\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\r\n            ellipsoid.scaleToGeodeticSurface(position, position);\r\n\r\n            var extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\r\n            var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\r\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian3);\r\n            Cartesian3.add(position, scaledNormal, position);\r\n\r\n            if (extrude) {\r\n                Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\r\n                Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\r\n\r\n                finalPositions[i + bottomOffset] = extrudedPosition.x;\r\n                finalPositions[i1 + bottomOffset] = extrudedPosition.y;\r\n                finalPositions[i2 + bottomOffset] = extrudedPosition.z;\r\n            }\r\n\r\n            finalPositions[i] = position.x;\r\n            finalPositions[i1] = position.y;\r\n            finalPositions[i2] = position.z;\r\n        }\r\n\r\n        return finalPositions;\r\n    };\r\n\r\n    var unitPosScratch = new Cartesian3();\r\n    var eastVecScratch = new Cartesian3();\r\n    var northVecScratch = new Cartesian3();\r\n    /**\r\n     * Returns an array of positions that make up the ellipse.\r\n     * @private\r\n     */\r\n    EllipseGeometryLibrary.computeEllipsePositions = function(options, addFillPositions, addEdgePositions) {\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var rotation = options.rotation;\r\n        var center = options.center;\r\n\r\n        // Computing the arc-length of the ellipse is too expensive to be practical. Estimating it using the\r\n        // arc length of the sphere is too inaccurate and creates sharp edges when either the semi-major or\r\n        // semi-minor axis is much bigger than the other. Instead, scale the angle delta to make\r\n        // the distance along the ellipse boundary more closely match the granularity.\r\n        var granularity = options.granularity * 8.0;\r\n\r\n        var aSqr = semiMinorAxis * semiMinorAxis;\r\n        var bSqr = semiMajorAxis * semiMajorAxis;\r\n        var ab = semiMajorAxis * semiMinorAxis;\r\n\r\n        var mag = Cartesian3.magnitude(center);\r\n\r\n        var unitPos = Cartesian3.normalize(center, unitPosScratch);\r\n        var eastVec = Cartesian3.cross(Cartesian3.UNIT_Z, center, eastVecScratch);\r\n        eastVec = Cartesian3.normalize(eastVec, eastVec);\r\n        var northVec = Cartesian3.cross(unitPos, eastVec, northVecScratch);\r\n\r\n        // The number of points in the first quadrant\r\n        var numPts = 1 + Math.ceil(CesiumMath.PI_OVER_TWO / granularity);\r\n\r\n        var deltaTheta = CesiumMath.PI_OVER_TWO / (numPts - 1);\r\n        var theta = CesiumMath.PI_OVER_TWO - numPts * deltaTheta;\r\n        if (theta < 0.0) {\r\n            numPts -= Math.ceil(Math.abs(theta) / deltaTheta);\r\n        }\r\n\r\n        // If the number of points were three, the ellipse\r\n        // would be tessellated like below:\r\n        //\r\n        //         *---*\r\n        //       / | \\ | \\\r\n        //     *---*---*---*\r\n        //   / | \\ | \\ | \\ | \\\r\n        //  / .*---*---*---*. \\\r\n        // * ` | \\ | \\ | \\ | `*\r\n        //  \\`.*---*---*---*.`/\r\n        //   \\ | \\ | \\ | \\ | /\r\n        //     *---*---*---*\r\n        //       \\ | \\ | /\r\n        //         *---*\r\n        // The first and last column have one position and fan to connect to the adjacent column.\r\n        // Each other vertical column contains an even number of positions.\r\n        var size = 2 * (numPts * (numPts + 2));\r\n        var positions = (addFillPositions) ? new Array(size * 3) : undefined;\r\n        var positionIndex = 0;\r\n        var position = scratchCartesian1;\r\n        var reflectedPosition = scratchCartesian2;\r\n\r\n        var outerPositionsLength = (numPts * 4) * 3;\r\n        var outerRightIndex = outerPositionsLength - 1;\r\n        var outerLeftIndex = 0;\r\n        var outerPositions = (addEdgePositions) ? new Array(outerPositionsLength) : undefined;\r\n\r\n        var i;\r\n        var j;\r\n        var numInterior;\r\n        var t;\r\n        var interiorPosition;\r\n\r\n        // Compute points in the 'eastern' half of the ellipse\r\n        theta = CesiumMath.PI_OVER_TWO;\r\n        position = pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\r\n        if (addFillPositions) {\r\n            positions[positionIndex++] = position.x;\r\n            positions[positionIndex++] = position.y;\r\n            positions[positionIndex++] = position.z;\r\n        }\r\n        if (addEdgePositions) {\r\n            outerPositions[outerRightIndex--] = position.z;\r\n            outerPositions[outerRightIndex--] = position.y;\r\n            outerPositions[outerRightIndex--] = position.x;\r\n        }\r\n        theta = CesiumMath.PI_OVER_TWO -  deltaTheta;\r\n        for (i = 1; i < numPts + 1; ++i) {\r\n            position = pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\r\n            reflectedPosition = pointOnEllipsoid(Math.PI - theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, reflectedPosition);\r\n\r\n            if (addFillPositions) {\r\n                positions[positionIndex++] = position.x;\r\n                positions[positionIndex++] = position.y;\r\n                positions[positionIndex++] = position.z;\r\n\r\n                numInterior = 2 * i + 2;\r\n                for (j = 1; j < numInterior - 1; ++j) {\r\n                    t = j / (numInterior - 1);\r\n                    interiorPosition = Cartesian3.lerp(position, reflectedPosition, t, scratchCartesian3);\r\n                    positions[positionIndex++] = interiorPosition.x;\r\n                    positions[positionIndex++] = interiorPosition.y;\r\n                    positions[positionIndex++] = interiorPosition.z;\r\n                }\r\n\r\n                positions[positionIndex++] = reflectedPosition.x;\r\n                positions[positionIndex++] = reflectedPosition.y;\r\n                positions[positionIndex++] = reflectedPosition.z;\r\n            }\r\n\r\n            if (addEdgePositions) {\r\n                outerPositions[outerRightIndex--] = position.z;\r\n                outerPositions[outerRightIndex--] = position.y;\r\n                outerPositions[outerRightIndex--] = position.x;\r\n                outerPositions[outerLeftIndex++] = reflectedPosition.x;\r\n                outerPositions[outerLeftIndex++] = reflectedPosition.y;\r\n                outerPositions[outerLeftIndex++] = reflectedPosition.z;\r\n            }\r\n\r\n            theta = CesiumMath.PI_OVER_TWO - (i + 1) * deltaTheta;\r\n        }\r\n\r\n        // Compute points in the 'western' half of the ellipse\r\n        for (i = numPts; i > 1; --i) {\r\n            theta = CesiumMath.PI_OVER_TWO - (i - 1) * deltaTheta;\r\n\r\n            position = pointOnEllipsoid(-theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\r\n            reflectedPosition = pointOnEllipsoid(theta + Math.PI, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, reflectedPosition);\r\n\r\n            if (addFillPositions) {\r\n                positions[positionIndex++] = position.x;\r\n                positions[positionIndex++] = position.y;\r\n                positions[positionIndex++] = position.z;\r\n\r\n                numInterior = 2 * (i - 1) + 2;\r\n                for (j = 1; j < numInterior - 1; ++j) {\r\n                    t = j / (numInterior - 1);\r\n                    interiorPosition = Cartesian3.lerp(position, reflectedPosition, t, scratchCartesian3);\r\n                    positions[positionIndex++] = interiorPosition.x;\r\n                    positions[positionIndex++] = interiorPosition.y;\r\n                    positions[positionIndex++] = interiorPosition.z;\r\n                }\r\n\r\n                positions[positionIndex++] = reflectedPosition.x;\r\n                positions[positionIndex++] = reflectedPosition.y;\r\n                positions[positionIndex++] = reflectedPosition.z;\r\n            }\r\n\r\n            if (addEdgePositions) {\r\n                outerPositions[outerRightIndex--] = position.z;\r\n                outerPositions[outerRightIndex--] = position.y;\r\n                outerPositions[outerRightIndex--] = position.x;\r\n                outerPositions[outerLeftIndex++] = reflectedPosition.x;\r\n                outerPositions[outerLeftIndex++] = reflectedPosition.y;\r\n                outerPositions[outerLeftIndex++] = reflectedPosition.z;\r\n            }\r\n        }\r\n\r\n        theta = CesiumMath.PI_OVER_TWO;\r\n        position = pointOnEllipsoid(-theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\r\n\r\n        var r = {};\r\n        if (addFillPositions) {\r\n            positions[positionIndex++] = position.x;\r\n            positions[positionIndex++] = position.y;\r\n            positions[positionIndex++] = position.z;\r\n            r.positions = positions;\r\n            r.numPts = numPts;\r\n        }\r\n        if (addEdgePositions) {\r\n            outerPositions[outerRightIndex--] = position.z;\r\n            outerPositions[outerRightIndex--] = position.y;\r\n            outerPositions[outerRightIndex--] = position.x;\r\n            r.outerPositions = outerPositions;\r\n        }\r\n\r\n        return r;\r\n    };\r\n\r\n    return EllipseGeometryLibrary;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EllipseGeometryLibrary.js\n// module id = 148\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './EllipseGeometryLibrary',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PrimitiveType'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        EllipseGeometryLibrary,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PrimitiveType) {\r\n    'use strict';\r\n\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var boundingSphereCenter = new Cartesian3();\r\n\r\n    function computeEllipse(options) {\r\n        var center = options.center;\r\n        boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\r\n        boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\r\n        var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\r\n        var positions = EllipseGeometryLibrary.computeEllipsePositions(options, false, true).outerPositions;\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position: new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : EllipseGeometryLibrary.raisePositionsToHeight(positions, options, false)\r\n            })\r\n        });\r\n\r\n        var length = positions.length / 3;\r\n        var indices = IndexDatatype.createTypedArray(length, length * 2);\r\n        var index = 0;\r\n        for ( var i = 0; i < length; ++i) {\r\n            indices[index++] = i;\r\n            indices[index++] = (i + 1) % length;\r\n        }\r\n\r\n        return {\r\n            boundingSphere : boundingSphere,\r\n            attributes : attributes,\r\n            indices : indices\r\n        };\r\n    }\r\n\r\n    var topBoundingSphere = new BoundingSphere();\r\n    var bottomBoundingSphere = new BoundingSphere();\r\n    function computeExtrudedEllipse(options) {\r\n        var center = options.center;\r\n        var ellipsoid = options.ellipsoid;\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\r\n        topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\r\n        topBoundingSphere.radius = semiMajorAxis;\r\n\r\n        scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\r\n        bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\r\n        bottomBoundingSphere.radius = semiMajorAxis;\r\n\r\n        var positions = EllipseGeometryLibrary.computeEllipsePositions(options, false, true).outerPositions;\r\n        var attributes = new GeometryAttributes({\r\n            position: new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : EllipseGeometryLibrary.raisePositionsToHeight(positions, options, true)\r\n            })\r\n        });\r\n\r\n        positions = attributes.position.values;\r\n        var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\r\n        var length = positions.length/3;\r\n\r\n        if (defined(options.offsetAttribute)) {\r\n            var applyOffset = new Uint8Array(length);\r\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                applyOffset = arrayFill(applyOffset, 1, 0, length / 2);\r\n            } else {\r\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                applyOffset = arrayFill(applyOffset, offsetValue);\r\n            }\r\n\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        var numberOfVerticalLines = defaultValue(options.numberOfVerticalLines, 16);\r\n        numberOfVerticalLines = CesiumMath.clamp(numberOfVerticalLines, 0, length/2);\r\n\r\n        var indices = IndexDatatype.createTypedArray(length, length * 2 + numberOfVerticalLines * 2);\r\n\r\n        length /= 2;\r\n        var index = 0;\r\n        var i;\r\n        for (i = 0; i < length; ++i) {\r\n            indices[index++] = i;\r\n            indices[index++] = (i + 1) % length;\r\n            indices[index++] = i + length;\r\n            indices[index++] = ((i + 1) % length) + length;\r\n        }\r\n\r\n        var numSide;\r\n        if (numberOfVerticalLines > 0) {\r\n            var numSideLines = Math.min(numberOfVerticalLines, length);\r\n            numSide = Math.round(length / numSideLines);\r\n\r\n            var maxI = Math.min(numSide * numberOfVerticalLines, length);\r\n            for (i = 0; i < maxI; i += numSide) {\r\n                indices[index++] = i;\r\n                indices[index++] = i + length;\r\n            }\r\n        }\r\n\r\n        return {\r\n            boundingSphere : boundingSphere,\r\n            attributes : attributes,\r\n            indices : indices\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A description of the outline of an ellipse on an ellipsoid.\r\n     *\r\n     * @alias EllipseOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\r\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\r\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\r\n     * @param {Number} [options.rotation=0.0] The angle from north (counter-clockwise) in radians.\r\n     * @param {Number} [options.granularity=0.02] The angular distance between points on the ellipse in radians.\r\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surface of an extruded ellipse.\r\n     *\r\n     * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\r\n     * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\r\n     * @exception {DeveloperError} granularity must be greater than zero.\r\n     *\r\n     * @see EllipseOutlineGeometry.createGeometry\r\n     *\r\n     * @example\r\n     * var ellipse = new Cesium.EllipseOutlineGeometry({\r\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n     *   semiMajorAxis : 500000.0,\r\n     *   semiMinorAxis : 300000.0,\r\n     *   rotation : Cesium.Math.toRadians(60.0)\r\n     * });\r\n     * var geometry = Cesium.EllipseOutlineGeometry.createGeometry(ellipse);\r\n     */\r\n    function EllipseOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var center = options.center;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n\r\n        \r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._center = Cartesian3.clone(center);\r\n        this._semiMajorAxis = semiMajorAxis;\r\n        this._semiMinorAxis = semiMinorAxis;\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._rotation = defaultValue(options.rotation, 0.0);\r\n        this._height = Math.max(extrudedHeight, height);\r\n        this._granularity = granularity;\r\n        this._extrudedHeight = Math.min(extrudedHeight, height);\r\n        this._numberOfVerticalLines = Math.max(defaultValue(options.numberOfVerticalLines, 16), 0);\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createEllipseOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    EllipseOutlineGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + 8;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {EllipseOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    EllipseOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._center, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._semiMajorAxis;\r\n        array[startingIndex++] = value._semiMinorAxis;\r\n        array[startingIndex++] = value._rotation;\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++]   = value._numberOfVerticalLines;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchCenter = new Cartesian3();\r\n    var scratchEllipsoid = new Ellipsoid();\r\n    var scratchOptions = {\r\n        center : scratchCenter,\r\n        ellipsoid : scratchEllipsoid,\r\n        semiMajorAxis : undefined,\r\n        semiMinorAxis : undefined,\r\n        rotation : undefined,\r\n        height : undefined,\r\n        granularity : undefined,\r\n        extrudedHeight : undefined,\r\n        numberOfVerticalLines : undefined,\r\n        offsetAttribute: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {EllipseOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {EllipseOutlineGeometry} The modified result parameter or a new EllipseOutlineGeometry instance if one was not provided.\r\n     */\r\n    EllipseOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var semiMajorAxis = array[startingIndex++];\r\n        var semiMinorAxis = array[startingIndex++];\r\n        var rotation = array[startingIndex++];\r\n        var height = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var numberOfVerticalLines = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.height = height;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.rotation = rotation;\r\n            scratchOptions.semiMajorAxis = semiMajorAxis;\r\n            scratchOptions.semiMinorAxis = semiMinorAxis;\r\n            scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n            return new EllipseOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._center = Cartesian3.clone(center, result._center);\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._semiMajorAxis = semiMajorAxis;\r\n        result._semiMinorAxis = semiMinorAxis;\r\n        result._rotation = rotation;\r\n        result._height = height;\r\n        result._granularity = granularity;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._numberOfVerticalLines = numberOfVerticalLines;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of an ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {EllipseOutlineGeometry} ellipseGeometry A description of the ellipse.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    EllipseOutlineGeometry.createGeometry = function(ellipseGeometry) {\r\n        if ((ellipseGeometry._semiMajorAxis <= 0.0) || (ellipseGeometry._semiMinorAxis <= 0.0)) {\r\n            return;\r\n        }\r\n\r\n        var height = ellipseGeometry._height;\r\n        var extrudedHeight = ellipseGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\r\n        var options = {\r\n            center : ellipseGeometry._center,\r\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\r\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\r\n            ellipsoid : ellipseGeometry._ellipsoid,\r\n            rotation : ellipseGeometry._rotation,\r\n            height : height,\r\n            granularity : ellipseGeometry._granularity,\r\n            numberOfVerticalLines : ellipseGeometry._numberOfVerticalLines\r\n        };\r\n        var geometry;\r\n        if (extrude) {\r\n            options.extrudedHeight = extrudedHeight;\r\n            options.offsetAttribute = ellipseGeometry._offsetAttribute;\r\n            geometry = computeExtrudedEllipse(options);\r\n        } else {\r\n            geometry = computeEllipse(options);\r\n\r\n            if (defined(ellipseGeometry._offsetAttribute)) {\r\n                var length = geometry.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : geometry.boundingSphere,\r\n            offsetAttribute : ellipseGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    return EllipseOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EllipseOutlineGeometry.js\n// module id = 149\n// module chunks = 0","define([\r\n        './defined',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Check',\r\n        './IntersectionTests',\r\n        './Math',\r\n        './Matrix3',\r\n        './OrientedBoundingBox'\r\n    ], function(\r\n        defined,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Check,\r\n        IntersectionTests,\r\n        CesiumMath,\r\n        Matrix3,\r\n        OrientedBoundingBox\r\n    ) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var CoplanarPolygonGeometryLibrary = {};\r\n\r\n    var scratchIntersectionPoint = new Cartesian3();\r\n    var scratchXAxis = new Cartesian3();\r\n    var scratchYAxis = new Cartesian3();\r\n    var scratchZAxis = new Cartesian3();\r\n    var obbScratch = new OrientedBoundingBox();\r\n\r\n    CoplanarPolygonGeometryLibrary.validOutline = function(positions) {\r\n        \r\n\r\n        var orientedBoundingBox = OrientedBoundingBox.fromPoints(positions, obbScratch);\r\n        var halfAxes = orientedBoundingBox.halfAxes;\r\n        var xAxis = Matrix3.getColumn(halfAxes, 0, scratchXAxis);\r\n        var yAxis = Matrix3.getColumn(halfAxes, 1, scratchYAxis);\r\n        var zAxis = Matrix3.getColumn(halfAxes, 2, scratchZAxis);\r\n\r\n        var xMag = Cartesian3.magnitude(xAxis);\r\n        var yMag = Cartesian3.magnitude(yAxis);\r\n        var zMag = Cartesian3.magnitude(zAxis);\r\n\r\n        // If all the points are on a line return undefined because we can't draw a polygon\r\n        return !((xMag === 0 && (yMag === 0 || zMag === 0)) || (yMag === 0 && zMag === 0));\r\n    };\r\n\r\n    // call after removeDuplicates\r\n    CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments = function(positions, centerResult, planeAxis1Result, planeAxis2Result) {\r\n        \r\n\r\n        var orientedBoundingBox = OrientedBoundingBox.fromPoints(positions, obbScratch);\r\n        var halfAxes = orientedBoundingBox.halfAxes;\r\n        var xAxis = Matrix3.getColumn(halfAxes, 0, scratchXAxis);\r\n        var yAxis = Matrix3.getColumn(halfAxes, 1, scratchYAxis);\r\n        var zAxis = Matrix3.getColumn(halfAxes, 2, scratchZAxis);\r\n\r\n        var xMag = Cartesian3.magnitude(xAxis);\r\n        var yMag = Cartesian3.magnitude(yAxis);\r\n        var zMag = Cartesian3.magnitude(zAxis);\r\n        var min = Math.min(xMag, yMag, zMag);\r\n\r\n        // If all the points are on a line return undefined because we can't draw a polygon\r\n        if ((xMag === 0 && (yMag === 0 || zMag === 0)) || (yMag === 0 && zMag === 0)) {\r\n            return false;\r\n        }\r\n\r\n        var planeAxis1;\r\n        var planeAxis2;\r\n\r\n        if (min === yMag || min === zMag) {\r\n            planeAxis1 = xAxis;\r\n        }\r\n        if (min === xMag) {\r\n            planeAxis1 = yAxis;\r\n        } else if (min === zMag) {\r\n            planeAxis2 = yAxis;\r\n        }\r\n        if (min === xMag || min === yMag) {\r\n            planeAxis2 = zAxis;\r\n        }\r\n\r\n        Cartesian3.normalize(planeAxis1, planeAxis1Result);\r\n        Cartesian3.normalize(planeAxis2, planeAxis2Result);\r\n        Cartesian3.clone(orientedBoundingBox.center, centerResult);\r\n        return true;\r\n    };\r\n\r\n    function projectTo2D(position, center, axis1, axis2, result) {\r\n        var v = Cartesian3.subtract(position, center, scratchIntersectionPoint);\r\n        var x = Cartesian3.dot(axis1, v);\r\n        var y = Cartesian3.dot(axis2, v);\r\n\r\n        return Cartesian2.fromElements(x, y, result);\r\n    }\r\n\r\n    CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction = function(center, axis1, axis2) {\r\n        return function(positions) {\r\n            var positionResults = new Array(positions.length);\r\n            for (var i = 0; i < positions.length; i++) {\r\n                positionResults[i] = projectTo2D(positions[i], center, axis1, axis2);\r\n            }\r\n\r\n            return positionResults;\r\n        };\r\n    };\r\n\r\n    CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction = function(center, axis1, axis2) {\r\n        return function(position, result) {\r\n            return projectTo2D(position, center, axis1, axis2, result);\r\n        };\r\n    };\r\n\r\n    return CoplanarPolygonGeometryLibrary;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonGeometryLibrary.js\n// module id = 150\n// module chunks = 0","define([\r\n        './defineProperties'\r\n    ], function(\r\n        defineProperties) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A queue that can enqueue items at the end, and dequeue items from the front.\r\n     *\r\n     * @alias Queue\r\n     * @constructor\r\n     */\r\n    function Queue() {\r\n        this._array = [];\r\n        this._offset = 0;\r\n        this._length = 0;\r\n    }\r\n\r\n    defineProperties(Queue.prototype, {\r\n        /**\r\n         * The length of the queue.\r\n         *\r\n         * @memberof Queue.prototype\r\n         *\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return this._length;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Enqueues the specified item.\r\n     *\r\n     * @param {*} item The item to enqueue.\r\n     */\r\n    Queue.prototype.enqueue = function(item) {\r\n        this._array.push(item);\r\n        this._length++;\r\n    };\r\n\r\n    /**\r\n     * Dequeues an item.  Returns undefined if the queue is empty.\r\n     *\r\n     * @returns {*} The the dequeued item.\r\n     */\r\n    Queue.prototype.dequeue = function() {\r\n        if (this._length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var array = this._array;\r\n        var offset = this._offset;\r\n        var item = array[offset];\r\n        array[offset] = undefined;\r\n\r\n        offset++;\r\n        if ((offset > 10) && (offset * 2 > array.length)) {\r\n            //compact array\r\n            this._array = array.slice(offset);\r\n            offset = 0;\r\n        }\r\n\r\n        this._offset = offset;\r\n        this._length--;\r\n\r\n        return item;\r\n    };\r\n\r\n    /**\r\n     * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\r\n     *\r\n     * @returns {*} The item at the front of the queue.\r\n     */\r\n    Queue.prototype.peek = function() {\r\n        if (this._length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        return this._array[this._offset];\r\n    };\r\n\r\n    /**\r\n     * Check whether this queue contains the specified item.\r\n     *\r\n     * @param {*} item The item to search for.\r\n     */\r\n    Queue.prototype.contains = function(item) {\r\n        return this._array.indexOf(item) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Remove all items from the queue.\r\n     */\r\n    Queue.prototype.clear = function() {\r\n        this._array.length = this._offset = this._length = 0;\r\n    };\r\n\r\n    /**\r\n     * Sort the items in the queue in-place.\r\n     *\r\n     * @param {Queue~Comparator} compareFunction A function that defines the sort order.\r\n     */\r\n    Queue.prototype.sort = function(compareFunction) {\r\n        if (this._offset > 0) {\r\n            //compact array\r\n            this._array = this._array.slice(this._offset);\r\n            this._offset = 0;\r\n        }\r\n\r\n        this._array.sort(compareFunction);\r\n    };\r\n\r\n    /**\r\n     * A function used to compare two items while sorting a queue.\r\n     * @callback Queue~Comparator\r\n     *\r\n     * @param {*} a An item in the array.\r\n     * @param {*} b An item in the array.\r\n     * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\r\n     *          a positive value if <code>a</code> is greater than <code>b</code>, or\r\n     *          0 if <code>a</code> is equal to <code>b</code>.\r\n     *\r\n     * @example\r\n     * function compareNumbers(a, b) {\r\n     *     return a - b;\r\n     * }\r\n     */\r\n\r\n    return Queue;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Queue.js\n// module id = 151\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './CornerType',\r\n        './defined',\r\n        './Math',\r\n        './Matrix3',\r\n        './PolylinePipeline',\r\n        './PolylineVolumeGeometryLibrary',\r\n        './Quaternion'\r\n    ], function(\r\n        Cartesian3,\r\n        CornerType,\r\n        defined,\r\n        CesiumMath,\r\n        Matrix3,\r\n        PolylinePipeline,\r\n        PolylineVolumeGeometryLibrary,\r\n        Quaternion) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var CorridorGeometryLibrary = {};\r\n\r\n    var scratch1 = new Cartesian3();\r\n    var scratch2 = new Cartesian3();\r\n    var scratch3 = new Cartesian3();\r\n    var scratch4 = new Cartesian3();\r\n\r\n    var scaleArray2 = [new Cartesian3(), new Cartesian3()];\r\n\r\n    var cartesian1 = new Cartesian3();\r\n    var cartesian2 = new Cartesian3();\r\n    var cartesian3 = new Cartesian3();\r\n    var cartesian4 = new Cartesian3();\r\n    var cartesian5 = new Cartesian3();\r\n    var cartesian6 = new Cartesian3();\r\n    var cartesian7 = new Cartesian3();\r\n    var cartesian8 = new Cartesian3();\r\n    var cartesian9 = new Cartesian3();\r\n    var cartesian10 = new Cartesian3();\r\n\r\n    var quaterion = new Quaternion();\r\n    var rotMatrix = new Matrix3();\r\n    function computeRoundCorner(cornerPoint, startPoint, endPoint, cornerType, leftIsOutside) {\r\n        var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, cornerPoint, scratch1), Cartesian3.subtract(endPoint, cornerPoint, scratch2));\r\n        var granularity = (cornerType === CornerType.BEVELED) ? 1 : Math.ceil(angle / CesiumMath.toRadians(5)) + 1;\r\n\r\n        var size = granularity * 3;\r\n        var array = new Array(size);\r\n\r\n        array[size - 3] = endPoint.x;\r\n        array[size - 2] = endPoint.y;\r\n        array[size - 1] = endPoint.z;\r\n\r\n        var m;\r\n        if (leftIsOutside) {\r\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(cornerPoint, scratch1), angle / granularity, quaterion), rotMatrix);\r\n        } else {\r\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(cornerPoint, angle / granularity, quaterion), rotMatrix);\r\n        }\r\n\r\n        var index = 0;\r\n        startPoint = Cartesian3.clone(startPoint, scratch1);\r\n        for (var i = 0; i < granularity; i++) {\r\n            startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\r\n            array[index++] = startPoint.x;\r\n            array[index++] = startPoint.y;\r\n            array[index++] = startPoint.z;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    function addEndCaps(calculatedPositions) {\r\n        var cornerPoint = cartesian1;\r\n        var startPoint = cartesian2;\r\n        var endPoint = cartesian3;\r\n\r\n        var leftEdge = calculatedPositions[1];\r\n        startPoint = Cartesian3.fromArray(calculatedPositions[1], leftEdge.length - 3, startPoint);\r\n        endPoint = Cartesian3.fromArray(calculatedPositions[0], 0, endPoint);\r\n        cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\r\n        var firstEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\r\n\r\n        var length = calculatedPositions.length - 1;\r\n        var rightEdge = calculatedPositions[length - 1];\r\n        leftEdge = calculatedPositions[length];\r\n        startPoint = Cartesian3.fromArray(rightEdge, rightEdge.length - 3, startPoint);\r\n        endPoint = Cartesian3.fromArray(leftEdge, 0, endPoint);\r\n        cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\r\n        var lastEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\r\n\r\n        return [firstEndCap, lastEndCap];\r\n    }\r\n\r\n    function computeMiteredCorner(position, leftCornerDirection, lastPoint, leftIsOutside) {\r\n        var cornerPoint = scratch1;\r\n        if (leftIsOutside) {\r\n            cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\r\n        } else {\r\n            leftCornerDirection = Cartesian3.negate(leftCornerDirection, leftCornerDirection);\r\n            cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\r\n        }\r\n        return [cornerPoint.x, cornerPoint.y, cornerPoint.z, lastPoint.x, lastPoint.y, lastPoint.z];\r\n    }\r\n\r\n    function addShiftedPositions(positions, left, scalar, calculatedPositions) {\r\n        var rightPositions = new Array(positions.length);\r\n        var leftPositions = new Array(positions.length);\r\n        var scaledLeft = Cartesian3.multiplyByScalar(left, scalar, scratch1);\r\n        var scaledRight = Cartesian3.negate(scaledLeft, scratch2);\r\n        var rightIndex = 0;\r\n        var leftIndex = positions.length - 1;\r\n\r\n        for (var i = 0; i < positions.length; i += 3) {\r\n            var pos = Cartesian3.fromArray(positions, i, scratch3);\r\n            var rightPos = Cartesian3.add(pos, scaledRight, scratch4);\r\n            rightPositions[rightIndex++] = rightPos.x;\r\n            rightPositions[rightIndex++] = rightPos.y;\r\n            rightPositions[rightIndex++] = rightPos.z;\r\n\r\n            var leftPos = Cartesian3.add(pos, scaledLeft, scratch4);\r\n            leftPositions[leftIndex--] = leftPos.z;\r\n            leftPositions[leftIndex--] = leftPos.y;\r\n            leftPositions[leftIndex--] = leftPos.x;\r\n        }\r\n        calculatedPositions.push(rightPositions, leftPositions);\r\n\r\n        return calculatedPositions;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CorridorGeometryLibrary.addAttribute = function(attribute, value, front, back) {\r\n        var x = value.x;\r\n        var y = value.y;\r\n        var z = value.z;\r\n        if (defined(front)) {\r\n            attribute[front] = x;\r\n            attribute[front + 1] = y;\r\n            attribute[front + 2] = z;\r\n        }\r\n        if (defined(back)) {\r\n            attribute[back] = z;\r\n            attribute[back - 1] = y;\r\n            attribute[back - 2] = x;\r\n        }\r\n    };\r\n\r\n    var scratchForwardProjection = new Cartesian3();\r\n    var scratchBackwardProjection = new Cartesian3();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CorridorGeometryLibrary.computePositions = function(params) {\r\n        var granularity = params.granularity;\r\n        var positions = params.positions;\r\n        var ellipsoid = params.ellipsoid;\r\n        var width = params.width / 2;\r\n        var cornerType = params.cornerType;\r\n        var saveAttributes = params.saveAttributes;\r\n        var normal = cartesian1;\r\n        var forward = cartesian2;\r\n        var backward = cartesian3;\r\n        var left = cartesian4;\r\n        var cornerDirection = cartesian5;\r\n        var startPoint = cartesian6;\r\n        var previousPos = cartesian7;\r\n        var rightPos = cartesian8;\r\n        var leftPos = cartesian9;\r\n        var center = cartesian10;\r\n        var calculatedPositions = [];\r\n        var calculatedLefts = (saveAttributes) ? [] : undefined;\r\n        var calculatedNormals = (saveAttributes) ? [] : undefined;\r\n        var position = positions[0]; //add first point\r\n        var nextPosition = positions[1];\r\n\r\n        forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\r\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n        left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\r\n        if (saveAttributes) {\r\n            calculatedLefts.push(left.x, left.y, left.z);\r\n            calculatedNormals.push(normal.x, normal.y, normal.z);\r\n        }\r\n        previousPos = Cartesian3.clone(position, previousPos);\r\n        position = nextPosition;\r\n        backward = Cartesian3.negate(forward, backward);\r\n\r\n        var subdividedPositions;\r\n        var corners = [];\r\n        var i;\r\n        var length = positions.length;\r\n        for (i = 1; i < length - 1; i++) { // add middle points and corners\r\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n            nextPosition = positions[i + 1];\r\n            forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\r\n            cornerDirection = Cartesian3.normalize(Cartesian3.add(forward, backward, cornerDirection), cornerDirection);\r\n\r\n            var forwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(forward, normal), scratchForwardProjection);\r\n            Cartesian3.subtract(forward, forwardProjection, forwardProjection);\r\n            Cartesian3.normalize(forwardProjection, forwardProjection);\r\n\r\n            var backwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(backward, normal), scratchBackwardProjection);\r\n            Cartesian3.subtract(backward, backwardProjection, backwardProjection);\r\n            Cartesian3.normalize(backwardProjection, backwardProjection);\r\n\r\n            var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\r\n\r\n            if (doCorner) {\r\n                cornerDirection = Cartesian3.cross(cornerDirection, normal, cornerDirection);\r\n                cornerDirection = Cartesian3.cross(normal, cornerDirection, cornerDirection);\r\n                cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n                var scalar = width / Math.max(0.25, Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1)));\r\n                var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\r\n                cornerDirection = Cartesian3.multiplyByScalar(cornerDirection, scalar, cornerDirection);\r\n                if (leftIsOutside) {\r\n                    rightPos = Cartesian3.add(position, cornerDirection, rightPos);\r\n                    center = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, center), center);\r\n                    leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\r\n                    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n                    scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\r\n                    subdividedPositions = PolylinePipeline.generateArc({\r\n                        positions: scaleArray2,\r\n                        granularity: granularity,\r\n                        ellipsoid: ellipsoid\r\n                    });\r\n                    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\r\n                    if (saveAttributes) {\r\n                        calculatedLefts.push(left.x, left.y, left.z);\r\n                        calculatedNormals.push(normal.x, normal.y, normal.z);\r\n                    }\r\n                    startPoint = Cartesian3.clone(leftPos, startPoint);\r\n                    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\r\n                    leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\r\n                    previousPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, previousPos), previousPos);\r\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                        corners.push({\r\n                            leftPositions : computeRoundCorner(rightPos, startPoint, leftPos, cornerType, leftIsOutside)\r\n                        });\r\n                    } else {\r\n                        corners.push({\r\n                            leftPositions : computeMiteredCorner(position, Cartesian3.negate(cornerDirection, cornerDirection), leftPos, leftIsOutside)\r\n                        });\r\n                    }\r\n                } else {\r\n                    leftPos = Cartesian3.add(position, cornerDirection, leftPos);\r\n                    center = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, center), center), center);\r\n                    rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\r\n                    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n                    scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\r\n                    subdividedPositions = PolylinePipeline.generateArc({\r\n                        positions: scaleArray2,\r\n                        granularity: granularity,\r\n                        ellipsoid: ellipsoid\r\n                    });\r\n                    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\r\n                    if (saveAttributes) {\r\n                        calculatedLefts.push(left.x, left.y, left.z);\r\n                        calculatedNormals.push(normal.x, normal.y, normal.z);\r\n                    }\r\n                    startPoint = Cartesian3.clone(rightPos, startPoint);\r\n                    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\r\n                    rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\r\n                    previousPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, previousPos), previousPos), previousPos);\r\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                        corners.push({\r\n                            rightPositions : computeRoundCorner(leftPos, startPoint, rightPos, cornerType, leftIsOutside)\r\n                        });\r\n                    } else {\r\n                        corners.push({\r\n                            rightPositions : computeMiteredCorner(position, cornerDirection, rightPos, leftIsOutside)\r\n                        });\r\n                    }\r\n                }\r\n                backward = Cartesian3.negate(forward, backward);\r\n            }\r\n            position = nextPosition;\r\n        }\r\n\r\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n        scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n        scaleArray2[1] = Cartesian3.clone(position, scaleArray2[1]);\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n            positions: scaleArray2,\r\n            granularity: granularity,\r\n            ellipsoid: ellipsoid\r\n        });\r\n        calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\r\n        if (saveAttributes) {\r\n            calculatedLefts.push(left.x, left.y, left.z);\r\n            calculatedNormals.push(normal.x, normal.y, normal.z);\r\n        }\r\n\r\n        var endPositions;\r\n        if (cornerType === CornerType.ROUNDED) {\r\n            endPositions = addEndCaps(calculatedPositions);\r\n        }\r\n\r\n        return {\r\n            positions : calculatedPositions,\r\n            corners : corners,\r\n            lefts : calculatedLefts,\r\n            normals : calculatedNormals,\r\n            endPositions : endPositions\r\n        };\r\n    };\r\n\r\n    return CorridorGeometryLibrary;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CorridorGeometryLibrary.js\n// module id = 152\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './Ellipsoid',\r\n        './Math'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Ellipsoid,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    function setConstants(ellipsoidGeodesic) {\r\n        var uSquared = ellipsoidGeodesic._uSquared;\r\n        var a = ellipsoidGeodesic._ellipsoid.maximumRadius;\r\n        var b = ellipsoidGeodesic._ellipsoid.minimumRadius;\r\n        var f = (a - b) / a;\r\n\r\n        var cosineHeading = Math.cos(ellipsoidGeodesic._startHeading);\r\n        var sineHeading = Math.sin(ellipsoidGeodesic._startHeading);\r\n\r\n        var tanU = (1 - f) * Math.tan(ellipsoidGeodesic._start.latitude);\r\n\r\n        var cosineU = 1.0 / Math.sqrt(1.0 + tanU * tanU);\r\n        var sineU = cosineU * tanU;\r\n\r\n        var sigma = Math.atan2(tanU, cosineHeading);\r\n\r\n        var sineAlpha = cosineU * sineHeading;\r\n        var sineSquaredAlpha = sineAlpha * sineAlpha;\r\n\r\n        var cosineSquaredAlpha = 1.0 - sineSquaredAlpha;\r\n        var cosineAlpha = Math.sqrt(cosineSquaredAlpha);\r\n\r\n        var u2Over4 = uSquared / 4.0;\r\n        var u4Over16 = u2Over4 * u2Over4;\r\n        var u6Over64 = u4Over16 * u2Over4;\r\n        var u8Over256 = u4Over16 * u4Over16;\r\n\r\n        var a0 = (1.0 + u2Over4 - 3.0 * u4Over16 / 4.0 + 5.0 * u6Over64 / 4.0 - 175.0 * u8Over256 / 64.0);\r\n        var a1 = (1.0 - u2Over4 + 15.0 * u4Over16 / 8.0 - 35.0 * u6Over64 / 8.0);\r\n        var a2 = (1.0 - 3.0 * u2Over4 + 35.0 * u4Over16 / 4.0);\r\n        var a3 = (1.0 - 5.0 * u2Over4);\r\n\r\n        var distanceRatio = a0 * sigma - a1 * Math.sin(2.0 * sigma) * u2Over4 / 2.0 - a2 * Math.sin(4.0 * sigma) * u4Over16 / 16.0 -\r\n                            a3 * Math.sin(6.0 * sigma) * u6Over64 / 48.0 - Math.sin(8.0 * sigma) * 5.0 * u8Over256 / 512;\r\n\r\n        var constants = ellipsoidGeodesic._constants;\r\n\r\n        constants.a = a;\r\n        constants.b = b;\r\n        constants.f = f;\r\n        constants.cosineHeading = cosineHeading;\r\n        constants.sineHeading = sineHeading;\r\n        constants.tanU = tanU;\r\n        constants.cosineU = cosineU;\r\n        constants.sineU = sineU;\r\n        constants.sigma = sigma;\r\n        constants.sineAlpha = sineAlpha;\r\n        constants.sineSquaredAlpha = sineSquaredAlpha;\r\n        constants.cosineSquaredAlpha = cosineSquaredAlpha;\r\n        constants.cosineAlpha = cosineAlpha;\r\n        constants.u2Over4 = u2Over4;\r\n        constants.u4Over16 = u4Over16;\r\n        constants.u6Over64 = u6Over64;\r\n        constants.u8Over256 = u8Over256;\r\n        constants.a0 = a0;\r\n        constants.a1 = a1;\r\n        constants.a2 = a2;\r\n        constants.a3 = a3;\r\n        constants.distanceRatio = distanceRatio;\r\n    }\r\n\r\n    function computeC(f, cosineSquaredAlpha) {\r\n        return f * cosineSquaredAlpha * (4.0 + f * (4.0 - 3.0 * cosineSquaredAlpha)) / 16.0;\r\n    }\r\n\r\n    function computeDeltaLambda(f, sineAlpha, cosineSquaredAlpha, sigma, sineSigma, cosineSigma, cosineTwiceSigmaMidpoint) {\r\n        var C = computeC(f, cosineSquaredAlpha);\r\n\r\n        return (1.0 - C) * f * sineAlpha * (sigma + C * sineSigma * (cosineTwiceSigmaMidpoint +\r\n                C * cosineSigma * (2.0 * cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint - 1.0)));\r\n    }\r\n\r\n    function vincentyInverseFormula(ellipsoidGeodesic, major, minor, firstLongitude, firstLatitude, secondLongitude, secondLatitude) {\r\n        var eff = (major - minor) / major;\r\n        var l = secondLongitude - firstLongitude;\r\n\r\n        var u1 = Math.atan((1 - eff) * Math.tan(firstLatitude));\r\n        var u2 = Math.atan((1 - eff) * Math.tan(secondLatitude));\r\n\r\n        var cosineU1 = Math.cos(u1);\r\n        var sineU1 = Math.sin(u1);\r\n        var cosineU2 = Math.cos(u2);\r\n        var sineU2 = Math.sin(u2);\r\n\r\n        var cc = cosineU1 * cosineU2;\r\n        var cs = cosineU1 * sineU2;\r\n        var ss = sineU1 * sineU2;\r\n        var sc = sineU1 * cosineU2;\r\n\r\n        var lambda = l;\r\n        var lambdaDot = CesiumMath.TWO_PI;\r\n\r\n        var cosineLambda = Math.cos(lambda);\r\n        var sineLambda = Math.sin(lambda);\r\n\r\n        var sigma;\r\n        var cosineSigma;\r\n        var sineSigma;\r\n        var cosineSquaredAlpha;\r\n        var cosineTwiceSigmaMidpoint;\r\n\r\n        do {\r\n            cosineLambda = Math.cos(lambda);\r\n            sineLambda = Math.sin(lambda);\r\n\r\n            var temp = cs - sc * cosineLambda;\r\n            sineSigma = Math.sqrt(cosineU2 * cosineU2 * sineLambda * sineLambda + temp * temp);\r\n            cosineSigma = ss + cc * cosineLambda;\r\n\r\n            sigma = Math.atan2(sineSigma, cosineSigma);\r\n\r\n            var sineAlpha;\r\n\r\n            if (sineSigma === 0.0) {\r\n                sineAlpha = 0.0;\r\n                cosineSquaredAlpha = 1.0;\r\n            } else {\r\n                sineAlpha = cc * sineLambda / sineSigma;\r\n                cosineSquaredAlpha = 1.0 - sineAlpha * sineAlpha;\r\n            }\r\n\r\n            lambdaDot = lambda;\r\n\r\n            cosineTwiceSigmaMidpoint = cosineSigma - 2.0 * ss / cosineSquaredAlpha;\r\n\r\n            if (isNaN(cosineTwiceSigmaMidpoint)) {\r\n                cosineTwiceSigmaMidpoint = 0.0;\r\n            }\r\n\r\n            lambda = l + computeDeltaLambda(eff, sineAlpha, cosineSquaredAlpha,\r\n                                            sigma, sineSigma, cosineSigma, cosineTwiceSigmaMidpoint);\r\n        } while (Math.abs(lambda - lambdaDot) > CesiumMath.EPSILON12);\r\n\r\n        var uSquared = cosineSquaredAlpha * (major * major - minor * minor) / (minor * minor);\r\n        var A = 1.0 + uSquared * (4096.0 + uSquared * (uSquared * (320.0 - 175.0 * uSquared) - 768.0)) / 16384.0;\r\n        var B = uSquared * (256.0 + uSquared * (uSquared * (74.0 - 47.0 * uSquared) - 128.0)) / 1024.0;\r\n\r\n        var cosineSquaredTwiceSigmaMidpoint = cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint;\r\n        var deltaSigma = B * sineSigma * (cosineTwiceSigmaMidpoint + B * (cosineSigma *\r\n                (2.0 * cosineSquaredTwiceSigmaMidpoint - 1.0) - B * cosineTwiceSigmaMidpoint *\r\n                (4.0 * sineSigma * sineSigma - 3.0) * (4.0 * cosineSquaredTwiceSigmaMidpoint - 3.0) / 6.0) / 4.0);\r\n\r\n        var distance = minor * A * (sigma - deltaSigma);\r\n\r\n        var startHeading = Math.atan2(cosineU2 * sineLambda, cs - sc * cosineLambda);\r\n        var endHeading = Math.atan2(cosineU1 * sineLambda, cs * cosineLambda - sc);\r\n\r\n        ellipsoidGeodesic._distance = distance;\r\n        ellipsoidGeodesic._startHeading = startHeading;\r\n        ellipsoidGeodesic._endHeading = endHeading;\r\n        ellipsoidGeodesic._uSquared = uSquared;\r\n    }\r\n\r\n    var scratchCart1 = new Cartesian3();\r\n    var scratchCart2 = new Cartesian3();\r\n    function computeProperties(ellipsoidGeodesic, start, end, ellipsoid) {\r\n        var firstCartesian = Cartesian3.normalize(ellipsoid.cartographicToCartesian(start, scratchCart2), scratchCart1);\r\n        var lastCartesian = Cartesian3.normalize(ellipsoid.cartographicToCartesian(end, scratchCart2), scratchCart2);\r\n\r\n        \r\n\r\n        vincentyInverseFormula(ellipsoidGeodesic, ellipsoid.maximumRadius, ellipsoid.minimumRadius,\r\n                               start.longitude, start.latitude, end.longitude, end.latitude);\r\n\r\n        ellipsoidGeodesic._start = Cartographic.clone(start, ellipsoidGeodesic._start);\r\n        ellipsoidGeodesic._end = Cartographic.clone(end, ellipsoidGeodesic._end);\r\n        ellipsoidGeodesic._start.height = 0;\r\n        ellipsoidGeodesic._end.height = 0;\r\n\r\n        setConstants(ellipsoidGeodesic);\r\n    }\r\n\r\n    /**\r\n     * Initializes a geodesic on the ellipsoid connecting the two provided planetodetic points.\r\n     *\r\n     * @alias EllipsoidGeodesic\r\n     * @constructor\r\n     *\r\n     * @param {Cartographic} [start] The initial planetodetic point on the path.\r\n     * @param {Cartographic} [end] The final planetodetic point on the path.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the geodesic lies.\r\n     */\r\n    function EllipsoidGeodesic(start, end, ellipsoid) {\r\n        var e = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        this._ellipsoid = e;\r\n        this._start = new Cartographic();\r\n        this._end = new Cartographic();\r\n\r\n        this._constants = {};\r\n        this._startHeading = undefined;\r\n        this._endHeading = undefined;\r\n        this._distance = undefined;\r\n        this._uSquared = undefined;\r\n\r\n        if (defined(start) && defined(end)) {\r\n            computeProperties(this, start, end, e);\r\n        }\r\n    }\r\n\r\n    defineProperties(EllipsoidGeodesic.prototype, {\r\n        /**\r\n         * Gets the ellipsoid.\r\n         * @memberof EllipsoidGeodesic.prototype\r\n         * @type {Ellipsoid}\r\n         * @readonly\r\n         */\r\n        ellipsoid : {\r\n            get : function() {\r\n                return this._ellipsoid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the surface distance between the start and end point\r\n         * @memberof EllipsoidGeodesic.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        surfaceDistance : {\r\n            get : function() {\r\n                \r\n\r\n                return this._distance;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the initial planetodetic point on the path.\r\n         * @memberof EllipsoidGeodesic.prototype\r\n         * @type {Cartographic}\r\n         * @readonly\r\n         */\r\n        start : {\r\n            get : function() {\r\n                return this._start;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the final planetodetic point on the path.\r\n         * @memberof EllipsoidGeodesic.prototype\r\n         * @type {Cartographic}\r\n         * @readonly\r\n         */\r\n        end : {\r\n            get : function() {\r\n                return this._end;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the heading at the initial point.\r\n         * @memberof EllipsoidGeodesic.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        startHeading : {\r\n            get : function() {\r\n                \r\n\r\n                return this._startHeading;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the heading at the final point.\r\n         * @memberof EllipsoidGeodesic.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        endHeading : {\r\n            get : function() {\r\n                \r\n\r\n                return this._endHeading;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Sets the start and end points of the geodesic\r\n     *\r\n     * @param {Cartographic} start The initial planetodetic point on the path.\r\n     * @param {Cartographic} end The final planetodetic point on the path.\r\n     */\r\n    EllipsoidGeodesic.prototype.setEndPoints = function(start, end) {\r\n        \r\n\r\n        computeProperties(this, start, end, this._ellipsoid);\r\n    };\r\n\r\n    /**\r\n     * Provides the location of a point at the indicated portion along the geodesic.\r\n     *\r\n     * @param {Number} fraction The portion of the distance between the initial and final points.\r\n     * @param {Cartographic} result The object in which to store the result.\r\n     * @returns {Cartographic} The location of the point along the geodesic.\r\n     */\r\n    EllipsoidGeodesic.prototype.interpolateUsingFraction = function(fraction, result) {\r\n        return this.interpolateUsingSurfaceDistance(this._distance * fraction, result);\r\n    };\r\n\r\n    /**\r\n     * Provides the location of a point at the indicated distance along the geodesic.\r\n     *\r\n     * @param {Number} distance The distance from the inital point to the point of interest along the geodesic\r\n     * @param {Cartographic} result The object in which to store the result.\r\n     * @returns {Cartographic} The location of the point along the geodesic.\r\n     *\r\n     * @exception {DeveloperError} start and end must be set before calling function interpolateUsingSurfaceDistance\r\n     */\r\n    EllipsoidGeodesic.prototype.interpolateUsingSurfaceDistance = function(distance, result) {\r\n        \r\n\r\n        var constants = this._constants;\r\n\r\n        var s = constants.distanceRatio + distance / constants.b;\r\n\r\n        var cosine2S = Math.cos(2.0 * s);\r\n        var cosine4S = Math.cos(4.0 * s);\r\n        var cosine6S = Math.cos(6.0 * s);\r\n        var sine2S = Math.sin(2.0 * s);\r\n        var sine4S = Math.sin(4.0 * s);\r\n        var sine6S = Math.sin(6.0 * s);\r\n        var sine8S = Math.sin(8.0 * s);\r\n\r\n        var s2 = s * s;\r\n        var s3 = s * s2;\r\n\r\n        var u8Over256 = constants.u8Over256;\r\n        var u2Over4 = constants.u2Over4;\r\n        var u6Over64 = constants.u6Over64;\r\n        var u4Over16 = constants.u4Over16;\r\n        var sigma = 2.0 * s3 * u8Over256 * cosine2S / 3.0 +\r\n            s * (1.0 - u2Over4 + 7.0 * u4Over16 / 4.0 - 15.0 * u6Over64 / 4.0 + 579.0 * u8Over256 / 64.0 -\r\n            (u4Over16 - 15.0 * u6Over64 / 4.0 + 187.0 * u8Over256 / 16.0) * cosine2S -\r\n            (5.0 * u6Over64 / 4.0 - 115.0 * u8Over256 / 16.0) * cosine4S -\r\n            29.0 * u8Over256 * cosine6S / 16.0) +\r\n            (u2Over4 / 2.0 - u4Over16 + 71.0 * u6Over64 / 32.0 - 85.0 * u8Over256 / 16.0) * sine2S +\r\n            (5.0 * u4Over16 / 16.0 - 5.0 * u6Over64 / 4.0 + 383.0 * u8Over256 / 96.0) * sine4S -\r\n            s2 * ((u6Over64 - 11.0 * u8Over256 / 2.0) * sine2S + 5.0 * u8Over256 * sine4S / 2.0) +\r\n            (29.0 * u6Over64 / 96.0 - 29.0 * u8Over256 / 16.0) * sine6S +\r\n            539.0 * u8Over256 * sine8S / 1536.0;\r\n\r\n        var theta = Math.asin(Math.sin(sigma) * constants.cosineAlpha);\r\n        var latitude = Math.atan(constants.a / constants.b * Math.tan(theta));\r\n\r\n        // Redefine in terms of relative argument of latitude.\r\n        sigma = sigma - constants.sigma;\r\n\r\n        var cosineTwiceSigmaMidpoint = Math.cos(2.0 * constants.sigma + sigma);\r\n\r\n        var sineSigma = Math.sin(sigma);\r\n        var cosineSigma = Math.cos(sigma);\r\n\r\n        var cc = constants.cosineU * cosineSigma;\r\n        var ss = constants.sineU * sineSigma;\r\n\r\n        var lambda = Math.atan2(sineSigma * constants.sineHeading, cc - ss * constants.cosineHeading);\r\n\r\n        var l = lambda - computeDeltaLambda(constants.f, constants.sineAlpha, constants.cosineSquaredAlpha,\r\n                                            sigma, sineSigma, cosineSigma, cosineTwiceSigmaMidpoint);\r\n\r\n        if (defined(result)) {\r\n            result.longitude = this._start.longitude + l;\r\n            result.latitude = latitude;\r\n            result.height = 0.0;\r\n            return result;\r\n        }\r\n\r\n        return new Cartographic(this._start.longitude + l, latitude, 0.0);\r\n    };\r\n\r\n    return EllipsoidGeodesic;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EllipsoidGeodesic.js\n// module id = 153\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './CylinderGeometryLibrary',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PrimitiveType',\r\n        './VertexFormat'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        CylinderGeometryLibrary,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PrimitiveType,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var radiusScratch = new Cartesian2();\r\n    var normalScratch = new Cartesian3();\r\n    var bitangentScratch = new Cartesian3();\r\n    var tangentScratch = new Cartesian3();\r\n    var positionScratch = new Cartesian3();\r\n\r\n    /**\r\n     * A description of a cylinder.\r\n     *\r\n     * @alias CylinderGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Number} options.length The length of the cylinder.\r\n     * @param {Number} options.topRadius The radius of the top of the cylinder.\r\n     * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\r\n     * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} options.slices must be greater than or equal to 3.\r\n     *\r\n     * @see CylinderGeometry.createGeometry\r\n     *\r\n     * @example\r\n     * // create cylinder geometry\r\n     * var cylinder = new Cesium.CylinderGeometry({\r\n     *     length: 200000,\r\n     *     topRadius: 80000,\r\n     *     bottomRadius: 200000,\r\n     * });\r\n     * var geometry = Cesium.CylinderGeometry.createGeometry(cylinder);\r\n     */\r\n    function CylinderGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var length = options.length;\r\n        var topRadius = options.topRadius;\r\n        var bottomRadius = options.bottomRadius;\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n        var slices = defaultValue(options.slices, 128);\r\n\r\n        \r\n\r\n        this._length = length;\r\n        this._topRadius = topRadius;\r\n        this._bottomRadius = bottomRadius;\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._slices = slices;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createCylinderGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    CylinderGeometry.packedLength = VertexFormat.packedLength + 5;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CylinderGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CylinderGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._length;\r\n        array[startingIndex++] = value._topRadius;\r\n        array[startingIndex++] = value._bottomRadius;\r\n        array[startingIndex++] = value._slices;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        vertexFormat : scratchVertexFormat,\r\n        length : undefined,\r\n        topRadius : undefined,\r\n        bottomRadius : undefined,\r\n        slices : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CylinderGeometry} [result] The object into which to store the result.\r\n     * @returns {CylinderGeometry} The modified result parameter or a new CylinderGeometry instance if one was not provided.\r\n     */\r\n    CylinderGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var length = array[startingIndex++];\r\n        var topRadius = array[startingIndex++];\r\n        var bottomRadius = array[startingIndex++];\r\n        var slices = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.length = length;\r\n            scratchOptions.topRadius = topRadius;\r\n            scratchOptions.bottomRadius = bottomRadius;\r\n            scratchOptions.slices = slices;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new CylinderGeometry(scratchOptions);\r\n        }\r\n\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._length = length;\r\n        result._topRadius = topRadius;\r\n        result._bottomRadius = bottomRadius;\r\n        result._slices = slices;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a cylinder, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CylinderGeometry} cylinderGeometry A description of the cylinder.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CylinderGeometry.createGeometry = function(cylinderGeometry) {\r\n        var length = cylinderGeometry._length;\r\n        var topRadius = cylinderGeometry._topRadius;\r\n        var bottomRadius = cylinderGeometry._bottomRadius;\r\n        var vertexFormat = cylinderGeometry._vertexFormat;\r\n        var slices = cylinderGeometry._slices;\r\n\r\n        if ((length <= 0) || (topRadius < 0) || (bottomRadius < 0) || ((topRadius === 0) && (bottomRadius === 0))) {\r\n            return;\r\n        }\r\n\r\n        var twoSlices = slices + slices;\r\n        var threeSlices = slices + twoSlices;\r\n        var numVertices = twoSlices + twoSlices;\r\n\r\n        var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, true);\r\n\r\n        var st = (vertexFormat.st) ? new Float32Array(numVertices * 2) : undefined;\r\n        var normals = (vertexFormat.normal) ? new Float32Array(numVertices * 3) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(numVertices * 3) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(numVertices * 3) : undefined;\r\n\r\n        var i;\r\n        var computeNormal = (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent);\r\n\r\n        if (computeNormal) {\r\n            var computeTangent = (vertexFormat.tangent || vertexFormat.bitangent);\r\n\r\n            var normalIndex = 0;\r\n            var tangentIndex = 0;\r\n            var bitangentIndex = 0;\r\n\r\n            var theta = Math.atan2(bottomRadius - topRadius, length);\r\n            var normal = normalScratch;\r\n            normal.z = Math.sin(theta);\r\n            var normalScale = Math.cos(theta);\r\n            var tangent = tangentScratch;\r\n            var bitangent = bitangentScratch;\r\n\r\n            for (i = 0; i < slices; i++) {\r\n                var angle = i / slices * CesiumMath.TWO_PI;\r\n                var x = normalScale * Math.cos(angle);\r\n                var y = normalScale * Math.sin(angle);\r\n                if (computeNormal) {\r\n                    normal.x = x;\r\n                    normal.y = y;\r\n\r\n                    if (computeTangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\r\n                    }\r\n\r\n                    if (vertexFormat.normal) {\r\n                        normals[normalIndex++] = normal.x;\r\n                        normals[normalIndex++] = normal.y;\r\n                        normals[normalIndex++] = normal.z;\r\n                        normals[normalIndex++] = normal.x;\r\n                        normals[normalIndex++] = normal.y;\r\n                        normals[normalIndex++] = normal.z;\r\n                    }\r\n\r\n                    if (vertexFormat.tangent) {\r\n                        tangents[tangentIndex++] = tangent.x;\r\n                        tangents[tangentIndex++] = tangent.y;\r\n                        tangents[tangentIndex++] = tangent.z;\r\n                        tangents[tangentIndex++] = tangent.x;\r\n                        tangents[tangentIndex++] = tangent.y;\r\n                        tangents[tangentIndex++] = tangent.z;\r\n                    }\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                        bitangents[bitangentIndex++] = bitangent.x;\r\n                        bitangents[bitangentIndex++] = bitangent.y;\r\n                        bitangents[bitangentIndex++] = bitangent.z;\r\n                        bitangents[bitangentIndex++] = bitangent.x;\r\n                        bitangents[bitangentIndex++] = bitangent.y;\r\n                        bitangents[bitangentIndex++] = bitangent.z;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < slices; i++) {\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = 0;\r\n                    normals[normalIndex++] = 0;\r\n                    normals[normalIndex++] = -1;\r\n                }\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = 1;\r\n                    tangents[tangentIndex++] = 0;\r\n                    tangents[tangentIndex++] = 0;\r\n                }\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[bitangentIndex++] = 0;\r\n                    bitangents[bitangentIndex++] = -1;\r\n                    bitangents[bitangentIndex++] = 0;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < slices; i++) {\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = 0;\r\n                    normals[normalIndex++] = 0;\r\n                    normals[normalIndex++] = 1;\r\n                }\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = 1;\r\n                    tangents[tangentIndex++] = 0;\r\n                    tangents[tangentIndex++] = 0;\r\n                }\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[bitangentIndex++] = 0;\r\n                    bitangents[bitangentIndex++] = 1;\r\n                    bitangents[bitangentIndex++] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        var numIndices = 12 * slices - 12;\r\n        var indices = IndexDatatype.createTypedArray(numVertices, numIndices);\r\n        var index = 0;\r\n        var j = 0;\r\n        for (i = 0; i < slices - 1; i++) {\r\n            indices[index++] = j;\r\n            indices[index++] = j + 2;\r\n            indices[index++] = j + 3;\r\n\r\n            indices[index++] = j;\r\n            indices[index++] = j + 3;\r\n            indices[index++] = j + 1;\r\n\r\n            j += 2;\r\n        }\r\n\r\n        indices[index++] = twoSlices - 2;\r\n        indices[index++] = 0;\r\n        indices[index++] = 1;\r\n        indices[index++] = twoSlices - 2;\r\n        indices[index++] = 1;\r\n        indices[index++] = twoSlices - 1;\r\n\r\n        for (i = 1; i < slices - 1; i++) {\r\n            indices[index++] = twoSlices + i + 1;\r\n            indices[index++] = twoSlices + i;\r\n            indices[index++] = twoSlices;\r\n        }\r\n\r\n        for (i = 1; i < slices - 1; i++) {\r\n            indices[index++] = threeSlices;\r\n            indices[index++] = threeSlices + i;\r\n            indices[index++] = threeSlices + i + 1;\r\n        }\r\n\r\n        var textureCoordIndex = 0;\r\n        if (vertexFormat.st) {\r\n            var rad = Math.max(topRadius, bottomRadius);\r\n            for (i = 0; i < numVertices; i++) {\r\n                var position = Cartesian3.fromArray(positions, i * 3, positionScratch);\r\n                st[textureCoordIndex++] = (position.x + rad) / (2.0 * rad);\r\n                st[textureCoordIndex++] = (position.y + rad) / (2.0 * rad);\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute: 3,\r\n                values: positions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : st\r\n            });\r\n        }\r\n\r\n        radiusScratch.x = length * 0.5;\r\n        radiusScratch.y = Math.max(bottomRadius, topRadius);\r\n\r\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\r\n\r\n        if (defined(cylinderGeometry._offsetAttribute)) {\r\n            length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : cylinderGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    var unitCylinderGeometry;\r\n\r\n    /**\r\n     * Returns the geometric representation of a unit cylinder, including its vertices, indices, and a bounding sphere.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     *\r\n     * @private\r\n     */\r\n    CylinderGeometry.getUnitCylinder = function() {\r\n        if (!defined(unitCylinderGeometry)) {\r\n            unitCylinderGeometry = CylinderGeometry.createGeometry(new CylinderGeometry({\r\n                topRadius : 1.0,\r\n                bottomRadius : 1.0,\r\n                length : 1.0,\r\n                vertexFormat : VertexFormat.POSITION_ONLY\r\n            }));\r\n        }\r\n        return unitCylinderGeometry;\r\n    };\r\n\r\n    return CylinderGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CylinderGeometry.js\n// module id = 154\n// module chunks = 0","define([\r\n        './Math'\r\n    ], function(\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var CylinderGeometryLibrary = {};\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CylinderGeometryLibrary.computePositions = function(length, topRadius, bottomRadius, slices, fill){\r\n        var topZ = length * 0.5;\r\n        var bottomZ = -topZ;\r\n\r\n        var twoSlice = slices + slices;\r\n        var size = (fill) ? 2 * twoSlice : twoSlice;\r\n        var positions = new Float64Array(size*3);\r\n        var i;\r\n        var index = 0;\r\n        var tbIndex = 0;\r\n        var bottomOffset = (fill) ? twoSlice*3 : 0;\r\n        var topOffset = (fill) ? (twoSlice + slices)*3 : slices*3;\r\n\r\n        for (i = 0; i < slices; i++) {\r\n            var angle = i / slices * CesiumMath.TWO_PI;\r\n            var x = Math.cos(angle);\r\n            var y = Math.sin(angle);\r\n            var bottomX = x * bottomRadius;\r\n            var bottomY = y * bottomRadius;\r\n            var topX = x * topRadius;\r\n            var topY = y * topRadius;\r\n\r\n            positions[tbIndex + bottomOffset] = bottomX;\r\n            positions[tbIndex + bottomOffset + 1] = bottomY;\r\n            positions[tbIndex + bottomOffset + 2] = bottomZ;\r\n\r\n            positions[tbIndex + topOffset] = topX;\r\n            positions[tbIndex + topOffset + 1] = topY;\r\n            positions[tbIndex + topOffset + 2] = topZ;\r\n            tbIndex += 3;\r\n            if (fill) {\r\n                positions[index++] = bottomX;\r\n                positions[index++] = bottomY;\r\n                positions[index++] = bottomZ;\r\n                positions[index++] = topX;\r\n                positions[index++] = topY;\r\n                positions[index++] = topZ;\r\n            }\r\n        }\r\n\r\n        return positions;\r\n    };\r\n\r\n    return CylinderGeometryLibrary;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CylinderGeometryLibrary.js\n// module id = 155\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PrimitiveType'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PrimitiveType) {\r\n    'use strict';\r\n\r\n    var defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\r\n    var cos = Math.cos;\r\n    var sin = Math.sin;\r\n\r\n    /**\r\n     * A description of the outline of an ellipsoid centered at the origin.\r\n     *\r\n     * @alias EllipsoidOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\r\n     * @param {Number} [options.stackPartitions=10] The count of stacks for the ellipsoid (1 greater than the number of parallel lines).\r\n     * @param {Number} [options.slicePartitions=8] The count of slices for the ellipsoid (Equal to the number of radial lines).\r\n     * @param {Number} [options.subdivisions=128] The number of points per line, determining the granularity of the curvature.\r\n     *\r\n     * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n     * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n     * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n     *\r\n     * @example\r\n     * var ellipsoid = new Cesium.EllipsoidOutlineGeometry({\r\n     *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0),\r\n     *   stackPartitions: 6,\r\n     *   slicePartitions: 5\r\n     * });\r\n     * var geometry = Cesium.EllipsoidOutlineGeometry.createGeometry(ellipsoid);\r\n     */\r\n    function EllipsoidOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var radii = defaultValue(options.radii, defaultRadii);\r\n        var stackPartitions = Math.round(defaultValue(options.stackPartitions, 10));\r\n        var slicePartitions = Math.round(defaultValue(options.slicePartitions, 8));\r\n        var subdivisions = Math.round(defaultValue(options.subdivisions, 128));\r\n\r\n        \r\n\r\n        this._radii = Cartesian3.clone(radii);\r\n        this._stackPartitions = stackPartitions;\r\n        this._slicePartitions = slicePartitions;\r\n        this._subdivisions = subdivisions;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createEllipsoidOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    EllipsoidOutlineGeometry.packedLength = Cartesian3.packedLength + 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {EllipsoidOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    EllipsoidOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._radii, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        array[startingIndex++] = value._stackPartitions;\r\n        array[startingIndex++] = value._slicePartitions;\r\n        array[startingIndex++] = value._subdivisions;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchRadii = new Cartesian3();\r\n    var scratchOptions = {\r\n        radii : scratchRadii,\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined,\r\n        subdivisions : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {EllipsoidOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {EllipsoidOutlineGeometry} The modified result parameter or a new EllipsoidOutlineGeometry instance if one was not provided.\r\n     */\r\n    EllipsoidOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var stackPartitions = array[startingIndex++];\r\n        var slicePartitions = array[startingIndex++];\r\n        var subdivisions = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.stackPartitions = stackPartitions;\r\n            scratchOptions.slicePartitions = slicePartitions;\r\n            scratchOptions.subdivisions = subdivisions;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new EllipsoidOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._radii = Cartesian3.clone(radii, result._radii);\r\n        result._stackPartitions = stackPartitions;\r\n        result._slicePartitions = slicePartitions;\r\n        result._subdivisions = subdivisions;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {EllipsoidOutlineGeometry} ellipsoidGeometry A description of the ellipsoid outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    EllipsoidOutlineGeometry.createGeometry = function(ellipsoidGeometry) {\r\n        var radii = ellipsoidGeometry._radii;\r\n\r\n        if ((radii.x <= 0) || (radii.y <= 0) || (radii.z <= 0)) {\r\n            return;\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.fromCartesian3(radii);\r\n        var stackPartitions = ellipsoidGeometry._stackPartitions;\r\n        var slicePartitions = ellipsoidGeometry._slicePartitions;\r\n        var subdivisions = ellipsoidGeometry._subdivisions;\r\n\r\n        var indicesSize = subdivisions * (stackPartitions + slicePartitions - 1);\r\n        var positionSize = indicesSize - slicePartitions + 2;\r\n        var positions = new Float64Array(positionSize * 3);\r\n        var indices = IndexDatatype.createTypedArray(positionSize, indicesSize * 2);\r\n\r\n        var i;\r\n        var j;\r\n        var theta;\r\n        var phi;\r\n        var cosPhi;\r\n        var sinPhi;\r\n        var index = 0;\r\n\r\n        var cosTheta = new Array(subdivisions);\r\n        var sinTheta = new Array(subdivisions);\r\n        for (i = 0; i < subdivisions; i++) {\r\n            theta = CesiumMath.TWO_PI * i / subdivisions;\r\n            cosTheta[i] = cos(theta);\r\n            sinTheta[i] = sin(theta);\r\n        }\r\n\r\n        for (i = 1; i < stackPartitions; i++) {\r\n            phi = Math.PI * i / stackPartitions;\r\n            cosPhi = cos(phi);\r\n            sinPhi = sin(phi);\r\n\r\n            for (j = 0; j < subdivisions; j++) {\r\n                positions[index++] = radii.x * cosTheta[j] * sinPhi;\r\n                positions[index++] = radii.y * sinTheta[j] * sinPhi;\r\n                positions[index++] = radii.z * cosPhi;\r\n            }\r\n        }\r\n\r\n        cosTheta.length = slicePartitions;\r\n        sinTheta.length = slicePartitions;\r\n        for (i = 0; i < slicePartitions; i++) {\r\n            theta = CesiumMath.TWO_PI * i / slicePartitions;\r\n            cosTheta[i] = cos(theta);\r\n            sinTheta[i] = sin(theta);\r\n        }\r\n\r\n        positions[index++] = 0;\r\n        positions[index++] = 0;\r\n        positions[index++] = radii.z;\r\n\r\n        for (i = 1; i < subdivisions; i++) {\r\n            phi = Math.PI * i / subdivisions;\r\n            cosPhi = cos(phi);\r\n            sinPhi = sin(phi);\r\n\r\n            for (j = 0; j < slicePartitions; j++) {\r\n                positions[index++] = radii.x * cosTheta[j] * sinPhi;\r\n                positions[index++] = radii.y * sinTheta[j] * sinPhi;\r\n                positions[index++] = radii.z * cosPhi;\r\n            }\r\n        }\r\n\r\n        positions[index++] = 0;\r\n        positions[index++] = 0;\r\n        positions[index++] = -radii.z;\r\n\r\n        index = 0;\r\n        for (i = 0; i < stackPartitions - 1; ++i) {\r\n            var topRowOffset = (i * subdivisions);\r\n            for (j = 0; j < subdivisions - 1; ++j) {\r\n                indices[index++] = topRowOffset + j;\r\n                indices[index++] = topRowOffset + j + 1;\r\n            }\r\n\r\n            indices[index++] = topRowOffset + subdivisions - 1;\r\n            indices[index++] = topRowOffset;\r\n        }\r\n\r\n        var sliceOffset = subdivisions * (stackPartitions - 1);\r\n        for (j = 1; j < slicePartitions + 1; ++j) {\r\n            indices[index++] = sliceOffset;\r\n            indices[index++] = sliceOffset + j;\r\n        }\r\n\r\n        for (i = 0; i < subdivisions - 2; ++i) {\r\n            var topOffset = (i * slicePartitions) + 1 + sliceOffset;\r\n            var bottomOffset = ((i + 1) * slicePartitions) + 1 + sliceOffset;\r\n\r\n            for (j = 0; j < slicePartitions - 1; ++j) {\r\n                indices[index++] = bottomOffset + j;\r\n                indices[index++] = topOffset + j;\r\n            }\r\n\r\n            indices[index++] = bottomOffset + slicePartitions - 1;\r\n            indices[index++] = topOffset + slicePartitions - 1;\r\n        }\r\n\r\n        var lastPosition = positions.length / 3 - 1;\r\n        for (j = lastPosition - 1; j > lastPosition - slicePartitions - 1; --j) {\r\n            indices[index++] = lastPosition;\r\n            indices[index++] = j;\r\n        }\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position: new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            })\r\n        });\r\n\r\n        if (defined(ellipsoidGeometry._offsetAttribute)) {\r\n            var length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : BoundingSphere.fromEllipsoid(ellipsoid),\r\n            offsetAttribute : ellipsoidGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    return EllipsoidOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EllipsoidOutlineGeometry.js\n// module id = 156\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './Matrix3',\r\n        './Matrix4',\r\n        './OrthographicFrustum',\r\n        './PerspectiveFrustum',\r\n        './PrimitiveType',\r\n        './Quaternion',\r\n        './VertexFormat'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Cartesian4,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        Matrix3,\r\n        Matrix4,\r\n        OrthographicFrustum,\r\n        PerspectiveFrustum,\r\n        PrimitiveType,\r\n        Quaternion,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var PERSPECTIVE = 0;\r\n    var ORTHOGRAPHIC = 1;\r\n\r\n    /**\r\n     * Describes a frustum at the given the origin and orientation.\r\n     *\r\n     * @alias FrustumGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PerspectiveFrustum|OrthographicFrustum} options.frustum The frustum.\r\n     * @param {Cartesian3} options.origin The origin of the frustum.\r\n     * @param {Quaternion} options.orientation The orientation of the frustum.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     */\r\n    function FrustumGeometry(options) {\r\n        \r\n\r\n        var frustum = options.frustum;\r\n        var orientation = options.orientation;\r\n        var origin = options.origin;\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n        // This is private because it is used by DebugCameraPrimitive to draw a multi-frustum by\r\n        // creating multiple FrustumGeometrys. This way the near plane of one frustum doesn't overlap\r\n        // the far plane of another.\r\n        var drawNearPlane = defaultValue(options._drawNearPlane, true);\r\n\r\n        var frustumType;\r\n        var frustumPackedLength;\r\n        if (frustum instanceof PerspectiveFrustum) {\r\n            frustumType = PERSPECTIVE;\r\n            frustumPackedLength = PerspectiveFrustum.packedLength;\r\n        } else if (frustum instanceof OrthographicFrustum) {\r\n            frustumType = ORTHOGRAPHIC;\r\n            frustumPackedLength = OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        this._frustumType = frustumType;\r\n        this._frustum = frustum.clone();\r\n        this._origin = Cartesian3.clone(origin);\r\n        this._orientation = Quaternion.clone(orientation);\r\n        this._drawNearPlane = drawNearPlane;\r\n        this._vertexFormat = vertexFormat;\r\n        this._workerName = 'createFrustumGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = 2 + frustumPackedLength + Cartesian3.packedLength + Quaternion.packedLength + VertexFormat.packedLength;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {FrustumGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    FrustumGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var frustumType = value._frustumType;\r\n        var frustum = value._frustum;\r\n\r\n        array[startingIndex++] = frustumType;\r\n\r\n        if (frustumType === PERSPECTIVE) {\r\n            PerspectiveFrustum.pack(frustum, array, startingIndex);\r\n            startingIndex += PerspectiveFrustum.packedLength;\r\n        } else {\r\n            OrthographicFrustum.pack(frustum, array, startingIndex);\r\n            startingIndex += OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        Cartesian3.pack(value._origin, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n        Quaternion.pack(value._orientation, array, startingIndex);\r\n        startingIndex += Quaternion.packedLength;\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n        array[startingIndex] = value._drawNearPlane ? 1.0 : 0.0;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchPackPerspective = new PerspectiveFrustum();\r\n    var scratchPackOrthographic = new OrthographicFrustum();\r\n    var scratchPackQuaternion = new Quaternion();\r\n    var scratchPackorigin = new Cartesian3();\r\n    var scratchVertexFormat = new VertexFormat();\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {FrustumGeometry} [result] The object into which to store the result.\r\n     */\r\n    FrustumGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var frustumType = array[startingIndex++];\r\n\r\n        var frustum;\r\n        if (frustumType === PERSPECTIVE) {\r\n            frustum = PerspectiveFrustum.unpack(array, startingIndex, scratchPackPerspective);\r\n            startingIndex += PerspectiveFrustum.packedLength;\r\n        } else {\r\n            frustum = OrthographicFrustum.unpack(array, startingIndex, scratchPackOrthographic);\r\n            startingIndex += OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        var origin = Cartesian3.unpack(array, startingIndex, scratchPackorigin);\r\n        startingIndex += Cartesian3.packedLength;\r\n        var orientation = Quaternion.unpack(array, startingIndex, scratchPackQuaternion);\r\n        startingIndex += Quaternion.packedLength;\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n        var drawNearPlane = array[startingIndex] === 1.0;\r\n\r\n        if (!defined(result)) {\r\n            return new FrustumGeometry({\r\n                frustum : frustum,\r\n                origin : origin,\r\n                orientation : orientation,\r\n                vertexFormat : vertexFormat,\r\n                _drawNearPlane : drawNearPlane\r\n            });\r\n        }\r\n\r\n        var frustumResult = frustumType === result._frustumType ? result._frustum : undefined;\r\n        result._frustum = frustum.clone(frustumResult);\r\n\r\n        result._frustumType = frustumType;\r\n        result._origin = Cartesian3.clone(origin, result._origin);\r\n        result._orientation = Quaternion.clone(orientation, result._orientation);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._drawNearPlane = drawNearPlane;\r\n\r\n        return result;\r\n    };\r\n\r\n    function getAttributes(offset, normals, tangents, bitangents, st, normal, tangent, bitangent) {\r\n        var stOffset = offset / 3 * 2;\r\n\r\n        for (var i = 0; i < 4; ++i) {\r\n            if (defined(normals)) {\r\n                normals[offset] = normal.x;\r\n                normals[offset + 1] = normal.y;\r\n                normals[offset + 2] = normal.z;\r\n            }\r\n            if (defined(tangents)) {\r\n                tangents[offset] = tangent.x;\r\n                tangents[offset + 1] = tangent.y;\r\n                tangents[offset + 2] = tangent.z;\r\n            }\r\n            if (defined(bitangents)) {\r\n                bitangents[offset] = bitangent.x;\r\n                bitangents[offset + 1] = bitangent.y;\r\n                bitangents[offset + 2] = bitangent.z;\r\n            }\r\n            offset += 3;\r\n        }\r\n\r\n        st[stOffset] = 0.0;\r\n        st[stOffset + 1] = 0.0;\r\n        st[stOffset + 2] = 1.0;\r\n        st[stOffset + 3] = 0.0;\r\n        st[stOffset + 4] = 1.0;\r\n        st[stOffset + 5] = 1.0;\r\n        st[stOffset + 6] = 0.0;\r\n        st[stOffset + 7] = 1.0;\r\n    }\r\n\r\n    var scratchRotationMatrix = new Matrix3();\r\n    var scratchViewMatrix = new Matrix4();\r\n    var scratchInverseMatrix = new Matrix4();\r\n\r\n    var scratchXDirection = new Cartesian3();\r\n    var scratchYDirection = new Cartesian3();\r\n    var scratchZDirection = new Cartesian3();\r\n    var scratchNegativeX = new Cartesian3();\r\n    var scratchNegativeY = new Cartesian3();\r\n    var scratchNegativeZ = new Cartesian3();\r\n\r\n    var frustumSplits = new Array(3);\r\n\r\n    var frustumCornersNDC = new Array(4);\r\n    frustumCornersNDC[0] = new Cartesian4(-1.0, -1.0, 1.0, 1.0);\r\n    frustumCornersNDC[1] = new Cartesian4(1.0, -1.0, 1.0, 1.0);\r\n    frustumCornersNDC[2] = new Cartesian4(1.0, 1.0, 1.0, 1.0);\r\n    frustumCornersNDC[3] = new Cartesian4(-1.0, 1.0, 1.0, 1.0);\r\n\r\n    var scratchFrustumCorners = new Array(4);\r\n    for (var i = 0; i < 4; ++i) {\r\n        scratchFrustumCorners[i] = new Cartesian4();\r\n    }\r\n\r\n    FrustumGeometry._computeNearFarPlanes = function(origin, orientation, frustumType, frustum, positions, xDirection, yDirection, zDirection) {\r\n        var rotationMatrix = Matrix3.fromQuaternion(orientation, scratchRotationMatrix);\r\n        var x = defaultValue(xDirection, scratchXDirection);\r\n        var y = defaultValue(yDirection, scratchYDirection);\r\n        var z = defaultValue(zDirection, scratchZDirection);\r\n\r\n        x = Matrix3.getColumn(rotationMatrix, 0, x);\r\n        y = Matrix3.getColumn(rotationMatrix, 1, y);\r\n        z = Matrix3.getColumn(rotationMatrix, 2, z);\r\n\r\n        Cartesian3.normalize(x, x);\r\n        Cartesian3.normalize(y, y);\r\n        Cartesian3.normalize(z, z);\r\n\r\n        Cartesian3.negate(x, x);\r\n\r\n        var view = Matrix4.computeView(origin, z, y, x, scratchViewMatrix);\r\n\r\n        var inverseView;\r\n        var inverseViewProjection;\r\n        if (frustumType === PERSPECTIVE) {\r\n            var projection = frustum.projectionMatrix;\r\n            var viewProjection = Matrix4.multiply(projection, view, scratchInverseMatrix);\r\n            inverseViewProjection = Matrix4.inverse(viewProjection, scratchInverseMatrix);\r\n        } else {\r\n            inverseView = Matrix4.inverseTransformation(view, scratchInverseMatrix);\r\n        }\r\n\r\n        if (defined(inverseViewProjection)) {\r\n            frustumSplits[0] = frustum.near;\r\n            frustumSplits[1] = frustum.far;\r\n        } else {\r\n            frustumSplits[0] = 0.0;\r\n            frustumSplits[1] = frustum.near;\r\n            frustumSplits[2] = frustum.far;\r\n        }\r\n\r\n        for (var i = 0; i < 2; ++i) {\r\n            for (var j = 0; j < 4; ++j) {\r\n                var corner = Cartesian4.clone(frustumCornersNDC[j], scratchFrustumCorners[j]);\r\n\r\n                if (!defined(inverseViewProjection)) {\r\n                    if (defined(frustum._offCenterFrustum)) {\r\n                        frustum = frustum._offCenterFrustum;\r\n                    }\r\n\r\n                    var near = frustumSplits[i];\r\n                    var far = frustumSplits[i + 1];\r\n\r\n                    corner.x = (corner.x * (frustum.right - frustum.left) + frustum.left + frustum.right) * 0.5;\r\n                    corner.y = (corner.y * (frustum.top - frustum.bottom) + frustum.bottom + frustum.top) * 0.5;\r\n                    corner.z = (corner.z * (near - far) - near - far) * 0.5;\r\n                    corner.w = 1.0;\r\n\r\n                    Matrix4.multiplyByVector(inverseView, corner, corner);\r\n                } else {\r\n                    corner = Matrix4.multiplyByVector(inverseViewProjection, corner, corner);\r\n\r\n                    // Reverse perspective divide\r\n                    var w = 1.0 / corner.w;\r\n                    Cartesian3.multiplyByScalar(corner, w, corner);\r\n\r\n                    Cartesian3.subtract(corner, origin, corner);\r\n                    Cartesian3.normalize(corner, corner);\r\n\r\n                    var fac = Cartesian3.dot(z, corner);\r\n                    Cartesian3.multiplyByScalar(corner, frustumSplits[i] / fac, corner);\r\n                    Cartesian3.add(corner, origin, corner);\r\n                }\r\n\r\n                positions[12 * i + j * 3] = corner.x;\r\n                positions[12 * i + j * 3 + 1] = corner.y;\r\n                positions[12 * i + j * 3 + 2] = corner.z;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a frustum, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {FrustumGeometry} frustumGeometry A description of the frustum.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    FrustumGeometry.createGeometry = function(frustumGeometry) {\r\n        var frustumType = frustumGeometry._frustumType;\r\n        var frustum = frustumGeometry._frustum;\r\n        var origin = frustumGeometry._origin;\r\n        var orientation = frustumGeometry._orientation;\r\n        var drawNearPlane = frustumGeometry._drawNearPlane;\r\n        var vertexFormat = frustumGeometry._vertexFormat;\r\n\r\n        var numberOfPlanes = drawNearPlane ? 6 : 5;\r\n        var positions = new Float64Array(3 * 4 * 6);\r\n        FrustumGeometry._computeNearFarPlanes(origin, orientation, frustumType, frustum, positions);\r\n\r\n        // -x plane\r\n        var offset = 3 * 4 * 2;\r\n        positions[offset]      = positions[3 * 4];\r\n        positions[offset + 1]  = positions[3 * 4 + 1];\r\n        positions[offset + 2]  = positions[3 * 4 + 2];\r\n        positions[offset + 3]  = positions[0];\r\n        positions[offset + 4]  = positions[1];\r\n        positions[offset + 5]  = positions[2];\r\n        positions[offset + 6]  = positions[3 * 3];\r\n        positions[offset + 7]  = positions[3 * 3 + 1];\r\n        positions[offset + 8]  = positions[3 * 3 + 2];\r\n        positions[offset + 9]  = positions[3 * 7];\r\n        positions[offset + 10] = positions[3 * 7 + 1];\r\n        positions[offset + 11] = positions[3 * 7 + 2];\r\n\r\n        // -y plane\r\n        offset += 3 * 4;\r\n        positions[offset]      = positions[3 * 5];\r\n        positions[offset + 1]  = positions[3 * 5 + 1];\r\n        positions[offset + 2]  = positions[3 * 5 + 2];\r\n        positions[offset + 3]  = positions[3];\r\n        positions[offset + 4]  = positions[3 + 1];\r\n        positions[offset + 5]  = positions[3 + 2];\r\n        positions[offset + 6]  = positions[0];\r\n        positions[offset + 7]  = positions[1];\r\n        positions[offset + 8]  = positions[2];\r\n        positions[offset + 9]  = positions[3 * 4];\r\n        positions[offset + 10] = positions[3 * 4 + 1];\r\n        positions[offset + 11] = positions[3 * 4 + 2];\r\n\r\n        // +x plane\r\n        offset += 3 * 4;\r\n        positions[offset]      = positions[3];\r\n        positions[offset + 1]  = positions[3 + 1];\r\n        positions[offset + 2]  = positions[3 + 2];\r\n        positions[offset + 3]  = positions[3 * 5];\r\n        positions[offset + 4]  = positions[3 * 5 + 1];\r\n        positions[offset + 5]  = positions[3 * 5 + 2];\r\n        positions[offset + 6]  = positions[3 * 6];\r\n        positions[offset + 7]  = positions[3 * 6 + 1];\r\n        positions[offset + 8]  = positions[3 * 6 + 2];\r\n        positions[offset + 9]  = positions[3 * 2];\r\n        positions[offset + 10] = positions[3 * 2 + 1];\r\n        positions[offset + 11] = positions[3 * 2 + 2];\r\n\r\n        // +y plane\r\n        offset += 3 * 4;\r\n        positions[offset]      = positions[3 * 2];\r\n        positions[offset + 1]  = positions[3 * 2 + 1];\r\n        positions[offset + 2]  = positions[3 * 2 + 2];\r\n        positions[offset + 3]  = positions[3 * 6];\r\n        positions[offset + 4]  = positions[3 * 6 + 1];\r\n        positions[offset + 5]  = positions[3 * 6 + 2];\r\n        positions[offset + 6]  = positions[3 * 7];\r\n        positions[offset + 7]  = positions[3 * 7 + 1];\r\n        positions[offset + 8]  = positions[3 * 7 + 2];\r\n        positions[offset + 9]  = positions[3 * 3];\r\n        positions[offset + 10] = positions[3 * 3 + 1];\r\n        positions[offset + 11] = positions[3 * 3 + 2];\r\n\r\n        if (!drawNearPlane) {\r\n            positions = positions.subarray(3 * 4);\r\n        }\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position : new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            })\r\n        });\r\n\r\n        if (defined(vertexFormat.normal) || defined(vertexFormat.tangent) || defined(vertexFormat.bitangent) || defined(vertexFormat.st)) {\r\n            var normals = defined(vertexFormat.normal) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n            var tangents = defined(vertexFormat.tangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n            var bitangents = defined(vertexFormat.bitangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n            var st = defined(vertexFormat.st) ? new Float32Array(2 * 4 * numberOfPlanes) : undefined;\r\n\r\n            var x = scratchXDirection;\r\n            var y = scratchYDirection;\r\n            var z = scratchZDirection;\r\n\r\n            var negativeX = Cartesian3.negate(x, scratchNegativeX);\r\n            var negativeY = Cartesian3.negate(y, scratchNegativeY);\r\n            var negativeZ = Cartesian3.negate(z, scratchNegativeZ);\r\n\r\n            offset = 0;\r\n            if (drawNearPlane) {\r\n                getAttributes(offset, normals, tangents, bitangents, st, negativeZ, x, y); // near\r\n                offset += 3 * 4;\r\n            }\r\n            getAttributes(offset, normals, tangents, bitangents, st, z, negativeX, y); // far\r\n            offset += 3 * 4;\r\n            getAttributes(offset, normals, tangents, bitangents, st, negativeX, negativeZ, y); // -x\r\n            offset += 3 * 4;\r\n            getAttributes(offset, normals, tangents, bitangents, st, negativeY, negativeZ, negativeX); // -y\r\n            offset += 3 * 4;\r\n            getAttributes(offset, normals, tangents, bitangents, st, x, z, y); // +x\r\n            offset += 3 * 4;\r\n            getAttributes(offset, normals, tangents, bitangents, st, y, z, negativeX); // +y\r\n\r\n            if (defined(normals)) {\r\n                attributes.normal = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : normals\r\n                });\r\n            }\r\n            if (defined(tangents)) {\r\n                attributes.tangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : tangents\r\n                });\r\n            }\r\n            if (defined(bitangents)) {\r\n                attributes.bitangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : bitangents\r\n                });\r\n            }\r\n            if (defined(st)) {\r\n                attributes.st = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 2,\r\n                    values : st\r\n                });\r\n            }\r\n        }\r\n\r\n        var indices = new Uint16Array(6 * numberOfPlanes);\r\n        for (var i = 0; i < numberOfPlanes; ++i) {\r\n            var indexOffset = i * 6;\r\n            var index = i * 4;\r\n\r\n            indices[indexOffset] = index;\r\n            indices[indexOffset + 1] = index + 1;\r\n            indices[indexOffset + 2] = index + 2;\r\n            indices[indexOffset + 3] = index;\r\n            indices[indexOffset + 4] = index + 2;\r\n            indices[indexOffset + 5] = index + 3;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : BoundingSphere.fromVertices(positions)\r\n        });\r\n    };\r\n\r\n    return FrustumGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/FrustumGeometry.js\n// module id = 157\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Math',\r\n        './OrthographicOffCenterFrustum'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        CesiumMath,\r\n        OrthographicOffCenterFrustum) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The viewing frustum is defined by 6 planes.\r\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin/camera position.\r\n     *\r\n     * @alias OrthographicFrustum\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Number} [options.width] The width of the frustum in meters.\r\n     * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\r\n     * @param {Number} [options.near=1.0] The distance of the near plane.\r\n     * @param {Number} [options.far=500000000.0] The distance of the far plane.\r\n     *\r\n     * @example\r\n     * var maxRadii = ellipsoid.maximumRadius;\r\n     *\r\n     * var frustum = new Cesium.OrthographicFrustum();\r\n     * frustum.near = 0.01 * maxRadii;\r\n     * frustum.far = 50.0 * maxRadii;\r\n     */\r\n    function OrthographicFrustum(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._offCenterFrustum = new OrthographicOffCenterFrustum();\r\n\r\n        /**\r\n         * The horizontal width of the frustum in meters.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.width = options.width;\r\n        this._width = undefined;\r\n\r\n        /**\r\n         * The aspect ratio of the frustum's width to it's height.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.aspectRatio = options.aspectRatio;\r\n        this._aspectRatio = undefined;\r\n\r\n        /**\r\n         * The distance of the near plane.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.near = defaultValue(options.near, 1.0);\r\n        this._near = this.near;\r\n\r\n        /**\r\n         * The distance of the far plane.\r\n         * @type {Number}\r\n         * @default 500000000.0;\r\n         */\r\n        this.far = defaultValue(options.far, 500000000.0);\r\n        this._far = this.far;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    OrthographicFrustum.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {OrthographicFrustum} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    OrthographicFrustum.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.width;\r\n        array[startingIndex++] = value.aspectRatio;\r\n        array[startingIndex++] = value.near;\r\n        array[startingIndex] = value.far;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {OrthographicFrustum} [result] The object into which to store the result.\r\n     * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\r\n     */\r\n    OrthographicFrustum.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new OrthographicFrustum();\r\n        }\r\n\r\n        result.width = array[startingIndex++];\r\n        result.aspectRatio = array[startingIndex++];\r\n        result.near = array[startingIndex++];\r\n        result.far = array[startingIndex];\r\n\r\n        return result;\r\n    };\r\n\r\n    function update(frustum) {\r\n        \r\n\r\n        var f = frustum._offCenterFrustum;\r\n\r\n        if (frustum.width !== frustum._width || frustum.aspectRatio !== frustum._aspectRatio ||\r\n            frustum.near !== frustum._near || frustum.far !== frustum._far) {\r\n            \r\n\r\n            frustum._aspectRatio = frustum.aspectRatio;\r\n            frustum._width = frustum.width;\r\n            frustum._near = frustum.near;\r\n            frustum._far = frustum.far;\r\n\r\n            var ratio = 1.0 / frustum.aspectRatio;\r\n            f.right = frustum.width * 0.5;\r\n            f.left = -f.right;\r\n            f.top = ratio * f.right;\r\n            f.bottom = -f.top;\r\n            f.near = frustum.near;\r\n            f.far = frustum.far;\r\n\r\n        }\r\n    }\r\n\r\n    defineProperties(OrthographicFrustum.prototype, {\r\n        /**\r\n         * Gets the orthographic projection matrix computed from the view frustum.\r\n         * @memberof OrthographicFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         */\r\n        projectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._offCenterFrustum.projectionMatrix;\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    /**\r\n     * Creates a culling volume for this frustum.\r\n     *\r\n     * @param {Cartesian3} position The eye position.\r\n     * @param {Cartesian3} direction The view direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n     *\r\n     * @example\r\n     * // Check if a bounding volume intersects the frustum.\r\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n     */\r\n    OrthographicFrustum.prototype.computeCullingVolume = function(position, direction, up) {\r\n        update(this);\r\n        return this._offCenterFrustum.computeCullingVolume(position, direction, up);\r\n    };\r\n\r\n    /**\r\n     * Returns the pixel's width and height in meters.\r\n     *\r\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n     * @param {Number} distance The distance to the near plane in meters.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n     *\r\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n     *\r\n     * @example\r\n     * // Example 1\r\n     * // Get the width and height of a pixel.\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, new Cesium.Cartesian2());\r\n     */\r\n    OrthographicFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, result) {\r\n        update(this);\r\n        return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result);\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a OrthographicFrustum instance.\r\n     *\r\n     * @param {OrthographicFrustum} [result] The object onto which to store the result.\r\n     * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\r\n     */\r\n    OrthographicFrustum.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new OrthographicFrustum();\r\n        }\r\n\r\n        result.aspectRatio = this.aspectRatio;\r\n        result.width = this.width;\r\n        result.near = this.near;\r\n        result.far = this.far;\r\n\r\n        // force update of clone to compute matrices\r\n        result._aspectRatio = undefined;\r\n        result._width = undefined;\r\n        result._near = undefined;\r\n        result._far = undefined;\r\n\r\n        this._offCenterFrustum.clone(result._offCenterFrustum);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrthographicFrustum componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {OrthographicFrustum} [other] The right hand side OrthographicFrustum.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    OrthographicFrustum.prototype.equals = function(other) {\r\n        if (!defined(other) || !(other instanceof OrthographicFrustum)) {\r\n            return false;\r\n        }\r\n\r\n        update(this);\r\n        update(other);\r\n\r\n        return (this.width === other.width &&\r\n                this.aspectRatio === other.aspectRatio &&\r\n                this._offCenterFrustum.equals(other._offCenterFrustum));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrthographicFrustum componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {OrthographicFrustum} other The right hand side OrthographicFrustum.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    OrthographicFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\r\n        if (!defined(other) || !(other instanceof OrthographicFrustum)) {\r\n            return false;\r\n        }\r\n\r\n        update(this);\r\n        update(other);\r\n\r\n        return (CesiumMath.equalsEpsilon(this.width, other.width, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) &&\r\n                this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    return OrthographicFrustum;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/OrthographicFrustum.js\n// module id = 158\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Intersect',\r\n        './Plane'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartesian4,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Intersect,\r\n        Plane) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The culling volume defined by planes.\r\n     *\r\n     * @alias CullingVolume\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian4[]} [planes] An array of clipping planes.\r\n     */\r\n    function CullingVolume(planes) {\r\n        /**\r\n         * Each plane is represented by a Cartesian4 object, where the x, y, and z components\r\n         * define the unit vector normal to the plane, and the w component is the distance of the\r\n         * plane from the origin.\r\n         * @type {Cartesian4[]}\r\n         * @default []\r\n         */\r\n        this.planes = defaultValue(planes, []);\r\n    }\r\n\r\n    var faces = [new Cartesian3(), new Cartesian3(), new Cartesian3()];\r\n    Cartesian3.clone(Cartesian3.UNIT_X, faces[0]);\r\n    Cartesian3.clone(Cartesian3.UNIT_Y, faces[1]);\r\n    Cartesian3.clone(Cartesian3.UNIT_Z, faces[2]);\r\n\r\n    var scratchPlaneCenter = new Cartesian3();\r\n    var scratchPlaneNormal = new Cartesian3();\r\n    var scratchPlane = new Plane(new Cartesian3(1.0, 0.0, 0.0), 0.0);\r\n\r\n    /**\r\n     * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.\r\n     * The planes are aligned to the x, y, and z axes in world coordinates.\r\n     *\r\n     * @param {BoundingSphere} boundingSphere The bounding sphere used to create the culling volume.\r\n     * @param {CullingVolume} [result] The object onto which to store the result.\r\n     * @returns {CullingVolume} The culling volume created from the bounding sphere.\r\n     */\r\n    CullingVolume.fromBoundingSphere = function(boundingSphere, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new CullingVolume();\r\n        }\r\n\r\n        var length = faces.length;\r\n        var planes = result.planes;\r\n        planes.length = 2 * length;\r\n\r\n        var center = boundingSphere.center;\r\n        var radius = boundingSphere.radius;\r\n\r\n        var planeIndex = 0;\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            var faceNormal = faces[i];\r\n\r\n            var plane0 = planes[planeIndex];\r\n            var plane1 = planes[planeIndex + 1];\r\n\r\n            if (!defined(plane0)) {\r\n                plane0 = planes[planeIndex] = new Cartesian4();\r\n            }\r\n            if (!defined(plane1)) {\r\n                plane1 = planes[planeIndex + 1] = new Cartesian4();\r\n            }\r\n\r\n            Cartesian3.multiplyByScalar(faceNormal, -radius, scratchPlaneCenter);\r\n            Cartesian3.add(center, scratchPlaneCenter, scratchPlaneCenter);\r\n\r\n            plane0.x = faceNormal.x;\r\n            plane0.y = faceNormal.y;\r\n            plane0.z = faceNormal.z;\r\n            plane0.w = -Cartesian3.dot(faceNormal, scratchPlaneCenter);\r\n\r\n            Cartesian3.multiplyByScalar(faceNormal, radius, scratchPlaneCenter);\r\n            Cartesian3.add(center, scratchPlaneCenter, scratchPlaneCenter);\r\n\r\n            plane1.x = -faceNormal.x;\r\n            plane1.y = -faceNormal.y;\r\n            plane1.z = -faceNormal.z;\r\n            plane1.w = -Cartesian3.dot(Cartesian3.negate(faceNormal, scratchPlaneNormal), scratchPlaneCenter);\r\n\r\n            planeIndex += 2;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determines whether a bounding volume intersects the culling volume.\r\n     *\r\n     * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.\r\n     * @returns {Intersect}  Intersect.OUTSIDE, Intersect.INTERSECTING, or Intersect.INSIDE.\r\n     */\r\n    CullingVolume.prototype.computeVisibility = function(boundingVolume) {\r\n        \r\n\r\n        var planes = this.planes;\r\n        var intersecting = false;\r\n        for (var k = 0, len = planes.length; k < len; ++k) {\r\n            var result = boundingVolume.intersectPlane(Plane.fromCartesian4(planes[k], scratchPlane));\r\n            if (result === Intersect.OUTSIDE) {\r\n                return Intersect.OUTSIDE;\r\n            } else if (result === Intersect.INTERSECTING) {\r\n                intersecting = true;\r\n            }\r\n        }\r\n\r\n        return intersecting ? Intersect.INTERSECTING : Intersect.INSIDE;\r\n    };\r\n\r\n    /**\r\n     * Determines whether a bounding volume intersects the culling volume.\r\n     *\r\n     * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.\r\n     * @param {Number} parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling\r\n     *                                 volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then\r\n     *                                 the parent (and therefore this) volume is completely inside plane[planeIndex]\r\n     *                                 and that plane check can be skipped.\r\n     * @returns {Number} A plane mask as described above (which can be applied to this boundingVolume's children).\r\n     *\r\n     * @private\r\n     */\r\n    CullingVolume.prototype.computeVisibilityWithPlaneMask = function(boundingVolume, parentPlaneMask) {\r\n        \r\n\r\n        if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {\r\n            // parent is completely outside or completely inside, so this child is as well.\r\n            return parentPlaneMask;\r\n        }\r\n\r\n        // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\r\n        // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\r\n        var mask = CullingVolume.MASK_INSIDE;\r\n\r\n        var planes = this.planes;\r\n        for (var k = 0, len = planes.length; k < len; ++k) {\r\n            // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\r\n            var flag = (k < 31) ? (1 << k) : 0;\r\n            if (k < 31 && (parentPlaneMask & flag) === 0) {\r\n                // boundingVolume is known to be INSIDE this plane.\r\n                continue;\r\n            }\r\n\r\n            var result = boundingVolume.intersectPlane(Plane.fromCartesian4(planes[k], scratchPlane));\r\n            if (result === Intersect.OUTSIDE) {\r\n                return CullingVolume.MASK_OUTSIDE;\r\n            } else if (result === Intersect.INTERSECTING) {\r\n                mask |= flag;\r\n            }\r\n        }\r\n\r\n        return mask;\r\n    };\r\n\r\n    /**\r\n     * For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value\r\n     * represents the case where the object bounding volume is entirely outside the culling volume.\r\n     *\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    CullingVolume.MASK_OUTSIDE = 0xffffffff;\r\n\r\n    /**\r\n     * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\r\n     * represents the case where the object bounding volume is entirely inside the culling volume.\r\n     *\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    CullingVolume.MASK_INSIDE = 0x00000000;\r\n\r\n    /**\r\n     * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\r\n     * represents the case where the object bounding volume (may) intersect all planes of the culling volume.\r\n     *\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    CullingVolume.MASK_INDETERMINATE = 0x7fffffff;\r\n\r\n    return CullingVolume;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CullingVolume.js\n// module id = 159\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Math',\r\n        './PerspectiveOffCenterFrustum'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        CesiumMath,\r\n        PerspectiveOffCenterFrustum) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The viewing frustum is defined by 6 planes.\r\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin/camera position.\r\n     *\r\n     * @alias PerspectiveFrustum\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Number} [options.fov] The angle of the field of view (FOV), in radians.\r\n     * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\r\n     * @param {Number} [options.near=1.0] The distance of the near plane.\r\n     * @param {Number} [options.far=500000000.0] The distance of the far plane.\r\n     * @param {Number} [options.xOffset=0.0] The offset in the x direction.\r\n     * @param {Number} [options.yOffset=0.0] The offset in the y direction.\r\n     *\r\n     * @example\r\n     * var frustum = new Cesium.PerspectiveFrustum({\r\n     *     fov : Cesium.Math.PI_OVER_THREE,\r\n     *     aspectRatio : canvas.clientWidth / canvas.clientHeight\r\n     *     near : 1.0,\r\n     *     far : 1000.0\r\n     * });\r\n     *\r\n     * @see PerspectiveOffCenterFrustum\r\n     */\r\n    function PerspectiveFrustum(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._offCenterFrustum = new PerspectiveOffCenterFrustum();\r\n\r\n        /**\r\n         * The angle of the field of view (FOV), in radians.  This angle will be used\r\n         * as the horizontal FOV if the width is greater than the height, otherwise\r\n         * it will be the vertical FOV.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.fov = options.fov;\r\n        this._fov = undefined;\r\n        this._fovy = undefined;\r\n\r\n        this._sseDenominator = undefined;\r\n\r\n        /**\r\n         * The aspect ratio of the frustum's width to it's height.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.aspectRatio = options.aspectRatio;\r\n        this._aspectRatio = undefined;\r\n\r\n        /**\r\n         * The distance of the near plane.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.near = defaultValue(options.near, 1.0);\r\n        this._near = this.near;\r\n\r\n        /**\r\n         * The distance of the far plane.\r\n         * @type {Number}\r\n         * @default 500000000.0\r\n         */\r\n        this.far = defaultValue(options.far, 500000000.0);\r\n        this._far = this.far;\r\n\r\n        /**\r\n         * Offsets the frustum in the x direction.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.xOffset = defaultValue(options.xOffset, 0.0);\r\n        this._xOffset = this.xOffset;\r\n\r\n        /**\r\n         * Offsets the frustum in the y direction.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.yOffset = defaultValue(options.yOffset, 0.0);\r\n        this._yOffset = this.yOffset;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    PerspectiveFrustum.packedLength = 6;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PerspectiveFrustum} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PerspectiveFrustum.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.fov;\r\n        array[startingIndex++] = value.aspectRatio;\r\n        array[startingIndex++] = value.near;\r\n        array[startingIndex++] = value.far;\r\n        array[startingIndex++] = value.xOffset;\r\n        array[startingIndex] = value.yOffset;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PerspectiveFrustum} [result] The object into which to store the result.\r\n     * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n     */\r\n    PerspectiveFrustum.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new PerspectiveFrustum();\r\n        }\r\n\r\n        result.fov = array[startingIndex++];\r\n        result.aspectRatio = array[startingIndex++];\r\n        result.near = array[startingIndex++];\r\n        result.far = array[startingIndex++];\r\n        result.xOffset = array[startingIndex++];\r\n        result.yOffset = array[startingIndex];\r\n\r\n        return result;\r\n    };\r\n\r\n    function update(frustum) {\r\n        \r\n\r\n        var f = frustum._offCenterFrustum;\r\n\r\n        if (frustum.fov !== frustum._fov || frustum.aspectRatio !== frustum._aspectRatio ||\r\n            frustum.near !== frustum._near || frustum.far !== frustum._far ||\r\n            frustum.xOffset !== frustum._xOffset || frustum.yOffset !== frustum._yOffset) {\r\n            \r\n\r\n            frustum._aspectRatio = frustum.aspectRatio;\r\n            frustum._fov = frustum.fov;\r\n            frustum._fovy = (frustum.aspectRatio <= 1) ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\r\n            frustum._near = frustum.near;\r\n            frustum._far = frustum.far;\r\n            frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\r\n            frustum._xOffset = frustum.xOffset;\r\n            frustum._yOffset = frustum.yOffset;\r\n\r\n            f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\r\n            f.bottom = -f.top;\r\n            f.right = frustum.aspectRatio * f.top;\r\n            f.left = -f.right;\r\n            f.near = frustum.near;\r\n            f.far = frustum.far;\r\n\r\n            f.right += frustum.xOffset;\r\n            f.left += frustum.xOffset;\r\n            f.top += frustum.yOffset;\r\n            f.bottom += frustum.yOffset;\r\n        }\r\n    }\r\n\r\n    defineProperties(PerspectiveFrustum.prototype, {\r\n        /**\r\n         * Gets the perspective projection matrix computed from the view frustum.\r\n         * @memberof PerspectiveFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         *\r\n         * @see PerspectiveFrustum#infiniteProjectionMatrix\r\n         */\r\n        projectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._offCenterFrustum.projectionMatrix;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The perspective projection matrix computed from the view frustum with an infinite far plane.\r\n         * @memberof PerspectiveFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         *\r\n         * @see PerspectiveFrustum#projectionMatrix\r\n         */\r\n        infiniteProjectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._offCenterFrustum.infiniteProjectionMatrix;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the angle of the vertical field of view, in radians.\r\n         * @memberof PerspectiveFrustum.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         * @default undefined\r\n         */\r\n        fovy : {\r\n            get : function() {\r\n                update(this);\r\n                return this._fovy;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @readonly\r\n         * @private\r\n         */\r\n        sseDenominator : {\r\n            get : function () {\r\n                update(this);\r\n                return this._sseDenominator;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Creates a culling volume for this frustum.\r\n     *\r\n     * @param {Cartesian3} position The eye position.\r\n     * @param {Cartesian3} direction The view direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n     *\r\n     * @example\r\n     * // Check if a bounding volume intersects the frustum.\r\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n     */\r\n    PerspectiveFrustum.prototype.computeCullingVolume = function(position, direction, up) {\r\n        update(this);\r\n        return this._offCenterFrustum.computeCullingVolume(position, direction, up);\r\n    };\r\n\r\n    /**\r\n     * Returns the pixel's width and height in meters.\r\n     *\r\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n     * @param {Number} distance The distance to the near plane in meters.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n     *\r\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n     *\r\n     * @example\r\n     * // Example 1\r\n     * // Get the width and height of a pixel.\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Cesium.Cartesian2());\r\n     *\r\n     * @example\r\n     * // Example 2\r\n     * // Get the width and height of a pixel if the near plane was set to 'distance'.\r\n     * // For example, get the size of a pixel of an image on a billboard.\r\n     * var position = camera.position;\r\n     * var direction = camera.direction;\r\n     * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\r\n     * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\r\n     * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Cesium.Cartesian2());\r\n     */\r\n    PerspectiveFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, result) {\r\n        update(this);\r\n        return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result);\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a PerspectiveFrustum instance.\r\n     *\r\n     * @param {PerspectiveFrustum} [result] The object onto which to store the result.\r\n     * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n     */\r\n    PerspectiveFrustum.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new PerspectiveFrustum();\r\n        }\r\n\r\n        result.aspectRatio = this.aspectRatio;\r\n        result.fov = this.fov;\r\n        result.near = this.near;\r\n        result.far = this.far;\r\n\r\n        // force update of clone to compute matrices\r\n        result._aspectRatio = undefined;\r\n        result._fov = undefined;\r\n        result._near = undefined;\r\n        result._far = undefined;\r\n\r\n        this._offCenterFrustum.clone(result._offCenterFrustum);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided PerspectiveFrustum componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    PerspectiveFrustum.prototype.equals = function(other) {\r\n        if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\r\n            return false;\r\n        }\r\n\r\n        update(this);\r\n        update(other);\r\n\r\n        return (this.fov === other.fov &&\r\n                this.aspectRatio === other.aspectRatio &&\r\n                this._offCenterFrustum.equals(other._offCenterFrustum));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided PerspectiveFrustum componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {PerspectiveFrustum} other The right hand side PerspectiveFrustum.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    PerspectiveFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\r\n        if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\r\n            return false;\r\n        }\r\n\r\n        update(this);\r\n        update(other);\r\n\r\n        return (CesiumMath.equalsEpsilon(this.fov, other.fov, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) &&\r\n                this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    return PerspectiveFrustum;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PerspectiveFrustum.js\n// module id = 160\n// module chunks = 0","define([\r\n        './buildModuleUrl',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './GeographicTilingScheme',\r\n        './getAbsoluteUri',\r\n        './Rectangle',\r\n        './Resource'\r\n    ], function(\r\n        buildModuleUrl,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        GeographicTilingScheme,\r\n        getAbsoluteUri,\r\n        Rectangle,\r\n        Resource) {\r\n    'use strict';\r\n\r\n    var scratchDiagonalCartesianNE = new Cartesian3();\r\n    var scratchDiagonalCartesianSW = new Cartesian3();\r\n    var scratchDiagonalCartographic = new Cartographic();\r\n    var scratchCenterCartesian = new Cartesian3();\r\n    var scratchSurfaceCartesian = new Cartesian3();\r\n\r\n    var scratchBoundingSphere = new BoundingSphere();\r\n    var tilingScheme = new GeographicTilingScheme();\r\n    var scratchCorners = [new Cartographic(), new Cartographic(), new Cartographic(), new Cartographic()];\r\n    var scratchTileXY = new Cartesian2();\r\n\r\n    /**\r\n     * A collection of functions for approximating terrain height\r\n     * @private\r\n     */\r\n    var ApproximateTerrainHeights = {};\r\n\r\n    /**\r\n     * Initializes the minimum and maximum terrain heights\r\n     * @return {Promise}\r\n     */\r\n    ApproximateTerrainHeights.initialize = function() {\r\n        var initPromise = ApproximateTerrainHeights._initPromise;\r\n        if (defined(initPromise)) {\r\n            return initPromise;\r\n        }\r\n\r\n        var url = require('C:\\\\github\\\\terriajs\\\\node_modules\\\\terriajs-cesium/Source/Assets/approximateTerrainHeights.json');\r\n        if (/build\\/cesiumWorkers\\.js$/.test(location.href)) {\r\n            // We're running in a Web Worker, we can't just load by relative path.\r\n            var basePath = location.href.substring(0, location.href.length - 'build/cesiumWorkers.js'.length);\r\n            url = getAbsoluteUri(url, basePath);\r\n        }\r\n\r\n        initPromise = Resource.fetchJson(url)\r\n            .then(function(json) {\r\n                ApproximateTerrainHeights._terrainHeights = json;\r\n            });\r\n        ApproximateTerrainHeights._initPromise = initPromise;\r\n\r\n        return initPromise;\r\n    };\r\n\r\n    /**\r\n     * Computes the minimum and maximum terrain heights for a given rectangle\r\n     * @param {Rectangle} rectangle The bounding rectangle\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid\r\n     * @return {{minimumTerrainHeight: Number, maximumTerrainHeight: Number}}\r\n     */\r\n    ApproximateTerrainHeights.getApproximateTerrainHeights = function(rectangle, ellipsoid) {\r\n        \r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var xyLevel = getTileXYLevel(rectangle);\r\n\r\n        // Get the terrain min/max for that tile\r\n        var minTerrainHeight = ApproximateTerrainHeights._defaultMinTerrainHeight;\r\n        var maxTerrainHeight = ApproximateTerrainHeights._defaultMaxTerrainHeight;\r\n        if (defined(xyLevel)) {\r\n            var key = xyLevel.level + '-' + xyLevel.x + '-' + xyLevel.y;\r\n            var heights = ApproximateTerrainHeights._terrainHeights[key];\r\n            if (defined(heights)) {\r\n                minTerrainHeight = heights[0];\r\n                maxTerrainHeight = heights[1];\r\n            }\r\n\r\n            // Compute min by taking the center of the NE->SW diagonal and finding distance to the surface\r\n            ellipsoid.cartographicToCartesian(Rectangle.northeast(rectangle, scratchDiagonalCartographic),\r\n                scratchDiagonalCartesianNE);\r\n            ellipsoid.cartographicToCartesian(Rectangle.southwest(rectangle, scratchDiagonalCartographic),\r\n                scratchDiagonalCartesianSW);\r\n\r\n            Cartesian3.midpoint(scratchDiagonalCartesianSW, scratchDiagonalCartesianNE, scratchCenterCartesian);\r\n            var surfacePosition = ellipsoid.scaleToGeodeticSurface(scratchCenterCartesian, scratchSurfaceCartesian);\r\n            if (defined(surfacePosition)) {\r\n                var distance = Cartesian3.distance(scratchCenterCartesian, surfacePosition);\r\n                minTerrainHeight = Math.min(minTerrainHeight, -distance);\r\n            } else {\r\n                minTerrainHeight = ApproximateTerrainHeights._defaultMinTerrainHeight;\r\n            }\r\n        }\r\n\r\n        minTerrainHeight = Math.max(ApproximateTerrainHeights._defaultMinTerrainHeight, minTerrainHeight);\r\n\r\n        return {\r\n            minimumTerrainHeight: minTerrainHeight,\r\n            maximumTerrainHeight: maxTerrainHeight\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Computes the bounding sphere based on the tile heights in the rectangle\r\n     * @param {Rectangle} rectangle The bounding rectangle\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid\r\n     * @return {BoundingSphere} The result bounding sphere\r\n     */\r\n    ApproximateTerrainHeights.getInstanceBoundingSphere = function(rectangle, ellipsoid) {\r\n        \r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var xyLevel = getTileXYLevel(rectangle);\r\n\r\n        // Get the terrain max for that tile\r\n        var maxTerrainHeight = ApproximateTerrainHeights._defaultMaxTerrainHeight;\r\n        if (defined(xyLevel)) {\r\n            var key = xyLevel.level + '-' + xyLevel.x + '-' + xyLevel.y;\r\n            var heights = ApproximateTerrainHeights._terrainHeights[key];\r\n            if (defined(heights)) {\r\n                maxTerrainHeight = heights[1];\r\n            }\r\n        }\r\n\r\n        var result = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, 0.0);\r\n        BoundingSphere.fromRectangle3D(rectangle, ellipsoid, maxTerrainHeight, scratchBoundingSphere);\r\n\r\n        return BoundingSphere.union(result, scratchBoundingSphere, result);\r\n    };\r\n\r\n    function getTileXYLevel(rectangle) {\r\n        Cartographic.fromRadians(rectangle.east, rectangle.north, 0.0, scratchCorners[0]);\r\n        Cartographic.fromRadians(rectangle.west, rectangle.north, 0.0, scratchCorners[1]);\r\n        Cartographic.fromRadians(rectangle.east, rectangle.south, 0.0, scratchCorners[2]);\r\n        Cartographic.fromRadians(rectangle.west, rectangle.south, 0.0, scratchCorners[3]);\r\n\r\n        // Determine which tile the bounding rectangle is in\r\n        var lastLevelX = 0, lastLevelY = 0;\r\n        var currentX = 0, currentY = 0;\r\n        var maxLevel = ApproximateTerrainHeights._terrainHeightsMaxLevel;\r\n        var i;\r\n        for(i = 0; i <= maxLevel; ++i) {\r\n            var failed = false;\r\n            for(var j = 0; j < 4; ++j) {\r\n                var corner = scratchCorners[j];\r\n                tilingScheme.positionToTileXY(corner, i, scratchTileXY);\r\n                if (j === 0) {\r\n                    currentX = scratchTileXY.x;\r\n                    currentY = scratchTileXY.y;\r\n                } else if(currentX !== scratchTileXY.x || currentY !== scratchTileXY.y) {\r\n                    failed = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (failed) {\r\n                break;\r\n            }\r\n\r\n            lastLevelX = currentX;\r\n            lastLevelY = currentY;\r\n        }\r\n\r\n        if (i === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        return {\r\n            x : lastLevelX,\r\n            y : lastLevelY,\r\n            level : (i > maxLevel) ? maxLevel : (i - 1)\r\n        };\r\n    }\r\n\r\n    ApproximateTerrainHeights._terrainHeightsMaxLevel = 6;\r\n    ApproximateTerrainHeights._defaultMaxTerrainHeight = 9000.0;\r\n    ApproximateTerrainHeights._defaultMinTerrainHeight = -100000.0;\r\n    ApproximateTerrainHeights._terrainHeights = undefined;\r\n    ApproximateTerrainHeights._initPromise = undefined;\r\n\r\n    defineProperties(ApproximateTerrainHeights, {\r\n        /**\r\n         * Determines if the terrain heights are initialized and ready to use. To initialize the terrain heights,\r\n         * call {@link ApproximateTerrainHeights#initialize} and wait for the returned promise to resolve.\r\n         * @type {Boolean}\r\n         * @readonly\r\n         * @memberof ApproximateTerrainHeights\r\n         */\r\n        initialized: {\r\n            get: function() {\r\n                return defined(ApproximateTerrainHeights._terrainHeights);\r\n            }\r\n        }\r\n    });\r\n\r\n    return ApproximateTerrainHeights;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/ApproximateTerrainHeights.js\n// module id = 161\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './defined',\r\n        './DeveloperError',\r\n        './GeographicProjection',\r\n        './Math',\r\n        './Matrix2',\r\n        './Rectangle'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartographic,\r\n        defined,\r\n        DeveloperError,\r\n        GeographicProjection,\r\n        CesiumMath,\r\n        Matrix2,\r\n        Rectangle) {\r\n    'use strict';\r\n\r\n    var cos = Math.cos;\r\n    var sin = Math.sin;\r\n    var sqrt = Math.sqrt;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var RectangleGeometryLibrary = {};\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    RectangleGeometryLibrary.computePosition = function(computedOptions, ellipsoid, computeST, row, col, position, st) {\r\n        var radiiSquared = ellipsoid.radiiSquared;\r\n        var nwCorner = computedOptions.nwCorner;\r\n        var rectangle = computedOptions.boundingRectangle;\r\n\r\n        var stLatitude = nwCorner.latitude - computedOptions.granYCos * row + col * computedOptions.granXSin;\r\n        var cosLatitude = cos(stLatitude);\r\n        var nZ = sin(stLatitude);\r\n        var kZ = radiiSquared.z * nZ;\r\n\r\n        var stLongitude = nwCorner.longitude + row * computedOptions.granYSin + col * computedOptions.granXCos;\r\n        var nX = cosLatitude * cos(stLongitude);\r\n        var nY = cosLatitude * sin(stLongitude);\r\n\r\n        var kX = radiiSquared.x * nX;\r\n        var kY = radiiSquared.y * nY;\r\n\r\n        var gamma = sqrt((kX * nX) + (kY * nY) + (kZ * nZ));\r\n\r\n        position.x = kX / gamma;\r\n        position.y = kY / gamma;\r\n        position.z = kZ / gamma;\r\n\r\n        if (computeST) {\r\n            var stNwCorner = computedOptions.stNwCorner;\r\n            if (defined(stNwCorner)) {\r\n                stLatitude = stNwCorner.latitude - computedOptions.stGranYCos * row + col * computedOptions.stGranXSin;\r\n                stLongitude = stNwCorner.longitude + row * computedOptions.stGranYSin + col * computedOptions.stGranXCos;\r\n\r\n                st.x = (stLongitude - computedOptions.stWest) * computedOptions.lonScalar;\r\n                st.y = (stLatitude - computedOptions.stSouth) * computedOptions.latScalar;\r\n            } else {\r\n                st.x = (stLongitude - rectangle.west) * computedOptions.lonScalar;\r\n                st.y = (stLatitude - rectangle.south) * computedOptions.latScalar;\r\n            }\r\n        }\r\n    };\r\n\r\n    var rotationMatrixScratch = new Matrix2();\r\n    var nwCartesian = new Cartesian3();\r\n    var centerScratch = new Cartographic();\r\n    var centerCartesian = new Cartesian3();\r\n    var proj = new GeographicProjection();\r\n\r\n    function getRotationOptions(nwCorner, rotation, granularityX, granularityY, center, width, height) {\r\n        var cosRotation = Math.cos(rotation);\r\n        var granYCos = granularityY * cosRotation;\r\n        var granXCos = granularityX * cosRotation;\r\n\r\n        var sinRotation = Math.sin(rotation);\r\n        var granYSin = granularityY * sinRotation;\r\n        var granXSin = granularityX * sinRotation;\r\n\r\n        nwCartesian = proj.project(nwCorner, nwCartesian);\r\n\r\n        nwCartesian = Cartesian3.subtract(nwCartesian, centerCartesian, nwCartesian);\r\n        var rotationMatrix = Matrix2.fromRotation(rotation, rotationMatrixScratch);\r\n        nwCartesian = Matrix2.multiplyByVector(rotationMatrix, nwCartesian, nwCartesian);\r\n        nwCartesian = Cartesian3.add(nwCartesian, centerCartesian, nwCartesian);\r\n        nwCorner = proj.unproject(nwCartesian, nwCorner);\r\n\r\n        width -= 1;\r\n        height -= 1;\r\n\r\n        var latitude = nwCorner.latitude;\r\n        var latitude0 = latitude + width * granXSin;\r\n        var latitude1 = latitude - granYCos * height;\r\n        var latitude2 = latitude - granYCos * height + width * granXSin;\r\n\r\n        var north = Math.max(latitude, latitude0, latitude1, latitude2);\r\n        var south = Math.min(latitude, latitude0, latitude1, latitude2);\r\n\r\n        var longitude = nwCorner.longitude;\r\n        var longitude0 = longitude + width * granXCos;\r\n        var longitude1 = longitude + height * granYSin;\r\n        var longitude2 = longitude + height * granYSin + width * granXCos;\r\n\r\n        var east = Math.max(longitude, longitude0, longitude1, longitude2);\r\n        var west = Math.min(longitude, longitude0, longitude1, longitude2);\r\n\r\n        return {\r\n            north: north,\r\n            south: south,\r\n            east: east,\r\n            west: west,\r\n            granYCos : granYCos,\r\n            granYSin : granYSin,\r\n            granXCos : granXCos,\r\n            granXSin : granXSin,\r\n            nwCorner : nwCorner\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    RectangleGeometryLibrary.computeOptions = function(rectangle, granularity, rotation, stRotation, boundingRectangleScratch, nwCornerResult, stNwCornerResult) {\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n        var north = rectangle.north;\r\n        var south = rectangle.south;\r\n\r\n        var width;\r\n        var height;\r\n        var granularityX;\r\n        var granularityY;\r\n        var dx;\r\n        var dy = north - south;\r\n        if (west > east) {\r\n            dx = (CesiumMath.TWO_PI - west + east);\r\n            width = Math.ceil(dx / granularity) + 1;\r\n            height = Math.ceil(dy / granularity) + 1;\r\n            granularityX = dx / (width - 1);\r\n            granularityY = dy / (height - 1);\r\n        } else {\r\n            dx = east - west;\r\n            width = Math.ceil(dx / granularity) + 1;\r\n            height = Math.ceil(dy / granularity) + 1;\r\n            granularityX = dx / (width - 1);\r\n            granularityY = dy / (height - 1);\r\n        }\r\n\r\n        var nwCorner = Rectangle.northwest(rectangle, nwCornerResult);\r\n        var center = Rectangle.center(rectangle, centerScratch);\r\n        if (rotation !== 0 || stRotation !== 0) {\r\n            if (center.longitude < nwCorner.longitude) {\r\n                center.longitude += CesiumMath.TWO_PI;\r\n            }\r\n            centerCartesian = proj.project(center, centerCartesian);\r\n        }\r\n\r\n        var granYCos = granularityY;\r\n        var granXCos = granularityX;\r\n        var granYSin = 0.0;\r\n        var granXSin = 0.0;\r\n\r\n        var boundingRectangle = Rectangle.clone(rectangle, boundingRectangleScratch);\r\n\r\n        var computedOptions = {\r\n            granYCos : granYCos,\r\n            granYSin : granYSin,\r\n            granXCos : granXCos,\r\n            granXSin : granXSin,\r\n            nwCorner : nwCorner,\r\n            boundingRectangle : boundingRectangle,\r\n            width: width,\r\n            height: height\r\n        };\r\n\r\n        if (rotation !== 0) {\r\n            var rotationOptions = getRotationOptions(nwCorner, rotation, granularityX, granularityY, center, width, height);\r\n            north = rotationOptions.north;\r\n            south = rotationOptions.south;\r\n            east = rotationOptions.east;\r\n            west = rotationOptions.west;\r\n\r\n            \r\n\r\n            computedOptions.granYCos = rotationOptions.granYCos;\r\n            computedOptions.granYSin = rotationOptions.granYSin;\r\n            computedOptions.granXCos = rotationOptions.granXCos;\r\n            computedOptions.granXSin = rotationOptions.granXSin;\r\n\r\n            boundingRectangle.north = north;\r\n            boundingRectangle.south = south;\r\n            boundingRectangle.east = east;\r\n            boundingRectangle.west = west;\r\n        }\r\n\r\n        if (stRotation !== 0) {\r\n            rotation = rotation - stRotation;\r\n            var stNwCorner = Rectangle.northwest(boundingRectangle, stNwCornerResult);\r\n\r\n            var stRotationOptions = getRotationOptions(stNwCorner, rotation, granularityX, granularityY, center, width, height);\r\n\r\n            computedOptions.stGranYCos =  stRotationOptions.granYCos;\r\n            computedOptions.stGranXCos = stRotationOptions.granXCos;\r\n            computedOptions.stGranYSin = stRotationOptions.granYSin;\r\n            computedOptions.stGranXSin = stRotationOptions.granXSin;\r\n            computedOptions.stNwCorner = stNwCorner;\r\n            computedOptions.stWest = stRotationOptions.west;\r\n            computedOptions.stSouth = stRotationOptions.south;\r\n        }\r\n\r\n        return computedOptions;\r\n    };\r\n\r\n    return RectangleGeometryLibrary;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/RectangleGeometryLibrary.js\n// module id = 162\n// module chunks = 0","define([\r\n        './Cartographic',\r\n        './defined',\r\n        './EllipsoidTangentPlane',\r\n        './Math',\r\n        './PolygonPipeline',\r\n        './PolylinePipeline',\r\n        './WindingOrder'\r\n    ], function(\r\n        Cartographic,\r\n        defined,\r\n        EllipsoidTangentPlane,\r\n        CesiumMath,\r\n        PolygonPipeline,\r\n        PolylinePipeline,\r\n        WindingOrder) {\r\n    'use strict';\r\n\r\n    /**\r\n     * private\r\n     */\r\n    var WallGeometryLibrary = {};\r\n\r\n    function latLonEquals(c0, c1) {\r\n        return ((CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON14)) && (CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON14)));\r\n    }\r\n\r\n    var scratchCartographic1 = new Cartographic();\r\n    var scratchCartographic2 = new Cartographic();\r\n    function removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\r\n        var length = positions.length;\r\n        if (length < 2) {\r\n            return;\r\n        }\r\n\r\n        var hasBottomHeights = defined(bottomHeights);\r\n        var hasTopHeights = defined(topHeights);\r\n        var hasAllZeroHeights = true;\r\n\r\n        var cleanedPositions = new Array(length);\r\n        var cleanedTopHeights = new Array(length);\r\n        var cleanedBottomHeights = new Array(length);\r\n\r\n        var v0 = positions[0];\r\n        cleanedPositions[0] = v0;\r\n\r\n        var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\r\n        if (hasTopHeights) {\r\n            c0.height = topHeights[0];\r\n        }\r\n\r\n        hasAllZeroHeights = hasAllZeroHeights && c0.height <= 0;\r\n\r\n        cleanedTopHeights[0] = c0.height;\r\n\r\n        if (hasBottomHeights) {\r\n            cleanedBottomHeights[0] = bottomHeights[0];\r\n        } else {\r\n            cleanedBottomHeights[0] = 0.0;\r\n        }\r\n\r\n        var index = 1;\r\n        for (var i = 1; i < length; ++i) {\r\n            var v1 = positions[i];\r\n            var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\r\n            if (hasTopHeights) {\r\n                c1.height = topHeights[i];\r\n            }\r\n            hasAllZeroHeights = hasAllZeroHeights && c1.height <= 0;\r\n\r\n            if (!latLonEquals(c0, c1)) {\r\n                cleanedPositions[index] = v1; // Shallow copy!\r\n                cleanedTopHeights[index] = c1.height;\r\n\r\n                if (hasBottomHeights) {\r\n                    cleanedBottomHeights[index] = bottomHeights[i];\r\n                } else {\r\n                    cleanedBottomHeights[index] = 0.0;\r\n                }\r\n\r\n                Cartographic.clone(c1, c0);\r\n                ++index;\r\n            } else if (c0.height < c1.height) {\r\n                cleanedTopHeights[index - 1] = c1.height;\r\n            }\r\n        }\r\n\r\n        if (hasAllZeroHeights || index < 2) {\r\n            return;\r\n        }\r\n\r\n        cleanedPositions.length = index;\r\n        cleanedTopHeights.length = index;\r\n        cleanedBottomHeights.length = index;\r\n\r\n        return {\r\n            positions: cleanedPositions,\r\n            topHeights: cleanedTopHeights,\r\n            bottomHeights: cleanedBottomHeights\r\n        };\r\n    }\r\n\r\n    var positionsArrayScratch = new Array(2);\r\n    var heightsArrayScratch = new Array(2);\r\n    var generateArcOptionsScratch = {\r\n        positions : undefined,\r\n        height : undefined,\r\n        granularity : undefined,\r\n        ellipsoid : undefined\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    WallGeometryLibrary.computePositions = function(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, duplicateCorners) {\r\n        var o = removeDuplicates(ellipsoid, wallPositions, maximumHeights, minimumHeights);\r\n\r\n        if (!defined(o)) {\r\n            return;\r\n        }\r\n\r\n        wallPositions = o.positions;\r\n        maximumHeights = o.topHeights;\r\n        minimumHeights = o.bottomHeights;\r\n\r\n        if (wallPositions.length >= 3) {\r\n            // Order positions counter-clockwise\r\n            var tangentPlane = EllipsoidTangentPlane.fromPoints(wallPositions, ellipsoid);\r\n            var positions2D = tangentPlane.projectPointsOntoPlane(wallPositions);\r\n\r\n            if (PolygonPipeline.computeWindingOrder2D(positions2D) === WindingOrder.CLOCKWISE) {\r\n                wallPositions.reverse();\r\n                maximumHeights.reverse();\r\n                minimumHeights.reverse();\r\n            }\r\n        }\r\n\r\n        var length = wallPositions.length;\r\n        var numCorners = length - 2;\r\n        var topPositions;\r\n        var bottomPositions;\r\n\r\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n        var generateArcOptions = generateArcOptionsScratch;\r\n        generateArcOptions.minDistance = minDistance;\r\n        generateArcOptions.ellipsoid = ellipsoid;\r\n\r\n        if (duplicateCorners) {\r\n            var count = 0;\r\n            var i;\r\n\r\n            for (i = 0; i < length - 1; i++) {\r\n                count += PolylinePipeline.numberOfPoints(wallPositions[i], wallPositions[i+1], minDistance) + 1;\r\n            }\r\n\r\n            topPositions = new Float64Array(count * 3);\r\n            bottomPositions = new Float64Array(count * 3);\r\n\r\n            var generateArcPositions = positionsArrayScratch;\r\n            var generateArcHeights = heightsArrayScratch;\r\n            generateArcOptions.positions = generateArcPositions;\r\n            generateArcOptions.height = generateArcHeights;\r\n\r\n            var offset = 0;\r\n            for (i = 0; i < length - 1; i++) {\r\n                generateArcPositions[0] = wallPositions[i];\r\n                generateArcPositions[1] = wallPositions[i + 1];\r\n\r\n                generateArcHeights[0] = maximumHeights[i];\r\n                generateArcHeights[1] = maximumHeights[i + 1];\r\n\r\n                var pos = PolylinePipeline.generateArc(generateArcOptions);\r\n                topPositions.set(pos, offset);\r\n\r\n                generateArcHeights[0] = minimumHeights[i];\r\n                generateArcHeights[1] = minimumHeights[i + 1];\r\n\r\n                bottomPositions.set(PolylinePipeline.generateArc(generateArcOptions), offset);\r\n\r\n                offset += pos.length;\r\n            }\r\n        } else {\r\n            generateArcOptions.positions = wallPositions;\r\n            generateArcOptions.height = maximumHeights;\r\n            topPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\r\n\r\n            generateArcOptions.height = minimumHeights;\r\n            bottomPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\r\n        }\r\n\r\n        return {\r\n            bottomPositions: bottomPositions,\r\n            topPositions: topPositions,\r\n            numCorners: numCorners\r\n        };\r\n    };\r\n\r\n    return WallGeometryLibrary;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/WallGeometryLibrary.js\n// module id = 163\n// module chunks = 0","/*global require,importScripts,self*/\r\n\"use strict\";\r\n\r\nvar DIR = '/Workers/';\r\nvar reqWithContext = require.context('../', false, /.*\\.js/);\r\n\r\nself.onmessage = function(event) {\r\n    var data = event.data;\r\n    var worker = reqWithContext('./' + data.workerModule.substring(data.workerModule.lastIndexOf(DIR) + DIR.length) + '.js');\r\n    self.onmessage = worker;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/string-replace-webpack-plugin/loader.js?id=q8xwwfn348d!./buildprocess/removeCesiumDebugPragmas.js!./node_modules/terriajs-cesium/Source/Workers/bootstrapper/cesiumWorkerBootstrapper.js\n// module id = 164\n// module chunks = 0","var map = {\n\t\"./combineGeometry.js\": 166,\n\t\"./createBoxGeometry.js\": 83,\n\t\"./createBoxOutlineGeometry.js\": 84,\n\t\"./createCircleGeometry.js\": 85,\n\t\"./createCircleOutlineGeometry.js\": 86,\n\t\"./createCoplanarPolygonGeometry.js\": 87,\n\t\"./createCoplanarPolygonOutlineGeometry.js\": 88,\n\t\"./createCorridorGeometry.js\": 89,\n\t\"./createCorridorOutlineGeometry.js\": 91,\n\t\"./createCylinderGeometry.js\": 92,\n\t\"./createCylinderOutlineGeometry.js\": 93,\n\t\"./createEllipseGeometry.js\": 94,\n\t\"./createEllipseOutlineGeometry.js\": 95,\n\t\"./createEllipsoidGeometry.js\": 96,\n\t\"./createEllipsoidOutlineGeometry.js\": 98,\n\t\"./createFrustumGeometry.js\": 99,\n\t\"./createFrustumOutlineGeometry.js\": 100,\n\t\"./createGeometry.js\": 277,\n\t\"./createGroundPolylineGeometry.js\": 101,\n\t\"./createPlaneGeometry.js\": 102,\n\t\"./createPlaneOutlineGeometry.js\": 103,\n\t\"./createPolygonGeometry.js\": 104,\n\t\"./createPolygonOutlineGeometry.js\": 105,\n\t\"./createPolylineGeometry.js\": 106,\n\t\"./createPolylineVolumeGeometry.js\": 107,\n\t\"./createPolylineVolumeOutlineGeometry.js\": 108,\n\t\"./createRectangleGeometry.js\": 109,\n\t\"./createRectangleOutlineGeometry.js\": 110,\n\t\"./createSimplePolylineGeometry.js\": 111,\n\t\"./createSphereGeometry.js\": 112,\n\t\"./createSphereOutlineGeometry.js\": 113,\n\t\"./createTaskProcessorWorker.js\": 25,\n\t\"./createVectorTileGeometries.js\": 296,\n\t\"./createVectorTilePoints.js\": 298,\n\t\"./createVectorTilePolygons.js\": 299,\n\t\"./createVectorTilePolylines.js\": 300,\n\t\"./createVerticesFromGoogleEarthEnterpriseBuffer.js\": 301,\n\t\"./createVerticesFromHeightmap.js\": 303,\n\t\"./createVerticesFromQuantizedTerrainMesh.js\": 305,\n\t\"./createWallGeometry.js\": 114,\n\t\"./createWallOutlineGeometry.js\": 115,\n\t\"./decodeDraco.js\": 306,\n\t\"./decodeGoogleEarthEnterprisePacket.js\": 310,\n\t\"./transcodeCRNToDXT.js\": 315,\n\t\"./transferTypedArrayTest.js\": 320,\n\t\"./upsampleQuantizedTerrainMesh.js\": 321\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 165;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers nonrecursive .*\\.js\n// module id = 165\n// module chunks = 0","define([\r\n        '../Scene/PrimitivePipeline',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        PrimitivePipeline,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    function combineGeometry(packedParameters, transferableObjects) {\r\n        var parameters = PrimitivePipeline.unpackCombineGeometryParameters(packedParameters);\r\n        var results = PrimitivePipeline.combineGeometry(parameters);\r\n        return PrimitivePipeline.packCombineGeometryResults(results, transferableObjects);\r\n    }\r\n\r\n    return createTaskProcessorWorker(combineGeometry);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/combineGeometry.js\n// module id = 166\n// module chunks = 0","/*\r\n  I've wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace\r\n  so it's better encapsulated. Now you can have multiple random number generators\r\n  and they won't stomp all over eachother's state.\r\n\r\n  If you want to use this as a substitute for Math.random(), use the random()\r\n  method like so:\r\n\r\n  var m = new MersenneTwister();\r\n  var randomNumber = m.random();\r\n\r\n  You can also call the other genrand_{foo}() methods on the instance.\r\n\r\n  If you want to use a specific seed in order to get a repeatable random\r\n  sequence, pass an integer into the constructor:\r\n\r\n  var m = new MersenneTwister(123);\r\n\r\n  and that will always produce the same random sequence.\r\n\r\n  Sean McCullough (banksean@gmail.com)\r\n*/\r\n\r\n/*\r\n   A C-program for MT19937, with initialization improved 2002/1/26.\r\n   Coded by Takuji Nishimura and Makoto Matsumoto.\r\n\r\n   Before using, initialize the state by using init_genrand(seed)\r\n   or init_by_array(init_key, key_length).\r\n*/\r\n/**\r\n@license\r\nmersenne-twister.js - https-colon-slashslash gist.github.com/banksean/300494\r\n\r\n   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\r\n   All rights reserved.\r\n\r\n   Redistribution and use in source and binary forms, with or without\r\n   modification, are permitted provided that the following conditions\r\n   are met:\r\n\r\n     1. Redistributions of source code must retain the above copyright\r\n        notice, this list of conditions and the following disclaimer.\r\n\r\n     2. Redistributions in binary form must reproduce the above copyright\r\n        notice, this list of conditions and the following disclaimer in the\r\n        documentation and/or other materials provided with the distribution.\r\n\r\n     3. The names of its contributors may not be used to endorse or promote\r\n        products derived from this software without specific prior written\r\n        permission.\r\n\r\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n/*\r\n   Any feedback is very welcome.\r\n   http-colon-slashslash www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\r\n   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\r\n*/\r\ndefine(function() {\r\nvar MersenneTwister = function(seed) {\r\n  if (seed == undefined) {\r\n    seed = new Date().getTime();\r\n  }\r\n  /* Period parameters */\r\n  this.N = 624;\r\n  this.M = 397;\r\n  this.MATRIX_A = 0x9908b0df;   /* constant vector a */\r\n  this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\r\n  this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\r\n\r\n  this.mt = new Array(this.N); /* the array for the state vector */\r\n  this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */\r\n\r\n  this.init_genrand(seed);\r\n}\r\n\r\n/* initializes mt[N] with a seed */\r\nMersenneTwister.prototype.init_genrand = function(s) {\r\n  this.mt[0] = s >>> 0;\r\n  for (this.mti=1; this.mti<this.N; this.mti++) {\r\n      var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);\r\n   this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\r\n  + this.mti;\r\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\r\n      /* In the previous versions, MSBs of the seed affect   */\r\n      /* only MSBs of the array mt[].                        */\r\n      /* 2002/01/09 modified by Makoto Matsumoto             */\r\n      this.mt[this.mti] >>>= 0;\r\n      /* for >32 bit machines */\r\n  }\r\n}\r\n\r\n/* initialize by an array with array-length */\r\n/* init_key is the array for initializing keys */\r\n/* key_length is its length */\r\n/* slight change for C++, 2004/2/26 */\r\n//MersenneTwister.prototype.init_by_array = function(init_key, key_length) {\r\n//  var i, j, k;\r\n//  this.init_genrand(19650218);\r\n//  i=1; j=0;\r\n//  k = (this.N>key_length ? this.N : key_length);\r\n//  for (; k; k--) {\r\n//    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30)\r\n//    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\r\n//      + init_key[j] + j; /* non linear */\r\n//    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\r\n//    i++; j++;\r\n//    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\r\n//    if (j>=key_length) j=0;\r\n//  }\r\n//  for (k=this.N-1; k; k--) {\r\n//    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\r\n//    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))\r\n//      - i; /* non linear */\r\n//    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\r\n//    i++;\r\n//    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\r\n//  }\r\n//\r\n//  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\r\n//}\r\n\r\n/* generates a random number on [0,0xffffffff]-interval */\r\nMersenneTwister.prototype.genrand_int32 = function() {\r\n  var y;\r\n  var mag01 = new Array(0x0, this.MATRIX_A);\r\n  /* mag01[x] = x * MATRIX_A  for x=0,1 */\r\n\r\n  if (this.mti >= this.N) { /* generate N words at one time */\r\n    var kk;\r\n\r\n    if (this.mti == this.N+1)   /* if init_genrand() has not been called, */\r\n      this.init_genrand(5489); /* a default initial seed is used */\r\n\r\n    for (kk=0;kk<this.N-this.M;kk++) {\r\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\r\n      this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n    }\r\n    for (;kk<this.N-1;kk++) {\r\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\r\n      this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n    }\r\n    y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\r\n    this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n\r\n    this.mti = 0;\r\n  }\r\n\r\n  y = this.mt[this.mti++];\r\n\r\n  /* Tempering */\r\n  y ^= (y >>> 11);\r\n  y ^= (y << 7) & 0x9d2c5680;\r\n  y ^= (y << 15) & 0xefc60000;\r\n  y ^= (y >>> 18);\r\n\r\n  return y >>> 0;\r\n}\r\n\r\n/* generates a random number on [0,0x7fffffff]-interval */\r\n//MersenneTwister.prototype.genrand_int31 = function() {\r\n//  return (this.genrand_int32()>>>1);\r\n//}\r\n\r\n/* generates a random number on [0,1]-real-interval */\r\n//MersenneTwister.prototype.genrand_real1 = function() {\r\n//  return this.genrand_int32()*(1.0/4294967295.0);\r\n//  /* divided by 2^32-1 */\r\n//}\r\n\r\n/* generates a random number on [0,1)-real-interval */\r\nMersenneTwister.prototype.random = function() {\r\n  return this.genrand_int32()*(1.0/4294967296.0);\r\n  /* divided by 2^32 */\r\n}\r\n\r\n/* generates a random number on (0,1)-real-interval */\r\n//MersenneTwister.prototype.genrand_real3 = function() {\r\n//  return (this.genrand_int32() + 0.5)*(1.0/4294967296.0);\r\n//  /* divided by 2^32 */\r\n//}\r\n\r\n/* generates a random number on [0,1) with 53-bit resolution*/\r\n//MersenneTwister.prototype.genrand_res53 = function() {\r\n//  var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;\r\n//  return(a*67108864.0+b)*(1.0/9007199254740992.0);\r\n//}\r\n\r\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\r\n\r\nreturn MersenneTwister;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/mersenne-twister.js\n// module id = 167\n// module chunks = 0","define([\r\n        './defined',\r\n        './defineProperties'\r\n    ], function(\r\n        defined,\r\n        defineProperties) {\r\n    'use strict';\r\n\r\n    var _supportsFullscreen;\r\n    var _names = {\r\n        requestFullscreen : undefined,\r\n        exitFullscreen : undefined,\r\n        fullscreenEnabled : undefined,\r\n        fullscreenElement : undefined,\r\n        fullscreenchange : undefined,\r\n        fullscreenerror : undefined\r\n    };\r\n\r\n    /**\r\n     * Browser-independent functions for working with the standard fullscreen API.\r\n     *\r\n     * @exports Fullscreen\r\n     *\r\n     * @see {@link http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html|W3C Fullscreen Living Specification}\r\n     */\r\n    var Fullscreen = {};\r\n\r\n    defineProperties(Fullscreen, {\r\n        /**\r\n         * The element that is currently fullscreen, if any.  To simply check if the\r\n         * browser is in fullscreen mode or not, use {@link Fullscreen#fullscreen}.\r\n         * @memberof Fullscreen\r\n         * @type {Object}\r\n         * @readonly\r\n         */\r\n        element : {\r\n            get : function() {\r\n                if (!Fullscreen.supportsFullscreen()) {\r\n                    return undefined;\r\n                }\r\n\r\n                return document[_names.fullscreenElement];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The name of the event on the document that is fired when fullscreen is\r\n         * entered or exited.  This event name is intended for use with addEventListener.\r\n         * In your event handler, to determine if the browser is in fullscreen mode or not,\r\n         * use {@link Fullscreen#fullscreen}.\r\n         * @memberof Fullscreen\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        changeEventName : {\r\n            get : function() {\r\n                if (!Fullscreen.supportsFullscreen()) {\r\n                    return undefined;\r\n                }\r\n\r\n                return _names.fullscreenchange;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The name of the event that is fired when a fullscreen error\r\n         * occurs.  This event name is intended for use with addEventListener.\r\n         * @memberof Fullscreen\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        errorEventName : {\r\n            get : function() {\r\n                if (!Fullscreen.supportsFullscreen()) {\r\n                    return undefined;\r\n                }\r\n\r\n                return _names.fullscreenerror;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determine whether the browser will allow an element to be made fullscreen, or not.\r\n         * For example, by default, iframes cannot go fullscreen unless the containing page\r\n         * adds an \"allowfullscreen\" attribute (or prefixed equivalent).\r\n         * @memberof Fullscreen\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        enabled : {\r\n            get : function() {\r\n                if (!Fullscreen.supportsFullscreen()) {\r\n                    return undefined;\r\n                }\r\n\r\n                return document[_names.fullscreenEnabled];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determines if the browser is currently in fullscreen mode.\r\n         * @memberof Fullscreen\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        fullscreen : {\r\n            get : function() {\r\n                if (!Fullscreen.supportsFullscreen()) {\r\n                    return undefined;\r\n                }\r\n\r\n                return Fullscreen.element !== null;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Detects whether the browser supports the standard fullscreen API.\r\n     *\r\n     * @returns {Boolean} <code>true</code> if the browser supports the standard fullscreen API,\r\n     * <code>false</code> otherwise.\r\n     */\r\n    Fullscreen.supportsFullscreen = function() {\r\n        if (defined(_supportsFullscreen)) {\r\n            return _supportsFullscreen;\r\n        }\r\n\r\n        _supportsFullscreen = false;\r\n\r\n        var body = document.body;\r\n        if (typeof body.requestFullscreen === 'function') {\r\n            // go with the unprefixed, standard set of names\r\n            _names.requestFullscreen = 'requestFullscreen';\r\n            _names.exitFullscreen = 'exitFullscreen';\r\n            _names.fullscreenEnabled = 'fullscreenEnabled';\r\n            _names.fullscreenElement = 'fullscreenElement';\r\n            _names.fullscreenchange = 'fullscreenchange';\r\n            _names.fullscreenerror = 'fullscreenerror';\r\n            _supportsFullscreen = true;\r\n            return _supportsFullscreen;\r\n        }\r\n\r\n        //check for the correct combination of prefix plus the various names that browsers use\r\n        var prefixes = ['webkit', 'moz', 'o', 'ms', 'khtml'];\r\n        var name;\r\n        for (var i = 0, len = prefixes.length; i < len; ++i) {\r\n            var prefix = prefixes[i];\r\n\r\n            // casing of Fullscreen differs across browsers\r\n            name = prefix + 'RequestFullscreen';\r\n            if (typeof body[name] === 'function') {\r\n                _names.requestFullscreen = name;\r\n                _supportsFullscreen = true;\r\n            } else {\r\n                name = prefix + 'RequestFullScreen';\r\n                if (typeof body[name] === 'function') {\r\n                    _names.requestFullscreen = name;\r\n                    _supportsFullscreen = true;\r\n                }\r\n            }\r\n\r\n            // disagreement about whether it's \"exit\" as per spec, or \"cancel\"\r\n            name = prefix + 'ExitFullscreen';\r\n            if (typeof document[name] === 'function') {\r\n                _names.exitFullscreen = name;\r\n            } else {\r\n                name = prefix + 'CancelFullScreen';\r\n                if (typeof document[name] === 'function') {\r\n                    _names.exitFullscreen = name;\r\n                }\r\n            }\r\n\r\n            // casing of Fullscreen differs across browsers\r\n            name = prefix + 'FullscreenEnabled';\r\n            if (document[name] !== undefined) {\r\n                _names.fullscreenEnabled = name;\r\n            } else {\r\n                name = prefix + 'FullScreenEnabled';\r\n                if (document[name] !== undefined) {\r\n                    _names.fullscreenEnabled = name;\r\n                }\r\n            }\r\n\r\n            // casing of Fullscreen differs across browsers\r\n            name = prefix + 'FullscreenElement';\r\n            if (document[name] !== undefined) {\r\n                _names.fullscreenElement = name;\r\n            } else {\r\n                name = prefix + 'FullScreenElement';\r\n                if (document[name] !== undefined) {\r\n                    _names.fullscreenElement = name;\r\n                }\r\n            }\r\n\r\n            // thankfully, event names are all lowercase per spec\r\n            name = prefix + 'fullscreenchange';\r\n            // event names do not have 'on' in the front, but the property on the document does\r\n            if (document['on' + name] !== undefined) {\r\n                //except on IE\r\n                if (prefix === 'ms') {\r\n                    name = 'MSFullscreenChange';\r\n                }\r\n                _names.fullscreenchange = name;\r\n            }\r\n\r\n            name = prefix + 'fullscreenerror';\r\n            if (document['on' + name] !== undefined) {\r\n                //except on IE\r\n                if (prefix === 'ms') {\r\n                    name = 'MSFullscreenError';\r\n                }\r\n                _names.fullscreenerror = name;\r\n            }\r\n        }\r\n\r\n        return _supportsFullscreen;\r\n    };\r\n\r\n    /**\r\n     * Asynchronously requests the browser to enter fullscreen mode on the given element.\r\n     * If fullscreen mode is not supported by the browser, does nothing.\r\n     *\r\n     * @param {Object} element The HTML element which will be placed into fullscreen mode.\r\n     * @param {HMDVRDevice} [vrDevice] The VR device.\r\n     *\r\n     * @example\r\n     * // Put the entire page into fullscreen.\r\n     * Cesium.Fullscreen.requestFullscreen(document.body)\r\n     *\r\n     * // Place only the Cesium canvas into fullscreen.\r\n     * Cesium.Fullscreen.requestFullscreen(scene.canvas)\r\n     */\r\n    Fullscreen.requestFullscreen = function(element, vrDevice) {\r\n        if (!Fullscreen.supportsFullscreen()) {\r\n            return;\r\n        }\r\n\r\n        element[_names.requestFullscreen]({ vrDisplay: vrDevice });\r\n    };\r\n\r\n    /**\r\n     * Asynchronously exits fullscreen mode.  If the browser is not currently\r\n     * in fullscreen, or if fullscreen mode is not supported by the browser, does nothing.\r\n     */\r\n    Fullscreen.exitFullscreen = function() {\r\n        if (!Fullscreen.supportsFullscreen()) {\r\n            return;\r\n        }\r\n\r\n        document[_names.exitFullscreen]();\r\n    };\r\n\r\n    return Fullscreen;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Fullscreen.js\n// module id = 168\n// module chunks = 0","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-define.js\n// module id = 169\n// module chunks = 0","define([\r\n        '../ThirdParty/when',\r\n        './binarySearch',\r\n        './defaultValue',\r\n        './defined',\r\n        './EarthOrientationParametersSample',\r\n        './freezeObject',\r\n        './JulianDate',\r\n        './LeapSecond',\r\n        './Resource',\r\n        './RuntimeError',\r\n        './TimeConstants',\r\n        './TimeStandard'\r\n    ], function(\r\n        when,\r\n        binarySearch,\r\n        defaultValue,\r\n        defined,\r\n        EarthOrientationParametersSample,\r\n        freezeObject,\r\n        JulianDate,\r\n        LeapSecond,\r\n        Resource,\r\n        RuntimeError,\r\n        TimeConstants,\r\n        TimeStandard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Specifies Earth polar motion coordinates and the difference between UT1 and UTC.\r\n     * These Earth Orientation Parameters (EOP) are primarily used in the transformation from\r\n     * the International Celestial Reference Frame (ICRF) to the International Terrestrial\r\n     * Reference Frame (ITRF).\r\n     *\r\n     * @alias EarthOrientationParameters\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Resource|String} [options.url] The URL from which to obtain EOP data.  If neither this\r\n     *                 parameter nor options.data is specified, all EOP values are assumed\r\n     *                 to be 0.0.  If options.data is specified, this parameter is\r\n     *                 ignored.\r\n     * @param {Object} [options.data] The actual EOP data.  If neither this\r\n     *                 parameter nor options.data is specified, all EOP values are assumed\r\n     *                 to be 0.0.\r\n     * @param {Boolean} [options.addNewLeapSeconds=true] True if leap seconds that\r\n     *                  are specified in the EOP data but not in {@link JulianDate.leapSeconds}\r\n     *                  should be added to {@link JulianDate.leapSeconds}.  False if\r\n     *                  new leap seconds should be handled correctly in the context\r\n     *                  of the EOP data but otherwise ignored.\r\n     *\r\n     * @example\r\n     * // An example EOP data file, EOP.json:\r\n     * {\r\n     *   \"columnNames\" : [\"dateIso8601\",\"modifiedJulianDateUtc\",\"xPoleWanderRadians\",\"yPoleWanderRadians\",\"ut1MinusUtcSeconds\",\"lengthOfDayCorrectionSeconds\",\"xCelestialPoleOffsetRadians\",\"yCelestialPoleOffsetRadians\",\"taiMinusUtcSeconds\"],\r\n     *   \"samples\" : [\r\n     *      \"2011-07-01T00:00:00Z\",55743.0,2.117957047295119e-7,2.111518721609984e-6,-0.2908948,-2.956e-4,3.393695767766752e-11,3.3452143996557983e-10,34.0,\r\n     *      \"2011-07-02T00:00:00Z\",55744.0,2.193297093339541e-7,2.115460256837405e-6,-0.29065,-1.824e-4,-8.241832578862112e-11,5.623838700870617e-10,34.0,\r\n     *      \"2011-07-03T00:00:00Z\",55745.0,2.262286080161428e-7,2.1191157519929706e-6,-0.2905572,1.9e-6,-3.490658503988659e-10,6.981317007977318e-10,34.0\r\n     *   ]\r\n     * }\r\n     *\r\n     * @example\r\n     * // Loading the EOP data\r\n     * var eop = new Cesium.EarthOrientationParameters({ url : 'Data/EOP.json' });\r\n     * Cesium.Transforms.earthOrientationParameters = eop;\r\n     *\r\n     * @private\r\n     */\r\n    function EarthOrientationParameters(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._dates = undefined;\r\n        this._samples = undefined;\r\n\r\n        this._dateColumn = -1;\r\n        this._xPoleWanderRadiansColumn = -1;\r\n        this._yPoleWanderRadiansColumn = -1;\r\n        this._ut1MinusUtcSecondsColumn = -1;\r\n        this._xCelestialPoleOffsetRadiansColumn = -1;\r\n        this._yCelestialPoleOffsetRadiansColumn = -1;\r\n        this._taiMinusUtcSecondsColumn = -1;\r\n\r\n        this._columnCount = 0;\r\n        this._lastIndex = -1;\r\n\r\n        this._downloadPromise = undefined;\r\n        this._dataError = undefined;\r\n\r\n        this._addNewLeapSeconds = defaultValue(options.addNewLeapSeconds, true);\r\n\r\n        if (defined(options.data)) {\r\n            // Use supplied EOP data.\r\n            onDataReady(this, options.data);\r\n        } else if (defined(options.url)) {\r\n            var resource = Resource.createIfNeeded(options.url);\r\n\r\n            // Download EOP data.\r\n            var that = this;\r\n            this._downloadPromise = when(resource.fetchJson(), function(eopData) {\r\n                onDataReady(that, eopData);\r\n            }, function() {\r\n                that._dataError = 'An error occurred while retrieving the EOP data from the URL ' + resource.url + '.';\r\n            });\r\n        } else {\r\n            // Use all zeros for EOP data.\r\n            onDataReady(this, {\r\n                'columnNames' : ['dateIso8601', 'modifiedJulianDateUtc', 'xPoleWanderRadians', 'yPoleWanderRadians', 'ut1MinusUtcSeconds', 'lengthOfDayCorrectionSeconds', 'xCelestialPoleOffsetRadians', 'yCelestialPoleOffsetRadians', 'taiMinusUtcSeconds'],\r\n                'samples' : []\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A default {@link EarthOrientationParameters} instance that returns zero for all EOP values.\r\n     */\r\n    EarthOrientationParameters.NONE = freezeObject({\r\n            getPromiseToLoad : function() {\r\n                return when();\r\n            },\r\n            compute : function(date, result) {\r\n                if (!defined(result)) {\r\n                    result = new EarthOrientationParametersSample(0.0, 0.0, 0.0, 0.0, 0.0);\r\n                } else {\r\n                    result.xPoleWander = 0.0;\r\n                    result.yPoleWander = 0.0;\r\n                    result.xPoleOffset = 0.0;\r\n                    result.yPoleOffset = 0.0;\r\n                    result.ut1MinusUtc = 0.0;\r\n                }\r\n                return result;\r\n            }\r\n    });\r\n\r\n    /**\r\n     * Gets a promise that, when resolved, indicates that the EOP data has been loaded and is\r\n     * ready to use.\r\n     *\r\n     * @returns {Promise.<undefined>} The promise.\r\n     *\r\n     * @see when\r\n     */\r\n    EarthOrientationParameters.prototype.getPromiseToLoad = function() {\r\n        return when(this._downloadPromise);\r\n    };\r\n\r\n    /**\r\n     * Computes the Earth Orientation Parameters (EOP) for a given date by interpolating.\r\n     * If the EOP data has not yet been download, this method returns undefined.\r\n     *\r\n     * @param {JulianDate} date The date for each to evaluate the EOP.\r\n     * @param {EarthOrientationParametersSample} [result] The instance to which to copy the result.\r\n     *        If this parameter is undefined, a new instance is created and returned.\r\n     * @returns {EarthOrientationParametersSample} The EOP evaluated at the given date, or\r\n     *          undefined if the data necessary to evaluate EOP at the date has not yet been\r\n     *          downloaded.\r\n     *\r\n     * @exception {RuntimeError} The loaded EOP data has an error and cannot be used.\r\n     *\r\n     * @see EarthOrientationParameters#getPromiseToLoad\r\n     */\r\n    EarthOrientationParameters.prototype.compute = function(date, result) {\r\n        // We cannot compute until the samples are available.\r\n        if (!defined(this._samples)) {\r\n            if (defined(this._dataError)) {\r\n                throw new RuntimeError(this._dataError);\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            result = new EarthOrientationParametersSample(0.0, 0.0, 0.0, 0.0, 0.0);\r\n        }\r\n\r\n        if (this._samples.length === 0) {\r\n            result.xPoleWander = 0.0;\r\n            result.yPoleWander = 0.0;\r\n            result.xPoleOffset = 0.0;\r\n            result.yPoleOffset = 0.0;\r\n            result.ut1MinusUtc = 0.0;\r\n            return result;\r\n        }\r\n\r\n        var dates = this._dates;\r\n        var lastIndex = this._lastIndex;\r\n\r\n        var before = 0;\r\n        var after = 0;\r\n        if (defined(lastIndex)) {\r\n            var previousIndexDate = dates[lastIndex];\r\n            var nextIndexDate = dates[lastIndex + 1];\r\n            var isAfterPrevious = JulianDate.lessThanOrEquals(previousIndexDate, date);\r\n            var isAfterLastSample = !defined(nextIndexDate);\r\n            var isBeforeNext = isAfterLastSample || JulianDate.greaterThanOrEquals(nextIndexDate, date);\r\n\r\n            if (isAfterPrevious && isBeforeNext) {\r\n                before = lastIndex;\r\n\r\n                if (!isAfterLastSample && nextIndexDate.equals(date)) {\r\n                    ++before;\r\n                }\r\n                after = before + 1;\r\n\r\n                interpolate(this, dates, this._samples, date, before, after, result);\r\n                return result;\r\n            }\r\n        }\r\n\r\n        var index = binarySearch(dates, date, JulianDate.compare, this._dateColumn);\r\n        if (index >= 0) {\r\n            // If the next entry is the same date, use the later entry.  This way, if two entries\r\n            // describe the same moment, one before a leap second and the other after, then we will use\r\n            // the post-leap second data.\r\n            if (index < dates.length - 1 && dates[index + 1].equals(date)) {\r\n                ++index;\r\n            }\r\n            before = index;\r\n            after = index;\r\n        } else {\r\n            after = ~index;\r\n            before = after - 1;\r\n\r\n            // Use the first entry if the date requested is before the beginning of the data.\r\n            if (before < 0) {\r\n                before = 0;\r\n            }\r\n        }\r\n\r\n        this._lastIndex = before;\r\n\r\n        interpolate(this, dates, this._samples, date, before, after, result);\r\n        return result;\r\n    };\r\n\r\n    function compareLeapSecondDates(leapSecond, dateToFind) {\r\n        return JulianDate.compare(leapSecond.julianDate, dateToFind);\r\n    }\r\n\r\n    function onDataReady(eop, eopData) {\r\n        if (!defined(eopData.columnNames)) {\r\n            eop._dataError = 'Error in loaded EOP data: The columnNames property is required.';\r\n            return;\r\n        }\r\n\r\n        if (!defined(eopData.samples)) {\r\n            eop._dataError = 'Error in loaded EOP data: The samples property is required.';\r\n            return;\r\n        }\r\n\r\n        var dateColumn = eopData.columnNames.indexOf('modifiedJulianDateUtc');\r\n        var xPoleWanderRadiansColumn = eopData.columnNames.indexOf('xPoleWanderRadians');\r\n        var yPoleWanderRadiansColumn = eopData.columnNames.indexOf('yPoleWanderRadians');\r\n        var ut1MinusUtcSecondsColumn = eopData.columnNames.indexOf('ut1MinusUtcSeconds');\r\n        var xCelestialPoleOffsetRadiansColumn = eopData.columnNames.indexOf('xCelestialPoleOffsetRadians');\r\n        var yCelestialPoleOffsetRadiansColumn = eopData.columnNames.indexOf('yCelestialPoleOffsetRadians');\r\n        var taiMinusUtcSecondsColumn = eopData.columnNames.indexOf('taiMinusUtcSeconds');\r\n\r\n        if (dateColumn < 0 || xPoleWanderRadiansColumn < 0 || yPoleWanderRadiansColumn < 0 || ut1MinusUtcSecondsColumn < 0 || xCelestialPoleOffsetRadiansColumn < 0 || yCelestialPoleOffsetRadiansColumn < 0 || taiMinusUtcSecondsColumn < 0) {\r\n            eop._dataError = 'Error in loaded EOP data: The columnNames property must include modifiedJulianDateUtc, xPoleWanderRadians, yPoleWanderRadians, ut1MinusUtcSeconds, xCelestialPoleOffsetRadians, yCelestialPoleOffsetRadians, and taiMinusUtcSeconds columns';\r\n            return;\r\n        }\r\n\r\n        var samples = eop._samples = eopData.samples;\r\n        var dates = eop._dates = [];\r\n\r\n        eop._dateColumn = dateColumn;\r\n        eop._xPoleWanderRadiansColumn = xPoleWanderRadiansColumn;\r\n        eop._yPoleWanderRadiansColumn = yPoleWanderRadiansColumn;\r\n        eop._ut1MinusUtcSecondsColumn = ut1MinusUtcSecondsColumn;\r\n        eop._xCelestialPoleOffsetRadiansColumn = xCelestialPoleOffsetRadiansColumn;\r\n        eop._yCelestialPoleOffsetRadiansColumn = yCelestialPoleOffsetRadiansColumn;\r\n        eop._taiMinusUtcSecondsColumn = taiMinusUtcSecondsColumn;\r\n\r\n        eop._columnCount = eopData.columnNames.length;\r\n        eop._lastIndex = undefined;\r\n\r\n        var lastTaiMinusUtc;\r\n\r\n        var addNewLeapSeconds = eop._addNewLeapSeconds;\r\n\r\n        // Convert the ISO8601 dates to JulianDates.\r\n        for (var i = 0, len = samples.length; i < len; i += eop._columnCount) {\r\n            var mjd = samples[i + dateColumn];\r\n            var taiMinusUtc = samples[i + taiMinusUtcSecondsColumn];\r\n            var day = mjd + TimeConstants.MODIFIED_JULIAN_DATE_DIFFERENCE;\r\n            var date = new JulianDate(day, taiMinusUtc, TimeStandard.TAI);\r\n            dates.push(date);\r\n\r\n            if (addNewLeapSeconds) {\r\n                if (taiMinusUtc !== lastTaiMinusUtc && defined(lastTaiMinusUtc)) {\r\n                    // We crossed a leap second boundary, so add the leap second\r\n                    // if it does not already exist.\r\n                    var leapSeconds = JulianDate.leapSeconds;\r\n                    var leapSecondIndex = binarySearch(leapSeconds, date, compareLeapSecondDates);\r\n                    if (leapSecondIndex < 0) {\r\n                        var leapSecond = new LeapSecond(date, taiMinusUtc);\r\n                        leapSeconds.splice(~leapSecondIndex, 0, leapSecond);\r\n                    }\r\n                }\r\n                lastTaiMinusUtc = taiMinusUtc;\r\n            }\r\n        }\r\n    }\r\n\r\n    function fillResultFromIndex(eop, samples, index, columnCount, result) {\r\n        var start = index * columnCount;\r\n        result.xPoleWander = samples[start + eop._xPoleWanderRadiansColumn];\r\n        result.yPoleWander = samples[start + eop._yPoleWanderRadiansColumn];\r\n        result.xPoleOffset = samples[start + eop._xCelestialPoleOffsetRadiansColumn];\r\n        result.yPoleOffset = samples[start + eop._yCelestialPoleOffsetRadiansColumn];\r\n        result.ut1MinusUtc = samples[start + eop._ut1MinusUtcSecondsColumn];\r\n    }\r\n\r\n    function linearInterp(dx, y1, y2) {\r\n        return y1 + dx * (y2 - y1);\r\n    }\r\n\r\n    function interpolate(eop, dates, samples, date, before, after, result) {\r\n        var columnCount = eop._columnCount;\r\n\r\n        // First check the bounds on the EOP data\r\n        // If we are after the bounds of the data, return zeros.\r\n        // The 'before' index should never be less than zero.\r\n        if (after > dates.length - 1) {\r\n            result.xPoleWander = 0;\r\n            result.yPoleWander = 0;\r\n            result.xPoleOffset = 0;\r\n            result.yPoleOffset = 0;\r\n            result.ut1MinusUtc = 0;\r\n            return result;\r\n        }\r\n\r\n        var beforeDate = dates[before];\r\n        var afterDate = dates[after];\r\n        if (beforeDate.equals(afterDate) || date.equals(beforeDate)) {\r\n            fillResultFromIndex(eop, samples, before, columnCount, result);\r\n            return result;\r\n        } else if (date.equals(afterDate)) {\r\n            fillResultFromIndex(eop, samples, after, columnCount, result);\r\n            return result;\r\n        }\r\n\r\n        var factor = JulianDate.secondsDifference(date, beforeDate) / JulianDate.secondsDifference(afterDate, beforeDate);\r\n\r\n        var startBefore = before * columnCount;\r\n        var startAfter = after * columnCount;\r\n\r\n        // Handle UT1 leap second edge case\r\n        var beforeUt1MinusUtc = samples[startBefore + eop._ut1MinusUtcSecondsColumn];\r\n        var afterUt1MinusUtc = samples[startAfter + eop._ut1MinusUtcSecondsColumn];\r\n\r\n        var offsetDifference = afterUt1MinusUtc - beforeUt1MinusUtc;\r\n        if (offsetDifference > 0.5 || offsetDifference < -0.5) {\r\n            // The absolute difference between the values is more than 0.5, so we may have\r\n            // crossed a leap second.  Check if this is the case and, if so, adjust the\r\n            // afterValue to account for the leap second.  This way, our interpolation will\r\n            // produce reasonable results.\r\n            var beforeTaiMinusUtc = samples[startBefore + eop._taiMinusUtcSecondsColumn];\r\n            var afterTaiMinusUtc = samples[startAfter + eop._taiMinusUtcSecondsColumn];\r\n            if (beforeTaiMinusUtc !== afterTaiMinusUtc) {\r\n                if (afterDate.equals(date)) {\r\n                    // If we are at the end of the leap second interval, take the second value\r\n                    // Otherwise, the interpolation below will yield the wrong side of the\r\n                    // discontinuity\r\n                    // At the end of the leap second, we need to start accounting for the jump\r\n                    beforeUt1MinusUtc = afterUt1MinusUtc;\r\n                } else {\r\n                    // Otherwise, remove the leap second so that the interpolation is correct\r\n                    afterUt1MinusUtc -= afterTaiMinusUtc - beforeTaiMinusUtc;\r\n                }\r\n            }\r\n        }\r\n\r\n        result.xPoleWander = linearInterp(factor, samples[startBefore + eop._xPoleWanderRadiansColumn], samples[startAfter + eop._xPoleWanderRadiansColumn]);\r\n        result.yPoleWander = linearInterp(factor, samples[startBefore + eop._yPoleWanderRadiansColumn], samples[startAfter + eop._yPoleWanderRadiansColumn]);\r\n        result.xPoleOffset = linearInterp(factor, samples[startBefore + eop._xCelestialPoleOffsetRadiansColumn], samples[startAfter + eop._xCelestialPoleOffsetRadiansColumn]);\r\n        result.yPoleOffset = linearInterp(factor, samples[startBefore + eop._yCelestialPoleOffsetRadiansColumn], samples[startAfter + eop._yCelestialPoleOffsetRadiansColumn]);\r\n        result.ut1MinusUtc = linearInterp(factor, beforeUt1MinusUtc, afterUt1MinusUtc);\r\n        return result;\r\n    }\r\n\r\n    return EarthOrientationParameters;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/EarthOrientationParameters.js\n// module id = 170\n// module chunks = 0","define(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * Represents a Gregorian date in a more precise format than the JavaScript Date object.\r\n     * In addition to submillisecond precision, this object can also represent leap seconds.\r\n     * @alias GregorianDate\r\n     * @constructor\r\n     *\r\n     * @see JulianDate#toGregorianDate\r\n     */\r\n    function GregorianDate(year, month, day, hour, minute, second, millisecond, isLeapSecond) {\r\n        /**\r\n         * Gets or sets the year as a whole number.\r\n         * @type {Number}\r\n         */\r\n        this.year = year;\r\n        /**\r\n         * Gets or sets the month as a whole number with range [1, 12].\r\n         * @type {Number}\r\n         */\r\n        this.month = month;\r\n        /**\r\n         * Gets or sets the day of the month as a whole number starting at 1.\r\n         * @type {Number}\r\n         */\r\n        this.day = day;\r\n        /**\r\n         * Gets or sets the hour as a whole number with range [0, 23].\r\n         * @type {Number}\r\n         */\r\n        this.hour = hour;\r\n        /**\r\n         * Gets or sets the minute of the hour as a whole number with range [0, 59].\r\n         * @type {Number}\r\n         */\r\n        this.minute = minute;\r\n        /**\r\n         * Gets or sets the second of the minute as a whole number with range [0, 60], with 60 representing a leap second.\r\n         * @type {Number}\r\n         */\r\n        this.second = second;\r\n        /**\r\n         * Gets or sets the millisecond of the second as a floating point number with range [0.0, 1000.0).\r\n         * @type {Number}\r\n         */\r\n        this.millisecond = millisecond;\r\n        /**\r\n         * Gets or sets whether this time is during a leap second.\r\n         * @type {Boolean}\r\n         */\r\n        this.isLeapSecond = isLeapSecond;\r\n    }\r\n\r\n    return GregorianDate;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GregorianDate.js\n// module id = 171\n// module chunks = 0","/**\r\n@license\r\nsprintf.js from the php.js project - https-colon-slashslash github.com/kvz/phpjs\r\nDirectly from https-colon-slashslash github.com/kvz/phpjs/blob/master/functions/strings/sprintf.js\r\n\r\nphp.js is copyright 2012 Kevin van Zonneveld.\r\n\r\nPortions copyright Brett Zamir (http-colon-slashslash brett-zamir.me), Kevin van Zonneveld\r\n(http-colon-slashslash kevin.vanzonneveld.net), Onno Marsman, Theriault, Michael White\r\n(http-colon-slashslash getsprink.com), Waldo Malqui Silva, Paulo Freitas, Jack, Jonas\r\nRaoni Soares Silva (http-colon-slashslash www.jsfromhell.com), Philip Peterson, Legaev\r\nAndrey, Ates Goral (http-colon-slashslash magnetiq.com), Alex, Ratheous, Martijn Wieringa,\r\nRafa? Kukawski (http-colon-slashslash blog.kukawski.pl), lmeyrick\r\n(https-colon-slashslash sourceforge.net/projects/bcmath-js/), Nate, Philippe Baumann,\r\nEnrique Gonzalez, Webtoolkit.info (http-colon-slashslash www.webtoolkit.info/), Carlos R.\r\nL. Rodrigues (http-colon-slashslash www.jsfromhell.com), Ash Searle\r\n(http-colon-slashslash hexmen.com/blog/), Jani Hartikainen, travc, Ole Vrijenhoek,\r\nErkekjetter, Michael Grier, Rafa? Kukawski (http-colon-slashslash kukawski.pl), Johnny\r\nMast (http-colon-slashslash www.phpvrouwen.nl), T.Wild, d3x,\r\nhttp-colon-slashslash stackoverflow.com/questions/57803/how-to-convert-decimal-to-hex-in-javascript,\r\nRafa? Kukawski (http-colon-slashslash blog.kukawski.pl/), stag019, pilus, WebDevHobo\r\n(http-colon-slashslash webdevhobo.blogspot.com/), marrtins, GeekFG\r\n(http-colon-slashslash geekfg.blogspot.com), Andrea Giammarchi\r\n(http-colon-slashslash webreflection.blogspot.com), Arpad Ray (mailto:arpad@php.net),\r\ngorthaur, Paul Smith, Tim de Koning (http-colon-slashslash www.kingsquare.nl), Joris, Oleg\r\nEremeev, Steve Hilder, majak, gettimeofday, KELAN, Josh Fraser\r\n(http-colon-slashslash onlineaspect.com/2007/06/08/auto-detect-a-time-zone-with-javascript/),\r\nMarc Palau, Martin\r\n(http-colon-slashslash www.erlenwiese.de/), Breaking Par Consulting Inc\r\n(http-colon-slashslash www.breakingpar.com/bkp/home.nsf/0/87256B280015193F87256CFB006C45F7),\r\nChris, Mirek Slugen, saulius, Alfonso Jimenez\r\n(http-colon-slashslash www.alfonsojimenez.com), Diplom@t (http-colon-slashslash difane.com/), felix,\r\nMailfaker (http-colon-slashslash www.weedem.fr/), Tyler Akins (http-colon-slashslash rumkin.com), Caio\r\nAriede (http-colon-slashslash caioariede.com), Robin, Kankrelune\r\n(http-colon-slashslash www.webfaktory.info/), Karol Kowalski, Imgen Tata\r\n(http-colon-slashslash www.myipdf.com/), mdsjack (http-colon-slashslash www.mdsjack.bo.it), Dreamer,\r\nFelix Geisendoerfer (http-colon-slashslash www.debuggable.com/felix), Lars Fischer, AJ,\r\nDavid, Aman Gupta, Michael White, Public Domain\r\n(http-colon-slashslash www.json.org/json2.js), Steven Levithan\r\n(http-colon-slashslash blog.stevenlevithan.com), Sakimori, Pellentesque Malesuada,\r\nThunder.m, Dj (http-colon-slashslash phpjs.org/functions/htmlentities:425#comment_134018),\r\nSteve Clay, David James, Francois, class_exists, nobbler, T. Wild, Itsacon\r\n(http-colon-slashslash www.itsacon.net/), date, Ole Vrijenhoek (http-colon-slashslash www.nervous.nl/),\r\nFox, Raphael (Ao RUDLER), Marco, noname, Mateusz \"loonquawl\" Zalega, Frank\r\nForte, Arno, ger, mktime, john (http-colon-slashslash www.jd-tech.net), Nick Kolosov\r\n(http-colon-slashslash sammy.ru), marc andreu, Scott Cariss, Douglas Crockford\r\n(http-colon-slashslash javascript.crockford.com), madipta, Slawomir Kaniecki,\r\nReverseSyntax, Nathan, Alex Wilson, kenneth, Bayron Guevara, Adam Wallner\r\n(http-colon-slashslash web2.bitbaro.hu/), paulo kuong, jmweb, Lincoln Ramsay, djmix,\r\nPyerre, Jon Hohle, Thiago Mata (http-colon-slashslash thiagomata.blog.com), lmeyrick\r\n(https-colon-slashslash sourceforge.net/projects/bcmath-js/this.), Linuxworld, duncan,\r\nGilbert, Sanjoy Roy, Shingo, sankai, Oskar Larsson H?gfeldt\r\n(http-colon-slashslash oskar-lh.name/), Denny Wardhana, 0m3r, Everlasto, Subhasis Deb,\r\njosh, jd, Pier Paolo Ramon (http-colon-slashslash www.mastersoup.com/), P, merabi, Soren\r\nHansen, Eugene Bulkin (http-colon-slashslash doubleaw.com/), Der Simon\r\n(http-colon-slashslash innerdom.sourceforge.net/), echo is bad, Ozh, XoraX\r\n(http-colon-slashslash www.xorax.info), EdorFaus, JB, J A R, Marc Jansen, Francesco, LH,\r\nStoyan Kyosev (http-colon-slashslash www.svest.org/), nord_ua, omid\r\n(http-colon-slashslash phpjs.org/functions/380:380#comment_137122), Brad Touesnard, MeEtc\r\n(http-colon-slashslash yass.meetcweb.com), Peter-Paul Koch\r\n(http-colon-slashslash www.quirksmode.org/js/beat.html), Olivier Louvignes\r\n(http-colon-slashslash mg-crea.com/), T0bsn, Tim Wiel, Bryan Elliott, Jalal Berrami,\r\nMartin, JT, David Randall, Thomas Beaucourt (http-colon-slashslash www.webapp.fr), taith,\r\nvlado houba, Pierre-Luc Paour, Kristof Coomans (SCK-CEN Belgian Nucleair\r\nResearch Centre), Martin Pool, Kirk Strobeck, Rick Waldron, Brant Messenger\r\n(http-colon-slashslash www.brantmessenger.com/), Devan Penner-Woelk, Saulo Vallory, Wagner\r\nB. Soares, Artur Tchernychev, Valentina De Rosa, Jason Wong\r\n(http-colon-slashslash carrot.org/), Christoph, Daniel Esteban, strftime, Mick@el, rezna,\r\nSimon Willison (http-colon-slashslash simonwillison.net), Anton Ongson, Gabriel Paderni,\r\nMarco van Oort, penutbutterjelly, Philipp Lenssen, Bjorn Roesbeke\r\n(http-colon-slashslash www.bjornroesbeke.be/), Bug?, Eric Nagel, Tomasz Wesolowski,\r\nEvertjan Garretsen, Bobby Drake, Blues (http-colon-slashslash tech.bluesmoon.info/), Luke\r\nGodfrey, Pul, uestla, Alan C, Ulrich, Rafal Kukawski, Yves Sucaet,\r\nsowberry, Norman \"zEh\" Fuchs, hitwork, Zahlii, johnrembo, Nick Callen,\r\nSteven Levithan (stevenlevithan.com), ejsanders, Scott Baker, Brian Tafoya\r\n(http-colon-slashslash www.premasolutions.com/), Philippe Jausions\r\n(http-colon-slashslash pear.php.net/user/jausions), Aidan Lister\r\n(http-colon-slashslash aidanlister.com/), Rob, e-mike, HKM, ChaosNo1, metjay, strcasecmp,\r\nstrcmp, Taras Bogach, jpfle, Alexander Ermolaev\r\n(http-colon-slashslash snippets.dzone.com/user/AlexanderErmolaev), DxGx, kilops, Orlando,\r\ndptr1988, Le Torbi, James (http-colon-slashslash www.james-bell.co.uk/), Pedro Tainha\r\n(http-colon-slashslash www.pedrotainha.com), James, Arnout Kazemier\r\n(http-colon-slashslash www.3rd-Eden.com), Chris McMacken, gabriel paderni, Yannoo,\r\nFGFEmperor, baris ozdil, Tod Gentille, Greg Frazier, jakes, 3D-GRAF, Allan\r\nJensen (http-colon-slashslash www.winternet.no), Howard Yeend, Benjamin Lupton, davook,\r\ndaniel airton wermann (http-colon-slashslash wermann.com.br), Atli T¨®r, Maximusya, Ryan\r\nW Tenney (http-colon-slashslash ryan.10e.us), Alexander M Beedie, fearphage\r\n(http-colon-slashslash http/my.opera.com/fearphage/), Nathan Sepulveda, Victor, Matteo,\r\nBilly, stensi, Cord, Manish, T.J. Leahy, Riddler\r\n(http-colon-slashslash www.frontierwebdev.com/), Rafa? Kukawski, FremyCompany, Matt\r\nBradley, Tim de Koning, Luis Salazar (http-colon-slashslash www.freaky-media.com/), Diogo\r\nResende, Rival, Andrej Pavlovic, Garagoth, Le Torbi\r\n(http-colon-slashslash www.letorbi.de/), Dino, Josep Sanz (http-colon-slashslash www.ws3.es/), rem,\r\nRussell Walker (http-colon-slashslash www.nbill.co.uk/), Jamie Beck\r\n(http-colon-slashslash www.terabit.ca/), setcookie, Michael, YUI Library:\r\nhttp-colon-slashslash developer.yahoo.com/yui/docs/YAHOO.util.DateLocale.html, Blues at\r\nhttp-colon-slashslash hacks.bluesmoon.info/strftime/strftime.js, Ben\r\n(http-colon-slashslash benblume.co.uk/), DtTvB\r\n(http-colon-slashslash dt.in.th/2008-09-16.string-length-in-bytes.html), Andreas, William,\r\nmeo, incidence, Cagri Ekin, Amirouche, Amir Habibi\r\n(http-colon-slashslash www.residence-mixte.com/), Luke Smith (http-colon-slashslash lucassmith.name),\r\nKheang Hok Chin (http-colon-slashslash www.distantia.ca/), Jay Klehr, Lorenzo Pisani,\r\nTony, Yen-Wei Liu, Greenseed, mk.keck, Leslie Hoare, dude, booeyOH, Ben\r\nBryan\r\n\r\nLicensed under the MIT (MIT-LICENSE.txt) license.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a\r\ncopy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL KEVIN VAN ZONNEVELD BE LIABLE FOR ANY CLAIM, DAMAGES\r\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\ndefine(function() {\r\n\r\nfunction sprintf () {\r\n  // http://kevin.vanzonneveld.net\r\n  // +   original by: Ash Searle (http://hexmen.com/blog/)\r\n  // + namespaced by: Michael White (http://getsprink.com)\r\n  // +    tweaked by: Jack\r\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n  // +      input by: Paulo Freitas\r\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n  // +      input by: Brett Zamir (http://brett-zamir.me)\r\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n  // +   improved by: Dj\r\n  // +   improved by: Allidylls\r\n  // *     example 1: sprintf(\"%01.2f\", 123.1);\r\n  // *     returns 1: 123.10\r\n  // *     example 2: sprintf(\"[%10s]\", 'monkey');\r\n  // *     returns 2: '[    monkey]'\r\n  // *     example 3: sprintf(\"[%'#10s]\", 'monkey');\r\n  // *     returns 3: '[####monkey]'\r\n  // *     example 4: sprintf(\"%d\", 123456789012345);\r\n  // *     returns 4: '123456789012345'\r\n  var regex = /%%|%(\\d+\\$)?([-+\\'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g;\r\n  var a = arguments,\r\n    i = 0,\r\n    format = a[i++];\r\n\r\n  // pad()\r\n  var pad = function (str, len, chr, leftJustify) {\r\n    if (!chr) {\r\n      chr = ' ';\r\n    }\r\n\r\n    var padding = (str.length >= len) ? '' : Array(1 + len - str.length >>> 0).join(chr);\r\n    return leftJustify ? str + padding : padding + str;\r\n  };\r\n\r\n  // justify()\r\n  var justify = function (value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {\r\n    var diff = minWidth - value.length;\r\n    if (diff > 0) {\r\n      if (leftJustify || !zeroPad) {\r\n        value = pad(value, minWidth, customPadChar, leftJustify);\r\n      } else {\r\n        value = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length);\r\n      }\r\n    }\r\n    return value;\r\n  };\r\n\r\n  // formatBaseX()\r\n  var formatBaseX = function (value, base, prefix, leftJustify, minWidth, precision, zeroPad) {\r\n    // Note: casts negative numbers to positive ones\r\n    var number = value >>> 0;\r\n    prefix = prefix && number && {\r\n      '2': '0b',\r\n      '8': '0',\r\n      '16': '0x'\r\n    }[base] || '';\r\n    value = prefix + pad(number.toString(base), precision || 0, '0', false);\r\n    return justify(value, prefix, leftJustify, minWidth, zeroPad);\r\n  };\r\n\r\n  // formatString()\r\n  var formatString = function (value, leftJustify, minWidth, precision, zeroPad, customPadChar) {\r\n    if (precision != null) {\r\n      value = value.slice(0, precision);\r\n    }\r\n    return justify(value, '', leftJustify, minWidth, zeroPad, customPadChar);\r\n  };\r\n\r\n  // doFormat()\r\n  var doFormat = function (substring, valueIndex, flags, minWidth, _, precision, type) {\r\n    var number;\r\n    var prefix;\r\n    var method;\r\n    var textTransform;\r\n    var value;\r\n\r\n    if (substring == '%%') {\r\n      return '%';\r\n    }\r\n\r\n    // parse flags\r\n    var leftJustify = false,\r\n      positivePrefix = '',\r\n      zeroPad = false,\r\n      prefixBaseX = false,\r\n      customPadChar = ' ';\r\n    var flagsl = flags.length;\r\n    for (var j = 0; flags && j < flagsl; j++) {\r\n      switch (flags.charAt(j)) {\r\n      case ' ':\r\n        positivePrefix = ' ';\r\n        break;\r\n      case '+':\r\n        positivePrefix = '+';\r\n        break;\r\n      case '-':\r\n        leftJustify = true;\r\n        break;\r\n      case \"'\":\r\n        customPadChar = flags.charAt(j + 1);\r\n        break;\r\n      case '0':\r\n        zeroPad = true;\r\n        break;\r\n      case '#':\r\n        prefixBaseX = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // parameters may be null, undefined, empty-string or real valued\r\n    // we want to ignore null, undefined and empty-string values\r\n    if (!minWidth) {\r\n      minWidth = 0;\r\n    } else if (minWidth == '*') {\r\n      minWidth = +a[i++];\r\n    } else if (minWidth.charAt(0) == '*') {\r\n      minWidth = +a[minWidth.slice(1, -1)];\r\n    } else {\r\n      minWidth = +minWidth;\r\n    }\r\n\r\n    // Note: undocumented perl feature:\r\n    if (minWidth < 0) {\r\n      minWidth = -minWidth;\r\n      leftJustify = true;\r\n    }\r\n\r\n    if (!isFinite(minWidth)) {\r\n      throw new Error('sprintf: (minimum-)width must be finite');\r\n    }\r\n\r\n    if (!precision) {\r\n      precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type == 'd') ? 0 : undefined;\r\n    } else if (precision == '*') {\r\n      precision = +a[i++];\r\n    } else if (precision.charAt(0) == '*') {\r\n      precision = +a[precision.slice(1, -1)];\r\n    } else {\r\n      precision = +precision;\r\n    }\r\n\r\n    // grab value using valueIndex if required?\r\n    value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];\r\n\r\n    switch (type) {\r\n    case 's':\r\n      return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);\r\n    case 'c':\r\n      return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);\r\n    case 'b':\r\n      return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n    case 'o':\r\n      return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n    case 'x':\r\n      return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n    case 'X':\r\n      return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();\r\n    case 'u':\r\n      return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n    case 'i':\r\n    case 'd':\r\n      number = +value || 0;\r\n      number = Math.round(number - number % 1); // Plain Math.round doesn't just truncate\r\n      prefix = number < 0 ? '-' : positivePrefix;\r\n      value = prefix + pad(String(Math.abs(number)), precision, '0', false);\r\n      return justify(value, prefix, leftJustify, minWidth, zeroPad);\r\n    case 'e':\r\n    case 'E':\r\n    case 'f': // Should handle locales (as per setlocale)\r\n    case 'F':\r\n    case 'g':\r\n    case 'G':\r\n      number = +value;\r\n      prefix = number < 0 ? '-' : positivePrefix;\r\n      method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];\r\n      textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];\r\n      value = prefix + Math.abs(number)[method](precision);\r\n      return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();\r\n    default:\r\n      return substring;\r\n    }\r\n  };\r\n\r\n  return format.replace(regex, doFormat);\r\n}\r\n\r\nreturn sprintf;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/sprintf.js\n// module id = 172\n// module chunks = 0","define([\r\n        './DeveloperError'\r\n    ], function(\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Determines if a given date is a leap year.\r\n     *\r\n     * @exports isLeapYear\r\n     *\r\n     * @param {Number} year The year to be tested.\r\n     * @returns {Boolean} True if <code>year</code> is a leap year.\r\n     *\r\n     * @example\r\n     * var leapYear = Cesium.isLeapYear(2000); // true\r\n     */\r\n    function isLeapYear(year) {\r\n        \r\n\r\n        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\r\n    }\r\n\r\n    return isLeapYear;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/isLeapYear.js\n// module id = 173\n// module chunks = 0","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/base64-js/index.js\n// module id = 174\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ieee754/index.js\n// module id = 175\n// module chunks = 0","define([\r\n    '../ThirdParty/when'\r\n], function(\r\n    when) {\r\n        'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function loadAndExecuteScript(url) {\r\n        var deferred = when.defer();\r\n        var script = document.createElement('script');\r\n        script.async = true;\r\n        script.src = url;\r\n\r\n        var head = document.getElementsByTagName('head')[0];\r\n        script.onload = function() {\r\n            script.onload = undefined;\r\n            head.removeChild(script);\r\n            deferred.resolve();\r\n        };\r\n        script.onerror = function(e) {\r\n            deferred.reject(e);\r\n        };\r\n\r\n        head.appendChild(script);\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    return loadAndExecuteScript;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/loadAndExecuteScript.js\n// module id = 176\n// module chunks = 0","define(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function appendForwardSlash(url) {\r\n        if (url.length === 0 || url[url.length - 1] !== '/') {\r\n            url = url + '/';\r\n        }\r\n        return url;\r\n    }\r\n\r\n    return appendForwardSlash;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/appendForwardSlash.js\n// module id = 177\n// module chunks = 0","define([\r\n        './defaultValue'\r\n    ], function(\r\n        defaultValue) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Clones an object, returning a new object containing the same properties.\r\n     *\r\n     * @exports clone\r\n     *\r\n     * @param {Object} object The object to clone.\r\n     * @param {Boolean} [deep=false] If true, all properties will be deep cloned recursively.\r\n     * @returns {Object} The cloned object.\r\n     */\r\n    function clone(object, deep) {\r\n        if (object === null || typeof object !== 'object') {\r\n            return object;\r\n        }\r\n\r\n        deep = defaultValue(deep, false);\r\n\r\n        var result = new object.constructor();\r\n        for ( var propertyName in object) {\r\n            if (object.hasOwnProperty(propertyName)) {\r\n                var value = object[propertyName];\r\n                if (deep) {\r\n                    value = clone(value, deep);\r\n                }\r\n                result[propertyName] = value;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return clone;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/clone.js\n// module id = 178\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined'\r\n    ], function(\r\n        defaultValue,\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Merges two objects, copying their properties onto a new combined object. When two objects have the same\r\n     * property, the value of the property on the first object is used.  If either object is undefined,\r\n     * it will be treated as an empty object.\r\n     *\r\n     * @example\r\n     * var object1 = {\r\n     *     propOne : 1,\r\n     *     propTwo : {\r\n     *         value1 : 10\r\n     *     }\r\n     * }\r\n     * var object2 = {\r\n     *     propTwo : 2\r\n     * }\r\n     * var final = Cesium.combine(object1, object2);\r\n     *\r\n     * // final === {\r\n     * //     propOne : 1,\r\n     * //     propTwo : {\r\n     * //         value1 : 10\r\n     * //     }\r\n     * // }\r\n     *\r\n     * @param {Object} [object1] The first object to merge.\r\n     * @param {Object} [object2] The second object to merge.\r\n     * @param {Boolean} [deep=false] Perform a recursive merge.\r\n     * @returns {Object} The combined object containing all properties from both objects.\r\n     *\r\n     * @exports combine\r\n     */\r\n    function combine(object1, object2, deep) {\r\n        deep = defaultValue(deep, false);\r\n\r\n        var result = {};\r\n\r\n        var object1Defined = defined(object1);\r\n        var object2Defined = defined(object2);\r\n        var property;\r\n        var object1Value;\r\n        var object2Value;\r\n        if (object1Defined) {\r\n            for (property in object1) {\r\n                if (object1.hasOwnProperty(property)) {\r\n                    object1Value = object1[property];\r\n                    if (object2Defined && deep && typeof object1Value === 'object' && object2.hasOwnProperty(property)) {\r\n                        object2Value = object2[property];\r\n                        if (typeof object2Value === 'object') {\r\n                            result[property] = combine(object1Value, object2Value, deep);\r\n                        } else {\r\n                            result[property] = object1Value;\r\n                        }\r\n                    } else {\r\n                        result[property] = object1Value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (object2Defined) {\r\n            for (property in object2) {\r\n                if (object2.hasOwnProperty(property) && !result.hasOwnProperty(property)) {\r\n                    object2Value = object2[property];\r\n                    result[property] = object2Value;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return combine;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/combine.js\n// module id = 179\n// module chunks = 0","define([\r\n        './defined',\r\n        './DeveloperError',\r\n        './oneTimeWarning'\r\n    ], function(\r\n        defined,\r\n        DeveloperError,\r\n        oneTimeWarning) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Logs a deprecation message to the console.  Use this function instead of\r\n     * <code>console.log</code> directly since this does not log duplicate messages\r\n     * unless it is called from multiple workers.\r\n     *\r\n     * @exports deprecationWarning\r\n     *\r\n     * @param {String} identifier The unique identifier for this deprecated API.\r\n     * @param {String} message The message to log to the console.\r\n     *\r\n     * @example\r\n     * // Deprecated function or class\r\n     * function Foo() {\r\n     *    deprecationWarning('Foo', 'Foo was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use newFoo instead.');\r\n     *    // ...\r\n     * }\r\n     *\r\n     * // Deprecated function\r\n     * Bar.prototype.func = function() {\r\n     *    deprecationWarning('Bar.func', 'Bar.func() was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newFunc() instead.');\r\n     *    // ...\r\n     * };\r\n     *\r\n     * // Deprecated property\r\n     * defineProperties(Bar.prototype, {\r\n     *     prop : {\r\n     *         get : function() {\r\n     *             deprecationWarning('Bar.prop', 'Bar.prop was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newProp instead.');\r\n     *             // ...\r\n     *         },\r\n     *         set : function(value) {\r\n     *             deprecationWarning('Bar.prop', 'Bar.prop was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newProp instead.');\r\n     *             // ...\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @private\r\n     */\r\n    function deprecationWarning(identifier, message) {\r\n        \r\n\r\n        oneTimeWarning(identifier, message);\r\n    }\r\n\r\n    return deprecationWarning;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/deprecationWarning.js\n// module id = 180\n// module chunks = 0","define([\r\n        '../ThirdParty/Uri',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        Uri,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Given a URI, returns the base path of the URI.\r\n     * @exports getBaseUri\r\n     *\r\n     * @param {String} uri The Uri.\r\n     * @param {Boolean} [includeQuery = false] Whether or not to include the query string and fragment form the uri\r\n     * @returns {String} The base path of the Uri.\r\n     *\r\n     * @example\r\n     * // basePath will be \"/Gallery/\";\r\n     * var basePath = Cesium.getBaseUri('/Gallery/simple.czml?value=true&example=false');\r\n     *\r\n     * // basePath will be \"/Gallery/?value=true&example=false\";\r\n     * var basePath = Cesium.getBaseUri('/Gallery/simple.czml?value=true&example=false', true);\r\n     */\r\n    function getBaseUri(uri, includeQuery) {\r\n        \r\n\r\n        var basePath = '';\r\n        var i = uri.lastIndexOf('/');\r\n        if (i !== -1) {\r\n            basePath = uri.substring(0, i + 1);\r\n        }\r\n\r\n        if (!includeQuery) {\r\n            return basePath;\r\n        }\r\n\r\n        uri = new Uri(uri);\r\n        if (defined(uri.query)) {\r\n            basePath += '?' + uri.query;\r\n        }\r\n        if (defined(uri.fragment)){\r\n            basePath += '#' + uri.fragment;\r\n        }\r\n\r\n        return basePath;\r\n    }\r\n\r\n    return getBaseUri;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/getBaseUri.js\n// module id = 181\n// module chunks = 0","define([\r\n        '../ThirdParty/Uri',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        Uri,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Given a URI, returns the extension of the URI.\r\n     * @exports getExtensionFromUri\r\n     *\r\n     * @param {String} uri The Uri.\r\n     * @returns {String} The extension of the Uri.\r\n     *\r\n     * @example\r\n     * //extension will be \"czml\";\r\n     * var extension = Cesium.getExtensionFromUri('/Gallery/simple.czml?value=true&example=false');\r\n     */\r\n    function getExtensionFromUri(uri) {\r\n        \r\n\r\n        var uriObject = new Uri(uri);\r\n        uriObject.normalize();\r\n        var path = uriObject.path;\r\n        var index = path.lastIndexOf('/');\r\n        if (index !== -1) {\r\n            path = path.substr(index + 1);\r\n        }\r\n        index = path.lastIndexOf('.');\r\n        if (index === -1) {\r\n            path = '';\r\n        } else {\r\n            path = path.substr(index + 1);\r\n        }\r\n        return path;\r\n    }\r\n\r\n    return getExtensionFromUri;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/getExtensionFromUri.js\n// module id = 182\n// module chunks = 0","define([\r\n        './defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n\r\n    var a;\r\n\r\n    /**\r\n     * Given a URL, determine whether that URL is considered cross-origin to the current page.\r\n     *\r\n     * @private\r\n     */\r\n    function isCrossOriginUrl(url) {\r\n        if (!defined(a)) {\r\n            a = document.createElement('a');\r\n        }\r\n\r\n        // copy window location into the anchor to get consistent results\r\n        // when the port is default for the protocol (e.g. 80 for HTTP)\r\n        a.href = window.location.href;\r\n\r\n        // host includes both hostname and port if the port is not standard\r\n        var host = a.host;\r\n        var protocol = a.protocol;\r\n\r\n        a.href = url;\r\n        // IE only absolutizes href on get, not set\r\n        a.href = a.href; // eslint-disable-line no-self-assign\r\n\r\n        return protocol !== a.protocol || host !== a.host;\r\n    }\r\n\r\n    return isCrossOriginUrl;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/isCrossOriginUrl.js\n// module id = 183\n// module chunks = 0","define([\r\n        './defined',\r\n        './DeveloperError',\r\n        './isArray'\r\n    ], function(\r\n        defined,\r\n        DeveloperError,\r\n        isArray) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Converts an object representing a set of name/value pairs into a query string,\r\n     * with names and values encoded properly for use in a URL.  Values that are arrays\r\n     * will produce multiple values with the same name.\r\n     * @exports objectToQuery\r\n     *\r\n     * @param {Object} obj The object containing data to encode.\r\n     * @returns {String} An encoded query string.\r\n     *\r\n     *\r\n     * @example\r\n     * var str = Cesium.objectToQuery({\r\n     *     key1 : 'some value',\r\n     *     key2 : 'a/b',\r\n     *     key3 : ['x', 'y']\r\n     * });\r\n     *\r\n     * @see queryToObject\r\n     * // str will be:\r\n     * // 'key1=some%20value&key2=a%2Fb&key3=x&key3=y'\r\n     */\r\n    function objectToQuery(obj) {\r\n        \r\n\r\n        var result = '';\r\n        for ( var propName in obj) {\r\n            if (obj.hasOwnProperty(propName)) {\r\n                var value = obj[propName];\r\n\r\n                var part = encodeURIComponent(propName) + '=';\r\n                if (isArray(value)) {\r\n                    for (var i = 0, len = value.length; i < len; ++i) {\r\n                        result += part + encodeURIComponent(value[i]) + '&';\r\n                    }\r\n                } else {\r\n                    result += part + encodeURIComponent(value) + '&';\r\n                }\r\n            }\r\n        }\r\n\r\n        // trim last &\r\n        result = result.slice(0, -1);\r\n\r\n        // This function used to replace %20 with + which is more compact and readable.\r\n        // However, some servers didn't properly handle + as a space.\r\n        // https://github.com/AnalyticalGraphicsInc/cesium/issues/2192\r\n\r\n        return result;\r\n    }\r\n\r\n    return objectToQuery;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/objectToQuery.js\n// module id = 184\n// module chunks = 0","define([\r\n        './defined',\r\n        './DeveloperError',\r\n        './isArray'\r\n    ], function(\r\n        defined,\r\n        DeveloperError,\r\n        isArray) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Parses a query string into an object, where the keys and values of the object are the\r\n     * name/value pairs from the query string, decoded. If a name appears multiple times,\r\n     * the value in the object will be an array of values.\r\n     * @exports queryToObject\r\n     *\r\n     * @param {String} queryString The query string.\r\n     * @returns {Object} An object containing the parameters parsed from the query string.\r\n     *\r\n     *\r\n     * @example\r\n     * var obj = Cesium.queryToObject('key1=some%20value&key2=a%2Fb&key3=x&key3=y');\r\n     * // obj will be:\r\n     * // {\r\n     * //   key1 : 'some value',\r\n     * //   key2 : 'a/b',\r\n     * //   key3 : ['x', 'y']\r\n     * // }\r\n     *\r\n     * @see objectToQuery\r\n     */\r\n    function queryToObject(queryString) {\r\n        \r\n\r\n        var result = {};\r\n        if (queryString === '') {\r\n            return result;\r\n        }\r\n        var parts = queryString.replace(/\\+/g, '%20').split(/[&;]/);\r\n        for (var i = 0, len = parts.length; i < len; ++i) {\r\n            var subparts = parts[i].split('=');\r\n\r\n            var name = decodeURIComponent(subparts[0]);\r\n            var value = subparts[1];\r\n            if (defined(value)) {\r\n                value = decodeURIComponent(value);\r\n            } else {\r\n                value = '';\r\n            }\r\n\r\n            var resultValue = result[name];\r\n            if (typeof resultValue === 'string') {\r\n                // expand the single value to an array\r\n                result[name] = [resultValue, value];\r\n            } else if (isArray(resultValue)) {\r\n                resultValue.push(value);\r\n            } else {\r\n                result[name] = value;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return queryToObject;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/queryToObject.js\n// module id = 185\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './RequestState',\r\n        './RequestType'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        RequestState,\r\n        RequestType) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Stores information for making a request. In general this does not need to be constructed directly.\r\n     *\r\n     * @alias Request\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Boolean} [options.url] The url to request.\r\n     * @param {Request~RequestCallback} [options.requestFunction] The function that makes the actual data request.\r\n     * @param {Request~CancelCallback} [options.cancelFunction] The function that is called when the request is cancelled.\r\n     * @param {Request~PriorityCallback} [options.priorityFunction] The function that is called to update the request's priority, which occurs once per frame.\r\n     * @param {Number} [options.priority=0.0] The initial priority of the request.\r\n     * @param {Boolean} [options.throttle=false] Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the request will be throttled and sent based on priority.\r\n     * @param {Boolean} [options.throttleByServer=false] Whether to throttle the request by server.\r\n     * @param {RequestType} [options.type=RequestType.OTHER] The type of request.\r\n     */\r\n    function Request(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var throttleByServer = defaultValue(options.throttleByServer, false);\r\n        var throttle = throttleByServer || defaultValue(options.throttle, false);\r\n\r\n        /**\r\n         * The URL to request.\r\n         *\r\n         * @type {String}\r\n         */\r\n        this.url = options.url;\r\n\r\n        /**\r\n         * The function that makes the actual data request.\r\n         *\r\n         * @type {Request~RequestCallback}\r\n         */\r\n        this.requestFunction = options.requestFunction;\r\n\r\n        /**\r\n         * The function that is called when the request is cancelled.\r\n         *\r\n         * @type {Request~CancelCallback}\r\n         */\r\n        this.cancelFunction = options.cancelFunction;\r\n\r\n        /**\r\n         * The function that is called to update the request's priority, which occurs once per frame.\r\n         *\r\n         * @type {Request~PriorityCallback}\r\n         */\r\n        this.priorityFunction = options.priorityFunction;\r\n\r\n        /**\r\n         * Priority is a unit-less value where lower values represent higher priority.\r\n         * For world-based objects, this is usually the distance from the camera.\r\n         * A request that does not have a priority function defaults to a priority of 0.\r\n         *\r\n         * If priorityFunction is defined, this value is updated every frame with the result of that call.\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.priority = defaultValue(options.priority, 0.0);\r\n\r\n        /**\r\n         * Whether to throttle and prioritize the request. If false, the request will be sent immediately. If true, the\r\n         * request will be throttled and sent based on priority.\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         *\r\n         * @default false\r\n         */\r\n        this.throttle = throttle;\r\n\r\n        /**\r\n         * Whether to throttle the request by server. Browsers typically support about 6-8 parallel connections\r\n         * for HTTP/1 servers, and an unlimited amount of connections for HTTP/2 servers. Setting this value\r\n         * to <code>true</code> is preferable for requests going through HTTP/1 servers.\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         *\r\n         * @default false\r\n         */\r\n        this.throttleByServer = throttleByServer;\r\n\r\n        /**\r\n         * Type of request.\r\n         *\r\n         * @type {RequestType}\r\n         * @readonly\r\n         *\r\n         * @default RequestType.OTHER\r\n         */\r\n        this.type = defaultValue(options.type, RequestType.OTHER);\r\n\r\n        /**\r\n         * A key used to identify the server that a request is going to. It is derived from the url's authority and scheme.\r\n         *\r\n         * @type {String}\r\n         *\r\n         * @private\r\n         */\r\n        this.serverKey = undefined;\r\n\r\n        /**\r\n         * The current state of the request.\r\n         *\r\n         * @type {RequestState}\r\n         * @readonly\r\n         */\r\n        this.state = RequestState.UNISSUED;\r\n\r\n        /**\r\n         * The requests's deferred promise.\r\n         *\r\n         * @type {Object}\r\n         *\r\n         * @private\r\n         */\r\n        this.deferred = undefined;\r\n\r\n        /**\r\n         * Whether the request was explicitly cancelled.\r\n         *\r\n         * @type {Boolean}\r\n         *\r\n         * @private\r\n         */\r\n        this.cancelled = false;\r\n    }\r\n\r\n    /**\r\n     * Mark the request as cancelled.\r\n     *\r\n     * @private\r\n     */\r\n    Request.prototype.cancel = function() {\r\n        this.cancelled = true;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Request instance.\r\n     *\r\n     * @param {Request} [result] The object onto which to store the result.\r\n     *\r\n     * @returns {Request} The modified result parameter or a new Resource instance if one was not provided.\r\n     */\r\n    Request.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            return new Request(this);\r\n        }\r\n\r\n        result.url = this.url;\r\n        result.requestFunction = this.requestFunction;\r\n        result.cancelFunction = this.cancelFunction;\r\n        result.priorityFunction = this.priorityFunction;\r\n        result.priority = this.priority;\r\n        result.throttle = this.throttle;\r\n        result.throttleByServer = this.throttleByServer;\r\n        result.type = this.type;\r\n        result.serverKey = this.serverKey;\r\n\r\n        // These get defaulted because the cloned request hasn't been issued\r\n        result.state = this.RequestState.UNISSUED;\r\n        result.deferred = undefined;\r\n        result.cancelled = false;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The function that makes the actual data request.\r\n     * @callback Request~RequestCallback\r\n     * @returns {Promise} A promise for the requested data.\r\n     */\r\n\r\n    /**\r\n     * The function that is called when the request is cancelled.\r\n     * @callback Request~CancelCallback\r\n     */\r\n\r\n    /**\r\n     * The function that is called to update the request's priority, which occurs once per frame.\r\n     * @callback Request~PriorityCallback\r\n     * @returns {Number} The updated priority value.\r\n     */\r\n\r\n    return Request;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Request.js\n// module id = 186\n// module chunks = 0","define([\r\n        '../Core/freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * An enum identifying the type of request. Used for finer grained logging and priority sorting.\r\n     *\r\n     * @exports RequestType\r\n     */\r\n    var RequestType = {\r\n        /**\r\n         * Terrain request.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        TERRAIN : 0,\r\n\r\n        /**\r\n         * Imagery request.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        IMAGERY : 1,\r\n\r\n        /**\r\n         * 3D Tiles request.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        TILES3D : 2,\r\n\r\n        /**\r\n         * Other request.\r\n         *\r\n         * @type Number\r\n         * @constant\r\n         */\r\n        OTHER : 3\r\n    };\r\n\r\n    return freezeObject(RequestType);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/RequestType.js\n// module id = 187\n// module chunks = 0","define([\r\n        './defined',\r\n        './parseResponseHeaders'\r\n    ], function(\r\n        defined,\r\n        parseResponseHeaders) {\r\n    'use strict';\r\n\r\n    /**\r\n     * An event that is raised when a request encounters an error.\r\n     *\r\n     * @constructor\r\n     * @alias RequestErrorEvent\r\n     *\r\n     * @param {Number} [statusCode] The HTTP error status code, such as 404.\r\n     * @param {Object} [response] The response included along with the error.\r\n     * @param {String|Object} [responseHeaders] The response headers, represented either as an object literal or as a\r\n     *                        string in the format returned by XMLHttpRequest's getAllResponseHeaders() function.\r\n     */\r\n    function RequestErrorEvent(statusCode, response, responseHeaders) {\r\n        /**\r\n         * The HTTP error status code, such as 404.  If the error does not have a particular\r\n         * HTTP code, this property will be undefined.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.statusCode = statusCode;\r\n\r\n        /**\r\n         * The response included along with the error.  If the error does not include a response,\r\n         * this property will be undefined.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.response = response;\r\n\r\n        /**\r\n         * The headers included in the response, represented as an object literal of key/value pairs.\r\n         * If the error does not include any headers, this property will be undefined.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.responseHeaders = responseHeaders;\r\n\r\n        if (typeof this.responseHeaders === 'string') {\r\n            this.responseHeaders = parseResponseHeaders(this.responseHeaders);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a string representing this RequestErrorEvent.\r\n     * @memberof RequestErrorEvent\r\n     *\r\n     * @returns {String} A string representing the provided RequestErrorEvent.\r\n     */\r\n    RequestErrorEvent.prototype.toString = function() {\r\n        var str = 'Request has failed.';\r\n        if (defined(this.statusCode)) {\r\n            str += ' Status Code: ' + this.statusCode;\r\n        }\r\n        return str;\r\n    };\r\n\r\n    return RequestErrorEvent;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/RequestErrorEvent.js\n// module id = 188\n// module chunks = 0","define([], function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * Parses the result of XMLHttpRequest's getAllResponseHeaders() method into\r\n     * a dictionary.\r\n     *\r\n     * @exports parseResponseHeaders\r\n     *\r\n     * @param {String} headerString The header string returned by getAllResponseHeaders().  The format is\r\n     *                 described here: http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\r\n     * @returns {Object} A dictionary of key/value pairs, where each key is the name of a header and the corresponding value\r\n     *                   is that header's value.\r\n     *\r\n     * @private\r\n     */\r\n    function parseResponseHeaders(headerString) {\r\n        var headers = {};\r\n\r\n        if (!headerString) {\r\n          return headers;\r\n        }\r\n\r\n        var headerPairs = headerString.split('\\u000d\\u000a');\r\n\r\n        for (var i = 0; i < headerPairs.length; ++i) {\r\n          var headerPair = headerPairs[i];\r\n          // Can't use split() here because it does the wrong thing\r\n          // if the header value has the string \": \" in it.\r\n          var index = headerPair.indexOf('\\u003a\\u0020');\r\n          if (index > 0) {\r\n            var key = headerPair.substring(0, index);\r\n            var val = headerPair.substring(index + 2);\r\n            headers[key] = val;\r\n          }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    return parseResponseHeaders;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/parseResponseHeaders.js\n// module id = 189\n// module chunks = 0","define([\r\n        '../ThirdParty/Uri',\r\n        '../ThirdParty/when',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './Event',\r\n        './Heap',\r\n        './isBlobUri',\r\n        './isDataUri',\r\n        './RequestState'\r\n    ], function(\r\n        Uri,\r\n        when,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Event,\r\n        Heap,\r\n        isBlobUri,\r\n        isDataUri,\r\n        RequestState) {\r\n    'use strict';\r\n\r\n    function sortRequests(a, b) {\r\n        return a.priority - b.priority;\r\n    }\r\n\r\n    var statistics = {\r\n        numberOfAttemptedRequests : 0,\r\n        numberOfActiveRequests : 0,\r\n        numberOfCancelledRequests : 0,\r\n        numberOfCancelledActiveRequests : 0,\r\n        numberOfFailedRequests : 0,\r\n        numberOfActiveRequestsEver : 0\r\n    };\r\n\r\n    var priorityHeapLength = 20;\r\n    var requestHeap = new Heap({\r\n        comparator : sortRequests\r\n    });\r\n    requestHeap.maximumLength = priorityHeapLength;\r\n    requestHeap.reserve(priorityHeapLength);\r\n\r\n    var activeRequests = [];\r\n    var numberOfActiveRequestsByServer = {};\r\n\r\n    var pageUri = typeof document !== 'undefined' ? new Uri(document.location.href) : new Uri();\r\n\r\n    var requestCompletedEvent = new Event();\r\n\r\n    /**\r\n     * Tracks the number of active requests and prioritizes incoming requests.\r\n     *\r\n     * @exports RequestScheduler\r\n     *\r\n     * @private\r\n     */\r\n    function RequestScheduler() {\r\n    }\r\n\r\n    /**\r\n     * The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\r\n     * @type {Number}\r\n     * @default 50\r\n     */\r\n    RequestScheduler.maximumRequests = 50;\r\n\r\n    /**\r\n     * The maximum number of simultaneous active requests per server. Un-throttled requests or servers specifically\r\n     * listed in requestsByServer do not observe this limit.\r\n     * @type {Number}\r\n     * @default 6\r\n     */\r\n    RequestScheduler.maximumRequestsPerServer = 6;\r\n\r\n    /**\r\n     * A per serverKey list of overrides to use for throttling instead of maximumRequestsPerServer\r\n     */\r\n    RequestScheduler.requestsByServer = {\r\n        'api.cesium.com:443': 18,\r\n        'assets.cesium.com:443': 18\r\n    };\r\n\r\n    /**\r\n     * Specifies if the request scheduler should throttle incoming requests, or let the browser queue requests under its control.\r\n     * @type {Boolean}\r\n     * @default true\r\n     */\r\n    RequestScheduler.throttleRequests = true;\r\n\r\n    /**\r\n     * When true, log statistics to the console every frame\r\n     * @type {Boolean}\r\n     * @default false\r\n     */\r\n    RequestScheduler.debugShowStatistics = false;\r\n\r\n    /**\r\n     * An event that's raised when a request is completed.  Event handlers are passed\r\n     * the error object if the request fails.\r\n     *\r\n     * @type {Event}\r\n     * @default Event()\r\n     */\r\n    RequestScheduler.requestCompletedEvent = requestCompletedEvent;\r\n\r\n    defineProperties(RequestScheduler, {\r\n        /**\r\n         * Returns the statistics used by the request scheduler.\r\n         *\r\n         * @memberof RequestScheduler\r\n         *\r\n         * @type Object\r\n         * @readonly\r\n         */\r\n        statistics : {\r\n            get : function() {\r\n                return statistics;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The maximum size of the priority heap. This limits the number of requests that are sorted by priority. Only applies to requests that are not yet active.\r\n         *\r\n         * @memberof RequestScheduler\r\n         *\r\n         * @type {Number}\r\n         * @default 20\r\n         */\r\n        priorityHeapLength : {\r\n            get : function() {\r\n                return priorityHeapLength;\r\n            },\r\n            set : function(value) {\r\n                // If the new length shrinks the heap, need to cancel some of the requests.\r\n                // Since this value is not intended to be tweaked regularly it is fine to just cancel the high priority requests.\r\n                if (value < priorityHeapLength) {\r\n                    while (requestHeap.length > value) {\r\n                        var request = requestHeap.pop();\r\n                        cancelRequest(request);\r\n                    }\r\n                }\r\n                priorityHeapLength = value;\r\n                requestHeap.maximumLength = value;\r\n                requestHeap.reserve(value);\r\n            }\r\n        }\r\n    });\r\n\r\n    function updatePriority(request) {\r\n        if (defined(request.priorityFunction)) {\r\n            request.priority = request.priorityFunction();\r\n        }\r\n    }\r\n\r\n    function serverHasOpenSlots(serverKey) {\r\n        var maxRequests = defaultValue(RequestScheduler.requestsByServer[serverKey], RequestScheduler.maximumRequestsPerServer);\r\n        return numberOfActiveRequestsByServer[serverKey] < maxRequests;\r\n    }\r\n\r\n    function issueRequest(request) {\r\n        if (request.state === RequestState.UNISSUED) {\r\n            request.state = RequestState.ISSUED;\r\n            request.deferred = when.defer();\r\n        }\r\n        return request.deferred.promise;\r\n    }\r\n\r\n    function getRequestReceivedFunction(request) {\r\n        return function(results) {\r\n            if (request.state === RequestState.CANCELLED) {\r\n                // If the data request comes back but the request is cancelled, ignore it.\r\n                return;\r\n            }\r\n            --statistics.numberOfActiveRequests;\r\n            --numberOfActiveRequestsByServer[request.serverKey];\r\n            requestCompletedEvent.raiseEvent();\r\n            request.state = RequestState.RECEIVED;\r\n            request.deferred.resolve(results);\r\n        };\r\n    }\r\n\r\n    function getRequestFailedFunction(request) {\r\n        return function(error) {\r\n            if (request.state === RequestState.CANCELLED) {\r\n                // If the data request comes back but the request is cancelled, ignore it.\r\n                return;\r\n            }\r\n            ++statistics.numberOfFailedRequests;\r\n            --statistics.numberOfActiveRequests;\r\n            --numberOfActiveRequestsByServer[request.serverKey];\r\n            requestCompletedEvent.raiseEvent(error);\r\n            request.state = RequestState.FAILED;\r\n            request.deferred.reject(error);\r\n        };\r\n    }\r\n\r\n    function startRequest(request) {\r\n        var promise = issueRequest(request);\r\n        request.state = RequestState.ACTIVE;\r\n        activeRequests.push(request);\r\n        ++statistics.numberOfActiveRequests;\r\n        ++statistics.numberOfActiveRequestsEver;\r\n        ++numberOfActiveRequestsByServer[request.serverKey];\r\n\r\n        try {\r\n            request.requestFunction().then(getRequestReceivedFunction(request)).otherwise(getRequestFailedFunction(request));\r\n        } catch (e) {\r\n            getRequestFailedFunction(request)(e);\r\n        }\r\n\r\n        return promise;\r\n    }\r\n\r\n    function cancelRequest(request) {\r\n        var active = request.state === RequestState.ACTIVE;\r\n        request.state = RequestState.CANCELLED;\r\n        ++statistics.numberOfCancelledRequests;\r\n        request.deferred.reject();\r\n\r\n        if (active) {\r\n            --statistics.numberOfActiveRequests;\r\n            --numberOfActiveRequestsByServer[request.serverKey];\r\n            ++statistics.numberOfCancelledActiveRequests;\r\n        }\r\n\r\n        if (defined(request.cancelFunction)) {\r\n            request.cancelFunction();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sort requests by priority and start requests.\r\n     */\r\n    RequestScheduler.update = function() {\r\n        var i;\r\n        var request;\r\n\r\n        // Loop over all active requests. Cancelled, failed, or received requests are removed from the array to make room for new requests.\r\n        var removeCount = 0;\r\n        var activeLength = activeRequests.length;\r\n        for (i = 0; i < activeLength; ++i) {\r\n            request = activeRequests[i];\r\n            if (request.cancelled) {\r\n                // Request was explicitly cancelled\r\n                cancelRequest(request);\r\n            }\r\n            if (request.state !== RequestState.ACTIVE) {\r\n                // Request is no longer active, remove from array\r\n                ++removeCount;\r\n                continue;\r\n            }\r\n            if (removeCount > 0) {\r\n                // Shift back to fill in vacated slots from completed requests\r\n                activeRequests[i - removeCount] = request;\r\n            }\r\n        }\r\n        activeRequests.length -= removeCount;\r\n\r\n        // Update priority of issued requests and resort the heap\r\n        var issuedRequests = requestHeap.internalArray;\r\n        var issuedLength = requestHeap.length;\r\n        for (i = 0; i < issuedLength; ++i) {\r\n            updatePriority(issuedRequests[i]);\r\n        }\r\n        requestHeap.resort();\r\n\r\n        // Get the number of open slots and fill with the highest priority requests.\r\n        // Un-throttled requests are automatically added to activeRequests, so activeRequests.length may exceed maximumRequests\r\n        var openSlots = Math.max(RequestScheduler.maximumRequests - activeRequests.length, 0);\r\n        var filledSlots = 0;\r\n        while (filledSlots < openSlots && requestHeap.length > 0) {\r\n            // Loop until all open slots are filled or the heap becomes empty\r\n            request = requestHeap.pop();\r\n            if (request.cancelled) {\r\n                // Request was explicitly cancelled\r\n                cancelRequest(request);\r\n                continue;\r\n            }\r\n\r\n            if (request.throttleByServer && !serverHasOpenSlots(request.serverKey)) {\r\n                // Open slots are available, but the request is throttled by its server. Cancel and try again later.\r\n                cancelRequest(request);\r\n                continue;\r\n            }\r\n\r\n            startRequest(request);\r\n            ++filledSlots;\r\n        }\r\n\r\n        updateStatistics();\r\n    };\r\n\r\n    /**\r\n     * Get the server key from a given url.\r\n     *\r\n     * @param {String} url The url.\r\n     * @returns {String} The server key.\r\n     */\r\n    RequestScheduler.getServerKey = function(url) {\r\n        \r\n\r\n        var uri = new Uri(url).resolve(pageUri);\r\n        uri.normalize();\r\n        var serverKey = uri.authority;\r\n        if (!/:/.test(serverKey)) {\r\n            // If the authority does not contain a port number, add port 443 for https or port 80 for http\r\n            serverKey = serverKey + ':' + (uri.scheme === 'https' ? '443' : '80');\r\n        }\r\n\r\n        var length = numberOfActiveRequestsByServer[serverKey];\r\n        if (!defined(length)) {\r\n            numberOfActiveRequestsByServer[serverKey] = 0;\r\n        }\r\n\r\n        return serverKey;\r\n    };\r\n\r\n    /**\r\n     * Issue a request. If request.throttle is false, the request is sent immediately. Otherwise the request will be\r\n     * queued and sorted by priority before being sent.\r\n     *\r\n     * @param {Request} request The request object.\r\n     *\r\n     * @returns {Promise|undefined} A Promise for the requested data, or undefined if this request does not have high enough priority to be issued.\r\n     */\r\n    RequestScheduler.request = function(request) {\r\n        \r\n\r\n        if (isDataUri(request.url) || isBlobUri(request.url)) {\r\n            requestCompletedEvent.raiseEvent();\r\n            request.state = RequestState.RECEIVED;\r\n            return request.requestFunction();\r\n        }\r\n\r\n        ++statistics.numberOfAttemptedRequests;\r\n\r\n        if (!defined(request.serverKey)) {\r\n            request.serverKey = RequestScheduler.getServerKey(request.url);\r\n        }\r\n\r\n        if (!RequestScheduler.throttleRequests || !request.throttle) {\r\n            return startRequest(request);\r\n        }\r\n\r\n        if (activeRequests.length >= RequestScheduler.maximumRequests) {\r\n            // Active requests are saturated. Try again later.\r\n            return undefined;\r\n        }\r\n\r\n        if (request.throttleByServer && !serverHasOpenSlots(request.serverKey)) {\r\n            // Server is saturated. Try again later.\r\n            return undefined;\r\n        }\r\n\r\n        // Insert into the priority heap and see if a request was bumped off. If this request is the lowest\r\n        // priority it will be returned.\r\n        updatePriority(request);\r\n        var removedRequest = requestHeap.insert(request);\r\n\r\n        if (defined(removedRequest)) {\r\n            if (removedRequest === request) {\r\n                // Request does not have high enough priority to be issued\r\n                return undefined;\r\n            }\r\n            // A previously issued request has been bumped off the priority heap, so cancel it\r\n            cancelRequest(removedRequest);\r\n        }\r\n\r\n        return issueRequest(request);\r\n    };\r\n\r\n    function clearStatistics() {\r\n        statistics.numberOfAttemptedRequests = 0;\r\n        statistics.numberOfCancelledRequests = 0;\r\n        statistics.numberOfCancelledActiveRequests = 0;\r\n    }\r\n\r\n    function updateStatistics() {\r\n        if (!RequestScheduler.debugShowStatistics) {\r\n            return;\r\n        }\r\n\r\n        if (statistics.numberOfAttemptedRequests > 0) {\r\n            console.log('Number of attempted requests: ' + statistics.numberOfAttemptedRequests);\r\n        }\r\n        if (statistics.numberOfActiveRequests > 0) {\r\n            console.log('Number of active requests: ' + statistics.numberOfActiveRequests);\r\n        }\r\n        if (statistics.numberOfCancelledRequests > 0) {\r\n            console.log('Number of cancelled requests: ' + statistics.numberOfCancelledRequests);\r\n        }\r\n        if (statistics.numberOfCancelledActiveRequests > 0) {\r\n            console.log('Number of cancelled active requests: ' + statistics.numberOfCancelledActiveRequests);\r\n        }\r\n        if (statistics.numberOfFailedRequests > 0) {\r\n            console.log('Number of failed requests: ' + statistics.numberOfFailedRequests);\r\n        }\r\n\r\n        clearStatistics();\r\n    }\r\n\r\n    /**\r\n     * For testing only. Clears any requests that may not have completed from previous tests.\r\n     *\r\n     * @private\r\n     */\r\n    RequestScheduler.clearForSpecs = function() {\r\n        while (requestHeap.length > 0) {\r\n            var request = requestHeap.pop();\r\n            cancelRequest(request);\r\n        }\r\n        var length = activeRequests.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            cancelRequest(activeRequests[i]);\r\n        }\r\n        activeRequests.length = 0;\r\n        numberOfActiveRequestsByServer = {};\r\n\r\n        // Clear stats\r\n        statistics.numberOfAttemptedRequests = 0;\r\n        statistics.numberOfActiveRequests = 0;\r\n        statistics.numberOfCancelledRequests = 0;\r\n        statistics.numberOfCancelledActiveRequests = 0;\r\n        statistics.numberOfFailedRequests = 0;\r\n        statistics.numberOfActiveRequestsEver = 0;\r\n    };\r\n\r\n    /**\r\n     * For testing only.\r\n     *\r\n     * @private\r\n     */\r\n    RequestScheduler.numberOfActiveRequestsByServer = function(serverKey) {\r\n        return numberOfActiveRequestsByServer[serverKey];\r\n    };\r\n\r\n    /**\r\n     * For testing only.\r\n     *\r\n     * @private\r\n     */\r\n    RequestScheduler.requestHeap = requestHeap;\r\n\r\n    return RequestScheduler;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/RequestScheduler.js\n// module id = 190\n// module chunks = 0","define([\r\n        './Check',\r\n        './defined',\r\n        './defineProperties'\r\n    ], function(\r\n        Check,\r\n        defined,\r\n        defineProperties) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A generic utility class for managing subscribers for a particular event.\r\n     * This class is usually instantiated inside of a container class and\r\n     * exposed as a property for others to subscribe to.\r\n     *\r\n     * @alias Event\r\n     * @constructor\r\n     *\r\n     * @example\r\n     * MyObject.prototype.myListener = function(arg1, arg2) {\r\n     *     this.myArg1Copy = arg1;\r\n     *     this.myArg2Copy = arg2;\r\n     * }\r\n     *\r\n     * var myObjectInstance = new MyObject();\r\n     * var evt = new Cesium.Event();\r\n     * evt.addEventListener(MyObject.prototype.myListener, myObjectInstance);\r\n     * evt.raiseEvent('1', '2');\r\n     * evt.removeEventListener(MyObject.prototype.myListener);\r\n     */\r\n    function Event() {\r\n        this._listeners = [];\r\n        this._scopes = [];\r\n        this._toRemove = [];\r\n        this._insideRaiseEvent = false;\r\n    }\r\n\r\n    defineProperties(Event.prototype, {\r\n        /**\r\n         * The number of listeners currently subscribed to the event.\r\n         * @memberof Event.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        numberOfListeners : {\r\n            get : function() {\r\n                return this._listeners.length - this._toRemove.length;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Registers a callback function to be executed whenever the event is raised.\r\n     * An optional scope can be provided to serve as the <code>this</code> pointer\r\n     * in which the function will execute.\r\n     *\r\n     * @param {Function} listener The function to be executed when the event is raised.\r\n     * @param {Object} [scope] An optional object scope to serve as the <code>this</code>\r\n     *        pointer in which the listener function will execute.\r\n     * @returns {Event~RemoveCallback} A function that will remove this event listener when invoked.\r\n     *\r\n     * @see Event#raiseEvent\r\n     * @see Event#removeEventListener\r\n     */\r\n    Event.prototype.addEventListener = function(listener, scope) {\r\n        \r\n\r\n        this._listeners.push(listener);\r\n        this._scopes.push(scope);\r\n\r\n        var event = this;\r\n        return function() {\r\n            event.removeEventListener(listener, scope);\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Unregisters a previously registered callback.\r\n     *\r\n     * @param {Function} listener The function to be unregistered.\r\n     * @param {Object} [scope] The scope that was originally passed to addEventListener.\r\n     * @returns {Boolean} <code>true</code> if the listener was removed; <code>false</code> if the listener and scope are not registered with the event.\r\n     *\r\n     * @see Event#addEventListener\r\n     * @see Event#raiseEvent\r\n     */\r\n    Event.prototype.removeEventListener = function(listener, scope) {\r\n        \r\n\r\n        var listeners = this._listeners;\r\n        var scopes = this._scopes;\r\n\r\n        var index = -1;\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i] === listener && scopes[i] === scope) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (index !== -1) {\r\n            if (this._insideRaiseEvent) {\r\n                //In order to allow removing an event subscription from within\r\n                //a callback, we don't actually remove the items here.  Instead\r\n                //remember the index they are at and undefined their value.\r\n                this._toRemove.push(index);\r\n                listeners[index] = undefined;\r\n                scopes[index] = undefined;\r\n            } else {\r\n                listeners.splice(index, 1);\r\n                scopes.splice(index, 1);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    function compareNumber(a,b) {\r\n        return b - a;\r\n    }\r\n\r\n    /**\r\n     * Raises the event by calling each registered listener with all supplied arguments.\r\n     *\r\n     * @param {*} arguments This method takes any number of parameters and passes them through to the listener functions.\r\n     *\r\n     * @see Event#addEventListener\r\n     * @see Event#removeEventListener\r\n     */\r\n    Event.prototype.raiseEvent = function() {\r\n        this._insideRaiseEvent = true;\r\n\r\n        var i;\r\n        var listeners = this._listeners;\r\n        var scopes = this._scopes;\r\n        var length = listeners.length;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            var listener = listeners[i];\r\n            if (defined(listener)) {\r\n                listeners[i].apply(scopes[i], arguments);\r\n            }\r\n        }\r\n\r\n        //Actually remove items removed in removeEventListener.\r\n        var toRemove = this._toRemove;\r\n        length = toRemove.length;\r\n        if (length > 0) {\r\n            toRemove.sort(compareNumber);\r\n            for (i = 0; i < length; i++) {\r\n                var index = toRemove[i];\r\n                listeners.splice(index, 1);\r\n                scopes.splice(index, 1);\r\n            }\r\n            toRemove.length = 0;\r\n        }\r\n\r\n        this._insideRaiseEvent = false;\r\n    };\r\n\r\n    /**\r\n     * A function that removes a listener.\r\n     * @callback Event~RemoveCallback\r\n     */\r\n\r\n    return Event;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Event.js\n// module id = 191\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Array implementation of a heap.\r\n     *\r\n     * @alias Heap\r\n     * @constructor\r\n     * @private\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Heap~ComparatorCallback} options.comparator The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\r\n     */\r\n    function Heap(options) {\r\n        \r\n\r\n        this._comparator = options.comparator;\r\n        this._array = [];\r\n        this._length = 0;\r\n        this._maximumLength = undefined;\r\n    }\r\n\r\n    defineProperties(Heap.prototype, {\r\n        /**\r\n         * Gets the length of the heap.\r\n         *\r\n         * @memberof Heap.prototype\r\n         *\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return this._length;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internal array.\r\n         *\r\n         * @memberof Heap.prototype\r\n         *\r\n         * @type {Array}\r\n         * @readonly\r\n         */\r\n        internalArray : {\r\n            get : function() {\r\n                return this._array;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets and sets the maximum length of the heap.\r\n         *\r\n         * @memberof Heap.prototype\r\n         *\r\n         * @type {Number}\r\n         */\r\n        maximumLength : {\r\n            get : function() {\r\n                return this._maximumLength;\r\n            },\r\n            set : function(value) {\r\n                this._maximumLength = value;\r\n                if (this._length > value && value > 0) {\r\n                    this._length = value;\r\n                    this._array.length = value;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The comparator to use for the heap. If comparator(a, b) is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\r\n         *\r\n         * @memberof Heap.prototype\r\n         *\r\n         * @type {Heap~ComparatorCallback}\r\n         */\r\n        comparator : {\r\n            get : function() {\r\n                return this._comparator;\r\n            }\r\n        }\r\n    });\r\n\r\n    function swap(array, a, b) {\r\n        var temp = array[a];\r\n        array[a] = array[b];\r\n        array[b] = temp;\r\n    }\r\n\r\n    /**\r\n     * Resizes the internal array of the heap.\r\n     *\r\n     * @param {Number} [length] The length to resize internal array to. Defaults to the current length of the heap.\r\n     */\r\n    Heap.prototype.reserve = function(length) {\r\n        length = defaultValue(length, this._length);\r\n        this._array.length = length;\r\n    };\r\n\r\n    /**\r\n     * Update the heap so that index and all descendants satisfy the heap property.\r\n     *\r\n     * @param {Number} [index=0] The starting index to heapify from.\r\n     */\r\n    Heap.prototype.heapify = function(index) {\r\n        index = defaultValue(index, 0);\r\n        var length = this._length;\r\n        var comparator = this._comparator;\r\n        var array = this._array;\r\n        var candidate = -1;\r\n        var inserting = true;\r\n\r\n        while (inserting) {\r\n            var right = 2 * (index + 1);\r\n            var left = right - 1;\r\n\r\n            if (left < length && comparator(array[left], array[index]) < 0) {\r\n                candidate = left;\r\n            } else {\r\n                candidate = index;\r\n            }\r\n\r\n            if (right < length && comparator(array[right], array[candidate]) < 0) {\r\n                candidate = right;\r\n            }\r\n            if (candidate !== index) {\r\n                swap(array, candidate, index);\r\n                index = candidate;\r\n            } else {\r\n                inserting = false;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Resort the heap.\r\n     */\r\n    Heap.prototype.resort = function() {\r\n        var length = this._length;\r\n        for (var i = Math.ceil(length / 2); i >= 0; --i) {\r\n            this.heapify(i);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Insert an element into the heap. If the length would grow greater than maximumLength\r\n     * of the heap, extra elements are removed.\r\n     *\r\n     * @param {*} element The element to insert\r\n     *\r\n     * @return {*} The element that was removed from the heap if the heap is at full capacity.\r\n     */\r\n    Heap.prototype.insert = function(element) {\r\n        \r\n\r\n        var array = this._array;\r\n        var comparator = this._comparator;\r\n        var maximumLength = this._maximumLength;\r\n\r\n        var index = this._length++;\r\n        if (index < array.length) {\r\n            array[index] = element;\r\n        } else {\r\n            array.push(element);\r\n        }\r\n\r\n        while (index !== 0) {\r\n            var parent = Math.floor((index - 1) / 2);\r\n            if (comparator(array[index], array[parent]) < 0) {\r\n                swap(array, index, parent);\r\n                index = parent;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        var removedElement;\r\n\r\n        if (defined(maximumLength) && (this._length > maximumLength)) {\r\n            removedElement = array[maximumLength];\r\n            this._length = maximumLength;\r\n        }\r\n\r\n        return removedElement;\r\n    };\r\n\r\n    /**\r\n     * Remove the element specified by index from the heap and return it.\r\n     *\r\n     * @param {Number} [index=0] The index to remove.\r\n     * @returns {*} The specified element of the heap.\r\n     */\r\n    Heap.prototype.pop = function(index) {\r\n        index = defaultValue(index, 0);\r\n        if (this._length === 0) {\r\n            return undefined;\r\n        }\r\n        \r\n\r\n        var array = this._array;\r\n        var root = array[index];\r\n        swap(array, index, --this._length);\r\n        this.heapify(index);\r\n        return root;\r\n    };\r\n\r\n    /**\r\n     * The comparator to use for the heap.\r\n     * @callback Heap~ComparatorCallback\r\n     * @param {*} a An element in the heap.\r\n     * @param {*} b An element in the heap.\r\n     * @returns {Number} If the result of the comparison is less than 0, sort a to a lower index than b, otherwise sort to a higher index.\r\n     */\r\n\r\n    return Heap;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Heap.js\n// module id = 192\n// module chunks = 0","define([\r\n        '../ThirdParty/Uri',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        Uri,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A singleton that contains all of the servers that are trusted. Credentials will be sent with\r\n     * any requests to these servers.\r\n     *\r\n     * @exports TrustedServers\r\n     *\r\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\r\n     */\r\n    var TrustedServers = {};\r\n    var _servers = {};\r\n\r\n    /**\r\n     * Adds a trusted server to the registry\r\n     *\r\n     * @param {String} host The host to be added.\r\n     * @param {Number} port The port used to access the host.\r\n     *\r\n     * @example\r\n     * // Add a trusted server\r\n     * TrustedServers.add('my.server.com', 80);\r\n     */\r\n    TrustedServers.add = function(host, port) {\r\n        \r\n\r\n        var authority = host.toLowerCase() + ':' + port;\r\n        if (!defined(_servers[authority])) {\r\n            _servers[authority] = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes a trusted server from the registry\r\n     *\r\n     * @param {String} host The host to be removed.\r\n     * @param {Number} port The port used to access the host.\r\n     *\r\n     * @example\r\n     * // Remove a trusted server\r\n     * TrustedServers.remove('my.server.com', 80);\r\n     */\r\n    TrustedServers.remove = function(host, port) {\r\n        \r\n\r\n        var authority = host.toLowerCase() + ':' + port;\r\n        if (defined(_servers[authority])) {\r\n            delete _servers[authority];\r\n        }\r\n    };\r\n\r\n    function getAuthority(url) {\r\n        var uri = new Uri(url);\r\n        uri.normalize();\r\n\r\n        // Removes username:password@ so we just have host[:port]\r\n        var authority = uri.getAuthority();\r\n        if (!defined(authority)) {\r\n            return undefined; // Relative URL\r\n        }\r\n\r\n        if (authority.indexOf('@') !== -1) {\r\n            var parts = authority.split('@');\r\n            authority = parts[1];\r\n        }\r\n\r\n        // If the port is missing add one based on the scheme\r\n        if (authority.indexOf(':') === -1) {\r\n            var scheme = uri.getScheme();\r\n            if (!defined(scheme)) {\r\n                scheme = window.location.protocol;\r\n                scheme = scheme.substring(0, scheme.length-1);\r\n            }\r\n            if (scheme === 'http') {\r\n                authority += ':80';\r\n            } else if (scheme === 'https') {\r\n                authority += ':443';\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        return authority;\r\n    }\r\n\r\n    /**\r\n     * Tests whether a server is trusted or not. The server must have been added with the port if it is included in the url.\r\n     *\r\n     * @param {String} url The url to be tested against the trusted list\r\n     *\r\n     * @returns {boolean} Returns true if url is trusted, false otherwise.\r\n     *\r\n     * @example\r\n     * // Add server\r\n     * TrustedServers.add('my.server.com', 81);\r\n     *\r\n     * // Check if server is trusted\r\n     * if (TrustedServers.contains('https://my.server.com:81/path/to/file.png')) {\r\n     *     // my.server.com:81 is trusted\r\n     * }\r\n     * if (TrustedServers.contains('https://my.server.com/path/to/file.png')) {\r\n     *     // my.server.com isn't trusted\r\n     * }\r\n     */\r\n    TrustedServers.contains = function(url) {\r\n        \r\n        var authority = getAuthority(url);\r\n        if (defined(authority) && defined(_servers[authority])) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Clears the registry\r\n     *\r\n     * @example\r\n     * // Remove a trusted server\r\n     * TrustedServers.clear();\r\n     */\r\n    TrustedServers.clear = function() {\r\n        _servers = {};\r\n    };\r\n\r\n    return TrustedServers;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/TrustedServers.js\n// module id = 193\n// module chunks = 0","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/node-libs-browser/node_modules/punycode/punycode.js\n// module id = 194\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 195\n// module chunks = 0","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/url/util.js\n// module id = 196\n// module chunks = 0","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/querystring-es3/index.js\n// module id = 197\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/querystring-es3/decode.js\n// module id = 198\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/querystring-es3/encode.js\n// module id = 199\n// module chunks = 0","var http = require('http')\nvar url = require('url')\n\nvar https = module.exports\n\nfor (var key in http) {\n  if (http.hasOwnProperty(key)) https[key] = http[key]\n}\n\nhttps.request = function (params, cb) {\n  params = validateParams(params)\n  return http.request.call(this, params, cb)\n}\n\nhttps.get = function (params, cb) {\n  params = validateParams(params)\n  return http.get.call(this, params, cb)\n}\n\nfunction validateParams (params) {\n  if (typeof params === 'string') {\n    params = url.parse(params)\n  }\n  if (!params.protocol) {\n    params.protocol = 'https:'\n  }\n  if (params.protocol !== 'https:') {\n    throw new Error('Protocol \"' + params.protocol + '\" not supported. Expected \"https:\"')\n  }\n  return params\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/https-browserify/index.js\n// module id = 200\n// module chunks = 0","var capability = require('./capability')\nvar inherits = require('inherits')\nvar response = require('./response')\nvar stream = require('readable-stream')\nvar toArrayBuffer = require('to-arraybuffer')\n\nvar IncomingMessage = response.IncomingMessage\nvar rStates = response.readyStates\n\nfunction decideMode (preferBinary, useFetch) {\n\tif (capability.fetch && useFetch) {\n\t\treturn 'fetch'\n\t} else if (capability.mozchunkedarraybuffer) {\n\t\treturn 'moz-chunked-arraybuffer'\n\t} else if (capability.msstream) {\n\t\treturn 'ms-stream'\n\t} else if (capability.arraybuffer && preferBinary) {\n\t\treturn 'arraybuffer'\n\t} else if (capability.vbArray && preferBinary) {\n\t\treturn 'text:vbarray'\n\t} else {\n\t\treturn 'text'\n\t}\n}\n\nvar ClientRequest = module.exports = function (opts) {\n\tvar self = this\n\tstream.Writable.call(self)\n\n\tself._opts = opts\n\tself._body = []\n\tself._headers = {}\n\tif (opts.auth)\n\t\tself.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))\n\tObject.keys(opts.headers).forEach(function (name) {\n\t\tself.setHeader(name, opts.headers[name])\n\t})\n\n\tvar preferBinary\n\tvar useFetch = true\n\tif (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {\n\t\t// If the use of XHR should be preferred. Not typically needed.\n\t\tuseFetch = false\n\t\tpreferBinary = true\n\t} else if (opts.mode === 'prefer-streaming') {\n\t\t// If streaming is a high priority but binary compatibility and\n\t\t// the accuracy of the 'content-type' header aren't\n\t\tpreferBinary = false\n\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t// If streaming is more important than preserving the 'content-type' header\n\t\tpreferBinary = !capability.overrideMimeType\n\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\tpreferBinary = true\n\t} else {\n\t\tthrow new Error('Invalid value for opts.mode')\n\t}\n\tself._mode = decideMode(preferBinary, useFetch)\n\tself._fetchTimer = null\n\n\tself.on('finish', function () {\n\t\tself._onFinish()\n\t})\n}\n\ninherits(ClientRequest, stream.Writable)\n\nClientRequest.prototype.setHeader = function (name, value) {\n\tvar self = this\n\tvar lowerName = name.toLowerCase()\n\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t// http-browserify did it, so I will too.\n\tif (unsafeHeaders.indexOf(lowerName) !== -1)\n\t\treturn\n\n\tself._headers[lowerName] = {\n\t\tname: name,\n\t\tvalue: value\n\t}\n}\n\nClientRequest.prototype.getHeader = function (name) {\n\tvar header = this._headers[name.toLowerCase()]\n\tif (header)\n\t\treturn header.value\n\treturn null\n}\n\nClientRequest.prototype.removeHeader = function (name) {\n\tvar self = this\n\tdelete self._headers[name.toLowerCase()]\n}\n\nClientRequest.prototype._onFinish = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\tvar opts = self._opts\n\n\tvar headersObj = self._headers\n\tvar body = null\n\tif (opts.method !== 'GET' && opts.method !== 'HEAD') {\n\t\tif (capability.arraybuffer) {\n\t\t\tbody = toArrayBuffer(Buffer.concat(self._body))\n\t\t} else if (capability.blobConstructor) {\n\t\t\tbody = new global.Blob(self._body.map(function (buffer) {\n\t\t\t\treturn toArrayBuffer(buffer)\n\t\t\t}), {\n\t\t\t\ttype: (headersObj['content-type'] || {}).value || ''\n\t\t\t})\n\t\t} else {\n\t\t\t// get utf8 string\n\t\t\tbody = Buffer.concat(self._body).toString()\n\t\t}\n\t}\n\n\t// create flattened list of headers\n\tvar headersList = []\n\tObject.keys(headersObj).forEach(function (keyName) {\n\t\tvar name = headersObj[keyName].name\n\t\tvar value = headersObj[keyName].value\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue.forEach(function (v) {\n\t\t\t\theadersList.push([name, v])\n\t\t\t})\n\t\t} else {\n\t\t\theadersList.push([name, value])\n\t\t}\n\t})\n\n\tif (self._mode === 'fetch') {\n\t\tvar signal = null\n\t\tvar fetchTimer = null\n\t\tif (capability.abortController) {\n\t\t\tvar controller = new AbortController()\n\t\t\tsignal = controller.signal\n\t\t\tself._fetchAbortController = controller\n\n\t\t\tif ('requestTimeout' in opts && opts.requestTimeout !== 0) {\n\t\t\t\tself._fetchTimer = global.setTimeout(function () {\n\t\t\t\t\tself.emit('requestTimeout')\n\t\t\t\t\tif (self._fetchAbortController)\n\t\t\t\t\t\tself._fetchAbortController.abort()\n\t\t\t\t}, opts.requestTimeout)\n\t\t\t}\n\t\t}\n\n\t\tglobal.fetch(self._opts.url, {\n\t\t\tmethod: self._opts.method,\n\t\t\theaders: headersList,\n\t\t\tbody: body || undefined,\n\t\t\tmode: 'cors',\n\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin',\n\t\t\tsignal: signal\n\t\t}).then(function (response) {\n\t\t\tself._fetchResponse = response\n\t\t\tself._connect()\n\t\t}, function (reason) {\n\t\t\tglobal.clearTimeout(self._fetchTimer)\n\t\t\tif (!self._destroyed)\n\t\t\t\tself.emit('error', reason)\n\t\t})\n\t} else {\n\t\tvar xhr = self._xhr = new global.XMLHttpRequest()\n\t\ttry {\n\t\t\txhr.open(self._opts.method, self._opts.url, true)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// Can't set responseType on really old browsers\n\t\tif ('responseType' in xhr)\n\t\t\txhr.responseType = self._mode.split(':')[0]\n\n\t\tif ('withCredentials' in xhr)\n\t\t\txhr.withCredentials = !!opts.withCredentials\n\n\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr)\n\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined')\n\n\t\tif ('requestTimeout' in opts) {\n\t\t\txhr.timeout = opts.requestTimeout\n\t\t\txhr.ontimeout = function () {\n\t\t\t\tself.emit('requestTimeout')\n\t\t\t}\n\t\t}\n\n\t\theadersList.forEach(function (header) {\n\t\t\txhr.setRequestHeader(header[0], header[1])\n\t\t})\n\n\t\tself._response = null\n\t\txhr.onreadystatechange = function () {\n\t\t\tswitch (xhr.readyState) {\n\t\t\t\tcase rStates.LOADING:\n\t\t\t\tcase rStates.DONE:\n\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\txhr.onprogress = function () {\n\t\t\t\tself._onXHRProgress()\n\t\t\t}\n\t\t}\n\n\t\txhr.onerror = function () {\n\t\t\tif (self._destroyed)\n\t\t\t\treturn\n\t\t\tself.emit('error', new Error('XHR error'))\n\t\t}\n\n\t\ttry {\n\t\t\txhr.send(body)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t}\n}\n\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\nfunction statusValid (xhr) {\n\ttry {\n\t\tvar status = xhr.status\n\t\treturn (status !== null && status !== 0)\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tif (!statusValid(self._xhr) || self._destroyed)\n\t\treturn\n\n\tif (!self._response)\n\t\tself._connect()\n\n\tself._response._onXHRProgress()\n}\n\nClientRequest.prototype._connect = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\n\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer)\n\tself._response.on('error', function(err) {\n\t\tself.emit('error', err)\n\t})\n\n\tself.emit('response', self._response)\n}\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n\tvar self = this\n\n\tself._body.push(chunk)\n\tcb()\n}\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n\tvar self = this\n\tself._destroyed = true\n\tglobal.clearTimeout(self._fetchTimer)\n\tif (self._response)\n\t\tself._response._destroyed = true\n\tif (self._xhr)\n\t\tself._xhr.abort()\n\telse if (self._fetchAbortController)\n\t\tself._fetchAbortController.abort()\n}\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n\tvar self = this\n\tif (typeof data === 'function') {\n\t\tcb = data\n\t\tdata = undefined\n\t}\n\n\tstream.Writable.prototype.end.call(self, data, encoding, cb)\n}\n\nClientRequest.prototype.flushHeaders = function () {}\nClientRequest.prototype.setTimeout = function () {}\nClientRequest.prototype.setNoDelay = function () {}\nClientRequest.prototype.setSocketKeepAlive = function () {}\n\n// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\nvar unsafeHeaders = [\n\t'accept-charset',\n\t'accept-encoding',\n\t'access-control-request-headers',\n\t'access-control-request-method',\n\t'connection',\n\t'content-length',\n\t'cookie',\n\t'cookie2',\n\t'date',\n\t'dnt',\n\t'expect',\n\t'host',\n\t'keep-alive',\n\t'origin',\n\t'referer',\n\t'te',\n\t'trailer',\n\t'transfer-encoding',\n\t'upgrade',\n\t'via'\n]\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/lib/request.js\n// module id = 201\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// util (ignored)\n// module id = 202\n// module chunks = 0","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/BufferList.js\n// module id = 203\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// util (ignored)\n// module id = 204\n// module chunks = 0","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/setimmediate/setImmediate.js\n// module id = 205\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stream-http/node_modules/readable-stream/lib/_stream_passthrough.js\n// module id = 206\n// module chunks = 0","var Buffer = require('buffer').Buffer\n\nmodule.exports = function (buf) {\n\t// If the buffer is backed by a Uint8Array, a faster version will work\n\tif (buf instanceof Uint8Array) {\n\t\t// If the buffer isn't a subarray, return the underlying ArrayBuffer\n\t\tif (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n\t\t\treturn buf.buffer\n\t\t} else if (typeof buf.buffer.slice === 'function') {\n\t\t\t// Otherwise we need to get a proper copy\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)\n\t\t}\n\t}\n\n\tif (Buffer.isBuffer(buf)) {\n\t\t// This is the slow version that will work with any Buffer\n\t\t// implementation (even in old browsers)\n\t\tvar arrayCopy = new Uint8Array(buf.length)\n\t\tvar len = buf.length\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tarrayCopy[i] = buf[i]\n\t\t}\n\t\treturn arrayCopy.buffer\n\t} else {\n\t\tthrow new Error('Argument must be a Buffer')\n\t}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/to-arraybuffer/index.js\n// module id = 207\n// module chunks = 0","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/xtend/immutable.js\n// module id = 208\n// module chunks = 0","module.exports = {\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"200\": \"OK\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Payload Too Large\",\n  \"414\": \"URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Range Not Satisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Unordered Collection\",\n  \"426\": \"Upgrade Required\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/builtin-status-codes/browser.js\n// module id = 209\n// module chunks = 0","'use strict';\n\nvar Buffer = require('buffer').Buffer;\nvar Transform = require('stream').Transform;\nvar binding = require('./binding');\nvar util = require('util');\nvar assert = require('assert').ok;\nvar kMaxLength = require('buffer').kMaxLength;\nvar kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';\n\n// zlib doesn't provide these, so kludge them in following the same\n// const naming scheme zlib uses.\nbinding.Z_MIN_WINDOWBITS = 8;\nbinding.Z_MAX_WINDOWBITS = 15;\nbinding.Z_DEFAULT_WINDOWBITS = 15;\n\n// fewer than 64 bytes per chunk is stupid.\n// technically it could work with as few as 8, but even 64 bytes\n// is absurdly low.  Usually a MB or more is best.\nbinding.Z_MIN_CHUNK = 64;\nbinding.Z_MAX_CHUNK = Infinity;\nbinding.Z_DEFAULT_CHUNK = 16 * 1024;\n\nbinding.Z_MIN_MEMLEVEL = 1;\nbinding.Z_MAX_MEMLEVEL = 9;\nbinding.Z_DEFAULT_MEMLEVEL = 8;\n\nbinding.Z_MIN_LEVEL = -1;\nbinding.Z_MAX_LEVEL = 9;\nbinding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;\n\n// expose all the zlib constants\nvar bkeys = Object.keys(binding);\nfor (var bk = 0; bk < bkeys.length; bk++) {\n  var bkey = bkeys[bk];\n  if (bkey.match(/^Z/)) {\n    Object.defineProperty(exports, bkey, {\n      enumerable: true, value: binding[bkey], writable: false\n    });\n  }\n}\n\n// translation table for return codes.\nvar codes = {\n  Z_OK: binding.Z_OK,\n  Z_STREAM_END: binding.Z_STREAM_END,\n  Z_NEED_DICT: binding.Z_NEED_DICT,\n  Z_ERRNO: binding.Z_ERRNO,\n  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,\n  Z_DATA_ERROR: binding.Z_DATA_ERROR,\n  Z_MEM_ERROR: binding.Z_MEM_ERROR,\n  Z_BUF_ERROR: binding.Z_BUF_ERROR,\n  Z_VERSION_ERROR: binding.Z_VERSION_ERROR\n};\n\nvar ckeys = Object.keys(codes);\nfor (var ck = 0; ck < ckeys.length; ck++) {\n  var ckey = ckeys[ck];\n  codes[codes[ckey]] = ckey;\n}\n\nObject.defineProperty(exports, 'codes', {\n  enumerable: true, value: Object.freeze(codes), writable: false\n});\n\nexports.Deflate = Deflate;\nexports.Inflate = Inflate;\nexports.Gzip = Gzip;\nexports.Gunzip = Gunzip;\nexports.DeflateRaw = DeflateRaw;\nexports.InflateRaw = InflateRaw;\nexports.Unzip = Unzip;\n\nexports.createDeflate = function (o) {\n  return new Deflate(o);\n};\n\nexports.createInflate = function (o) {\n  return new Inflate(o);\n};\n\nexports.createDeflateRaw = function (o) {\n  return new DeflateRaw(o);\n};\n\nexports.createInflateRaw = function (o) {\n  return new InflateRaw(o);\n};\n\nexports.createGzip = function (o) {\n  return new Gzip(o);\n};\n\nexports.createGunzip = function (o) {\n  return new Gunzip(o);\n};\n\nexports.createUnzip = function (o) {\n  return new Unzip(o);\n};\n\n// Convenience methods.\n// compress/decompress a string or buffer in one step.\nexports.deflate = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Deflate(opts), buffer, callback);\n};\n\nexports.deflateSync = function (buffer, opts) {\n  return zlibBufferSync(new Deflate(opts), buffer);\n};\n\nexports.gzip = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Gzip(opts), buffer, callback);\n};\n\nexports.gzipSync = function (buffer, opts) {\n  return zlibBufferSync(new Gzip(opts), buffer);\n};\n\nexports.deflateRaw = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new DeflateRaw(opts), buffer, callback);\n};\n\nexports.deflateRawSync = function (buffer, opts) {\n  return zlibBufferSync(new DeflateRaw(opts), buffer);\n};\n\nexports.unzip = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Unzip(opts), buffer, callback);\n};\n\nexports.unzipSync = function (buffer, opts) {\n  return zlibBufferSync(new Unzip(opts), buffer);\n};\n\nexports.inflate = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Inflate(opts), buffer, callback);\n};\n\nexports.inflateSync = function (buffer, opts) {\n  return zlibBufferSync(new Inflate(opts), buffer);\n};\n\nexports.gunzip = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new Gunzip(opts), buffer, callback);\n};\n\nexports.gunzipSync = function (buffer, opts) {\n  return zlibBufferSync(new Gunzip(opts), buffer);\n};\n\nexports.inflateRaw = function (buffer, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return zlibBuffer(new InflateRaw(opts), buffer, callback);\n};\n\nexports.inflateRawSync = function (buffer, opts) {\n  return zlibBufferSync(new InflateRaw(opts), buffer);\n};\n\nfunction zlibBuffer(engine, buffer, callback) {\n  var buffers = [];\n  var nread = 0;\n\n  engine.on('error', onError);\n  engine.on('end', onEnd);\n\n  engine.end(buffer);\n  flow();\n\n  function flow() {\n    var chunk;\n    while (null !== (chunk = engine.read())) {\n      buffers.push(chunk);\n      nread += chunk.length;\n    }\n    engine.once('readable', flow);\n  }\n\n  function onError(err) {\n    engine.removeListener('end', onEnd);\n    engine.removeListener('readable', flow);\n    callback(err);\n  }\n\n  function onEnd() {\n    var buf;\n    var err = null;\n\n    if (nread >= kMaxLength) {\n      err = new RangeError(kRangeErrorMessage);\n    } else {\n      buf = Buffer.concat(buffers, nread);\n    }\n\n    buffers = [];\n    engine.close();\n    callback(err, buf);\n  }\n}\n\nfunction zlibBufferSync(engine, buffer) {\n  if (typeof buffer === 'string') buffer = Buffer.from(buffer);\n\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');\n\n  var flushFlag = engine._finishFlushFlag;\n\n  return engine._processChunk(buffer, flushFlag);\n}\n\n// generic zlib\n// minimal 2-byte header\nfunction Deflate(opts) {\n  if (!(this instanceof Deflate)) return new Deflate(opts);\n  Zlib.call(this, opts, binding.DEFLATE);\n}\n\nfunction Inflate(opts) {\n  if (!(this instanceof Inflate)) return new Inflate(opts);\n  Zlib.call(this, opts, binding.INFLATE);\n}\n\n// gzip - bigger header, same deflate compression\nfunction Gzip(opts) {\n  if (!(this instanceof Gzip)) return new Gzip(opts);\n  Zlib.call(this, opts, binding.GZIP);\n}\n\nfunction Gunzip(opts) {\n  if (!(this instanceof Gunzip)) return new Gunzip(opts);\n  Zlib.call(this, opts, binding.GUNZIP);\n}\n\n// raw - no header\nfunction DeflateRaw(opts) {\n  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);\n  Zlib.call(this, opts, binding.DEFLATERAW);\n}\n\nfunction InflateRaw(opts) {\n  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);\n  Zlib.call(this, opts, binding.INFLATERAW);\n}\n\n// auto-detect header.\nfunction Unzip(opts) {\n  if (!(this instanceof Unzip)) return new Unzip(opts);\n  Zlib.call(this, opts, binding.UNZIP);\n}\n\nfunction isValidFlushFlag(flag) {\n  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;\n}\n\n// the Zlib class they all inherit from\n// This thing manages the queue of requests, and returns\n// true or false if there is anything in the queue when\n// you call the .write() method.\n\nfunction Zlib(opts, mode) {\n  var _this = this;\n\n  this._opts = opts = opts || {};\n  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;\n\n  Transform.call(this, opts);\n\n  if (opts.flush && !isValidFlushFlag(opts.flush)) {\n    throw new Error('Invalid flush flag: ' + opts.flush);\n  }\n  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {\n    throw new Error('Invalid flush flag: ' + opts.finishFlush);\n  }\n\n  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;\n  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;\n\n  if (opts.chunkSize) {\n    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {\n      throw new Error('Invalid chunk size: ' + opts.chunkSize);\n    }\n  }\n\n  if (opts.windowBits) {\n    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {\n      throw new Error('Invalid windowBits: ' + opts.windowBits);\n    }\n  }\n\n  if (opts.level) {\n    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {\n      throw new Error('Invalid compression level: ' + opts.level);\n    }\n  }\n\n  if (opts.memLevel) {\n    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {\n      throw new Error('Invalid memLevel: ' + opts.memLevel);\n    }\n  }\n\n  if (opts.strategy) {\n    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {\n      throw new Error('Invalid strategy: ' + opts.strategy);\n    }\n  }\n\n  if (opts.dictionary) {\n    if (!Buffer.isBuffer(opts.dictionary)) {\n      throw new Error('Invalid dictionary: it should be a Buffer instance');\n    }\n  }\n\n  this._handle = new binding.Zlib(mode);\n\n  var self = this;\n  this._hadError = false;\n  this._handle.onerror = function (message, errno) {\n    // there is no way to cleanly recover.\n    // continuing only obscures problems.\n    _close(self);\n    self._hadError = true;\n\n    var error = new Error(message);\n    error.errno = errno;\n    error.code = exports.codes[errno];\n    self.emit('error', error);\n  };\n\n  var level = exports.Z_DEFAULT_COMPRESSION;\n  if (typeof opts.level === 'number') level = opts.level;\n\n  var strategy = exports.Z_DEFAULT_STRATEGY;\n  if (typeof opts.strategy === 'number') strategy = opts.strategy;\n\n  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);\n\n  this._buffer = Buffer.allocUnsafe(this._chunkSize);\n  this._offset = 0;\n  this._level = level;\n  this._strategy = strategy;\n\n  this.once('end', this.close);\n\n  Object.defineProperty(this, '_closed', {\n    get: function () {\n      return !_this._handle;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n\nutil.inherits(Zlib, Transform);\n\nZlib.prototype.params = function (level, strategy, callback) {\n  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {\n    throw new RangeError('Invalid compression level: ' + level);\n  }\n  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {\n    throw new TypeError('Invalid strategy: ' + strategy);\n  }\n\n  if (this._level !== level || this._strategy !== strategy) {\n    var self = this;\n    this.flush(binding.Z_SYNC_FLUSH, function () {\n      assert(self._handle, 'zlib binding closed');\n      self._handle.params(level, strategy);\n      if (!self._hadError) {\n        self._level = level;\n        self._strategy = strategy;\n        if (callback) callback();\n      }\n    });\n  } else {\n    process.nextTick(callback);\n  }\n};\n\nZlib.prototype.reset = function () {\n  assert(this._handle, 'zlib binding closed');\n  return this._handle.reset();\n};\n\n// This is the _flush function called by the transform class,\n// internally, when the last chunk has been written.\nZlib.prototype._flush = function (callback) {\n  this._transform(Buffer.alloc(0), '', callback);\n};\n\nZlib.prototype.flush = function (kind, callback) {\n  var _this2 = this;\n\n  var ws = this._writableState;\n\n  if (typeof kind === 'function' || kind === undefined && !callback) {\n    callback = kind;\n    kind = binding.Z_FULL_FLUSH;\n  }\n\n  if (ws.ended) {\n    if (callback) process.nextTick(callback);\n  } else if (ws.ending) {\n    if (callback) this.once('end', callback);\n  } else if (ws.needDrain) {\n    if (callback) {\n      this.once('drain', function () {\n        return _this2.flush(kind, callback);\n      });\n    }\n  } else {\n    this._flushFlag = kind;\n    this.write(Buffer.alloc(0), '', callback);\n  }\n};\n\nZlib.prototype.close = function (callback) {\n  _close(this, callback);\n  process.nextTick(emitCloseNT, this);\n};\n\nfunction _close(engine, callback) {\n  if (callback) process.nextTick(callback);\n\n  // Caller may invoke .close after a zlib error (which will null _handle).\n  if (!engine._handle) return;\n\n  engine._handle.close();\n  engine._handle = null;\n}\n\nfunction emitCloseNT(self) {\n  self.emit('close');\n}\n\nZlib.prototype._transform = function (chunk, encoding, cb) {\n  var flushFlag;\n  var ws = this._writableState;\n  var ending = ws.ending || ws.ended;\n  var last = ending && (!chunk || ws.length === chunk.length);\n\n  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));\n\n  if (!this._handle) return cb(new Error('zlib binding closed'));\n\n  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag\n  // (or whatever flag was provided using opts.finishFlush).\n  // If it's explicitly flushing at some other time, then we use\n  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression\n  // goodness.\n  if (last) flushFlag = this._finishFlushFlag;else {\n    flushFlag = this._flushFlag;\n    // once we've flushed the last of the queue, stop flushing and\n    // go back to the normal behavior.\n    if (chunk.length >= ws.length) {\n      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;\n    }\n  }\n\n  this._processChunk(chunk, flushFlag, cb);\n};\n\nZlib.prototype._processChunk = function (chunk, flushFlag, cb) {\n  var availInBefore = chunk && chunk.length;\n  var availOutBefore = this._chunkSize - this._offset;\n  var inOff = 0;\n\n  var self = this;\n\n  var async = typeof cb === 'function';\n\n  if (!async) {\n    var buffers = [];\n    var nread = 0;\n\n    var error;\n    this.on('error', function (er) {\n      error = er;\n    });\n\n    assert(this._handle, 'zlib binding closed');\n    do {\n      var res = this._handle.writeSync(flushFlag, chunk, // in\n      inOff, // in_off\n      availInBefore, // in_len\n      this._buffer, // out\n      this._offset, //out_off\n      availOutBefore); // out_len\n    } while (!this._hadError && callback(res[0], res[1]));\n\n    if (this._hadError) {\n      throw error;\n    }\n\n    if (nread >= kMaxLength) {\n      _close(this);\n      throw new RangeError(kRangeErrorMessage);\n    }\n\n    var buf = Buffer.concat(buffers, nread);\n    _close(this);\n\n    return buf;\n  }\n\n  assert(this._handle, 'zlib binding closed');\n  var req = this._handle.write(flushFlag, chunk, // in\n  inOff, // in_off\n  availInBefore, // in_len\n  this._buffer, // out\n  this._offset, //out_off\n  availOutBefore); // out_len\n\n  req.buffer = chunk;\n  req.callback = callback;\n\n  function callback(availInAfter, availOutAfter) {\n    // When the callback is used in an async write, the callback's\n    // context is the `req` object that was created. The req object\n    // is === this._handle, and that's why it's important to null\n    // out the values after they are done being used. `this._handle`\n    // can stay in memory longer than the callback and buffer are needed.\n    if (this) {\n      this.buffer = null;\n      this.callback = null;\n    }\n\n    if (self._hadError) return;\n\n    var have = availOutBefore - availOutAfter;\n    assert(have >= 0, 'have should not go down');\n\n    if (have > 0) {\n      var out = self._buffer.slice(self._offset, self._offset + have);\n      self._offset += have;\n      // serve some output to the consumer.\n      if (async) {\n        self.push(out);\n      } else {\n        buffers.push(out);\n        nread += out.length;\n      }\n    }\n\n    // exhausted the output buffer, or used all the input create a new one.\n    if (availOutAfter === 0 || self._offset >= self._chunkSize) {\n      availOutBefore = self._chunkSize;\n      self._offset = 0;\n      self._buffer = Buffer.allocUnsafe(self._chunkSize);\n    }\n\n    if (availOutAfter === 0) {\n      // Not actually done.  Need to reprocess.\n      // Also, update the availInBefore to the availInAfter value,\n      // so that if we have to hit it a third (fourth, etc.) time,\n      // it'll have the correct byte counts.\n      inOff += availInBefore - availInAfter;\n      availInBefore = availInAfter;\n\n      if (!async) return true;\n\n      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);\n      newReq.callback = callback; // this same function\n      newReq.buffer = chunk;\n      return;\n    }\n\n    if (!async) return false;\n\n    // finished with the chunk.\n    cb();\n  }\n};\n\nutil.inherits(Deflate, Zlib);\nutil.inherits(Inflate, Zlib);\nutil.inherits(Gzip, Zlib);\nutil.inherits(Gunzip, Zlib);\nutil.inherits(DeflateRaw, Zlib);\nutil.inherits(InflateRaw, Zlib);\nutil.inherits(Unzip, Zlib);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/browserify-zlib/lib/index.js\n// module id = 210\n// module chunks = 0","var Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/readable.js\n// module id = 211\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// util (ignored)\n// module id = 212\n// module chunks = 0","module.exports = require(\"./lib/_stream_writable.js\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/writable.js\n// module id = 213\n// module chunks = 0","module.exports = require(\"./lib/_stream_duplex.js\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/duplex.js\n// module id = 214\n// module chunks = 0","module.exports = require(\"./lib/_stream_transform.js\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/transform.js\n// module id = 215\n// module chunks = 0","module.exports = require(\"./lib/_stream_passthrough.js\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/readable-stream/passthrough.js\n// module id = 216\n// module chunks = 0","'use strict';\n/* eslint camelcase: \"off\" */\n\nvar assert = require('assert');\n\nvar Zstream = require('pako/lib/zlib/zstream');\nvar zlib_deflate = require('pako/lib/zlib/deflate.js');\nvar zlib_inflate = require('pako/lib/zlib/inflate.js');\nvar constants = require('pako/lib/zlib/constants');\n\nfor (var key in constants) {\n  exports[key] = constants[key];\n}\n\n// zlib modes\nexports.NONE = 0;\nexports.DEFLATE = 1;\nexports.INFLATE = 2;\nexports.GZIP = 3;\nexports.GUNZIP = 4;\nexports.DEFLATERAW = 5;\nexports.INFLATERAW = 6;\nexports.UNZIP = 7;\n\nvar GZIP_HEADER_ID1 = 0x1f;\nvar GZIP_HEADER_ID2 = 0x8b;\n\n/**\n * Emulate Node's zlib C++ layer for use by the JS layer in index.js\n */\nfunction Zlib(mode) {\n  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {\n    throw new TypeError('Bad argument');\n  }\n\n  this.dictionary = null;\n  this.err = 0;\n  this.flush = 0;\n  this.init_done = false;\n  this.level = 0;\n  this.memLevel = 0;\n  this.mode = mode;\n  this.strategy = 0;\n  this.windowBits = 0;\n  this.write_in_progress = false;\n  this.pending_close = false;\n  this.gzip_id_bytes_read = 0;\n}\n\nZlib.prototype.close = function () {\n  if (this.write_in_progress) {\n    this.pending_close = true;\n    return;\n  }\n\n  this.pending_close = false;\n\n  assert(this.init_done, 'close before init');\n  assert(this.mode <= exports.UNZIP);\n\n  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {\n    zlib_deflate.deflateEnd(this.strm);\n  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {\n    zlib_inflate.inflateEnd(this.strm);\n  }\n\n  this.mode = exports.NONE;\n\n  this.dictionary = null;\n};\n\nZlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {\n  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);\n};\n\nZlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {\n  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);\n};\n\nZlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {\n  assert.equal(arguments.length, 8);\n\n  assert(this.init_done, 'write before init');\n  assert(this.mode !== exports.NONE, 'already finalized');\n  assert.equal(false, this.write_in_progress, 'write already in progress');\n  assert.equal(false, this.pending_close, 'close is pending');\n\n  this.write_in_progress = true;\n\n  assert.equal(false, flush === undefined, 'must provide flush value');\n\n  this.write_in_progress = true;\n\n  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {\n    throw new Error('Invalid flush value');\n  }\n\n  if (input == null) {\n    input = Buffer.alloc(0);\n    in_len = 0;\n    in_off = 0;\n  }\n\n  this.strm.avail_in = in_len;\n  this.strm.input = input;\n  this.strm.next_in = in_off;\n  this.strm.avail_out = out_len;\n  this.strm.output = out;\n  this.strm.next_out = out_off;\n  this.flush = flush;\n\n  if (!async) {\n    // sync version\n    this._process();\n\n    if (this._checkError()) {\n      return this._afterSync();\n    }\n    return;\n  }\n\n  // async version\n  var self = this;\n  process.nextTick(function () {\n    self._process();\n    self._after();\n  });\n\n  return this;\n};\n\nZlib.prototype._afterSync = function () {\n  var avail_out = this.strm.avail_out;\n  var avail_in = this.strm.avail_in;\n\n  this.write_in_progress = false;\n\n  return [avail_in, avail_out];\n};\n\nZlib.prototype._process = function () {\n  var next_expected_header_byte = null;\n\n  // If the avail_out is left at 0, then it means that it ran out\n  // of room.  If there was avail_out left over, then it means\n  // that all of the input was consumed.\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.GZIP:\n    case exports.DEFLATERAW:\n      this.err = zlib_deflate.deflate(this.strm, this.flush);\n      break;\n    case exports.UNZIP:\n      if (this.strm.avail_in > 0) {\n        next_expected_header_byte = this.strm.next_in;\n      }\n\n      switch (this.gzip_id_bytes_read) {\n        case 0:\n          if (next_expected_header_byte === null) {\n            break;\n          }\n\n          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {\n            this.gzip_id_bytes_read = 1;\n            next_expected_header_byte++;\n\n            if (this.strm.avail_in === 1) {\n              // The only available byte was already read.\n              break;\n            }\n          } else {\n            this.mode = exports.INFLATE;\n            break;\n          }\n\n        // fallthrough\n        case 1:\n          if (next_expected_header_byte === null) {\n            break;\n          }\n\n          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {\n            this.gzip_id_bytes_read = 2;\n            this.mode = exports.GUNZIP;\n          } else {\n            // There is no actual difference between INFLATE and INFLATERAW\n            // (after initialization).\n            this.mode = exports.INFLATE;\n          }\n\n          break;\n        default:\n          throw new Error('invalid number of gzip magic number bytes read');\n      }\n\n    // fallthrough\n    case exports.INFLATE:\n    case exports.GUNZIP:\n    case exports.INFLATERAW:\n      this.err = zlib_inflate.inflate(this.strm, this.flush\n\n      // If data was encoded with dictionary\n      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {\n        // Load it\n        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);\n        if (this.err === exports.Z_OK) {\n          // And try to decode again\n          this.err = zlib_inflate.inflate(this.strm, this.flush);\n        } else if (this.err === exports.Z_DATA_ERROR) {\n          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.\n          // Make it possible for After() to tell a bad dictionary from bad\n          // input.\n          this.err = exports.Z_NEED_DICT;\n        }\n      }\n      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {\n        // Bytes remain in input buffer. Perhaps this is another compressed\n        // member in the same archive, or just trailing garbage.\n        // Trailing zero bytes are okay, though, since they are frequently\n        // used for padding.\n\n        this.reset();\n        this.err = zlib_inflate.inflate(this.strm, this.flush);\n      }\n      break;\n    default:\n      throw new Error('Unknown mode ' + this.mode);\n  }\n};\n\nZlib.prototype._checkError = function () {\n  // Acceptable error states depend on the type of zlib stream.\n  switch (this.err) {\n    case exports.Z_OK:\n    case exports.Z_BUF_ERROR:\n      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {\n        this._error('unexpected end of file');\n        return false;\n      }\n      break;\n    case exports.Z_STREAM_END:\n      // normal statuses, not fatal\n      break;\n    case exports.Z_NEED_DICT:\n      if (this.dictionary == null) {\n        this._error('Missing dictionary');\n      } else {\n        this._error('Bad dictionary');\n      }\n      return false;\n    default:\n      // something else.\n      this._error('Zlib error');\n      return false;\n  }\n\n  return true;\n};\n\nZlib.prototype._after = function () {\n  if (!this._checkError()) {\n    return;\n  }\n\n  var avail_out = this.strm.avail_out;\n  var avail_in = this.strm.avail_in;\n\n  this.write_in_progress = false;\n\n  // call the write() cb\n  this.callback(avail_in, avail_out);\n\n  if (this.pending_close) {\n    this.close();\n  }\n};\n\nZlib.prototype._error = function (message) {\n  if (this.strm.msg) {\n    message = this.strm.msg;\n  }\n  this.onerror(message, this.err\n\n  // no hope of rescue.\n  );this.write_in_progress = false;\n  if (this.pending_close) {\n    this.close();\n  }\n};\n\nZlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {\n  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');\n\n  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');\n  assert(level >= -1 && level <= 9, 'invalid compression level');\n\n  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');\n\n  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');\n\n  this._init(level, windowBits, memLevel, strategy, dictionary);\n  this._setDictionary();\n};\n\nZlib.prototype.params = function () {\n  throw new Error('deflateParams Not supported');\n};\n\nZlib.prototype.reset = function () {\n  this._reset();\n  this._setDictionary();\n};\n\nZlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {\n  this.level = level;\n  this.windowBits = windowBits;\n  this.memLevel = memLevel;\n  this.strategy = strategy;\n\n  this.flush = exports.Z_NO_FLUSH;\n\n  this.err = exports.Z_OK;\n\n  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {\n    this.windowBits += 16;\n  }\n\n  if (this.mode === exports.UNZIP) {\n    this.windowBits += 32;\n  }\n\n  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {\n    this.windowBits = -1 * this.windowBits;\n  }\n\n  this.strm = new Zstream();\n\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.GZIP:\n    case exports.DEFLATERAW:\n      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);\n      break;\n    case exports.INFLATE:\n    case exports.GUNZIP:\n    case exports.INFLATERAW:\n    case exports.UNZIP:\n      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);\n      break;\n    default:\n      throw new Error('Unknown mode ' + this.mode);\n  }\n\n  if (this.err !== exports.Z_OK) {\n    this._error('Init error');\n  }\n\n  this.dictionary = dictionary;\n\n  this.write_in_progress = false;\n  this.init_done = true;\n};\n\nZlib.prototype._setDictionary = function () {\n  if (this.dictionary == null) {\n    return;\n  }\n\n  this.err = exports.Z_OK;\n\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.DEFLATERAW:\n      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);\n      break;\n    default:\n      break;\n  }\n\n  if (this.err !== exports.Z_OK) {\n    this._error('Failed to set dictionary');\n  }\n};\n\nZlib.prototype._reset = function () {\n  this.err = exports.Z_OK;\n\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.DEFLATERAW:\n    case exports.GZIP:\n      this.err = zlib_deflate.deflateReset(this.strm);\n      break;\n    case exports.INFLATE:\n    case exports.INFLATERAW:\n    case exports.GUNZIP:\n      this.err = zlib_inflate.inflateReset(this.strm);\n      break;\n    default:\n      break;\n  }\n\n  if (this.err !== exports.Z_OK) {\n    this._error('Failed to reset stream');\n  }\n};\n\nexports.Zlib = Zlib;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/browserify-zlib/lib/binding.js\n// module id = 217\n// module chunks = 0","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/util/support/isBufferBrowser.js\n// module id = 218\n// module chunks = 0","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/util/node_modules/inherits/inherits_browser.js\n// module id = 219\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/zstream.js\n// module id = 220\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/deflate.js\n// module id = 221\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/trees.js\n// module id = 222\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/messages.js\n// module id = 223\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/inflate.js\n// module id = 224\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/inffast.js\n// module id = 225\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/inftrees.js\n// module id = 226\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/constants.js\n// module id = 227\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Math'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A rotation expressed as a heading, pitch, and roll. Heading is the rotation about the\r\n     * negative z axis. Pitch is the rotation about the negative y axis. Roll is the rotation about\r\n     * the positive x axis.\r\n     * @alias HeadingPitchRoll\r\n     * @constructor\r\n     *\r\n     * @param {Number} [heading=0.0] The heading component in radians.\r\n     * @param {Number} [pitch=0.0] The pitch component in radians.\r\n     * @param {Number} [roll=0.0] The roll component in radians.\r\n     */\r\n    function HeadingPitchRoll(heading, pitch, roll) {\r\n        this.heading = defaultValue(heading, 0.0);\r\n        this.pitch = defaultValue(pitch, 0.0);\r\n        this.roll = defaultValue(roll, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Computes the heading, pitch and roll from a quaternion (see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles )\r\n     *\r\n     * @param {Quaternion} quaternion The quaternion from which to retrieve heading, pitch, and roll, all expressed in radians.\r\n     * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.\r\n     * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.\r\n     */\r\n    HeadingPitchRoll.fromQuaternion = function(quaternion, result) {\r\n        \r\n        if (!defined(result)) {\r\n            result = new HeadingPitchRoll();\r\n        }\r\n        var test = 2 * (quaternion.w * quaternion.y - quaternion.z * quaternion.x);\r\n        var denominatorRoll = 1 - 2 * (quaternion.x * quaternion.x + quaternion.y * quaternion.y);\r\n        var numeratorRoll = 2 * (quaternion.w * quaternion.x + quaternion.y * quaternion.z);\r\n        var denominatorHeading = 1 - 2 * (quaternion.y * quaternion.y + quaternion.z * quaternion.z);\r\n        var numeratorHeading = 2 * (quaternion.w * quaternion.z + quaternion.x * quaternion.y);\r\n        result.heading = -Math.atan2(numeratorHeading, denominatorHeading);\r\n        result.roll = Math.atan2(numeratorRoll, denominatorRoll);\r\n        result.pitch = -Math.asin(test);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns a new HeadingPitchRoll instance from angles given in degrees.\r\n     *\r\n     * @param {Number} heading the heading in degrees\r\n     * @param {Number} pitch the pitch in degrees\r\n     * @param {Number} roll the heading in degrees\r\n     * @param {HeadingPitchRoll} [result] The object in which to store the result. If not provided, a new instance is created and returned.\r\n     * @returns {HeadingPitchRoll} A new HeadingPitchRoll instance\r\n     */\r\n    HeadingPitchRoll.fromDegrees = function(heading, pitch, roll, result) {\r\n        \r\n        if (!defined(result)) {\r\n            result = new HeadingPitchRoll();\r\n        }\r\n        result.heading = heading * CesiumMath.RADIANS_PER_DEGREE;\r\n        result.pitch = pitch * CesiumMath.RADIANS_PER_DEGREE;\r\n        result.roll = roll * CesiumMath.RADIANS_PER_DEGREE;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a HeadingPitchRoll instance.\r\n     *\r\n     * @param {HeadingPitchRoll} headingPitchRoll The HeadingPitchRoll to duplicate.\r\n     * @param {HeadingPitchRoll} [result] The object onto which to store the result.\r\n     * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided. (Returns undefined if headingPitchRoll is undefined)\r\n     */\r\n    HeadingPitchRoll.clone = function(headingPitchRoll, result) {\r\n        if (!defined(headingPitchRoll)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new HeadingPitchRoll(headingPitchRoll.heading, headingPitchRoll.pitch, headingPitchRoll.roll);\r\n        }\r\n        result.heading = headingPitchRoll.heading;\r\n        result.pitch = headingPitchRoll.pitch;\r\n        result.roll = headingPitchRoll.roll;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided HeadingPitchRolls componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.\r\n     * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    HeadingPitchRoll.equals = function(left, right) {\r\n        return (left === right) ||\r\n            ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.heading === right.heading) &&\r\n                (left.pitch === right.pitch) &&\r\n                (left.roll === right.roll));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided HeadingPitchRolls componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {HeadingPitchRoll} [left] The first HeadingPitchRoll.\r\n     * @param {HeadingPitchRoll} [right] The second HeadingPitchRoll.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    HeadingPitchRoll.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        return (left === right) ||\r\n            (defined(left) &&\r\n                defined(right) &&\r\n                CesiumMath.equalsEpsilon(left.heading, right.heading, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.pitch, right.pitch, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.roll, right.roll, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * Duplicates this HeadingPitchRoll instance.\r\n     *\r\n     * @param {HeadingPitchRoll} [result] The object onto which to store the result.\r\n     * @returns {HeadingPitchRoll} The modified result parameter or a new HeadingPitchRoll instance if one was not provided.\r\n     */\r\n    HeadingPitchRoll.prototype.clone = function(result) {\r\n        return HeadingPitchRoll.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this HeadingPitchRoll against the provided HeadingPitchRoll componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {HeadingPitchRoll} [right] The right hand side HeadingPitchRoll.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    HeadingPitchRoll.prototype.equals = function(right) {\r\n        return HeadingPitchRoll.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this HeadingPitchRoll against the provided HeadingPitchRoll componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {HeadingPitchRoll} [right] The right hand side HeadingPitchRoll.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    HeadingPitchRoll.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {\r\n        return HeadingPitchRoll.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this HeadingPitchRoll in the format '(heading, pitch, roll)' in radians.\r\n     *\r\n     * @returns {String} A string representing the provided HeadingPitchRoll in the format '(heading, pitch, roll)'.\r\n     */\r\n    HeadingPitchRoll.prototype.toString = function() {\r\n        return '(' + this.heading + ', ' + this.pitch + ', ' + this.roll + ')';\r\n    };\r\n\r\n    return HeadingPitchRoll;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/HeadingPitchRoll.js\n// module id = 228\n// module chunks = 0","define([\r\n        '../ThirdParty/when',\r\n        './buildModuleUrl',\r\n        './defaultValue',\r\n        './defined',\r\n        './Iau2006XysSample',\r\n        './JulianDate',\r\n        './Resource',\r\n        './TimeStandard'\r\n    ], function(\r\n        when,\r\n        buildModuleUrl,\r\n        defaultValue,\r\n        defined,\r\n        Iau2006XysSample,\r\n        JulianDate,\r\n        Resource,\r\n        TimeStandard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A set of IAU2006 XYS data that is used to evaluate the transformation between the International\r\n     * Celestial Reference Frame (ICRF) and the International Terrestrial Reference Frame (ITRF).\r\n     *\r\n     * @alias Iau2006XysData\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Resource|String} [options.xysFileUrlTemplate='Assets/IAU2006_XYS/IAU2006_XYS_{0}.json'] A template URL for obtaining the XYS data.  In the template,\r\n     *                 `{0}` will be replaced with the file index.\r\n     * @param {Number} [options.interpolationOrder=9] The order of interpolation to perform on the XYS data.\r\n     * @param {Number} [options.sampleZeroJulianEphemerisDate=2442396.5] The Julian ephemeris date (JED) of the\r\n     *                 first XYS sample.\r\n     * @param {Number} [options.stepSizeDays=1.0] The step size, in days, between successive XYS samples.\r\n     * @param {Number} [options.samplesPerXysFile=1000] The number of samples in each XYS file.\r\n     * @param {Number} [options.totalSamples=27426] The total number of samples in all XYS files.\r\n     *\r\n     * @private\r\n     */\r\n    function Iau2006XysData(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._xysFileUrlTemplate = Resource.createIfNeeded(options.xysFileUrlTemplate);\r\n        this._interpolationOrder = defaultValue(options.interpolationOrder, 9);\r\n        this._sampleZeroJulianEphemerisDate = defaultValue(options.sampleZeroJulianEphemerisDate, 2442396.5);\r\n        this._sampleZeroDateTT = new JulianDate(this._sampleZeroJulianEphemerisDate, 0.0, TimeStandard.TAI);\r\n        this._stepSizeDays = defaultValue(options.stepSizeDays, 1.0);\r\n        this._samplesPerXysFile = defaultValue(options.samplesPerXysFile, 1000);\r\n        this._totalSamples = defaultValue(options.totalSamples, 27426);\r\n        this._samples = new Array(this._totalSamples * 3);\r\n        this._chunkDownloadsInProgress = [];\r\n\r\n        var order = this._interpolationOrder;\r\n\r\n        // Compute denominators and X values for interpolation.\r\n        var denom = this._denominators = new Array(order + 1);\r\n        var xTable = this._xTable = new Array(order + 1);\r\n\r\n        var stepN = Math.pow(this._stepSizeDays, order);\r\n\r\n        for ( var i = 0; i <= order; ++i) {\r\n            denom[i] = stepN;\r\n            xTable[i] = i * this._stepSizeDays;\r\n\r\n            for ( var j = 0; j <= order; ++j) {\r\n                if (j !== i) {\r\n                    denom[i] *= (i - j);\r\n                }\r\n            }\r\n\r\n            denom[i] = 1.0 / denom[i];\r\n        }\r\n\r\n        // Allocate scratch arrays for interpolation.\r\n        this._work = new Array(order + 1);\r\n        this._coef = new Array(order + 1);\r\n    }\r\n\r\n    var julianDateScratch = new JulianDate(0, 0.0, TimeStandard.TAI);\r\n\r\n    function getDaysSinceEpoch(xys, dayTT, secondTT) {\r\n        var dateTT = julianDateScratch;\r\n        dateTT.dayNumber = dayTT;\r\n        dateTT.secondsOfDay = secondTT;\r\n        return JulianDate.daysDifference(dateTT, xys._sampleZeroDateTT);\r\n    }\r\n\r\n    /**\r\n     * Preloads XYS data for a specified date range.\r\n     *\r\n     * @param {Number} startDayTT The Julian day number of the beginning of the interval to preload, expressed in\r\n     *                 the Terrestrial Time (TT) time standard.\r\n     * @param {Number} startSecondTT The seconds past noon of the beginning of the interval to preload, expressed in\r\n     *                 the Terrestrial Time (TT) time standard.\r\n     * @param {Number} stopDayTT The Julian day number of the end of the interval to preload, expressed in\r\n     *                 the Terrestrial Time (TT) time standard.\r\n     * @param {Number} stopSecondTT The seconds past noon of the end of the interval to preload, expressed in\r\n     *                 the Terrestrial Time (TT) time standard.\r\n     * @returns {Promise.<undefined>} A promise that, when resolved, indicates that the requested interval has been\r\n     *                    preloaded.\r\n     */\r\n    Iau2006XysData.prototype.preload = function(startDayTT, startSecondTT, stopDayTT, stopSecondTT) {\r\n        var startDaysSinceEpoch = getDaysSinceEpoch(this, startDayTT, startSecondTT);\r\n        var stopDaysSinceEpoch = getDaysSinceEpoch(this, stopDayTT, stopSecondTT);\r\n\r\n        var startIndex = (startDaysSinceEpoch / this._stepSizeDays - this._interpolationOrder / 2) | 0;\r\n        if (startIndex < 0) {\r\n            startIndex = 0;\r\n        }\r\n\r\n        var stopIndex = (stopDaysSinceEpoch / this._stepSizeDays - this._interpolationOrder / 2) | 0 + this._interpolationOrder;\r\n        if (stopIndex >= this._totalSamples) {\r\n            stopIndex = this._totalSamples - 1;\r\n        }\r\n\r\n        var startChunk = (startIndex / this._samplesPerXysFile) | 0;\r\n        var stopChunk = (stopIndex / this._samplesPerXysFile) | 0;\r\n\r\n        var promises = [];\r\n        for ( var i = startChunk; i <= stopChunk; ++i) {\r\n            promises.push(requestXysChunk(this, i));\r\n        }\r\n\r\n        return when.all(promises);\r\n    };\r\n\r\n    /**\r\n     * Computes the XYS values for a given date by interpolating.  If the required data is not yet downloaded,\r\n     * this method will return undefined.\r\n     *\r\n     * @param {Number} dayTT The Julian day number for which to compute the XYS value, expressed in\r\n     *                 the Terrestrial Time (TT) time standard.\r\n     * @param {Number} secondTT The seconds past noon of the date for which to compute the XYS value, expressed in\r\n     *                 the Terrestrial Time (TT) time standard.\r\n     * @param {Iau2006XysSample} [result] The instance to which to copy the interpolated result.  If this parameter\r\n     *                           is undefined, a new instance is allocated and returned.\r\n     * @returns {Iau2006XysSample} The interpolated XYS values, or undefined if the required data for this\r\n     *                             computation has not yet been downloaded.\r\n     *\r\n     * @see Iau2006XysData#preload\r\n     */\r\n    Iau2006XysData.prototype.computeXysRadians = function(dayTT, secondTT, result) {\r\n        var daysSinceEpoch = getDaysSinceEpoch(this, dayTT, secondTT);\r\n        if (daysSinceEpoch < 0.0) {\r\n            // Can't evaluate prior to the epoch of the data.\r\n            return undefined;\r\n        }\r\n\r\n        var centerIndex = (daysSinceEpoch / this._stepSizeDays) | 0;\r\n        if (centerIndex >= this._totalSamples) {\r\n            // Can't evaluate after the last sample in the data.\r\n            return undefined;\r\n        }\r\n\r\n        var degree = this._interpolationOrder;\r\n\r\n        var firstIndex = centerIndex - ((degree / 2) | 0);\r\n        if (firstIndex < 0) {\r\n            firstIndex = 0;\r\n        }\r\n        var lastIndex = firstIndex + degree;\r\n        if (lastIndex >= this._totalSamples) {\r\n            lastIndex = this._totalSamples - 1;\r\n            firstIndex = lastIndex - degree;\r\n            if (firstIndex < 0) {\r\n                firstIndex = 0;\r\n            }\r\n        }\r\n\r\n        // Are all the samples we need present?\r\n        // We can assume so if the first and last are present\r\n        var isDataMissing = false;\r\n        var samples = this._samples;\r\n        if (!defined(samples[firstIndex * 3])) {\r\n            requestXysChunk(this, (firstIndex / this._samplesPerXysFile) | 0);\r\n            isDataMissing = true;\r\n        }\r\n\r\n        if (!defined(samples[lastIndex * 3])) {\r\n            requestXysChunk(this, (lastIndex / this._samplesPerXysFile) | 0);\r\n            isDataMissing = true;\r\n        }\r\n\r\n        if (isDataMissing) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            result = new Iau2006XysSample(0.0, 0.0, 0.0);\r\n        } else {\r\n            result.x = 0.0;\r\n            result.y = 0.0;\r\n            result.s = 0.0;\r\n        }\r\n\r\n        var x = daysSinceEpoch - firstIndex * this._stepSizeDays;\r\n\r\n        var work = this._work;\r\n        var denom = this._denominators;\r\n        var coef = this._coef;\r\n        var xTable = this._xTable;\r\n\r\n        var i, j;\r\n        for (i = 0; i <= degree; ++i) {\r\n            work[i] = x - xTable[i];\r\n        }\r\n\r\n        for (i = 0; i <= degree; ++i) {\r\n            coef[i] = 1.0;\r\n\r\n            for (j = 0; j <= degree; ++j) {\r\n                if (j !== i) {\r\n                    coef[i] *= work[j];\r\n                }\r\n            }\r\n\r\n            coef[i] *= denom[i];\r\n\r\n            var sampleIndex = (firstIndex + i) * 3;\r\n            result.x += coef[i] * samples[sampleIndex++];\r\n            result.y += coef[i] * samples[sampleIndex++];\r\n            result.s += coef[i] * samples[sampleIndex];\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    function requestXysChunk(xysData, chunkIndex) {\r\n        if (xysData._chunkDownloadsInProgress[chunkIndex]) {\r\n            // Chunk has already been requested.\r\n            return xysData._chunkDownloadsInProgress[chunkIndex];\r\n        }\r\n\r\n        var deferred = when.defer();\r\n\r\n        xysData._chunkDownloadsInProgress[chunkIndex] = deferred;\r\n\r\n        var chunkUrl;\r\n        var xysFileUrlTemplate = xysData._xysFileUrlTemplate;\r\n        if (defined(xysFileUrlTemplate)) {\r\n            chunkUrl = xysFileUrlTemplate.getDerivedResource({\r\n                templateValues: {\r\n                    '0': chunkIndex\r\n                }\r\n            });\r\n        } else {\r\n            chunkUrl = new Resource({\r\n                url : require('C:\\\\github\\\\terriajs\\\\node_modules\\\\terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_' + chunkIndex + '.json')\r\n            });\r\n        }\r\n\r\n        when(chunkUrl.fetchJson(), function(chunk) {\r\n            xysData._chunkDownloadsInProgress[chunkIndex] = false;\r\n\r\n            var samples = xysData._samples;\r\n            var newSamples = chunk.samples;\r\n            var startIndex = chunkIndex * xysData._samplesPerXysFile * 3;\r\n\r\n            for ( var i = 0, len = newSamples.length; i < len; ++i) {\r\n                samples[startIndex + i] = newSamples[i];\r\n            }\r\n\r\n            deferred.resolve();\r\n        });\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    return Iau2006XysData;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Iau2006XysData.js\n// module id = 229\n// module chunks = 0","var map = {\n\t\"./IAU2006_XYS_0.json\": 231,\n\t\"./IAU2006_XYS_1.json\": 232,\n\t\"./IAU2006_XYS_10.json\": 233,\n\t\"./IAU2006_XYS_11.json\": 234,\n\t\"./IAU2006_XYS_12.json\": 235,\n\t\"./IAU2006_XYS_13.json\": 236,\n\t\"./IAU2006_XYS_14.json\": 237,\n\t\"./IAU2006_XYS_15.json\": 238,\n\t\"./IAU2006_XYS_16.json\": 239,\n\t\"./IAU2006_XYS_17.json\": 240,\n\t\"./IAU2006_XYS_18.json\": 241,\n\t\"./IAU2006_XYS_19.json\": 242,\n\t\"./IAU2006_XYS_2.json\": 243,\n\t\"./IAU2006_XYS_20.json\": 244,\n\t\"./IAU2006_XYS_21.json\": 245,\n\t\"./IAU2006_XYS_22.json\": 246,\n\t\"./IAU2006_XYS_23.json\": 247,\n\t\"./IAU2006_XYS_24.json\": 248,\n\t\"./IAU2006_XYS_25.json\": 249,\n\t\"./IAU2006_XYS_26.json\": 250,\n\t\"./IAU2006_XYS_27.json\": 251,\n\t\"./IAU2006_XYS_3.json\": 252,\n\t\"./IAU2006_XYS_4.json\": 253,\n\t\"./IAU2006_XYS_5.json\": 254,\n\t\"./IAU2006_XYS_6.json\": 255,\n\t\"./IAU2006_XYS_7.json\": 256,\n\t\"./IAU2006_XYS_8.json\": 257,\n\t\"./IAU2006_XYS_9.json\": 258\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 230;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS ^\\.\\/IAU2006_XYS_.*\\.json$\n// module id = 230\n// module chunks = 0","module.exports = __webpack_public_path__ + \"2d5795098960cdf313dd4ae92036218a.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_0.json\n// module id = 231\n// module chunks = 0","module.exports = __webpack_public_path__ + \"ea2e3cf86ccbfd9b05b9cde7dbd52a44.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_1.json\n// module id = 232\n// module chunks = 0","module.exports = __webpack_public_path__ + \"3d510d30d03cf9d5e7ffd7b9c3937e72.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_10.json\n// module id = 233\n// module chunks = 0","module.exports = __webpack_public_path__ + \"c2628933a3686121808a28cc4ed8efc1.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_11.json\n// module id = 234\n// module chunks = 0","module.exports = __webpack_public_path__ + \"cd58ab10a7c600da1463f2be116cb9ce.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_12.json\n// module id = 235\n// module chunks = 0","module.exports = __webpack_public_path__ + \"363b177dd76c36aeee3b3fd6bd1462f0.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_13.json\n// module id = 236\n// module chunks = 0","module.exports = __webpack_public_path__ + \"b2d57dcf896b8a3920db6b619b0fffe8.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_14.json\n// module id = 237\n// module chunks = 0","module.exports = __webpack_public_path__ + \"581f1910c93dae37eb2176a3d902402a.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_15.json\n// module id = 238\n// module chunks = 0","module.exports = __webpack_public_path__ + \"6edb05d078b53896f322264ce227819a.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_16.json\n// module id = 239\n// module chunks = 0","module.exports = __webpack_public_path__ + \"f8064c6ae49b2db0a316810cd68a9054.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_17.json\n// module id = 240\n// module chunks = 0","module.exports = __webpack_public_path__ + \"e3f956b4a063bb71c1eec434df9e1c19.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_18.json\n// module id = 241\n// module chunks = 0","module.exports = __webpack_public_path__ + \"b779d797f43643f2f9c47843bd8cf435.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_19.json\n// module id = 242\n// module chunks = 0","module.exports = __webpack_public_path__ + \"03fab32f0c41feab85d13041b841417c.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_2.json\n// module id = 243\n// module chunks = 0","module.exports = __webpack_public_path__ + \"edb8718796e889c3f97bde2f44004bbc.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_20.json\n// module id = 244\n// module chunks = 0","module.exports = __webpack_public_path__ + \"dc0674ed14d4470b12330b1eac6abf7b.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_21.json\n// module id = 245\n// module chunks = 0","module.exports = __webpack_public_path__ + \"bfd2f4888524be41b193a3141cb4a844.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_22.json\n// module id = 246\n// module chunks = 0","module.exports = __webpack_public_path__ + \"3a9aff5435f0f40c03aef6157a3edb30.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_23.json\n// module id = 247\n// module chunks = 0","module.exports = __webpack_public_path__ + \"2b1a5690332ecd6f460ab35b09cfe941.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_24.json\n// module id = 248\n// module chunks = 0","module.exports = __webpack_public_path__ + \"9ac20655e300dbc01432966a539f10df.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_25.json\n// module id = 249\n// module chunks = 0","module.exports = __webpack_public_path__ + \"a6d1fb54cead2318e8573c0430a298bc.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_26.json\n// module id = 250\n// module chunks = 0","module.exports = __webpack_public_path__ + \"b98b703803507f23762805b6c5995f5b.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_27.json\n// module id = 251\n// module chunks = 0","module.exports = __webpack_public_path__ + \"541a21bdf0bd42030b7297230a2c3fc1.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_3.json\n// module id = 252\n// module chunks = 0","module.exports = __webpack_public_path__ + \"31ab38fd8a409a5f223ed2aa97e26bcc.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_4.json\n// module id = 253\n// module chunks = 0","module.exports = __webpack_public_path__ + \"10eb5070ec6da3dce77ac9bba37514c2.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_5.json\n// module id = 254\n// module chunks = 0","module.exports = __webpack_public_path__ + \"3628bb25d432b2c9f23eae256eb79ce3.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_6.json\n// module id = 255\n// module chunks = 0","module.exports = __webpack_public_path__ + \"bfc02c7a602192c7123f3e6b71daa9bf.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_7.json\n// module id = 256\n// module chunks = 0","module.exports = __webpack_public_path__ + \"1c227b3cfcf2bdef4b4aa8d5a6965110.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_8.json\n// module id = 257\n// module chunks = 0","module.exports = __webpack_public_path__ + \"9ad9f606869aa9952331953522602c2b.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/IAU2006_XYS/IAU2006_XYS_9.json\n// module id = 258\n// module chunks = 0","define([\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Check',\r\n        './defined',\r\n        './Math'\r\n    ], function(\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Check,\r\n        defined,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var scratchCartesian2 = new Cartesian3();\r\n    var scratchCartesian3 = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the barycentric coordinates for a point with respect to a triangle.\r\n     *\r\n     * @exports barycentricCoordinates\r\n     *\r\n     * @param {Cartesian2|Cartesian3} point The point to test.\r\n     * @param {Cartesian2|Cartesian3} p0 The first point of the triangle, corresponding to the barycentric x-axis.\r\n     * @param {Cartesian2|Cartesian3} p1 The second point of the triangle, corresponding to the barycentric y-axis.\r\n     * @param {Cartesian2|Cartesian3} p2 The third point of the triangle, corresponding to the barycentric z-axis.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Returns Cartesian3.UNIT_X\r\n     * var p = new Cesium.Cartesian3(-1.0, 0.0, 0.0);\r\n     * var b = Cesium.barycentricCoordinates(p,\r\n     *   new Cesium.Cartesian3(-1.0, 0.0, 0.0),\r\n     *   new Cesium.Cartesian3( 1.0, 0.0, 0.0),\r\n     *   new Cesium.Cartesian3( 0.0, 1.0, 1.0));\r\n     */\r\n    function barycentricCoordinates(point, p0, p1, p2, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        // Implementation based on http://www.blackpawn.com/texts/pointinpoly/default.html.\r\n        var v0;\r\n        var v1;\r\n        var v2;\r\n        var dot00;\r\n        var dot01;\r\n        var dot02;\r\n        var dot11;\r\n        var dot12;\r\n\r\n        if(!defined(p0.z)) {\r\n            if (Cartesian2.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\r\n                return Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n            }\r\n            if (Cartesian2.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\r\n                return Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n            }\r\n            if (Cartesian2.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\r\n                return Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n            }\r\n\r\n            v0 = Cartesian2.subtract(p1, p0, scratchCartesian1);\r\n            v1 = Cartesian2.subtract(p2, p0, scratchCartesian2);\r\n            v2 = Cartesian2.subtract(point, p0, scratchCartesian3);\r\n\r\n            dot00 = Cartesian2.dot(v0, v0);\r\n            dot01 = Cartesian2.dot(v0, v1);\r\n            dot02 = Cartesian2.dot(v0, v2);\r\n            dot11 = Cartesian2.dot(v1, v1);\r\n            dot12 = Cartesian2.dot(v1, v2);\r\n        } else {\r\n            if (Cartesian3.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\r\n                return Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n            }\r\n            if (Cartesian3.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\r\n                return Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n            }\r\n            if (Cartesian3.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\r\n                return Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n            }\r\n\r\n            v0 = Cartesian3.subtract(p1, p0, scratchCartesian1);\r\n            v1 = Cartesian3.subtract(p2, p0, scratchCartesian2);\r\n            v2 = Cartesian3.subtract(point, p0, scratchCartesian3);\r\n\r\n            dot00 = Cartesian3.dot(v0, v0);\r\n            dot01 = Cartesian3.dot(v0, v1);\r\n            dot02 = Cartesian3.dot(v0, v2);\r\n            dot11 = Cartesian3.dot(v1, v1);\r\n            dot12 = Cartesian3.dot(v1, v2);\r\n        }\r\n\r\n        var q = dot00 * dot11 - dot01 * dot01;\r\n        var invQ = 1.0 / q;\r\n        result.y = (dot11 * dot02 - dot01 * dot12) * invQ;\r\n        result.z = (dot00 * dot12 - dot01 * dot02) * invQ;\r\n        result.x = 1.0 - result.y - result.z;\r\n        return result;\r\n    }\r\n\r\n    return barycentricCoordinates;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/barycentricCoordinates.js\n// module id = 259\n// module chunks = 0","define([\r\n        './CubicRealPolynomial',\r\n        './DeveloperError',\r\n        './Math',\r\n        './QuadraticRealPolynomial'\r\n    ], function(\r\n        CubicRealPolynomial,\r\n        DeveloperError,\r\n        CesiumMath,\r\n        QuadraticRealPolynomial) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\r\n     *\r\n     * @exports QuarticRealPolynomial\r\n     */\r\n    var QuarticRealPolynomial = {};\r\n\r\n    /**\r\n     * Provides the discriminant of the quartic equation from the supplied coefficients.\r\n     *\r\n     * @param {Number} a The coefficient of the 4th order monomial.\r\n     * @param {Number} b The coefficient of the 3rd order monomial.\r\n     * @param {Number} c The coefficient of the 2nd order monomial.\r\n     * @param {Number} d The coefficient of the 1st order monomial.\r\n     * @param {Number} e The coefficient of the 0th order monomial.\r\n     * @returns {Number} The value of the discriminant.\r\n     */\r\n    QuarticRealPolynomial.computeDiscriminant = function(a, b, c, d, e) {\r\n        \r\n\r\n        var a2 = a * a;\r\n        var a3 = a2 * a;\r\n        var b2 = b * b;\r\n        var b3 = b2 * b;\r\n        var c2 = c * c;\r\n        var c3 = c2 * c;\r\n        var d2 = d * d;\r\n        var d3 = d2 * d;\r\n        var e2 = e * e;\r\n        var e3 = e2 * e;\r\n\r\n        var discriminant = (b2 * c2 * d2 - 4.0 * b3 * d3 - 4.0 * a * c3 * d2 + 18 * a * b * c * d3 - 27.0 * a2 * d2 * d2 + 256.0 * a3 * e3) +\r\n            e * (18.0 * b3 * c * d - 4.0 * b2 * c3 + 16.0 * a * c2 * c2 - 80.0 * a * b * c2 * d - 6.0 * a * b2 * d2 + 144.0 * a2 * c * d2) +\r\n            e2 * (144.0 * a * b2 * c - 27.0 * b2 * b2 - 128.0 * a2 * c2 - 192.0 * a2 * b * d);\r\n        return discriminant;\r\n    };\r\n\r\n    function original(a3, a2, a1, a0) {\r\n        var a3Squared = a3 * a3;\r\n\r\n        var p = a2 - 3.0 * a3Squared / 8.0;\r\n        var q = a1 - a2 * a3 / 2.0 + a3Squared * a3 / 8.0;\r\n        var r = a0 - a1 * a3 / 4.0 + a2 * a3Squared / 16.0 - 3.0 * a3Squared * a3Squared / 256.0;\r\n\r\n        // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\r\n        var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, 2.0 * p, p * p - 4.0 * r, -q * q);\r\n\r\n        if (cubicRoots.length > 0) {\r\n            var temp = -a3 / 4.0;\r\n\r\n            // Use the largest positive root.\r\n            var hSquared = cubicRoots[cubicRoots.length - 1];\r\n\r\n            if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\r\n                // y^4 + p y^2 + r = 0.\r\n                var roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\r\n\r\n                if (roots.length === 2) {\r\n                    var root0 = roots[0];\r\n                    var root1 = roots[1];\r\n\r\n                    var y;\r\n                    if (root0 >= 0.0 && root1 >= 0.0) {\r\n                        var y0 = Math.sqrt(root0);\r\n                        var y1 = Math.sqrt(root1);\r\n\r\n                        return [temp - y1, temp - y0, temp + y0, temp + y1];\r\n                    } else if (root0 >= 0.0 && root1 < 0.0) {\r\n                        y = Math.sqrt(root0);\r\n                        return [temp - y, temp + y];\r\n                    } else if (root0 < 0.0 && root1 >= 0.0) {\r\n                        y = Math.sqrt(root1);\r\n                        return [temp - y, temp + y];\r\n                    }\r\n                }\r\n                return [];\r\n            } else if (hSquared > 0.0) {\r\n                var h = Math.sqrt(hSquared);\r\n\r\n                var m = (p + hSquared - q / h) / 2.0;\r\n                var n = (p + hSquared + q / h) / 2.0;\r\n\r\n                // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\r\n                var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\r\n                var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\r\n\r\n                if (roots1.length !== 0) {\r\n                    roots1[0] += temp;\r\n                    roots1[1] += temp;\r\n\r\n                    if (roots2.length !== 0) {\r\n                        roots2[0] += temp;\r\n                        roots2[1] += temp;\r\n\r\n                        if (roots1[1] <= roots2[0]) {\r\n                            return [roots1[0], roots1[1], roots2[0], roots2[1]];\r\n                        } else if (roots2[1] <= roots1[0]) {\r\n                            return [roots2[0], roots2[1], roots1[0], roots1[1]];\r\n                        } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\r\n                            return [roots2[0], roots1[0], roots1[1], roots2[1]];\r\n                        } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\r\n                            return [roots1[0], roots2[0], roots2[1], roots1[1]];\r\n                        } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\r\n                            return [roots2[0], roots1[0], roots2[1], roots1[1]];\r\n                        }\r\n                        return [roots1[0], roots2[0], roots1[1], roots2[1]];\r\n                    }\r\n                    return roots1;\r\n                }\r\n\r\n                if (roots2.length !== 0) {\r\n                    roots2[0] += temp;\r\n                    roots2[1] += temp;\r\n\r\n                    return roots2;\r\n                }\r\n                return [];\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    function neumark(a3, a2, a1, a0) {\r\n        var a1Squared = a1 * a1;\r\n        var a2Squared = a2 * a2;\r\n        var a3Squared = a3 * a3;\r\n\r\n        var p = -2.0 * a2;\r\n        var q = a1 * a3 + a2Squared - 4.0 * a0;\r\n        var r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\r\n\r\n        var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\r\n\r\n        if (cubicRoots.length > 0) {\r\n            // Use the most positive root\r\n            var y = cubicRoots[0];\r\n\r\n            var temp = (a2 - y);\r\n            var tempSquared = temp * temp;\r\n\r\n            var g1 = a3 / 2.0;\r\n            var h1 = temp / 2.0;\r\n\r\n            var m = tempSquared - 4.0 * a0;\r\n            var mError = tempSquared + 4.0 * Math.abs(a0);\r\n\r\n            var n = a3Squared - 4.0 * y;\r\n            var nError = a3Squared + 4.0 * Math.abs(y);\r\n\r\n            var g2;\r\n            var h2;\r\n\r\n            if (y < 0.0 || (m * nError < n * mError)) {\r\n                var squareRootOfN = Math.sqrt(n);\r\n                g2 = squareRootOfN / 2.0;\r\n                h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\r\n            } else {\r\n                var squareRootOfM = Math.sqrt(m);\r\n                g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\r\n                h2 = squareRootOfM / 2.0;\r\n            }\r\n\r\n            var G;\r\n            var g;\r\n            if (g1 === 0.0 && g2 === 0.0) {\r\n                G = 0.0;\r\n                g = 0.0;\r\n            } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\r\n                G = g1 + g2;\r\n                g = y / G;\r\n            } else {\r\n                g = g1 - g2;\r\n                G = y / g;\r\n            }\r\n\r\n            var H;\r\n            var h;\r\n            if (h1 === 0.0 && h2 === 0.0) {\r\n                H = 0.0;\r\n                h = 0.0;\r\n            } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\r\n                H = h1 + h2;\r\n                h = a0 / H;\r\n            } else {\r\n                h = h1 - h2;\r\n                H = a0 / h;\r\n            }\r\n\r\n            // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\r\n            var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\r\n            var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\r\n\r\n            if (roots1.length !== 0) {\r\n                if (roots2.length !== 0) {\r\n                    if (roots1[1] <= roots2[0]) {\r\n                        return [roots1[0], roots1[1], roots2[0], roots2[1]];\r\n                    } else if (roots2[1] <= roots1[0]) {\r\n                        return [roots2[0], roots2[1], roots1[0], roots1[1]];\r\n                    } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\r\n                        return [roots2[0], roots1[0], roots1[1], roots2[1]];\r\n                    } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\r\n                        return [roots1[0], roots2[0], roots2[1], roots1[1]];\r\n                    } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\r\n                        return [roots2[0], roots1[0], roots2[1], roots1[1]];\r\n                    }\r\n                    return [roots1[0], roots2[0], roots1[1], roots2[1]];\r\n                }\r\n                return roots1;\r\n            }\r\n            if (roots2.length !== 0) {\r\n                return roots2;\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Provides the real valued roots of the quartic polynomial with the provided coefficients.\r\n     *\r\n     * @param {Number} a The coefficient of the 4th order monomial.\r\n     * @param {Number} b The coefficient of the 3rd order monomial.\r\n     * @param {Number} c The coefficient of the 2nd order monomial.\r\n     * @param {Number} d The coefficient of the 1st order monomial.\r\n     * @param {Number} e The coefficient of the 0th order monomial.\r\n     * @returns {Number[]} The real valued roots.\r\n     */\r\n    QuarticRealPolynomial.computeRealRoots = function(a, b, c, d, e) {\r\n        \r\n\r\n        if (Math.abs(a) < CesiumMath.EPSILON15) {\r\n            return CubicRealPolynomial.computeRealRoots(b, c, d, e);\r\n        }\r\n        var a3 = b / a;\r\n        var a2 = c / a;\r\n        var a1 = d / a;\r\n        var a0 = e / a;\r\n\r\n        var k = (a3 < 0.0) ? 1 : 0;\r\n        k += (a2 < 0.0) ? k + 1 : k;\r\n        k += (a1 < 0.0) ? k + 1 : k;\r\n        k += (a0 < 0.0) ? k + 1 : k;\r\n\r\n        switch (k) {\r\n        case 0:\r\n            return original(a3, a2, a1, a0);\r\n        case 1:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 2:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 3:\r\n            return original(a3, a2, a1, a0);\r\n        case 4:\r\n            return original(a3, a2, a1, a0);\r\n        case 5:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 6:\r\n            return original(a3, a2, a1, a0);\r\n        case 7:\r\n            return original(a3, a2, a1, a0);\r\n        case 8:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 9:\r\n            return original(a3, a2, a1, a0);\r\n        case 10:\r\n            return original(a3, a2, a1, a0);\r\n        case 11:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 12:\r\n            return original(a3, a2, a1, a0);\r\n        case 13:\r\n            return original(a3, a2, a1, a0);\r\n        case 14:\r\n            return original(a3, a2, a1, a0);\r\n        case 15:\r\n            return original(a3, a2, a1, a0);\r\n        default:\r\n            return undefined;\r\n        }\r\n    };\r\n\r\n    return QuarticRealPolynomial;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/QuarticRealPolynomial.js\n// module id = 260\n// module chunks = 0","define([\r\n        './DeveloperError',\r\n        './QuadraticRealPolynomial'\r\n    ], function(\r\n        DeveloperError,\r\n        QuadraticRealPolynomial) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\r\n     *\r\n     * @exports CubicRealPolynomial\r\n     */\r\n    var CubicRealPolynomial = {};\r\n\r\n    /**\r\n     * Provides the discriminant of the cubic equation from the supplied coefficients.\r\n     *\r\n     * @param {Number} a The coefficient of the 3rd order monomial.\r\n     * @param {Number} b The coefficient of the 2nd order monomial.\r\n     * @param {Number} c The coefficient of the 1st order monomial.\r\n     * @param {Number} d The coefficient of the 0th order monomial.\r\n     * @returns {Number} The value of the discriminant.\r\n     */\r\n    CubicRealPolynomial.computeDiscriminant = function(a, b, c, d) {\r\n        \r\n\r\n        var a2 = a * a;\r\n        var b2 = b * b;\r\n        var c2 = c * c;\r\n        var d2 = d * d;\r\n\r\n        var discriminant = 18.0 * a * b * c * d + b2 * c2 - 27.0 * a2 * d2 - 4.0 * (a * c2 * c + b2 * b * d);\r\n        return discriminant;\r\n    };\r\n\r\n    function computeRealRoots(a, b, c, d) {\r\n        var A = a;\r\n        var B = b / 3.0;\r\n        var C = c / 3.0;\r\n        var D = d;\r\n\r\n        var AC = A * C;\r\n        var BD = B * D;\r\n        var B2 = B * B;\r\n        var C2 = C * C;\r\n        var delta1 = A * C - B2;\r\n        var delta2 = A * D - B * C;\r\n        var delta3 = B * D - C2;\r\n\r\n        var discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\r\n        var temp;\r\n        var temp1;\r\n\r\n        if (discriminant < 0.0) {\r\n            var ABar;\r\n            var CBar;\r\n            var DBar;\r\n\r\n            if (B2 * BD >= AC * C2) {\r\n                ABar = A;\r\n                CBar = delta1;\r\n                DBar = -2.0 * B * delta1 + A * delta2;\r\n            } else {\r\n                ABar = D;\r\n                CBar = delta3;\r\n                DBar = -D * delta2 + 2.0 * C * delta3;\r\n            }\r\n\r\n            var s = (DBar < 0.0) ? -1.0 : 1.0; // This is not Math.Sign()!\r\n            var temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\r\n            temp1 = -DBar + temp0;\r\n\r\n            var x = temp1 / 2.0;\r\n            var p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\r\n            var q = (temp1 === temp0) ? -p : -CBar / p;\r\n\r\n            temp = (CBar <= 0.0) ? p + q : -DBar / (p * p + q * q + CBar);\r\n\r\n            if (B2 * BD >= AC * C2) {\r\n                return [(temp - B) / A];\r\n            }\r\n\r\n            return [-D / (temp + C)];\r\n        }\r\n\r\n        var CBarA = delta1;\r\n        var DBarA = -2.0 * B * delta1 + A * delta2;\r\n\r\n        var CBarD = delta3;\r\n        var DBarD = -D * delta2 + 2.0 * C * delta3;\r\n\r\n        var squareRootOfDiscriminant = Math.sqrt(discriminant);\r\n        var halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\r\n\r\n        var theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\r\n        temp = 2.0 * Math.sqrt(-CBarA);\r\n        var cosine = Math.cos(theta);\r\n        temp1 = temp * cosine;\r\n        var temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\r\n\r\n        var numeratorLarge = (temp1 + temp3 > 2.0 * B) ? temp1 - B : temp3 - B;\r\n        var denominatorLarge = A;\r\n\r\n        var root1 = numeratorLarge / denominatorLarge;\r\n\r\n        theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\r\n        temp = 2.0 * Math.sqrt(-CBarD);\r\n        cosine = Math.cos(theta);\r\n        temp1 = temp * cosine;\r\n        temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\r\n\r\n        var numeratorSmall = -D;\r\n        var denominatorSmall = (temp1 + temp3 < 2.0 * C) ? temp1 + C : temp3 + C;\r\n\r\n        var root3 = numeratorSmall / denominatorSmall;\r\n\r\n        var E = denominatorLarge * denominatorSmall;\r\n        var F = -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\r\n        var G = numeratorLarge * numeratorSmall;\r\n\r\n        var root2 = (C * F - B * G) / (-B * F + C * E);\r\n\r\n        if (root1 <= root2) {\r\n            if (root1 <= root3) {\r\n                if (root2 <= root3) {\r\n                    return [root1, root2, root3];\r\n                }\r\n                return [root1, root3, root2];\r\n            }\r\n            return [root3, root1, root2];\r\n        }\r\n        if (root1 <= root3) {\r\n            return [root2, root1, root3];\r\n        }\r\n        if (root2 <= root3) {\r\n            return [root2, root3, root1];\r\n        }\r\n        return [root3, root2, root1];\r\n    }\r\n\r\n    /**\r\n     * Provides the real valued roots of the cubic polynomial with the provided coefficients.\r\n     *\r\n     * @param {Number} a The coefficient of the 3rd order monomial.\r\n     * @param {Number} b The coefficient of the 2nd order monomial.\r\n     * @param {Number} c The coefficient of the 1st order monomial.\r\n     * @param {Number} d The coefficient of the 0th order monomial.\r\n     * @returns {Number[]} The real valued roots.\r\n     */\r\n    CubicRealPolynomial.computeRealRoots = function(a, b, c, d) {\r\n        \r\n\r\n        var roots;\r\n        var ratio;\r\n        if (a === 0.0) {\r\n            // Quadratic function: b * x^2 + c * x + d = 0.\r\n            return QuadraticRealPolynomial.computeRealRoots(b, c, d);\r\n        } else if (b === 0.0) {\r\n            if (c === 0.0) {\r\n                if (d === 0.0) {\r\n                    // 3rd order monomial: a * x^3 = 0.\r\n                    return [0.0, 0.0, 0.0];\r\n                }\r\n\r\n                // a * x^3 + d = 0\r\n                ratio = -d / a;\r\n                var root = (ratio < 0.0) ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\r\n                return [root, root, root];\r\n            } else if (d === 0.0) {\r\n                // x * (a * x^2 + c) = 0.\r\n                roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c);\r\n\r\n                // Return the roots in ascending order.\r\n                if (roots.Length === 0) {\r\n                    return [0.0];\r\n                }\r\n                return [roots[0], 0.0, roots[1]];\r\n            }\r\n\r\n            // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\r\n            return computeRealRoots(a, 0, c, d);\r\n        } else if (c === 0.0) {\r\n            if (d === 0.0) {\r\n                // x^2 * (a * x + b) = 0.\r\n                ratio = -b / a;\r\n                if (ratio < 0.0) {\r\n                    return [ratio, 0.0, 0.0];\r\n                }\r\n                return [0.0, 0.0, ratio];\r\n            }\r\n            // a * x^3 + b * x^2 + d = 0.\r\n            return computeRealRoots(a, b, 0, d);\r\n        } else if (d === 0.0) {\r\n            // x * (a * x^2 + b * x + c) = 0\r\n            roots = QuadraticRealPolynomial.computeRealRoots(a, b, c);\r\n\r\n            // Return the roots in ascending order.\r\n            if (roots.length === 0) {\r\n                return [0.0];\r\n            } else if (roots[1] <= 0.0) {\r\n                return [roots[0], roots[1], 0.0];\r\n            } else if (roots[0] >= 0.0) {\r\n                return [0.0, roots[0], roots[1]];\r\n            }\r\n            return [roots[0], 0.0, roots[1]];\r\n        }\r\n\r\n        return computeRealRoots(a, b, c, d);\r\n    };\r\n\r\n    return CubicRealPolynomial;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CubicRealPolynomial.js\n// module id = 261\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Encapsulates an algorithm to optimize triangles for the post\r\n     * vertex-shader cache.  This is based on the 2007 SIGGRAPH paper\r\n     * 'Fast Triangle Reordering for Vertex Locality and Reduced Overdraw.'\r\n     * The runtime is linear but several passes are made.\r\n     *\r\n     * @exports Tipsify\r\n     *\r\n     * @see <a href='http://gfx.cs.princeton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf'>\r\n     * Fast Triangle Reordering for Vertex Locality and Reduced Overdraw</a>\r\n     * by Sander, Nehab, and Barczak\r\n     *\r\n     * @private\r\n     */\r\n    var Tipsify = {};\r\n\r\n    /**\r\n     * Calculates the average cache miss ratio (ACMR) for a given set of indices.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\r\n     *                        in the vertex buffer that define the geometry's triangles.\r\n     * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\r\n     *                                     If not supplied, this value will be computed.\r\n     * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\r\n     * @returns {Number} The average cache miss ratio (ACMR).\r\n     *\r\n     * @exception {DeveloperError} indices length must be a multiple of three.\r\n     * @exception {DeveloperError} cacheSize must be greater than two.\r\n     *\r\n     * @example\r\n     * var indices = [0, 1, 2, 3, 4, 5];\r\n     * var maxIndex = 5;\r\n     * var cacheSize = 3;\r\n     * var acmr = Cesium.Tipsify.calculateACMR({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\r\n     */\r\n    Tipsify.calculateACMR = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var indices = options.indices;\r\n        var maximumIndex = options.maximumIndex;\r\n        var cacheSize = defaultValue(options.cacheSize, 24);\r\n\r\n        \r\n\r\n        var numIndices = indices.length;\r\n\r\n        \r\n\r\n        // Compute the maximumIndex if not given\r\n        if (!defined(maximumIndex)) {\r\n            maximumIndex = 0;\r\n            var currentIndex = 0;\r\n            var intoIndices = indices[currentIndex];\r\n            while (currentIndex < numIndices) {\r\n                if (intoIndices > maximumIndex) {\r\n                    maximumIndex = intoIndices;\r\n                }\r\n                ++currentIndex;\r\n                intoIndices = indices[currentIndex];\r\n            }\r\n        }\r\n\r\n        // Vertex time stamps\r\n        var vertexTimeStamps = [];\r\n        for ( var i = 0; i < maximumIndex + 1; i++) {\r\n            vertexTimeStamps[i] = 0;\r\n        }\r\n\r\n        // Cache processing\r\n        var s = cacheSize + 1;\r\n        for ( var j = 0; j < numIndices; ++j) {\r\n            if ((s - vertexTimeStamps[indices[j]]) > cacheSize) {\r\n                vertexTimeStamps[indices[j]] = s;\r\n                ++s;\r\n            }\r\n        }\r\n\r\n        return (s - cacheSize + 1) / (numIndices / 3);\r\n    };\r\n\r\n    /**\r\n     * Optimizes triangles for the post-vertex shader cache.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\r\n     *                        in the vertex buffer that define the geometry's triangles.\r\n     * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\r\n     *                                     If not supplied, this value will be computed.\r\n     * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\r\n     * @returns {Number[]} A list of the input indices in an optimized order.\r\n     *\r\n     * @exception {DeveloperError} indices length must be a multiple of three.\r\n     * @exception {DeveloperError} cacheSize must be greater than two.\r\n     *\r\n     * @example\r\n     * var indices = [0, 1, 2, 3, 4, 5];\r\n     * var maxIndex = 5;\r\n     * var cacheSize = 3;\r\n     * var reorderedIndices = Cesium.Tipsify.tipsify({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\r\n     */\r\n    Tipsify.tipsify = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var indices = options.indices;\r\n        var maximumIndex = options.maximumIndex;\r\n        var cacheSize = defaultValue(options.cacheSize, 24);\r\n\r\n        var cursor;\r\n\r\n        function skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne) {\r\n            while (deadEnd.length >= 1) {\r\n                // while the stack is not empty\r\n                var d = deadEnd[deadEnd.length - 1]; // top of the stack\r\n                deadEnd.splice(deadEnd.length - 1, 1); // pop the stack\r\n\r\n                if (vertices[d].numLiveTriangles > 0) {\r\n                    return d;\r\n                }\r\n            }\r\n\r\n            while (cursor < maximumIndexPlusOne) {\r\n                if (vertices[cursor].numLiveTriangles > 0) {\r\n                    ++cursor;\r\n                    return cursor - 1;\r\n                }\r\n                ++cursor;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        function getNextVertex(indices, cacheSize, oneRing, vertices, s, deadEnd, maximumIndexPlusOne) {\r\n            var n = -1;\r\n            var p;\r\n            var m = -1;\r\n            var itOneRing = 0;\r\n            while (itOneRing < oneRing.length) {\r\n                var index = oneRing[itOneRing];\r\n                if (vertices[index].numLiveTriangles) {\r\n                    p = 0;\r\n                    if ((s - vertices[index].timeStamp + (2 * vertices[index].numLiveTriangles)) <= cacheSize) {\r\n                        p = s - vertices[index].timeStamp;\r\n                    }\r\n                    if ((p > m) || (m === -1)) {\r\n                        m = p;\r\n                        n = index;\r\n                    }\r\n                }\r\n                ++itOneRing;\r\n            }\r\n            if (n === -1) {\r\n                return skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne);\r\n            }\r\n            return n;\r\n        }\r\n\r\n        \r\n\r\n        var numIndices = indices.length;\r\n\r\n        \r\n\r\n        // Determine maximum index\r\n        var maximumIndexPlusOne = 0;\r\n        var currentIndex = 0;\r\n        var intoIndices = indices[currentIndex];\r\n        var endIndex = numIndices;\r\n        if (defined(maximumIndex)) {\r\n            maximumIndexPlusOne = maximumIndex + 1;\r\n        } else {\r\n            while (currentIndex < endIndex) {\r\n                if (intoIndices > maximumIndexPlusOne) {\r\n                    maximumIndexPlusOne = intoIndices;\r\n                }\r\n                ++currentIndex;\r\n                intoIndices = indices[currentIndex];\r\n            }\r\n            if (maximumIndexPlusOne === -1) {\r\n                return 0;\r\n            }\r\n            ++maximumIndexPlusOne;\r\n        }\r\n\r\n        // Vertices\r\n        var vertices = [];\r\n        var i;\r\n        for (i = 0; i < maximumIndexPlusOne; i++) {\r\n            vertices[i] = {\r\n                numLiveTriangles : 0,\r\n                timeStamp : 0,\r\n                vertexTriangles : []\r\n            };\r\n        }\r\n        currentIndex = 0;\r\n        var triangle = 0;\r\n        while (currentIndex < endIndex) {\r\n            vertices[indices[currentIndex]].vertexTriangles.push(triangle);\r\n            ++(vertices[indices[currentIndex]]).numLiveTriangles;\r\n            vertices[indices[currentIndex + 1]].vertexTriangles.push(triangle);\r\n            ++(vertices[indices[currentIndex + 1]]).numLiveTriangles;\r\n            vertices[indices[currentIndex + 2]].vertexTriangles.push(triangle);\r\n            ++(vertices[indices[currentIndex + 2]]).numLiveTriangles;\r\n            ++triangle;\r\n            currentIndex += 3;\r\n        }\r\n\r\n        // Starting index\r\n        var f = 0;\r\n\r\n        // Time Stamp\r\n        var s = cacheSize + 1;\r\n        cursor = 1;\r\n\r\n        // Process\r\n        var oneRing = [];\r\n        var deadEnd = []; //Stack\r\n        var vertex;\r\n        var intoVertices;\r\n        var currentOutputIndex = 0;\r\n        var outputIndices = [];\r\n        var numTriangles = numIndices / 3;\r\n        var triangleEmitted = [];\r\n        for (i = 0; i < numTriangles; i++) {\r\n            triangleEmitted[i] = false;\r\n        }\r\n        var index;\r\n        var limit;\r\n        while (f !== -1) {\r\n            oneRing = [];\r\n            intoVertices = vertices[f];\r\n            limit = intoVertices.vertexTriangles.length;\r\n            for ( var k = 0; k < limit; ++k) {\r\n                triangle = intoVertices.vertexTriangles[k];\r\n                if (!triangleEmitted[triangle]) {\r\n                    triangleEmitted[triangle] = true;\r\n                    currentIndex = triangle + triangle + triangle;\r\n                    for ( var j = 0; j < 3; ++j) {\r\n                        // Set this index as a possible next index\r\n                        index = indices[currentIndex];\r\n                        oneRing.push(index);\r\n                        deadEnd.push(index);\r\n\r\n                        // Output index\r\n                        outputIndices[currentOutputIndex] = index;\r\n                        ++currentOutputIndex;\r\n\r\n                        // Cache processing\r\n                        vertex = vertices[index];\r\n                        --vertex.numLiveTriangles;\r\n                        if ((s - vertex.timeStamp) > cacheSize) {\r\n                            vertex.timeStamp = s;\r\n                            ++s;\r\n                        }\r\n                        ++currentIndex;\r\n                    }\r\n                }\r\n            }\r\n            f = getNextVertex(indices, cacheSize, oneRing, vertices, s, deadEnd, maximumIndexPlusOne);\r\n        }\r\n\r\n        return outputIndices;\r\n    };\r\n\r\n    return Tipsify;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Tipsify.js\n// module id = 262\n// module chunks = 0","define([\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties'\r\n    ], function(\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Value and type information for per-instance geometry attribute that determines the geometry instance offset\r\n     *\r\n     * @alias OffsetGeometryInstanceAttribute\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0] The x translation\r\n     * @param {Number} [y=0] The y translation\r\n     * @param {Number} [z=0] The z translation\r\n     *\r\n     * @private\r\n     *\r\n     * @see GeometryInstance\r\n     * @see GeometryInstanceAttribute\r\n     */\r\n    function OffsetGeometryInstanceAttribute(x, y, z) {\r\n        x = defaultValue(x, 0);\r\n        y = defaultValue(y, 0);\r\n        z = defaultValue(z, 0);\r\n\r\n        /**\r\n         * The values for the attributes stored in a typed array.\r\n         *\r\n         * @type Float32Array\r\n         */\r\n        this.value = new Float32Array([x, y, z]);\r\n    }\r\n\r\n    defineProperties(OffsetGeometryInstanceAttribute.prototype, {\r\n        /**\r\n         * The datatype of each component in the attribute, e.g., individual elements in\r\n         * {@link OffsetGeometryInstanceAttribute#value}.\r\n         *\r\n         * @memberof OffsetGeometryInstanceAttribute.prototype\r\n         *\r\n         * @type {ComponentDatatype}\r\n         * @readonly\r\n         *\r\n         * @default {@link ComponentDatatype.FLOAT}\r\n         */\r\n        componentDatatype : {\r\n            get : function() {\r\n                return ComponentDatatype.FLOAT;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The number of components in the attributes, i.e., {@link OffsetGeometryInstanceAttribute#value}.\r\n         *\r\n         * @memberof OffsetGeometryInstanceAttribute.prototype\r\n         *\r\n         * @type {Number}\r\n         * @readonly\r\n         *\r\n         * @default 3\r\n         */\r\n        componentsPerAttribute : {\r\n            get : function() {\r\n                return 3;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * When <code>true</code> and <code>componentDatatype</code> is an integer format,\r\n         * indicate that the components should be mapped to the range [0, 1] (unsigned)\r\n         * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\r\n         *\r\n         * @memberof OffsetGeometryInstanceAttribute.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         *\r\n         * @default false\r\n         */\r\n        normalize : {\r\n            get : function() {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Creates a new {@link OffsetGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\r\n     *\r\n     * @param {Cartesian3} offset The cartesian offset\r\n     * @returns {OffsetGeometryInstanceAttribute} The new {@link OffsetGeometryInstanceAttribute} instance.\r\n     */\r\n    OffsetGeometryInstanceAttribute.fromCartesian3 = function(offset) {\r\n        \r\n\r\n        return new OffsetGeometryInstanceAttribute(offset.x, offset.y, offset.z);\r\n    };\r\n\r\n    /**\r\n     * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\r\n     *\r\n     * @param {Cartesian3} offset The cartesian offset\r\n     * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\r\n     * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\r\n     *\r\n     * @example\r\n     * var attributes = primitive.getGeometryInstanceAttributes('an id');\r\n     * attributes.modelMatrix = Cesium.OffsetGeometryInstanceAttribute.toValue(modelMatrix, attributes.modelMatrix);\r\n     */\r\n    OffsetGeometryInstanceAttribute.toValue = function(offset, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = new Float32Array([offset.x, offset.y, offset.z]);\r\n        }\r\n\r\n        result[0] = offset.x;\r\n        result[1] = offset.y;\r\n        result[2] = offset.z;\r\n        return result;\r\n    };\r\n\r\n    return OffsetGeometryInstanceAttribute;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/OffsetGeometryInstanceAttribute.js\n// module id = 263\n// module chunks = 0","define([\r\n        './defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Formats an error object into a String.  If available, uses name, message, and stack\r\n     * properties, otherwise, falls back on toString().\r\n     *\r\n     * @exports formatError\r\n     *\r\n     * @param {*} object The item to find in the array.\r\n     * @returns {String} A string containing the formatted error.\r\n     */\r\n    function formatError(object) {\r\n        var result;\r\n\r\n        var name = object.name;\r\n        var message = object.message;\r\n        if (defined(name) && defined(message)) {\r\n            result = name + ': ' + message;\r\n        } else {\r\n            result = object.toString();\r\n        }\r\n\r\n        var stack = object.stack;\r\n        if (defined(stack)) {\r\n            result += '\\n' + stack;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return formatError;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/formatError.js\n// module id = 264\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './PrimitiveType'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        PrimitiveType) {\r\n    'use strict';\r\n\r\n    var diffScratch = new Cartesian3();\r\n\r\n    /**\r\n     * A description of the outline of a cube centered at the origin.\r\n     *\r\n     * @alias BoxOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\r\n     * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\r\n     *\r\n     * @see BoxOutlineGeometry.fromDimensions\r\n     * @see BoxOutlineGeometry.createGeometry\r\n     * @see Packable\r\n     *\r\n     * @example\r\n     * var box = new Cesium.BoxOutlineGeometry({\r\n     *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\r\n     *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\r\n     * });\r\n     * var geometry = Cesium.BoxOutlineGeometry.createGeometry(box);\r\n     */\r\n    function BoxOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var min = options.minimum;\r\n        var max = options.maximum;\r\n\r\n        \r\n\r\n        this._min = Cartesian3.clone(min);\r\n        this._max = Cartesian3.clone(max);\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createBoxOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * Creates an outline of a cube centered at the origin given its dimensions.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\r\n     * @returns {BoxOutlineGeometry}\r\n     *\r\n     * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\r\n     *\r\n     *\r\n     * @example\r\n     * var box = Cesium.BoxOutlineGeometry.fromDimensions({\r\n     *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\r\n     * });\r\n     * var geometry = Cesium.BoxOutlineGeometry.createGeometry(box);\r\n     *\r\n     * @see BoxOutlineGeometry.createGeometry\r\n     */\r\n    BoxOutlineGeometry.fromDimensions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var dimensions = options.dimensions;\r\n\r\n        \r\n\r\n        var corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\r\n\r\n        return new BoxOutlineGeometry({\r\n            minimum : Cartesian3.negate(corner, new Cartesian3()),\r\n            maximum : corner,\r\n            offsetAttribute: options.offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates an outline of a cube from the dimensions of an AxisAlignedBoundingBox.\r\n     *\r\n     * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\r\n     * @returns {BoxOutlineGeometry}\r\n     *\r\n     *\r\n     *\r\n     * @example\r\n     * var aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\r\n     *      -72.0, 40.0,\r\n     *      -70.0, 35.0,\r\n     *      -75.0, 30.0,\r\n     *      -70.0, 30.0,\r\n     *      -68.0, 40.0\r\n     * ]));\r\n     * var box = Cesium.BoxOutlineGeometry.fromAxisAlignedBoundingBox(aabb);\r\n     *\r\n     *  @see BoxOutlineGeometry.createGeometry\r\n     */\r\n    BoxOutlineGeometry.fromAxisAlignedBoundingBox = function(boundingBox) {\r\n        \r\n\r\n        return new BoxOutlineGeometry({\r\n            minimum : boundingBox.minimum,\r\n            maximum : boundingBox.maximum\r\n        });\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    BoxOutlineGeometry.packedLength = 2 * Cartesian3.packedLength + 1;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {BoxOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    BoxOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._min, array, startingIndex);\r\n        Cartesian3.pack(value._max, array, startingIndex + Cartesian3.packedLength);\r\n        array[startingIndex + (Cartesian3.packedLength * 2)] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchMin = new Cartesian3();\r\n    var scratchMax = new Cartesian3();\r\n    var scratchOptions = {\r\n        minimum : scratchMin,\r\n        maximum : scratchMax,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {BoxOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {BoxOutlineGeometry} The modified result parameter or a new BoxOutlineGeometry instance if one was not provided.\r\n     */\r\n    BoxOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var min = Cartesian3.unpack(array, startingIndex, scratchMin);\r\n        var max = Cartesian3.unpack(array, startingIndex + Cartesian3.packedLength, scratchMax);\r\n        var offsetAttribute = array[startingIndex + Cartesian3.packedLength * 2];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new BoxOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._min = Cartesian3.clone(min, result._min);\r\n        result._max = Cartesian3.clone(max, result._max);\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a box, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {BoxOutlineGeometry} boxGeometry A description of the box outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    BoxOutlineGeometry.createGeometry = function(boxGeometry) {\r\n        var min = boxGeometry._min;\r\n        var max = boxGeometry._max;\r\n\r\n        if (Cartesian3.equals(min, max)) {\r\n            return;\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        var indices = new Uint16Array(12 * 2);\r\n        var positions = new Float64Array(8 * 3);\r\n\r\n        positions[0] = min.x;\r\n        positions[1] = min.y;\r\n        positions[2] = min.z;\r\n        positions[3] = max.x;\r\n        positions[4] = min.y;\r\n        positions[5] = min.z;\r\n        positions[6] = max.x;\r\n        positions[7] = max.y;\r\n        positions[8] = min.z;\r\n        positions[9] = min.x;\r\n        positions[10] = max.y;\r\n        positions[11] = min.z;\r\n\r\n        positions[12] = min.x;\r\n        positions[13] = min.y;\r\n        positions[14] = max.z;\r\n        positions[15] = max.x;\r\n        positions[16] = min.y;\r\n        positions[17] = max.z;\r\n        positions[18] = max.x;\r\n        positions[19] = max.y;\r\n        positions[20] = max.z;\r\n        positions[21] = min.x;\r\n        positions[22] = max.y;\r\n        positions[23] = max.z;\r\n\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n\r\n        // top\r\n        indices[0] = 4;\r\n        indices[1] = 5;\r\n        indices[2] = 5;\r\n        indices[3] = 6;\r\n        indices[4] = 6;\r\n        indices[5] = 7;\r\n        indices[6] = 7;\r\n        indices[7] = 4;\r\n\r\n        // bottom\r\n        indices[8] = 0;\r\n        indices[9] = 1;\r\n        indices[10] = 1;\r\n        indices[11] = 2;\r\n        indices[12] = 2;\r\n        indices[13] = 3;\r\n        indices[14] = 3;\r\n        indices[15] = 0;\r\n\r\n        // left\r\n        indices[16] = 0;\r\n        indices[17] = 4;\r\n        indices[18] = 1;\r\n        indices[19] = 5;\r\n\r\n        //right\r\n        indices[20] = 2;\r\n        indices[21] = 6;\r\n        indices[22] = 3;\r\n        indices[23] = 7;\r\n\r\n        var diff = Cartesian3.subtract(max, min, diffScratch);\r\n        var radius = Cartesian3.magnitude(diff) * 0.5;\r\n\r\n        if (defined(boxGeometry._offsetAttribute)) {\r\n            var length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, radius),\r\n            offsetAttribute : boxGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    return BoxOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/BoxOutlineGeometry.js\n// module id = 265\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './EllipseGeometry',\r\n        './Ellipsoid',\r\n        './VertexFormat'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        EllipseGeometry,\r\n        Ellipsoid,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias CircleGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n     * @param {Number} options.radius The radius in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n     * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     *\r\n     * @exception {DeveloperError} radius must be greater than zero.\r\n     * @exception {DeveloperError} granularity must be greater than zero.\r\n     *\r\n     * @see CircleGeometry.createGeometry\r\n     * @see Packable\r\n     *\r\n     * @example\r\n     * // Create a circle.\r\n     * var circle = new Cesium.CircleGeometry({\r\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n     *   radius : 100000.0\r\n     * });\r\n     * var geometry = Cesium.CircleGeometry.createGeometry(circle);\r\n     */\r\n    function CircleGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var radius = options.radius;\r\n\r\n        \r\n\r\n        var ellipseGeometryOptions = {\r\n            center : options.center,\r\n            semiMajorAxis : radius,\r\n            semiMinorAxis : radius,\r\n            ellipsoid : options.ellipsoid,\r\n            height : options.height,\r\n            extrudedHeight : options.extrudedHeight,\r\n            granularity : options.granularity,\r\n            vertexFormat : options.vertexFormat,\r\n            stRotation : options.stRotation,\r\n            shadowVolume: options.shadowVolume\r\n        };\r\n        this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\r\n        this._workerName = 'createCircleGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    CircleGeometry.packedLength = EllipseGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CircleGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CircleGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n        return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipseGeometry = new EllipseGeometry({\r\n        center : new Cartesian3(),\r\n        semiMajorAxis : 1.0,\r\n        semiMinorAxis : 1.0\r\n    });\r\n    var scratchOptions = {\r\n        center : new Cartesian3(),\r\n        radius : undefined,\r\n        ellipsoid : Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n        height : undefined,\r\n        extrudedHeight : undefined,\r\n        granularity : undefined,\r\n        vertexFormat : new VertexFormat(),\r\n        stRotation : undefined,\r\n        semiMajorAxis : undefined,\r\n        semiMinorAxis : undefined,\r\n        shadowVolume: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CircleGeometry} [result] The object into which to store the result.\r\n     * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\r\n     */\r\n    CircleGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipseGeometry = EllipseGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\r\n        scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\r\n        scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\r\n        scratchOptions.height = ellipseGeometry._height;\r\n        scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n        scratchOptions.granularity = ellipseGeometry._granularity;\r\n        scratchOptions.vertexFormat = VertexFormat.clone(ellipseGeometry._vertexFormat, scratchOptions.vertexFormat);\r\n        scratchOptions.stRotation = ellipseGeometry._stRotation;\r\n        scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n            return new CircleGeometry(scratchOptions);\r\n        }\r\n\r\n        scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n        scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n        result._ellipseGeometry = new EllipseGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CircleGeometry} circleGeometry A description of the circle.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CircleGeometry.createGeometry = function(circleGeometry) {\r\n        return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CircleGeometry.createShadowVolume = function(circleGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = circleGeometry._ellipseGeometry._granularity;\r\n        var ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new CircleGeometry({\r\n            center : circleGeometry._ellipseGeometry._center,\r\n            radius : circleGeometry._ellipseGeometry._semiMajorAxis,\r\n            ellipsoid : ellipsoid,\r\n            stRotation : circleGeometry._ellipseGeometry._stRotation,\r\n            granularity : granularity,\r\n            extrudedHeight : minHeight,\r\n            height : maxHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume: true\r\n        });\r\n    };\r\n\r\n    defineProperties(CircleGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                return this._ellipseGeometry.rectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                return this._ellipseGeometry.textureCoordinateRotationPoints;\r\n            }\r\n        }\r\n    });\r\n\r\n    return CircleGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CircleGeometry.js\n// module id = 266\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './EllipseOutlineGeometry',\r\n        './Ellipsoid'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        EllipseOutlineGeometry,\r\n        Ellipsoid) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A description of the outline of a circle on the ellipsoid.\r\n     *\r\n     * @alias CircleOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n     * @param {Number} options.radius The radius in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n     * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n     * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\r\n     *\r\n     * @exception {DeveloperError} radius must be greater than zero.\r\n     * @exception {DeveloperError} granularity must be greater than zero.\r\n     *\r\n     * @see CircleOutlineGeometry.createGeometry\r\n     * @see Packable\r\n     *\r\n     * @example\r\n     * // Create a circle.\r\n     * var circle = new Cesium.CircleOutlineGeometry({\r\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n     *   radius : 100000.0\r\n     * });\r\n     * var geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\r\n     */\r\n    function CircleOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var radius = options.radius;\r\n\r\n        \r\n\r\n        var ellipseGeometryOptions = {\r\n            center : options.center,\r\n            semiMajorAxis : radius,\r\n            semiMinorAxis : radius,\r\n            ellipsoid : options.ellipsoid,\r\n            height : options.height,\r\n            extrudedHeight : options.extrudedHeight,\r\n            granularity : options.granularity,\r\n            numberOfVerticalLines : options.numberOfVerticalLines\r\n        };\r\n        this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\r\n        this._workerName = 'createCircleOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    CircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CircleOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CircleOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n        return EllipseOutlineGeometry.pack(value._ellipseGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipseGeometry = new EllipseOutlineGeometry({\r\n        center : new Cartesian3(),\r\n        semiMajorAxis : 1.0,\r\n        semiMinorAxis : 1.0\r\n    });\r\n    var scratchOptions = {\r\n        center : new Cartesian3(),\r\n        radius : undefined,\r\n        ellipsoid : Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n        height : undefined,\r\n        extrudedHeight : undefined,\r\n        granularity : undefined,\r\n        numberOfVerticalLines : undefined,\r\n        semiMajorAxis : undefined,\r\n        semiMinorAxis : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CircleOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\r\n     */\r\n    CircleOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipseGeometry = EllipseOutlineGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\r\n        scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\r\n        scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\r\n        scratchOptions.height = ellipseGeometry._height;\r\n        scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n        scratchOptions.granularity = ellipseGeometry._granularity;\r\n        scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n            return new CircleOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n        scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n        result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CircleOutlineGeometry.createGeometry = function(circleGeometry) {\r\n        return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n    };\r\n\r\n    return CircleOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CircleOutlineGeometry.js\n// module id = 267\n// module chunks = 0","/*global define*/\r\ndefine([\r\n        './arrayRemoveDuplicates',\r\n        './BoundingRectangle',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './CoplanarPolygonGeometryLibrary',\r\n        './defaultValue',\r\n        './defined',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryInstance',\r\n        './GeometryPipeline',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './Matrix3',\r\n        './PolygonGeometryLibrary',\r\n        './PolygonPipeline',\r\n        './PrimitiveType',\r\n        './Quaternion',\r\n        './VertexFormat'\r\n    ], function(\r\n        arrayRemoveDuplicates,\r\n        BoundingRectangle,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        CoplanarPolygonGeometryLibrary,\r\n        defaultValue,\r\n        defined,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryInstance,\r\n        GeometryPipeline,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        Matrix3,\r\n        PolygonGeometryLibrary,\r\n        PolygonPipeline,\r\n        PrimitiveType,\r\n        Quaternion,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var scratchPosition = new Cartesian3();\r\n    var scratchBR = new BoundingRectangle();\r\n    var stScratch = new Cartesian2();\r\n    var textureCoordinatesOrigin = new Cartesian2();\r\n    var scratchNormal = new Cartesian3();\r\n    var scratchTangent = new Cartesian3();\r\n    var scratchBitangent = new Cartesian3();\r\n    var centerScratch = new Cartesian3();\r\n    var axis1Scratch = new Cartesian3();\r\n    var axis2Scratch = new Cartesian3();\r\n    var quaternionScratch = new Quaternion();\r\n    var textureMatrixScratch = new Matrix3();\r\n    var tangentRotationScratch = new Matrix3();\r\n    var surfaceNormalScratch = new Cartesian3();\r\n\r\n    function createGeometryFromPolygon(polygon, vertexFormat, boundingRectangle, stRotation, projectPointTo2D, normal, tangent, bitangent) {\r\n        var positions = polygon.positions;\r\n        var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\r\n\r\n        /* If polygon is completely unrenderable, just use the first three vertices */\r\n        if (indices.length < 3) {\r\n            indices = [0, 1, 2];\r\n        }\r\n\r\n        var newIndices = IndexDatatype.createTypedArray(positions.length, indices.length);\r\n        newIndices.set(indices);\r\n\r\n        var textureMatrix = textureMatrixScratch;\r\n        if (stRotation !== 0.0) {\r\n            var rotation = Quaternion.fromAxisAngle(normal, stRotation, quaternionScratch);\r\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n            if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                rotation = Quaternion.fromAxisAngle(normal, -stRotation, quaternionScratch);\r\n                var tangentRotation = Matrix3.fromQuaternion(rotation, tangentRotationScratch);\r\n\r\n                tangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotation, tangent, tangent), tangent);\r\n                if (vertexFormat.bitangent) {\r\n                    bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                }\r\n            }\r\n        } else {\r\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n        }\r\n\r\n        var stOrigin = textureCoordinatesOrigin;\r\n        if (vertexFormat.st) {\r\n            stOrigin.x = boundingRectangle.x;\r\n            stOrigin.y = boundingRectangle.y;\r\n        }\r\n\r\n        var length = positions.length;\r\n        var size = length * 3;\r\n        var flatPositions = new Float64Array(size);\r\n        var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n        var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n        var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\r\n        var textureCoordinates = vertexFormat.st ? new Float32Array(length * 2) : undefined;\r\n\r\n        var positionIndex = 0;\r\n        var normalIndex = 0;\r\n        var bitangentIndex = 0;\r\n        var tangentIndex = 0;\r\n        var stIndex = 0;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var position = positions[i];\r\n            flatPositions[positionIndex++] = position.x;\r\n            flatPositions[positionIndex++] = position.y;\r\n            flatPositions[positionIndex++] = position.z;\r\n\r\n            if (vertexFormat.st) {\r\n                var p = Matrix3.multiplyByVector(textureMatrix, position, scratchPosition);\r\n                var st = projectPointTo2D(p, stScratch);\r\n                Cartesian2.subtract(st, stOrigin, st);\r\n\r\n                var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\r\n                var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\r\n                textureCoordinates[stIndex++] = stx;\r\n                textureCoordinates[stIndex++] = sty;\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                normals[normalIndex++] = normal.x;\r\n                normals[normalIndex++] = normal.y;\r\n                normals[normalIndex++] = normal.z;\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                tangents[tangentIndex++] = tangent.x;\r\n                tangents[tangentIndex++] = tangent.y;\r\n                tangents[tangentIndex++] = tangent.z;\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                bitangents[bitangentIndex++] = bitangent.x;\r\n                bitangents[bitangentIndex++] = bitangent.y;\r\n                bitangents[bitangentIndex++] = bitangent.z;\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : flatPositions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : newIndices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n    }\r\n\r\n    /**\r\n     * A description of a polygon composed of arbitrary coplanar positions.\r\n     *\r\n     * @alias CoplanarPolygonGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     *\r\n     * @example\r\n     * var polygon = new Cesium.CoplanarPolygonGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n     *      -90.0, 30.0, 0.0,\r\n     *      -90.0, 30.0, 1000.0,\r\n     *      -80.0, 30.0, 1000.0,\r\n     *      -80.0, 30.0, 0.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.CoplanarPolygonGeometry.createGeometry(polygon);\r\n     *\r\n     * @see CoplanarPolygonGeometry.createGeometry\r\n     */\r\n    function CoplanarPolygonGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        \r\n\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._polygonHierarchy = polygonHierarchy;\r\n        this._stRotation = defaultValue(options.stRotation, 0.0);\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._workerName = 'createCoplanarPolygonGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + VertexFormat.packedLength + Ellipsoid.packedLength + 2;\r\n    }\r\n\r\n    /**\r\n     * A description of a coplanar polygon from an array of positions.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @returns {CoplanarPolygonGeometry}\r\n     *\r\n     * @example\r\n     * // create a polygon from points\r\n     * var polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     -72.0, 40.0,\r\n     *     -70.0, 35.0,\r\n     *     -75.0, 30.0,\r\n     *     -70.0, 30.0,\r\n     *     -68.0, 40.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n     *\r\n     * @see PolygonGeometry#createGeometry\r\n     */\r\n    CoplanarPolygonGeometry.fromPositions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        \r\n\r\n        var newOptions = {\r\n            polygonHierarchy : {\r\n                positions : options.positions\r\n            },\r\n            vertexFormat : options.vertexFormat,\r\n            stRotation : options.stRotation,\r\n            ellipsoid : options.ellipsoid\r\n        };\r\n        return new CoplanarPolygonGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CoplanarPolygonGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CoplanarPolygonGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._stRotation;\r\n        array[startingIndex] = value.packedLength;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        polygonHierarchy : {}\r\n    };\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\r\n     * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\r\n     */\r\n    CoplanarPolygonGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n        startingIndex = polygonHierarchy.startingIndex;\r\n        delete polygonHierarchy.startingIndex;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var stRotation = array[startingIndex++];\r\n        var packedLength = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            result = new CoplanarPolygonGeometry(scratchOptions);\r\n        }\r\n\r\n        result._polygonHierarchy = polygonHierarchy;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._stRotation = stRotation;\r\n        result.packedLength = packedLength;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CoplanarPolygonGeometry.createGeometry = function(polygonGeometry) {\r\n        var vertexFormat = polygonGeometry._vertexFormat;\r\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n        var stRotation = polygonGeometry._stRotation;\r\n\r\n        var outerPositions = polygonHierarchy.positions;\r\n        outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\r\n        if (outerPositions.length < 3) {\r\n            return;\r\n        }\r\n\r\n        var normal = scratchNormal;\r\n        var tangent = scratchTangent;\r\n        var bitangent = scratchBitangent;\r\n        var axis1 = axis1Scratch;\r\n        var axis2 = axis2Scratch;\r\n\r\n        var validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(outerPositions, centerScratch, axis1, axis2);\r\n        if (!validGeometry) {\r\n            return undefined;\r\n        }\r\n\r\n        normal = Cartesian3.cross(axis1, axis2, normal);\r\n        normal = Cartesian3.normalize(normal, normal);\r\n\r\n        if (!Cartesian3.equalsEpsilon(centerScratch, Cartesian3.ZERO, CesiumMath.EPSILON6)) {\r\n            var surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(centerScratch, surfaceNormalScratch);\r\n            if (Cartesian3.dot(normal, surfaceNormal) < 0) {\r\n                normal = Cartesian3.negate(normal, normal);\r\n                axis1 = Cartesian3.negate(axis1, axis1);\r\n            }\r\n        }\r\n\r\n        var projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(centerScratch, axis1, axis2);\r\n        var projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(centerScratch, axis1, axis2);\r\n\r\n        if (vertexFormat.tangent) {\r\n            tangent = Cartesian3.clone(axis1, tangent);\r\n        }\r\n        if (vertexFormat.bitangent) {\r\n            bitangent = Cartesian3.clone(axis2, bitangent);\r\n        }\r\n\r\n        var results = PolygonGeometryLibrary.polygonsFromHierarchy(polygonHierarchy, projectPoints, false);\r\n        var hierarchy = results.hierarchy;\r\n        var polygons = results.polygons;\r\n\r\n        if (hierarchy.length === 0) {\r\n            return;\r\n        }\r\n        outerPositions = hierarchy[0].outerRing;\r\n\r\n        var boundingSphere = BoundingSphere.fromPoints(outerPositions);\r\n        var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(normal, projectPoint, outerPositions, stRotation, scratchBR);\r\n\r\n        var geometries = [];\r\n        for (var i = 0; i < polygons.length; i++) {\r\n            var geometryInstance = new GeometryInstance({\r\n                geometry : createGeometryFromPolygon(polygons[i], vertexFormat, boundingRectangle, stRotation, projectPoint, normal, tangent, bitangent)\r\n            });\r\n\r\n            geometries.push(geometryInstance);\r\n        }\r\n\r\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n        geometry.attributes.position.values = new Float64Array(geometry.attributes.position.values);\r\n        geometry.indices = IndexDatatype.createTypedArray(geometry.attributes.position.values.length / 3, geometry.indices);\r\n\r\n        var attributes = geometry.attributes;\r\n        if (!vertexFormat.position) {\r\n            delete attributes.position;\r\n        }\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere\r\n        });\r\n    };\r\n\r\n    return CoplanarPolygonGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonGeometry.js\n// module id = 268\n// module chunks = 0","define([], function() {\r\n    'use strict';\r\n\r\nfunction earcut(data, holeIndices, dim) {\r\n\r\n    dim = dim || 2;\r\n\r\n    var hasHoles = holeIndices && holeIndices.length,\r\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\r\n        outerNode = linkedList(data, 0, outerLen, dim, true),\r\n        triangles = [];\r\n\r\n    if (!outerNode) return triangles;\r\n\r\n    var minX, minY, maxX, maxY, x, y, size;\r\n\r\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\r\n\r\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n    if (data.length > 80 * dim) {\r\n        minX = maxX = data[0];\r\n        minY = maxY = data[1];\r\n\r\n        for (var i = dim; i < outerLen; i += dim) {\r\n            x = data[i];\r\n            y = data[i + 1];\r\n            if (x < minX) minX = x;\r\n            if (y < minY) minY = y;\r\n            if (x > maxX) maxX = x;\r\n            if (y > maxY) maxY = y;\r\n        }\r\n\r\n        // minX, minY and size are later used to transform coords into integers for z-order calculation\r\n        size = Math.max(maxX - minX, maxY - minY);\r\n    }\r\n\r\n    earcutLinked(outerNode, triangles, dim, minX, minY, size);\r\n\r\n    return triangles;\r\n}\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\nfunction linkedList(data, start, end, dim, clockwise) {\r\n    var i, last;\r\n\r\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\r\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    } else {\r\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    }\r\n\r\n    if (last && equals(last, last.next)) {\r\n        removeNode(last);\r\n        last = last.next;\r\n    }\r\n\r\n    return last;\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\nfunction filterPoints(start, end) {\r\n    if (!start) return start;\r\n    if (!end) end = start;\r\n\r\n    var p = start,\r\n        again;\r\n    do {\r\n        again = false;\r\n\r\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\r\n            removeNode(p);\r\n            p = end = p.prev;\r\n            if (p === p.next) return null;\r\n            again = true;\r\n\r\n        } else {\r\n            p = p.next;\r\n        }\r\n    } while (again || p !== end);\r\n\r\n    return end;\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\nfunction earcutLinked(ear, triangles, dim, minX, minY, size, pass) {\r\n    if (!ear) return;\r\n\r\n    // interlink polygon nodes in z-order\r\n    if (!pass && size) indexCurve(ear, minX, minY, size);\r\n\r\n    var stop = ear,\r\n        prev, next;\r\n\r\n    // iterate through ears, slicing them one by one\r\n    while (ear.prev !== ear.next) {\r\n        prev = ear.prev;\r\n        next = ear.next;\r\n\r\n        if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {\r\n            // cut off the triangle\r\n            triangles.push(prev.i / dim);\r\n            triangles.push(ear.i / dim);\r\n            triangles.push(next.i / dim);\r\n\r\n            removeNode(ear);\r\n\r\n            // skipping the next vertice leads to less sliver triangles\r\n            ear = next.next;\r\n            stop = next.next;\r\n\r\n            continue;\r\n        }\r\n\r\n        ear = next;\r\n\r\n        // if we looped through the whole remaining polygon and can't find any more ears\r\n        if (ear === stop) {\r\n            // try filtering points and slicing again\r\n            if (!pass) {\r\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);\r\n\r\n            // if this didn't work, try curing all small self-intersections locally\r\n            } else if (pass === 1) {\r\n                ear = cureLocalIntersections(ear, triangles, dim);\r\n                earcutLinked(ear, triangles, dim, minX, minY, size, 2);\r\n\r\n            // as a last resort, try splitting the remaining polygon into two\r\n            } else if (pass === 2) {\r\n                splitEarcut(ear, triangles, dim, minX, minY, size);\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\nfunction isEar(ear) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    // now make sure we don't have other points inside the potential ear\r\n    var p = ear.next.next;\r\n\r\n    while (p !== ear.prev) {\r\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.next;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction isEarHashed(ear, minX, minY, size) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\r\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\r\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\r\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\r\n\r\n    // z-order range for the current triangle bbox;\r\n    var minZ = zOrder(minTX, minTY, minX, minY, size),\r\n        maxZ = zOrder(maxTX, maxTY, minX, minY, size);\r\n\r\n    // first look for points inside the triangle in increasing z-order\r\n    var p = ear.nextZ;\r\n\r\n    while (p && p.z <= maxZ) {\r\n        if (p !== ear.prev && p !== ear.next &&\r\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.nextZ;\r\n    }\r\n\r\n    // then look for points in decreasing z-order\r\n    p = ear.prevZ;\r\n\r\n    while (p && p.z >= minZ) {\r\n        if (p !== ear.prev && p !== ear.next &&\r\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.prevZ;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\nfunction cureLocalIntersections(start, triangles, dim) {\r\n    var p = start;\r\n    do {\r\n        var a = p.prev,\r\n            b = p.next.next;\r\n\r\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\r\n\r\n            triangles.push(a.i / dim);\r\n            triangles.push(p.i / dim);\r\n            triangles.push(b.i / dim);\r\n\r\n            // remove two nodes involved\r\n            removeNode(p);\r\n            removeNode(p.next);\r\n\r\n            p = start = b;\r\n        }\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return p;\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\nfunction splitEarcut(start, triangles, dim, minX, minY, size) {\r\n    // look for a valid diagonal that divides the polygon into two\r\n    var a = start;\r\n    do {\r\n        var b = a.next.next;\r\n        while (b !== a.prev) {\r\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\r\n                // split the polygon in two by the diagonal\r\n                var c = splitPolygon(a, b);\r\n\r\n                // filter colinear points around the cuts\r\n                a = filterPoints(a, a.next);\r\n                c = filterPoints(c, c.next);\r\n\r\n                // run earcut on each half\r\n                earcutLinked(a, triangles, dim, minX, minY, size);\r\n                earcutLinked(c, triangles, dim, minX, minY, size);\r\n                return;\r\n            }\r\n            b = b.next;\r\n        }\r\n        a = a.next;\r\n    } while (a !== start);\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\r\n    var queue = [],\r\n        i, len, start, end, list;\r\n\r\n    for (i = 0, len = holeIndices.length; i < len; i++) {\r\n        start = holeIndices[i] * dim;\r\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n        list = linkedList(data, start, end, dim, false);\r\n        if (list === list.next) list.steiner = true;\r\n        queue.push(getLeftmost(list));\r\n    }\r\n\r\n    queue.sort(compareX);\r\n\r\n    // process holes from left to right\r\n    for (i = 0; i < queue.length; i++) {\r\n        eliminateHole(queue[i], outerNode);\r\n        outerNode = filterPoints(outerNode, outerNode.next);\r\n    }\r\n\r\n    return outerNode;\r\n}\r\n\r\nfunction compareX(a, b) {\r\n    return a.x - b.x;\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\nfunction eliminateHole(hole, outerNode) {\r\n    outerNode = findHoleBridge(hole, outerNode);\r\n    if (outerNode) {\r\n        var b = splitPolygon(outerNode, hole);\r\n        filterPoints(b, b.next);\r\n    }\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\nfunction findHoleBridge(hole, outerNode) {\r\n    var p = outerNode,\r\n        hx = hole.x,\r\n        hy = hole.y,\r\n        qx = -Infinity,\r\n        m;\r\n\r\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n    do {\r\n        if (hy <= p.y && hy >= p.next.y) {\r\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\r\n            if (x <= hx && x > qx) {\r\n                qx = x;\r\n                if (x === hx) {\r\n                    if (hy === p.y) return p;\r\n                    if (hy === p.next.y) return p.next;\r\n                }\r\n                m = p.x < p.next.x ? p : p.next;\r\n            }\r\n        }\r\n        p = p.next;\r\n    } while (p !== outerNode);\r\n\r\n    if (!m) return null;\r\n\r\n    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\r\n\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    var stop = m,\r\n        mx = m.x,\r\n        my = m.y,\r\n        tanMin = Infinity,\r\n        tan;\r\n\r\n    p = m.next;\r\n\r\n    while (p !== stop) {\r\n        if (hx >= p.x && p.x >= mx &&\r\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\r\n\r\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n\r\n            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {\r\n                m = p;\r\n                tanMin = tan;\r\n            }\r\n        }\r\n\r\n        p = p.next;\r\n    }\r\n\r\n    return m;\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\nfunction indexCurve(start, minX, minY, size) {\r\n    var p = start;\r\n    do {\r\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);\r\n        p.prevZ = p.prev;\r\n        p.nextZ = p.next;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    p.prevZ.nextZ = null;\r\n    p.prevZ = null;\r\n\r\n    sortLinked(p);\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\nfunction sortLinked(list) {\r\n    var i, p, q, e, tail, numMerges, pSize, qSize,\r\n        inSize = 1;\r\n\r\n    do {\r\n        p = list;\r\n        list = null;\r\n        tail = null;\r\n        numMerges = 0;\r\n\r\n        while (p) {\r\n            numMerges++;\r\n            q = p;\r\n            pSize = 0;\r\n            for (i = 0; i < inSize; i++) {\r\n                pSize++;\r\n                q = q.nextZ;\r\n                if (!q) break;\r\n            }\r\n\r\n            qSize = inSize;\r\n\r\n            while (pSize > 0 || (qSize > 0 && q)) {\r\n\r\n                if (pSize === 0) {\r\n                    e = q;\r\n                    q = q.nextZ;\r\n                    qSize--;\r\n                } else if (qSize === 0 || !q) {\r\n                    e = p;\r\n                    p = p.nextZ;\r\n                    pSize--;\r\n                } else if (p.z <= q.z) {\r\n                    e = p;\r\n                    p = p.nextZ;\r\n                    pSize--;\r\n                } else {\r\n                    e = q;\r\n                    q = q.nextZ;\r\n                    qSize--;\r\n                }\r\n\r\n                if (tail) tail.nextZ = e;\r\n                else list = e;\r\n\r\n                e.prevZ = tail;\r\n                tail = e;\r\n            }\r\n\r\n            p = q;\r\n        }\r\n\r\n        tail.nextZ = null;\r\n        inSize *= 2;\r\n\r\n    } while (numMerges > 1);\r\n\r\n    return list;\r\n}\r\n\r\n// z-order of a point given coords and size of the data bounding box\r\nfunction zOrder(x, y, minX, minY, size) {\r\n    // coords are transformed into non-negative 15-bit integer range\r\n    x = 32767 * (x - minX) / size;\r\n    y = 32767 * (y - minY) / size;\r\n\r\n    x = (x | (x << 8)) & 0x00FF00FF;\r\n    x = (x | (x << 4)) & 0x0F0F0F0F;\r\n    x = (x | (x << 2)) & 0x33333333;\r\n    x = (x | (x << 1)) & 0x55555555;\r\n\r\n    y = (y | (y << 8)) & 0x00FF00FF;\r\n    y = (y | (y << 4)) & 0x0F0F0F0F;\r\n    y = (y | (y << 2)) & 0x33333333;\r\n    y = (y | (y << 1)) & 0x55555555;\r\n\r\n    return x | (y << 1);\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\nfunction getLeftmost(start) {\r\n    var p = start,\r\n        leftmost = start;\r\n    do {\r\n        if (p.x < leftmost.x) leftmost = p;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return leftmost;\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\r\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\r\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\r\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\nfunction isValidDiagonal(a, b) {\r\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&\r\n           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\r\n}\r\n\r\n// signed area of a triangle\r\nfunction area(p, q, r) {\r\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n}\r\n\r\n// check if two points are equal\r\nfunction equals(p1, p2) {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n// check if two segments intersect\r\nfunction intersects(p1, q1, p2, q2) {\r\n    if ((equals(p1, q1) && equals(p2, q2)) ||\r\n        (equals(p1, q2) && equals(p2, q1))) return true;\r\n    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&\r\n           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\nfunction intersectsPolygon(a, b) {\r\n    var p = a;\r\n    do {\r\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n                intersects(p, p.next, a, b)) return true;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return false;\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\nfunction locallyInside(a, b) {\r\n    return area(a.prev, a, a.next) < 0 ?\r\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\r\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\nfunction middleInside(a, b) {\r\n    var p = a,\r\n        inside = false,\r\n        px = (a.x + b.x) / 2,\r\n        py = (a.y + b.y) / 2;\r\n    do {\r\n        if (((p.y > py) !== (p.next.y > py)) && (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\r\n            inside = !inside;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return inside;\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\nfunction splitPolygon(a, b) {\r\n    var a2 = new Node(a.i, a.x, a.y),\r\n        b2 = new Node(b.i, b.x, b.y),\r\n        an = a.next,\r\n        bp = b.prev;\r\n\r\n    a.next = b;\r\n    b.prev = a;\r\n\r\n    a2.next = an;\r\n    an.prev = a2;\r\n\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n\r\n    return b2;\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\nfunction insertNode(i, x, y, last) {\r\n    var p = new Node(i, x, y);\r\n\r\n    if (!last) {\r\n        p.prev = p;\r\n        p.next = p;\r\n\r\n    } else {\r\n        p.next = last.next;\r\n        p.prev = last;\r\n        last.next.prev = p;\r\n        last.next = p;\r\n    }\r\n    return p;\r\n}\r\n\r\nfunction removeNode(p) {\r\n    p.next.prev = p.prev;\r\n    p.prev.next = p.next;\r\n\r\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\r\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\r\n}\r\n\r\nfunction Node(i, x, y) {\r\n    // vertice index in coordinates array\r\n    this.i = i;\r\n\r\n    // vertex coordinates\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    // previous and next vertice nodes in a polygon ring\r\n    this.prev = null;\r\n    this.next = null;\r\n\r\n    // z-order curve value\r\n    this.z = null;\r\n\r\n    // previous and next nodes in z-order\r\n    this.prevZ = null;\r\n    this.nextZ = null;\r\n\r\n    // indicates whether this is a steiner point\r\n    this.steiner = false;\r\n}\r\n\r\n// return a percentage difference between the polygon area and its triangulation area;\r\n// used to verify correctness of triangulation\r\nearcut.deviation = function (data, holeIndices, dim, triangles) {\r\n    var hasHoles = holeIndices && holeIndices.length;\r\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n\r\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\r\n    if (hasHoles) {\r\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\r\n            var start = holeIndices[i] * dim;\r\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\r\n        }\r\n    }\r\n\r\n    var trianglesArea = 0;\r\n    for (i = 0; i < triangles.length; i += 3) {\r\n        var a = triangles[i] * dim;\r\n        var b = triangles[i + 1] * dim;\r\n        var c = triangles[i + 2] * dim;\r\n        trianglesArea += Math.abs(\r\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\r\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n    }\r\n\r\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\r\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\r\n};\r\n\r\nfunction signedArea(data, start, end, dim) {\r\n    var sum = 0;\r\n    for (var i = start, j = end - dim; i < end; i += dim) {\r\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\r\n        j = i;\r\n    }\r\n    return sum;\r\n}\r\n\r\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\r\nearcut.flatten = function (data) {\r\n    var dim = data[0][0].length,\r\n        result = {vertices: [], holes: [], dimensions: dim},\r\n        holeIndex = 0;\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n        for (var j = 0; j < data[i].length; j++) {\r\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\r\n        }\r\n        if (i > 0) {\r\n            holeIndex += data[i - 1].length;\r\n            result.holes.push(holeIndex);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nreturn earcut;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/earcut-2.1.1.js\n// module id = 269\n// module chunks = 0","/*global define*/\r\ndefine([\r\n    './arrayRemoveDuplicates',\r\n    './BoundingSphere',\r\n    './Cartesian3',\r\n    './Check',\r\n    './ComponentDatatype',\r\n    './CoplanarPolygonGeometryLibrary',\r\n    './defaultValue',\r\n    './defined',\r\n    './Geometry',\r\n    './GeometryAttribute',\r\n    './GeometryAttributes',\r\n    './GeometryInstance',\r\n    './GeometryPipeline',\r\n    './IndexDatatype',\r\n    './PolygonGeometryLibrary',\r\n    './PolygonPipeline',\r\n    './PrimitiveType'\r\n], function(\r\n    arrayRemoveDuplicates,\r\n    BoundingSphere,\r\n    Cartesian3,\r\n    Check,\r\n    ComponentDatatype,\r\n    CoplanarPolygonGeometryLibrary,\r\n    defaultValue,\r\n    defined,\r\n    Geometry,\r\n    GeometryAttribute,\r\n    GeometryAttributes,\r\n    GeometryInstance,\r\n    GeometryPipeline,\r\n    IndexDatatype,\r\n    PolygonGeometryLibrary,\r\n    PolygonPipeline,\r\n    PrimitiveType) {\r\n    'use strict';\r\n\r\n    function createGeometryFromPositions(positions){\r\n        var length = positions.length;\r\n        var flatPositions = new Float64Array(length * 3);\r\n        var indices = IndexDatatype.createTypedArray(length, length * 2);\r\n\r\n        var positionIndex = 0;\r\n        var index = 0;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var position = positions[i];\r\n            flatPositions[positionIndex++] = position.x;\r\n            flatPositions[positionIndex++] = position.y;\r\n            flatPositions[positionIndex++] = position.z;\r\n\r\n            indices[index++] = i;\r\n            indices[index++] = (i + 1) % length;\r\n        }\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position: new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : flatPositions\r\n            })\r\n        });\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES\r\n        });\r\n    }\r\n\r\n    /**\r\n     * A description of the outline of a polygon composed of arbitrary coplanar positions.\r\n     *\r\n     * @alias CoplanarPolygonOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     *\r\n     * @see CoplanarPolygonOutlineGeometry.createGeometry\r\n     *\r\n     * @example\r\n     * var polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n     *      -90.0, 30.0, 0.0,\r\n     *      -90.0, 30.0, 1000.0,\r\n     *      -80.0, 30.0, 1000.0,\r\n     *      -80.0, 30.0, 0.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\r\n     */\r\n    function CoplanarPolygonOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        \r\n\r\n        this._polygonHierarchy = polygonHierarchy;\r\n        this._workerName = 'createCoplanarPolygonOutlineGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + 1;\r\n    }\r\n\r\n    /**\r\n     * A description of a coplanar polygon outline from an array of positions.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n     * @returns {CoplanarPolygonOutlineGeometry}\r\n     */\r\n    CoplanarPolygonOutlineGeometry.fromPositions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        \r\n\r\n        var newOptions = {\r\n            polygonHierarchy : {\r\n                positions : options.positions\r\n            }\r\n        };\r\n        return new CoplanarPolygonOutlineGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CoplanarPolygonOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n        array[startingIndex] = value.packedLength;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchOptions = {\r\n        polygonHierarchy : {}\r\n    };\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\r\n     */\r\n    CoplanarPolygonOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n        startingIndex = polygonHierarchy.startingIndex;\r\n        delete polygonHierarchy.startingIndex;\r\n        var packedLength = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            result = new CoplanarPolygonOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._polygonHierarchy = polygonHierarchy;\r\n        result.packedLength = packedLength;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CoplanarPolygonOutlineGeometry.createGeometry = function(polygonGeometry) {\r\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n\r\n        var outerPositions = polygonHierarchy.positions;\r\n        outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\r\n        if (outerPositions.length < 3) {\r\n            return;\r\n        }\r\n        var isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\r\n        if (!isValid) {\r\n            return undefined;\r\n        }\r\n\r\n        var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, false);\r\n\r\n        if (polygons.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var geometries = [];\r\n\r\n        for (var i = 0; i < polygons.length; i++) {\r\n            var geometryInstance = new GeometryInstance({\r\n                geometry : createGeometryFromPositions(polygons[i])\r\n            });\r\n            geometries.push(geometryInstance);\r\n        }\r\n\r\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n        var boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere\r\n        });\r\n    };\r\n\r\n    return CoplanarPolygonOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonOutlineGeometry.js\n// module id = 270\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './arrayRemoveDuplicates',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './CornerType',\r\n        './CorridorGeometryLibrary',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PolygonPipeline',\r\n        './PrimitiveType',\r\n        './Rectangle',\r\n        './VertexFormat'\r\n    ], function(\r\n        arrayFill,\r\n        arrayRemoveDuplicates,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        ComponentDatatype,\r\n        CornerType,\r\n        CorridorGeometryLibrary,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PolygonPipeline,\r\n        PrimitiveType,\r\n        Rectangle,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var cartesian1 = new Cartesian3();\r\n    var cartesian2 = new Cartesian3();\r\n    var cartesian3 = new Cartesian3();\r\n    var cartesian4 = new Cartesian3();\r\n    var cartesian5 = new Cartesian3();\r\n    var cartesian6 = new Cartesian3();\r\n\r\n    var scratch1 = new Cartesian3();\r\n    var scratch2 = new Cartesian3();\r\n\r\n    function scaleToSurface(positions, ellipsoid) {\r\n        for (var i = 0; i < positions.length; i++) {\r\n            positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\r\n        }\r\n        return positions;\r\n    }\r\n\r\n    function addNormals(attr, normal, left, front, back, vertexFormat) {\r\n        var normals = attr.normals;\r\n        var tangents = attr.tangents;\r\n        var bitangents = attr.bitangents;\r\n        var forward = Cartesian3.normalize(Cartesian3.cross(left, normal, scratch1), scratch1);\r\n        if (vertexFormat.normal) {\r\n            CorridorGeometryLibrary.addAttribute(normals, normal, front, back);\r\n        }\r\n        if (vertexFormat.tangent) {\r\n            CorridorGeometryLibrary.addAttribute(tangents, forward, front, back);\r\n        }\r\n        if (vertexFormat.bitangent) {\r\n            CorridorGeometryLibrary.addAttribute(bitangents, left, front, back);\r\n        }\r\n    }\r\n\r\n    function combine(computedPositions, vertexFormat, ellipsoid) {\r\n        var positions = computedPositions.positions;\r\n        var corners = computedPositions.corners;\r\n        var endPositions = computedPositions.endPositions;\r\n        var computedLefts = computedPositions.lefts;\r\n        var computedNormals = computedPositions.normals;\r\n        var attributes = new GeometryAttributes();\r\n        var corner;\r\n        var leftCount = 0;\r\n        var rightCount = 0;\r\n        var i;\r\n        var indicesLength = 0;\r\n        var length;\r\n        for (i = 0; i < positions.length; i += 2) {\r\n            length = positions[i].length - 3;\r\n            leftCount += length; //subtracting 3 to account for duplicate points at corners\r\n            indicesLength += length*2;\r\n            rightCount += positions[i + 1].length - 3;\r\n        }\r\n        leftCount += 3; //add back count for end positions\r\n        rightCount += 3;\r\n        for (i = 0; i < corners.length; i++) {\r\n            corner = corners[i];\r\n            var leftSide = corners[i].leftPositions;\r\n            if (defined(leftSide)) {\r\n                length = leftSide.length;\r\n                leftCount += length;\r\n                indicesLength += length;\r\n            } else {\r\n                length = corners[i].rightPositions.length;\r\n                rightCount += length;\r\n                indicesLength += length;\r\n            }\r\n        }\r\n\r\n        var addEndPositions = defined(endPositions);\r\n        var endPositionLength;\r\n        if (addEndPositions) {\r\n            endPositionLength = endPositions[0].length - 3;\r\n            leftCount += endPositionLength;\r\n            rightCount += endPositionLength;\r\n            endPositionLength /= 3;\r\n            indicesLength += endPositionLength * 6;\r\n        }\r\n        var size = leftCount + rightCount;\r\n        var finalPositions = new Float64Array(size);\r\n        var normals = (vertexFormat.normal) ? new Float32Array(size) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size) : undefined;\r\n        var attr = {\r\n            normals : normals,\r\n            tangents : tangents,\r\n            bitangents : bitangents\r\n        };\r\n        var front = 0;\r\n        var back = size - 1;\r\n        var UL, LL, UR, LR;\r\n        var normal = cartesian1;\r\n        var left = cartesian2;\r\n        var rightPos, leftPos;\r\n        var halfLength = endPositionLength / 2;\r\n\r\n        var indices = IndexDatatype.createTypedArray(size / 3, indicesLength);\r\n        var index = 0;\r\n        if (addEndPositions) { // add rounded end\r\n            leftPos = cartesian3;\r\n            rightPos = cartesian4;\r\n            var firstEndPositions = endPositions[0];\r\n            normal = Cartesian3.fromArray(computedNormals, 0, normal);\r\n            left = Cartesian3.fromArray(computedLefts, 0, left);\r\n            for (i = 0; i < halfLength; i++) {\r\n                leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\r\n                rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\r\n                addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n                LL = front / 3;\r\n                LR = LL + 1;\r\n                UL = (back - 2) / 3;\r\n                UR = UL - 1;\r\n                indices[index++] = UL;\r\n                indices[index++] = LL;\r\n                indices[index++] = UR;\r\n                indices[index++] = UR;\r\n                indices[index++] = LL;\r\n                indices[index++] = LR;\r\n\r\n                front += 3;\r\n                back -= 3;\r\n            }\r\n        }\r\n\r\n        var posIndex = 0;\r\n        var compIndex = 0;\r\n        var rightEdge = positions[posIndex++]; //add first two edges\r\n        var leftEdge = positions[posIndex++];\r\n        finalPositions.set(rightEdge, front);\r\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n\r\n        left = Cartesian3.fromArray(computedLefts, compIndex, left);\r\n        var rightNormal;\r\n        var leftNormal;\r\n        length = leftEdge.length - 3;\r\n        for (i = 0; i < length; i += 3) {\r\n            rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, i, scratch1), scratch1);\r\n            leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length - i, scratch2), scratch2);\r\n            normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\r\n            addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n            LL = front / 3;\r\n            LR = LL + 1;\r\n            UL = (back - 2) / 3;\r\n            UR = UL - 1;\r\n            indices[index++] = UL;\r\n            indices[index++] = LL;\r\n            indices[index++] = UR;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n\r\n            front += 3;\r\n            back -= 3;\r\n        }\r\n\r\n        rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, length, scratch1), scratch1);\r\n        leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length, scratch2), scratch2);\r\n        normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\r\n        compIndex += 3;\r\n        for (i = 0; i < corners.length; i++) {\r\n            var j;\r\n            corner = corners[i];\r\n            var l = corner.leftPositions;\r\n            var r = corner.rightPositions;\r\n            var pivot;\r\n            var start;\r\n            var outsidePoint = cartesian6;\r\n            var previousPoint = cartesian3;\r\n            var nextPoint = cartesian4;\r\n            normal = Cartesian3.fromArray(computedNormals, compIndex, normal);\r\n            if (defined(l)) {\r\n                addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n                back -= 3;\r\n                pivot = LR;\r\n                start = UR;\r\n                for (j = 0; j < l.length / 3; j++) {\r\n                    outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\r\n                    indices[index++] = pivot;\r\n                    indices[index++] = start - j - 1;\r\n                    indices[index++] = start - j;\r\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\r\n                    previousPoint = Cartesian3.fromArray(finalPositions, (start - j - 1) * 3, previousPoint);\r\n                    nextPoint = Cartesian3.fromArray(finalPositions, pivot * 3, nextPoint);\r\n                    left = Cartesian3.normalize(Cartesian3.subtract(previousPoint, nextPoint, left), left);\r\n                    addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n                    back -= 3;\r\n                }\r\n                outsidePoint = Cartesian3.fromArray(finalPositions, pivot * 3, outsidePoint);\r\n                previousPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start) * 3, previousPoint), outsidePoint, previousPoint);\r\n                nextPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start - j) * 3, nextPoint), outsidePoint, nextPoint);\r\n                left = Cartesian3.normalize(Cartesian3.add(previousPoint, nextPoint, left), left);\r\n                addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n                front += 3;\r\n            } else {\r\n                addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n                front += 3;\r\n                pivot = UR;\r\n                start = LR;\r\n                for (j = 0; j < r.length / 3; j++) {\r\n                    outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\r\n                    indices[index++] = pivot;\r\n                    indices[index++] = start + j;\r\n                    indices[index++] = start + j + 1;\r\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\r\n                    previousPoint = Cartesian3.fromArray(finalPositions, pivot * 3, previousPoint);\r\n                    nextPoint = Cartesian3.fromArray(finalPositions, (start + j) * 3, nextPoint);\r\n                    left = Cartesian3.normalize(Cartesian3.subtract(previousPoint, nextPoint, left), left);\r\n                    addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n                    front += 3;\r\n                }\r\n                outsidePoint = Cartesian3.fromArray(finalPositions, pivot * 3, outsidePoint);\r\n                previousPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start + j) * 3, previousPoint), outsidePoint, previousPoint);\r\n                nextPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, start * 3, nextPoint), outsidePoint, nextPoint);\r\n                left = Cartesian3.normalize(Cartesian3.negate(Cartesian3.add(nextPoint, previousPoint, left), left), left);\r\n                addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n                back -= 3;\r\n            }\r\n            rightEdge = positions[posIndex++];\r\n            leftEdge = positions[posIndex++];\r\n            rightEdge.splice(0, 3); //remove duplicate points added by corner\r\n            leftEdge.splice(leftEdge.length - 3, 3);\r\n            finalPositions.set(rightEdge, front);\r\n            finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n            length = leftEdge.length - 3;\r\n\r\n            compIndex += 3;\r\n            left = Cartesian3.fromArray(computedLefts, compIndex, left);\r\n            for (j = 0; j < leftEdge.length; j += 3) {\r\n                rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, j, scratch1), scratch1);\r\n                leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length - j, scratch2), scratch2);\r\n                normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\r\n                addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n                LR = front / 3;\r\n                LL = LR - 1;\r\n                UR = (back - 2) / 3;\r\n                UL = UR + 1;\r\n                indices[index++] = UL;\r\n                indices[index++] = LL;\r\n                indices[index++] = UR;\r\n                indices[index++] = UR;\r\n                indices[index++] = LL;\r\n                indices[index++] = LR;\r\n\r\n                front += 3;\r\n                back -= 3;\r\n            }\r\n            front -= 3;\r\n            back += 3;\r\n        }\r\n        normal = Cartesian3.fromArray(computedNormals, computedNormals.length - 3, normal);\r\n        addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n        if (addEndPositions) { // add rounded end\r\n            front += 3;\r\n            back -= 3;\r\n            leftPos = cartesian3;\r\n            rightPos = cartesian4;\r\n            var lastEndPositions = endPositions[1];\r\n            for (i = 0; i < halfLength; i++) {\r\n                leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\r\n                rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n                addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n                LR = front / 3;\r\n                LL = LR - 1;\r\n                UR = (back - 2) / 3;\r\n                UL = UR + 1;\r\n                indices[index++] = UL;\r\n                indices[index++] = LL;\r\n                indices[index++] = UR;\r\n                indices[index++] = UR;\r\n                indices[index++] = LL;\r\n                indices[index++] = LR;\r\n\r\n                front += 3;\r\n                back -= 3;\r\n            }\r\n        }\r\n\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : finalPositions\r\n        });\r\n\r\n        if (vertexFormat.st) {\r\n            var st = new Float32Array(size / 3 * 2);\r\n            var rightSt;\r\n            var leftSt;\r\n            var stIndex = 0;\r\n            if (addEndPositions) {\r\n                leftCount /= 3;\r\n                rightCount /= 3;\r\n                var theta = Math.PI / (endPositionLength + 1);\r\n                leftSt = 1 / (leftCount - endPositionLength + 1);\r\n                rightSt = 1 / (rightCount - endPositionLength + 1);\r\n                var a;\r\n                var halfEndPos = endPositionLength / 2;\r\n                for (i = halfEndPos + 1; i < endPositionLength + 1; i++) { // lower left rounded end\r\n                    a = CesiumMath.PI_OVER_TWO + theta * i;\r\n                    st[stIndex++] = rightSt * (1 + Math.cos(a));\r\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n                }\r\n                for (i = 1; i < rightCount - endPositionLength + 1; i++) { // bottom edge\r\n                    st[stIndex++] = i * rightSt;\r\n                    st[stIndex++] = 0;\r\n                }\r\n                for (i = endPositionLength; i > halfEndPos; i--) { // lower right rounded end\r\n                    a = CesiumMath.PI_OVER_TWO - i * theta;\r\n                    st[stIndex++] = 1 - rightSt * (1 + Math.cos(a));\r\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n                }\r\n                for (i = halfEndPos; i > 0; i--) { // upper right rounded end\r\n                    a = CesiumMath.PI_OVER_TWO - theta * i;\r\n                    st[stIndex++] = 1 - leftSt * (1 + Math.cos(a));\r\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n                }\r\n                for (i = leftCount - endPositionLength; i > 0; i--) { // top edge\r\n                    st[stIndex++] = i * leftSt;\r\n                    st[stIndex++] = 1;\r\n                }\r\n                for (i = 1; i < halfEndPos + 1; i++) { // upper left rounded end\r\n                    a = CesiumMath.PI_OVER_TWO + theta * i;\r\n                    st[stIndex++] = leftSt * (1 + Math.cos(a));\r\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n                }\r\n            } else {\r\n                leftCount /= 3;\r\n                rightCount /= 3;\r\n                leftSt = 1 / (leftCount - 1);\r\n                rightSt = 1 / (rightCount - 1);\r\n                for (i = 0; i < rightCount; i++) { // bottom edge\r\n                    st[stIndex++] = i * rightSt;\r\n                    st[stIndex++] = 0;\r\n                }\r\n                for (i = leftCount; i > 0; i--) { // top edge\r\n                    st[stIndex++] = (i - 1) * leftSt;\r\n                    st[stIndex++] = 1;\r\n                }\r\n            }\r\n\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : st\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attr.normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attr.tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attr.bitangents\r\n            });\r\n        }\r\n\r\n        return {\r\n            attributes : attributes,\r\n            indices : indices\r\n        };\r\n    }\r\n\r\n    function extrudedAttributes(attributes, vertexFormat) {\r\n        if (!vertexFormat.normal && !vertexFormat.tangent && !vertexFormat.bitangent && !vertexFormat.st) {\r\n            return attributes;\r\n        }\r\n        var positions = attributes.position.values;\r\n        var topNormals;\r\n        var topBitangents;\r\n        if (vertexFormat.normal || vertexFormat.bitangent) {\r\n            topNormals = attributes.normal.values;\r\n            topBitangents = attributes.bitangent.values;\r\n        }\r\n        var size = attributes.position.values.length / 18;\r\n        var threeSize = size * 3;\r\n        var twoSize = size * 2;\r\n        var sixSize = threeSize * 2;\r\n        var i;\r\n        if (vertexFormat.normal || vertexFormat.bitangent || vertexFormat.tangent) {\r\n            var normals = (vertexFormat.normal) ? new Float32Array(threeSize * 6) : undefined;\r\n            var tangents = (vertexFormat.tangent) ? new Float32Array(threeSize * 6) : undefined;\r\n            var bitangents = (vertexFormat.bitangent) ? new Float32Array(threeSize * 6) : undefined;\r\n            var topPosition = cartesian1;\r\n            var bottomPosition = cartesian2;\r\n            var previousPosition = cartesian3;\r\n            var normal = cartesian4;\r\n            var tangent = cartesian5;\r\n            var bitangent = cartesian6;\r\n            var attrIndex = sixSize;\r\n            for (i = 0; i < threeSize; i += 3) {\r\n                var attrIndexOffset = attrIndex + sixSize;\r\n                topPosition      = Cartesian3.fromArray(positions, i, topPosition);\r\n                bottomPosition   = Cartesian3.fromArray(positions, i + threeSize, bottomPosition);\r\n                previousPosition = Cartesian3.fromArray(positions, (i + 3) % threeSize, previousPosition);\r\n                bottomPosition   = Cartesian3.subtract(bottomPosition,   topPosition, bottomPosition);\r\n                previousPosition = Cartesian3.subtract(previousPosition, topPosition, previousPosition);\r\n                normal = Cartesian3.normalize(Cartesian3.cross(bottomPosition, previousPosition, normal), normal);\r\n                if (vertexFormat.normal) {\r\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset);\r\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset + 3);\r\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex);\r\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex + 3);\r\n                }\r\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    bitangent = Cartesian3.fromArray(topNormals, i, bitangent);\r\n                    if (vertexFormat.bitangent) {\r\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndexOffset);\r\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndexOffset + 3);\r\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndex);\r\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndex + 3);\r\n                    }\r\n\r\n                    if (vertexFormat.tangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndexOffset);\r\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndexOffset + 3);\r\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex);\r\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex + 3);\r\n                    }\r\n                }\r\n                attrIndex += 6;\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                normals.set(topNormals); //top\r\n                for (i = 0; i < threeSize; i += 3) { //bottom normals\r\n                    normals[i + threeSize] = -topNormals[i];\r\n                    normals[i + threeSize + 1] = -topNormals[i + 1];\r\n                    normals[i + threeSize + 2] = -topNormals[i + 2];\r\n                }\r\n                attributes.normal.values = normals;\r\n            } else {\r\n                attributes.normal = undefined;\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                bitangents.set(topBitangents); //top\r\n                bitangents.set(topBitangents, threeSize); //bottom\r\n                attributes.bitangent.values = bitangents;\r\n            } else {\r\n                attributes.bitangent = undefined;\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                var topTangents = attributes.tangent.values;\r\n                tangents.set(topTangents); //top\r\n                tangents.set(topTangents, threeSize); //bottom\r\n                attributes.tangent.values = tangents;\r\n            }\r\n        }\r\n        if (vertexFormat.st) {\r\n            var topSt = attributes.st.values;\r\n            var st = new Float32Array(twoSize * 6);\r\n            st.set(topSt); //top\r\n            st.set(topSt, twoSize); //bottom\r\n            var index = twoSize * 2;\r\n\r\n            for ( var j = 0; j < 2; j++) {\r\n                st[index++] = topSt[0];\r\n                st[index++] = topSt[1];\r\n                for (i = 2; i < twoSize; i += 2) {\r\n                    var s = topSt[i];\r\n                    var t = topSt[i + 1];\r\n                    st[index++] = s;\r\n                    st[index++] = t;\r\n                    st[index++] = s;\r\n                    st[index++] = t;\r\n                }\r\n                st[index++] = topSt[0];\r\n                st[index++] = topSt[1];\r\n            }\r\n            attributes.st.values = st;\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    function addWallPositions(positions, index, wallPositions) {\r\n        wallPositions[index++] = positions[0];\r\n        wallPositions[index++] = positions[1];\r\n        wallPositions[index++] = positions[2];\r\n        for ( var i = 3; i < positions.length; i += 3) {\r\n            var x = positions[i];\r\n            var y = positions[i + 1];\r\n            var z = positions[i + 2];\r\n            wallPositions[index++] = x;\r\n            wallPositions[index++] = y;\r\n            wallPositions[index++] = z;\r\n            wallPositions[index++] = x;\r\n            wallPositions[index++] = y;\r\n            wallPositions[index++] = z;\r\n        }\r\n        wallPositions[index++] = positions[0];\r\n        wallPositions[index++] = positions[1];\r\n        wallPositions[index++] = positions[2];\r\n\r\n        return wallPositions;\r\n    }\r\n\r\n    function computePositionsExtruded(params, vertexFormat) {\r\n        var topVertexFormat = new VertexFormat({\r\n            position : vertexFormat.position,\r\n            normal : (vertexFormat.normal || vertexFormat.bitangent || params.shadowVolume),\r\n            tangent : vertexFormat.tangent,\r\n            bitangent : (vertexFormat.normal || vertexFormat.bitangent),\r\n            st : vertexFormat.st\r\n        });\r\n        var ellipsoid = params.ellipsoid;\r\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n        var attr = combine(computedPositions, topVertexFormat, ellipsoid);\r\n        var height = params.height;\r\n        var extrudedHeight = params.extrudedHeight;\r\n        var attributes = attr.attributes;\r\n        var indices = attr.indices;\r\n        var positions = attributes.position.values;\r\n        var length = positions.length;\r\n        var newPositions = new Float64Array(length * 6);\r\n        var extrudedPositions = new Float64Array(length);\r\n        extrudedPositions.set(positions);\r\n        var wallPositions = new Float64Array(length * 4);\r\n\r\n        positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\r\n        wallPositions = addWallPositions(positions, 0, wallPositions);\r\n        extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\r\n        wallPositions = addWallPositions(extrudedPositions, length * 2, wallPositions);\r\n        newPositions.set(positions);\r\n        newPositions.set(extrudedPositions, length);\r\n        newPositions.set(wallPositions, length * 2);\r\n        attributes.position.values = newPositions;\r\n\r\n        attributes = extrudedAttributes(attributes, vertexFormat);\r\n        var i;\r\n        var size = length / 3;\r\n        if (params.shadowVolume) {\r\n            var topNormals = attributes.normal.values;\r\n            length = topNormals.length;\r\n\r\n            var extrudeNormals = new Float32Array(length * 6);\r\n            for (i = 0; i < length; i ++) {\r\n                topNormals[i] = -topNormals[i];\r\n            }\r\n            //only get normals for bottom layer that's going to be pushed down\r\n            extrudeNormals.set(topNormals, length); //bottom face\r\n            extrudeNormals = addWallPositions(topNormals, length*4, extrudeNormals); //bottom wall\r\n            attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : extrudeNormals\r\n            });\r\n            if (!vertexFormat.normal) {\r\n                attributes.normal = undefined;\r\n            }\r\n        }\r\n        if (defined(params.offsetAttribute)) {\r\n            var applyOffset = new Uint8Array(size * 6);\r\n            if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                applyOffset = arrayFill(applyOffset, 1, 0, size); // top face\r\n                applyOffset = arrayFill(applyOffset, 1, size*2, size * 4); // top wall\r\n            } else {\r\n                var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                applyOffset = arrayFill(applyOffset, applyOffsetValue);\r\n            }\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        var iLength = indices.length;\r\n        var twoSize = size + size;\r\n        var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, iLength * 2 + twoSize * 3);\r\n        newIndices.set(indices);\r\n        var index = iLength;\r\n        for (i = 0; i < iLength; i += 3) { // bottom indices\r\n            var v0 = indices[i];\r\n            var v1 = indices[i + 1];\r\n            var v2 = indices[i + 2];\r\n            newIndices[index++] = v2 + size;\r\n            newIndices[index++] = v1 + size;\r\n            newIndices[index++] = v0 + size;\r\n        }\r\n\r\n        var UL, LL, UR, LR;\r\n\r\n        for (i = 0; i < twoSize; i += 2) { //wall indices\r\n            UL = i + twoSize;\r\n            LL = UL + twoSize;\r\n            UR = UL + 1;\r\n            LR = LL + 1;\r\n            newIndices[index++] = UL;\r\n            newIndices[index++] = LL;\r\n            newIndices[index++] = UR;\r\n            newIndices[index++] = UR;\r\n            newIndices[index++] = LL;\r\n            newIndices[index++] = LR;\r\n        }\r\n\r\n        return {\r\n            attributes : attributes,\r\n            indices : newIndices\r\n        };\r\n    }\r\n\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var scratchCartesian2 = new Cartesian3();\r\n    var scratchCartographic = new Cartographic();\r\n\r\n    function computeOffsetPoints(position1, position2, ellipsoid, halfWidth, min, max) {\r\n        // Compute direction of offset the point\r\n        var direction = Cartesian3.subtract(position2, position1, scratchCartesian1);\r\n        Cartesian3.normalize(direction, direction);\r\n        var normal = ellipsoid.geodeticSurfaceNormal(position1, scratchCartesian2);\r\n        var offsetDirection = Cartesian3.cross(direction, normal, scratchCartesian1);\r\n        Cartesian3.multiplyByScalar(offsetDirection, halfWidth, offsetDirection);\r\n\r\n        var minLat = min.latitude;\r\n        var minLon = min.longitude;\r\n        var maxLat = max.latitude;\r\n        var maxLon = max.longitude;\r\n\r\n        // Compute 2 offset points\r\n        Cartesian3.add(position1, offsetDirection, scratchCartesian2);\r\n        ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\r\n\r\n        var lat = scratchCartographic.latitude;\r\n        var lon = scratchCartographic.longitude;\r\n        minLat = Math.min(minLat, lat);\r\n        minLon = Math.min(minLon, lon);\r\n        maxLat = Math.max(maxLat, lat);\r\n        maxLon = Math.max(maxLon, lon);\r\n\r\n        Cartesian3.subtract(position1, offsetDirection, scratchCartesian2);\r\n        ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\r\n\r\n        lat = scratchCartographic.latitude;\r\n        lon = scratchCartographic.longitude;\r\n        minLat = Math.min(minLat, lat);\r\n        minLon = Math.min(minLon, lon);\r\n        maxLat = Math.max(maxLat, lat);\r\n        maxLon = Math.max(maxLon, lon);\r\n\r\n        min.latitude = minLat;\r\n        min.longitude = minLon;\r\n        max.latitude = maxLat;\r\n        max.longitude = maxLon;\r\n    }\r\n\r\n    var scratchCartesianOffset = new Cartesian3();\r\n    var scratchCartesianEnds = new Cartesian3();\r\n    var scratchCartographicMin = new Cartographic();\r\n    var scratchCartographicMax = new Cartographic();\r\n\r\n    function computeRectangle(positions, ellipsoid, width, cornerType, result) {\r\n        positions = scaleToSurface(positions, ellipsoid);\r\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n        var length = cleanPositions.length;\r\n        if (length < 2 || width <= 0) {\r\n            return new Rectangle();\r\n        }\r\n        var halfWidth = width * 0.5;\r\n\r\n        scratchCartographicMin.latitude = Number.POSITIVE_INFINITY;\r\n        scratchCartographicMin.longitude = Number.POSITIVE_INFINITY;\r\n        scratchCartographicMax.latitude = Number.NEGATIVE_INFINITY;\r\n        scratchCartographicMax.longitude = Number.NEGATIVE_INFINITY;\r\n\r\n        var lat, lon;\r\n        if (cornerType === CornerType.ROUNDED) {\r\n            // Compute start cap\r\n            var first = cleanPositions[0];\r\n            Cartesian3.subtract(first, cleanPositions[1], scratchCartesianOffset);\r\n            Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\r\n            Cartesian3.multiplyByScalar(scratchCartesianOffset, halfWidth, scratchCartesianOffset);\r\n            Cartesian3.add(first, scratchCartesianOffset, scratchCartesianEnds);\r\n\r\n            ellipsoid.cartesianToCartographic(scratchCartesianEnds, scratchCartographic);\r\n            lat = scratchCartographic.latitude;\r\n            lon = scratchCartographic.longitude;\r\n            scratchCartographicMin.latitude = Math.min(scratchCartographicMin.latitude, lat);\r\n            scratchCartographicMin.longitude = Math.min(scratchCartographicMin.longitude, lon);\r\n            scratchCartographicMax.latitude = Math.max(scratchCartographicMax.latitude, lat);\r\n            scratchCartographicMax.longitude = Math.max(scratchCartographicMax.longitude, lon);\r\n        }\r\n\r\n        // Compute the rest\r\n        for (var i = 0; i < length-1; ++i) {\r\n            computeOffsetPoints(cleanPositions[i], cleanPositions[i+1], ellipsoid, halfWidth,\r\n                scratchCartographicMin, scratchCartographicMax);\r\n        }\r\n\r\n        // Compute ending point\r\n        var last = cleanPositions[length-1];\r\n        Cartesian3.subtract(last, cleanPositions[length-2], scratchCartesianOffset);\r\n        Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\r\n        Cartesian3.multiplyByScalar(scratchCartesianOffset, halfWidth, scratchCartesianOffset);\r\n        Cartesian3.add(last, scratchCartesianOffset, scratchCartesianEnds);\r\n        computeOffsetPoints(last, scratchCartesianEnds, ellipsoid, halfWidth,\r\n            scratchCartographicMin, scratchCartographicMax);\r\n\r\n        if (cornerType === CornerType.ROUNDED) {\r\n            // Compute end cap\r\n            ellipsoid.cartesianToCartographic(scratchCartesianEnds, scratchCartographic);\r\n            lat = scratchCartographic.latitude;\r\n            lon = scratchCartographic.longitude;\r\n            scratchCartographicMin.latitude = Math.min(scratchCartographicMin.latitude, lat);\r\n            scratchCartographicMin.longitude = Math.min(scratchCartographicMin.longitude, lon);\r\n            scratchCartographicMax.latitude = Math.max(scratchCartographicMax.latitude, lat);\r\n            scratchCartographicMax.longitude = Math.max(scratchCartographicMax.longitude, lon);\r\n        }\r\n\r\n        var rectangle = defined(result) ? result : new Rectangle();\r\n        rectangle.north = scratchCartographicMax.latitude;\r\n        rectangle.south = scratchCartographicMin.latitude;\r\n        rectangle.east = scratchCartographicMax.longitude;\r\n        rectangle.west = scratchCartographicMin.longitude;\r\n\r\n        return rectangle;\r\n    }\r\n\r\n    /**\r\n     * A description of a corridor. Corridor geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias CorridorGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\r\n     * @param {Number} options.width The distance between the edges of the corridor in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number} [options.height=0] The distance in meters between the ellipsoid surface and the positions.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipsoid surface and the extruded face.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n     *\r\n     * @see CorridorGeometry.createGeometry\r\n     * @see Packable\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\r\n     *\r\n     * @example\r\n     * var corridor = new Cesium.CorridorGeometry({\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\r\n     *   width : 100000\r\n     * });\r\n     */\r\n    function CorridorGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n        var width = options.width;\r\n\r\n        \r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._positions = positions;\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n        this._width = width;\r\n        this._height = Math.max(height, extrudedHeight);\r\n        this._extrudedHeight = Math.min(height, extrudedHeight);\r\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n        this._workerName = 'createCorridorGeometry';\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._rectangle = undefined;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 7;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CorridorGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CorridorGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._width;\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._cornerType;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        positions : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        width : undefined,\r\n        height : undefined,\r\n        extrudedHeight : undefined,\r\n        cornerType : undefined,\r\n        granularity : undefined,\r\n        shadowVolume: undefined,\r\n        offsetAttribute: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CorridorGeometry} [result] The object into which to store the result.\r\n     * @returns {CorridorGeometry} The modified result parameter or a new CorridorGeometry instance if one was not provided.\r\n     */\r\n    CorridorGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var width = array[startingIndex++];\r\n        var height = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var cornerType = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var shadowVolume = array[startingIndex++] === 1.0;\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.positions = positions;\r\n            scratchOptions.width = width;\r\n            scratchOptions.height = height;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.cornerType = cornerType;\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.shadowVolume = shadowVolume;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n            return new CorridorGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._width = width;\r\n        result._height = height;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._cornerType = cornerType;\r\n        result._granularity = granularity;\r\n        result._shadowVolume = shadowVolume;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the bounding rectangle given the provided options\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\r\n     * @param {Number} options.width The distance between the edges of the corridor in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n     * @param {Rectangle} [result] An object in which to store the result.\r\n     *\r\n     * @returns {Rectangle} The result rectangle.\r\n     */\r\n    CorridorGeometry.computeRectangle = function(options, result) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n        var width = options.width;\r\n\r\n        \r\n\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n\r\n        return computeRectangle(positions, ellipsoid, width, cornerType, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CorridorGeometry} corridorGeometry A description of the corridor.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CorridorGeometry.createGeometry = function(corridorGeometry) {\r\n        var positions = corridorGeometry._positions;\r\n        var width = corridorGeometry._width;\r\n        var ellipsoid = corridorGeometry._ellipsoid;\r\n\r\n        positions = scaleToSurface(positions, ellipsoid);\r\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n\r\n        if ((cleanPositions.length < 2) || (width <= 0)) {\r\n            return;\r\n        }\r\n\r\n        var height = corridorGeometry._height;\r\n        var extrudedHeight = corridorGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        var vertexFormat = corridorGeometry._vertexFormat;\r\n        var params = {\r\n            ellipsoid : ellipsoid,\r\n            positions : cleanPositions,\r\n            width : width,\r\n            cornerType : corridorGeometry._cornerType,\r\n            granularity : corridorGeometry._granularity,\r\n            saveAttributes: true\r\n        };\r\n        var attr;\r\n        if (extrude) {\r\n            params.height = height;\r\n            params.extrudedHeight = extrudedHeight;\r\n            params.shadowVolume = corridorGeometry._shadowVolume;\r\n            params.offsetAttribute = corridorGeometry._offsetAttribute;\r\n            attr = computePositionsExtruded(params, vertexFormat);\r\n        } else {\r\n            var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n            attr = combine(computedPositions, vertexFormat, ellipsoid);\r\n            attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\r\n\r\n            if (defined(corridorGeometry._offsetAttribute)) {\r\n                var applyOffsetValue = corridorGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                var length = attr.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                arrayFill(applyOffset, applyOffsetValue);\r\n                attr.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n        }\r\n        var attributes = attr.attributes;\r\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\r\n        if (!vertexFormat.position) {\r\n            attr.attributes.position.values = undefined;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : attr.indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : corridorGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CorridorGeometry.createShadowVolume = function(corridorGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = corridorGeometry._granularity;\r\n        var ellipsoid = corridorGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new CorridorGeometry({\r\n            positions : corridorGeometry._positions,\r\n            width : corridorGeometry._width,\r\n            cornerType : corridorGeometry._cornerType,\r\n            ellipsoid : ellipsoid,\r\n            granularity : granularity,\r\n            extrudedHeight : minHeight,\r\n            height : maxHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume: true\r\n        });\r\n    };\r\n\r\n    defineProperties(CorridorGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                if (!defined(this._rectangle)) {\r\n                    this._rectangle = computeRectangle(this._positions, this._ellipsoid, this._width, this._cornerType);\r\n                }\r\n                return this._rectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering CorridorGeometries as GroundPrimitives.\r\n         *\r\n         * Corridors don't support stRotation,\r\n         * so just return the corners of the original system.\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                return [0, 0, 0, 1, 1, 0];\r\n            }\r\n        }\r\n    });\r\n\r\n    return CorridorGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CorridorGeometry.js\n// module id = 271\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './arrayRemoveDuplicates',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './CornerType',\r\n        './CorridorGeometryLibrary',\r\n        './defaultValue',\r\n        './defined',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PolygonPipeline',\r\n        './PrimitiveType'\r\n    ], function(\r\n        arrayFill,\r\n        arrayRemoveDuplicates,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        CornerType,\r\n        CorridorGeometryLibrary,\r\n        defaultValue,\r\n        defined,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PolygonPipeline,\r\n        PrimitiveType) {\r\n    'use strict';\r\n\r\n    var cartesian1 = new Cartesian3();\r\n    var cartesian2 = new Cartesian3();\r\n    var cartesian3 = new Cartesian3();\r\n\r\n    function scaleToSurface(positions, ellipsoid) {\r\n        for (var i = 0; i < positions.length; i++) {\r\n            positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\r\n        }\r\n        return positions;\r\n    }\r\n\r\n    function combine(computedPositions, cornerType) {\r\n        var wallIndices = [];\r\n        var positions = computedPositions.positions;\r\n        var corners = computedPositions.corners;\r\n        var endPositions = computedPositions.endPositions;\r\n        var attributes = new GeometryAttributes();\r\n        var corner;\r\n        var leftCount = 0;\r\n        var rightCount = 0;\r\n        var i;\r\n        var indicesLength = 0;\r\n        var length;\r\n        for (i = 0; i < positions.length; i += 2) {\r\n            length = positions[i].length - 3;\r\n            leftCount += length; //subtracting 3 to account for duplicate points at corners\r\n            indicesLength += length / 3 * 4;\r\n            rightCount += positions[i + 1].length - 3;\r\n        }\r\n        leftCount += 3; //add back count for end positions\r\n        rightCount += 3;\r\n        for (i = 0; i < corners.length; i++) {\r\n            corner = corners[i];\r\n            var leftSide = corners[i].leftPositions;\r\n            if (defined(leftSide)) {\r\n                length = leftSide.length;\r\n                leftCount += length;\r\n                indicesLength += length / 3 * 2;\r\n            } else {\r\n                length = corners[i].rightPositions.length;\r\n                rightCount += length;\r\n                indicesLength += length / 3 * 2;\r\n            }\r\n        }\r\n\r\n        var addEndPositions = defined(endPositions);\r\n        var endPositionLength;\r\n        if (addEndPositions) {\r\n            endPositionLength = endPositions[0].length - 3;\r\n            leftCount += endPositionLength;\r\n            rightCount += endPositionLength;\r\n            endPositionLength /= 3;\r\n            indicesLength += endPositionLength * 4;\r\n        }\r\n        var size = leftCount + rightCount;\r\n        var finalPositions = new Float64Array(size);\r\n        var front = 0;\r\n        var back = size - 1;\r\n        var UL, LL, UR, LR;\r\n        var rightPos, leftPos;\r\n        var halfLength = endPositionLength / 2;\r\n\r\n        var indices = IndexDatatype.createTypedArray(size / 3, indicesLength + 4);\r\n        var index = 0;\r\n\r\n        indices[index++] = front / 3;\r\n        indices[index++] = (back - 2) / 3;\r\n        if (addEndPositions) { // add rounded end\r\n            wallIndices.push(front / 3);\r\n            leftPos = cartesian1;\r\n            rightPos = cartesian2;\r\n            var firstEndPositions = endPositions[0];\r\n            for (i = 0; i < halfLength; i++) {\r\n                leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\r\n                rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\r\n\r\n                LL = front / 3;\r\n                LR = LL + 1;\r\n                UL = (back - 2) / 3;\r\n                UR = UL - 1;\r\n                indices[index++] = UL;\r\n                indices[index++] = UR;\r\n                indices[index++] = LL;\r\n                indices[index++] = LR;\r\n\r\n                front += 3;\r\n                back -= 3;\r\n            }\r\n        }\r\n\r\n        var posIndex = 0;\r\n        var rightEdge = positions[posIndex++]; //add first two edges\r\n        var leftEdge = positions[posIndex++];\r\n        finalPositions.set(rightEdge, front);\r\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n\r\n        length = leftEdge.length - 3;\r\n        wallIndices.push(front / 3, (back - 2) / 3);\r\n        for (i = 0; i < length; i += 3) {\r\n            LL = front / 3;\r\n            LR = LL + 1;\r\n            UL = (back - 2) / 3;\r\n            UR = UL - 1;\r\n            indices[index++] = UL;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n\r\n            front += 3;\r\n            back -= 3;\r\n        }\r\n\r\n        for (i = 0; i < corners.length; i++) {\r\n            var j;\r\n            corner = corners[i];\r\n            var l = corner.leftPositions;\r\n            var r = corner.rightPositions;\r\n            var start;\r\n            var outsidePoint = cartesian3;\r\n            if (defined(l)) {\r\n                back -= 3;\r\n                start = UR;\r\n                wallIndices.push(LR);\r\n                for (j = 0; j < l.length / 3; j++) {\r\n                    outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\r\n                    indices[index++] = start - j - 1;\r\n                    indices[index++] = start - j;\r\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\r\n                    back -= 3;\r\n                }\r\n                wallIndices.push(start - Math.floor(l.length / 6));\r\n                if (cornerType === CornerType.BEVELED) {\r\n                    wallIndices.push((back - 2) / 3 + 1);\r\n                }\r\n                front += 3;\r\n            } else {\r\n                front += 3;\r\n                start = LR;\r\n                wallIndices.push(UR);\r\n                for (j = 0; j < r.length / 3; j++) {\r\n                    outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\r\n                    indices[index++] = start + j;\r\n                    indices[index++] = start + j + 1;\r\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\r\n                    front += 3;\r\n                }\r\n                wallIndices.push(start + Math.floor(r.length / 6));\r\n                if (cornerType === CornerType.BEVELED) {\r\n                    wallIndices.push(front / 3 - 1);\r\n                }\r\n                back -= 3;\r\n            }\r\n            rightEdge = positions[posIndex++];\r\n            leftEdge = positions[posIndex++];\r\n            rightEdge.splice(0, 3); //remove duplicate points added by corner\r\n            leftEdge.splice(leftEdge.length - 3, 3);\r\n            finalPositions.set(rightEdge, front);\r\n            finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n            length = leftEdge.length - 3;\r\n\r\n            for (j = 0; j < leftEdge.length; j += 3) {\r\n                LR = front / 3;\r\n                LL = LR - 1;\r\n                UR = (back - 2) / 3;\r\n                UL = UR + 1;\r\n                indices[index++] = UL;\r\n                indices[index++] = UR;\r\n                indices[index++] = LL;\r\n                indices[index++] = LR;\r\n                front += 3;\r\n                back -= 3;\r\n            }\r\n            front -= 3;\r\n            back += 3;\r\n            wallIndices.push(front / 3, (back - 2) / 3);\r\n        }\r\n\r\n        if (addEndPositions) { // add rounded end\r\n            front += 3;\r\n            back -= 3;\r\n            leftPos = cartesian1;\r\n            rightPos = cartesian2;\r\n            var lastEndPositions = endPositions[1];\r\n            for (i = 0; i < halfLength; i++) {\r\n                leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\r\n                rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n\r\n                LR = front / 3;\r\n                LL = LR - 1;\r\n                UR = (back - 2) / 3;\r\n                UL = UR + 1;\r\n                indices[index++] = UL;\r\n                indices[index++] = UR;\r\n                indices[index++] = LL;\r\n                indices[index++] = LR;\r\n\r\n                front += 3;\r\n                back -= 3;\r\n            }\r\n\r\n            wallIndices.push(front / 3);\r\n        } else {\r\n            wallIndices.push(front / 3, (back - 2) / 3);\r\n        }\r\n        indices[index++] = front / 3;\r\n        indices[index++] = (back - 2) / 3;\r\n\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : finalPositions\r\n        });\r\n\r\n        return {\r\n            attributes : attributes,\r\n            indices : indices,\r\n            wallIndices : wallIndices\r\n        };\r\n    }\r\n\r\n    function computePositionsExtruded(params) {\r\n        var ellipsoid = params.ellipsoid;\r\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n        var attr = combine(computedPositions, params.cornerType);\r\n        var wallIndices = attr.wallIndices;\r\n        var height = params.height;\r\n        var extrudedHeight = params.extrudedHeight;\r\n        var attributes = attr.attributes;\r\n        var indices = attr.indices;\r\n        var positions = attributes.position.values;\r\n        var length = positions.length;\r\n        var extrudedPositions = new Float64Array(length);\r\n        extrudedPositions.set(positions);\r\n        var newPositions = new Float64Array(length * 2);\r\n\r\n        positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\r\n        extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\r\n        newPositions.set(positions);\r\n        newPositions.set(extrudedPositions, length);\r\n        attributes.position.values = newPositions;\r\n\r\n        length /= 3;\r\n        if (defined(params.offsetAttribute)) {\r\n            var applyOffset = new Uint8Array(length * 2);\r\n            if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                applyOffset = arrayFill(applyOffset, 1, 0, length);\r\n            } else {\r\n                var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                applyOffset = arrayFill(applyOffset, applyOffsetValue);\r\n            }\r\n\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        var i;\r\n        var iLength = indices.length;\r\n        var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, (iLength + wallIndices.length) * 2);\r\n        newIndices.set(indices);\r\n        var index = iLength;\r\n        for (i = 0; i < iLength; i += 2) { // bottom indices\r\n            var v0 = indices[i];\r\n            var v1 = indices[i + 1];\r\n            newIndices[index++] = v0 + length;\r\n            newIndices[index++] = v1 + length;\r\n        }\r\n\r\n        var UL, LL;\r\n        for (i = 0; i < wallIndices.length; i++) { //wall indices\r\n            UL = wallIndices[i];\r\n            LL = UL + length;\r\n            newIndices[index++] = UL;\r\n            newIndices[index++] = LL;\r\n        }\r\n\r\n        return {\r\n            attributes : attributes,\r\n            indices : newIndices\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A description of a corridor outline.\r\n     *\r\n     * @alias CorridorOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor outline.\r\n     * @param {Number} options.width The distance between the edges of the corridor outline.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number} [options.height=0] The distance in meters between the positions and the ellipsoid surface.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the extruded face and the ellipsoid surface.\r\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n     *\r\n     * @see CorridorOutlineGeometry.createGeometry\r\n     *\r\n     * @example\r\n     * var corridor = new Cesium.CorridorOutlineGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\r\n     *   width : 100000\r\n     * });\r\n     */\r\n    function CorridorOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n        var width = options.width;\r\n\r\n        \r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._positions = positions;\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._width = width;\r\n        this._height = Math.max(height, extrudedHeight);\r\n        this._extrudedHeight = Math.min(height, extrudedHeight);\r\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createCorridorOutlineGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + 6;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CorridorOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CorridorOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._width;\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._cornerType;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchOptions = {\r\n        positions : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        width : undefined,\r\n        height : undefined,\r\n        extrudedHeight : undefined,\r\n        cornerType : undefined,\r\n        granularity : undefined,\r\n        offsetAttribute: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CorridorOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {CorridorOutlineGeometry} The modified result parameter or a new CorridorOutlineGeometry instance if one was not provided.\r\n     */\r\n    CorridorOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var width = array[startingIndex++];\r\n        var height = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var cornerType = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.positions = positions;\r\n            scratchOptions.width = width;\r\n            scratchOptions.height = height;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.cornerType = cornerType;\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new CorridorOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._width = width;\r\n        result._height = height;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._cornerType = cornerType;\r\n        result._granularity = granularity;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CorridorOutlineGeometry} corridorOutlineGeometry A description of the corridor.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CorridorOutlineGeometry.createGeometry = function(corridorOutlineGeometry) {\r\n        var positions = corridorOutlineGeometry._positions;\r\n        var width = corridorOutlineGeometry._width;\r\n        var ellipsoid = corridorOutlineGeometry._ellipsoid;\r\n\r\n        positions = scaleToSurface(positions, ellipsoid);\r\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n\r\n        if ((cleanPositions.length < 2) || (width <= 0)) {\r\n            return;\r\n        }\r\n\r\n        var height = corridorOutlineGeometry._height;\r\n        var extrudedHeight = corridorOutlineGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        var params = {\r\n            ellipsoid : ellipsoid,\r\n            positions : cleanPositions,\r\n            width : width,\r\n            cornerType : corridorOutlineGeometry._cornerType,\r\n            granularity : corridorOutlineGeometry._granularity,\r\n            saveAttributes : false\r\n        };\r\n        var attr;\r\n        if (extrude) {\r\n            params.height = height;\r\n            params.extrudedHeight = extrudedHeight;\r\n            params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;\r\n            attr = computePositionsExtruded(params);\r\n        } else {\r\n            var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n            attr = combine(computedPositions, params.cornerType);\r\n            attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\r\n\r\n            if (defined(corridorOutlineGeometry._offsetAttribute)) {\r\n                var length = attr.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                var offsetValue = corridorOutlineGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                attr.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n        }\r\n        var attributes = attr.attributes;\r\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : attr.indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : corridorOutlineGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    return CorridorOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CorridorOutlineGeometry.js\n// module id = 272\n// module chunks = 0","\r\ndefine([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './CylinderGeometryLibrary',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './IndexDatatype',\r\n        './PrimitiveType'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        CylinderGeometryLibrary,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        IndexDatatype,\r\n        PrimitiveType) {\r\n    'use strict';\r\n\r\n    var radiusScratch = new Cartesian2();\r\n\r\n    /**\r\n     * A description of the outline of a cylinder.\r\n     *\r\n     * @alias CylinderOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Number} options.length The length of the cylinder.\r\n     * @param {Number} options.topRadius The radius of the top of the cylinder.\r\n     * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\r\n     * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\r\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surfaces of the cylinder.\r\n     *\r\n     * @exception {DeveloperError} options.length must be greater than 0.\r\n     * @exception {DeveloperError} options.topRadius must be greater than 0.\r\n     * @exception {DeveloperError} options.bottomRadius must be greater than 0.\r\n     * @exception {DeveloperError} bottomRadius and topRadius cannot both equal 0.\r\n     * @exception {DeveloperError} options.slices must be greater than or equal to 3.\r\n     *\r\n     * @see CylinderOutlineGeometry.createGeometry\r\n     *\r\n     * @example\r\n     * // create cylinder geometry\r\n     * var cylinder = new Cesium.CylinderOutlineGeometry({\r\n     *     length: 200000,\r\n     *     topRadius: 80000,\r\n     *     bottomRadius: 200000,\r\n     * });\r\n     * var geometry = Cesium.CylinderOutlineGeometry.createGeometry(cylinder);\r\n     */\r\n    function CylinderOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var length = options.length;\r\n        var topRadius = options.topRadius;\r\n        var bottomRadius = options.bottomRadius;\r\n        var slices = defaultValue(options.slices, 128);\r\n        var numberOfVerticalLines = Math.max(defaultValue(options.numberOfVerticalLines, 16), 0);\r\n\r\n        \r\n\r\n        this._length = length;\r\n        this._topRadius = topRadius;\r\n        this._bottomRadius = bottomRadius;\r\n        this._slices = slices;\r\n        this._numberOfVerticalLines = numberOfVerticalLines;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createCylinderOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    CylinderOutlineGeometry.packedLength = 6;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CylinderOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CylinderOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value._length;\r\n        array[startingIndex++] = value._topRadius;\r\n        array[startingIndex++] = value._bottomRadius;\r\n        array[startingIndex++] = value._slices;\r\n        array[startingIndex++] = value._numberOfVerticalLines;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchOptions = {\r\n        length : undefined,\r\n        topRadius : undefined,\r\n        bottomRadius : undefined,\r\n        slices : undefined,\r\n        numberOfVerticalLines : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CylinderOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {CylinderOutlineGeometry} The modified result parameter or a new CylinderOutlineGeometry instance if one was not provided.\r\n     */\r\n    CylinderOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var length = array[startingIndex++];\r\n        var topRadius = array[startingIndex++];\r\n        var bottomRadius = array[startingIndex++];\r\n        var slices = array[startingIndex++];\r\n        var numberOfVerticalLines = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.length = length;\r\n            scratchOptions.topRadius = topRadius;\r\n            scratchOptions.bottomRadius = bottomRadius;\r\n            scratchOptions.slices = slices;\r\n            scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new CylinderOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._length = length;\r\n        result._topRadius = topRadius;\r\n        result._bottomRadius = bottomRadius;\r\n        result._slices = slices;\r\n        result._numberOfVerticalLines = numberOfVerticalLines;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a cylinder, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CylinderOutlineGeometry} cylinderGeometry A description of the cylinder outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CylinderOutlineGeometry.createGeometry = function(cylinderGeometry) {\r\n        var length = cylinderGeometry._length;\r\n        var topRadius = cylinderGeometry._topRadius;\r\n        var bottomRadius = cylinderGeometry._bottomRadius;\r\n        var slices = cylinderGeometry._slices;\r\n        var numberOfVerticalLines = cylinderGeometry._numberOfVerticalLines;\r\n\r\n        if ((length <= 0) || (topRadius < 0) || (bottomRadius < 0) || ((topRadius === 0) && (bottomRadius === 0))) {\r\n            return;\r\n        }\r\n\r\n        var numVertices = slices * 2;\r\n\r\n        var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, false);\r\n        var numIndices = slices * 2;\r\n        var numSide;\r\n        if (numberOfVerticalLines > 0) {\r\n            var numSideLines = Math.min(numberOfVerticalLines, slices);\r\n            numSide = Math.round(slices / numSideLines);\r\n            numIndices += numSideLines;\r\n        }\r\n\r\n        var indices = IndexDatatype.createTypedArray(numVertices, numIndices * 2);\r\n        var index = 0;\r\n        var i;\r\n        for (i = 0; i < slices - 1; i++) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + 1;\r\n            indices[index++] = i + slices;\r\n            indices[index++] = i + 1 + slices;\r\n        }\r\n\r\n        indices[index++] = slices - 1;\r\n        indices[index++] = 0;\r\n        indices[index++] = slices + slices - 1;\r\n        indices[index++] = slices;\r\n\r\n        if (numberOfVerticalLines > 0) {\r\n            for (i = 0; i < slices; i += numSide) {\r\n                indices[index++] = i;\r\n                indices[index++] = i + slices;\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n\r\n        radiusScratch.x = length * 0.5;\r\n        radiusScratch.y = Math.max(bottomRadius, topRadius);\r\n\r\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\r\n\r\n        if (defined(cylinderGeometry._offsetAttribute)) {\r\n            length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : cylinderGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    return CylinderOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CylinderOutlineGeometry.js\n// module id = 273\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './CullingVolume',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Math',\r\n        './Matrix4'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartesian4,\r\n        CullingVolume,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        CesiumMath,\r\n        Matrix4) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The viewing frustum is defined by 6 planes.\r\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin/camera position.\r\n     *\r\n     * @alias OrthographicOffCenterFrustum\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Number} [options.left] The left clipping plane distance.\r\n     * @param {Number} [options.right] The right clipping plane distance.\r\n     * @param {Number} [options.top] The top clipping plane distance.\r\n     * @param {Number} [options.bottom] The bottom clipping plane distance.\r\n     * @param {Number} [options.near=1.0] The near clipping plane distance.\r\n     * @param {Number} [options.far=500000000.0] The far clipping plane distance.\r\n     *\r\n     * @example\r\n     * var maxRadii = ellipsoid.maximumRadius;\r\n     *\r\n     * var frustum = new Cesium.OrthographicOffCenterFrustum();\r\n     * frustum.right = maxRadii * Cesium.Math.PI;\r\n     * frustum.left = -c.frustum.right;\r\n     * frustum.top = c.frustum.right * (canvas.clientHeight / canvas.clientWidth);\r\n     * frustum.bottom = -c.frustum.top;\r\n     * frustum.near = 0.01 * maxRadii;\r\n     * frustum.far = 50.0 * maxRadii;\r\n     */\r\n    function OrthographicOffCenterFrustum(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        /**\r\n         * The left clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.left = options.left;\r\n        this._left = undefined;\r\n\r\n        /**\r\n         * The right clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.right = options.right;\r\n        this._right = undefined;\r\n\r\n        /**\r\n         * The top clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.top = options.top;\r\n        this._top = undefined;\r\n\r\n        /**\r\n         * The bottom clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.bottom = options.bottom;\r\n        this._bottom = undefined;\r\n\r\n        /**\r\n         * The distance of the near plane.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.near = defaultValue(options.near, 1.0);\r\n        this._near = this.near;\r\n\r\n        /**\r\n         * The distance of the far plane.\r\n         * @type {Number}\r\n         * @default 500000000.0;\r\n         */\r\n        this.far = defaultValue(options.far, 500000000.0);\r\n        this._far = this.far;\r\n\r\n        this._cullingVolume = new CullingVolume();\r\n        this._orthographicMatrix = new Matrix4();\r\n    }\r\n\r\n    function update(frustum) {\r\n        \r\n\r\n        if (frustum.top !== frustum._top || frustum.bottom !== frustum._bottom ||\r\n            frustum.left !== frustum._left || frustum.right !== frustum._right ||\r\n            frustum.near !== frustum._near || frustum.far !== frustum._far) {\r\n\r\n            \r\n\r\n            frustum._left = frustum.left;\r\n            frustum._right = frustum.right;\r\n            frustum._top = frustum.top;\r\n            frustum._bottom = frustum.bottom;\r\n            frustum._near = frustum.near;\r\n            frustum._far = frustum.far;\r\n            frustum._orthographicMatrix = Matrix4.computeOrthographicOffCenter(frustum.left, frustum.right, frustum.bottom, frustum.top, frustum.near, frustum.far, frustum._orthographicMatrix);\r\n        }\r\n    }\r\n\r\n    defineProperties(OrthographicOffCenterFrustum.prototype, {\r\n        /**\r\n         * Gets the orthographic projection matrix computed from the view frustum.\r\n         * @memberof OrthographicOffCenterFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         */\r\n        projectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._orthographicMatrix;\r\n            }\r\n        }\r\n    });\r\n\r\n    var getPlanesRight = new Cartesian3();\r\n    var getPlanesNearCenter = new Cartesian3();\r\n    var getPlanesPoint = new Cartesian3();\r\n    var negateScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Creates a culling volume for this frustum.\r\n     *\r\n     * @param {Cartesian3} position The eye position.\r\n     * @param {Cartesian3} direction The view direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n     *\r\n     * @example\r\n     * // Check if a bounding volume intersects the frustum.\r\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.computeCullingVolume = function(position, direction, up) {\r\n        \r\n\r\n        var planes = this._cullingVolume.planes;\r\n        var t = this.top;\r\n        var b = this.bottom;\r\n        var r = this.right;\r\n        var l = this.left;\r\n        var n = this.near;\r\n        var f = this.far;\r\n\r\n        var right = Cartesian3.cross(direction, up, getPlanesRight);\r\n        Cartesian3.normalize(right, right);\r\n        var nearCenter = getPlanesNearCenter;\r\n        Cartesian3.multiplyByScalar(direction, n, nearCenter);\r\n        Cartesian3.add(position, nearCenter, nearCenter);\r\n\r\n        var point = getPlanesPoint;\r\n\r\n        // Left plane\r\n        Cartesian3.multiplyByScalar(right, l, point);\r\n        Cartesian3.add(nearCenter, point, point);\r\n\r\n        var plane = planes[0];\r\n        if (!defined(plane)) {\r\n            plane = planes[0] = new Cartesian4();\r\n        }\r\n        plane.x = right.x;\r\n        plane.y = right.y;\r\n        plane.z = right.z;\r\n        plane.w = -Cartesian3.dot(right, point);\r\n\r\n        // Right plane\r\n        Cartesian3.multiplyByScalar(right, r, point);\r\n        Cartesian3.add(nearCenter, point, point);\r\n\r\n        plane = planes[1];\r\n        if (!defined(plane)) {\r\n            plane = planes[1] = new Cartesian4();\r\n        }\r\n        plane.x = -right.x;\r\n        plane.y = -right.y;\r\n        plane.z = -right.z;\r\n        plane.w = -Cartesian3.dot(Cartesian3.negate(right, negateScratch), point);\r\n\r\n        // Bottom plane\r\n        Cartesian3.multiplyByScalar(up, b, point);\r\n        Cartesian3.add(nearCenter, point, point);\r\n\r\n        plane = planes[2];\r\n        if (!defined(plane)) {\r\n            plane = planes[2] = new Cartesian4();\r\n        }\r\n        plane.x = up.x;\r\n        plane.y = up.y;\r\n        plane.z = up.z;\r\n        plane.w = -Cartesian3.dot(up, point);\r\n\r\n        // Top plane\r\n        Cartesian3.multiplyByScalar(up, t, point);\r\n        Cartesian3.add(nearCenter, point, point);\r\n\r\n        plane = planes[3];\r\n        if (!defined(plane)) {\r\n            plane = planes[3] = new Cartesian4();\r\n        }\r\n        plane.x = -up.x;\r\n        plane.y = -up.y;\r\n        plane.z = -up.z;\r\n        plane.w = -Cartesian3.dot(Cartesian3.negate(up, negateScratch), point);\r\n\r\n        // Near plane\r\n        plane = planes[4];\r\n        if (!defined(plane)) {\r\n            plane = planes[4] = new Cartesian4();\r\n        }\r\n        plane.x = direction.x;\r\n        plane.y = direction.y;\r\n        plane.z = direction.z;\r\n        plane.w = -Cartesian3.dot(direction, nearCenter);\r\n\r\n        // Far plane\r\n        Cartesian3.multiplyByScalar(direction, f, point);\r\n        Cartesian3.add(position, point, point);\r\n\r\n        plane = planes[5];\r\n        if (!defined(plane)) {\r\n            plane = planes[5] = new Cartesian4();\r\n        }\r\n        plane.x = -direction.x;\r\n        plane.y = -direction.y;\r\n        plane.z = -direction.z;\r\n        plane.w = -Cartesian3.dot(Cartesian3.negate(direction, negateScratch), point);\r\n\r\n        return this._cullingVolume;\r\n    };\r\n\r\n    /**\r\n     * Returns the pixel's width and height in meters.\r\n     *\r\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n     * @param {Number} distance The distance to the near plane in meters.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n     *\r\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n     *\r\n     * @example\r\n     * // Example 1\r\n     * // Get the width and height of a pixel.\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, new Cesium.Cartesian2());\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, result) {\r\n        update(this);\r\n\r\n        \r\n\r\n        var frustumWidth = this.right - this.left;\r\n        var frustumHeight = this.top - this.bottom;\r\n        var pixelWidth = frustumWidth / drawingBufferWidth;\r\n        var pixelHeight = frustumHeight / drawingBufferHeight;\r\n\r\n        result.x = pixelWidth;\r\n        result.y = pixelHeight;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a OrthographicOffCenterFrustum instance.\r\n     *\r\n     * @param {OrthographicOffCenterFrustum} [result] The object onto which to store the result.\r\n     * @returns {OrthographicOffCenterFrustum} The modified result parameter or a new OrthographicOffCenterFrustum instance if one was not provided.\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new OrthographicOffCenterFrustum();\r\n        }\r\n\r\n        result.left = this.left;\r\n        result.right = this.right;\r\n        result.top = this.top;\r\n        result.bottom = this.bottom;\r\n        result.near = this.near;\r\n        result.far = this.far;\r\n\r\n        // force update of clone to compute matrices\r\n        result._left = undefined;\r\n        result._right = undefined;\r\n        result._top = undefined;\r\n        result._bottom = undefined;\r\n        result._near = undefined;\r\n        result._far = undefined;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrthographicOffCenterFrustum componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {OrthographicOffCenterFrustum} [other] The right hand side OrthographicOffCenterFrustum.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.equals = function(other) {\r\n        return (defined(other) && other instanceof OrthographicOffCenterFrustum &&\r\n                this.right === other.right &&\r\n                this.left === other.left &&\r\n                this.top === other.top &&\r\n                this.bottom === other.bottom &&\r\n                this.near === other.near &&\r\n                this.far === other.far);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrthographicOffCenterFrustum componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {OrthographicOffCenterFrustum} other The right hand side OrthographicOffCenterFrustum.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\r\n        return (other === this) ||\r\n               (defined(other) &&\r\n                other instanceof OrthographicOffCenterFrustum &&\r\n                CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    return OrthographicOffCenterFrustum;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/OrthographicOffCenterFrustum.js\n// module id = 274\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Cartesian4',\r\n        './CullingVolume',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Math',\r\n        './Matrix4'\r\n    ], function(\r\n        Cartesian3,\r\n        Cartesian4,\r\n        CullingVolume,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        CesiumMath,\r\n        Matrix4) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The viewing frustum is defined by 6 planes.\r\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin/camera position.\r\n     *\r\n     * @alias PerspectiveOffCenterFrustum\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Number} [options.left] The left clipping plane distance.\r\n     * @param {Number} [options.right] The right clipping plane distance.\r\n     * @param {Number} [options.top] The top clipping plane distance.\r\n     * @param {Number} [options.bottom] The bottom clipping plane distance.\r\n     * @param {Number} [options.near=1.0] The near clipping plane distance.\r\n     * @param {Number} [options.far=500000000.0] The far clipping plane distance.\r\n     *\r\n     * @example\r\n     * var frustum = new Cesium.PerspectiveOffCenterFrustum({\r\n     *     left : -1.0,\r\n     *     right : 1.0,\r\n     *     top : 1.0,\r\n     *     bottom : -1.0,\r\n     *     near : 1.0,\r\n     *     far : 100.0\r\n     * });\r\n     *\r\n     * @see PerspectiveFrustum\r\n     */\r\n    function PerspectiveOffCenterFrustum(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        /**\r\n         * Defines the left clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.left = options.left;\r\n        this._left = undefined;\r\n\r\n        /**\r\n         * Defines the right clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.right = options.right;\r\n        this._right = undefined;\r\n\r\n        /**\r\n         * Defines the top clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.top = options.top;\r\n        this._top = undefined;\r\n\r\n        /**\r\n         * Defines the bottom clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.bottom = options.bottom;\r\n        this._bottom = undefined;\r\n\r\n        /**\r\n         * The distance of the near plane.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.near = defaultValue(options.near, 1.0);\r\n        this._near = this.near;\r\n\r\n        /**\r\n         * The distance of the far plane.\r\n         * @type {Number}\r\n         * @default 500000000.0\r\n         */\r\n        this.far = defaultValue(options.far, 500000000.0);\r\n        this._far = this.far;\r\n\r\n        this._cullingVolume = new CullingVolume();\r\n        this._perspectiveMatrix = new Matrix4();\r\n        this._infinitePerspective = new Matrix4();\r\n    }\r\n\r\n    function update(frustum) {\r\n        \r\n\r\n        var t = frustum.top;\r\n        var b = frustum.bottom;\r\n        var r = frustum.right;\r\n        var l = frustum.left;\r\n        var n = frustum.near;\r\n        var f = frustum.far;\r\n\r\n        if (t !== frustum._top || b !== frustum._bottom ||\r\n            l !== frustum._left || r !== frustum._right ||\r\n            n !== frustum._near || f !== frustum._far) {\r\n\r\n            \r\n\r\n            frustum._left = l;\r\n            frustum._right = r;\r\n            frustum._top = t;\r\n            frustum._bottom = b;\r\n            frustum._near = n;\r\n            frustum._far = f;\r\n            frustum._perspectiveMatrix = Matrix4.computePerspectiveOffCenter(l, r, b, t, n, f, frustum._perspectiveMatrix);\r\n            frustum._infinitePerspective = Matrix4.computeInfinitePerspectiveOffCenter(l, r, b, t, n, frustum._infinitePerspective);\r\n        }\r\n    }\r\n\r\n    defineProperties(PerspectiveOffCenterFrustum.prototype, {\r\n        /**\r\n         * Gets the perspective projection matrix computed from the view frustum.\r\n         * @memberof PerspectiveOffCenterFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         *\r\n         * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\r\n         */\r\n        projectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._perspectiveMatrix;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\r\n         * @memberof PerspectiveOffCenterFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         *\r\n         * @see PerspectiveOffCenterFrustum#projectionMatrix\r\n         */\r\n        infiniteProjectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._infinitePerspective;\r\n            }\r\n        }\r\n    });\r\n\r\n    var getPlanesRight = new Cartesian3();\r\n    var getPlanesNearCenter = new Cartesian3();\r\n    var getPlanesFarCenter = new Cartesian3();\r\n    var getPlanesNormal = new Cartesian3();\r\n    /**\r\n     * Creates a culling volume for this frustum.\r\n     *\r\n     * @param {Cartesian3} position The eye position.\r\n     * @param {Cartesian3} direction The view direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n     *\r\n     * @example\r\n     * // Check if a bounding volume intersects the frustum.\r\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.computeCullingVolume = function(position, direction, up) {\r\n        \r\n\r\n        var planes = this._cullingVolume.planes;\r\n\r\n        var t = this.top;\r\n        var b = this.bottom;\r\n        var r = this.right;\r\n        var l = this.left;\r\n        var n = this.near;\r\n        var f = this.far;\r\n\r\n        var right = Cartesian3.cross(direction, up, getPlanesRight);\r\n\r\n        var nearCenter = getPlanesNearCenter;\r\n        Cartesian3.multiplyByScalar(direction, n, nearCenter);\r\n        Cartesian3.add(position, nearCenter, nearCenter);\r\n\r\n        var farCenter = getPlanesFarCenter;\r\n        Cartesian3.multiplyByScalar(direction, f, farCenter);\r\n        Cartesian3.add(position, farCenter, farCenter);\r\n\r\n        var normal = getPlanesNormal;\r\n\r\n        //Left plane computation\r\n        Cartesian3.multiplyByScalar(right, l, normal);\r\n        Cartesian3.add(nearCenter, normal, normal);\r\n        Cartesian3.subtract(normal, position, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n        Cartesian3.cross(normal, up, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        var plane = planes[0];\r\n        if (!defined(plane)) {\r\n            plane = planes[0] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, position);\r\n\r\n        //Right plane computation\r\n        Cartesian3.multiplyByScalar(right, r, normal);\r\n        Cartesian3.add(nearCenter, normal, normal);\r\n        Cartesian3.subtract(normal, position, normal);\r\n        Cartesian3.cross(up, normal, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        plane = planes[1];\r\n        if (!defined(plane)) {\r\n            plane = planes[1] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, position);\r\n\r\n        //Bottom plane computation\r\n        Cartesian3.multiplyByScalar(up, b, normal);\r\n        Cartesian3.add(nearCenter, normal, normal);\r\n        Cartesian3.subtract(normal, position, normal);\r\n        Cartesian3.cross(right, normal, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        plane = planes[2];\r\n        if (!defined(plane)) {\r\n            plane = planes[2] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, position);\r\n\r\n        //Top plane computation\r\n        Cartesian3.multiplyByScalar(up, t, normal);\r\n        Cartesian3.add(nearCenter, normal, normal);\r\n        Cartesian3.subtract(normal, position, normal);\r\n        Cartesian3.cross(normal, right, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        plane = planes[3];\r\n        if (!defined(plane)) {\r\n            plane = planes[3] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, position);\r\n\r\n        //Near plane computation\r\n        plane = planes[4];\r\n        if (!defined(plane)) {\r\n            plane = planes[4] = new Cartesian4();\r\n        }\r\n        plane.x = direction.x;\r\n        plane.y = direction.y;\r\n        plane.z = direction.z;\r\n        plane.w = -Cartesian3.dot(direction, nearCenter);\r\n\r\n        //Far plane computation\r\n        Cartesian3.negate(direction, normal);\r\n\r\n        plane = planes[5];\r\n        if (!defined(plane)) {\r\n            plane = planes[5] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, farCenter);\r\n\r\n        return this._cullingVolume;\r\n    };\r\n\r\n    /**\r\n     * Returns the pixel's width and height in meters.\r\n     *\r\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n     * @param {Number} distance The distance to the near plane in meters.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n     *\r\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n     *\r\n     * @example\r\n     * // Example 1\r\n     * // Get the width and height of a pixel.\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Cesium.Cartesian2());\r\n     *\r\n     * @example\r\n     * // Example 2\r\n     * // Get the width and height of a pixel if the near plane was set to 'distance'.\r\n     * // For example, get the size of a pixel of an image on a billboard.\r\n     * var position = camera.position;\r\n     * var direction = camera.direction;\r\n     * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\r\n     * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\r\n     * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Cesium.Cartesian2());\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, result) {\r\n        update(this);\r\n\r\n        \r\n\r\n        var inverseNear = 1.0 / this.near;\r\n        var tanTheta = this.top * inverseNear;\r\n        var pixelHeight = 2.0 * distance * tanTheta / drawingBufferHeight;\r\n        tanTheta = this.right * inverseNear;\r\n        var pixelWidth = 2.0 * distance * tanTheta / drawingBufferWidth;\r\n\r\n        result.x = pixelWidth;\r\n        result.y = pixelHeight;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\r\n     *\r\n     * @param {PerspectiveOffCenterFrustum} [result] The object onto which to store the result.\r\n     * @returns {PerspectiveOffCenterFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new PerspectiveOffCenterFrustum();\r\n        }\r\n\r\n        result.right = this.right;\r\n        result.left = this.left;\r\n        result.top = this.top;\r\n        result.bottom = this.bottom;\r\n        result.near = this.near;\r\n        result.far = this.far;\r\n\r\n        // force update of clone to compute matrices\r\n        result._left = undefined;\r\n        result._right = undefined;\r\n        result._top = undefined;\r\n        result._bottom = undefined;\r\n        result._near = undefined;\r\n        result._far = undefined;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {PerspectiveOffCenterFrustum} [other] The right hand side PerspectiveOffCenterFrustum.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.equals = function(other) {\r\n        return (defined(other) && other instanceof PerspectiveOffCenterFrustum &&\r\n                this.right === other.right &&\r\n                this.left === other.left &&\r\n                this.top === other.top &&\r\n                this.bottom === other.bottom &&\r\n                this.near === other.near &&\r\n                this.far === other.far);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {PerspectiveOffCenterFrustum} other The right hand side PerspectiveOffCenterFrustum.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\r\n        return (other === this) ||\r\n               (defined(other) &&\r\n                other instanceof PerspectiveOffCenterFrustum &&\r\n                CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    return PerspectiveOffCenterFrustum;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PerspectiveOffCenterFrustum.js\n// module id = 275\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './FrustumGeometry',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './OrthographicFrustum',\r\n        './PerspectiveFrustum',\r\n        './PrimitiveType',\r\n        './Quaternion'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        FrustumGeometry,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        OrthographicFrustum,\r\n        PerspectiveFrustum,\r\n        PrimitiveType,\r\n        Quaternion) {\r\n    'use strict';\r\n\r\n    var PERSPECTIVE = 0;\r\n    var ORTHOGRAPHIC = 1;\r\n\r\n    /**\r\n     * A description of the outline of a frustum with the given the origin and orientation.\r\n     *\r\n     * @alias FrustumOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PerspectiveFrustum|OrthographicFrustum} options.frustum The frustum.\r\n     * @param {Cartesian3} options.origin The origin of the frustum.\r\n     * @param {Quaternion} options.orientation The orientation of the frustum.\r\n     */\r\n    function FrustumOutlineGeometry(options) {\r\n        \r\n\r\n        var frustum = options.frustum;\r\n        var orientation = options.orientation;\r\n        var origin = options.origin;\r\n\r\n        // This is private because it is used by DebugCameraPrimitive to draw a multi-frustum by\r\n        // creating multiple FrustumOutlineGeometrys. This way the near plane of one frustum doesn't overlap\r\n        // the far plane of another.\r\n        var drawNearPlane = defaultValue(options._drawNearPlane, true);\r\n\r\n        var frustumType;\r\n        var frustumPackedLength;\r\n        if (frustum instanceof PerspectiveFrustum) {\r\n            frustumType = PERSPECTIVE;\r\n            frustumPackedLength = PerspectiveFrustum.packedLength;\r\n        } else if (frustum instanceof OrthographicFrustum) {\r\n            frustumType = ORTHOGRAPHIC;\r\n            frustumPackedLength = OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        this._frustumType = frustumType;\r\n        this._frustum = frustum.clone();\r\n        this._origin = Cartesian3.clone(origin);\r\n        this._orientation = Quaternion.clone(orientation);\r\n        this._drawNearPlane = drawNearPlane;\r\n        this._workerName = 'createFrustumOutlineGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = 2 + frustumPackedLength + Cartesian3.packedLength + Quaternion.packedLength;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {FrustumOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    FrustumOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var frustumType = value._frustumType;\r\n        var frustum = value._frustum;\r\n\r\n        array[startingIndex++] = frustumType;\r\n\r\n        if (frustumType === PERSPECTIVE) {\r\n            PerspectiveFrustum.pack(frustum, array, startingIndex);\r\n            startingIndex += PerspectiveFrustum.packedLength;\r\n        } else {\r\n            OrthographicFrustum.pack(frustum, array, startingIndex);\r\n            startingIndex += OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        Cartesian3.pack(value._origin, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n        Quaternion.pack(value._orientation, array, startingIndex);\r\n        startingIndex += Quaternion.packedLength;\r\n        array[startingIndex] = value._drawNearPlane ? 1.0 : 0.0;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchPackPerspective = new PerspectiveFrustum();\r\n    var scratchPackOrthographic = new OrthographicFrustum();\r\n    var scratchPackQuaternion = new Quaternion();\r\n    var scratchPackorigin = new Cartesian3();\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {FrustumOutlineGeometry} [result] The object into which to store the result.\r\n     */\r\n    FrustumOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var frustumType = array[startingIndex++];\r\n\r\n        var frustum;\r\n        if (frustumType === PERSPECTIVE) {\r\n            frustum = PerspectiveFrustum.unpack(array, startingIndex, scratchPackPerspective);\r\n            startingIndex += PerspectiveFrustum.packedLength;\r\n        } else {\r\n            frustum = OrthographicFrustum.unpack(array, startingIndex, scratchPackOrthographic);\r\n            startingIndex += OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        var origin = Cartesian3.unpack(array, startingIndex, scratchPackorigin);\r\n        startingIndex += Cartesian3.packedLength;\r\n        var orientation = Quaternion.unpack(array, startingIndex, scratchPackQuaternion);\r\n        startingIndex += Quaternion.packedLength;\r\n        var drawNearPlane = array[startingIndex] === 1.0;\r\n\r\n        if (!defined(result)) {\r\n            return new FrustumOutlineGeometry({\r\n                frustum : frustum,\r\n                origin : origin,\r\n                orientation : orientation,\r\n                _drawNearPlane : drawNearPlane\r\n            });\r\n        }\r\n\r\n        var frustumResult = frustumType === result._frustumType ? result._frustum : undefined;\r\n        result._frustum = frustum.clone(frustumResult);\r\n\r\n        result._frustumType = frustumType;\r\n        result._origin = Cartesian3.clone(origin, result._origin);\r\n        result._orientation = Quaternion.clone(orientation, result._orientation);\r\n        result._drawNearPlane = drawNearPlane;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a frustum outline, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {FrustumOutlineGeometry} frustumGeometry A description of the frustum.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    FrustumOutlineGeometry.createGeometry = function(frustumGeometry) {\r\n        var frustumType = frustumGeometry._frustumType;\r\n        var frustum = frustumGeometry._frustum;\r\n        var origin = frustumGeometry._origin;\r\n        var orientation = frustumGeometry._orientation;\r\n        var drawNearPlane = frustumGeometry._drawNearPlane;\r\n\r\n        var positions = new Float64Array(3 * 4 * 2);\r\n        FrustumGeometry._computeNearFarPlanes(origin, orientation, frustumType, frustum, positions);\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position : new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            })\r\n        });\r\n\r\n        var offset;\r\n        var index;\r\n\r\n        var numberOfPlanes = drawNearPlane ? 2 : 1;\r\n        var indices = new Uint16Array(8 * (numberOfPlanes + 1));\r\n\r\n        // Build the near/far planes\r\n        var i = drawNearPlane ? 0 : 1;\r\n        for (; i < 2; ++i) {\r\n            offset = drawNearPlane ? i * 8 : 0;\r\n            index = i * 4;\r\n\r\n            indices[offset] = index;\r\n            indices[offset + 1] = index + 1;\r\n            indices[offset + 2] = index + 1;\r\n            indices[offset + 3] = index + 2;\r\n            indices[offset + 4] = index + 2;\r\n            indices[offset + 5] = index + 3;\r\n            indices[offset + 6] = index + 3;\r\n            indices[offset + 7] = index;\r\n        }\r\n\r\n        // Build the sides of the frustums\r\n        for (i = 0; i < 2; ++i) {\r\n            offset = (numberOfPlanes + i) * 8;\r\n            index = i * 4;\r\n\r\n            indices[offset] = index;\r\n            indices[offset + 1] = index + 4;\r\n            indices[offset + 2] = index + 1;\r\n            indices[offset + 3] = index + 5;\r\n            indices[offset + 4] = index + 2;\r\n            indices[offset + 5] = index + 6;\r\n            indices[offset + 6] = index + 3;\r\n            indices[offset + 7] = index + 7;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : BoundingSphere.fromVertices(positions)\r\n        });\r\n    };\r\n\r\n    return FrustumOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/FrustumOutlineGeometry.js\n// module id = 276\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Scene/PrimitivePipeline',\r\n        '../ThirdParty/when',\r\n        './createTaskProcessorWorker',\r\n        'require'\r\n    ], function(\r\n        defined,\r\n        PrimitivePipeline,\r\n        when,\r\n        createTaskProcessorWorker,\r\n        require) {\r\n    'use strict';\r\n\r\n    var moduleCache = {};\r\n\r\n    var reqWithContext = require.context('./', false, /create.+Geometry/);\r\n\r\n    function getModule(moduleName) {\r\n        var module = moduleCache[moduleName];\r\n        if (!defined(module)) {\r\n            if (typeof exports === 'object') {\r\n                // Use CommonJS-style require.\r\n                moduleCache[module] = module = reqWithContext('./' + moduleName);\r\n            } else {\r\n                // Use AMD-style require.\r\n                // in web workers, require is synchronous\r\n                reqWithContext(['./' + moduleName], function(f) {\r\n                    module = f;\r\n                    moduleCache[module] = f;\r\n                });\r\n            }\r\n        }\r\n        return module;\r\n    }\r\n\r\n    function createGeometry(parameters, transferableObjects) {\r\n        var subTasks = parameters.subTasks;\r\n        var length = subTasks.length;\r\n        var resultsOrPromises = new Array(length);\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var task = subTasks[i];\r\n            var geometry = task.geometry;\r\n            var moduleName = task.moduleName;\r\n\r\n            if (defined(moduleName)) {\r\n                var createFunction = getModule(moduleName);\r\n                resultsOrPromises[i] = createFunction(geometry, task.offset);\r\n            } else {\r\n                //Already created geometry\r\n                resultsOrPromises[i] = geometry;\r\n            }\r\n        }\r\n\r\n        return when.all(resultsOrPromises, function(results) {\r\n            return PrimitivePipeline.packCreateGeometryResults(results, transferableObjects);\r\n        });\r\n    }\r\n\r\n    return createTaskProcessorWorker(createGeometry);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createGeometry.js\n// module id = 277\n// module chunks = 0","var map = {\n\t\"./createBoxGeometry\": 83,\n\t\"./createBoxGeometry.js\": 83,\n\t\"./createBoxOutlineGeometry\": 84,\n\t\"./createBoxOutlineGeometry.js\": 84,\n\t\"./createCircleGeometry\": 85,\n\t\"./createCircleGeometry.js\": 85,\n\t\"./createCircleOutlineGeometry\": 86,\n\t\"./createCircleOutlineGeometry.js\": 86,\n\t\"./createCoplanarPolygonGeometry\": 87,\n\t\"./createCoplanarPolygonGeometry.js\": 87,\n\t\"./createCoplanarPolygonOutlineGeometry\": 88,\n\t\"./createCoplanarPolygonOutlineGeometry.js\": 88,\n\t\"./createCorridorGeometry\": 89,\n\t\"./createCorridorGeometry.js\": 89,\n\t\"./createCorridorOutlineGeometry\": 91,\n\t\"./createCorridorOutlineGeometry.js\": 91,\n\t\"./createCylinderGeometry\": 92,\n\t\"./createCylinderGeometry.js\": 92,\n\t\"./createCylinderOutlineGeometry\": 93,\n\t\"./createCylinderOutlineGeometry.js\": 93,\n\t\"./createEllipseGeometry\": 94,\n\t\"./createEllipseGeometry.js\": 94,\n\t\"./createEllipseOutlineGeometry\": 95,\n\t\"./createEllipseOutlineGeometry.js\": 95,\n\t\"./createEllipsoidGeometry\": 96,\n\t\"./createEllipsoidGeometry.js\": 96,\n\t\"./createEllipsoidOutlineGeometry\": 98,\n\t\"./createEllipsoidOutlineGeometry.js\": 98,\n\t\"./createFrustumGeometry\": 99,\n\t\"./createFrustumGeometry.js\": 99,\n\t\"./createFrustumOutlineGeometry\": 100,\n\t\"./createFrustumOutlineGeometry.js\": 100,\n\t\"./createGroundPolylineGeometry\": 101,\n\t\"./createGroundPolylineGeometry.js\": 101,\n\t\"./createPlaneGeometry\": 102,\n\t\"./createPlaneGeometry.js\": 102,\n\t\"./createPlaneOutlineGeometry\": 103,\n\t\"./createPlaneOutlineGeometry.js\": 103,\n\t\"./createPolygonGeometry\": 104,\n\t\"./createPolygonGeometry.js\": 104,\n\t\"./createPolygonOutlineGeometry\": 105,\n\t\"./createPolygonOutlineGeometry.js\": 105,\n\t\"./createPolylineGeometry\": 106,\n\t\"./createPolylineGeometry.js\": 106,\n\t\"./createPolylineVolumeGeometry\": 107,\n\t\"./createPolylineVolumeGeometry.js\": 107,\n\t\"./createPolylineVolumeOutlineGeometry\": 108,\n\t\"./createPolylineVolumeOutlineGeometry.js\": 108,\n\t\"./createRectangleGeometry\": 109,\n\t\"./createRectangleGeometry.js\": 109,\n\t\"./createRectangleOutlineGeometry\": 110,\n\t\"./createRectangleOutlineGeometry.js\": 110,\n\t\"./createSimplePolylineGeometry\": 111,\n\t\"./createSimplePolylineGeometry.js\": 111,\n\t\"./createSphereGeometry\": 112,\n\t\"./createSphereGeometry.js\": 112,\n\t\"./createSphereOutlineGeometry\": 113,\n\t\"./createSphereOutlineGeometry.js\": 113,\n\t\"./createWallGeometry\": 114,\n\t\"./createWallGeometry.js\": 114,\n\t\"./createWallOutlineGeometry\": 115,\n\t\"./createWallOutlineGeometry.js\": 115\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 278;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers nonrecursive create.+Geometry\n// module id = 278\n// module chunks = 0","define([\r\n        './Cartesian2',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './Ellipsoid',\r\n        './GeographicProjection',\r\n        './Math',\r\n        './Rectangle'\r\n    ], function(\r\n        Cartesian2,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Ellipsoid,\r\n        GeographicProjection,\r\n        CesiumMath,\r\n        Rectangle) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A tiling scheme for geometry referenced to a simple {@link GeographicProjection} where\r\n     * longitude and latitude are directly mapped to X and Y.  This projection is commonly\r\n     * known as geographic, equirectangular, equidistant cylindrical, or plate carrée.\r\n     *\r\n     * @alias GeographicTilingScheme\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid whose surface is being tiled. Defaults to\r\n     * the WGS84 ellipsoid.\r\n     * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the tiling scheme.\r\n     * @param {Number} [options.numberOfLevelZeroTilesX=2] The number of tiles in the X direction at level zero of\r\n     * the tile tree.\r\n     * @param {Number} [options.numberOfLevelZeroTilesY=1] The number of tiles in the Y direction at level zero of\r\n     * the tile tree.\r\n     */\r\n    function GeographicTilingScheme(options) {\r\n        options = defaultValue(options, {});\r\n\r\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        this._rectangle = defaultValue(options.rectangle, Rectangle.MAX_VALUE);\r\n        this._projection = new GeographicProjection(this._ellipsoid);\r\n        this._numberOfLevelZeroTilesX = defaultValue(options.numberOfLevelZeroTilesX, 2);\r\n        this._numberOfLevelZeroTilesY = defaultValue(options.numberOfLevelZeroTilesY, 1);\r\n    }\r\n\r\n    defineProperties(GeographicTilingScheme.prototype, {\r\n        /**\r\n         * Gets the ellipsoid that is tiled by this tiling scheme.\r\n         * @memberof GeographicTilingScheme.prototype\r\n         * @type {Ellipsoid}\r\n         */\r\n        ellipsoid : {\r\n            get : function() {\r\n                return this._ellipsoid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the rectangle, in radians, covered by this tiling scheme.\r\n         * @memberof GeographicTilingScheme.prototype\r\n         * @type {Rectangle}\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                return this._rectangle;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the map projection used by this tiling scheme.\r\n         * @memberof GeographicTilingScheme.prototype\r\n         * @type {MapProjection}\r\n         */\r\n        projection : {\r\n            get : function() {\r\n                return this._projection;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Gets the total number of tiles in the X direction at a specified level-of-detail.\r\n     *\r\n     * @param {Number} level The level-of-detail.\r\n     * @returns {Number} The number of tiles in the X direction at the given level.\r\n     */\r\n    GeographicTilingScheme.prototype.getNumberOfXTilesAtLevel = function(level) {\r\n        return this._numberOfLevelZeroTilesX << level;\r\n    };\r\n\r\n    /**\r\n     * Gets the total number of tiles in the Y direction at a specified level-of-detail.\r\n     *\r\n     * @param {Number} level The level-of-detail.\r\n     * @returns {Number} The number of tiles in the Y direction at the given level.\r\n     */\r\n    GeographicTilingScheme.prototype.getNumberOfYTilesAtLevel = function(level) {\r\n        return this._numberOfLevelZeroTilesY << level;\r\n    };\r\n\r\n    /**\r\n     * Transforms a rectangle specified in geodetic radians to the native coordinate system\r\n     * of this tiling scheme.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle to transform.\r\n     * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\r\n     *        should be created.\r\n     * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\r\n     *          is undefined.\r\n     */\r\n    GeographicTilingScheme.prototype.rectangleToNativeRectangle = function(rectangle, result) {\r\n        \r\n\r\n        var west = CesiumMath.toDegrees(rectangle.west);\r\n        var south = CesiumMath.toDegrees(rectangle.south);\r\n        var east = CesiumMath.toDegrees(rectangle.east);\r\n        var north = CesiumMath.toDegrees(rectangle.north);\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\r\n     * of the tiling scheme.\r\n     *\r\n     * @param {Number} x The integer x coordinate of the tile.\r\n     * @param {Number} y The integer y coordinate of the tile.\r\n     * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\r\n     * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\r\n     *        should be created.\r\n     * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\r\n     *          if 'result' is undefined.\r\n     */\r\n    GeographicTilingScheme.prototype.tileXYToNativeRectangle = function(x, y, level, result) {\r\n        var rectangleRadians = this.tileXYToRectangle(x, y, level, result);\r\n        rectangleRadians.west = CesiumMath.toDegrees(rectangleRadians.west);\r\n        rectangleRadians.south = CesiumMath.toDegrees(rectangleRadians.south);\r\n        rectangleRadians.east = CesiumMath.toDegrees(rectangleRadians.east);\r\n        rectangleRadians.north = CesiumMath.toDegrees(rectangleRadians.north);\r\n        return rectangleRadians;\r\n    };\r\n\r\n    /**\r\n     * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\r\n     *\r\n     * @param {Number} x The integer x coordinate of the tile.\r\n     * @param {Number} y The integer y coordinate of the tile.\r\n     * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\r\n     * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\r\n     *        should be created.\r\n     * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\r\n     *          if 'result' is undefined.\r\n     */\r\n    GeographicTilingScheme.prototype.tileXYToRectangle = function(x, y, level, result) {\r\n        var rectangle = this._rectangle;\r\n\r\n        var xTiles = this.getNumberOfXTilesAtLevel(level);\r\n        var yTiles = this.getNumberOfYTilesAtLevel(level);\r\n\r\n        var xTileWidth = rectangle.width / xTiles;\r\n        var west = x * xTileWidth + rectangle.west;\r\n        var east = (x + 1) * xTileWidth + rectangle.west;\r\n\r\n        var yTileHeight = rectangle.height / yTiles;\r\n        var north = rectangle.north - y * yTileHeight;\r\n        var south = rectangle.north - (y + 1) * yTileHeight;\r\n\r\n        if (!defined(result)) {\r\n            result = new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Calculates the tile x, y coordinates of the tile containing\r\n     * a given cartographic position.\r\n     *\r\n     * @param {Cartographic} position The position.\r\n     * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\r\n     * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\r\n     *        should be created.\r\n     * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\r\n     *          if 'result' is undefined.\r\n     */\r\n    GeographicTilingScheme.prototype.positionToTileXY = function(position, level, result) {\r\n        var rectangle = this._rectangle;\r\n        if (!Rectangle.contains(rectangle, position)) {\r\n            // outside the bounds of the tiling scheme\r\n            return undefined;\r\n        }\r\n\r\n        var xTiles = this.getNumberOfXTilesAtLevel(level);\r\n        var yTiles = this.getNumberOfYTilesAtLevel(level);\r\n\r\n        var xTileWidth = rectangle.width / xTiles;\r\n        var yTileHeight = rectangle.height / yTiles;\r\n\r\n        var longitude = position.longitude;\r\n        if (rectangle.east < rectangle.west) {\r\n            longitude += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var xTileCoordinate = (longitude - rectangle.west) / xTileWidth | 0;\r\n        if (xTileCoordinate >= xTiles) {\r\n            xTileCoordinate = xTiles - 1;\r\n        }\r\n\r\n        var yTileCoordinate = (rectangle.north - position.latitude) / yTileHeight | 0;\r\n        if (yTileCoordinate >= yTiles) {\r\n            yTileCoordinate = yTiles - 1;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Cartesian2(xTileCoordinate, yTileCoordinate);\r\n        }\r\n\r\n        result.x = xTileCoordinate;\r\n        result.y = yTileCoordinate;\r\n        return result;\r\n    };\r\n\r\n    return GeographicTilingScheme;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GeographicTilingScheme.js\n// module id = 279\n// module chunks = 0","module.exports = __webpack_public_path__ + \"d6032116cad7588b171e5d825501bdde.json\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Assets/approximateTerrainHeights.json\n// module id = 280\n// module chunks = 0","define([\r\n        './ApproximateTerrainHeights',\r\n        './arrayRemoveDuplicates',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './DeveloperError',\r\n        './Math',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './Ellipsoid',\r\n        './EllipsoidGeodesic',\r\n        './EncodedCartesian3',\r\n        './GeographicProjection',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './IntersectionTests',\r\n        './Matrix3',\r\n        './Plane',\r\n        './Quaternion',\r\n        './Rectangle',\r\n        './WebMercatorProjection'\r\n    ], function(\r\n        ApproximateTerrainHeights,\r\n        arrayRemoveDuplicates,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        ComponentDatatype,\r\n        DeveloperError,\r\n        CesiumMath,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Ellipsoid,\r\n        EllipsoidGeodesic,\r\n        EncodedCartesian3,\r\n        GeographicProjection,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        IntersectionTests,\r\n        Matrix3,\r\n        Plane,\r\n        Quaternion,\r\n        Rectangle,\r\n        WebMercatorProjection) {\r\n    'use strict';\r\n\r\n    var PROJECTIONS = [GeographicProjection, WebMercatorProjection];\r\n    var PROJECTION_COUNT = PROJECTIONS.length;\r\n\r\n    var MITER_BREAK_SMALL = Math.cos(CesiumMath.toRadians(30.0));\r\n    var MITER_BREAK_LARGE = Math.cos(CesiumMath.toRadians(150.0));\r\n\r\n    // Initial heights for constructing the wall.\r\n    // Keeping WALL_INITIAL_MIN_HEIGHT near the ellipsoid surface helps\r\n    // prevent precision problems with planes in the shader.\r\n    // Putting the start point of a plane at ApproximateTerrainHeights._defaultMinTerrainHeight,\r\n    // which is a highly conservative bound, usually puts the plane origin several thousands\r\n    // of meters away from the actual terrain, causing floating point problems when checking\r\n    // fragments on terrain against the plane.\r\n    // Ellipsoid height is generally much closer.\r\n    // The initial max height is arbitrary.\r\n    // Both heights are corrected using ApproximateTerrainHeights for computing the actual volume geometry.\r\n    var WALL_INITIAL_MIN_HEIGHT = 0.0;\r\n    var WALL_INITIAL_MAX_HEIGHT = 1000.0;\r\n\r\n    /**\r\n     * A description of a polyline on terrain. Only to be used with {@link GroundPolylinePrimitive}.\r\n     *\r\n     * @alias GroundPolylineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Options with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the polyline's points. Heights above the ellipsoid will be ignored.\r\n     * @param {Number} [options.width=1.0] The screen space width in pixels.\r\n     * @param {Number} [options.granularity=9999.0] The distance interval in meters used for interpolating options.points. Defaults to 9999.0 meters. Zero indicates no interpolation.\r\n     * @param {Boolean} [options.loop=false] Whether during geometry creation a line segment will be added between the last and first line positions to make this Polyline a loop.\r\n     *\r\n     * @exception {DeveloperError} At least two positions are required.\r\n     *\r\n     * @see GroundPolylinePrimitive\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n     *   -112.1340164450331, 36.05494287836128,\r\n     *   -112.08821010582645, 36.097804071380715,\r\n     *   -112.13296079730024, 36.168769146801104\r\n     * ]);\r\n     *\r\n     * var geometry = new Cesium.GroundPolylineGeometry({\r\n     *   positions : positions\r\n     * });\r\n     */\r\n    function GroundPolylineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n\r\n        \r\n\r\n        /**\r\n         * The screen space width in pixels.\r\n         * @type {Number}\r\n         */\r\n        this.width = defaultValue(options.width, 1.0); // Doesn't get packed, not necessary for computing geometry.\r\n\r\n        this._positions = positions;\r\n\r\n        /**\r\n         * The distance interval used for interpolating options.points. Zero indicates no interpolation.\r\n         * Default of 9999.0 allows centimeter accuracy with 32 bit floating point.\r\n         * @type {Boolean}\r\n         * @default 9999.0\r\n         */\r\n        this.granularity = defaultValue(options.granularity, 9999.0);\r\n\r\n        /**\r\n         * Whether during geometry creation a line segment will be added between the last and first line positions to make this Polyline a loop.\r\n         * If the geometry has two positions this parameter will be ignored.\r\n         * @type {Boolean}\r\n         * @default false\r\n         */\r\n        this.loop = defaultValue(options.loop, false);\r\n\r\n        this._ellipsoid = Ellipsoid.WGS84;\r\n\r\n        // MapProjections can't be packed, so store the index to a known MapProjection.\r\n        this._projectionIndex = 0;\r\n        this._workerName = 'createGroundPolylineGeometry';\r\n\r\n        // Used by GroundPolylinePrimitive to signal worker that scenemode is 3D only.\r\n        this._scene3DOnly = false;\r\n    }\r\n\r\n    defineProperties(GroundPolylineGeometry.prototype, {\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @memberof GroundPolylineGeometry.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         * @private\r\n         */\r\n        packedLength: {\r\n            get: function() {\r\n                return 1.0 + this._positions.length * 3 + 1.0 + 1.0 + Ellipsoid.packedLength + 1.0 + 1.0;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Set the GroundPolylineGeometry's projection and ellipsoid.\r\n     * Used by GroundPolylinePrimitive to signal scene information to the geometry for generating 2D attributes.\r\n     *\r\n     * @param {GroundPolylineGeometry} groundPolylineGeometry GroundPolylinGeometry describing a polyline on terrain.\r\n     * @param {Projection} mapProjection A MapProjection used for projecting cartographic coordinates to 2D.\r\n     * @private\r\n     */\r\n    GroundPolylineGeometry.setProjectionAndEllipsoid = function(groundPolylineGeometry, mapProjection) {\r\n        var projectionIndex = 0;\r\n        for (var i = 0; i < PROJECTION_COUNT; i++) {\r\n            if (mapProjection instanceof PROJECTIONS[i]) {\r\n                projectionIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        groundPolylineGeometry._projectionIndex = projectionIndex;\r\n        groundPolylineGeometry._ellipsoid = mapProjection.ellipsoid;\r\n    };\r\n\r\n    var cart3Scratch1 = new Cartesian3();\r\n    var cart3Scratch2 = new Cartesian3();\r\n    var cart3Scratch3 = new Cartesian3();\r\n    function computeRightNormal(start, end, maxHeight, ellipsoid, result) {\r\n        var startBottom = getPosition(ellipsoid, start, 0.0, cart3Scratch1);\r\n        var startTop = getPosition(ellipsoid, start, maxHeight, cart3Scratch2);\r\n        var endBottom = getPosition(ellipsoid, end, 0.0, cart3Scratch3);\r\n\r\n        var up = direction(startTop, startBottom, cart3Scratch2);\r\n        var forward = direction(endBottom, startBottom, cart3Scratch3);\r\n\r\n        Cartesian3.cross(forward, up, result);\r\n        return Cartesian3.normalize(result, result);\r\n    }\r\n\r\n    var interpolatedCartographicScratch = new Cartographic();\r\n    var interpolatedBottomScratch = new Cartesian3();\r\n    var interpolatedTopScratch = new Cartesian3();\r\n    var interpolatedNormalScratch = new Cartesian3();\r\n    function interpolateSegment(start, end, minHeight, maxHeight, granularity, ellipsoid, normalsArray, bottomPositionsArray, topPositionsArray, cartographicsArray) {\r\n        if (granularity === 0.0) {\r\n            return;\r\n        }\r\n        var ellipsoidGeodesic = new EllipsoidGeodesic(start, end, ellipsoid);\r\n        var surfaceDistance = ellipsoidGeodesic.surfaceDistance;\r\n        if (surfaceDistance < granularity) {\r\n            return;\r\n        }\r\n\r\n        // Compute rightwards normal applicable at all interpolated points\r\n        var interpolatedNormal = computeRightNormal(start, end, maxHeight, ellipsoid, interpolatedNormalScratch);\r\n\r\n        var segments = Math.ceil(surfaceDistance / granularity);\r\n        var interpointDistance = surfaceDistance / segments;\r\n        var distanceFromStart = interpointDistance;\r\n        var pointsToAdd = segments - 1;\r\n        var packIndex = normalsArray.length;\r\n        for (var i = 0; i < pointsToAdd; i++) {\r\n            var interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(distanceFromStart, interpolatedCartographicScratch);\r\n            var interpolatedBottom = getPosition(ellipsoid, interpolatedCartographic, minHeight, interpolatedBottomScratch);\r\n            var interpolatedTop = getPosition(ellipsoid, interpolatedCartographic, maxHeight, interpolatedTopScratch);\r\n\r\n            Cartesian3.pack(interpolatedNormal, normalsArray, packIndex);\r\n            Cartesian3.pack(interpolatedBottom, bottomPositionsArray, packIndex);\r\n            Cartesian3.pack(interpolatedTop, topPositionsArray, packIndex);\r\n            cartographicsArray.push(interpolatedCartographic.latitude);\r\n            cartographicsArray.push(interpolatedCartographic.longitude);\r\n\r\n            packIndex += 3;\r\n            distanceFromStart += interpointDistance;\r\n        }\r\n    }\r\n\r\n    var heightlessCartographicScratch = new Cartographic();\r\n    function getPosition(ellipsoid, cartographic, height, result) {\r\n        Cartographic.clone(cartographic, heightlessCartographicScratch);\r\n        heightlessCartographicScratch.height = height;\r\n        return Cartographic.toCartesian(heightlessCartographicScratch, ellipsoid, result);\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolygonGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    GroundPolylineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        var index = defaultValue(startingIndex, 0);\r\n\r\n        var positions = value._positions;\r\n        var positionsLength = positions.length;\r\n\r\n        array[index++] = positionsLength;\r\n\r\n        for (var i = 0; i < positionsLength; ++i) {\r\n            var cartesian = positions[i];\r\n            Cartesian3.pack(cartesian, array, index);\r\n            index += 3;\r\n        }\r\n\r\n        array[index++] = value.granularity;\r\n        array[index++] = value.loop ? 1.0 : 0.0;\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, index);\r\n        index += Ellipsoid.packedLength;\r\n\r\n        array[index++] = value._projectionIndex;\r\n        array[index++] = value._scene3DOnly ? 1.0 : 0.0;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolygonGeometry} [result] The object into which to store the result.\r\n     */\r\n    GroundPolylineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        var index = defaultValue(startingIndex, 0);\r\n        var positionsLength = array[index++];\r\n        var positions = new Array(positionsLength);\r\n\r\n        for (var i = 0; i < positionsLength; i++) {\r\n            positions[i] = Cartesian3.unpack(array, index);\r\n            index += 3;\r\n        }\r\n\r\n        var granularity = array[index++];\r\n        var loop = array[index++] === 1.0;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, index);\r\n        index += Ellipsoid.packedLength;\r\n\r\n        var projectionIndex = array[index++];\r\n        var scene3DOnly = (array[index++] === 1.0);\r\n\r\n        if (!defined(result)) {\r\n            var geometry = new GroundPolylineGeometry({\r\n                positions : positions,\r\n                granularity : granularity,\r\n                loop : loop,\r\n                ellipsoid : ellipsoid\r\n            });\r\n            geometry._projectionIndex = projectionIndex;\r\n            geometry._scene3DOnly = scene3DOnly;\r\n            return geometry;\r\n        }\r\n\r\n        result._positions = positions;\r\n        result.granularity = granularity;\r\n        result.loop = loop;\r\n        result._ellipsoid = ellipsoid;\r\n        result._projectionIndex = projectionIndex;\r\n        result._scene3DOnly = scene3DOnly;\r\n\r\n        return result;\r\n    };\r\n\r\n    function direction(target, origin, result) {\r\n        Cartesian3.subtract(target, origin, result);\r\n        Cartesian3.normalize(result, result);\r\n        return result;\r\n    }\r\n\r\n    var toPreviousScratch = new Cartesian3();\r\n    var toNextScratch = new Cartesian3();\r\n    var forwardScratch = new Cartesian3();\r\n    var coplanarNormalScratch = new Cartesian3();\r\n    var coplanarPlaneScratch = new Plane(Cartesian3.UNIT_X, 0.0);\r\n    var vertexUpScratch = new Cartesian3();\r\n    var cosine90 = 0.0;\r\n    function computeVertexMiterNormal(previousBottom, vertexBottom, vertexTop, nextBottom, result) {\r\n        var up = direction(vertexTop, vertexBottom, vertexUpScratch);\r\n        var toPrevious = direction(previousBottom, vertexBottom, toPreviousScratch);\r\n        var toNext = direction(nextBottom, vertexBottom, toNextScratch);\r\n\r\n        // Check if points are coplanar in a right-side-pointing plane that contains \"up.\"\r\n        // This is roughly equivalent to the points being colinear in cartographic space.\r\n        var coplanarNormal = Cartesian3.cross(up, toPrevious, coplanarNormalScratch);\r\n        coplanarNormal = Cartesian3.normalize(coplanarNormal, coplanarNormal);\r\n        var coplanarPlane = Plane.fromPointNormal(vertexBottom, coplanarNormal, coplanarPlaneScratch);\r\n        var nextBottomDistance = Plane.getPointDistance(coplanarPlane, nextBottom);\r\n        if (CesiumMath.equalsEpsilon(nextBottomDistance, 0.0, CesiumMath.EPSILON7)) {\r\n            // If the points are coplanar, point the normal in the direction of the plane\r\n            Cartesian3.clone(coplanarNormal, result);\r\n            return result;\r\n        }\r\n\r\n        // Average directions to previous and to next\r\n        result = Cartesian3.add(toNext, toPrevious, result);\r\n        result = Cartesian3.normalize(result, result);\r\n\r\n        // Rotate this direction to be orthogonal to up\r\n        var forward = Cartesian3.cross(up, result, forwardScratch);\r\n        Cartesian3.normalize(forward, forward);\r\n        Cartesian3.cross(forward, up, result);\r\n        Cartesian3.normalize(result, result);\r\n\r\n        // Flip the normal if it isn't pointing roughly bound right (aka if forward is pointing more \"backwards\")\r\n        if (Cartesian3.dot(toNext, forward) < cosine90) {\r\n            result = Cartesian3.negate(result, result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    var XZ_PLANE = Plane.fromPointNormal(Cartesian3.ZERO, Cartesian3.UNIT_Y);\r\n\r\n    var previousBottomScratch = new Cartesian3();\r\n    var vertexBottomScratch = new Cartesian3();\r\n    var vertexTopScratch = new Cartesian3();\r\n    var nextBottomScratch = new Cartesian3();\r\n    var vertexNormalScratch = new Cartesian3();\r\n    var intersectionScratch = new Cartesian3();\r\n    /**\r\n     * Computes shadow volumes for the ground polyline, consisting of its vertices, indices, and a bounding sphere.\r\n     * Vertices are \"fat,\" packing all the data needed in each volume to describe a line on terrain.\r\n     * Should not be called independent of {@link GroundPolylinePrimitive}.\r\n     *\r\n     * @param {GroundPolylineGeometry} groundPolylineGeometry\r\n     * @private\r\n     */\r\n    GroundPolylineGeometry.createGeometry = function(groundPolylineGeometry) {\r\n        var compute2dAttributes = !groundPolylineGeometry._scene3DOnly;\r\n        var loop = groundPolylineGeometry.loop;\r\n        var ellipsoid = groundPolylineGeometry._ellipsoid;\r\n        var granularity = groundPolylineGeometry.granularity;\r\n        var projection = new PROJECTIONS[groundPolylineGeometry._projectionIndex](ellipsoid);\r\n\r\n        var minHeight = WALL_INITIAL_MIN_HEIGHT;\r\n        var maxHeight = WALL_INITIAL_MAX_HEIGHT;\r\n\r\n        var index;\r\n        var i;\r\n\r\n        var positions = groundPolylineGeometry._positions;\r\n        var positionsLength = positions.length;\r\n\r\n        if (positionsLength === 2) {\r\n            loop = false;\r\n        }\r\n\r\n        // Split positions across the IDL and the Prime Meridian as well.\r\n        // Split across prime meridian because very large geometries crossing the Prime Meridian but not the IDL\r\n        // may get split by the plane of IDL + Prime Meridian.\r\n        var p0;\r\n        var p1;\r\n        var intersection;\r\n        var splitPositions = [positions[0]];\r\n        for (i = 0; i < positionsLength - 1; i++) {\r\n            p0 = positions[i];\r\n            p1 = positions[i + 1];\r\n            intersection = IntersectionTests.lineSegmentPlane(p0, p1, XZ_PLANE, intersectionScratch);\r\n            if (defined(intersection) &&\r\n                !Cartesian3.equalsEpsilon(intersection, p0, CesiumMath.EPSILON7) &&\r\n                !Cartesian3.equalsEpsilon(intersection, p1, CesiumMath.EPSILON7)) {\r\n                splitPositions.push(Cartesian3.clone(intersection));\r\n            }\r\n            splitPositions.push(p1);\r\n        }\r\n\r\n        if (loop) {\r\n            p0 = positions[positionsLength - 1];\r\n            p1 = positions[0];\r\n            intersection = IntersectionTests.lineSegmentPlane(p0, p1, XZ_PLANE, intersectionScratch);\r\n            if (defined(intersection) &&\r\n                !Cartesian3.equalsEpsilon(intersection, p0, CesiumMath.EPSILON7) &&\r\n                !Cartesian3.equalsEpsilon(intersection, p1, CesiumMath.EPSILON7)) {\r\n                splitPositions.push(Cartesian3.clone(intersection));\r\n            }\r\n        }\r\n        var cartographicsLength = splitPositions.length;\r\n\r\n        var cartographics = new Array(cartographicsLength);\r\n        for (i = 0; i < cartographicsLength; i++) {\r\n            var cartographic = Cartographic.fromCartesian(splitPositions[i], ellipsoid);\r\n            cartographic.height = 0.0;\r\n            cartographics[i] = cartographic;\r\n        }\r\n\r\n        cartographics = arrayRemoveDuplicates(cartographics, Cartographic.equalsEpsilon);\r\n        cartographicsLength = cartographics.length;\r\n\r\n        if (cartographicsLength < 2) {\r\n            return undefined;\r\n        }\r\n\r\n        /**** Build heap-side arrays for positions, interpolated cartographics, and normals from which to compute vertices ****/\r\n        // We build a \"wall\" and then decompose it into separately connected component \"volumes\" because we need a lot\r\n        // of information about the wall. Also, this simplifies interpolation.\r\n        // Convention: \"next\" and \"end\" are locally forward to each segment of the wall,\r\n        // and we are computing normals pointing towards the local right side of the vertices in each segment.\r\n        var cartographicsArray = [];\r\n        var normalsArray = [];\r\n        var bottomPositionsArray = [];\r\n        var topPositionsArray = [];\r\n\r\n        var previousBottom = previousBottomScratch;\r\n        var vertexBottom = vertexBottomScratch;\r\n        var vertexTop = vertexTopScratch;\r\n        var nextBottom = nextBottomScratch;\r\n        var vertexNormal = vertexNormalScratch;\r\n\r\n        // First point - either loop or attach a \"perpendicular\" normal\r\n        var startCartographic = cartographics[0];\r\n        var nextCartographic = cartographics[1];\r\n\r\n        var prestartCartographic = cartographics[cartographicsLength - 1];\r\n        previousBottom = getPosition(ellipsoid, prestartCartographic, minHeight, previousBottom);\r\n        nextBottom = getPosition(ellipsoid, nextCartographic, minHeight, nextBottom);\r\n        vertexBottom = getPosition(ellipsoid, startCartographic, minHeight, vertexBottom);\r\n        vertexTop = getPosition(ellipsoid, startCartographic, maxHeight, vertexTop);\r\n\r\n        if (loop) {\r\n            vertexNormal = computeVertexMiterNormal(previousBottom, vertexBottom, vertexTop, nextBottom, vertexNormal);\r\n        } else {\r\n            vertexNormal = computeRightNormal(startCartographic, nextCartographic, maxHeight, ellipsoid, vertexNormal);\r\n        }\r\n\r\n        Cartesian3.pack(vertexNormal, normalsArray, 0);\r\n        Cartesian3.pack(vertexBottom, bottomPositionsArray, 0);\r\n        Cartesian3.pack(vertexTop, topPositionsArray, 0);\r\n        cartographicsArray.push(startCartographic.latitude);\r\n        cartographicsArray.push(startCartographic.longitude);\r\n\r\n        interpolateSegment(startCartographic, nextCartographic, minHeight, maxHeight, granularity, ellipsoid, normalsArray, bottomPositionsArray, topPositionsArray, cartographicsArray);\r\n\r\n        // All inbetween points\r\n        for (i = 1; i < cartographicsLength - 1; ++i) {\r\n            previousBottom = Cartesian3.clone(vertexBottom, previousBottom);\r\n            vertexBottom = Cartesian3.clone(nextBottom, vertexBottom);\r\n            var vertexCartographic = cartographics[i];\r\n            getPosition(ellipsoid, vertexCartographic, maxHeight, vertexTop);\r\n            getPosition(ellipsoid, cartographics[i + 1], minHeight, nextBottom);\r\n\r\n            computeVertexMiterNormal(previousBottom, vertexBottom, vertexTop, nextBottom, vertexNormal);\r\n\r\n            index = normalsArray.length;\r\n            Cartesian3.pack(vertexNormal, normalsArray, index);\r\n            Cartesian3.pack(vertexBottom, bottomPositionsArray, index);\r\n            Cartesian3.pack(vertexTop, topPositionsArray, index);\r\n            cartographicsArray.push(vertexCartographic.latitude);\r\n            cartographicsArray.push(vertexCartographic.longitude);\r\n\r\n            interpolateSegment(cartographics[i], cartographics[i + 1], minHeight, maxHeight, granularity, ellipsoid, normalsArray, bottomPositionsArray, topPositionsArray, cartographicsArray);\r\n        }\r\n\r\n        // Last point - either loop or attach a normal \"perpendicular\" to the wall.\r\n        var endCartographic = cartographics[cartographicsLength - 1];\r\n        var preEndCartographic = cartographics[cartographicsLength - 2];\r\n\r\n        vertexBottom = getPosition(ellipsoid, endCartographic, minHeight, vertexBottom);\r\n        vertexTop = getPosition(ellipsoid, endCartographic, maxHeight, vertexTop);\r\n\r\n        if (loop) {\r\n            var postEndCartographic = cartographics[0];\r\n            previousBottom = getPosition(ellipsoid, preEndCartographic, minHeight, previousBottom);\r\n            nextBottom = getPosition(ellipsoid, postEndCartographic, minHeight, nextBottom);\r\n\r\n            vertexNormal = computeVertexMiterNormal(previousBottom, vertexBottom, vertexTop, nextBottom, vertexNormal);\r\n        } else {\r\n            vertexNormal = computeRightNormal(preEndCartographic, endCartographic, maxHeight, ellipsoid, vertexNormal);\r\n        }\r\n\r\n        index = normalsArray.length;\r\n        Cartesian3.pack(vertexNormal, normalsArray, index);\r\n        Cartesian3.pack(vertexBottom, bottomPositionsArray, index);\r\n        Cartesian3.pack(vertexTop, topPositionsArray, index);\r\n        cartographicsArray.push(endCartographic.latitude);\r\n        cartographicsArray.push(endCartographic.longitude);\r\n\r\n        if (loop) {\r\n            interpolateSegment(endCartographic, startCartographic, minHeight, maxHeight, granularity, ellipsoid, normalsArray, bottomPositionsArray, topPositionsArray, cartographicsArray);\r\n            index = normalsArray.length;\r\n            for (i = 0; i < 3; ++i) {\r\n                normalsArray[index + i] = normalsArray[i];\r\n                bottomPositionsArray[index + i] = bottomPositionsArray[i];\r\n                topPositionsArray[index + i] = topPositionsArray[i];\r\n            }\r\n            cartographicsArray.push(startCartographic.latitude);\r\n            cartographicsArray.push(startCartographic.longitude);\r\n        }\r\n\r\n        return generateGeometryAttributes(loop, projection, bottomPositionsArray, topPositionsArray, normalsArray, cartographicsArray, compute2dAttributes);\r\n    };\r\n\r\n    // If the end normal angle is too steep compared to the direction of the line segment,\r\n    // \"break\" the miter by rotating the normal 90 degrees around the \"up\" direction at the point\r\n    // For ultra precision we would want to project into a plane, but in practice this is sufficient.\r\n    var lineDirectionScratch = new Cartesian3();\r\n    var matrix3Scratch = new Matrix3();\r\n    var quaternionScratch = new Quaternion();\r\n    function breakMiter(endGeometryNormal, startBottom, endBottom, endTop) {\r\n        var lineDirection = direction(endBottom, startBottom, lineDirectionScratch);\r\n\r\n        var dot = Cartesian3.dot(lineDirection, endGeometryNormal);\r\n        if (dot > MITER_BREAK_SMALL || dot < MITER_BREAK_LARGE) {\r\n            var vertexUp = direction(endTop, endBottom, vertexUpScratch);\r\n            var angle = dot < MITER_BREAK_LARGE ? CesiumMath.PI_OVER_TWO : -CesiumMath.PI_OVER_TWO;\r\n            var quaternion = Quaternion.fromAxisAngle(vertexUp, angle, quaternionScratch);\r\n            var rotationMatrix = Matrix3.fromQuaternion(quaternion, matrix3Scratch);\r\n            Matrix3.multiplyByVector(rotationMatrix, endGeometryNormal, endGeometryNormal);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var endPosCartographicScratch = new Cartographic();\r\n    var normalStartpointScratch = new Cartesian3();\r\n    var normalEndpointScratch = new Cartesian3();\r\n    function projectNormal(projection, cartographic, normal, projectedPosition, result) {\r\n        var position = Cartographic.toCartesian(cartographic, projection._ellipsoid, normalStartpointScratch);\r\n        var normalEndpoint = Cartesian3.add(position, normal, normalEndpointScratch);\r\n        var flipNormal = false;\r\n\r\n        var ellipsoid = projection._ellipsoid;\r\n        var normalEndpointCartographic = ellipsoid.cartesianToCartographic(normalEndpoint, endPosCartographicScratch);\r\n        // If normal crosses the IDL, go the other way and flip the result.\r\n        // In practice this almost never happens because the cartographic start\r\n        // and end points of each segment are \"nudged\" to be on the same side\r\n        // of the IDL and slightly away from the IDL.\r\n        if (Math.abs(cartographic.longitude - normalEndpointCartographic.longitude) > CesiumMath.PI_OVER_TWO) {\r\n            flipNormal = true;\r\n            normalEndpoint = Cartesian3.subtract(position, normal, normalEndpointScratch);\r\n            normalEndpointCartographic = ellipsoid.cartesianToCartographic(normalEndpoint, endPosCartographicScratch);\r\n        }\r\n\r\n        normalEndpointCartographic.height = 0.0;\r\n        var normalEndpointProjected = projection.project(normalEndpointCartographic, result);\r\n        result = Cartesian3.subtract(normalEndpointProjected, projectedPosition, result);\r\n        result.z = 0.0;\r\n        result = Cartesian3.normalize(result, result);\r\n        if (flipNormal) {\r\n            Cartesian3.negate(result, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    var adjustHeightNormalScratch = new Cartesian3();\r\n    var adjustHeightOffsetScratch = new Cartesian3();\r\n    function adjustHeights(bottom, top, minHeight, maxHeight, adjustHeightBottom, adjustHeightTop) {\r\n        // bottom and top should be at WALL_INITIAL_MIN_HEIGHT and WALL_INITIAL_MAX_HEIGHT, respectively\r\n        var adjustHeightNormal = Cartesian3.subtract(top, bottom, adjustHeightNormalScratch);\r\n        Cartesian3.normalize(adjustHeightNormal, adjustHeightNormal);\r\n\r\n        var distanceForBottom = minHeight - WALL_INITIAL_MIN_HEIGHT;\r\n        var adjustHeightOffset = Cartesian3.multiplyByScalar(adjustHeightNormal, distanceForBottom, adjustHeightOffsetScratch);\r\n        Cartesian3.add(bottom, adjustHeightOffset, adjustHeightBottom);\r\n\r\n        var distanceForTop = maxHeight - WALL_INITIAL_MAX_HEIGHT;\r\n        adjustHeightOffset = Cartesian3.multiplyByScalar(adjustHeightNormal, distanceForTop, adjustHeightOffsetScratch);\r\n        Cartesian3.add(top, adjustHeightOffset, adjustHeightTop);\r\n    }\r\n\r\n    var nudgeDirectionScratch = new Cartesian3();\r\n    function nudgeXZ(start, end) {\r\n        var startToXZdistance = Plane.getPointDistance(XZ_PLANE, start);\r\n        var endToXZdistance = Plane.getPointDistance(XZ_PLANE, end);\r\n        var offset = nudgeDirectionScratch;\r\n        // Larger epsilon than what's used in GeometryPipeline, a centimeter in world space\r\n        if (CesiumMath.equalsEpsilon(startToXZdistance, 0.0, CesiumMath.EPSILON2)) {\r\n            offset = direction(end, start, offset);\r\n            Cartesian3.multiplyByScalar(offset, CesiumMath.EPSILON2, offset);\r\n            Cartesian3.add(start, offset, start);\r\n        } else if (CesiumMath.equalsEpsilon(endToXZdistance, 0.0, CesiumMath.EPSILON2)) {\r\n            offset = direction(start, end, offset);\r\n            Cartesian3.multiplyByScalar(offset, CesiumMath.EPSILON2, offset);\r\n            Cartesian3.add(end, offset, end);\r\n        }\r\n    }\r\n\r\n    // \"Nudge\" cartographic coordinates so start and end are on the same side of the IDL.\r\n    // Nudge amounts are tiny, basically just an IDL flip.\r\n    // Only used for 2D/CV.\r\n    function nudgeCartographic(start, end) {\r\n        var absStartLon = Math.abs(start.longitude);\r\n        var absEndLon = Math.abs(end.longitude);\r\n        if (CesiumMath.equalsEpsilon(absStartLon, CesiumMath.PI, CesiumMath.EPSILON11)) {\r\n            var endSign = CesiumMath.sign(end.longitude);\r\n            start.longitude = endSign * (absStartLon - CesiumMath.EPSILON11);\r\n            return 1;\r\n        } else if (CesiumMath.equalsEpsilon(absEndLon, CesiumMath.PI, CesiumMath.EPSILON11)) {\r\n            var startSign = CesiumMath.sign(start.longitude);\r\n            end.longitude = startSign * (absEndLon - CesiumMath.EPSILON11);\r\n            return 2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    var startCartographicScratch = new Cartographic();\r\n    var endCartographicScratch = new Cartographic();\r\n\r\n    var segmentStartTopScratch = new Cartesian3();\r\n    var segmentEndTopScratch = new Cartesian3();\r\n    var segmentStartBottomScratch = new Cartesian3();\r\n    var segmentEndBottomScratch = new Cartesian3();\r\n    var segmentStartNormalScratch = new Cartesian3();\r\n    var segmentEndNormalScratch = new Cartesian3();\r\n\r\n    var getHeightCartographics = [startCartographicScratch, endCartographicScratch];\r\n    var getHeightRectangleScratch = new Rectangle();\r\n\r\n    var adjustHeightStartTopScratch = new Cartesian3();\r\n    var adjustHeightEndTopScratch = new Cartesian3();\r\n    var adjustHeightStartBottomScratch = new Cartesian3();\r\n    var adjustHeightEndBottomScratch = new Cartesian3();\r\n\r\n    var segmentStart2DScratch = new Cartesian3();\r\n    var segmentEnd2DScratch = new Cartesian3();\r\n    var segmentStartNormal2DScratch = new Cartesian3();\r\n    var segmentEndNormal2DScratch = new Cartesian3();\r\n\r\n    var offsetScratch = new Cartesian3();\r\n    var startUpScratch = new Cartesian3();\r\n    var endUpScratch = new Cartesian3();\r\n    var rightScratch = new Cartesian3();\r\n    var startPlaneNormalScratch = new Cartesian3();\r\n    var endPlaneNormalScratch = new Cartesian3();\r\n    var encodeScratch = new EncodedCartesian3();\r\n\r\n    var encodeScratch2D = new EncodedCartesian3();\r\n    var forwardOffset2DScratch = new Cartesian3();\r\n    var right2DScratch = new Cartesian3();\r\n\r\n    var normalNudgeScratch = new Cartesian3();\r\n\r\n    var scratchBoundingSpheres = [new BoundingSphere(), new BoundingSphere()];\r\n\r\n    // Winding order is reversed so each segment's volume is inside-out\r\n    var REFERENCE_INDICES = [\r\n        0, 2, 1, 0, 3, 2, // right\r\n        0, 7, 3, 0, 4, 7, // start\r\n        0, 5, 4, 0, 1, 5, // bottom\r\n        5, 7, 4, 5, 6, 7, // left\r\n        5, 2, 6, 5, 1, 2, // end\r\n        3, 6, 2, 3, 7, 6 // top\r\n    ];\r\n    var REFERENCE_INDICES_LENGTH = REFERENCE_INDICES.length;\r\n\r\n    // Decompose the \"wall\" into a series of shadow volumes.\r\n    // Each shadow volume's vertices encode a description of the line it contains,\r\n    // including mitering planes at the end points, a plane along the line itself,\r\n    // and attributes for computing length-wise texture coordinates.\r\n    function generateGeometryAttributes(loop, projection, bottomPositionsArray, topPositionsArray, normalsArray, cartographicsArray, compute2dAttributes) {\r\n        var i;\r\n        var index;\r\n        var ellipsoid = projection._ellipsoid;\r\n\r\n        // Each segment will have 8 vertices\r\n        var segmentCount = (bottomPositionsArray.length / 3) - 1;\r\n        var vertexCount = segmentCount * 8;\r\n        var arraySizeVec4 = vertexCount * 4;\r\n        var indexCount = segmentCount * 36;\r\n\r\n        var indices = vertexCount > 65535 ? new Uint32Array(indexCount) : new Uint16Array(indexCount);\r\n        var positionsArray = new Float64Array(vertexCount * 3);\r\n\r\n        var startHiAndForwardOffsetX = new Float32Array(arraySizeVec4);\r\n        var startLoAndForwardOffsetY = new Float32Array(arraySizeVec4);\r\n        var startNormalAndForwardOffsetZ = new Float32Array(arraySizeVec4);\r\n        var endNormalAndTextureCoordinateNormalizationX = new Float32Array(arraySizeVec4);\r\n        var rightNormalAndTextureCoordinateNormalizationY = new Float32Array(arraySizeVec4);\r\n\r\n        var startHiLo2D;\r\n        var offsetAndRight2D;\r\n        var startEndNormals2D;\r\n        var texcoordNormalization2D;\r\n\r\n        if (compute2dAttributes) {\r\n            startHiLo2D = new Float32Array(arraySizeVec4);\r\n            offsetAndRight2D = new Float32Array(arraySizeVec4);\r\n            startEndNormals2D = new Float32Array(arraySizeVec4);\r\n            texcoordNormalization2D = new Float32Array(vertexCount * 2);\r\n        }\r\n\r\n        /*** Compute total lengths for texture coordinate normalization ***/\r\n        // 2D\r\n        var cartographicsLength = cartographicsArray.length / 2;\r\n        var length2D = 0.0;\r\n\r\n        var startCartographic = startCartographicScratch;\r\n        startCartographic.height = 0.0;\r\n        var endCartographic = endCartographicScratch;\r\n        endCartographic.height = 0.0;\r\n\r\n        var segmentStartCartesian = segmentStartTopScratch;\r\n        var segmentEndCartesian = segmentEndTopScratch;\r\n\r\n        if (compute2dAttributes) {\r\n            index = 0;\r\n            for (i = 1; i < cartographicsLength; i++) {\r\n                // Don't clone anything from previous segment b/c possible IDL touch\r\n                startCartographic.latitude = cartographicsArray[index];\r\n                startCartographic.longitude = cartographicsArray[index + 1];\r\n                endCartographic.latitude = cartographicsArray[index + 2];\r\n                endCartographic.longitude = cartographicsArray[index + 3];\r\n\r\n                segmentStartCartesian = projection.project(startCartographic, segmentStartCartesian);\r\n                segmentEndCartesian = projection.project(endCartographic, segmentEndCartesian);\r\n                length2D += Cartesian3.distance(segmentStartCartesian, segmentEndCartesian);\r\n                index += 2;\r\n            }\r\n        }\r\n\r\n        // 3D\r\n        var positionsLength = topPositionsArray.length / 3;\r\n        segmentEndCartesian = Cartesian3.unpack(topPositionsArray, 0, segmentEndCartesian);\r\n        var length3D = 0.0;\r\n\r\n        index = 3;\r\n        for (i = 1; i < positionsLength; i++) {\r\n            segmentStartCartesian = Cartesian3.clone(segmentEndCartesian, segmentStartCartesian);\r\n            segmentEndCartesian = Cartesian3.unpack(topPositionsArray, index, segmentEndCartesian);\r\n            length3D += Cartesian3.distance(segmentStartCartesian, segmentEndCartesian);\r\n            index += 3;\r\n        }\r\n\r\n        /*** Generate segments ***/\r\n        var j;\r\n        index = 3;\r\n        var cartographicsIndex = 0;\r\n        var vec2sWriteIndex = 0;\r\n        var vec3sWriteIndex = 0;\r\n        var vec4sWriteIndex = 0;\r\n        var miterBroken = false;\r\n\r\n        var endBottom = Cartesian3.unpack(bottomPositionsArray, 0, segmentEndBottomScratch);\r\n        var endTop = Cartesian3.unpack(topPositionsArray, 0, segmentEndTopScratch);\r\n        var endGeometryNormal = Cartesian3.unpack(normalsArray, 0, segmentEndNormalScratch);\r\n\r\n        if (loop) {\r\n            var preEndBottom = Cartesian3.unpack(bottomPositionsArray, bottomPositionsArray.length - 6, segmentStartBottomScratch);\r\n            if (breakMiter(endGeometryNormal, preEndBottom, endBottom, endTop)) {\r\n                // Miter broken as if for the last point in the loop, needs to be inverted for first point (clone of endBottom)\r\n                endGeometryNormal = Cartesian3.negate(endGeometryNormal, endGeometryNormal);\r\n            }\r\n        }\r\n\r\n        var lengthSoFar3D = 0.0;\r\n        var lengthSoFar2D = 0.0;\r\n\r\n        // For translating bounding volume\r\n        var sumHeights = 0.0;\r\n\r\n        for (i = 0; i < segmentCount; i++) {\r\n            var startBottom = Cartesian3.clone(endBottom, segmentStartBottomScratch);\r\n            var startTop = Cartesian3.clone(endTop, segmentStartTopScratch);\r\n            var startGeometryNormal = Cartesian3.clone(endGeometryNormal, segmentStartNormalScratch);\r\n\r\n            if (miterBroken) {\r\n                startGeometryNormal = Cartesian3.negate(startGeometryNormal, startGeometryNormal);\r\n            }\r\n\r\n            endBottom = Cartesian3.unpack(bottomPositionsArray, index, segmentEndBottomScratch);\r\n            endTop = Cartesian3.unpack(topPositionsArray, index, segmentEndTopScratch);\r\n            endGeometryNormal = Cartesian3.unpack(normalsArray, index, segmentEndNormalScratch);\r\n\r\n            miterBroken = breakMiter(endGeometryNormal, startBottom, endBottom, endTop);\r\n\r\n            // 2D - don't clone anything from previous segment b/c possible IDL touch\r\n            startCartographic.latitude = cartographicsArray[cartographicsIndex];\r\n            startCartographic.longitude = cartographicsArray[cartographicsIndex + 1];\r\n            endCartographic.latitude = cartographicsArray[cartographicsIndex + 2];\r\n            endCartographic.longitude = cartographicsArray[cartographicsIndex + 3];\r\n            var start2D;\r\n            var end2D;\r\n            var startGeometryNormal2D;\r\n            var endGeometryNormal2D;\r\n\r\n            if (compute2dAttributes) {\r\n                var nudgeResult = nudgeCartographic(startCartographic, endCartographic);\r\n                start2D = projection.project(startCartographic, segmentStart2DScratch);\r\n                end2D = projection.project(endCartographic, segmentEnd2DScratch);\r\n                var direction2D = direction(end2D, start2D, forwardOffset2DScratch);\r\n                direction2D.y = Math.abs(direction2D.y);\r\n\r\n                startGeometryNormal2D = segmentStartNormal2DScratch;\r\n                endGeometryNormal2D = segmentEndNormal2DScratch;\r\n                if (nudgeResult === 0 || Cartesian3.dot(direction2D, Cartesian3.UNIT_Y) > MITER_BREAK_SMALL) {\r\n                    // No nudge - project the original normal\r\n                    // Or, if the line's angle relative to the IDL is very acute,\r\n                    // in which case snapping will produce oddly shaped volumes.\r\n                    startGeometryNormal2D = projectNormal(projection, startCartographic, startGeometryNormal, start2D, segmentStartNormal2DScratch);\r\n                    endGeometryNormal2D = projectNormal(projection, endCartographic, endGeometryNormal, end2D, segmentEndNormal2DScratch);\r\n                } else if (nudgeResult === 1) {\r\n                    // Start is close to IDL - snap start normal to align with IDL\r\n                    endGeometryNormal2D = projectNormal(projection, endCartographic, endGeometryNormal, end2D, segmentEndNormal2DScratch);\r\n                    startGeometryNormal2D.x = 0.0;\r\n                    // If start longitude is negative and end longitude is less negative, relative right is unit -Y\r\n                    // If start longitude is positive and end longitude is less positive, relative right is unit +Y\r\n                    startGeometryNormal2D.y = CesiumMath.sign(startCartographic.longitude - Math.abs(endCartographic.longitude));\r\n                    startGeometryNormal2D.z = 0.0;\r\n                } else {\r\n                    // End is close to IDL - snap end normal to align with IDL\r\n                    startGeometryNormal2D = projectNormal(projection, startCartographic, startGeometryNormal, start2D, segmentStartNormal2DScratch);\r\n                    endGeometryNormal2D.x = 0.0;\r\n                    // If end longitude is negative and start longitude is less negative, relative right is unit Y\r\n                    // If end longitude is positive and start longitude is less positive, relative right is unit -Y\r\n                    endGeometryNormal2D.y = CesiumMath.sign(startCartographic.longitude - endCartographic.longitude);\r\n                    endGeometryNormal2D.z = 0.0;\r\n                }\r\n            }\r\n\r\n            /****************************************\r\n             * Geometry descriptors of a \"line on terrain,\"\r\n             * as opposed to the \"shadow volume used to draw\r\n             * the line on terrain\":\r\n             * - position of start + offset to end\r\n             * - start, end, and right-facing planes\r\n             * - encoded texture coordinate offsets\r\n             ****************************************/\r\n\r\n             /** 3D **/\r\n            var segmentLength3D = Cartesian3.distance(startTop, endTop);\r\n\r\n            var encodedStart = EncodedCartesian3.fromCartesian(startBottom, encodeScratch);\r\n            var forwardOffset = Cartesian3.subtract(endBottom, startBottom, offsetScratch);\r\n            var forward = Cartesian3.normalize(forwardOffset, rightScratch);\r\n\r\n            var startUp = Cartesian3.subtract(startTop, startBottom, startUpScratch);\r\n            startUp = Cartesian3.normalize(startUp, startUp);\r\n            var rightNormal = Cartesian3.cross(forward, startUp, rightScratch);\r\n            rightNormal = Cartesian3.normalize(rightNormal, rightNormal);\r\n\r\n            var startPlaneNormal = Cartesian3.cross(startUp, startGeometryNormal, startPlaneNormalScratch);\r\n            startPlaneNormal = Cartesian3.normalize(startPlaneNormal, startPlaneNormal);\r\n\r\n            var endUp = Cartesian3.subtract(endTop, endBottom, endUpScratch);\r\n            endUp = Cartesian3.normalize(endUp, endUp);\r\n            var endPlaneNormal = Cartesian3.cross(endGeometryNormal, endUp, endPlaneNormalScratch);\r\n            endPlaneNormal = Cartesian3.normalize(endPlaneNormal, endPlaneNormal);\r\n\r\n            var texcoordNormalization3DX = segmentLength3D / length3D;\r\n            var texcoordNormalization3DY = lengthSoFar3D / length3D;\r\n\r\n            /** 2D **/\r\n            var segmentLength2D = 0.0;\r\n            var encodedStart2D;\r\n            var forwardOffset2D;\r\n            var right2D;\r\n            var texcoordNormalization2DX = 0.0;\r\n            var texcoordNormalization2DY = 0.0;\r\n            if (compute2dAttributes) {\r\n                segmentLength2D = Cartesian3.distance(start2D, end2D);\r\n\r\n                encodedStart2D = EncodedCartesian3.fromCartesian(start2D, encodeScratch2D);\r\n                forwardOffset2D = Cartesian3.subtract(end2D, start2D, forwardOffset2DScratch);\r\n\r\n                // Right direction is just forward direction rotated by -90 degrees around Z\r\n                // Similarly with plane normals\r\n                right2D = Cartesian3.normalize(forwardOffset2D, right2DScratch);\r\n                var swap = right2D.x;\r\n                right2D.x = right2D.y;\r\n                right2D.y = -swap;\r\n\r\n                texcoordNormalization2DX = segmentLength2D / length2D;\r\n                texcoordNormalization2DY = lengthSoFar2D / length2D;\r\n            }\r\n            /** Pack **/\r\n            for (j = 0; j < 8; j++) {\r\n                var vec4Index = vec4sWriteIndex + j * 4;\r\n                var vec2Index = vec2sWriteIndex + j * 2;\r\n                var wIndex = vec4Index + 3;\r\n\r\n                // Encode sidedness of vertex relative to right plane in texture coordinate normalization X,\r\n                // whether vertex is top or bottom of volume in sign/magnitude of normalization Y.\r\n                var rightPlaneSide = j < 4 ? 1.0 : -1.0;\r\n                var topBottomSide = (j === 2 || j === 3 || j === 6 || j === 7) ? 1.0 : -1.0;\r\n\r\n                // 3D\r\n                Cartesian3.pack(encodedStart.high, startHiAndForwardOffsetX, vec4Index);\r\n                startHiAndForwardOffsetX[wIndex] = forwardOffset.x;\r\n\r\n                Cartesian3.pack(encodedStart.low, startLoAndForwardOffsetY, vec4Index);\r\n                startLoAndForwardOffsetY[wIndex] = forwardOffset.y;\r\n\r\n                Cartesian3.pack(startPlaneNormal, startNormalAndForwardOffsetZ, vec4Index);\r\n                startNormalAndForwardOffsetZ[wIndex] = forwardOffset.z;\r\n\r\n                Cartesian3.pack(endPlaneNormal, endNormalAndTextureCoordinateNormalizationX, vec4Index);\r\n                endNormalAndTextureCoordinateNormalizationX[wIndex] = texcoordNormalization3DX * rightPlaneSide;\r\n\r\n                Cartesian3.pack(rightNormal, rightNormalAndTextureCoordinateNormalizationY, vec4Index);\r\n\r\n                var texcoordNormalization = texcoordNormalization3DY * topBottomSide;\r\n                if (texcoordNormalization === 0.0 && topBottomSide < 0.0) {\r\n                    texcoordNormalization = Number.POSITIVE_INFINITY;\r\n                }\r\n                rightNormalAndTextureCoordinateNormalizationY[wIndex] = texcoordNormalization;\r\n\r\n                // 2D\r\n                if (compute2dAttributes) {\r\n                    startHiLo2D[vec4Index] = encodedStart2D.high.x;\r\n                    startHiLo2D[vec4Index + 1] = encodedStart2D.high.y;\r\n                    startHiLo2D[vec4Index + 2] = encodedStart2D.low.x;\r\n                    startHiLo2D[vec4Index + 3] = encodedStart2D.low.y;\r\n\r\n                    startEndNormals2D[vec4Index] = -startGeometryNormal2D.y;\r\n                    startEndNormals2D[vec4Index + 1] = startGeometryNormal2D.x;\r\n                    startEndNormals2D[vec4Index + 2] = endGeometryNormal2D.y;\r\n                    startEndNormals2D[vec4Index + 3] = -endGeometryNormal2D.x;\r\n\r\n                    offsetAndRight2D[vec4Index] = forwardOffset2D.x;\r\n                    offsetAndRight2D[vec4Index + 1] = forwardOffset2D.y;\r\n                    offsetAndRight2D[vec4Index + 2] = right2D.x;\r\n                    offsetAndRight2D[vec4Index + 3] = right2D.y;\r\n\r\n                    texcoordNormalization2D[vec2Index] = texcoordNormalization2DX * rightPlaneSide;\r\n\r\n                    texcoordNormalization = texcoordNormalization2DY * topBottomSide;\r\n                    if (texcoordNormalization === 0.0 && topBottomSide < 0.0) {\r\n                        texcoordNormalization = Number.POSITIVE_INFINITY;\r\n                    }\r\n                    texcoordNormalization2D[vec2Index + 1] = texcoordNormalization;\r\n                }\r\n            }\r\n\r\n            // Adjust height of volume in 3D\r\n            var adjustHeightStartBottom = adjustHeightStartBottomScratch;\r\n            var adjustHeightEndBottom = adjustHeightEndBottomScratch;\r\n            var adjustHeightStartTop = adjustHeightStartTopScratch;\r\n            var adjustHeightEndTop = adjustHeightEndTopScratch;\r\n\r\n            var getHeightsRectangle = Rectangle.fromCartographicArray(getHeightCartographics, getHeightRectangleScratch);\r\n            var minMaxHeights = ApproximateTerrainHeights.getApproximateTerrainHeights(getHeightsRectangle, ellipsoid);\r\n            var minHeight = minMaxHeights.minimumTerrainHeight;\r\n            var maxHeight = minMaxHeights.maximumTerrainHeight;\r\n\r\n            sumHeights += minHeight;\r\n            sumHeights += maxHeight;\r\n\r\n            adjustHeights(startBottom, startTop, minHeight, maxHeight, adjustHeightStartBottom, adjustHeightStartTop);\r\n            adjustHeights(endBottom, endTop, minHeight, maxHeight, adjustHeightEndBottom, adjustHeightEndTop);\r\n\r\n            // Nudge the positions away from the \"polyline\" a little bit to prevent errors in GeometryPipeline\r\n            var normalNudge = Cartesian3.multiplyByScalar(rightNormal, CesiumMath.EPSILON5, normalNudgeScratch);\r\n            Cartesian3.add(adjustHeightStartBottom, normalNudge, adjustHeightStartBottom);\r\n            Cartesian3.add(adjustHeightEndBottom, normalNudge, adjustHeightEndBottom);\r\n            Cartesian3.add(adjustHeightStartTop, normalNudge, adjustHeightStartTop);\r\n            Cartesian3.add(adjustHeightEndTop, normalNudge, adjustHeightEndTop);\r\n\r\n            // If the segment is very close to the XZ plane, nudge the vertices slightly to avoid touching it.\r\n            nudgeXZ(adjustHeightStartBottom, adjustHeightEndBottom);\r\n            nudgeXZ(adjustHeightStartTop, adjustHeightEndTop);\r\n\r\n            Cartesian3.pack(adjustHeightStartBottom, positionsArray, vec3sWriteIndex);\r\n            Cartesian3.pack(adjustHeightEndBottom, positionsArray, vec3sWriteIndex + 3);\r\n            Cartesian3.pack(adjustHeightEndTop, positionsArray, vec3sWriteIndex + 6);\r\n            Cartesian3.pack(adjustHeightStartTop, positionsArray, vec3sWriteIndex + 9);\r\n\r\n            normalNudge = Cartesian3.multiplyByScalar(rightNormal, -2.0 * CesiumMath.EPSILON5, normalNudgeScratch);\r\n            Cartesian3.add(adjustHeightStartBottom, normalNudge, adjustHeightStartBottom);\r\n            Cartesian3.add(adjustHeightEndBottom, normalNudge, adjustHeightEndBottom);\r\n            Cartesian3.add(adjustHeightStartTop, normalNudge, adjustHeightStartTop);\r\n            Cartesian3.add(adjustHeightEndTop, normalNudge, adjustHeightEndTop);\r\n\r\n            nudgeXZ(adjustHeightStartBottom, adjustHeightEndBottom);\r\n            nudgeXZ(adjustHeightStartTop, adjustHeightEndTop);\r\n\r\n            Cartesian3.pack(adjustHeightStartBottom, positionsArray, vec3sWriteIndex + 12);\r\n            Cartesian3.pack(adjustHeightEndBottom, positionsArray, vec3sWriteIndex + 15);\r\n            Cartesian3.pack(adjustHeightEndTop, positionsArray, vec3sWriteIndex + 18);\r\n            Cartesian3.pack(adjustHeightStartTop, positionsArray, vec3sWriteIndex + 21);\r\n\r\n            cartographicsIndex += 2;\r\n            index += 3;\r\n\r\n            vec2sWriteIndex += 16;\r\n            vec3sWriteIndex += 24;\r\n            vec4sWriteIndex += 32;\r\n\r\n            lengthSoFar3D += segmentLength3D;\r\n            lengthSoFar2D += segmentLength2D;\r\n        }\r\n\r\n        index = 0;\r\n        var indexOffset = 0;\r\n        for (i = 0; i < segmentCount; i++) {\r\n            for (j = 0; j < REFERENCE_INDICES_LENGTH; j++) {\r\n                indices[index + j] = REFERENCE_INDICES[j] + indexOffset;\r\n            }\r\n            indexOffset += 8;\r\n            index += REFERENCE_INDICES_LENGTH;\r\n        }\r\n\r\n        var boundingSpheres = scratchBoundingSpheres;\r\n        BoundingSphere.fromVertices(bottomPositionsArray, Cartesian3.ZERO, 3, boundingSpheres[0]);\r\n        BoundingSphere.fromVertices(topPositionsArray, Cartesian3.ZERO, 3, boundingSpheres[1]);\r\n        var boundingSphere = BoundingSphere.fromBoundingSpheres(boundingSpheres);\r\n\r\n        // Adjust bounding sphere height and radius to cover more of the volume\r\n        boundingSphere.radius += sumHeights / (segmentCount * 2.0);\r\n\r\n        var attributes = {\r\n            position : new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                normalize : false,\r\n                values : positionsArray\r\n            }),\r\n            startHiAndForwardOffsetX : getVec4GeometryAttribute(startHiAndForwardOffsetX),\r\n            startLoAndForwardOffsetY : getVec4GeometryAttribute(startLoAndForwardOffsetY),\r\n            startNormalAndForwardOffsetZ : getVec4GeometryAttribute(startNormalAndForwardOffsetZ),\r\n            endNormalAndTextureCoordinateNormalizationX : getVec4GeometryAttribute(endNormalAndTextureCoordinateNormalizationX),\r\n            rightNormalAndTextureCoordinateNormalizationY : getVec4GeometryAttribute(rightNormalAndTextureCoordinateNormalizationY)\r\n        };\r\n\r\n        if (compute2dAttributes) {\r\n            attributes.startHiLo2D = getVec4GeometryAttribute(startHiLo2D);\r\n            attributes.offsetAndRight2D = getVec4GeometryAttribute(offsetAndRight2D);\r\n            attributes.startEndNormals2D = getVec4GeometryAttribute(startEndNormals2D);\r\n            attributes.texcoordNormalization2D = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                normalize : false,\r\n                values : texcoordNormalization2D\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            boundingSphere : boundingSphere\r\n        });\r\n    }\r\n\r\n    function getVec4GeometryAttribute(typedArray) {\r\n        return new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : 4,\r\n            normalize : false,\r\n            values : typedArray\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Approximates an ellipsoid-tangent vector in 2D by projecting the end point into 2D.\r\n     * Exposed for testing.\r\n     *\r\n     * @param {MapProjection} projection Map Projection for projecting coordinates to 2D.\r\n     * @param {Cartographic} cartographic The cartographic origin point of the normal.\r\n     *   Used to check if the normal crosses the IDL during projection.\r\n     * @param {Cartesian3} normal The normal in 3D.\r\n     * @param {Cartesian3} projectedPosition The projected origin point of the normal in 2D.\r\n     * @param {Cartesian3} result Result parameter on which to store the projected normal.\r\n     * @private\r\n     */\r\n    GroundPolylineGeometry._projectNormal = projectNormal;\r\n\r\n    return GroundPolylineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GroundPolylineGeometry.js\n// module id = 281\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './PrimitiveType',\r\n        './VertexFormat'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        PrimitiveType,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Describes geometry representing a plane centered at the origin, with a unit width and length.\r\n     *\r\n     * @alias PlaneGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @example\r\n     * var planeGeometry = new Cesium.PlaneGeometry({\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\r\n     * });\r\n     */\r\n    function PlaneGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n        this._vertexFormat = vertexFormat;\r\n        this._workerName = 'createPlaneGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    PlaneGeometry.packedLength = VertexFormat.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PlaneGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PlaneGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        vertexFormat: scratchVertexFormat\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PlaneGeometry} [result] The object into which to store the result.\r\n     * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\r\n     */\r\n    PlaneGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n\r\n        if (!defined(result)) {\r\n            return new PlaneGeometry(scratchOptions);\r\n        }\r\n\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n\r\n        return result;\r\n    };\r\n\r\n    var min = new Cartesian3(-0.5, -0.5, 0.0);\r\n    var max = new Cartesian3( 0.5,  0.5, 0.0);\r\n\r\n    /**\r\n     * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PlaneGeometry} planeGeometry A description of the plane.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PlaneGeometry.createGeometry = function(planeGeometry) {\r\n        var vertexFormat = planeGeometry._vertexFormat;\r\n\r\n        var attributes = new GeometryAttributes();\r\n        var indices;\r\n        var positions;\r\n\r\n        if (vertexFormat.position) {\r\n            // 4 corner points.  Duplicated 3 times each for each incident edge/face.\r\n            positions = new Float64Array(4 * 3);\r\n\r\n            // +z face\r\n            positions[0]  = min.x;\r\n            positions[1]  = min.y;\r\n            positions[2]  = 0.0;\r\n            positions[3]  = max.x;\r\n            positions[4]  = min.y;\r\n            positions[5]  = 0.0;\r\n            positions[6]  = max.x;\r\n            positions[7]  = max.y;\r\n            positions[8]  = 0.0;\r\n            positions[9]  = min.x;\r\n            positions[10] = max.y;\r\n            positions[11] = 0.0;\r\n\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            });\r\n\r\n            if (vertexFormat.normal) {\r\n                var normals = new Float32Array(4 * 3);\r\n\r\n                // +z face\r\n                normals[0]  = 0.0;\r\n                normals[1]  = 0.0;\r\n                normals[2]  = 1.0;\r\n                normals[3]  = 0.0;\r\n                normals[4]  = 0.0;\r\n                normals[5]  = 1.0;\r\n                normals[6]  = 0.0;\r\n                normals[7]  = 0.0;\r\n                normals[8]  = 1.0;\r\n                normals[9]  = 0.0;\r\n                normals[10] = 0.0;\r\n                normals[11] = 1.0;\r\n\r\n                attributes.normal = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : normals\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.st) {\r\n                var texCoords = new Float32Array(4 * 2);\r\n\r\n                // +z face\r\n                texCoords[0]  = 0.0;\r\n                texCoords[1]  = 0.0;\r\n                texCoords[2]  = 1.0;\r\n                texCoords[3]  = 0.0;\r\n                texCoords[4]  = 1.0;\r\n                texCoords[5]  = 1.0;\r\n                texCoords[6]  = 0.0;\r\n                texCoords[7]  = 1.0;\r\n\r\n                attributes.st = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 2,\r\n                    values : texCoords\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                var tangents = new Float32Array(4 * 3);\r\n\r\n                // +z face\r\n                tangents[0]  = 1.0;\r\n                tangents[1]  = 0.0;\r\n                tangents[2]  = 0.0;\r\n                tangents[3]  = 1.0;\r\n                tangents[4]  = 0.0;\r\n                tangents[5]  = 0.0;\r\n                tangents[6]  = 1.0;\r\n                tangents[7]  = 0.0;\r\n                tangents[8]  = 0.0;\r\n                tangents[9]  = 1.0;\r\n                tangents[10] = 0.0;\r\n                tangents[11] = 0.0;\r\n\r\n                attributes.tangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : tangents\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                var bitangents = new Float32Array(4 * 3);\r\n\r\n                // +z face\r\n                bitangents[0] = 0.0;\r\n                bitangents[1] = 1.0;\r\n                bitangents[2] = 0.0;\r\n                bitangents[3] = 0.0;\r\n                bitangents[4] = 1.0;\r\n                bitangents[5] = 0.0;\r\n                bitangents[6] = 0.0;\r\n                bitangents[7] = 1.0;\r\n                bitangents[8] = 0.0;\r\n                bitangents[9] = 0.0;\r\n                bitangents[10] = 1.0;\r\n                bitangents[11] = 0.0;\r\n\r\n                attributes.bitangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : bitangents\r\n                });\r\n            }\r\n\r\n            // 2 triangles\r\n            indices = new Uint16Array(2 * 3);\r\n\r\n            // +z face\r\n            indices[0] = 0;\r\n            indices[1] = 1;\r\n            indices[2] = 2;\r\n            indices[3] = 0;\r\n            indices[4] = 2;\r\n            indices[5] = 3;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\r\n        });\r\n    };\r\n\r\n    return PlaneGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PlaneGeometry.js\n// module id = 282\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defined',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './PrimitiveType'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        defined,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        PrimitiveType) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Describes geometry representing the outline of a plane centered at the origin, with a unit width and length.\r\n     *\r\n     * @alias PlaneOutlineGeometry\r\n     * @constructor\r\n     *\r\n     */\r\n    function PlaneOutlineGeometry() {\r\n        this._workerName = 'createPlaneOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    PlaneOutlineGeometry.packedLength = 0;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PlaneOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PlaneOutlineGeometry.pack = function(value, array) {\r\n        \r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PlaneOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {PlaneOutlineGeometry} The modified result parameter or a new PlaneOutlineGeometry instance if one was not provided.\r\n     */\r\n    PlaneOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            return new PlaneOutlineGeometry();\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    var min = new Cartesian3(-0.5, -0.5, 0.0);\r\n    var max = new Cartesian3( 0.5,  0.5, 0.0);\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a plane, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PlaneOutlineGeometry.createGeometry = function() {\r\n        var attributes = new GeometryAttributes();\r\n        var indices = new Uint16Array(4 * 2);\r\n        var positions = new Float64Array(4 * 3);\r\n\r\n        positions[0] = min.x;\r\n        positions[1] = min.y;\r\n        positions[2] = min.z;\r\n        positions[3] = max.x;\r\n        positions[4] = min.y;\r\n        positions[5] = min.z;\r\n        positions[6] = max.x;\r\n        positions[7] = max.y;\r\n        positions[8] = min.z;\r\n        positions[9] = min.x;\r\n        positions[10] = max.y;\r\n        positions[11] = min.z;\r\n\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n\r\n        indices[0] = 0;\r\n        indices[1] = 1;\r\n        indices[2] = 1;\r\n        indices[3] = 2;\r\n        indices[4] = 2;\r\n        indices[5] = 3;\r\n        indices[6] = 3;\r\n        indices[7] = 0;\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\r\n        });\r\n    };\r\n\r\n    return PlaneOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PlaneOutlineGeometry.js\n// module id = 283\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingRectangle',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './EllipsoidTangentPlane',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryInstance',\r\n        './GeometryOffsetAttribute',\r\n        './GeometryPipeline',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './Matrix2',\r\n        './Matrix3',\r\n        './PolygonGeometryLibrary',\r\n        './PolygonPipeline',\r\n        './Quaternion',\r\n        './Rectangle',\r\n        './VertexFormat',\r\n        './WindingOrder'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingRectangle,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        EllipsoidTangentPlane,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryInstance,\r\n        GeometryOffsetAttribute,\r\n        GeometryPipeline,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        Matrix2,\r\n        Matrix3,\r\n        PolygonGeometryLibrary,\r\n        PolygonPipeline,\r\n        Quaternion,\r\n        Rectangle,\r\n        VertexFormat,\r\n        WindingOrder) {\r\n    'use strict';\r\n\r\n    var scratchCarto1 = new Cartographic();\r\n    var scratchCarto2 = new Cartographic();\r\n    function adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\r\n        var carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\r\n        var height = carto1.height;\r\n        var p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\r\n        p1Carto.height = height;\r\n        ellipsoid.cartographicToCartesian(p1Carto, p1);\r\n\r\n        var p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\r\n        p2Carto.height = height - 100;\r\n        ellipsoid.cartographicToCartesian(p2Carto, p2);\r\n    }\r\n\r\n    var scratchBoundingRectangle = new BoundingRectangle();\r\n    var scratchPosition = new Cartesian3();\r\n    var scratchNormal = new Cartesian3();\r\n    var scratchTangent = new Cartesian3();\r\n    var scratchBitangent = new Cartesian3();\r\n    var p1Scratch = new Cartesian3();\r\n    var p2Scratch = new Cartesian3();\r\n    var scratchPerPosNormal = new Cartesian3();\r\n    var scratchPerPosTangent = new Cartesian3();\r\n    var scratchPerPosBitangent = new Cartesian3();\r\n\r\n    var appendTextureCoordinatesOrigin = new Cartesian2();\r\n    var appendTextureCoordinatesCartesian2 = new Cartesian2();\r\n    var appendTextureCoordinatesCartesian3 = new Cartesian3();\r\n    var appendTextureCoordinatesQuaternion = new Quaternion();\r\n    var appendTextureCoordinatesMatrix3 = new Matrix3();\r\n    var tangentMatrixScratch = new Matrix3();\r\n\r\n    function computeAttributes(options) {\r\n        var vertexFormat = options.vertexFormat;\r\n        var geometry = options.geometry;\r\n        var shadowVolume = options.shadowVolume;\r\n        var flatPositions = geometry.attributes.position.values;\r\n        var length = flatPositions.length;\r\n        var wall = options.wall;\r\n        var top = options.top || wall;\r\n        var bottom = options.bottom || wall;\r\n        if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\r\n            // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\r\n            // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\r\n            var boundingRectangle = options.boundingRectangle;\r\n            var tangentPlane = options.tangentPlane;\r\n            var ellipsoid = options.ellipsoid;\r\n            var stRotation = options.stRotation;\r\n            var perPositionHeight = options.perPositionHeight;\r\n\r\n            var origin = appendTextureCoordinatesOrigin;\r\n            origin.x = boundingRectangle.x;\r\n            origin.y = boundingRectangle.y;\r\n\r\n            var textureCoordinates = vertexFormat.st ? new Float32Array(2 * (length / 3)) : undefined;\r\n            var normals;\r\n            if (vertexFormat.normal) {\r\n                if (perPositionHeight && top && !wall) {\r\n                    normals = geometry.attributes.normal.values;\r\n                } else {\r\n                    normals = new Float32Array(length);\r\n                }\r\n            }\r\n            var tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\r\n            var bitangents = vertexFormat.bitangent ? new Float32Array(length) : undefined;\r\n            var extrudeNormals = shadowVolume ? new Float32Array(length) : undefined;\r\n\r\n            var textureCoordIndex = 0;\r\n            var attrIndex = 0;\r\n\r\n            var normal = scratchNormal;\r\n            var tangent = scratchTangent;\r\n            var bitangent = scratchBitangent;\r\n            var recomputeNormal = true;\r\n\r\n            var textureMatrix = appendTextureCoordinatesMatrix3;\r\n            var tangentRotationMatrix = tangentMatrixScratch;\r\n            if (stRotation !== 0.0) {\r\n                var rotation = Quaternion.fromAxisAngle(tangentPlane._plane.normal, stRotation, appendTextureCoordinatesQuaternion);\r\n                textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n                rotation = Quaternion.fromAxisAngle(tangentPlane._plane.normal, -stRotation, appendTextureCoordinatesQuaternion);\r\n                tangentRotationMatrix = Matrix3.fromQuaternion(rotation, tangentRotationMatrix);\r\n            } else {\r\n                textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n                tangentRotationMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\r\n            }\r\n\r\n            var bottomOffset = 0;\r\n            var bottomOffset2 = 0;\r\n\r\n            if (top && bottom) {\r\n                bottomOffset = length / 2;\r\n                bottomOffset2 = length / 3;\r\n\r\n                length /= 2;\r\n            }\r\n\r\n            for ( var i = 0; i < length; i += 3) {\r\n                var position = Cartesian3.fromArray(flatPositions, i, appendTextureCoordinatesCartesian3);\r\n\r\n                if (vertexFormat.st) {\r\n                    var p = Matrix3.multiplyByVector(textureMatrix, position, scratchPosition);\r\n                    p = ellipsoid.scaleToGeodeticSurface(p,p);\r\n                    var st = tangentPlane.projectPointOntoPlane(p, appendTextureCoordinatesCartesian2);\r\n                    Cartesian2.subtract(st, origin, st);\r\n\r\n                    var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\r\n                    var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\r\n                    if (bottom) {\r\n                        textureCoordinates[textureCoordIndex + bottomOffset2] = stx;\r\n                        textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = sty;\r\n                    }\r\n                    if (top) {\r\n                        textureCoordinates[textureCoordIndex] = stx;\r\n                        textureCoordinates[textureCoordIndex + 1] = sty;\r\n                    }\r\n\r\n                    textureCoordIndex += 2;\r\n                }\r\n\r\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\r\n                    var attrIndex1 = attrIndex + 1;\r\n                    var attrIndex2 = attrIndex + 2;\r\n\r\n                    if (wall) {\r\n                        if (i + 3 < length) {\r\n                            var p1 = Cartesian3.fromArray(flatPositions, i + 3, p1Scratch);\r\n\r\n                            if (recomputeNormal) {\r\n                                var p2 = Cartesian3.fromArray(flatPositions, i + length, p2Scratch);\r\n                                if (perPositionHeight) {\r\n                                    adjustPosHeightsForNormal(position, p1, p2, ellipsoid);\r\n                                }\r\n                                Cartesian3.subtract(p1, position, p1);\r\n                                Cartesian3.subtract(p2, position, p2);\r\n                                normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\r\n                                recomputeNormal = false;\r\n                            }\r\n\r\n                            if (Cartesian3.equalsEpsilon(p1, position, CesiumMath.EPSILON10)) { // if we've reached a corner\r\n                                recomputeNormal = true;\r\n                            }\r\n                        }\r\n\r\n                        if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                            bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);\r\n                            if (vertexFormat.tangent) {\r\n                                tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n                        if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                            if (perPositionHeight) {\r\n                                scratchPerPosNormal = Cartesian3.fromArray(normals, attrIndex, scratchPerPosNormal);\r\n                                scratchPerPosTangent = Cartesian3.cross(Cartesian3.UNIT_Z, scratchPerPosNormal, scratchPerPosTangent);\r\n                                scratchPerPosTangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotationMatrix, scratchPerPosTangent, scratchPerPosTangent), scratchPerPosTangent);\r\n                                if (vertexFormat.bitangent) {\r\n                                    scratchPerPosBitangent = Cartesian3.normalize(Cartesian3.cross(scratchPerPosNormal, scratchPerPosTangent, scratchPerPosBitangent), scratchPerPosBitangent);\r\n                                }\r\n                            }\r\n\r\n                            tangent = Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\r\n                            tangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent), tangent);\r\n                            if (vertexFormat.bitangent) {\r\n                                bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (vertexFormat.normal) {\r\n                        if (options.wall) {\r\n                            normals[attrIndex + bottomOffset] = normal.x;\r\n                            normals[attrIndex1 + bottomOffset] = normal.y;\r\n                            normals[attrIndex2 + bottomOffset] = normal.z;\r\n                        } else if (bottom){\r\n                            normals[attrIndex + bottomOffset] = -normal.x;\r\n                            normals[attrIndex1 + bottomOffset] = -normal.y;\r\n                            normals[attrIndex2 + bottomOffset] = -normal.z;\r\n                        }\r\n\r\n                        if ((top && !perPositionHeight) || wall) {\r\n                            normals[attrIndex] = normal.x;\r\n                            normals[attrIndex1] = normal.y;\r\n                            normals[attrIndex2] = normal.z;\r\n                        }\r\n                    }\r\n\r\n                    if (shadowVolume) {\r\n                        if (wall) {\r\n                            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n                        }\r\n                        extrudeNormals[attrIndex + bottomOffset] = -normal.x;\r\n                        extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\r\n                        extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\r\n                    }\r\n\r\n                    if (vertexFormat.tangent) {\r\n                        if (options.wall) {\r\n                            tangents[attrIndex + bottomOffset] = tangent.x;\r\n                            tangents[attrIndex1 + bottomOffset] = tangent.y;\r\n                            tangents[attrIndex2 + bottomOffset] = tangent.z;\r\n                        } else if (bottom) {\r\n                            tangents[attrIndex + bottomOffset] = -tangent.x;\r\n                            tangents[attrIndex1 + bottomOffset] = -tangent.y;\r\n                            tangents[attrIndex2 + bottomOffset] = -tangent.z;\r\n                        }\r\n\r\n                        if(top) {\r\n                            if (perPositionHeight) {\r\n                                tangents[attrIndex] = scratchPerPosTangent.x;\r\n                                tangents[attrIndex1] = scratchPerPosTangent.y;\r\n                                tangents[attrIndex2] = scratchPerPosTangent.z;\r\n                            } else {\r\n                                tangents[attrIndex] = tangent.x;\r\n                                tangents[attrIndex1] = tangent.y;\r\n                                tangents[attrIndex2] = tangent.z;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        if (bottom) {\r\n                            bitangents[attrIndex + bottomOffset] = bitangent.x;\r\n                            bitangents[attrIndex1 + bottomOffset] = bitangent.y;\r\n                            bitangents[attrIndex2 + bottomOffset] = bitangent.z;\r\n                        }\r\n                        if (top) {\r\n                            if (perPositionHeight) {\r\n                                bitangents[attrIndex] = scratchPerPosBitangent.x;\r\n                                bitangents[attrIndex1] = scratchPerPosBitangent.y;\r\n                                bitangents[attrIndex2] = scratchPerPosBitangent.z;\r\n                            } else {\r\n                                bitangents[attrIndex] = bitangent.x;\r\n                                bitangents[attrIndex1] = bitangent.y;\r\n                                bitangents[attrIndex2] = bitangent.z;\r\n                            }\r\n                        }\r\n                    }\r\n                    attrIndex += 3;\r\n                }\r\n            }\r\n\r\n            if (vertexFormat.st) {\r\n                geometry.attributes.st = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 2,\r\n                    values : textureCoordinates\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                geometry.attributes.normal = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : normals\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                geometry.attributes.tangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : tangents\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                geometry.attributes.bitangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : bitangents\r\n                });\r\n            }\r\n\r\n            if (shadowVolume) {\r\n                geometry.attributes.extrudeDirection = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : extrudeNormals\r\n                });\r\n            }\r\n        }\r\n\r\n        if (options.extrude && defined(options.offsetAttribute)) {\r\n            var size = flatPositions.length / 3;\r\n            var offsetAttribute = new Uint8Array(size);\r\n\r\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                if ((top && bottom) || wall) {\r\n                    offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n                } else if (top) {\r\n                    offsetAttribute = arrayFill(offsetAttribute, 1);\r\n                }\r\n            } else {\r\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n\r\n            geometry.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : offsetAttribute\r\n            });\r\n        }\r\n\r\n        return geometry;\r\n    }\r\n\r\n    function computeRectangle(positions, ellipsoid, result) {\r\n        if (!defined(positions) || positions.length < 3) {\r\n            if (!defined(result)) {\r\n                return new Rectangle();\r\n            }\r\n            result.west = 0.0;\r\n            result.north = 0.0;\r\n            result.south = 0.0;\r\n            result.east = 0.0;\r\n            return result;\r\n        }\r\n        return Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n    }\r\n\r\n    var createGeometryFromPositionsExtrudedPositions = [];\r\n\r\n    function createGeometryFromPositionsExtruded(ellipsoid, polygon, granularity, hierarchy, perPositionHeight, closeTop, closeBottom, vertexFormat) {\r\n        var geos = {\r\n            walls : []\r\n        };\r\n        var i;\r\n\r\n        if (closeTop || closeBottom) {\r\n            var topGeo = PolygonGeometryLibrary.createGeometryFromPositions(ellipsoid, polygon, granularity, perPositionHeight, vertexFormat);\r\n\r\n            var edgePoints = topGeo.attributes.position.values;\r\n            var indices = topGeo.indices;\r\n            var numPositions;\r\n            var newIndices;\r\n\r\n            if (closeTop && closeBottom) {\r\n                var topBottomPositions = edgePoints.concat(edgePoints);\r\n\r\n                numPositions = topBottomPositions.length / 3;\r\n\r\n                newIndices = IndexDatatype.createTypedArray(numPositions, indices.length * 2);\r\n                newIndices.set(indices);\r\n                var ilength = indices.length;\r\n\r\n                var length = numPositions / 2;\r\n\r\n                for (i = 0; i < ilength; i += 3) {\r\n                    var i0 = newIndices[i] + length;\r\n                    var i1 = newIndices[i + 1] + length;\r\n                    var i2 = newIndices[i + 2] + length;\r\n\r\n                    newIndices[i + ilength] = i2;\r\n                    newIndices[i + 1 + ilength] = i1;\r\n                    newIndices[i + 2 + ilength] = i0;\r\n                }\r\n\r\n                topGeo.attributes.position.values = topBottomPositions;\r\n                if (perPositionHeight && vertexFormat.normal) {\r\n                    var normals = topGeo.attributes.normal.values;\r\n                    topGeo.attributes.normal.values = new Float32Array(topBottomPositions.length);\r\n                    topGeo.attributes.normal.values.set(normals);\r\n                }\r\n                topGeo.indices = newIndices;\r\n            } else if (closeBottom) {\r\n                numPositions = edgePoints.length / 3;\r\n                newIndices = IndexDatatype.createTypedArray(numPositions, indices.length);\r\n\r\n                for (i = 0; i < indices.length; i += 3) {\r\n                    newIndices[i] = indices[i + 2];\r\n                    newIndices[i + 1] = indices[i + 1];\r\n                    newIndices[i + 2] = indices[i];\r\n                }\r\n\r\n                topGeo.indices = newIndices;\r\n            }\r\n\r\n            geos.topAndBottom = new GeometryInstance({\r\n                geometry : topGeo\r\n            });\r\n        }\r\n\r\n        var outerRing = hierarchy.outerRing;\r\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\r\n        var positions2D = tangentPlane.projectPointsOntoPlane(outerRing, createGeometryFromPositionsExtrudedPositions);\r\n\r\n        var windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n        if (windingOrder === WindingOrder.CLOCKWISE) {\r\n            outerRing = outerRing.slice().reverse();\r\n        }\r\n\r\n        var wallGeo = PolygonGeometryLibrary.computeWallGeometry(outerRing, ellipsoid, granularity, perPositionHeight);\r\n        geos.walls.push(new GeometryInstance({\r\n            geometry : wallGeo\r\n        }));\r\n\r\n        var holes = hierarchy.holes;\r\n        for (i = 0; i < holes.length; i++) {\r\n            var hole = holes[i];\r\n\r\n            tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\r\n            positions2D = tangentPlane.projectPointsOntoPlane(hole, createGeometryFromPositionsExtrudedPositions);\r\n\r\n            windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n            if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\r\n                hole = hole.slice().reverse();\r\n            }\r\n\r\n            wallGeo = PolygonGeometryLibrary.computeWallGeometry(hole, ellipsoid, granularity);\r\n            geos.walls.push(new GeometryInstance({\r\n                geometry : wallGeo\r\n            }));\r\n        }\r\n\r\n        return geos;\r\n    }\r\n\r\n    /**\r\n     * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias PolygonGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n     * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\r\n     * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\r\n     *\r\n     * @see PolygonGeometry#createGeometry\r\n     * @see PolygonGeometry#fromPositions\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\r\n     *\r\n     * @example\r\n     * // 1. create a polygon from points\r\n     * var polygon = new Cesium.PolygonGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -72.0, 40.0,\r\n     *       -70.0, 35.0,\r\n     *       -75.0, 30.0,\r\n     *       -70.0, 30.0,\r\n     *       -68.0, 40.0\r\n     *     ])\r\n     *   )\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n     *\r\n     * // 2. create a nested polygon with holes\r\n     * var polygonWithHole = new Cesium.PolygonGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -109.0, 30.0,\r\n     *       -95.0, 30.0,\r\n     *       -95.0, 40.0,\r\n     *       -109.0, 40.0\r\n     *     ]),\r\n     *     [new Cesium.PolygonHierarchy(\r\n     *       Cesium.Cartesian3.fromDegreesArray([\r\n     *         -107.0, 31.0,\r\n     *         -107.0, 39.0,\r\n     *         -97.0, 39.0,\r\n     *         -97.0, 31.0\r\n     *       ]),\r\n     *       [new Cesium.PolygonHierarchy(\r\n     *         Cesium.Cartesian3.fromDegreesArray([\r\n     *           -105.0, 33.0,\r\n     *           -99.0, 33.0,\r\n     *           -99.0, 37.0,\r\n     *           -105.0, 37.0\r\n     *         ]),\r\n     *         [new Cesium.PolygonHierarchy(\r\n     *           Cesium.Cartesian3.fromDegreesArray([\r\n     *             -103.0, 34.0,\r\n     *             -101.0, 34.0,\r\n     *             -101.0, 36.0,\r\n     *             -103.0, 36.0\r\n     *           ])\r\n     *         )]\r\n     *       )]\r\n     *     )]\r\n     *   )\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\r\n     *\r\n     * // 3. create extruded polygon\r\n     * var extrudedPolygon = new Cesium.PolygonGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -72.0, 40.0,\r\n     *       -70.0, 35.0,\r\n     *       -75.0, 30.0,\r\n     *       -70.0, 30.0,\r\n     *       -68.0, 40.0\r\n     *     ])\r\n     *   ),\r\n     *   extrudedHeight: 300000\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\r\n     */\r\n    function PolygonGeometry(options) {\r\n        \r\n\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var stRotation = defaultValue(options.stRotation, 0.0);\r\n        var perPositionHeight = defaultValue(options.perPositionHeight, false);\r\n        var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        if (!perPositionHeightExtrude) {\r\n            var h = Math.max(height, extrudedHeight);\r\n            extrudedHeight = Math.min(height, extrudedHeight);\r\n            height = h;\r\n        }\r\n\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._granularity = granularity;\r\n        this._stRotation = stRotation;\r\n        this._height = height;\r\n        this._extrudedHeight = extrudedHeight;\r\n        this._closeTop = defaultValue(options.closeTop, true);\r\n        this._closeBottom = defaultValue(options.closeBottom, true);\r\n        this._polygonHierarchy = polygonHierarchy;\r\n        this._perPositionHeight = perPositionHeight;\r\n        this._perPositionHeightExtrude = perPositionHeightExtrude;\r\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n        this._workerName = 'createPolygonGeometry';\r\n        this._offsetAttribute = options.offsetAttribute;\r\n\r\n        this._rectangle = undefined;\r\n        this._textureCoordinateRotationPoints = undefined;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + VertexFormat.packedLength + 11;\r\n    }\r\n\r\n    /**\r\n     * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n     * @param {Number} [options.height=0.0] The height of the polygon.\r\n     * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n     * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\r\n     * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\r\n     * @returns {PolygonGeometry}\r\n     *\r\n     *\r\n     * @example\r\n     * // create a polygon from points\r\n     * var polygon = Cesium.PolygonGeometry.fromPositions({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     -72.0, 40.0,\r\n     *     -70.0, 35.0,\r\n     *     -75.0, 30.0,\r\n     *     -70.0, 30.0,\r\n     *     -68.0, 40.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n     *\r\n     * @see PolygonGeometry#createGeometry\r\n     */\r\n    PolygonGeometry.fromPositions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        \r\n\r\n        var newOptions = {\r\n            polygonHierarchy : {\r\n                positions : options.positions\r\n            },\r\n            height : options.height,\r\n            extrudedHeight : options.extrudedHeight,\r\n            vertexFormat : options.vertexFormat,\r\n            stRotation : options.stRotation,\r\n            ellipsoid : options.ellipsoid,\r\n            granularity : options.granularity,\r\n            perPositionHeight : options.perPositionHeight,\r\n            closeTop : options.closeTop,\r\n            closeBottom : options.closeBottom,\r\n            offsetAttribute : options.offsetAttribute\r\n        };\r\n        return new PolygonGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolygonGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PolygonGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._stRotation;\r\n        array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n        array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\r\n        array[startingIndex] = value.packedLength;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchVertexFormat = new VertexFormat();\r\n\r\n    //Only used to avoid inability to default construct.\r\n    var dummyOptions = {\r\n        polygonHierarchy : {}\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolygonGeometry} [result] The object into which to store the result.\r\n     */\r\n    PolygonGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n        startingIndex = polygonHierarchy.startingIndex;\r\n        delete polygonHierarchy.startingIndex;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var height = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var stRotation = array[startingIndex++];\r\n        var perPositionHeightExtrude = array[startingIndex++] === 1.0;\r\n        var perPositionHeight = array[startingIndex++] === 1.0;\r\n        var closeTop = array[startingIndex++] === 1.0;\r\n        var closeBottom = array[startingIndex++] === 1.0;\r\n        var shadowVolume = array[startingIndex++] === 1.0;\r\n        var offsetAttribute = array[startingIndex++];\r\n        var packedLength = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            result = new PolygonGeometry(dummyOptions);\r\n        }\r\n\r\n        result._polygonHierarchy = polygonHierarchy;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._height = height;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._granularity = granularity;\r\n        result._stRotation = stRotation;\r\n        result._perPositionHeightExtrude = perPositionHeightExtrude;\r\n        result._perPositionHeight = perPositionHeight;\r\n        result._closeTop = closeTop;\r\n        result._closeBottom = closeBottom;\r\n        result._shadowVolume = shadowVolume;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n        result.packedLength = packedLength;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns the bounding rectangle given the provided options\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Rectangle} [result] An object in which to store the result.\r\n     *\r\n     * @returns {Rectangle} The result rectangle\r\n     */\r\n    PolygonGeometry.computeRectangle = function(options, result) {\r\n        \r\n\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n        return computeRectangle(polygonHierarchy.positions, ellipsoid, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PolygonGeometry} polygonGeometry A description of the polygon.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PolygonGeometry.createGeometry = function(polygonGeometry) {\r\n        var vertexFormat = polygonGeometry._vertexFormat;\r\n        var ellipsoid = polygonGeometry._ellipsoid;\r\n        var granularity = polygonGeometry._granularity;\r\n        var stRotation = polygonGeometry._stRotation;\r\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n        var perPositionHeight = polygonGeometry._perPositionHeight;\r\n        var closeTop = polygonGeometry._closeTop;\r\n        var closeBottom = polygonGeometry._closeBottom;\r\n\r\n        var outerPositions = polygonHierarchy.positions;\r\n        if (outerPositions.length < 3) {\r\n            return;\r\n        }\r\n\r\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(outerPositions, ellipsoid);\r\n\r\n        var results = PolygonGeometryLibrary.polygonsFromHierarchy(polygonHierarchy, tangentPlane.projectPointsOntoPlane.bind(tangentPlane), !perPositionHeight, ellipsoid);\r\n        var hierarchy = results.hierarchy;\r\n        var polygons = results.polygons;\r\n\r\n        if (hierarchy.length === 0) {\r\n            return;\r\n        }\r\n\r\n        outerPositions = hierarchy[0].outerRing;\r\n        var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(tangentPlane.plane.normal, tangentPlane.projectPointOntoPlane.bind(tangentPlane), outerPositions, stRotation, scratchBoundingRectangle);\r\n\r\n        var geometries = [];\r\n\r\n        var height = polygonGeometry._height;\r\n        var extrudedHeight = polygonGeometry._extrudedHeight;\r\n        var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        var options = {\r\n            perPositionHeight: perPositionHeight,\r\n            vertexFormat: vertexFormat,\r\n            geometry: undefined,\r\n            tangentPlane: tangentPlane,\r\n            boundingRectangle: boundingRectangle,\r\n            ellipsoid: ellipsoid,\r\n            stRotation: stRotation,\r\n            bottom: false,\r\n            top: true,\r\n            wall: false,\r\n            extrude: false\r\n        };\r\n\r\n        var i;\r\n\r\n        if (extrude) {\r\n            options.extrude = true;\r\n            options.top = closeTop;\r\n            options.bottom = closeBottom;\r\n            options.shadowVolume = polygonGeometry._shadowVolume;\r\n            options.offsetAttribute = polygonGeometry._offsetAttribute;\r\n            for (i = 0; i < polygons.length; i++) {\r\n                var splitGeometry = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], granularity, hierarchy[i], perPositionHeight, closeTop, closeBottom, vertexFormat);\r\n\r\n                var topAndBottom;\r\n                if (closeTop && closeBottom) {\r\n                    topAndBottom = splitGeometry.topAndBottom;\r\n                    options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(topAndBottom.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\r\n                } else if (closeTop) {\r\n                    topAndBottom = splitGeometry.topAndBottom;\r\n                    topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(topAndBottom.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\r\n                    options.geometry = topAndBottom.geometry;\r\n                } else if (closeBottom) {\r\n                    topAndBottom = splitGeometry.topAndBottom;\r\n                    topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(topAndBottom.geometry.attributes.position.values, extrudedHeight, ellipsoid, true);\r\n                    options.geometry = topAndBottom.geometry;\r\n                }\r\n                if (closeTop || closeBottom) {\r\n                    options.wall = false;\r\n                    topAndBottom.geometry = computeAttributes(options);\r\n                    geometries.push(topAndBottom);\r\n                }\r\n\r\n                var walls = splitGeometry.walls;\r\n                options.wall = true;\r\n                for ( var k = 0; k < walls.length; k++) {\r\n                    var wall = walls[k];\r\n                    options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(wall.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\r\n                    wall.geometry = computeAttributes(options);\r\n                    geometries.push(wall);\r\n                }\r\n            }\r\n        } else {\r\n            for (i = 0; i < polygons.length; i++) {\r\n                var geometryInstance = new GeometryInstance({\r\n                    geometry : PolygonGeometryLibrary.createGeometryFromPositions(ellipsoid, polygons[i], granularity, perPositionHeight, vertexFormat)\r\n                });\r\n                geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometryInstance.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\r\n                options.geometry = geometryInstance.geometry;\r\n                geometryInstance.geometry = computeAttributes(options);\r\n\r\n                if (defined(polygonGeometry._offsetAttribute)) {\r\n                    var length = geometryInstance.geometry.attributes.position.values.length;\r\n                    var applyOffset = new Uint8Array(length / 3);\r\n                    var offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                    arrayFill(applyOffset, offsetValue);\r\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                        componentsPerAttribute : 1,\r\n                        values: applyOffset\r\n                    });\r\n                }\r\n\r\n                geometries.push(geometryInstance);\r\n            }\r\n        }\r\n\r\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n        geometry.attributes.position.values = new Float64Array(geometry.attributes.position.values);\r\n        geometry.indices = IndexDatatype.createTypedArray(geometry.attributes.position.values.length / 3, geometry.indices);\r\n\r\n        var attributes = geometry.attributes;\r\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values);\r\n\r\n        if (!vertexFormat.position) {\r\n            delete attributes.position;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : polygonGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PolygonGeometry.createShadowVolume = function(polygonGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = polygonGeometry._granularity;\r\n        var ellipsoid = polygonGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new PolygonGeometry({\r\n            polygonHierarchy : polygonGeometry._polygonHierarchy,\r\n            ellipsoid : ellipsoid,\r\n            stRotation : polygonGeometry._stRotation,\r\n            granularity : granularity,\r\n            perPositionHeight : false,\r\n            extrudedHeight : minHeight,\r\n            height : maxHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume: true\r\n        });\r\n    };\r\n\r\n    function textureCoordinateRotationPoints(polygonGeometry) {\r\n        var stRotation = -polygonGeometry._stRotation;\r\n        if (stRotation === 0.0) {\r\n            return [0, 0, 0, 1, 1, 0];\r\n        }\r\n        var ellipsoid = polygonGeometry._ellipsoid;\r\n        var positions = polygonGeometry._polygonHierarchy.positions;\r\n        var boundingRectangle = polygonGeometry.rectangle;\r\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\r\n    }\r\n\r\n    defineProperties(PolygonGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                if (!defined(this._rectangle)) {\r\n                    var positions = this._polygonHierarchy.positions;\r\n                    this._rectangle = computeRectangle(positions, this._ellipsoid);\r\n                }\r\n\r\n                return this._rectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                if (!defined(this._textureCoordinateRotationPoints)) {\r\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\r\n                }\r\n                return this._textureCoordinateRotationPoints;\r\n            }\r\n        }\r\n    });\r\n\r\n    return PolygonGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolygonGeometry.js\n// module id = 284\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './arrayRemoveDuplicates',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './EllipsoidTangentPlane',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryInstance',\r\n        './GeometryOffsetAttribute',\r\n        './GeometryPipeline',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PolygonGeometryLibrary',\r\n        './PolygonPipeline',\r\n        './PrimitiveType',\r\n        './Queue',\r\n        './WindingOrder'\r\n    ], function(\r\n        arrayFill,\r\n        arrayRemoveDuplicates,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        EllipsoidTangentPlane,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryInstance,\r\n        GeometryOffsetAttribute,\r\n        GeometryPipeline,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PolygonGeometryLibrary,\r\n        PolygonPipeline,\r\n        PrimitiveType,\r\n        Queue,\r\n        WindingOrder) {\r\n    'use strict';\r\n    var createGeometryFromPositionsPositions = [];\r\n    var createGeometryFromPositionsSubdivided = [];\r\n\r\n    function createGeometryFromPositions(ellipsoid, positions, minDistance, perPositionHeight) {\r\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\r\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\r\n\r\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n            positions2D.reverse();\r\n            positions = positions.slice().reverse();\r\n        }\r\n\r\n        var subdividedPositions;\r\n        var i;\r\n\r\n        var length = positions.length;\r\n        var index = 0;\r\n\r\n        if (!perPositionHeight) {\r\n            var numVertices = 0;\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n            subdividedPositions = new Float64Array(numVertices * 3);\r\n            for (i = 0; i < length; i++) {\r\n                var tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n                var tempPositionsLength = tempPositions.length;\r\n                for (var j = 0; j < tempPositionsLength; ++j) {\r\n                    subdividedPositions[index++] = tempPositions[j];\r\n                }\r\n            }\r\n        } else {\r\n            subdividedPositions = new Float64Array(length * 2 * 3);\r\n            for (i = 0; i < length; i++) {\r\n                var p0 = positions[i];\r\n                var p1 = positions[(i + 1) % length];\r\n                subdividedPositions[index++] = p0.x;\r\n                subdividedPositions[index++] = p0.y;\r\n                subdividedPositions[index++] = p0.z;\r\n                subdividedPositions[index++] = p1.x;\r\n                subdividedPositions[index++] = p1.y;\r\n                subdividedPositions[index++] = p1.z;\r\n            }\r\n        }\r\n\r\n        length = subdividedPositions.length / 3;\r\n        var indicesSize = length * 2;\r\n        var indices = IndexDatatype.createTypedArray(length, indicesSize);\r\n        index = 0;\r\n        for (i = 0; i < length - 1; i++) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + 1;\r\n        }\r\n        indices[index++] = length - 1;\r\n        indices[index++] = 0;\r\n\r\n        return new GeometryInstance({\r\n            geometry : new Geometry({\r\n                attributes : new GeometryAttributes({\r\n                    position : new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.DOUBLE,\r\n                        componentsPerAttribute : 3,\r\n                        values : subdividedPositions\r\n                    })\r\n                }),\r\n                indices : indices,\r\n                primitiveType : PrimitiveType.LINES\r\n            })\r\n        });\r\n    }\r\n\r\n    function createGeometryFromPositionsExtruded(ellipsoid, positions, minDistance, perPositionHeight) {\r\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\r\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\r\n\r\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n            positions2D.reverse();\r\n            positions = positions.slice().reverse();\r\n        }\r\n\r\n        var subdividedPositions;\r\n        var i;\r\n\r\n        var length = positions.length;\r\n        var corners = new Array(length);\r\n        var index = 0;\r\n\r\n        if (!perPositionHeight) {\r\n            var numVertices = 0;\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n\r\n            subdividedPositions = new Float64Array(numVertices * 3 * 2);\r\n            for (i = 0; i < length; ++i) {\r\n                corners[i] = index / 3;\r\n                var tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n                var tempPositionsLength = tempPositions.length;\r\n                for (var j = 0; j < tempPositionsLength; ++j) {\r\n                    subdividedPositions[index++] = tempPositions[j];\r\n                }\r\n            }\r\n        } else {\r\n            subdividedPositions = new Float64Array(length * 2 * 3 * 2);\r\n            for (i = 0; i < length; ++i) {\r\n                corners[i] = index / 3;\r\n                var p0 = positions[i];\r\n                var p1 = positions[(i + 1) % length];\r\n\r\n                subdividedPositions[index++] = p0.x;\r\n                subdividedPositions[index++] = p0.y;\r\n                subdividedPositions[index++] = p0.z;\r\n                subdividedPositions[index++] = p1.x;\r\n                subdividedPositions[index++] = p1.y;\r\n                subdividedPositions[index++] = p1.z;\r\n            }\r\n        }\r\n\r\n        length = subdividedPositions.length / (3 * 2);\r\n        var cornersLength = corners.length;\r\n\r\n        var indicesSize = ((length * 2) + cornersLength) * 2;\r\n        var indices = IndexDatatype.createTypedArray(length, indicesSize);\r\n\r\n        index = 0;\r\n        for (i = 0; i < length; ++i) {\r\n            indices[index++] = i;\r\n            indices[index++] = (i + 1) % length;\r\n            indices[index++] = i + length;\r\n            indices[index++] = ((i + 1) % length) + length;\r\n        }\r\n\r\n        for (i = 0; i < cornersLength; i++) {\r\n            var corner = corners[i];\r\n            indices[index++] = corner;\r\n            indices[index++] = corner + length;\r\n        }\r\n\r\n        return new GeometryInstance({\r\n            geometry : new Geometry({\r\n                attributes : new GeometryAttributes({\r\n                    position : new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.DOUBLE,\r\n                        componentsPerAttribute : 3,\r\n                        values : subdividedPositions\r\n                    })\r\n                }),\r\n                indices : indices,\r\n                primitiveType : PrimitiveType.LINES\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * A description of the outline of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy.\r\n     *\r\n     * @alias PolygonOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n     *\r\n     * @see PolygonOutlineGeometry#createGeometry\r\n     * @see PolygonOutlineGeometry#fromPositions\r\n     *\r\n     * @example\r\n     * // 1. create a polygon outline from points\r\n     * var polygon = new Cesium.PolygonOutlineGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -72.0, 40.0,\r\n     *       -70.0, 35.0,\r\n     *       -75.0, 30.0,\r\n     *       -70.0, 30.0,\r\n     *       -68.0, 40.0\r\n     *     ])\r\n     *   )\r\n     * });\r\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\r\n     *\r\n     * // 2. create a nested polygon with holes outline\r\n     * var polygonWithHole = new Cesium.PolygonOutlineGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -109.0, 30.0,\r\n     *       -95.0, 30.0,\r\n     *       -95.0, 40.0,\r\n     *       -109.0, 40.0\r\n     *     ]),\r\n     *     [new Cesium.PolygonHierarchy(\r\n     *       Cesium.Cartesian3.fromDegreesArray([\r\n     *         -107.0, 31.0,\r\n     *         -107.0, 39.0,\r\n     *         -97.0, 39.0,\r\n     *         -97.0, 31.0\r\n     *       ]),\r\n     *       [new Cesium.PolygonHierarchy(\r\n     *         Cesium.Cartesian3.fromDegreesArray([\r\n     *           -105.0, 33.0,\r\n     *           -99.0, 33.0,\r\n     *           -99.0, 37.0,\r\n     *           -105.0, 37.0\r\n     *         ]),\r\n     *         [new Cesium.PolygonHierarchy(\r\n     *           Cesium.Cartesian3.fromDegreesArray([\r\n     *             -103.0, 34.0,\r\n     *             -101.0, 34.0,\r\n     *             -101.0, 36.0,\r\n     *             -103.0, 36.0\r\n     *           ])\r\n     *         )]\r\n     *       )]\r\n     *     )]\r\n     *   )\r\n     * });\r\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygonWithHole);\r\n     *\r\n     * // 3. create extruded polygon outline\r\n     * var extrudedPolygon = new Cesium.PolygonOutlineGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -72.0, 40.0,\r\n     *       -70.0, 35.0,\r\n     *       -75.0, 30.0,\r\n     *       -70.0, 30.0,\r\n     *       -68.0, 40.0\r\n     *     ])\r\n     *   ),\r\n     *   extrudedHeight: 300000\r\n     * });\r\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(extrudedPolygon);\r\n     */\r\n    function PolygonOutlineGeometry(options) {\r\n        \r\n\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var perPositionHeight = defaultValue(options.perPositionHeight, false);\r\n        var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        if (!perPositionHeightExtrude) {\r\n            var h = Math.max(height, extrudedHeight);\r\n            extrudedHeight = Math.min(height, extrudedHeight);\r\n            height = h;\r\n        }\r\n\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._granularity = granularity;\r\n        this._height = height;\r\n        this._extrudedHeight = extrudedHeight;\r\n        this._polygonHierarchy = polygonHierarchy;\r\n        this._perPositionHeight = perPositionHeight;\r\n        this._perPositionHeightExtrude = perPositionHeightExtrude;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createPolygonOutlineGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + 7;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolygonOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PolygonOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\r\n        array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\r\n        array[startingIndex] = value.packedLength;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var dummyOptions = {\r\n        polygonHierarchy : {}\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolygonOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {PolygonOutlineGeometry} The modified result parameter or a new PolygonOutlineGeometry instance if one was not provided.\r\n     */\r\n    PolygonOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n        startingIndex = polygonHierarchy.startingIndex;\r\n        delete polygonHierarchy.startingIndex;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var height = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var perPositionHeightExtrude = array[startingIndex++] === 1.0;\r\n        var perPositionHeight = array[startingIndex++] === 1.0;\r\n        var offsetAttribute = array[startingIndex++];\r\n        var packedLength = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            result = new PolygonOutlineGeometry(dummyOptions);\r\n        }\r\n\r\n        result._polygonHierarchy = polygonHierarchy;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._height = height;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._granularity = granularity;\r\n        result._perPositionHeight = perPositionHeight;\r\n        result._perPositionHeightExtrude = perPositionHeightExtrude;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n        result.packedLength = packedLength;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * A description of a polygon outline from an array of positions.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n     * @param {Number} [options.height=0.0] The height of the polygon.\r\n     * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n     * @returns {PolygonOutlineGeometry}\r\n     *\r\n     *\r\n     * @example\r\n     * // create a polygon from points\r\n     * var polygon = Cesium.PolygonOutlineGeometry.fromPositions({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     -72.0, 40.0,\r\n     *     -70.0, 35.0,\r\n     *     -75.0, 30.0,\r\n     *     -70.0, 30.0,\r\n     *     -68.0, 40.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\r\n     *\r\n     * @see PolygonOutlineGeometry#createGeometry\r\n     */\r\n    PolygonOutlineGeometry.fromPositions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        \r\n\r\n        var newOptions = {\r\n            polygonHierarchy : {\r\n                positions : options.positions\r\n            },\r\n            height : options.height,\r\n            extrudedHeight : options.extrudedHeight,\r\n            ellipsoid : options.ellipsoid,\r\n            granularity : options.granularity,\r\n            perPositionHeight : options.perPositionHeight,\r\n            offsetAttribute : options.offsetAttribute\r\n        };\r\n        return new PolygonOutlineGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a polygon outline, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PolygonOutlineGeometry} polygonGeometry A description of the polygon outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PolygonOutlineGeometry.createGeometry = function(polygonGeometry) {\r\n        var ellipsoid = polygonGeometry._ellipsoid;\r\n        var granularity = polygonGeometry._granularity;\r\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n        var perPositionHeight = polygonGeometry._perPositionHeight;\r\n\r\n        var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, !perPositionHeight, ellipsoid);\r\n\r\n        if (polygons.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var geometryInstance;\r\n        var geometries = [];\r\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n        var height = polygonGeometry._height;\r\n        var extrudedHeight = polygonGeometry._extrudedHeight;\r\n        var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n        var offsetValue;\r\n        var i;\r\n        if (extrude) {\r\n            for (i = 0; i < polygons.length; i++) {\r\n                geometryInstance = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], minDistance, perPositionHeight);\r\n                geometryInstance.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(geometryInstance.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\r\n                if (defined(polygonGeometry._offsetAttribute)) {\r\n                    var size = geometryInstance.geometry.attributes.position.values.length / 3;\r\n                    var offsetAttribute = new Uint8Array(size);\r\n                    if (polygonGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                        offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n                    } else {\r\n                        offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                        offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n                    }\r\n\r\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                        componentsPerAttribute : 1,\r\n                        values : offsetAttribute\r\n                    });\r\n                }\r\n                geometries.push(geometryInstance);\r\n            }\r\n        } else {\r\n            for (i = 0; i < polygons.length; i++) {\r\n                geometryInstance = createGeometryFromPositions(ellipsoid, polygons[i], minDistance, perPositionHeight);\r\n                geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometryInstance.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\r\n\r\n                if (defined(polygonGeometry._offsetAttribute)) {\r\n                    var length = geometryInstance.geometry.attributes.position.values.length;\r\n                    var applyOffset = new Uint8Array(length / 3);\r\n                    offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                    arrayFill(applyOffset, offsetValue);\r\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                        componentsPerAttribute : 1,\r\n                        values: applyOffset\r\n                    });\r\n                }\r\n\r\n                geometries.push(geometryInstance);\r\n            }\r\n        }\r\n\r\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n        var boundingSphere = BoundingSphere.fromVertices(geometry.attributes.position.values);\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : polygonGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    return PolygonOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolygonOutlineGeometry.js\n// module id = 285\n// module chunks = 0","define([\r\n        './arrayRemoveDuplicates',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Color',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryType',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PolylinePipeline',\r\n        './PrimitiveType',\r\n        './VertexFormat'\r\n    ], function(\r\n        arrayRemoveDuplicates,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Color,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryType,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PolylinePipeline,\r\n        PrimitiveType,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var scratchInterpolateColorsArray = [];\r\n\r\n    function interpolateColors(p0, p1, color0, color1, numPoints) {\r\n        var colors = scratchInterpolateColorsArray;\r\n        colors.length = numPoints;\r\n        var i;\r\n\r\n        var r0 = color0.red;\r\n        var g0 = color0.green;\r\n        var b0 = color0.blue;\r\n        var a0 = color0.alpha;\r\n\r\n        var r1 = color1.red;\r\n        var g1 = color1.green;\r\n        var b1 = color1.blue;\r\n        var a1 = color1.alpha;\r\n\r\n        if (Color.equals(color0, color1)) {\r\n            for (i = 0; i < numPoints; i++) {\r\n                colors[i] = Color.clone(color0);\r\n            }\r\n            return colors;\r\n        }\r\n\r\n        var redPerVertex = (r1 - r0) / numPoints;\r\n        var greenPerVertex = (g1 - g0) / numPoints;\r\n        var bluePerVertex = (b1 - b0) / numPoints;\r\n        var alphaPerVertex = (a1 - a0) / numPoints;\r\n\r\n        for (i = 0; i < numPoints; i++) {\r\n            colors[i] = new Color(r0 + i * redPerVertex, g0 + i * greenPerVertex, b0 + i * bluePerVertex, a0 + i * alphaPerVertex);\r\n        }\r\n\r\n        return colors;\r\n    }\r\n\r\n    /**\r\n     * A description of a polyline modeled as a line strip; the first two positions define a line segment,\r\n     * and each additional position defines a line segment from the previous position. The polyline is capable of\r\n     * displaying with a material.\r\n     *\r\n     * @alias PolylineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\r\n     * @param {Number} [options.width=1.0] The width in pixels.\r\n     * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\r\n     * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\r\n     * @param {Boolean} [options.followSurface=true] A boolean that determines whether positions will be adjusted to the surface of the ellipsoid via a great arc.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.followSurface=true. Determines the number of positions in the buffer.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     *\r\n     * @exception {DeveloperError} At least two positions are required.\r\n     * @exception {DeveloperError} width must be greater than or equal to one.\r\n     * @exception {DeveloperError} colors has an invalid length.\r\n     *\r\n     * @see PolylineGeometry#createGeometry\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\r\n     *\r\n     * @example\r\n     * // A polyline with two connected line segments\r\n     * var polyline = new Cesium.PolylineGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     0.0, 0.0,\r\n     *     5.0, 0.0,\r\n     *     5.0, 5.0\r\n     *   ]),\r\n     *   width : 10.0\r\n     * });\r\n     * var geometry = Cesium.PolylineGeometry.createGeometry(polyline);\r\n     */\r\n    function PolylineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n        var colors = options.colors;\r\n        var width = defaultValue(options.width, 1.0);\r\n        var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\r\n\r\n        \r\n\r\n        this._positions = positions;\r\n        this._colors = colors;\r\n        this._width = width;\r\n        this._colorsPerVertex = colorsPerVertex;\r\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n        this._followSurface = defaultValue(options.followSurface, true);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._workerName = 'createPolylineGeometry';\r\n\r\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n        numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolylineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PolylineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var colors = value._colors;\r\n        length = defined(colors) ? colors.length : 0.0;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n            Color.pack(colors[i], array, startingIndex);\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._width;\r\n        array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._followSurface ? 1.0 : 0.0;\r\n        array[startingIndex]   = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        positions : undefined,\r\n        colors : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        width : undefined,\r\n        colorsPerVertex : undefined,\r\n        followSurface : undefined,\r\n        granularity : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolylineGeometry} [result] The object into which to store the result.\r\n     * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\r\n     */\r\n    PolylineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var colors = length > 0 ? new Array(length) : undefined;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n            colors[i] = Color.unpack(array, startingIndex);\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var width = array[startingIndex++];\r\n        var colorsPerVertex = array[startingIndex++] === 1.0;\r\n        var followSurface = array[startingIndex++] === 1.0;\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.positions = positions;\r\n            scratchOptions.colors = colors;\r\n            scratchOptions.width = width;\r\n            scratchOptions.colorsPerVertex = colorsPerVertex;\r\n            scratchOptions.followSurface = followSurface;\r\n            scratchOptions.granularity = granularity;\r\n            return new PolylineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._colors = colors;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._width = width;\r\n        result._colorsPerVertex = colorsPerVertex;\r\n        result._followSurface = followSurface;\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    var scratchCartesian3 = new Cartesian3();\r\n    var scratchPosition = new Cartesian3();\r\n    var scratchPrevPosition = new Cartesian3();\r\n    var scratchNextPosition = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PolylineGeometry} polylineGeometry A description of the polyline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PolylineGeometry.createGeometry = function(polylineGeometry) {\r\n        var width = polylineGeometry._width;\r\n        var vertexFormat = polylineGeometry._vertexFormat;\r\n        var colors = polylineGeometry._colors;\r\n        var colorsPerVertex = polylineGeometry._colorsPerVertex;\r\n        var followSurface = polylineGeometry._followSurface;\r\n        var granularity = polylineGeometry._granularity;\r\n        var ellipsoid = polylineGeometry._ellipsoid;\r\n\r\n        var i;\r\n        var j;\r\n        var k;\r\n\r\n        var positions = arrayRemoveDuplicates(polylineGeometry._positions, Cartesian3.equalsEpsilon);\r\n        var positionsLength = positions.length;\r\n\r\n        // A width of a pixel or less is not a valid geometry, but in order to support external data\r\n        // that may have errors we treat this as an empty geometry.\r\n        if (positionsLength < 2 || width <= 0.0) {\r\n            return undefined;\r\n        }\r\n\r\n        if (followSurface) {\r\n            var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\r\n            var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n            if (defined(colors)) {\r\n                var colorLength = 1;\r\n                for (i = 0; i < positionsLength - 1; ++i) {\r\n                    colorLength += PolylinePipeline.numberOfPoints(positions[i], positions[i+1], minDistance);\r\n                }\r\n\r\n                var newColors = new Array(colorLength);\r\n                var newColorIndex = 0;\r\n\r\n                for (i = 0; i < positionsLength - 1; ++i) {\r\n                    var p0 = positions[i];\r\n                    var p1 = positions[i+1];\r\n                    var c0 = colors[i];\r\n\r\n                    var numColors = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\r\n                    if (colorsPerVertex && i < colorLength) {\r\n                        var c1 = colors[i+1];\r\n                        var interpolatedColors = interpolateColors(p0, p1, c0, c1, numColors);\r\n                        var interpolatedColorsLength = interpolatedColors.length;\r\n                        for (j = 0; j < interpolatedColorsLength; ++j) {\r\n                            newColors[newColorIndex++] = interpolatedColors[j];\r\n                        }\r\n                    } else {\r\n                        for (j = 0; j < numColors; ++j) {\r\n                            newColors[newColorIndex++] = Color.clone(c0);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                newColors[newColorIndex] = Color.clone(colors[colors.length-1]);\r\n                colors = newColors;\r\n\r\n                scratchInterpolateColorsArray.length = 0;\r\n            }\r\n\r\n            positions = PolylinePipeline.generateCartesianArc({\r\n                positions: positions,\r\n                minDistance: minDistance,\r\n                ellipsoid: ellipsoid,\r\n                height: heights\r\n            });\r\n        }\r\n\r\n        positionsLength = positions.length;\r\n        var size = positionsLength * 4.0 - 4.0;\r\n\r\n        var finalPositions = new Float64Array(size * 3);\r\n        var prevPositions = new Float64Array(size * 3);\r\n        var nextPositions = new Float64Array(size * 3);\r\n        var expandAndWidth = new Float32Array(size * 2);\r\n        var st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\r\n        var finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\r\n\r\n        var positionIndex = 0;\r\n        var expandAndWidthIndex = 0;\r\n        var stIndex = 0;\r\n        var colorIndex = 0;\r\n        var position;\r\n\r\n        for (j = 0; j < positionsLength; ++j) {\r\n            if (j === 0) {\r\n                position = scratchCartesian3;\r\n                Cartesian3.subtract(positions[0], positions[1], position);\r\n                Cartesian3.add(positions[0], position, position);\r\n            } else {\r\n                position = positions[j - 1];\r\n            }\r\n\r\n            Cartesian3.clone(position, scratchPrevPosition);\r\n            Cartesian3.clone(positions[j], scratchPosition);\r\n\r\n            if (j === positionsLength - 1) {\r\n                position = scratchCartesian3;\r\n                Cartesian3.subtract(positions[positionsLength - 1], positions[positionsLength - 2], position);\r\n                Cartesian3.add(positions[positionsLength - 1], position, position);\r\n            } else {\r\n                position = positions[j + 1];\r\n            }\r\n\r\n            Cartesian3.clone(position, scratchNextPosition);\r\n\r\n            var color0, color1;\r\n            if (defined(finalColors)) {\r\n                if (j !== 0 && !colorsPerVertex) {\r\n                    color0 = colors[j - 1];\r\n                } else {\r\n                    color0 = colors[j];\r\n                }\r\n\r\n                if (j !== positionsLength - 1) {\r\n                    color1 = colors[j];\r\n                }\r\n            }\r\n\r\n            var startK = j === 0 ? 2 : 0;\r\n            var endK = j === positionsLength - 1 ? 2 : 4;\r\n\r\n            for (k = startK; k < endK; ++k) {\r\n                Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\r\n                Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\r\n                Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\r\n                positionIndex += 3;\r\n\r\n                var direction = (k - 2 < 0) ? -1.0 : 1.0;\r\n                expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;       // expand direction\r\n                expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n                if (vertexFormat.st) {\r\n                    st[stIndex++] = j / (positionsLength - 1);\r\n                    st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\r\n                }\r\n\r\n                if (defined(finalColors)) {\r\n                    var color = (k < 2) ? color0 : color1;\r\n\r\n                    finalColors[colorIndex++] = Color.floatToByte(color.red);\r\n                    finalColors[colorIndex++] = Color.floatToByte(color.green);\r\n                    finalColors[colorIndex++] = Color.floatToByte(color.blue);\r\n                    finalColors[colorIndex++] = Color.floatToByte(color.alpha);\r\n                }\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : finalPositions\r\n        });\r\n\r\n        attributes.prevPosition = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : prevPositions\r\n        });\r\n\r\n        attributes.nextPosition = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : nextPositions\r\n        });\r\n\r\n        attributes.expandAndWidth = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.FLOAT,\r\n            componentsPerAttribute : 2,\r\n            values : expandAndWidth\r\n        });\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : st\r\n            });\r\n        }\r\n\r\n        if (defined(finalColors)) {\r\n            attributes.color = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 4,\r\n                values : finalColors,\r\n                normalize : true\r\n            });\r\n        }\r\n\r\n        var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n        var index = 0;\r\n        var indicesIndex = 0;\r\n        var length = positionsLength - 1.0;\r\n        for (j = 0; j < length; ++j) {\r\n            indices[indicesIndex++] = index;\r\n            indices[indicesIndex++] = index + 2;\r\n            indices[indicesIndex++] = index + 1;\r\n\r\n            indices[indicesIndex++] = index + 1;\r\n            indices[indicesIndex++] = index + 2;\r\n            indices[indicesIndex++] = index + 3;\r\n\r\n            index += 4;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : BoundingSphere.fromPoints(positions),\r\n            geometryType : GeometryType.POLYLINES\r\n        });\r\n    };\r\n\r\n    return PolylineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolylineGeometry.js\n// module id = 286\n// module chunks = 0","define([\r\n        './arrayRemoveDuplicates',\r\n        './BoundingRectangle',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './CornerType',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryPipeline',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './oneTimeWarning',\r\n        './PolygonPipeline',\r\n        './PolylineVolumeGeometryLibrary',\r\n        './PrimitiveType',\r\n        './VertexFormat',\r\n        './WindingOrder'\r\n    ], function(\r\n        arrayRemoveDuplicates,\r\n        BoundingRectangle,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        CornerType,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryPipeline,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        oneTimeWarning,\r\n        PolygonPipeline,\r\n        PolylineVolumeGeometryLibrary,\r\n        PrimitiveType,\r\n        VertexFormat,\r\n        WindingOrder) {\r\n    'use strict';\r\n\r\n    function computeAttributes(combinedPositions, shape, boundingRectangle, vertexFormat) {\r\n        var attributes = new GeometryAttributes();\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : combinedPositions\r\n            });\r\n        }\r\n        var shapeLength = shape.length;\r\n        var vertexCount = combinedPositions.length / 3;\r\n        var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\r\n        var firstEndIndices = PolygonPipeline.triangulate(shape);\r\n\r\n        var indicesCount = (length - 1) * (shapeLength) * 6 + firstEndIndices.length * 2;\r\n        var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\r\n        var i, j;\r\n        var ll, ul, ur, lr;\r\n        var offset = shapeLength * 2;\r\n        var index = 0;\r\n        for (i = 0; i < length - 1; i++) {\r\n            for (j = 0; j < shapeLength - 1; j++) {\r\n                ll = j * 2 + i * shapeLength * 2;\r\n                lr = ll + offset;\r\n                ul = ll + 1;\r\n                ur = ul + offset;\r\n\r\n                indices[index++] = ul;\r\n                indices[index++] = ll;\r\n                indices[index++] = ur;\r\n                indices[index++] = ur;\r\n                indices[index++] = ll;\r\n                indices[index++] = lr;\r\n            }\r\n            ll = shapeLength * 2 - 2 + i * shapeLength * 2;\r\n            ul = ll + 1;\r\n            ur = ul + offset;\r\n            lr = ll + offset;\r\n\r\n            indices[index++] = ul;\r\n            indices[index++] = ll;\r\n            indices[index++] = ur;\r\n            indices[index++] = ur;\r\n            indices[index++] = ll;\r\n            indices[index++] = lr;\r\n        }\r\n\r\n        if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) { // st required for tangent/bitangent calculation\r\n            var st = new Float32Array(vertexCount * 2);\r\n            var lengthSt = 1 / (length - 1);\r\n            var heightSt = 1 / (boundingRectangle.height);\r\n            var heightOffset = boundingRectangle.height / 2;\r\n            var s, t;\r\n            var stindex = 0;\r\n            for (i = 0; i < length; i++) {\r\n                s = i * lengthSt;\r\n                t = heightSt * (shape[0].y + heightOffset);\r\n                st[stindex++] = s;\r\n                st[stindex++] = t;\r\n                for (j = 1; j < shapeLength; j++) {\r\n                    t = heightSt * (shape[j].y + heightOffset);\r\n                    st[stindex++] = s;\r\n                    st[stindex++] = t;\r\n                    st[stindex++] = s;\r\n                    st[stindex++] = t;\r\n                }\r\n                t = heightSt * (shape[0].y + heightOffset);\r\n                st[stindex++] = s;\r\n                st[stindex++] = t;\r\n            }\r\n            for (j = 0; j < shapeLength; j++) {\r\n                s = 0;\r\n                t = heightSt * (shape[j].y + heightOffset);\r\n                st[stindex++] = s;\r\n                st[stindex++] = t;\r\n            }\r\n            for (j = 0; j < shapeLength; j++) {\r\n                s = (length - 1) * lengthSt;\r\n                t = heightSt * (shape[j].y + heightOffset);\r\n                st[stindex++] = s;\r\n                st[stindex++] = t;\r\n            }\r\n\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : new Float32Array(st)\r\n            });\r\n        }\r\n\r\n        var endOffset = vertexCount - shapeLength * 2;\r\n        for (i = 0; i < firstEndIndices.length; i += 3) {\r\n            var v0 = firstEndIndices[i] + endOffset;\r\n            var v1 = firstEndIndices[i + 1] + endOffset;\r\n            var v2 = firstEndIndices[i + 2] + endOffset;\r\n\r\n            indices[index++] = v0;\r\n            indices[index++] = v1;\r\n            indices[index++] = v2;\r\n            indices[index++] = v2 + shapeLength;\r\n            indices[index++] = v1 + shapeLength;\r\n            indices[index++] = v0 + shapeLength;\r\n        }\r\n\r\n        var geometry = new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            boundingSphere : BoundingSphere.fromVertices(combinedPositions),\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n\r\n        if (vertexFormat.normal) {\r\n            geometry = GeometryPipeline.computeNormal(geometry);\r\n        }\r\n\r\n        if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n            try {\r\n                geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\r\n            } catch (e) {\r\n                oneTimeWarning('polyline-volume-tangent-bitangent', 'Unable to compute tangents and bitangents for polyline volume geometry');\r\n                //TODO https://github.com/AnalyticalGraphicsInc/cesium/issues/3609\r\n            }\r\n\r\n            if (!vertexFormat.tangent) {\r\n                geometry.attributes.tangent = undefined;\r\n            }\r\n            if (!vertexFormat.bitangent) {\r\n                geometry.attributes.bitangent = undefined;\r\n            }\r\n            if (!vertexFormat.st) {\r\n                geometry.attributes.st = undefined;\r\n            }\r\n        }\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * A description of a polyline with a volume (a 2D shape extruded along a polyline).\r\n     *\r\n     * @alias PolylineVolumeGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesain3} positions that define the center of the polyline volume.\r\n     * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n     *\r\n     * @see PolylineVolumeGeometry#createGeometry\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\r\n     *\r\n     * @example\r\n     * function computeCircle(radius) {\r\n     *   var positions = [];\r\n     *   for (var i = 0; i < 360; i++) {\r\n     *     var radians = Cesium.Math.toRadians(i);\r\n     *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\r\n     *   }\r\n     *   return positions;\r\n     * }\r\n     *\r\n     * var volume = new Cesium.PolylineVolumeGeometry({\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n     *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     -72.0, 40.0,\r\n     *     -70.0, 35.0\r\n     *   ]),\r\n     *   shapePositions : computeCircle(100000.0)\r\n     * });\r\n     */\r\n    function PolylineVolumeGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.polylinePositions;\r\n        var shape = options.shapePositions;\r\n\r\n        \r\n\r\n        this._positions = positions;\r\n        this._shape = shape;\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._workerName = 'createPolylineVolumeGeometry';\r\n\r\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n        numComponents += 1 + shape.length * Cartesian2.packedLength;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolylineVolumeGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PolylineVolumeGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var shape = value._shape;\r\n        length = shape.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n            Cartesian2.pack(shape[i], array, startingIndex);\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._cornerType;\r\n        array[startingIndex]   = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        polylinePositions : undefined,\r\n        shapePositions : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        cornerType : undefined,\r\n        granularity : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\r\n     * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\r\n     */\r\n    PolylineVolumeGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var shape = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n            shape[i] = Cartesian2.unpack(array, startingIndex);\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var cornerType = array[startingIndex++];\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.polylinePositions = positions;\r\n            scratchOptions.shapePositions = shape;\r\n            scratchOptions.cornerType = cornerType;\r\n            scratchOptions.granularity = granularity;\r\n            return new PolylineVolumeGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._shape = shape;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._cornerType = cornerType;\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    var brScratch = new BoundingRectangle();\r\n\r\n    /**\r\n     * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PolylineVolumeGeometry.createGeometry = function(polylineVolumeGeometry) {\r\n        var positions = polylineVolumeGeometry._positions;\r\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n        var shape2D = polylineVolumeGeometry._shape;\r\n        shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\r\n\r\n        if (cleanPositions.length < 2 || shape2D.length < 3) {\r\n            return undefined;\r\n        }\r\n\r\n        if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\r\n            shape2D.reverse();\r\n        }\r\n        var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\r\n\r\n        var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeGeometry, true);\r\n        return computeAttributes(computedPositions, shape2D, boundingRectangle, polylineVolumeGeometry._vertexFormat);\r\n    };\r\n\r\n    return PolylineVolumeGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolylineVolumeGeometry.js\n// module id = 287\n// module chunks = 0","define([\r\n        './arrayRemoveDuplicates',\r\n        './BoundingRectangle',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './CornerType',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PolygonPipeline',\r\n        './PolylineVolumeGeometryLibrary',\r\n        './PrimitiveType',\r\n        './WindingOrder'\r\n    ], function(\r\n        arrayRemoveDuplicates,\r\n        BoundingRectangle,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        CornerType,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PolygonPipeline,\r\n        PolylineVolumeGeometryLibrary,\r\n        PrimitiveType,\r\n        WindingOrder) {\r\n    'use strict';\r\n\r\n    function computeAttributes(positions, shape) {\r\n        var attributes = new GeometryAttributes();\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n\r\n        var shapeLength = shape.length;\r\n        var vertexCount = attributes.position.values.length / 3;\r\n        var positionLength = positions.length / 3;\r\n        var shapeCount = positionLength / shapeLength;\r\n        var indices = IndexDatatype.createTypedArray(vertexCount, 2 * shapeLength * (shapeCount + 1));\r\n        var i, j;\r\n        var index = 0;\r\n        i = 0;\r\n        var offset = i * shapeLength;\r\n        for (j = 0; j < shapeLength - 1; j++) {\r\n            indices[index++] = j + offset;\r\n            indices[index++] = j + offset + 1;\r\n        }\r\n        indices[index++] = shapeLength - 1 + offset;\r\n        indices[index++] = offset;\r\n\r\n        i = shapeCount - 1;\r\n        offset = i * shapeLength;\r\n        for (j = 0; j < shapeLength - 1; j++) {\r\n            indices[index++] = j + offset;\r\n            indices[index++] = j + offset + 1;\r\n        }\r\n        indices[index++] = shapeLength - 1 + offset;\r\n        indices[index++] = offset;\r\n\r\n        for (i = 0; i < shapeCount - 1; i++) {\r\n            var firstOffset = shapeLength * i;\r\n            var secondOffset = firstOffset + shapeLength;\r\n            for (j = 0; j < shapeLength; j++) {\r\n                indices[index++] = j + firstOffset;\r\n                indices[index++] = j + secondOffset;\r\n            }\r\n        }\r\n\r\n        var geometry = new Geometry({\r\n            attributes : attributes,\r\n            indices : IndexDatatype.createTypedArray(vertexCount, indices),\r\n            boundingSphere : BoundingSphere.fromVertices(positions),\r\n            primitiveType : PrimitiveType.LINES\r\n        });\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * A description of a polyline with a volume (a 2D shape extruded along a polyline).\r\n     *\r\n     * @alias PolylineVolumeOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\r\n     * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n     *\r\n     * @see PolylineVolumeOutlineGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * function computeCircle(radius) {\r\n     *   var positions = [];\r\n     *   for (var i = 0; i < 360; i++) {\r\n     *     var radians = Cesium.Math.toRadians(i);\r\n     *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\r\n     *   }\r\n     *   return positions;\r\n     * }\r\n     *\r\n     * var volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\r\n     *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     -72.0, 40.0,\r\n     *     -70.0, 35.0\r\n     *   ]),\r\n     *   shapePositions : computeCircle(100000.0)\r\n     * });\r\n     */\r\n    function PolylineVolumeOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.polylinePositions;\r\n        var shape = options.shapePositions;\r\n\r\n        \r\n\r\n        this._positions = positions;\r\n        this._shape = shape;\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._workerName = 'createPolylineVolumeOutlineGeometry';\r\n\r\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n        numComponents += 1 + shape.length * Cartesian2.packedLength;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + 2;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolylineVolumeOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PolylineVolumeOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var shape = value._shape;\r\n        length = shape.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n            Cartesian2.pack(shape[i], array, startingIndex);\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._cornerType;\r\n        array[startingIndex]   = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchOptions = {\r\n        polylinePositions : undefined,\r\n        shapePositions : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        height : undefined,\r\n        cornerType : undefined,\r\n        granularity : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\r\n     */\r\n    PolylineVolumeOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var shape = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n            shape[i] = Cartesian2.unpack(array, startingIndex);\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var cornerType = array[startingIndex++];\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.polylinePositions = positions;\r\n            scratchOptions.shapePositions = shape;\r\n            scratchOptions.cornerType = cornerType;\r\n            scratchOptions.granularity = granularity;\r\n            return new PolylineVolumeOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._shape = shape;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._cornerType = cornerType;\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    var brScratch = new BoundingRectangle();\r\n\r\n    /**\r\n     * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PolylineVolumeOutlineGeometry.createGeometry = function(polylineVolumeOutlineGeometry) {\r\n        var positions = polylineVolumeOutlineGeometry._positions;\r\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n        var shape2D = polylineVolumeOutlineGeometry._shape;\r\n        shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\r\n\r\n        if (cleanPositions.length < 2 || shape2D.length < 3) {\r\n            return undefined;\r\n        }\r\n\r\n        if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\r\n            shape2D.reverse();\r\n        }\r\n        var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\r\n\r\n        var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeOutlineGeometry, false);\r\n        return computeAttributes(computedPositions, shape2D);\r\n    };\r\n\r\n    return PolylineVolumeOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PolylineVolumeOutlineGeometry.js\n// module id = 288\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './Check',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './defineProperties',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryInstance',\r\n        './GeometryOffsetAttribute',\r\n        './GeometryPipeline',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './Matrix2',\r\n        './Matrix3',\r\n        './PolygonPipeline',\r\n        './PrimitiveType',\r\n        './Quaternion',\r\n        './Rectangle',\r\n        './RectangleGeometryLibrary',\r\n        './VertexFormat'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Check,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryInstance,\r\n        GeometryOffsetAttribute,\r\n        GeometryPipeline,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        Matrix2,\r\n        Matrix3,\r\n        PolygonPipeline,\r\n        PrimitiveType,\r\n        Quaternion,\r\n        Rectangle,\r\n        RectangleGeometryLibrary,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    var positionScratch = new Cartesian3();\r\n    var normalScratch = new Cartesian3();\r\n    var tangentScratch = new Cartesian3();\r\n    var bitangentScratch = new Cartesian3();\r\n    var rectangleScratch = new Rectangle();\r\n    var stScratch = new Cartesian2();\r\n    var bottomBoundingSphere = new BoundingSphere();\r\n    var topBoundingSphere = new BoundingSphere();\r\n\r\n    function createAttributes(vertexFormat, attributes) {\r\n        var geo = new Geometry({\r\n            attributes : new GeometryAttributes(),\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n\r\n        geo.attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : attributes.positions\r\n        });\r\n        if (vertexFormat.normal) {\r\n            geo.attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attributes.normals\r\n            });\r\n        }\r\n        if (vertexFormat.tangent) {\r\n            geo.attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attributes.tangents\r\n            });\r\n        }\r\n        if (vertexFormat.bitangent) {\r\n            geo.attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attributes.bitangents\r\n            });\r\n        }\r\n        return geo;\r\n    }\r\n\r\n    function calculateAttributes(positions, vertexFormat, ellipsoid, tangentRotationMatrix) {\r\n        var length = positions.length;\r\n\r\n        var normals = (vertexFormat.normal) ? new Float32Array(length) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(length) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(length) : undefined;\r\n\r\n        var attrIndex = 0;\r\n        var bitangent = bitangentScratch;\r\n        var tangent = tangentScratch;\r\n        var normal = normalScratch;\r\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n            for (var i = 0; i < length; i += 3) {\r\n                var p = Cartesian3.fromArray(positions, i, positionScratch);\r\n                var attrIndex1 = attrIndex + 1;\r\n                var attrIndex2 = attrIndex + 2;\r\n\r\n                normal = ellipsoid.geodeticSurfaceNormal(p, normal);\r\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\r\n                    Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent);\r\n                    Cartesian3.normalize(tangent, tangent);\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                    }\r\n                }\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[attrIndex] = normal.x;\r\n                    normals[attrIndex1] = normal.y;\r\n                    normals[attrIndex2] = normal.z;\r\n                }\r\n                if (vertexFormat.tangent) {\r\n                    tangents[attrIndex] = tangent.x;\r\n                    tangents[attrIndex1] = tangent.y;\r\n                    tangents[attrIndex2] = tangent.z;\r\n                }\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[attrIndex] = bitangent.x;\r\n                    bitangents[attrIndex1] = bitangent.y;\r\n                    bitangents[attrIndex2] = bitangent.z;\r\n                }\r\n                attrIndex += 3;\r\n            }\r\n        }\r\n        return createAttributes(vertexFormat, {\r\n            positions : positions,\r\n            normals : normals,\r\n            tangents : tangents,\r\n            bitangents : bitangents\r\n        });\r\n    }\r\n\r\n    var v1Scratch = new Cartesian3();\r\n    var v2Scratch = new Cartesian3();\r\n\r\n    function calculateAttributesWall(positions, vertexFormat, ellipsoid) {\r\n        var length = positions.length;\r\n\r\n        var normals = (vertexFormat.normal) ? new Float32Array(length) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(length) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(length) : undefined;\r\n\r\n        var normalIndex = 0;\r\n        var tangentIndex = 0;\r\n        var bitangentIndex = 0;\r\n        var recomputeNormal = true;\r\n\r\n        var bitangent = bitangentScratch;\r\n        var tangent = tangentScratch;\r\n        var normal = normalScratch;\r\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n            for (var i = 0; i < length; i += 6) {\r\n                var p = Cartesian3.fromArray(positions, i, positionScratch);\r\n                var p1 = Cartesian3.fromArray(positions, (i + 6) % length, v1Scratch);\r\n                if (recomputeNormal) {\r\n                    var p2 = Cartesian3.fromArray(positions, (i + 3) % length, v2Scratch);\r\n                    Cartesian3.subtract(p1, p, p1);\r\n                    Cartesian3.subtract(p2, p, p2);\r\n                    normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\r\n                    recomputeNormal = false;\r\n                }\r\n\r\n                if (Cartesian3.equalsEpsilon(p1, p, CesiumMath.EPSILON10)) { // if we've reached a corner\r\n                    recomputeNormal = true;\r\n                }\r\n\r\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    bitangent = ellipsoid.geodeticSurfaceNormal(p, bitangent);\r\n                    if (vertexFormat.tangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                    }\r\n                }\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n                }\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n                }\r\n            }\r\n        }\r\n\r\n        return createAttributes(vertexFormat, {\r\n            positions : positions,\r\n            normals : normals,\r\n            tangents : tangents,\r\n            bitangents : bitangents\r\n        });\r\n    }\r\n\r\n    function constructRectangle(rectangleGeometry, computedOptions) {\r\n        var vertexFormat = rectangleGeometry._vertexFormat;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n        var size = computedOptions.size;\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n\r\n        var positions = (vertexFormat.position) ? new Float64Array(size * 3) : undefined;\r\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\r\n\r\n        var posIndex = 0;\r\n        var stIndex = 0;\r\n\r\n        var position = positionScratch;\r\n        var st = stScratch;\r\n\r\n        var minX = Number.MAX_VALUE;\r\n        var minY = Number.MAX_VALUE;\r\n        var maxX = -Number.MAX_VALUE;\r\n        var maxY = -Number.MAX_VALUE;\r\n\r\n        for (var row = 0; row < height; ++row) {\r\n            for (var col = 0; col < width; ++col) {\r\n                RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, row, col, position, st);\r\n\r\n                positions[posIndex++] = position.x;\r\n                positions[posIndex++] = position.y;\r\n                positions[posIndex++] = position.z;\r\n\r\n                if (vertexFormat.st) {\r\n                    textureCoordinates[stIndex++] = st.x;\r\n                    textureCoordinates[stIndex++] = st.y;\r\n\r\n                    minX = Math.min(minX, st.x);\r\n                    minY = Math.min(minY, st.y);\r\n                    maxX = Math.max(maxX, st.x);\r\n                    maxY = Math.max(maxY, st.y);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (vertexFormat.st && (minX < 0.0 || minY < 0.0 || maxX > 1.0 || maxY > 1.0)) {\r\n            for (var k = 0; k < textureCoordinates.length; k += 2) {\r\n                textureCoordinates[k] = (textureCoordinates[k] - minX) / (maxX - minX);\r\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minY) / (maxY - minY);\r\n            }\r\n        }\r\n\r\n        var geo = calculateAttributes(positions, vertexFormat, ellipsoid, computedOptions.tangentRotationMatrix);\r\n\r\n        var indicesSize = 6 * (width - 1) * (height - 1);\r\n        var indices = IndexDatatype.createTypedArray(size, indicesSize);\r\n        var index = 0;\r\n        var indicesIndex = 0;\r\n        for (var i = 0; i < height - 1; ++i) {\r\n            for (var j = 0; j < width - 1; ++j) {\r\n                var upperLeft = index;\r\n                var lowerLeft = upperLeft + width;\r\n                var lowerRight = lowerLeft + 1;\r\n                var upperRight = upperLeft + 1;\r\n                indices[indicesIndex++] = upperLeft;\r\n                indices[indicesIndex++] = lowerLeft;\r\n                indices[indicesIndex++] = upperRight;\r\n                indices[indicesIndex++] = upperRight;\r\n                indices[indicesIndex++] = lowerLeft;\r\n                indices[indicesIndex++] = lowerRight;\r\n                ++index;\r\n            }\r\n            ++index;\r\n        }\r\n\r\n        geo.indices = indices;\r\n        if (vertexFormat.st) {\r\n            geo.attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        return geo;\r\n    }\r\n\r\n    function addWallPositions(wallPositions, posIndex, i, topPositions, bottomPositions) {\r\n        wallPositions[posIndex++] = topPositions[i];\r\n        wallPositions[posIndex++] = topPositions[i + 1];\r\n        wallPositions[posIndex++] = topPositions[i + 2];\r\n        wallPositions[posIndex++] = bottomPositions[i];\r\n        wallPositions[posIndex++] = bottomPositions[i + 1];\r\n        wallPositions[posIndex++] = bottomPositions[i + 2];\r\n        return wallPositions;\r\n    }\r\n\r\n    function addWallTextureCoordinates(wallTextures, stIndex, i, st) {\r\n        wallTextures[stIndex++] = st[i];\r\n        wallTextures[stIndex++] = st[i + 1];\r\n        wallTextures[stIndex++] = st[i];\r\n        wallTextures[stIndex++] = st[i + 1];\r\n        return wallTextures;\r\n    }\r\n\r\n    var scratchVertexFormat = new VertexFormat();\r\n\r\n    function constructExtrudedRectangle(rectangleGeometry, computedOptions) {\r\n        var shadowVolume = rectangleGeometry._shadowVolume;\r\n        var offsetAttributeValue = rectangleGeometry._offsetAttribute;\r\n        var vertexFormat = rectangleGeometry._vertexFormat;\r\n        var minHeight = rectangleGeometry._extrudedHeight;\r\n        var maxHeight = rectangleGeometry._surfaceHeight;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n\r\n        var i;\r\n\r\n        if (shadowVolume) {\r\n            var newVertexFormat = VertexFormat.clone(vertexFormat, scratchVertexFormat);\r\n            newVertexFormat.normal = true;\r\n            rectangleGeometry._vertexFormat = newVertexFormat;\r\n        }\r\n\r\n        var topBottomGeo = constructRectangle(rectangleGeometry, computedOptions);\r\n\r\n        if (shadowVolume) {\r\n            rectangleGeometry._vertexFormat = vertexFormat;\r\n        }\r\n\r\n        var topPositions = PolygonPipeline.scaleToGeodeticHeight(topBottomGeo.attributes.position.values, maxHeight, ellipsoid, false);\r\n        topPositions = new Float64Array(topPositions);\r\n        var length = topPositions.length;\r\n        var newLength = length * 2;\r\n        var positions = new Float64Array(newLength);\r\n        positions.set(topPositions);\r\n        var bottomPositions = PolygonPipeline.scaleToGeodeticHeight(topBottomGeo.attributes.position.values, minHeight, ellipsoid);\r\n        positions.set(bottomPositions, length);\r\n        topBottomGeo.attributes.position.values = positions;\r\n\r\n        var normals = (vertexFormat.normal) ? new Float32Array(newLength) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(newLength) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(newLength) : undefined;\r\n        var textures = (vertexFormat.st) ? new Float32Array(newLength / 3 * 2) : undefined;\r\n        var topSt;\r\n        var topNormals;\r\n        if (vertexFormat.normal) {\r\n            topNormals = topBottomGeo.attributes.normal.values;\r\n            normals.set(topNormals);\r\n            for (i = 0; i < length; i++) {\r\n                topNormals[i] = -topNormals[i];\r\n            }\r\n            normals.set(topNormals, length);\r\n            topBottomGeo.attributes.normal.values = normals;\r\n        }\r\n        if (shadowVolume) {\r\n            topNormals = topBottomGeo.attributes.normal.values;\r\n            if (!vertexFormat.normal) {\r\n                topBottomGeo.attributes.normal = undefined;\r\n            }\r\n            var extrudeNormals = new Float32Array(newLength);\r\n            for (i = 0; i < length; i++) {\r\n                topNormals[i] = -topNormals[i];\r\n            }\r\n            extrudeNormals.set(topNormals, length); //only get normals for bottom layer that's going to be pushed down\r\n            topBottomGeo.attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : extrudeNormals\r\n            });\r\n        }\r\n\r\n        var offsetValue;\r\n        var hasOffsets = defined(offsetAttributeValue);\r\n        if (hasOffsets) {\r\n            var size = length / 3 * 2;\r\n            var offsetAttribute = new Uint8Array(size);\r\n            if (offsetAttributeValue === GeometryOffsetAttribute.TOP) {\r\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n            } else {\r\n                offsetValue = offsetAttributeValue === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n\r\n            topBottomGeo.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : offsetAttribute\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            var topTangents = topBottomGeo.attributes.tangent.values;\r\n            tangents.set(topTangents);\r\n            for (i = 0; i < length; i++) {\r\n                topTangents[i] = -topTangents[i];\r\n            }\r\n            tangents.set(topTangents, length);\r\n            topBottomGeo.attributes.tangent.values = tangents;\r\n        }\r\n        if (vertexFormat.bitangent) {\r\n            var topBitangents = topBottomGeo.attributes.bitangent.values;\r\n            bitangents.set(topBitangents);\r\n            bitangents.set(topBitangents, length);\r\n            topBottomGeo.attributes.bitangent.values = bitangents;\r\n        }\r\n        if (vertexFormat.st) {\r\n            topSt = topBottomGeo.attributes.st.values;\r\n            textures.set(topSt);\r\n            textures.set(topSt, length / 3 * 2);\r\n            topBottomGeo.attributes.st.values = textures;\r\n        }\r\n\r\n        var indices = topBottomGeo.indices;\r\n        var indicesLength = indices.length;\r\n        var posLength = length / 3;\r\n        var newIndices = IndexDatatype.createTypedArray(newLength / 3, indicesLength * 2);\r\n        newIndices.set(indices);\r\n        for (i = 0; i < indicesLength; i += 3) {\r\n            newIndices[i + indicesLength] = indices[i + 2] + posLength;\r\n            newIndices[i + 1 + indicesLength] = indices[i + 1] + posLength;\r\n            newIndices[i + 2 + indicesLength] = indices[i] + posLength;\r\n        }\r\n        topBottomGeo.indices = newIndices;\r\n\r\n        var perimeterPositions = 2 * width + 2 * height - 4;\r\n        var wallCount = (perimeterPositions + 4) * 2;\r\n\r\n        var wallPositions = new Float64Array(wallCount * 3);\r\n        var wallExtrudeNormals = shadowVolume ? new Float32Array(wallCount * 3) : undefined;\r\n        var wallOffsetAttribute = hasOffsets ? new Uint8Array(wallCount) : undefined;\r\n        var wallTextures = (vertexFormat.st) ? new Float32Array(wallCount * 2) : undefined;\r\n\r\n        var computeTopOffsets = offsetAttributeValue === GeometryOffsetAttribute.TOP;\r\n        if (hasOffsets && !computeTopOffsets) {\r\n            offsetValue = offsetAttributeValue === GeometryOffsetAttribute.ALL ? 1 : 0;\r\n            wallOffsetAttribute = arrayFill(wallOffsetAttribute, offsetValue);\r\n        }\r\n\r\n        var posIndex = 0;\r\n        var stIndex = 0;\r\n        var extrudeNormalIndex = 0;\r\n        var wallOffsetIndex = 0;\r\n        var area = width * height;\r\n        var threeI;\r\n        for (i = 0; i < area; i += width) {\r\n            threeI = i * 3;\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n        }\r\n\r\n        for (i = area - width; i < area; i++) {\r\n            threeI = i * 3;\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n\r\n        }\r\n\r\n        for (i = area - 1; i > 0; i -= width) {\r\n            threeI = i * 3;\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n\r\n        }\r\n\r\n        for (i = width - 1; i >= 0; i--) {\r\n            threeI = i * 3;\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n        }\r\n\r\n        var geo = calculateAttributesWall(wallPositions, vertexFormat, ellipsoid);\r\n\r\n        if (vertexFormat.st) {\r\n            geo.attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : wallTextures\r\n            });\r\n        }\r\n        if (shadowVolume) {\r\n            geo.attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : wallExtrudeNormals\r\n            });\r\n        }\r\n        if (hasOffsets) {\r\n            geo.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : wallOffsetAttribute\r\n            });\r\n        }\r\n\r\n        var wallIndices = IndexDatatype.createTypedArray(wallCount, perimeterPositions * 6);\r\n\r\n        var upperLeft;\r\n        var lowerLeft;\r\n        var lowerRight;\r\n        var upperRight;\r\n        length = wallPositions.length / 3;\r\n        var index = 0;\r\n        for (i = 0; i < length - 1; i += 2) {\r\n            upperLeft = i;\r\n            upperRight = (upperLeft + 2) % length;\r\n            var p1 = Cartesian3.fromArray(wallPositions, upperLeft * 3, v1Scratch);\r\n            var p2 = Cartesian3.fromArray(wallPositions, upperRight * 3, v2Scratch);\r\n            if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON10)) {\r\n                continue;\r\n            }\r\n            lowerLeft = (upperLeft + 1) % length;\r\n            lowerRight = (lowerLeft + 2) % length;\r\n            wallIndices[index++] = upperLeft;\r\n            wallIndices[index++] = lowerLeft;\r\n            wallIndices[index++] = upperRight;\r\n            wallIndices[index++] = upperRight;\r\n            wallIndices[index++] = lowerLeft;\r\n            wallIndices[index++] = lowerRight;\r\n        }\r\n\r\n        geo.indices = wallIndices;\r\n\r\n        geo = GeometryPipeline.combineInstances([\r\n            new GeometryInstance({\r\n                geometry : topBottomGeo\r\n            }),\r\n            new GeometryInstance({\r\n                geometry : geo\r\n            })\r\n        ]);\r\n\r\n        return geo[0];\r\n    }\r\n\r\n    var scratchRectanglePoints = [new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3()];\r\n    var nwScratch = new Cartographic();\r\n    var stNwScratch = new Cartographic();\r\n    function computeRectangle(rectangle, granularity, rotation, ellipsoid, result) {\r\n        if (rotation === 0.0) {\r\n            return Rectangle.clone(rectangle, result);\r\n        }\r\n\r\n        var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, granularity, rotation, 0, rectangleScratch, nwScratch);\r\n\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n\r\n        var positions = scratchRectanglePoints;\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, 0, 0, positions[0]);\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, 0, width - 1, positions[1]);\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, height - 1, 0, positions[2]);\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, height - 1, width - 1, positions[3]);\r\n\r\n        return Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n    }\r\n\r\n    /**\r\n     * A description of a cartographic rectangle on an ellipsoid centered at the origin. Rectangle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias RectangleGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the rectangle and the ellipsoid surface.\r\n     * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the rectangle's extruded face and the ellipsoid surface.\r\n     *\r\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be greater than <code>options.rectangle.south</code>.\r\n     *\r\n     * @see RectangleGeometry#createGeometry\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Rectangle.html|Cesium Sandcastle Rectangle Demo}\r\n     *\r\n     * @example\r\n     * // 1. create a rectangle\r\n     * var rectangle = new Cesium.RectangleGeometry({\r\n     *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n     *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n     *   height : 10000.0\r\n     * });\r\n     * var geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\r\n     *\r\n     * // 2. create an extruded rectangle without a top\r\n     * var rectangle = new Cesium.RectangleGeometry({\r\n     *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n     *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n     *   height : 10000.0,\r\n     *   extrudedHeight: 300000\r\n     * });\r\n     * var geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\r\n     */\r\n    function RectangleGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var rectangle = options.rectangle;\r\n\r\n        \r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._rectangle = Rectangle.clone(rectangle);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._surfaceHeight = Math.max(height, extrudedHeight);\r\n        this._rotation = defaultValue(options.rotation, 0.0);\r\n        this._stRotation = defaultValue(options.stRotation, 0.0);\r\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n        this._extrudedHeight = Math.min(height, extrudedHeight);\r\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n        this._workerName = 'createRectangleGeometry';\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._rotatedRectangle = undefined;\r\n\r\n        this._textureCoordinateRotationPoints = undefined;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    RectangleGeometry.packedLength = Rectangle.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 7;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {RectangleGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    RectangleGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Rectangle.pack(value._rectangle, array, startingIndex);\r\n        startingIndex += Rectangle.packedLength;\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._surfaceHeight;\r\n        array[startingIndex++] = value._rotation;\r\n        array[startingIndex++] = value._stRotation;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchRectangle = new Rectangle();\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchOptions = {\r\n        rectangle : scratchRectangle,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        granularity : undefined,\r\n        height : undefined,\r\n        rotation : undefined,\r\n        stRotation : undefined,\r\n        extrudedHeight : undefined,\r\n        shadowVolume : undefined,\r\n        offsetAttribute: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {RectangleGeometry} [result] The object into which to store the result.\r\n     * @returns {RectangleGeometry} The modified result parameter or a new RectangleGeometry instance if one was not provided.\r\n     */\r\n    RectangleGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var rectangle = Rectangle.unpack(array, startingIndex, scratchRectangle);\r\n        startingIndex += Rectangle.packedLength;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var granularity = array[startingIndex++];\r\n        var surfaceHeight = array[startingIndex++];\r\n        var rotation = array[startingIndex++];\r\n        var stRotation = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var shadowVolume = array[startingIndex++] === 1.0;\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.height = surfaceHeight;\r\n            scratchOptions.rotation = rotation;\r\n            scratchOptions.stRotation = stRotation;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.shadowVolume = shadowVolume;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n            return new RectangleGeometry(scratchOptions);\r\n        }\r\n\r\n        result._rectangle = Rectangle.clone(rectangle, result._rectangle);\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._granularity = granularity;\r\n        result._surfaceHeight = surfaceHeight;\r\n        result._rotation = rotation;\r\n        result._stRotation = stRotation;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._shadowVolume = shadowVolume;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the bounding rectangle based on the provided options\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Rectangle} [result] An object in which to store the result.\r\n     *\r\n     * @returns {Rectangle} The result rectangle\r\n     */\r\n    RectangleGeometry.computeRectangle = function(options, result) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var rectangle = options.rectangle;\r\n\r\n        \r\n\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n        return computeRectangle(rectangle, granularity, rotation, ellipsoid, result);\r\n    };\r\n\r\n    var tangentRotationMatrixScratch = new Matrix3();\r\n    var quaternionScratch = new Quaternion();\r\n    var centerScratch = new Cartographic();\r\n    /**\r\n     * Computes the geometric representation of a rectangle, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {RectangleGeometry} rectangleGeometry A description of the rectangle.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     *\r\n     * @exception {DeveloperError} Rotated rectangle is invalid.\r\n     */\r\n    RectangleGeometry.createGeometry = function(rectangleGeometry) {\r\n        if ((CesiumMath.equalsEpsilon(rectangleGeometry._rectangle.north, rectangleGeometry._rectangle.south, CesiumMath.EPSILON10) ||\r\n             (CesiumMath.equalsEpsilon(rectangleGeometry._rectangle.east, rectangleGeometry._rectangle.west, CesiumMath.EPSILON10)))) {\r\n            return undefined;\r\n        }\r\n\r\n        var rectangle = rectangleGeometry._rectangle;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n        var rotation = rectangleGeometry._rotation;\r\n        var stRotation = rectangleGeometry._stRotation;\r\n        var vertexFormat = rectangleGeometry._vertexFormat;\r\n\r\n        var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, rectangleGeometry._granularity, rotation, stRotation, rectangleScratch, nwScratch, stNwScratch);\r\n\r\n        var tangentRotationMatrix = tangentRotationMatrixScratch;\r\n        if (stRotation !== 0 || rotation !== 0) {\r\n            var center = Rectangle.center(rectangle, centerScratch);\r\n            var axis = ellipsoid.geodeticSurfaceNormalCartographic(center, v1Scratch);\r\n            Quaternion.fromAxisAngle(axis, -stRotation, quaternionScratch);\r\n            Matrix3.fromQuaternion(quaternionScratch, tangentRotationMatrix);\r\n        } else {\r\n            Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\r\n        }\r\n\r\n        var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n        var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(surfaceHeight, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        computedOptions.lonScalar = 1.0 / rectangleGeometry._rectangle.width;\r\n        computedOptions.latScalar = 1.0 / rectangleGeometry._rectangle.height;\r\n        computedOptions.tangentRotationMatrix = tangentRotationMatrix;\r\n        computedOptions.size = computedOptions.width * computedOptions.height;\r\n\r\n        var geometry;\r\n        var boundingSphere;\r\n        rectangle = rectangleGeometry._rectangle;\r\n        if (extrude) {\r\n            geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);\r\n            var topBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight, topBoundingSphere);\r\n            var bottomBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, extrudedHeight, bottomBoundingSphere);\r\n            boundingSphere = BoundingSphere.union(topBS, bottomBS);\r\n        } else {\r\n            geometry = constructRectangle(rectangleGeometry, computedOptions);\r\n            geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometry.attributes.position.values, surfaceHeight, ellipsoid, false);\r\n\r\n            if (defined(rectangleGeometry._offsetAttribute)) {\r\n                var length = geometry.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                var offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n\r\n            boundingSphere = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight);\r\n        }\r\n\r\n        if (!vertexFormat.position) {\r\n            delete geometry.attributes.position;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : rectangleGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    RectangleGeometry.createShadowVolume = function(rectangleGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = rectangleGeometry._granularity;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new RectangleGeometry({\r\n            rectangle : rectangleGeometry._rectangle,\r\n            rotation : rectangleGeometry._rotation,\r\n            ellipsoid : ellipsoid,\r\n            stRotation : rectangleGeometry._stRotation,\r\n            granularity : granularity,\r\n            extrudedHeight : maxHeight,\r\n            height : minHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume : true\r\n        });\r\n    };\r\n\r\n    var unrotatedTextureRectangleScratch = new Rectangle();\r\n    var points2DScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\r\n    var rotation2DScratch = new Matrix2();\r\n    var rectangleCenterScratch = new Cartographic();\r\n\r\n    function textureCoordinateRotationPoints(rectangleGeometry) {\r\n        if (rectangleGeometry._stRotation === 0.0) {\r\n            return [0, 0, 0, 1, 1, 0];\r\n        }\r\n\r\n        var rectangle = Rectangle.clone(rectangleGeometry._rectangle, unrotatedTextureRectangleScratch);\r\n        var granularity = rectangleGeometry._granularity;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n        // Rotate to align the texture coordinates with ENU\r\n        var rotation = rectangleGeometry._rotation - rectangleGeometry._stRotation;\r\n\r\n        var unrotatedTextureRectangle = computeRectangle(rectangle, granularity, rotation, ellipsoid, unrotatedTextureRectangleScratch);\r\n\r\n        // Assume a computed \"east-north\" texture coordinate system based on spherical or planar tricks, bounded by `boundingRectangle`.\r\n        // The \"desired\" texture coordinate system forms an oriented rectangle (un-oriented computed) around the geometry that completely and tightly bounds it.\r\n        // We want to map from the \"east-north\" texture coordinate system into the \"desired\" system using a pair of lines (analagous planes in 2D)\r\n        // Compute 3 corners of the \"desired\" texture coordinate system in \"east-north\" texture space by the following in cartographic space:\r\n        // - rotate 3 of the corners in unrotatedTextureRectangle by stRotation around the center of the bounding rectangle\r\n        // - apply the \"east-north\" system's normalization formula to the rotated cartographics, even though this is likely to produce values outside [0-1].\r\n        // This gives us a set of points in the \"east-north\" texture coordinate system that can be used to map \"east-north\" texture coordinates to \"desired.\"\r\n\r\n        var points2D = points2DScratch;\r\n        points2D[0].x = unrotatedTextureRectangle.west;\r\n        points2D[0].y = unrotatedTextureRectangle.south;\r\n\r\n        points2D[1].x = unrotatedTextureRectangle.west;\r\n        points2D[1].y = unrotatedTextureRectangle.north;\r\n\r\n        points2D[2].x = unrotatedTextureRectangle.east;\r\n        points2D[2].y = unrotatedTextureRectangle.south;\r\n\r\n        var boundingRectangle = rectangleGeometry.rectangle;\r\n        var toDesiredInComputed = Matrix2.fromRotation(rectangleGeometry._stRotation, rotation2DScratch);\r\n        var boundingRectangleCenter = Rectangle.center(boundingRectangle, rectangleCenterScratch);\r\n\r\n        for (var i = 0; i < 3; ++i) {\r\n            var point2D = points2D[i];\r\n            point2D.x -= boundingRectangleCenter.longitude;\r\n            point2D.y -= boundingRectangleCenter.latitude;\r\n            Matrix2.multiplyByVector(toDesiredInComputed, point2D, point2D);\r\n            point2D.x += boundingRectangleCenter.longitude;\r\n            point2D.y += boundingRectangleCenter.latitude;\r\n\r\n            // Convert point into east-north texture coordinate space\r\n            point2D.x = (point2D.x - boundingRectangle.west) / boundingRectangle.width;\r\n            point2D.y = (point2D.y - boundingRectangle.south) / boundingRectangle.height;\r\n        }\r\n\r\n        var minXYCorner = points2D[0];\r\n        var maxYCorner = points2D[1];\r\n        var maxXCorner = points2D[2];\r\n        var result = new Array(6);\r\n        Cartesian2.pack(minXYCorner, result);\r\n        Cartesian2.pack(maxYCorner, result, 2);\r\n        Cartesian2.pack(maxXCorner, result, 4);\r\n        return result;\r\n    }\r\n\r\n    defineProperties(RectangleGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                if (!defined(this._rotatedRectangle)) {\r\n                    this._rotatedRectangle = computeRectangle(this._rectangle, this._granularity, this._rotation, this._ellipsoid);\r\n                }\r\n                return this._rotatedRectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering RectangleGeometries as GroundPrimitives.\r\n         * This version permits skew in textures by computing offsets directly in cartographic space and\r\n         * more accurately approximates rendering RectangleGeometries with height as standard Primitives.\r\n         * @see Geometry#_textureCoordinateRotationPoints\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                if (!defined(this._textureCoordinateRotationPoints)) {\r\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\r\n                }\r\n                return this._textureCoordinateRotationPoints;\r\n            }\r\n        }\r\n    });\r\n\r\n    return RectangleGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/RectangleGeometry.js\n// module id = 289\n// module chunks = 0","define([\r\n        './arrayFill',\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Cartographic',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './GeometryOffsetAttribute',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PolygonPipeline',\r\n        './PrimitiveType',\r\n        './Rectangle',\r\n        './RectangleGeometryLibrary'\r\n    ], function(\r\n        arrayFill,\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Cartographic,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        GeometryOffsetAttribute,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PolygonPipeline,\r\n        PrimitiveType,\r\n        Rectangle,\r\n        RectangleGeometryLibrary) {\r\n    'use strict';\r\n\r\n    var bottomBoundingSphere = new BoundingSphere();\r\n    var topBoundingSphere = new BoundingSphere();\r\n    var positionScratch = new Cartesian3();\r\n    var rectangleScratch = new Rectangle();\r\n\r\n    function constructRectangle(geometry, computedOptions) {\r\n        var ellipsoid = geometry._ellipsoid;\r\n        var size = computedOptions.size;\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n        var positions = new Float64Array(size * 3);\r\n\r\n        var posIndex = 0;\r\n        var row = 0;\r\n        var col;\r\n        var position = positionScratch;\r\n        for (col = 0; col < width; col++) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        }\r\n\r\n        col = width - 1;\r\n        for (row = 1; row < height; row++) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        }\r\n\r\n        row = height - 1;\r\n        for (col = width-2; col >=0; col--){\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        }\r\n\r\n        col = 0;\r\n        for (row = height - 2; row > 0; row--) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        }\r\n\r\n        var indicesSize = positions.length/3 * 2;\r\n        var indices = IndexDatatype.createTypedArray(positions.length / 3, indicesSize);\r\n\r\n        var index = 0;\r\n        for(var i = 0; i < (positions.length/3)-1; i++) {\r\n            indices[index++] = i;\r\n            indices[index++] = i+1;\r\n        }\r\n        indices[index++] = (positions.length/3)-1;\r\n        indices[index++] = 0;\r\n\r\n        var geo = new Geometry({\r\n            attributes : new GeometryAttributes(),\r\n            primitiveType : PrimitiveType.LINES\r\n        });\r\n\r\n        geo.attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n        geo.indices = indices;\r\n\r\n        return geo;\r\n    }\r\n\r\n    function constructExtrudedRectangle(rectangleGeometry, computedOptions) {\r\n        var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n        var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n        var minHeight = extrudedHeight;\r\n        var maxHeight = surfaceHeight;\r\n        var geo = constructRectangle(rectangleGeometry, computedOptions);\r\n\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n\r\n        var topPositions = PolygonPipeline.scaleToGeodeticHeight(geo.attributes.position.values, maxHeight, ellipsoid, false);\r\n        var length = topPositions.length;\r\n        var positions = new Float64Array(length*2);\r\n        positions.set(topPositions);\r\n        var bottomPositions = PolygonPipeline.scaleToGeodeticHeight(geo.attributes.position.values, minHeight, ellipsoid);\r\n        positions.set(bottomPositions, length);\r\n        geo.attributes.position.values = positions;\r\n\r\n        var indicesSize = positions.length/3 * 2 + 8;\r\n        var indices = IndexDatatype.createTypedArray(positions.length / 3, indicesSize);\r\n        length = positions.length/6;\r\n        var index = 0;\r\n        for (var i = 0; i < length - 1; i++) {\r\n            indices[index++] = i;\r\n            indices[index++] =i+1;\r\n            indices[index++] = i + length;\r\n            indices[index++] = i + length + 1;\r\n        }\r\n        indices[index++] = length - 1;\r\n        indices[index++] = 0;\r\n        indices[index++] = length + length - 1;\r\n        indices[index++] = length;\r\n\r\n        indices[index++] = 0;\r\n        indices[index++] = length;\r\n        indices[index++] = width-1;\r\n        indices[index++] = length + width-1;\r\n        indices[index++] = width + height - 2;\r\n        indices[index++] = width + height - 2 + length;\r\n        indices[index++] =  2*width + height - 3;\r\n        indices[index++] = 2*width + height - 3 + length;\r\n\r\n        geo.indices = indices;\r\n\r\n        return geo;\r\n    }\r\n\r\n    /**\r\n     * A description of the outline of a a cartographic rectangle on an ellipsoid centered at the origin.\r\n     *\r\n     * @alias RectangleOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the rectangle and the ellipsoid surface.\r\n     * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the rectangle's extruded face and the ellipsoid surface.\r\n     *\r\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be greater than <code>rectangle.south</code>.\r\n     *\r\n     * @see RectangleOutlineGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * var rectangle = new Cesium.RectangleOutlineGeometry({\r\n     *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n     *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n     *   height : 10000.0\r\n     * });\r\n     * var geometry = Cesium.RectangleOutlineGeometry.createGeometry(rectangle);\r\n     */\r\n    function RectangleOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var rectangle = options.rectangle;\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n        \r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._rectangle = Rectangle.clone(rectangle);\r\n        this._granularity = granularity;\r\n        this._ellipsoid = ellipsoid;\r\n        this._surfaceHeight = Math.max(height, extrudedHeight);\r\n        this._rotation = rotation;\r\n        this._extrudedHeight = Math.min(height, extrudedHeight);\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createRectangleOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    RectangleOutlineGeometry.packedLength = Rectangle.packedLength + Ellipsoid.packedLength + 5;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {RectangleOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    RectangleOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Rectangle.pack(value._rectangle, array, startingIndex);\r\n        startingIndex += Rectangle.packedLength;\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._surfaceHeight;\r\n        array[startingIndex++] = value._rotation;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchRectangle = new Rectangle();\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchOptions = {\r\n        rectangle : scratchRectangle,\r\n        ellipsoid : scratchEllipsoid,\r\n        granularity : undefined,\r\n        height : undefined,\r\n        rotation : undefined,\r\n        extrudedHeight : undefined,\r\n        offsetAttribute: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {RectangleOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {RectangleOutlineGeometry} The modified result parameter or a new Quaternion instance if one was not provided.\r\n     */\r\n    RectangleOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var rectangle = Rectangle.unpack(array, startingIndex, scratchRectangle);\r\n        startingIndex += Rectangle.packedLength;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var granularity = array[startingIndex++];\r\n        var height = array[startingIndex++];\r\n        var rotation = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.height = height;\r\n            scratchOptions.rotation = rotation;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n            return new RectangleOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._rectangle = Rectangle.clone(rectangle, result._rectangle);\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._surfaceHeight = height;\r\n        result._rotation = rotation;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    var nwScratch = new Cartographic();\r\n    /**\r\n     * Computes the geometric representation of an outline of a rectangle, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {RectangleOutlineGeometry} rectangleGeometry A description of the rectangle outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     *\r\n     * @exception {DeveloperError} Rotated rectangle is invalid.\r\n     */\r\n    RectangleOutlineGeometry.createGeometry = function(rectangleGeometry) {\r\n        var rectangle = rectangleGeometry._rectangle;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n        var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, rectangleGeometry._granularity, rectangleGeometry._rotation, 0, rectangleScratch, nwScratch);\r\n        computedOptions.size =  2 * computedOptions.width + 2 * computedOptions.height - 4;\r\n\r\n        var geometry;\r\n        var boundingSphere;\r\n\r\n        if ((CesiumMath.equalsEpsilon(rectangle.north, rectangle.south, CesiumMath.EPSILON10) ||\r\n             (CesiumMath.equalsEpsilon(rectangle.east, rectangle.west, CesiumMath.EPSILON10)))) {\r\n            return undefined;\r\n        }\r\n\r\n        var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n        var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(surfaceHeight, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n        var offsetValue;\r\n        if (extrude) {\r\n            geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);\r\n            if (defined(rectangleGeometry._offsetAttribute)) {\r\n                var size = geometry.attributes.position.values.length / 3;\r\n                var offsetAttribute = new Uint8Array(size);\r\n                if (rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                    offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n                } else {\r\n                    offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                    offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n                }\r\n\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values : offsetAttribute\r\n                });\r\n            }\r\n            var topBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight, topBoundingSphere);\r\n            var bottomBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, extrudedHeight, bottomBoundingSphere);\r\n            boundingSphere = BoundingSphere.union(topBS, bottomBS);\r\n        } else {\r\n            geometry = constructRectangle(rectangleGeometry, computedOptions);\r\n            geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometry.attributes.position.values, surfaceHeight, ellipsoid, false);\r\n\r\n            if (defined(rectangleGeometry._offsetAttribute)) {\r\n                var length = geometry.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n\r\n            boundingSphere = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight);\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : rectangleGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    return RectangleOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/RectangleOutlineGeometry.js\n// module id = 290\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './Color',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PolylinePipeline',\r\n        './PrimitiveType'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        Color,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PolylinePipeline,\r\n        PrimitiveType) {\r\n    'use strict';\r\n\r\n    function interpolateColors(p0, p1, color0, color1, minDistance, array, offset) {\r\n        var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\r\n        var i;\r\n\r\n        var r0 = color0.red;\r\n        var g0 = color0.green;\r\n        var b0 = color0.blue;\r\n        var a0 = color0.alpha;\r\n\r\n        var r1 = color1.red;\r\n        var g1 = color1.green;\r\n        var b1 = color1.blue;\r\n        var a1 = color1.alpha;\r\n\r\n        if (Color.equals(color0, color1)) {\r\n            for (i = 0; i < numPoints; i++) {\r\n                array[offset++] = Color.floatToByte(r0);\r\n                array[offset++] = Color.floatToByte(g0);\r\n                array[offset++] = Color.floatToByte(b0);\r\n                array[offset++] = Color.floatToByte(a0);\r\n            }\r\n            return offset;\r\n        }\r\n\r\n        var redPerVertex = (r1 - r0) / numPoints;\r\n        var greenPerVertex = (g1 - g0) / numPoints;\r\n        var bluePerVertex = (b1 - b0) / numPoints;\r\n        var alphaPerVertex = (a1 - a0) / numPoints;\r\n\r\n        var index = offset;\r\n        for (i = 0; i < numPoints; i++) {\r\n            array[index++] = Color.floatToByte(r0 + i * redPerVertex);\r\n            array[index++] = Color.floatToByte(g0 + i * greenPerVertex);\r\n            array[index++] = Color.floatToByte(b0 + i * bluePerVertex);\r\n            array[index++] = Color.floatToByte(a0 + i * alphaPerVertex);\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * A description of a polyline modeled as a line strip; the first two positions define a line segment,\r\n     * and each additional position defines a line segment from the previous position.\r\n     *\r\n     * @alias SimplePolylineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\r\n     * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\r\n     * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\r\n     * @param {Boolean} [options.followSurface=true] A boolean that determines whether positions will be adjusted to the surface of the ellipsoid via a great arc.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.followSurface=true. Determines the number of positions in the buffer.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     *\r\n     * @exception {DeveloperError} At least two positions are required.\r\n     * @exception {DeveloperError} colors has an invalid length.\r\n     *\r\n     * @see SimplePolylineGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * // A polyline with two connected line segments\r\n     * var polyline = new Cesium.SimplePolylineGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     0.0, 0.0,\r\n     *     5.0, 0.0,\r\n     *     5.0, 5.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.SimplePolylineGeometry.createGeometry(polyline);\r\n     */\r\n    function SimplePolylineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n        var colors = options.colors;\r\n        var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\r\n\r\n        \r\n\r\n        this._positions = positions;\r\n        this._colors = colors;\r\n        this._colorsPerVertex = colorsPerVertex;\r\n        this._followSurface = defaultValue(options.followSurface, true);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        this._workerName = 'createSimplePolylineGeometry';\r\n\r\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n        numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + 3;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {SimplePolylineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    SimplePolylineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var colors = value._colors;\r\n        length = defined(colors) ? colors.length : 0.0;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n            Color.pack(colors[i], array, startingIndex);\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._followSurface ? 1.0 : 0.0;\r\n        array[startingIndex]   = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {SimplePolylineGeometry} [result] The object into which to store the result.\r\n     * @returns {SimplePolylineGeometry} The modified result parameter or a new SimplePolylineGeometry instance if one was not provided.\r\n     */\r\n    SimplePolylineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var colors = length > 0 ? new Array(length) : undefined;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n            colors[i] = Color.unpack(array, startingIndex);\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var colorsPerVertex = array[startingIndex++] === 1.0;\r\n        var followSurface = array[startingIndex++] === 1.0;\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            return new SimplePolylineGeometry({\r\n                positions : positions,\r\n                colors : colors,\r\n                ellipsoid : ellipsoid,\r\n                colorsPerVertex : colorsPerVertex,\r\n                followSurface : followSurface,\r\n                granularity : granularity\r\n            });\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._colors = colors;\r\n        result._ellipsoid = ellipsoid;\r\n        result._colorsPerVertex = colorsPerVertex;\r\n        result._followSurface = followSurface;\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    var scratchArray1 = new Array(2);\r\n    var scratchArray2 = new Array(2);\r\n    var generateArcOptionsScratch = {\r\n        positions : scratchArray1,\r\n        height: scratchArray2,\r\n        ellipsoid: undefined,\r\n        minDistance : undefined\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a simple polyline, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {SimplePolylineGeometry} simplePolylineGeometry A description of the polyline.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     */\r\n    SimplePolylineGeometry.createGeometry = function(simplePolylineGeometry) {\r\n        var positions = simplePolylineGeometry._positions;\r\n        var colors = simplePolylineGeometry._colors;\r\n        var colorsPerVertex = simplePolylineGeometry._colorsPerVertex;\r\n        var followSurface = simplePolylineGeometry._followSurface;\r\n        var granularity = simplePolylineGeometry._granularity;\r\n        var ellipsoid = simplePolylineGeometry._ellipsoid;\r\n\r\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n        var perSegmentColors = defined(colors) && !colorsPerVertex;\r\n\r\n        var i;\r\n        var length = positions.length;\r\n\r\n        var positionValues;\r\n        var numberOfPositions;\r\n        var colorValues;\r\n        var color;\r\n        var offset = 0;\r\n\r\n        if (followSurface) {\r\n            var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\r\n            var generateArcOptions = generateArcOptionsScratch;\r\n            generateArcOptions.minDistance = minDistance;\r\n            generateArcOptions.ellipsoid = ellipsoid;\r\n\r\n            if (perSegmentColors) {\r\n                var positionCount = 0;\r\n                for (i = 0; i < length - 1; i++) {\r\n                    positionCount += PolylinePipeline.numberOfPoints(positions[i], positions[i+1], minDistance) + 1;\r\n                }\r\n\r\n                positionValues = new Float64Array(positionCount * 3);\r\n                colorValues = new Uint8Array(positionCount * 4);\r\n\r\n                generateArcOptions.positions = scratchArray1;\r\n                generateArcOptions.height= scratchArray2;\r\n\r\n                var ci = 0;\r\n                for (i = 0; i < length - 1; ++i) {\r\n                    scratchArray1[0] = positions[i];\r\n                    scratchArray1[1] = positions[i + 1];\r\n\r\n                    scratchArray2[0] = heights[i];\r\n                    scratchArray2[1] = heights[i + 1];\r\n\r\n                    var pos = PolylinePipeline.generateArc(generateArcOptions);\r\n\r\n                    if (defined(colors)) {\r\n                        var segLen = pos.length / 3;\r\n                        color = colors[i];\r\n                        for(var k = 0; k < segLen; ++k) {\r\n                            colorValues[ci++] = Color.floatToByte(color.red);\r\n                            colorValues[ci++] = Color.floatToByte(color.green);\r\n                            colorValues[ci++] = Color.floatToByte(color.blue);\r\n                            colorValues[ci++] = Color.floatToByte(color.alpha);\r\n                        }\r\n                    }\r\n\r\n                    positionValues.set(pos, offset);\r\n                    offset += pos.length;\r\n                }\r\n            } else {\r\n                generateArcOptions.positions = positions;\r\n                generateArcOptions.height= heights;\r\n                positionValues = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\r\n\r\n                if (defined(colors)) {\r\n                    colorValues = new Uint8Array(positionValues.length / 3 * 4);\r\n\r\n                    for (i = 0; i < length - 1; ++i) {\r\n                        var p0 = positions[i];\r\n                        var p1 = positions[i + 1];\r\n                        var c0 = colors[i];\r\n                        var c1 = colors[i + 1];\r\n                        offset = interpolateColors(p0, p1, c0, c1, minDistance, colorValues, offset);\r\n                    }\r\n\r\n                    var lastColor = colors[length - 1];\r\n                    colorValues[offset++] = Color.floatToByte(lastColor.red);\r\n                    colorValues[offset++] = Color.floatToByte(lastColor.green);\r\n                    colorValues[offset++] = Color.floatToByte(lastColor.blue);\r\n                    colorValues[offset++] = Color.floatToByte(lastColor.alpha);\r\n                }\r\n            }\r\n        } else {\r\n            numberOfPositions = perSegmentColors ? length * 2 - 2 : length;\r\n            positionValues = new Float64Array(numberOfPositions * 3);\r\n            colorValues = defined(colors) ? new Uint8Array(numberOfPositions * 4) : undefined;\r\n\r\n            var positionIndex = 0;\r\n            var colorIndex = 0;\r\n\r\n            for (i = 0; i < length; ++i) {\r\n                var p = positions[i];\r\n\r\n                if (perSegmentColors && i > 0) {\r\n                    Cartesian3.pack(p, positionValues, positionIndex);\r\n                    positionIndex += 3;\r\n\r\n                    color = colors[i - 1];\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.red);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.green);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.blue);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.alpha);\r\n                }\r\n\r\n                if (perSegmentColors && i === length - 1) {\r\n                    break;\r\n                }\r\n\r\n                Cartesian3.pack(p, positionValues, positionIndex);\r\n                positionIndex += 3;\r\n\r\n                if (defined(colors)) {\r\n                    color = colors[i];\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.red);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.green);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.blue);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.alpha);\r\n                }\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positionValues\r\n        });\r\n\r\n        if (defined(colors)) {\r\n            attributes.color = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 4,\r\n                values : colorValues,\r\n                normalize : true\r\n            });\r\n        }\r\n\r\n        numberOfPositions = positionValues.length / 3;\r\n        var numberOfIndices = (numberOfPositions - 1) * 2;\r\n        var indices = IndexDatatype.createTypedArray(numberOfPositions, numberOfIndices);\r\n\r\n        var index = 0;\r\n        for (i = 0; i < numberOfPositions - 1; ++i) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + 1;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : BoundingSphere.fromPoints(positions)\r\n        });\r\n    };\r\n\r\n    return SimplePolylineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/SimplePolylineGeometry.js\n// module id = 291\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './EllipsoidGeometry',\r\n        './VertexFormat'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        EllipsoidGeometry,\r\n        VertexFormat) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A description of a sphere centered at the origin.\r\n     *\r\n     * @alias SphereGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n     * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\r\n     * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} options.slicePartitions cannot be less than three.\r\n     * @exception {DeveloperError} options.stackPartitions cannot be less than three.\r\n     *\r\n     * @see SphereGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * var sphere = new Cesium.SphereGeometry({\r\n     *   radius : 100.0,\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\r\n     * });\r\n     * var geometry = Cesium.SphereGeometry.createGeometry(sphere);\r\n     */\r\n    function SphereGeometry(options) {\r\n        var radius = defaultValue(options.radius, 1.0);\r\n        var radii = new Cartesian3(radius, radius, radius);\r\n        var ellipsoidOptions = {\r\n                radii: radii,\r\n                stackPartitions: options.stackPartitions,\r\n                slicePartitions: options.slicePartitions,\r\n                vertexFormat: options.vertexFormat\r\n        };\r\n\r\n        this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\r\n        this._workerName = 'createSphereGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    SphereGeometry.packedLength = EllipsoidGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {SphereGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    SphereGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipsoidGeometry = new EllipsoidGeometry();\r\n    var scratchOptions = {\r\n        radius : undefined,\r\n        radii : new Cartesian3(),\r\n        vertexFormat : new VertexFormat(),\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {SphereGeometry} [result] The object into which to store the result.\r\n     * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\r\n     */\r\n    SphereGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipsoidGeometry = EllipsoidGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\r\n        scratchOptions.vertexFormat = VertexFormat.clone(ellipsoidGeometry._vertexFormat, scratchOptions.vertexFormat);\r\n        scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n        scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n            return new SphereGeometry(scratchOptions);\r\n        }\r\n\r\n        Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n        result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {SphereGeometry} sphereGeometry A description of the sphere.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     */\r\n    SphereGeometry.createGeometry = function(sphereGeometry) {\r\n        return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\r\n    };\r\n\r\n    return SphereGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/SphereGeometry.js\n// module id = 292\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './Check',\r\n        './defaultValue',\r\n        './defined',\r\n        './EllipsoidOutlineGeometry'\r\n    ], function(\r\n        Cartesian3,\r\n        Check,\r\n        defaultValue,\r\n        defined,\r\n        EllipsoidOutlineGeometry) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A description of the outline of a sphere.\r\n     *\r\n     * @alias SphereOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n     * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\r\n     * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\r\n     * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\r\n     *\r\n     * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n     * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n     * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n     *\r\n     * @example\r\n     * var sphere = new Cesium.SphereOutlineGeometry({\r\n     *   radius : 100.0,\r\n     *   stackPartitions : 6,\r\n     *   slicePartitions: 5\r\n     * });\r\n     * var geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\r\n     */\r\n    function SphereOutlineGeometry(options) {\r\n        var radius = defaultValue(options.radius, 1.0);\r\n        var radii = new Cartesian3(radius, radius, radius);\r\n        var ellipsoidOptions = {\r\n                radii: radii,\r\n                stackPartitions: options.stackPartitions,\r\n                slicePartitions: options.slicePartitions,\r\n                subdivisions: options.subdivisions\r\n        };\r\n\r\n        this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\r\n        this._workerName = 'createSphereOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    SphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {SphereOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    SphereOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        return EllipsoidOutlineGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\r\n    var scratchOptions = {\r\n        radius : undefined,\r\n        radii : new Cartesian3(),\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined,\r\n        subdivisions : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {SphereOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\r\n     */\r\n    SphereOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\r\n        scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n        scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n        scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n            return new SphereOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n        result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     */\r\n    SphereOutlineGeometry.createGeometry = function(sphereGeometry) {\r\n        return EllipsoidOutlineGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\r\n    };\r\n\r\n    return SphereOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/SphereOutlineGeometry.js\n// module id = 293\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PrimitiveType',\r\n        './VertexFormat',\r\n        './WallGeometryLibrary'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PrimitiveType,\r\n        VertexFormat,\r\n        WallGeometryLibrary) {\r\n    'use strict';\r\n\r\n    var scratchCartesian3Position1 = new Cartesian3();\r\n    var scratchCartesian3Position2 = new Cartesian3();\r\n    var scratchCartesian3Position3 = new Cartesian3();\r\n    var scratchCartesian3Position4 = new Cartesian3();\r\n    var scratchCartesian3Position5 = new Cartesian3();\r\n    var scratchBitangent = new Cartesian3();\r\n    var scratchTangent = new Cartesian3();\r\n    var scratchNormal = new Cartesian3();\r\n\r\n    /**\r\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\r\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n     *\r\n     * @alias WallGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n     * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} positions length must be greater than or equal to 2.\r\n     * @exception {DeveloperError} positions and maximumHeights must have the same length.\r\n     * @exception {DeveloperError} positions and minimumHeights must have the same length.\r\n     *\r\n     * @see WallGeometry#createGeometry\r\n     * @see WallGeometry#fromConstantHeight\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\r\n     *\r\n     * @example\r\n     * // create a wall that spans from ground level to 10000 meters\r\n     * var wall = new Cesium.WallGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n     *     19.0, 47.0, 10000.0,\r\n     *     19.0, 48.0, 10000.0,\r\n     *     20.0, 48.0, 10000.0,\r\n     *     20.0, 47.0, 10000.0,\r\n     *     19.0, 47.0, 10000.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\r\n     */\r\n    function WallGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var wallPositions = options.positions;\r\n        var maximumHeights = options.maximumHeights;\r\n        var minimumHeights = options.minimumHeights;\r\n\r\n        \r\n\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n        this._positions = wallPositions;\r\n        this._minimumHeights = minimumHeights;\r\n        this._maximumHeights = maximumHeights;\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._granularity = granularity;\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._workerName = 'createWallGeometry';\r\n\r\n        var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\r\n        if (defined(minimumHeights)) {\r\n            numComponents += minimumHeights.length;\r\n        }\r\n        if (defined(maximumHeights)) {\r\n            numComponents += maximumHeights.length;\r\n        }\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {WallGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    WallGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var minimumHeights = value._minimumHeights;\r\n        length = defined(minimumHeights) ? minimumHeights.length : 0;\r\n        array[startingIndex++] = length;\r\n\r\n        if (defined(minimumHeights)) {\r\n            for (i = 0; i < length; ++i) {\r\n                array[startingIndex++] = minimumHeights[i];\r\n            }\r\n        }\r\n\r\n        var maximumHeights = value._maximumHeights;\r\n        length = defined(maximumHeights) ? maximumHeights.length : 0;\r\n        array[startingIndex++] = length;\r\n\r\n        if (defined(maximumHeights)) {\r\n            for (i = 0; i < length; ++i) {\r\n                array[startingIndex++] = maximumHeights[i];\r\n            }\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex] = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        positions : undefined,\r\n        minimumHeights : undefined,\r\n        maximumHeights : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        granularity : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {WallGeometry} [result] The object into which to store the result.\r\n     * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\r\n     */\r\n    WallGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var minimumHeights;\r\n\r\n        if (length > 0) {\r\n            minimumHeights = new Array(length);\r\n            for (i = 0; i < length; ++i) {\r\n                minimumHeights[i] = array[startingIndex++];\r\n            }\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var maximumHeights;\r\n\r\n        if (length > 0) {\r\n            maximumHeights = new Array(length);\r\n            for (i = 0; i < length; ++i) {\r\n                maximumHeights[i] = array[startingIndex++];\r\n            }\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.positions = positions;\r\n            scratchOptions.minimumHeights = minimumHeights;\r\n            scratchOptions.maximumHeights = maximumHeights;\r\n            scratchOptions.granularity = granularity;\r\n            return new WallGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._minimumHeights = minimumHeights;\r\n        result._maximumHeights = maximumHeights;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\r\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n     * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n     * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @returns {WallGeometry}\r\n     *\r\n     *\r\n     * @example\r\n     * // create a wall that spans from 10000 meters to 20000 meters\r\n     * var wall = Cesium.WallGeometry.fromConstantHeights({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     19.0, 47.0,\r\n     *     19.0, 48.0,\r\n     *     20.0, 48.0,\r\n     *     20.0, 47.0,\r\n     *     19.0, 47.0,\r\n     *   ]),\r\n     *   minimumHeight : 20000.0,\r\n     *   maximumHeight : 10000.0\r\n     * });\r\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\r\n     *\r\n     * @see WallGeometry#createGeometry\r\n     */\r\n    WallGeometry.fromConstantHeights = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n\r\n        \r\n\r\n        var minHeights;\r\n        var maxHeights;\r\n\r\n        var min = options.minimumHeight;\r\n        var max = options.maximumHeight;\r\n\r\n        var doMin = defined(min);\r\n        var doMax = defined(max);\r\n        if (doMin || doMax) {\r\n            var length = positions.length;\r\n            minHeights = (doMin) ? new Array(length) : undefined;\r\n            maxHeights = (doMax) ? new Array(length) : undefined;\r\n\r\n            for (var i = 0; i < length; ++i) {\r\n                if (doMin) {\r\n                    minHeights[i] = min;\r\n                }\r\n\r\n                if (doMax) {\r\n                    maxHeights[i] = max;\r\n                }\r\n            }\r\n        }\r\n\r\n        var newOptions = {\r\n            positions : positions,\r\n            maximumHeights : maxHeights,\r\n            minimumHeights : minHeights,\r\n            ellipsoid : options.ellipsoid,\r\n            vertexFormat : options.vertexFormat\r\n        };\r\n        return new WallGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {WallGeometry} wallGeometry A description of the wall.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    WallGeometry.createGeometry = function(wallGeometry) {\r\n        var wallPositions = wallGeometry._positions;\r\n        var minimumHeights = wallGeometry._minimumHeights;\r\n        var maximumHeights = wallGeometry._maximumHeights;\r\n        var vertexFormat = wallGeometry._vertexFormat;\r\n        var granularity = wallGeometry._granularity;\r\n        var ellipsoid = wallGeometry._ellipsoid;\r\n\r\n        var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, true);\r\n        if (!defined(pos)) {\r\n            return;\r\n        }\r\n\r\n        var bottomPositions = pos.bottomPositions;\r\n        var topPositions = pos.topPositions;\r\n        var numCorners = pos.numCorners;\r\n\r\n        var length = topPositions.length;\r\n        var size = length * 2;\r\n\r\n        var positions = vertexFormat.position ? new Float64Array(size) : undefined;\r\n        var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n        var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n        var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\r\n        var textureCoordinates = vertexFormat.st ? new Float32Array(size / 3 * 2) : undefined;\r\n\r\n        var positionIndex = 0;\r\n        var normalIndex = 0;\r\n        var bitangentIndex = 0;\r\n        var tangentIndex = 0;\r\n        var stIndex = 0;\r\n\r\n        // add lower and upper points one after the other, lower\r\n        // points being even and upper points being odd\r\n        var normal = scratchNormal;\r\n        var tangent = scratchTangent;\r\n        var bitangent = scratchBitangent;\r\n        var recomputeNormal = true;\r\n        length /= 3;\r\n        var i;\r\n        var s = 0;\r\n        var ds = 1/(length - wallPositions.length + 1);\r\n        for (i = 0; i < length; ++i) {\r\n            var i3 = i * 3;\r\n            var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\r\n            var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\r\n            if (vertexFormat.position) {\r\n                // insert the lower point\r\n                positions[positionIndex++] = bottomPosition.x;\r\n                positions[positionIndex++] = bottomPosition.y;\r\n                positions[positionIndex++] = bottomPosition.z;\r\n\r\n                // insert the upper point\r\n                positions[positionIndex++] = topPosition.x;\r\n                positions[positionIndex++] = topPosition.y;\r\n                positions[positionIndex++] = topPosition.z;\r\n            }\r\n\r\n            if (vertexFormat.st) {\r\n                textureCoordinates[stIndex++] = s;\r\n                textureCoordinates[stIndex++] = 0.0;\r\n\r\n                textureCoordinates[stIndex++] = s;\r\n                textureCoordinates[stIndex++] = 1.0;\r\n            }\r\n\r\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n                var nextPosition;\r\n                var nextTop = Cartesian3.clone(Cartesian3.ZERO, scratchCartesian3Position5);\r\n                var groundPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position2), scratchCartesian3Position2);\r\n                if (i + 1 < length) {\r\n                    nextPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position3), scratchCartesian3Position3);\r\n                    nextTop = Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position5);\r\n                }\r\n\r\n                if (recomputeNormal) {\r\n                    var scalednextPosition = Cartesian3.subtract(nextTop, topPosition, scratchCartesian3Position4);\r\n                    var scaledGroundPosition = Cartesian3.subtract(groundPosition, topPosition, scratchCartesian3Position1);\r\n                    normal = Cartesian3.normalize(Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal), normal);\r\n                    recomputeNormal = false;\r\n                }\r\n\r\n                if (Cartesian3.equalsEpsilon(nextPosition, groundPosition, CesiumMath.EPSILON10)) {\r\n                    recomputeNormal = true;\r\n                } else {\r\n                    s += ds;\r\n                    if (vertexFormat.tangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.subtract(nextPosition, groundPosition, tangent), tangent);\r\n                    }\r\n                    if (vertexFormat.bitangent) {\r\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                    }\r\n                }\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n                }\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n                }\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        // prepare the side walls, two triangles for each wall\r\n        //\r\n        //    A (i+1)  B (i+3) E\r\n        //    +--------+-------+\r\n        //    |      / |      /|    triangles:  A C B\r\n        //    |     /  |     / |                B C D\r\n        //    |    /   |    /  |\r\n        //    |   /    |   /   |\r\n        //    |  /     |  /    |\r\n        //    | /      | /     |\r\n        //    +--------+-------+\r\n        //    C (i)    D (i+2) F\r\n        //\r\n\r\n        var numVertices = size / 3;\r\n        size -= 6 * (numCorners + 1);\r\n        var indices = IndexDatatype.createTypedArray(numVertices, size);\r\n\r\n        var edgeIndex = 0;\r\n        for (i = 0; i < numVertices - 2; i += 2) {\r\n            var LL = i;\r\n            var LR = i + 2;\r\n            var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\r\n            var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\r\n            if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\r\n                continue;\r\n            }\r\n            var UL = i + 1;\r\n            var UR = i + 3;\r\n\r\n            indices[edgeIndex++] = UL;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = LR;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : new BoundingSphere.fromVertices(positions)\r\n        });\r\n    };\r\n\r\n    return WallGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/WallGeometry.js\n// module id = 294\n// module chunks = 0","define([\r\n        './BoundingSphere',\r\n        './Cartesian3',\r\n        './ComponentDatatype',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './Geometry',\r\n        './GeometryAttribute',\r\n        './GeometryAttributes',\r\n        './IndexDatatype',\r\n        './Math',\r\n        './PrimitiveType',\r\n        './WallGeometryLibrary'\r\n    ], function(\r\n        BoundingSphere,\r\n        Cartesian3,\r\n        ComponentDatatype,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Geometry,\r\n        GeometryAttribute,\r\n        GeometryAttributes,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        PrimitiveType,\r\n        WallGeometryLibrary) {\r\n    'use strict';\r\n\r\n    var scratchCartesian3Position1 = new Cartesian3();\r\n    var scratchCartesian3Position2 = new Cartesian3();\r\n\r\n    /**\r\n     * A description of a wall outline. A wall is defined by a series of points,\r\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n     *\r\n     * @alias WallOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n     * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n     *\r\n     * @exception {DeveloperError} positions length must be greater than or equal to 2.\r\n     * @exception {DeveloperError} positions and maximumHeights must have the same length.\r\n     * @exception {DeveloperError} positions and minimumHeights must have the same length.\r\n     *\r\n     * @see WallGeometry#createGeometry\r\n     * @see WallGeometry#fromConstantHeight\r\n     *\r\n     * @example\r\n     * // create a wall outline that spans from ground level to 10000 meters\r\n     * var wall = new Cesium.WallOutlineGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n     *     19.0, 47.0, 10000.0,\r\n     *     19.0, 48.0, 10000.0,\r\n     *     20.0, 48.0, 10000.0,\r\n     *     20.0, 47.0, 10000.0,\r\n     *     19.0, 47.0, 10000.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\r\n     */\r\n    function WallOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var wallPositions = options.positions;\r\n        var maximumHeights = options.maximumHeights;\r\n        var minimumHeights = options.minimumHeights;\r\n\r\n        \r\n\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n        this._positions = wallPositions;\r\n        this._minimumHeights = minimumHeights;\r\n        this._maximumHeights = maximumHeights;\r\n        this._granularity = granularity;\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._workerName = 'createWallOutlineGeometry';\r\n\r\n        var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\r\n        if (defined(minimumHeights)) {\r\n            numComponents += minimumHeights.length;\r\n        }\r\n        if (defined(maximumHeights)) {\r\n            numComponents += maximumHeights.length;\r\n        }\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + 1;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {WallOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    WallOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var minimumHeights = value._minimumHeights;\r\n        length = defined(minimumHeights) ? minimumHeights.length : 0;\r\n        array[startingIndex++] = length;\r\n\r\n        if (defined(minimumHeights)) {\r\n            for (i = 0; i < length; ++i) {\r\n                array[startingIndex++] = minimumHeights[i];\r\n            }\r\n        }\r\n\r\n        var maximumHeights = value._maximumHeights;\r\n        length = defined(maximumHeights) ? maximumHeights.length : 0;\r\n        array[startingIndex++] = length;\r\n\r\n        if (defined(maximumHeights)) {\r\n            for (i = 0; i < length; ++i) {\r\n                array[startingIndex++] = maximumHeights[i];\r\n            }\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex]   = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchOptions = {\r\n        positions : undefined,\r\n        minimumHeights : undefined,\r\n        maximumHeights : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        granularity : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {WallOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {WallOutlineGeometry} The modified result parameter or a new WallOutlineGeometry instance if one was not provided.\r\n     */\r\n    WallOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        \r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var minimumHeights;\r\n\r\n        if (length > 0) {\r\n            minimumHeights = new Array(length);\r\n            for (i = 0; i < length; ++i) {\r\n                minimumHeights[i] = array[startingIndex++];\r\n            }\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var maximumHeights;\r\n\r\n        if (length > 0) {\r\n            maximumHeights = new Array(length);\r\n            for (i = 0; i < length; ++i) {\r\n                maximumHeights[i] = array[startingIndex++];\r\n            }\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.positions = positions;\r\n            scratchOptions.minimumHeights = minimumHeights;\r\n            scratchOptions.maximumHeights = maximumHeights;\r\n            scratchOptions.granularity = granularity;\r\n            return new WallOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._minimumHeights = minimumHeights;\r\n        result._maximumHeights = maximumHeights;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * A description of a walloutline. A wall is defined by a series of points,\r\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n     * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n     * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n     * @returns {WallOutlineGeometry}\r\n     *\r\n     *\r\n     * @example\r\n     * // create a wall that spans from 10000 meters to 20000 meters\r\n     * var wall = Cesium.WallOutlineGeometry.fromConstantHeights({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     19.0, 47.0,\r\n     *     19.0, 48.0,\r\n     *     20.0, 48.0,\r\n     *     20.0, 47.0,\r\n     *     19.0, 47.0,\r\n     *   ]),\r\n     *   minimumHeight : 20000.0,\r\n     *   maximumHeight : 10000.0\r\n     * });\r\n     * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\r\n     *\r\n     * @see WallOutlineGeometry#createGeometry\r\n     */\r\n    WallOutlineGeometry.fromConstantHeights = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n\r\n        \r\n\r\n        var minHeights;\r\n        var maxHeights;\r\n\r\n        var min = options.minimumHeight;\r\n        var max = options.maximumHeight;\r\n\r\n        var doMin = defined(min);\r\n        var doMax = defined(max);\r\n        if (doMin || doMax) {\r\n            var length = positions.length;\r\n            minHeights = (doMin) ? new Array(length) : undefined;\r\n            maxHeights = (doMax) ? new Array(length) : undefined;\r\n\r\n            for (var i = 0; i < length; ++i) {\r\n                if (doMin) {\r\n                    minHeights[i] = min;\r\n                }\r\n\r\n                if (doMax) {\r\n                    maxHeights[i] = max;\r\n                }\r\n            }\r\n        }\r\n\r\n        var newOptions = {\r\n            positions : positions,\r\n            maximumHeights : maxHeights,\r\n            minimumHeights : minHeights,\r\n            ellipsoid : options.ellipsoid\r\n        };\r\n        return new WallOutlineGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a wall outline, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {WallOutlineGeometry} wallGeometry A description of the wall outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    WallOutlineGeometry.createGeometry = function(wallGeometry) {\r\n        var wallPositions = wallGeometry._positions;\r\n        var minimumHeights = wallGeometry._minimumHeights;\r\n        var maximumHeights = wallGeometry._maximumHeights;\r\n        var granularity = wallGeometry._granularity;\r\n        var ellipsoid = wallGeometry._ellipsoid;\r\n\r\n        var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, false);\r\n        if (!defined(pos)) {\r\n            return;\r\n        }\r\n\r\n        var bottomPositions = pos.bottomPositions;\r\n        var topPositions = pos.topPositions;\r\n\r\n        var length = topPositions.length;\r\n        var size = length * 2;\r\n\r\n        var positions = new Float64Array(size);\r\n        var positionIndex = 0;\r\n\r\n        // add lower and upper points one after the other, lower\r\n        // points being even and upper points being odd\r\n        length /= 3;\r\n        var i;\r\n        for (i = 0; i < length; ++i) {\r\n            var i3 = i * 3;\r\n            var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\r\n            var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\r\n\r\n            // insert the lower point\r\n            positions[positionIndex++] = bottomPosition.x;\r\n            positions[positionIndex++] = bottomPosition.y;\r\n            positions[positionIndex++] = bottomPosition.z;\r\n\r\n            // insert the upper point\r\n            positions[positionIndex++] = topPosition.x;\r\n            positions[positionIndex++] = topPosition.y;\r\n            positions[positionIndex++] = topPosition.z;\r\n        }\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position : new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            })\r\n        });\r\n\r\n        var numVertices = size / 3;\r\n        size = 2 * numVertices - 4 + numVertices;\r\n        var indices = IndexDatatype.createTypedArray(numVertices, size);\r\n\r\n        var edgeIndex = 0;\r\n        for (i = 0; i < numVertices - 2; i += 2) {\r\n            var LL = i;\r\n            var LR = i + 2;\r\n            var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\r\n            var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\r\n            if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\r\n                continue;\r\n            }\r\n            var UL = i + 1;\r\n            var UR = i + 3;\r\n\r\n            indices[edgeIndex++] = UL;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = UL;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = LR;\r\n        }\r\n\r\n        indices[edgeIndex++] = numVertices - 2;\r\n        indices[edgeIndex++] = numVertices - 1;\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : new BoundingSphere.fromVertices(positions)\r\n        });\r\n    };\r\n\r\n    return WallOutlineGeometry;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/WallOutlineGeometry.js\n// module id = 295\n// module chunks = 0","define([\r\n        '../Core/BoundingSphere',\r\n        '../Core/BoxGeometry',\r\n        '../Core/Cartesian3',\r\n        '../Core/Color',\r\n        '../Core/CylinderGeometry',\r\n        '../Core/defined',\r\n        '../Core/EllipsoidGeometry',\r\n        '../Core/IndexDatatype',\r\n        '../Core/Matrix4',\r\n        '../Scene/Vector3DTileBatch',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        BoundingSphere,\r\n        BoxGeometry,\r\n        Cartesian3,\r\n        Color,\r\n        CylinderGeometry,\r\n        defined,\r\n        EllipsoidGeometry,\r\n        IndexDatatype,\r\n        Matrix4,\r\n        Vector3DTileBatch,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    var scratchCartesian = new Cartesian3();\r\n\r\n    var packedBoxLength = Matrix4.packedLength + Cartesian3.packedLength;\r\n    var packedCylinderLength = Matrix4.packedLength + 2;\r\n    var packedEllipsoidLength = Matrix4.packedLength + Cartesian3.packedLength;\r\n    var packedSphereLength = Cartesian3.packedLength + 1;\r\n\r\n    var scratchModelMatrixAndBV = {\r\n        modelMatrix : new Matrix4(),\r\n        boundingVolume : new BoundingSphere()\r\n    };\r\n\r\n    function boxModelMatrixAndBoundingVolume(boxes, index) {\r\n        var boxIndex  = index * packedBoxLength;\r\n\r\n        var dimensions = Cartesian3.unpack(boxes, boxIndex, scratchCartesian);\r\n        boxIndex += Cartesian3.packedLength;\r\n\r\n        var boxModelMatrix = Matrix4.unpack(boxes, boxIndex, scratchModelMatrixAndBV.modelMatrix);\r\n        Matrix4.multiplyByScale(boxModelMatrix, dimensions, boxModelMatrix);\r\n\r\n        var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\r\n        Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\r\n        boundingVolume.radius = Math.sqrt(3.0);\r\n\r\n        return scratchModelMatrixAndBV;\r\n    }\r\n\r\n    function cylinderModelMatrixAndBoundingVolume(cylinders, index) {\r\n        var cylinderIndex = index * packedCylinderLength;\r\n\r\n        var cylinderRadius = cylinders[cylinderIndex++];\r\n        var length = cylinders[cylinderIndex++];\r\n        var scale = Cartesian3.fromElements(cylinderRadius, cylinderRadius, length, scratchCartesian);\r\n\r\n        var cylinderModelMatrix = Matrix4.unpack(cylinders, cylinderIndex, scratchModelMatrixAndBV.modelMatrix);\r\n        Matrix4.multiplyByScale(cylinderModelMatrix, scale, cylinderModelMatrix);\r\n\r\n        var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\r\n        Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\r\n        boundingVolume.radius = Math.sqrt(2.0);\r\n\r\n        return scratchModelMatrixAndBV;\r\n    }\r\n\r\n    function ellipsoidModelMatrixAndBoundingVolume(ellipsoids, index) {\r\n        var ellipsoidIndex = index * packedEllipsoidLength;\r\n\r\n        var radii = Cartesian3.unpack(ellipsoids, ellipsoidIndex, scratchCartesian);\r\n        ellipsoidIndex += Cartesian3.packedLength;\r\n\r\n        var ellipsoidModelMatrix = Matrix4.unpack(ellipsoids, ellipsoidIndex, scratchModelMatrixAndBV.modelMatrix);\r\n        Matrix4.multiplyByScale(ellipsoidModelMatrix, radii, ellipsoidModelMatrix);\r\n\r\n        var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\r\n        Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\r\n        boundingVolume.radius = 1.0;\r\n\r\n        return scratchModelMatrixAndBV;\r\n    }\r\n\r\n    function sphereModelMatrixAndBoundingVolume(spheres, index) {\r\n        var sphereIndex = index * packedSphereLength;\r\n\r\n        var sphereRadius = spheres[sphereIndex++];\r\n\r\n        var sphereTranslation = Cartesian3.unpack(spheres, sphereIndex, scratchCartesian);\r\n        var sphereModelMatrix = Matrix4.fromTranslation(sphereTranslation, scratchModelMatrixAndBV.modelMatrix);\r\n        Matrix4.multiplyByUniformScale(sphereModelMatrix, sphereRadius, sphereModelMatrix);\r\n\r\n        var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\r\n        Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\r\n        boundingVolume.radius = 1.0;\r\n\r\n        return scratchModelMatrixAndBV;\r\n    }\r\n\r\n    var scratchPosition = new Cartesian3();\r\n\r\n    function createPrimitive(options, primitive, primitiveBatchIds, geometry, getModelMatrixAndBoundingVolume) {\r\n        if (!defined(primitive)) {\r\n            return;\r\n        }\r\n\r\n        var numberOfPrimitives = primitiveBatchIds.length;\r\n        var geometryPositions = geometry.attributes.position.values;\r\n        var geometryIndices = geometry.indices;\r\n\r\n        var positions = options.positions;\r\n        var vertexBatchIds = options.vertexBatchIds;\r\n        var indices = options.indices;\r\n\r\n        var batchIds = options.batchIds;\r\n        var batchTableColors = options.batchTableColors;\r\n        var batchedIndices = options.batchedIndices;\r\n        var indexOffsets = options.indexOffsets;\r\n        var indexCounts = options.indexCounts;\r\n        var boundingVolumes = options.boundingVolumes;\r\n\r\n        var modelMatrix = options.modelMatrix;\r\n        var center = options.center;\r\n\r\n        var positionOffset = options.positionOffset;\r\n        var batchIdIndex = options.batchIdIndex;\r\n        var indexOffset = options.indexOffset;\r\n        var batchedIndicesOffset = options.batchedIndicesOffset;\r\n\r\n        for (var i = 0; i < numberOfPrimitives; ++i) {\r\n            var primitiveModelMatrixAndBV = getModelMatrixAndBoundingVolume(primitive, i);\r\n            var primitiveModelMatrix = primitiveModelMatrixAndBV.modelMatrix;\r\n            Matrix4.multiply(modelMatrix, primitiveModelMatrix, primitiveModelMatrix);\r\n\r\n            var batchId = primitiveBatchIds[i];\r\n\r\n            var positionsLength = geometryPositions.length;\r\n            for (var j = 0; j < positionsLength; j += 3) {\r\n                var position = Cartesian3.unpack(geometryPositions, j, scratchPosition);\r\n                Matrix4.multiplyByPoint(primitiveModelMatrix, position, position);\r\n                Cartesian3.subtract(position, center, position);\r\n\r\n                Cartesian3.pack(position, positions, positionOffset * 3 + j);\r\n                vertexBatchIds[batchIdIndex++] = batchId;\r\n            }\r\n\r\n            var indicesLength = geometryIndices.length;\r\n            for (var k = 0; k < indicesLength; ++k) {\r\n                indices[indexOffset + k] = geometryIndices[k] + positionOffset;\r\n            }\r\n\r\n            var offset = i + batchedIndicesOffset;\r\n            batchedIndices[offset] = new Vector3DTileBatch({\r\n                offset : indexOffset,\r\n                count : indicesLength,\r\n                color : Color.fromRgba(batchTableColors[batchId]),\r\n                batchIds : [batchId]\r\n            });\r\n            batchIds[offset] = batchId;\r\n            indexOffsets[offset] = indexOffset;\r\n            indexCounts[offset] = indicesLength;\r\n            boundingVolumes[offset] = BoundingSphere.transform(primitiveModelMatrixAndBV.boundingVolume, primitiveModelMatrix);\r\n\r\n            positionOffset += positionsLength / 3;\r\n            indexOffset += indicesLength;\r\n        }\r\n\r\n        options.positionOffset = positionOffset;\r\n        options.batchIdIndex = batchIdIndex;\r\n        options.indexOffset = indexOffset;\r\n        options.batchedIndicesOffset += numberOfPrimitives;\r\n    }\r\n\r\n    var scratchCenter = new Cartesian3();\r\n    var scratchMatrix4 = new Matrix4();\r\n\r\n    function unpackBuffer(buffer) {\r\n        var packedBuffer = new Float64Array(buffer);\r\n\r\n        var offset = 0;\r\n        Cartesian3.unpack(packedBuffer, offset, scratchCenter);\r\n        offset += Cartesian3.packedLength;\r\n\r\n        Matrix4.unpack(packedBuffer, offset, scratchMatrix4);\r\n    }\r\n\r\n    function packedBatchedIndicesLength(batchedIndices) {\r\n        var length = batchedIndices.length;\r\n        var count = 0;\r\n        for (var i = 0; i < length; ++i) {\r\n            count += Color.packedLength + 3 + batchedIndices[i].batchIds.length;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function packBuffer(indicesBytesPerElement, batchedIndices, boundingVolumes) {\r\n        var numBVs = boundingVolumes.length;\r\n        var length = 1 + 1 + numBVs * BoundingSphere.packedLength + 1 + packedBatchedIndicesLength(batchedIndices);\r\n\r\n        var packedBuffer = new Float64Array(length);\r\n\r\n        var offset = 0;\r\n        packedBuffer[offset++] = indicesBytesPerElement;\r\n        packedBuffer[offset++] = numBVs;\r\n\r\n        for (var i = 0; i < numBVs; ++i) {\r\n            BoundingSphere.pack(boundingVolumes[i], packedBuffer, offset);\r\n            offset += BoundingSphere.packedLength;\r\n        }\r\n\r\n        var indicesLength = batchedIndices.length;\r\n        packedBuffer[offset++] = indicesLength;\r\n\r\n        for (var j = 0; j < indicesLength; ++j) {\r\n            var batchedIndex = batchedIndices[j];\r\n\r\n            Color.pack(batchedIndex.color, packedBuffer, offset);\r\n            offset += Color.packedLength;\r\n\r\n            packedBuffer[offset++] = batchedIndex.offset;\r\n            packedBuffer[offset++] = batchedIndex.count;\r\n\r\n            var batchIds = batchedIndex.batchIds;\r\n            var batchIdsLength = batchIds.length;\r\n            packedBuffer[offset++] = batchIdsLength;\r\n\r\n            for (var k = 0; k < batchIdsLength; ++k) {\r\n                packedBuffer[offset++] = batchIds[k];\r\n            }\r\n        }\r\n\r\n        return packedBuffer;\r\n    }\r\n\r\n    function createVectorTileGeometries(parameters, transferableObjects) {\r\n        var boxes = defined(parameters.boxes) ? new Float32Array(parameters.boxes) : undefined;\r\n        var boxBatchIds = defined(parameters.boxBatchIds) ? new Uint16Array(parameters.boxBatchIds) : undefined;\r\n        var cylinders =  defined(parameters.cylinders) ? new Float32Array(parameters.cylinders) : undefined;\r\n        var cylinderBatchIds = defined(parameters.cylinderBatchIds) ? new Uint16Array(parameters.cylinderBatchIds) : undefined;\r\n        var ellipsoids =  defined(parameters.ellipsoids) ? new Float32Array(parameters.ellipsoids) : undefined;\r\n        var ellipsoidBatchIds = defined(parameters.ellipsoidBatchIds) ? new Uint16Array(parameters.ellipsoidBatchIds) : undefined;\r\n        var spheres = defined(parameters.spheres) ?  new Float32Array(parameters.spheres) : undefined;\r\n        var sphereBatchIds = defined(parameters.sphereBatchIds) ? new Uint16Array(parameters.sphereBatchIds) : undefined;\r\n\r\n        var numberOfBoxes = defined(boxes) ? boxBatchIds.length : 0;\r\n        var numberOfCylinders = defined(cylinders) ? cylinderBatchIds.length : 0;\r\n        var numberOfEllipsoids = defined(ellipsoids) ? ellipsoidBatchIds.length : 0;\r\n        var numberOfSpheres = defined(spheres) ? sphereBatchIds.length : 0;\r\n\r\n        var boxGeometry = BoxGeometry.getUnitBox();\r\n        var cylinderGeometry = CylinderGeometry.getUnitCylinder();\r\n        var ellipsoidGeometry = EllipsoidGeometry.getUnitEllipsoid();\r\n\r\n        var boxPositions = boxGeometry.attributes.position.values;\r\n        var cylinderPositions = cylinderGeometry.attributes.position.values;\r\n        var ellipsoidPositions = ellipsoidGeometry.attributes.position.values;\r\n\r\n        var numberOfPositions = boxPositions.length * numberOfBoxes;\r\n        numberOfPositions += cylinderPositions.length * numberOfCylinders;\r\n        numberOfPositions += ellipsoidPositions.length * (numberOfEllipsoids + numberOfSpheres);\r\n\r\n        var boxIndices = boxGeometry.indices;\r\n        var cylinderIndices = cylinderGeometry.indices;\r\n        var ellipsoidIndices = ellipsoidGeometry.indices;\r\n\r\n        var numberOfIndices = boxIndices.length * numberOfBoxes;\r\n        numberOfIndices += cylinderIndices.length * numberOfCylinders;\r\n        numberOfIndices += ellipsoidIndices.length * (numberOfEllipsoids + numberOfSpheres);\r\n\r\n        var positions = new Float32Array(numberOfPositions);\r\n        var vertexBatchIds = new Uint16Array(numberOfPositions / 3);\r\n        var indices = IndexDatatype.createTypedArray(numberOfPositions / 3, numberOfIndices);\r\n\r\n        var numberOfGeometries = numberOfBoxes + numberOfCylinders + numberOfEllipsoids + numberOfSpheres;\r\n        var batchIds = new Uint16Array(numberOfGeometries);\r\n        var batchedIndices = new Array(numberOfGeometries);\r\n        var indexOffsets = new Uint32Array(numberOfGeometries);\r\n        var indexCounts = new Uint32Array(numberOfGeometries);\r\n        var boundingVolumes = new Array(numberOfGeometries);\r\n\r\n        unpackBuffer(parameters.packedBuffer);\r\n\r\n        var options = {\r\n            batchTableColors : new Uint32Array(parameters.batchTableColors),\r\n            positions : positions,\r\n            vertexBatchIds : vertexBatchIds,\r\n            indices : indices,\r\n            batchIds : batchIds,\r\n            batchedIndices : batchedIndices,\r\n            indexOffsets : indexOffsets,\r\n            indexCounts : indexCounts,\r\n            boundingVolumes : boundingVolumes,\r\n            positionOffset : 0,\r\n            batchIdIndex : 0,\r\n            indexOffset : 0,\r\n            batchedIndicesOffset : 0,\r\n            modelMatrix : scratchMatrix4,\r\n            center : scratchCenter\r\n        };\r\n\r\n        createPrimitive(options, boxes, boxBatchIds, boxGeometry, boxModelMatrixAndBoundingVolume);\r\n        createPrimitive(options, cylinders, cylinderBatchIds, cylinderGeometry, cylinderModelMatrixAndBoundingVolume);\r\n        createPrimitive(options, ellipsoids, ellipsoidBatchIds, ellipsoidGeometry, ellipsoidModelMatrixAndBoundingVolume);\r\n        createPrimitive(options, spheres, sphereBatchIds, ellipsoidGeometry, sphereModelMatrixAndBoundingVolume);\r\n\r\n        var packedBuffer = packBuffer(indices.BYTES_PER_ELEMENT, batchedIndices, boundingVolumes);\r\n        transferableObjects.push(positions.buffer, vertexBatchIds.buffer, indices.buffer);\r\n        transferableObjects.push(batchIds.buffer, indexOffsets.buffer, indexCounts.buffer);\r\n        transferableObjects.push(packedBuffer.buffer);\r\n\r\n        return {\r\n            positions : positions.buffer,\r\n            vertexBatchIds : vertexBatchIds.buffer,\r\n            indices : indices.buffer,\r\n            indexOffsets : indexOffsets.buffer,\r\n            indexCounts : indexCounts.buffer,\r\n            batchIds : batchIds.buffer,\r\n            packedBuffer : packedBuffer.buffer\r\n        };\r\n    }\r\n\r\n    return createTaskProcessorWorker(createVectorTileGeometries);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createVectorTileGeometries.js\n// module id = 296\n// module chunks = 0","define(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * Describes a renderable batch of geometry.\r\n     *\r\n     * @alias Vector3DTileBatch\r\n     * @constructor\r\n     *\r\n     * @param {Object} options An object with the following properties:\r\n     * @param {Number} options.offset The offset of the batch into the indices buffer.\r\n     * @param {Number} options.count The number of indices in the batch.\r\n     * @param {Color} options.color The color of the geometry in the batch.\r\n     * @param {Number[]} options.batchIds An array where each element is the batch id of the geometry in the batch.\r\n     *\r\n     * @private\r\n     */\r\n    function Vector3DTileBatch(options) {\r\n        /**\r\n         * The offset of the batch into the indices buffer.\r\n         * @type {Number}\r\n         */\r\n        this.offset = options.offset;\r\n        /**\r\n         * The number of indices in the batch.\r\n         * @type {Number}\r\n         */\r\n        this.count = options.count;\r\n        /**\r\n         * The color of the geometry in the batch.\r\n         * @type {Color}\r\n         */\r\n        this.color = options.color;\r\n        /**\r\n         * An array where each element is the batch id of the geometry in the batch.\r\n         * @type {Number[]}\r\n         */\r\n        this.batchIds = options.batchIds;\r\n    }\r\n\r\n    return Vector3DTileBatch;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Scene/Vector3DTileBatch.js\n// module id = 297\n// module chunks = 0","define([\r\n        '../Core/AttributeCompression',\r\n        '../Core/Cartesian3',\r\n        '../Core/Cartographic',\r\n        '../Core/Ellipsoid',\r\n        '../Core/Math',\r\n        '../Core/Rectangle',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        AttributeCompression,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Ellipsoid,\r\n        CesiumMath,\r\n        Rectangle,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    var maxShort = 32767;\r\n\r\n    var scratchBVCartographic = new Cartographic();\r\n    var scratchEncodedPosition = new Cartesian3();\r\n\r\n    var scratchRectangle = new Rectangle();\r\n    var scratchEllipsoid = new Ellipsoid();\r\n    var scratchMinMaxHeights = {\r\n        min : undefined,\r\n        max : undefined\r\n    };\r\n\r\n    function unpackBuffer(packedBuffer) {\r\n        packedBuffer = new Float64Array(packedBuffer);\r\n\r\n        var offset = 0;\r\n        scratchMinMaxHeights.min = packedBuffer[offset++];\r\n        scratchMinMaxHeights.max = packedBuffer[offset++];\r\n\r\n        Rectangle.unpack(packedBuffer, offset, scratchRectangle);\r\n        offset += Rectangle.packedLength;\r\n\r\n        Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\r\n    }\r\n\r\n    function createVectorTilePoints(parameters, transferableObjects) {\r\n        var positions = new Uint16Array(parameters.positions);\r\n\r\n        unpackBuffer(parameters.packedBuffer);\r\n        var rectangle = scratchRectangle;\r\n        var ellipsoid = scratchEllipsoid;\r\n        var minimumHeight = scratchMinMaxHeights.min;\r\n        var maximumHeight = scratchMinMaxHeights.max;\r\n\r\n        var positionsLength = positions.length / 3;\r\n        var uBuffer = positions.subarray(0, positionsLength);\r\n        var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\r\n        var heightBuffer = positions.subarray(2 * positionsLength, 3 * positionsLength);\r\n        AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\r\n\r\n        var decoded = new Float64Array(positions.length);\r\n        for (var i = 0; i < positionsLength; ++i) {\r\n            var u = uBuffer[i];\r\n            var v = vBuffer[i];\r\n            var h = heightBuffer[i];\r\n\r\n            var lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\r\n            var lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\r\n            var alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\r\n\r\n            var cartographic = Cartographic.fromRadians(lon, lat, alt, scratchBVCartographic);\r\n            var decodedPosition = ellipsoid.cartographicToCartesian(cartographic, scratchEncodedPosition);\r\n            Cartesian3.pack(decodedPosition, decoded, i * 3);\r\n        }\r\n\r\n        transferableObjects.push(decoded.buffer);\r\n\r\n        return {\r\n            positions : decoded.buffer\r\n        };\r\n    }\r\n\r\n    return createTaskProcessorWorker(createVectorTilePoints);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createVectorTilePoints.js\n// module id = 298\n// module chunks = 0","define([\r\n        '../Core/AttributeCompression',\r\n        '../Core/Cartesian3',\r\n        '../Core/Cartographic',\r\n        '../Core/Color',\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/IndexDatatype',\r\n        '../Core/Math',\r\n        '../Core/OrientedBoundingBox',\r\n        '../Core/Rectangle',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        AttributeCompression,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Color,\r\n        defined,\r\n        Ellipsoid,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        OrientedBoundingBox,\r\n        Rectangle,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    var scratchCenter = new Cartesian3();\r\n    var scratchEllipsoid = new Ellipsoid();\r\n    var scratchRectangle = new Rectangle();\r\n    var scratchScalars = {\r\n        min : undefined,\r\n        max : undefined,\r\n        indexBytesPerElement : undefined\r\n    };\r\n\r\n    function unpackBuffer(buffer) {\r\n        var packedBuffer = new Float64Array(buffer);\r\n\r\n        var offset = 0;\r\n        scratchScalars.indexBytesPerElement = packedBuffer[offset++];\r\n\r\n        scratchScalars.min = packedBuffer[offset++];\r\n        scratchScalars.max = packedBuffer[offset++];\r\n\r\n        Cartesian3.unpack(packedBuffer, offset, scratchCenter);\r\n        offset += Cartesian3.packedLength;\r\n\r\n        Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\r\n        offset += Ellipsoid.packedLength;\r\n\r\n        Rectangle.unpack(packedBuffer, offset, scratchRectangle);\r\n    }\r\n\r\n    function packedBatchedIndicesLength(batchedIndices) {\r\n        var length = batchedIndices.length;\r\n        var count = 0;\r\n        for (var i = 0; i < length; ++i) {\r\n            count += Color.packedLength + 3 + batchedIndices[i].batchIds.length;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function packBuffer(indexDatatype, boundingVolumes, batchedIndices) {\r\n        var numBVs = boundingVolumes.length;\r\n        var length = 1 + 1 + numBVs * OrientedBoundingBox.packedLength + 1 + packedBatchedIndicesLength(batchedIndices);\r\n\r\n        var packedBuffer = new Float64Array(length);\r\n\r\n        var offset = 0;\r\n        packedBuffer[offset++] = indexDatatype;\r\n        packedBuffer[offset++] = numBVs;\r\n\r\n        for (var i = 0; i < numBVs; ++i) {\r\n            OrientedBoundingBox.pack(boundingVolumes[i], packedBuffer, offset);\r\n            offset += OrientedBoundingBox.packedLength;\r\n        }\r\n\r\n        var indicesLength = batchedIndices.length;\r\n        packedBuffer[offset++] = indicesLength;\r\n\r\n        for (var j = 0; j < indicesLength; ++j) {\r\n            var batchedIndex = batchedIndices[j];\r\n\r\n            Color.pack(batchedIndex.color, packedBuffer, offset);\r\n            offset += Color.packedLength;\r\n\r\n            packedBuffer[offset++] = batchedIndex.offset;\r\n            packedBuffer[offset++] = batchedIndex.count;\r\n\r\n            var batchIds = batchedIndex.batchIds;\r\n            var batchIdsLength = batchIds.length;\r\n            packedBuffer[offset++] = batchIdsLength;\r\n\r\n            for (var k = 0; k < batchIdsLength; ++k) {\r\n                packedBuffer[offset++] = batchIds[k];\r\n            }\r\n        }\r\n\r\n        return packedBuffer;\r\n    }\r\n\r\n    var maxShort = 32767;\r\n\r\n    var scratchEncodedPosition = new Cartesian3();\r\n    var scratchNormal = new Cartesian3();\r\n    var scratchScaledNormal = new Cartesian3();\r\n    var scratchMinHeightPosition = new Cartesian3();\r\n    var scratchMaxHeightPosition = new Cartesian3();\r\n    var scratchBVCartographic = new Cartographic();\r\n    var scratchBVRectangle = new Rectangle();\r\n\r\n    function createVectorTilePolygons(parameters, transferableObjects) {\r\n        unpackBuffer(parameters.packedBuffer);\r\n\r\n        var indices;\r\n        var indexBytesPerElement = scratchScalars.indexBytesPerElement;\r\n        if (indexBytesPerElement === 2) {\r\n            indices = new Uint16Array(parameters.indices);\r\n        } else {\r\n            indices = new Uint32Array(parameters.indices);\r\n        }\r\n\r\n        var positions = new Uint16Array(parameters.positions);\r\n        var counts = new Uint32Array(parameters.counts);\r\n        var indexCounts = new Uint32Array(parameters.indexCounts);\r\n        var batchIds = new Uint32Array(parameters.batchIds);\r\n        var batchTableColors = new Uint32Array(parameters.batchTableColors);\r\n\r\n        var boundingVolumes = new Array(counts.length);\r\n\r\n        var center = scratchCenter;\r\n        var ellipsoid = scratchEllipsoid;\r\n        var rectangle = scratchRectangle;\r\n        var minHeight = scratchScalars.min;\r\n        var maxHeight = scratchScalars.max;\r\n\r\n        var minimumHeights = parameters.minimumHeights;\r\n        var maximumHeights = parameters.maximumHeights;\r\n        if (defined(minimumHeights) && defined(maximumHeights)) {\r\n            minimumHeights = new Float32Array(minimumHeights);\r\n            maximumHeights = new Float32Array(maximumHeights);\r\n        }\r\n\r\n        var i;\r\n        var j;\r\n        var rgba;\r\n\r\n        var positionsLength = positions.length / 2;\r\n        var uBuffer = positions.subarray(0, positionsLength);\r\n        var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\r\n        AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer);\r\n\r\n        var decodedPositions = new Float32Array(positionsLength * 3);\r\n        for (i = 0; i < positionsLength; ++i) {\r\n            var u = uBuffer[i];\r\n            var v = vBuffer[i];\r\n\r\n            var x = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\r\n            var y = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\r\n\r\n            var cart = Cartographic.fromRadians(x, y, 0.0, scratchBVCartographic);\r\n            var decodedPosition = ellipsoid.cartographicToCartesian(cart, scratchEncodedPosition);\r\n            Cartesian3.pack(decodedPosition, decodedPositions, i * 3);\r\n        }\r\n\r\n        var countsLength = counts.length;\r\n        var offsets = new Array(countsLength);\r\n        var indexOffsets = new Array(countsLength);\r\n        var currentOffset = 0;\r\n        var currentIndexOffset = 0;\r\n        for (i = 0; i < countsLength; ++i) {\r\n            offsets[i] = currentOffset;\r\n            indexOffsets[i] = currentIndexOffset;\r\n\r\n            currentOffset += counts[i];\r\n            currentIndexOffset += indexCounts[i];\r\n        }\r\n\r\n        var batchedPositions = new Float32Array(positionsLength * 3 * 2);\r\n        var batchedIds = new Uint16Array(positionsLength * 2);\r\n        var batchedIndexOffsets = new Uint32Array(indexOffsets.length);\r\n        var batchedIndexCounts = new Uint32Array(indexCounts.length);\r\n        var batchedIndices = [];\r\n\r\n        var colorToBuffers = {};\r\n        for (i = 0; i < countsLength; ++i) {\r\n            rgba = batchTableColors[i];\r\n            if (!defined(colorToBuffers[rgba])) {\r\n                colorToBuffers[rgba] = {\r\n                    positionLength : counts[i],\r\n                    indexLength : indexCounts[i],\r\n                    offset : 0,\r\n                    indexOffset : 0,\r\n                    batchIds : [i]\r\n                };\r\n            } else {\r\n                colorToBuffers[rgba].positionLength += counts[i];\r\n                colorToBuffers[rgba].indexLength += indexCounts[i];\r\n                colorToBuffers[rgba].batchIds.push(i);\r\n            }\r\n        }\r\n\r\n        // get the offsets and counts for the positions and indices of each primitive\r\n        var buffer;\r\n        var byColorPositionOffset = 0;\r\n        var byColorIndexOffset = 0;\r\n        for (rgba in colorToBuffers) {\r\n            if (colorToBuffers.hasOwnProperty(rgba)) {\r\n                buffer = colorToBuffers[rgba];\r\n                buffer.offset = byColorPositionOffset;\r\n                buffer.indexOffset = byColorIndexOffset;\r\n\r\n                var positionLength = buffer.positionLength * 2;\r\n                var indexLength = buffer.indexLength * 2 + buffer.positionLength * 6;\r\n\r\n                byColorPositionOffset += positionLength;\r\n                byColorIndexOffset += indexLength;\r\n\r\n                buffer.indexLength = indexLength;\r\n            }\r\n        }\r\n\r\n        var batchedDrawCalls = [];\r\n\r\n        for (rgba in colorToBuffers) {\r\n            if (colorToBuffers.hasOwnProperty(rgba)) {\r\n                buffer = colorToBuffers[rgba];\r\n\r\n                batchedDrawCalls.push({\r\n                    color : Color.fromRgba(parseInt(rgba)),\r\n                    offset : buffer.indexOffset,\r\n                    count : buffer.indexLength,\r\n                    batchIds : buffer.batchIds\r\n                });\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < countsLength; ++i) {\r\n            rgba = batchTableColors[i];\r\n\r\n            buffer = colorToBuffers[rgba];\r\n            var positionOffset = buffer.offset;\r\n            var positionIndex = positionOffset * 3;\r\n            var batchIdIndex = positionOffset;\r\n\r\n            var polygonOffset = offsets[i];\r\n            var polygonCount = counts[i];\r\n            var batchId = batchIds[i];\r\n\r\n            var polygonMinimumHeight = minHeight;\r\n            var polygonMaximumHeight = maxHeight;\r\n            if (defined(minimumHeights) && defined(maximumHeights)) {\r\n                polygonMinimumHeight = minimumHeights[i];\r\n                polygonMaximumHeight = maximumHeights[i];\r\n            }\r\n\r\n            var minLat = Number.POSITIVE_INFINITY;\r\n            var maxLat = Number.NEGATIVE_INFINITY;\r\n            var minLon = Number.POSITIVE_INFINITY;\r\n            var maxLon = Number.NEGATIVE_INFINITY;\r\n\r\n            for (j = 0; j < polygonCount; ++j) {\r\n                var position = Cartesian3.unpack(decodedPositions, polygonOffset * 3 + j * 3, scratchEncodedPosition);\r\n                ellipsoid.scaleToGeodeticSurface(position, position);\r\n\r\n                var carto = ellipsoid.cartesianToCartographic(position, scratchBVCartographic);\r\n                var lat = carto.latitude;\r\n                var lon = carto.longitude;\r\n\r\n                minLat = Math.min(lat, minLat);\r\n                maxLat = Math.max(lat, maxLat);\r\n                minLon = Math.min(lon, minLon);\r\n                maxLon = Math.max(lon, maxLon);\r\n\r\n                var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\r\n                var scaledNormal = Cartesian3.multiplyByScalar(normal, polygonMinimumHeight, scratchScaledNormal);\r\n                var minHeightPosition = Cartesian3.add(position, scaledNormal, scratchMinHeightPosition);\r\n\r\n                scaledNormal = Cartesian3.multiplyByScalar(normal, polygonMaximumHeight, scaledNormal);\r\n                var maxHeightPosition = Cartesian3.add(position, scaledNormal, scratchMaxHeightPosition);\r\n\r\n                Cartesian3.subtract(maxHeightPosition, center, maxHeightPosition);\r\n                Cartesian3.subtract(minHeightPosition, center, minHeightPosition);\r\n\r\n                Cartesian3.pack(maxHeightPosition, batchedPositions, positionIndex);\r\n                Cartesian3.pack(minHeightPosition, batchedPositions, positionIndex + 3);\r\n\r\n                batchedIds[batchIdIndex] = batchId;\r\n                batchedIds[batchIdIndex + 1] = batchId;\r\n\r\n                positionIndex += 6;\r\n                batchIdIndex += 2;\r\n            }\r\n\r\n            rectangle = scratchBVRectangle;\r\n            rectangle.west = minLon;\r\n            rectangle.east = maxLon;\r\n            rectangle.south = minLat;\r\n            rectangle.north = maxLat;\r\n\r\n            boundingVolumes[i] = OrientedBoundingBox.fromRectangle(rectangle, minHeight, maxHeight, ellipsoid);\r\n\r\n            var indicesIndex = buffer.indexOffset;\r\n\r\n            var indexOffset = indexOffsets[i];\r\n            var indexCount = indexCounts[i];\r\n\r\n            batchedIndexOffsets[i] = indicesIndex;\r\n\r\n            for (j = 0; j < indexCount; j += 3) {\r\n                var i0 = indices[indexOffset + j] - polygonOffset;\r\n                var i1 = indices[indexOffset + j + 1] - polygonOffset;\r\n                var i2 = indices[indexOffset + j + 2] - polygonOffset;\r\n\r\n                // triangle on the top of the extruded polygon\r\n                batchedIndices[indicesIndex++] = i0 * 2 + positionOffset;\r\n                batchedIndices[indicesIndex++] = i1 * 2 + positionOffset;\r\n                batchedIndices[indicesIndex++] = i2 * 2 + positionOffset;\r\n\r\n                // triangle on the bottom of the extruded polygon\r\n                batchedIndices[indicesIndex++] = i2 * 2 + 1 + positionOffset;\r\n                batchedIndices[indicesIndex++] = i1 * 2 + 1 + positionOffset;\r\n                batchedIndices[indicesIndex++] = i0 * 2 + 1 + positionOffset;\r\n            }\r\n\r\n            // indices for the walls of the extruded polygon\r\n            for (j = 0; j < polygonCount; ++j) {\r\n                var v0 = j;\r\n                var v1 = (j + 1) % polygonCount;\r\n\r\n                batchedIndices[indicesIndex++] = v0 * 2 + 1 + positionOffset;\r\n                batchedIndices[indicesIndex++] = v1 * 2 + positionOffset;\r\n                batchedIndices[indicesIndex++] = v0 * 2 + positionOffset;\r\n\r\n                batchedIndices[indicesIndex++] = v0 * 2 + 1 + positionOffset;\r\n                batchedIndices[indicesIndex++] = v1 * 2 + 1 + positionOffset;\r\n                batchedIndices[indicesIndex++] = v1 * 2 + positionOffset;\r\n            }\r\n\r\n            buffer.offset += polygonCount * 2;\r\n            buffer.indexOffset = indicesIndex;\r\n\r\n            batchedIndexCounts[i] = indicesIndex - batchedIndexOffsets[i];\r\n        }\r\n\r\n        batchedIndices = IndexDatatype.createTypedArray(batchedPositions.length / 3, batchedIndices);\r\n\r\n        var batchedIndicesLength = batchedDrawCalls.length;\r\n        for (var m = 0; m < batchedIndicesLength; ++m) {\r\n            var tempIds = batchedDrawCalls[m].batchIds;\r\n            var count = 0;\r\n            var tempIdsLength = tempIds.length;\r\n            for (var n = 0; n < tempIdsLength; ++n) {\r\n                count += batchedIndexCounts[tempIds[n]];\r\n            }\r\n            batchedDrawCalls[m].count = count;\r\n        }\r\n\r\n        var indexDatatype = (batchedIndices.BYTES_PER_ELEMENT === 2) ?  IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT;\r\n        var packedBuffer = packBuffer(indexDatatype, boundingVolumes, batchedDrawCalls);\r\n\r\n        transferableObjects.push(batchedPositions.buffer, batchedIndices.buffer, batchedIndexOffsets.buffer, batchedIndexCounts.buffer, batchedIds.buffer, packedBuffer.buffer);\r\n\r\n        return {\r\n            positions : batchedPositions.buffer,\r\n            indices : batchedIndices.buffer,\r\n            indexOffsets : batchedIndexOffsets.buffer,\r\n            indexCounts : batchedIndexCounts.buffer,\r\n            batchIds : batchedIds.buffer,\r\n            packedBuffer : packedBuffer.buffer\r\n        };\r\n    }\r\n\r\n    return createTaskProcessorWorker(createVectorTilePolygons);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createVectorTilePolygons.js\n// module id = 299\n// module chunks = 0","define([\r\n        '../Core/AttributeCompression',\r\n        '../Core/Cartesian3',\r\n        '../Core/Cartographic',\r\n        '../Core/Ellipsoid',\r\n        '../Core/IndexDatatype',\r\n        '../Core/Math',\r\n        '../Core/Rectangle',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        AttributeCompression,\r\n        Cartesian3,\r\n        Cartographic,\r\n        Ellipsoid,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        Rectangle,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    var maxShort = 32767;\r\n\r\n    var scratchBVCartographic = new Cartographic();\r\n    var scratchEncodedPosition = new Cartesian3();\r\n\r\n    function decodePositions(positions, rectangle, minimumHeight, maximumHeight, ellipsoid) {\r\n        var positionsLength = positions.length / 3;\r\n        var uBuffer = positions.subarray(0, positionsLength);\r\n        var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\r\n        var heightBuffer = positions.subarray(2 * positionsLength, 3 * positionsLength);\r\n        AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\r\n\r\n        var decoded = new Float32Array(positions.length);\r\n        for (var i = 0; i < positionsLength; ++i) {\r\n            var u = uBuffer[i];\r\n            var v = vBuffer[i];\r\n            var h = heightBuffer[i];\r\n\r\n            var lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\r\n            var lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\r\n            var alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\r\n\r\n            var cartographic = Cartographic.fromRadians(lon, lat, alt, scratchBVCartographic);\r\n            var decodedPosition = ellipsoid.cartographicToCartesian(cartographic, scratchEncodedPosition);\r\n            Cartesian3.pack(decodedPosition, decoded, i * 3);\r\n        }\r\n        return decoded;\r\n    }\r\n\r\n    var scratchRectangle = new Rectangle();\r\n    var scratchEllipsoid = new Ellipsoid();\r\n    var scratchCenter = new Cartesian3();\r\n    var scratchMinMaxHeights = {\r\n        min : undefined,\r\n        max : undefined\r\n    };\r\n\r\n    function unpackBuffer(packedBuffer) {\r\n        packedBuffer = new Float64Array(packedBuffer);\r\n\r\n        var offset = 0;\r\n        scratchMinMaxHeights.min = packedBuffer[offset++];\r\n        scratchMinMaxHeights.max = packedBuffer[offset++];\r\n\r\n        Rectangle.unpack(packedBuffer, offset, scratchRectangle);\r\n        offset += Rectangle.packedLength;\r\n\r\n        Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\r\n        offset += Ellipsoid.packedLength;\r\n\r\n        Cartesian3.unpack(packedBuffer, offset, scratchCenter);\r\n    }\r\n\r\n    var scratchP0 = new Cartesian3();\r\n    var scratchP1 = new Cartesian3();\r\n    var scratchPrev = new Cartesian3();\r\n    var scratchCur = new Cartesian3();\r\n    var scratchNext = new Cartesian3();\r\n\r\n    function createVectorTilePolylines(parameters, transferableObjects) {\r\n        var encodedPositions = new Uint16Array(parameters.positions);\r\n        var widths = new Uint16Array(parameters.widths);\r\n        var counts = new Uint32Array(parameters.counts);\r\n        var batchIds = new Uint16Array(parameters.batchIds);\r\n\r\n        unpackBuffer(parameters.packedBuffer);\r\n        var rectangle = scratchRectangle;\r\n        var ellipsoid = scratchEllipsoid;\r\n        var center = scratchCenter;\r\n        var minimumHeight = scratchMinMaxHeights.min;\r\n        var maximumHeight = scratchMinMaxHeights.max;\r\n\r\n        var positions = decodePositions(encodedPositions, rectangle, minimumHeight, maximumHeight, ellipsoid);\r\n\r\n        var positionsLength = positions.length / 3;\r\n        var size = positionsLength * 4 - 4;\r\n\r\n        var curPositions = new Float32Array(size * 3);\r\n        var prevPositions = new Float32Array(size * 3);\r\n        var nextPositions = new Float32Array(size * 3);\r\n        var expandAndWidth = new Float32Array(size * 2);\r\n        var vertexBatchIds = new Uint16Array(size);\r\n\r\n        var positionIndex = 0;\r\n        var expandAndWidthIndex = 0;\r\n        var batchIdIndex = 0;\r\n\r\n        var i;\r\n        var offset = 0;\r\n        var length = counts.length;\r\n\r\n        for (i = 0; i < length; ++i) {\r\n            var count = counts [i];\r\n            var width = widths[i];\r\n            var batchId = batchIds[i];\r\n\r\n            for (var j = 0; j < count; ++j) {\r\n                var previous;\r\n                if (j === 0) {\r\n                    var p0 = Cartesian3.unpack(positions, offset * 3, scratchP0);\r\n                    var p1 = Cartesian3.unpack(positions, (offset + 1) * 3, scratchP1);\r\n\r\n                    previous = Cartesian3.subtract(p0, p1, scratchPrev);\r\n                    Cartesian3.add(p0, previous, previous);\r\n                } else {\r\n                    previous = Cartesian3.unpack(positions, (offset + j - 1) * 3, scratchPrev);\r\n                }\r\n\r\n                var current = Cartesian3.unpack(positions, (offset + j) * 3, scratchCur);\r\n\r\n                var next;\r\n                if (j === count - 1) {\r\n                    var p2 = Cartesian3.unpack(positions, (offset + count - 1) * 3, scratchP0);\r\n                    var p3 = Cartesian3.unpack(positions, (offset + count - 2) * 3, scratchP1);\r\n\r\n                    next = Cartesian3.subtract(p2, p3, scratchNext);\r\n                    Cartesian3.add(p2, next, next);\r\n                } else {\r\n                    next = Cartesian3.unpack(positions, (offset + j + 1) * 3, scratchNext);\r\n                }\r\n\r\n                Cartesian3.subtract(previous, center, previous);\r\n                Cartesian3.subtract(current, center, current);\r\n                Cartesian3.subtract(next, center, next);\r\n\r\n                var startK = j === 0 ? 2 : 0;\r\n                var endK = j === count - 1 ? 2 : 4;\r\n\r\n                for (var k = startK; k < endK; ++k) {\r\n                    Cartesian3.pack(current, curPositions, positionIndex);\r\n                    Cartesian3.pack(previous, prevPositions, positionIndex);\r\n                    Cartesian3.pack(next, nextPositions, positionIndex);\r\n                    positionIndex += 3;\r\n\r\n                    var direction = (k - 2 < 0) ? -1.0 : 1.0;\r\n                    expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;\r\n                    expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n                    vertexBatchIds[batchIdIndex++] = batchId;\r\n                }\r\n            }\r\n\r\n            offset += count;\r\n        }\r\n\r\n        var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n        var index = 0;\r\n        var indicesIndex = 0;\r\n        length = positionsLength - 1;\r\n        for (i = 0; i < length; ++i) {\r\n            indices[indicesIndex++] = index;\r\n            indices[indicesIndex++] = index + 2;\r\n            indices[indicesIndex++] = index + 1;\r\n\r\n            indices[indicesIndex++] = index + 1;\r\n            indices[indicesIndex++] = index + 2;\r\n            indices[indicesIndex++] = index + 3;\r\n\r\n            index += 4;\r\n        }\r\n\r\n        transferableObjects.push(curPositions.buffer, prevPositions.buffer, nextPositions.buffer);\r\n        transferableObjects.push(expandAndWidth.buffer, vertexBatchIds.buffer, indices.buffer);\r\n\r\n        return {\r\n            indexDatatype : (indices.BYTES_PER_ELEMENT === 2) ? IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT,\r\n            currentPositions : curPositions.buffer,\r\n            previousPositions : prevPositions.buffer,\r\n            nextPositions : nextPositions.buffer,\r\n            expandAndWidth : expandAndWidth.buffer,\r\n            batchIds : vertexBatchIds.buffer,\r\n            indices : indices.buffer\r\n        };\r\n    }\r\n\r\n    return createTaskProcessorWorker(createVectorTilePolylines);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createVectorTilePolylines.js\n// module id = 300\n// module chunks = 0","define([\r\n        '../Core/AxisAlignedBoundingBox',\r\n        '../Core/BoundingSphere',\r\n        '../Core/Cartesian2',\r\n        '../Core/Cartesian3',\r\n        '../Core/Cartographic',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/EllipsoidalOccluder',\r\n        '../Core/Math',\r\n        '../Core/Matrix4',\r\n        '../Core/OrientedBoundingBox',\r\n        '../Core/Rectangle',\r\n        '../Core/RuntimeError',\r\n        '../Core/TerrainEncoding',\r\n        '../Core/Transforms',\r\n        '../Core/WebMercatorProjection',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        AxisAlignedBoundingBox,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        defaultValue,\r\n        defined,\r\n        Ellipsoid,\r\n        EllipsoidalOccluder,\r\n        CesiumMath,\r\n        Matrix4,\r\n        OrientedBoundingBox,\r\n        Rectangle,\r\n        RuntimeError,\r\n        TerrainEncoding,\r\n        Transforms,\r\n        WebMercatorProjection,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    var sizeOfUint16 = Uint16Array.BYTES_PER_ELEMENT;\r\n    var sizeOfInt32 = Int32Array.BYTES_PER_ELEMENT;\r\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\r\n    var sizeOfFloat = Float32Array.BYTES_PER_ELEMENT;\r\n    var sizeOfDouble = Float64Array.BYTES_PER_ELEMENT;\r\n\r\n    function indexOfEpsilon(arr, elem, elemType) {\r\n        elemType = defaultValue(elemType, CesiumMath);\r\n        var count = arr.length;\r\n        for (var i = 0; i < count; ++i) {\r\n            if (elemType.equalsEpsilon(arr[i], elem, CesiumMath.EPSILON12)) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function createVerticesFromGoogleEarthEnterpriseBuffer(parameters, transferableObjects) {\r\n        parameters.ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n        parameters.rectangle = Rectangle.clone(parameters.rectangle);\r\n\r\n        var statistics = processBuffer(parameters.buffer, parameters.relativeToCenter, parameters.ellipsoid,\r\n            parameters.rectangle, parameters.nativeRectangle, parameters.exaggeration, parameters.skirtHeight,\r\n            parameters.includeWebMercatorT, parameters.negativeAltitudeExponentBias, parameters.negativeElevationThreshold);\r\n        var vertices = statistics.vertices;\r\n        transferableObjects.push(vertices.buffer);\r\n        var indices = statistics.indices;\r\n        transferableObjects.push(indices.buffer);\r\n\r\n        return {\r\n            vertices : vertices.buffer,\r\n            indices : indices.buffer,\r\n            numberOfAttributes : statistics.encoding.getStride(),\r\n            minimumHeight : statistics.minimumHeight,\r\n            maximumHeight : statistics.maximumHeight,\r\n            boundingSphere3D : statistics.boundingSphere3D,\r\n            orientedBoundingBox : statistics.orientedBoundingBox,\r\n            occludeePointInScaledSpace : statistics.occludeePointInScaledSpace,\r\n            encoding : statistics.encoding,\r\n            vertexCountWithoutSkirts : statistics.vertexCountWithoutSkirts,\r\n            skirtIndex : statistics.skirtIndex\r\n        };\r\n    }\r\n\r\n    var scratchCartographic = new Cartographic();\r\n    var scratchCartesian = new Cartesian3();\r\n    var minimumScratch = new Cartesian3();\r\n    var maximumScratch = new Cartesian3();\r\n    var matrix4Scratch = new Matrix4();\r\n\r\n    function processBuffer(buffer, relativeToCenter, ellipsoid, rectangle, nativeRectangle, exaggeration, skirtHeight, includeWebMercatorT, negativeAltitudeExponentBias, negativeElevationThreshold) {\r\n        var geographicWest;\r\n        var geographicSouth;\r\n        var geographicEast;\r\n        var geographicNorth;\r\n        var rectangleWidth, rectangleHeight;\r\n\r\n        if (!defined(rectangle)) {\r\n            geographicWest = CesiumMath.toRadians(nativeRectangle.west);\r\n            geographicSouth = CesiumMath.toRadians(nativeRectangle.south);\r\n            geographicEast = CesiumMath.toRadians(nativeRectangle.east);\r\n            geographicNorth = CesiumMath.toRadians(nativeRectangle.north);\r\n            rectangleWidth = CesiumMath.toRadians(rectangle.width);\r\n            rectangleHeight = CesiumMath.toRadians(rectangle.height);\r\n        } else {\r\n            geographicWest = rectangle.west;\r\n            geographicSouth = rectangle.south;\r\n            geographicEast = rectangle.east;\r\n            geographicNorth = rectangle.north;\r\n            rectangleWidth = rectangle.width;\r\n            rectangleHeight = rectangle.height;\r\n        }\r\n\r\n        // Keep track of quad borders so we can remove duplicates around the borders\r\n        var quadBorderLatitudes = [geographicSouth, geographicNorth];\r\n        var quadBorderLongitudes = [geographicWest, geographicEast];\r\n\r\n        var fromENU = Transforms.eastNorthUpToFixedFrame(relativeToCenter, ellipsoid);\r\n        var toENU = Matrix4.inverseTransformation(fromENU, matrix4Scratch);\r\n\r\n        var southMercatorY;\r\n        var oneOverMercatorHeight;\r\n        if (includeWebMercatorT) {\r\n            southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicSouth);\r\n            oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicNorth) - southMercatorY);\r\n        }\r\n\r\n        var dv = new DataView(buffer);\r\n\r\n        var minHeight = Number.POSITIVE_INFINITY;\r\n        var maxHeight = Number.NEGATIVE_INFINITY;\r\n\r\n        var minimum = minimumScratch;\r\n        minimum.x = Number.POSITIVE_INFINITY;\r\n        minimum.y = Number.POSITIVE_INFINITY;\r\n        minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n        var maximum = maximumScratch;\r\n        maximum.x = Number.NEGATIVE_INFINITY;\r\n        maximum.y = Number.NEGATIVE_INFINITY;\r\n        maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n        // Compute sizes\r\n        var offset = 0;\r\n        var size = 0;\r\n        var indicesSize = 0;\r\n        var quadSize;\r\n        var quad;\r\n        for (quad = 0; quad < 4; ++quad) {\r\n            var o = offset;\r\n            quadSize = dv.getUint32(o, true);\r\n            o += sizeOfUint32;\r\n\r\n            var x = CesiumMath.toRadians(dv.getFloat64(o, true) * 180.0);\r\n            o += sizeOfDouble;\r\n            if (indexOfEpsilon(quadBorderLongitudes, x) === -1) {\r\n                quadBorderLongitudes.push(x);\r\n            }\r\n\r\n            var y = CesiumMath.toRadians(dv.getFloat64(o, true) * 180.0);\r\n            o += sizeOfDouble;\r\n            if (indexOfEpsilon(quadBorderLatitudes, y) === -1) {\r\n                quadBorderLatitudes.push(y);\r\n            }\r\n\r\n            o += 2 * sizeOfDouble; // stepX + stepY\r\n\r\n            var c = dv.getInt32(o, true); // Read point count\r\n            o += sizeOfInt32;\r\n            size += c;\r\n\r\n            c = dv.getInt32(o, true); // Read index count\r\n            indicesSize += c * 3;\r\n\r\n            offset += quadSize + sizeOfUint32; // Jump to next quad\r\n        }\r\n\r\n        // Quad Border points to remove duplicates\r\n        var quadBorderPoints = [];\r\n        var quadBorderIndices = [];\r\n\r\n        // Create arrays\r\n        var positions = new Array(size);\r\n        var uvs = new Array(size);\r\n        var heights = new Array(size);\r\n        var webMercatorTs = includeWebMercatorT ? new Array(size) : [];\r\n        var indices = new Array(indicesSize);\r\n\r\n        // Points are laid out in rows starting at SW, so storing border points as we\r\n        //  come across them all points will be adjacent.\r\n        var westBorder = [];\r\n        var southBorder = [];\r\n        var eastBorder = [];\r\n        var northBorder = [];\r\n\r\n        // Each tile is split into 4 parts\r\n        var pointOffset = 0;\r\n        var indicesOffset = 0;\r\n        offset = 0;\r\n        for (quad = 0; quad < 4; ++quad) {\r\n            quadSize = dv.getUint32(offset, true);\r\n            offset += sizeOfUint32;\r\n            var startQuad = offset;\r\n\r\n            var originX = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n            offset += sizeOfDouble;\r\n\r\n            var originY = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n            offset += sizeOfDouble;\r\n\r\n            var stepX = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n            var halfStepX = stepX * 0.5;\r\n            offset += sizeOfDouble;\r\n\r\n            var stepY = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n            var halfStepY = stepY * 0.5;\r\n            offset += sizeOfDouble;\r\n\r\n            var numPoints = dv.getInt32(offset, true);\r\n            offset += sizeOfInt32;\r\n\r\n            var numFaces = dv.getInt32(offset, true);\r\n            offset += sizeOfInt32;\r\n\r\n            //var level = dv.getInt32(offset, true);\r\n            offset += sizeOfInt32;\r\n\r\n            // Keep track of quad indices to overall tile indices\r\n            var indicesMapping = new Array(numPoints);\r\n            for (var i = 0; i < numPoints; ++i) {\r\n                var longitude = originX + dv.getUint8(offset++) * stepX;\r\n                scratchCartographic.longitude = longitude;\r\n                var latitude = originY + dv.getUint8(offset++) * stepY;\r\n                scratchCartographic.latitude = latitude;\r\n                // Height is stored in units of (1/EarthRadius) or (1/6371010.0)\r\n                var height = dv.getFloat32(offset, true) * 6371010.0;\r\n                offset += sizeOfFloat;\r\n\r\n                // In order to support old clients, negative altitude values are stored as\r\n                // height/-2^32. Old clients see the value as really close to 0 but new clients multiply\r\n                // by -2^32 to get the real negative altitude value.\r\n                if (height < negativeElevationThreshold) {\r\n                    height *= negativeAltitudeExponentBias;\r\n                }\r\n                height *= exaggeration;\r\n\r\n                scratchCartographic.height = height;\r\n\r\n                // Is it along a quad border - if so check if already exists and use that index\r\n                if (indexOfEpsilon(quadBorderLongitudes, longitude) !== -1 ||\r\n                    indexOfEpsilon(quadBorderLatitudes, latitude) !== -1) {\r\n                    var index = indexOfEpsilon(quadBorderPoints, scratchCartographic, Cartographic);\r\n                    if (index === -1) {\r\n                        quadBorderPoints.push(Cartographic.clone(scratchCartographic));\r\n                        quadBorderIndices.push(pointOffset);\r\n                    } else {\r\n                        indicesMapping[i] = quadBorderIndices[index];\r\n                        continue;\r\n                    }\r\n                }\r\n                indicesMapping[i] = pointOffset;\r\n\r\n                if (Math.abs(longitude - geographicWest) < halfStepX) {\r\n                    westBorder.push({\r\n                        index : pointOffset,\r\n                        cartographic : Cartographic.clone(scratchCartographic)\r\n                    });\r\n                } else if (Math.abs(longitude - geographicEast) < halfStepX) {\r\n                    eastBorder.push({\r\n                        index : pointOffset,\r\n                        cartographic : Cartographic.clone(scratchCartographic)\r\n                    });\r\n                } else if (Math.abs(latitude - geographicSouth) < halfStepY) {\r\n                    southBorder.push({\r\n                        index : pointOffset,\r\n                        cartographic : Cartographic.clone(scratchCartographic)\r\n                    });\r\n                } else if (Math.abs(latitude - geographicNorth) < halfStepY) {\r\n                    northBorder.push({\r\n                        index : pointOffset,\r\n                        cartographic : Cartographic.clone(scratchCartographic)\r\n                    });\r\n                }\r\n\r\n                minHeight = Math.min(height, minHeight);\r\n                maxHeight = Math.max(height, maxHeight);\r\n                heights[pointOffset] = height;\r\n\r\n                var pos = ellipsoid.cartographicToCartesian(scratchCartographic);\r\n                positions[pointOffset] = pos;\r\n\r\n                if (includeWebMercatorT) {\r\n                    webMercatorTs[pointOffset] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;\r\n                }\r\n\r\n                Matrix4.multiplyByPoint(toENU, pos, scratchCartesian);\r\n\r\n                Cartesian3.minimumByComponent(scratchCartesian, minimum, minimum);\r\n                Cartesian3.maximumByComponent(scratchCartesian, maximum, maximum);\r\n\r\n                var u = (longitude - geographicWest) / (geographicEast - geographicWest);\r\n                u = CesiumMath.clamp(u, 0.0, 1.0);\r\n                var v = (latitude - geographicSouth) / (geographicNorth - geographicSouth);\r\n                v = CesiumMath.clamp(v, 0.0, 1.0);\r\n\r\n                uvs[pointOffset] = new Cartesian2(u, v);\r\n                ++pointOffset;\r\n            }\r\n\r\n            var facesElementCount = numFaces * 3;\r\n            for (var j = 0; j < facesElementCount; ++j, ++indicesOffset) {\r\n                indices[indicesOffset] = indicesMapping[dv.getUint16(offset, true)];\r\n                offset += sizeOfUint16;\r\n            }\r\n\r\n            if (quadSize !== (offset - startQuad)) {\r\n                throw new RuntimeError('Invalid terrain tile.');\r\n            }\r\n        }\r\n\r\n        positions.length = pointOffset;\r\n        uvs.length = pointOffset;\r\n        heights.length = pointOffset;\r\n        if (includeWebMercatorT) {\r\n            webMercatorTs.length = pointOffset;\r\n        }\r\n\r\n        var vertexCountWithoutSkirts = pointOffset;\r\n        var skirtIndex = indicesOffset;\r\n\r\n        // Add skirt points\r\n        var skirtOptions = {\r\n            hMin : minHeight,\r\n            lastBorderPoint : undefined,\r\n            skirtHeight : skirtHeight,\r\n            toENU : toENU,\r\n            ellipsoid : ellipsoid,\r\n            minimum : minimum,\r\n            maximum : maximum\r\n        };\r\n\r\n        // Sort counter clockwise from NW corner\r\n        // Corner points are in the east/west arrays\r\n        westBorder.sort(function(a, b) {\r\n            return b.cartographic.latitude - a.cartographic.latitude;\r\n        });\r\n        southBorder.sort(function(a, b) {\r\n            return a.cartographic.longitude - b.cartographic.longitude;\r\n        });\r\n        eastBorder.sort(function(a, b) {\r\n            return a.cartographic.latitude - b.cartographic.latitude;\r\n        });\r\n        northBorder.sort(function(a, b) {\r\n            return b.cartographic.longitude - a.cartographic.longitude;\r\n        });\r\n\r\n        var percentage = 0.00001;\r\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n            westBorder, -percentage * rectangleWidth, true, -percentage * rectangleHeight);\r\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n            southBorder, -percentage * rectangleHeight, false);\r\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n            eastBorder, percentage * rectangleWidth, true, percentage * rectangleHeight);\r\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n            northBorder, percentage * rectangleHeight, false);\r\n\r\n        // Since the corner between the north and west sides is in the west array, generate the last\r\n        //  two triangles between the last north vertex and the first west vertex\r\n        if (westBorder.length > 0 && northBorder.length > 0) {\r\n            var firstBorderIndex = westBorder[0].index;\r\n            var firstSkirtIndex = vertexCountWithoutSkirts;\r\n            var lastBorderIndex = northBorder[northBorder.length - 1].index;\r\n            var lastSkirtIndex = positions.length - 1;\r\n\r\n            indices.push(lastBorderIndex, lastSkirtIndex, firstSkirtIndex, firstSkirtIndex, firstBorderIndex, lastBorderIndex);\r\n        }\r\n\r\n        size = positions.length; // Get new size with skirt vertices\r\n\r\n        var boundingSphere3D = BoundingSphere.fromPoints(positions);\r\n        var orientedBoundingBox;\r\n        if (defined(rectangle) && rectangle.width < CesiumMath.PI_OVER_TWO + CesiumMath.EPSILON5) {\r\n            // Here, rectangle.width < pi/2, and rectangle.height < pi\r\n            // (though it would still work with rectangle.width up to pi)\r\n            orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minHeight, maxHeight, ellipsoid);\r\n        }\r\n\r\n        var occluder = new EllipsoidalOccluder(ellipsoid);\r\n        var occludeePointInScaledSpace = occluder.computeHorizonCullingPoint(relativeToCenter, positions);\r\n\r\n        var aaBox = new AxisAlignedBoundingBox(minimum, maximum, relativeToCenter);\r\n        var encoding = new TerrainEncoding(aaBox, skirtOptions.hMin, maxHeight, fromENU, false, includeWebMercatorT);\r\n        var vertices = new Float32Array(size * encoding.getStride());\r\n\r\n        var bufferIndex = 0;\r\n        for (var k = 0; k < size; ++k) {\r\n            bufferIndex = encoding.encode(vertices, bufferIndex, positions[k], uvs[k], heights[k], undefined, webMercatorTs[k]);\r\n        }\r\n\r\n        return {\r\n            vertices : vertices,\r\n            indices : new Uint16Array(indices),\r\n            maximumHeight : maxHeight,\r\n            minimumHeight : minHeight,\r\n            encoding : encoding,\r\n            boundingSphere3D : boundingSphere3D,\r\n            orientedBoundingBox : orientedBoundingBox,\r\n            occludeePointInScaledSpace : occludeePointInScaledSpace,\r\n            vertexCountWithoutSkirts : vertexCountWithoutSkirts,\r\n            skirtIndex : skirtIndex\r\n        };\r\n    }\r\n\r\n    function addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n                      borderPoints, fudgeFactor, eastOrWest, cornerFudge) {\r\n        var count = borderPoints.length;\r\n        for (var j = 0; j < count; ++j) {\r\n            var borderPoint = borderPoints[j];\r\n            var borderCartographic = borderPoint.cartographic;\r\n            var borderIndex = borderPoint.index;\r\n            var currentIndex = positions.length;\r\n\r\n            var longitude = borderCartographic.longitude;\r\n            var latitude = borderCartographic.latitude;\r\n            latitude = CesiumMath.clamp(latitude, -CesiumMath.PI_OVER_TWO, CesiumMath.PI_OVER_TWO); // Don't go over the poles\r\n            var height = borderCartographic.height - skirtOptions.skirtHeight;\r\n            skirtOptions.hMin = Math.min(skirtOptions.hMin, height);\r\n\r\n            Cartographic.fromRadians(longitude, latitude, height, scratchCartographic);\r\n\r\n            // Adjust sides to angle out\r\n            if (eastOrWest) {\r\n                scratchCartographic.longitude += fudgeFactor;\r\n            }\r\n\r\n            // Adjust top or bottom to angle out\r\n            // Since corners are in the east/west arrays angle the first and last points as well\r\n            if (!eastOrWest) {\r\n                scratchCartographic.latitude += fudgeFactor;\r\n            } else if (j === (count - 1)) {\r\n                scratchCartographic.latitude += cornerFudge;\r\n            } else if (j === 0) {\r\n                scratchCartographic.latitude -= cornerFudge;\r\n            }\r\n\r\n            var pos = skirtOptions.ellipsoid.cartographicToCartesian(scratchCartographic);\r\n            positions.push(pos);\r\n            heights.push(height);\r\n            uvs.push(Cartesian2.clone(uvs[borderIndex])); // Copy UVs from border point\r\n            if (webMercatorTs.length > 0) {\r\n                webMercatorTs.push(webMercatorTs[borderIndex]);\r\n            }\r\n\r\n            Matrix4.multiplyByPoint(skirtOptions.toENU, pos, scratchCartesian);\r\n\r\n            var minimum = skirtOptions.minimum;\r\n            var maximum = skirtOptions.maximum;\r\n            Cartesian3.minimumByComponent(scratchCartesian, minimum, minimum);\r\n            Cartesian3.maximumByComponent(scratchCartesian, maximum, maximum);\r\n\r\n            var lastBorderPoint = skirtOptions.lastBorderPoint;\r\n            if (defined(lastBorderPoint)) {\r\n                var lastBorderIndex = lastBorderPoint.index;\r\n                indices.push(lastBorderIndex, currentIndex - 1, currentIndex, currentIndex, borderIndex, lastBorderIndex);\r\n            }\r\n\r\n            skirtOptions.lastBorderPoint = borderPoint;\r\n        }\r\n    }\r\n\r\n    return createTaskProcessorWorker(createVerticesFromGoogleEarthEnterpriseBuffer);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createVerticesFromGoogleEarthEnterpriseBuffer.js\n// module id = 301\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This enumerated type is used to determine how the vertices of the terrain mesh are compressed.\r\n     *\r\n     * @exports TerrainQuantization\r\n     *\r\n     * @private\r\n     */\r\n    var TerrainQuantization = {\r\n        /**\r\n         * The vertices are not compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        NONE : 0,\r\n\r\n        /**\r\n         * The vertices are compressed to 12 bits.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        BITS12 : 1\r\n    };\r\n\r\n    return freezeObject(TerrainQuantization);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/TerrainQuantization.js\n// module id = 302\n// module chunks = 0","define([\r\n        '../Core/Ellipsoid',\r\n        '../Core/HeightmapTessellator',\r\n        '../Core/Rectangle',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        Ellipsoid,\r\n        HeightmapTessellator,\r\n        Rectangle,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    function createVerticesFromHeightmap(parameters, transferableObjects) {\r\n        var arrayWidth = parameters.width;\r\n        var arrayHeight = parameters.height;\r\n\r\n        if (parameters.skirtHeight > 0.0) {\r\n            arrayWidth += 2;\r\n            arrayHeight += 2;\r\n        }\r\n\r\n        parameters.ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n        parameters.rectangle = Rectangle.clone(parameters.rectangle);\r\n\r\n        var statistics = HeightmapTessellator.computeVertices(parameters);\r\n        var vertices = statistics.vertices;\r\n        transferableObjects.push(vertices.buffer);\r\n\r\n        return {\r\n            vertices : vertices.buffer,\r\n            numberOfAttributes : statistics.encoding.getStride(),\r\n            minimumHeight : statistics.minimumHeight,\r\n            maximumHeight : statistics.maximumHeight,\r\n            gridWidth : arrayWidth,\r\n            gridHeight : arrayHeight,\r\n            boundingSphere3D : statistics.boundingSphere3D,\r\n            orientedBoundingBox : statistics.orientedBoundingBox,\r\n            occludeePointInScaledSpace : statistics.occludeePointInScaledSpace,\r\n            encoding : statistics.encoding\r\n        };\r\n    }\r\n\r\n    return createTaskProcessorWorker(createVerticesFromHeightmap);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createVerticesFromHeightmap.js\n// module id = 303\n// module chunks = 0","define([\r\n        './AxisAlignedBoundingBox',\r\n        './BoundingSphere',\r\n        './Cartesian2',\r\n        './Cartesian3',\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Ellipsoid',\r\n        './EllipsoidalOccluder',\r\n        './freezeObject',\r\n        './Math',\r\n        './Matrix4',\r\n        './OrientedBoundingBox',\r\n        './Rectangle',\r\n        './TerrainEncoding',\r\n        './Transforms',\r\n        './WebMercatorProjection'\r\n    ], function(\r\n        AxisAlignedBoundingBox,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        EllipsoidalOccluder,\r\n        freezeObject,\r\n        CesiumMath,\r\n        Matrix4,\r\n        OrientedBoundingBox,\r\n        Rectangle,\r\n        TerrainEncoding,\r\n        Transforms,\r\n        WebMercatorProjection) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Contains functions to create a mesh from a heightmap image.\r\n     *\r\n     * @exports HeightmapTessellator\r\n     *\r\n     * @private\r\n     */\r\n    var HeightmapTessellator = {};\r\n\r\n    /**\r\n     * The default structure of a heightmap, as given to {@link HeightmapTessellator.computeVertices}.\r\n     *\r\n     * @constant\r\n     */\r\n    HeightmapTessellator.DEFAULT_STRUCTURE = freezeObject({\r\n        heightScale : 1.0,\r\n        heightOffset : 0.0,\r\n        elementsPerHeight : 1,\r\n        stride : 1,\r\n        elementMultiplier : 256.0,\r\n        isBigEndian : false\r\n    });\r\n\r\n    var cartesian3Scratch = new Cartesian3();\r\n    var matrix4Scratch = new Matrix4();\r\n    var minimumScratch = new Cartesian3();\r\n    var maximumScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Fills an array of vertices from a heightmap image.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {TypedArray} options.heightmap The heightmap to tessellate.\r\n     * @param {Number} options.width The width of the heightmap, in height samples.\r\n     * @param {Number} options.height The height of the heightmap, in height samples.\r\n     * @param {Number} options.skirtHeight The height of skirts to drape at the edges of the heightmap.\r\n     * @param {Rectangle} options.nativeRectangle A rectangle in the native coordinates of the heightmap's projection.  For\r\n     *                 a heightmap with a geographic projection, this is degrees.  For the web mercator\r\n     *                 projection, this is meters.\r\n     * @param {Number} [options.exaggeration=1.0] The scale used to exaggerate the terrain.\r\n     * @param {Rectangle} [options.rectangle] The rectangle covered by the heightmap, in geodetic coordinates with north, south, east and\r\n     *                 west properties in radians.  Either rectangle or nativeRectangle must be provided.  If both\r\n     *                 are provided, they're assumed to be consistent.\r\n     * @param {Boolean} [options.isGeographic=true] True if the heightmap uses a {@link GeographicProjection}, or false if it uses\r\n     *                  a {@link WebMercatorProjection}.\r\n     * @param {Cartesian3} [options.relativeToCenter=Cartesian3.ZERO] The positions will be computed as <code>Cartesian3.subtract(worldPosition, relativeToCenter)</code>.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to which the heightmap applies.\r\n     * @param {Object} [options.structure] An object describing the structure of the height data.\r\n     * @param {Number} [options.structure.heightScale=1.0] The factor by which to multiply height samples in order to obtain\r\n     *                 the height above the heightOffset, in meters.  The heightOffset is added to the resulting\r\n     *                 height after multiplying by the scale.\r\n     * @param {Number} [options.structure.heightOffset=0.0] The offset to add to the scaled height to obtain the final\r\n     *                 height in meters.  The offset is added after the height sample is multiplied by the\r\n     *                 heightScale.\r\n     * @param {Number} [options.structure.elementsPerHeight=1] The number of elements in the buffer that make up a single height\r\n     *                 sample.  This is usually 1, indicating that each element is a separate height sample.  If\r\n     *                 it is greater than 1, that number of elements together form the height sample, which is\r\n     *                 computed according to the structure.elementMultiplier and structure.isBigEndian properties.\r\n     * @param {Number} [options.structure.stride=1] The number of elements to skip to get from the first element of\r\n     *                 one height to the first element of the next height.\r\n     * @param {Number} [options.structure.elementMultiplier=256.0] The multiplier used to compute the height value when the\r\n     *                 stride property is greater than 1.  For example, if the stride is 4 and the strideMultiplier\r\n     *                 is 256, the height is computed as follows:\r\n     *                 `height = buffer[index] + buffer[index + 1] * 256 + buffer[index + 2] * 256 * 256 + buffer[index + 3] * 256 * 256 * 256`\r\n     *                 This is assuming that the isBigEndian property is false.  If it is true, the order of the\r\n     *                 elements is reversed.\r\n     * @param {Number} [options.structure.lowestEncodedHeight] The lowest value that can be stored in the height buffer.  Any heights that are lower\r\n     *                 than this value after encoding with the `heightScale` and `heightOffset` are clamped to this value.  For example, if the height\r\n     *                 buffer is a `Uint16Array`, this value should be 0 because a `Uint16Array` cannot store negative numbers.  If this parameter is\r\n     *                 not specified, no minimum value is enforced.\r\n     * @param {Number} [options.structure.highestEncodedHeight] The highest value that can be stored in the height buffer.  Any heights that are higher\r\n     *                 than this value after encoding with the `heightScale` and `heightOffset` are clamped to this value.  For example, if the height\r\n     *                 buffer is a `Uint16Array`, this value should be `256 * 256 - 1` or 65535 because a `Uint16Array` cannot store numbers larger\r\n     *                 than 65535.  If this parameter is not specified, no maximum value is enforced.\r\n     * @param {Boolean} [options.structure.isBigEndian=false] Indicates endianness of the elements in the buffer when the\r\n     *                  stride property is greater than 1.  If this property is false, the first element is the\r\n     *                  low-order element.  If it is true, the first element is the high-order element.\r\n     *\r\n     * @example\r\n     * var width = 5;\r\n     * var height = 5;\r\n     * var statistics = Cesium.HeightmapTessellator.computeVertices({\r\n     *     heightmap : [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0],\r\n     *     width : width,\r\n     *     height : height,\r\n     *     skirtHeight : 0.0,\r\n     *     nativeRectangle : {\r\n     *         west : 10.0,\r\n     *         east : 20.0,\r\n     *         south : 30.0,\r\n     *         north : 40.0\r\n     *     }\r\n     * });\r\n     *\r\n     * var encoding = statistics.encoding;\r\n     * var position = encoding.decodePosition(statistics.vertices, index * encoding.getStride());\r\n     */\r\n    HeightmapTessellator.computeVertices = function(options) {\r\n        \r\n\r\n        // This function tends to be a performance hotspot for terrain rendering,\r\n        // so it employs a lot of inlining and unrolling as an optimization.\r\n        // In particular, the functionality of Ellipsoid.cartographicToCartesian\r\n        // is inlined.\r\n\r\n        var cos = Math.cos;\r\n        var sin = Math.sin;\r\n        var sqrt = Math.sqrt;\r\n        var atan = Math.atan;\r\n        var exp = Math.exp;\r\n        var piOverTwo = CesiumMath.PI_OVER_TWO;\r\n        var toRadians = CesiumMath.toRadians;\r\n\r\n        var heightmap = options.heightmap;\r\n        var width = options.width;\r\n        var height = options.height;\r\n        var skirtHeight = options.skirtHeight;\r\n\r\n        var isGeographic = defaultValue(options.isGeographic, true);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var oneOverGlobeSemimajorAxis = 1.0 / ellipsoid.maximumRadius;\r\n\r\n        var nativeRectangle = options.nativeRectangle;\r\n\r\n        var geographicWest;\r\n        var geographicSouth;\r\n        var geographicEast;\r\n        var geographicNorth;\r\n\r\n        var rectangle = options.rectangle;\r\n        if (!defined(rectangle)) {\r\n            if (isGeographic) {\r\n                geographicWest = toRadians(nativeRectangle.west);\r\n                geographicSouth = toRadians(nativeRectangle.south);\r\n                geographicEast = toRadians(nativeRectangle.east);\r\n                geographicNorth = toRadians(nativeRectangle.north);\r\n            } else {\r\n                geographicWest = nativeRectangle.west * oneOverGlobeSemimajorAxis;\r\n                geographicSouth = piOverTwo - (2.0 * atan(exp(-nativeRectangle.south * oneOverGlobeSemimajorAxis)));\r\n                geographicEast = nativeRectangle.east * oneOverGlobeSemimajorAxis;\r\n                geographicNorth = piOverTwo - (2.0 * atan(exp(-nativeRectangle.north * oneOverGlobeSemimajorAxis)));\r\n            }\r\n        } else {\r\n            geographicWest = rectangle.west;\r\n            geographicSouth = rectangle.south;\r\n            geographicEast = rectangle.east;\r\n            geographicNorth = rectangle.north;\r\n        }\r\n\r\n        var relativeToCenter = options.relativeToCenter;\r\n        var hasRelativeToCenter = defined(relativeToCenter);\r\n        relativeToCenter = hasRelativeToCenter ? relativeToCenter : Cartesian3.ZERO;\r\n        var exaggeration = defaultValue(options.exaggeration, 1.0);\r\n        var includeWebMercatorT = defaultValue(options.includeWebMercatorT, false);\r\n\r\n        var structure = defaultValue(options.structure, HeightmapTessellator.DEFAULT_STRUCTURE);\r\n        var heightScale = defaultValue(structure.heightScale, HeightmapTessellator.DEFAULT_STRUCTURE.heightScale);\r\n        var heightOffset = defaultValue(structure.heightOffset, HeightmapTessellator.DEFAULT_STRUCTURE.heightOffset);\r\n        var elementsPerHeight = defaultValue(structure.elementsPerHeight, HeightmapTessellator.DEFAULT_STRUCTURE.elementsPerHeight);\r\n        var stride = defaultValue(structure.stride, HeightmapTessellator.DEFAULT_STRUCTURE.stride);\r\n        var elementMultiplier = defaultValue(structure.elementMultiplier, HeightmapTessellator.DEFAULT_STRUCTURE.elementMultiplier);\r\n        var isBigEndian = defaultValue(structure.isBigEndian, HeightmapTessellator.DEFAULT_STRUCTURE.isBigEndian);\r\n\r\n        var rectangleWidth = Rectangle.computeWidth(nativeRectangle);\r\n        var rectangleHeight = Rectangle.computeHeight(nativeRectangle);\r\n\r\n        var granularityX = rectangleWidth / (width - 1);\r\n        var granularityY = rectangleHeight / (height - 1);\r\n\r\n\t\tif (!isGeographic) {\r\n            rectangleWidth *= oneOverGlobeSemimajorAxis;\r\n            rectangleHeight *= oneOverGlobeSemimajorAxis;\r\n        }\r\n\r\n        var radiiSquared = ellipsoid.radiiSquared;\r\n        var radiiSquaredX = radiiSquared.x;\r\n        var radiiSquaredY = radiiSquared.y;\r\n        var radiiSquaredZ = radiiSquared.z;\r\n\r\n        var minimumHeight = 65536.0;\r\n        var maximumHeight = -65536.0;\r\n\r\n        var fromENU = Transforms.eastNorthUpToFixedFrame(relativeToCenter, ellipsoid);\r\n        var toENU = Matrix4.inverseTransformation(fromENU, matrix4Scratch);\r\n\r\n        var southMercatorY;\r\n        var oneOverMercatorHeight;\r\n        if (includeWebMercatorT) {\r\n            southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicSouth);\r\n            oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicNorth) - southMercatorY);\r\n        }\r\n\r\n        var minimum = minimumScratch;\r\n        minimum.x = Number.POSITIVE_INFINITY;\r\n        minimum.y = Number.POSITIVE_INFINITY;\r\n        minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n        var maximum = maximumScratch;\r\n        maximum.x = Number.NEGATIVE_INFINITY;\r\n        maximum.y = Number.NEGATIVE_INFINITY;\r\n        maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n        var hMin = Number.POSITIVE_INFINITY;\r\n\r\n        var arrayWidth = width + (skirtHeight > 0.0 ? 2.0 : 0.0);\r\n        var arrayHeight = height + (skirtHeight > 0.0 ? 2.0 : 0.0);\r\n        var size = arrayWidth * arrayHeight;\r\n        var positions = new Array(size);\r\n        var heights = new Array(size);\r\n        var uvs = new Array(size);\r\n        var webMercatorTs = includeWebMercatorT ? new Array(size) : [];\r\n\r\n        var startRow = 0;\r\n        var endRow = height;\r\n        var startCol = 0;\r\n        var endCol = width;\r\n\r\n        if (skirtHeight > 0) {\r\n            --startRow;\r\n            ++endRow;\r\n            --startCol;\r\n            ++endCol;\r\n        }\r\n\r\n        var index = 0;\r\n\r\n        for (var rowIndex = startRow; rowIndex < endRow; ++rowIndex) {\r\n            var row = rowIndex;\r\n            if (row < 0) {\r\n                row = 0;\r\n            }\r\n            if (row >= height) {\r\n                row = height - 1;\r\n            }\r\n\r\n            var latitude = nativeRectangle.north - granularityY * row;\r\n\r\n            if (!isGeographic) {\r\n                latitude = piOverTwo - (2.0 * atan(exp(-latitude * oneOverGlobeSemimajorAxis)));\r\n            } else {\r\n                latitude = toRadians(latitude);\r\n            }\r\n\r\n            var cosLatitude = cos(latitude);\r\n            var nZ = sin(latitude);\r\n            var kZ = radiiSquaredZ * nZ;\r\n\r\n            var v = (latitude - geographicSouth) / (geographicNorth - geographicSouth);\r\n            v = CesiumMath.clamp(v, 0.0, 1.0);\r\n\r\n            var webMercatorT;\r\n            if (includeWebMercatorT) {\r\n                webMercatorT = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;\r\n            }\r\n\r\n            for (var colIndex = startCol; colIndex < endCol; ++colIndex) {\r\n                var col = colIndex;\r\n                if (col < 0) {\r\n                    col = 0;\r\n                }\r\n                if (col >= width) {\r\n                    col = width - 1;\r\n                }\r\n\r\n                var longitude = nativeRectangle.west + granularityX * col;\r\n\r\n                if (!isGeographic) {\r\n                    longitude = longitude * oneOverGlobeSemimajorAxis;\r\n                } else {\r\n                    longitude = toRadians(longitude);\r\n                }\r\n\r\n                var terrainOffset = row * (width * stride) + col * stride;\r\n\r\n                var heightSample;\r\n                if (elementsPerHeight === 1) {\r\n                    heightSample = heightmap[terrainOffset];\r\n                } else {\r\n                    heightSample = 0;\r\n\r\n                    var elementOffset;\r\n                    if (isBigEndian) {\r\n                        for (elementOffset = 0; elementOffset < elementsPerHeight; ++elementOffset) {\r\n                            heightSample = (heightSample * elementMultiplier) + heightmap[terrainOffset + elementOffset];\r\n                        }\r\n                    } else {\r\n                        for (elementOffset = elementsPerHeight - 1; elementOffset >= 0; --elementOffset) {\r\n                            heightSample = (heightSample * elementMultiplier) + heightmap[terrainOffset + elementOffset];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                heightSample = (heightSample * heightScale + heightOffset) * exaggeration;\r\n\r\n                var u = (longitude - geographicWest) / (geographicEast - geographicWest);\r\n                u = CesiumMath.clamp(u, 0.0, 1.0);\r\n                uvs[index] = new Cartesian2(u, v);\r\n\r\n                maximumHeight = Math.max(maximumHeight, heightSample);\r\n                minimumHeight = Math.min(minimumHeight, heightSample);\r\n\r\n                if (colIndex !== col || rowIndex !== row) {\r\n                    var percentage = 0.00001;\r\n                    if (colIndex < 0) {\r\n                        longitude -= percentage * rectangleWidth;\r\n                    } else {\r\n                        longitude += percentage * rectangleWidth;\r\n                    }\r\n                    if (rowIndex < 0) {\r\n                        latitude += percentage * rectangleHeight;\r\n                    } else {\r\n                        latitude -= percentage * rectangleHeight;\r\n                    }\r\n\r\n                    cosLatitude = cos(latitude);\r\n                    nZ = sin(latitude);\r\n                    kZ = radiiSquaredZ * nZ;\r\n                    heightSample -= skirtHeight;\r\n                }\r\n\r\n                var nX = cosLatitude * cos(longitude);\r\n                var nY = cosLatitude * sin(longitude);\r\n\r\n                var kX = radiiSquaredX * nX;\r\n                var kY = radiiSquaredY * nY;\r\n\r\n                var gamma = sqrt((kX * nX) + (kY * nY) + (kZ * nZ));\r\n                var oneOverGamma = 1.0 / gamma;\r\n\r\n                var rSurfaceX = kX * oneOverGamma;\r\n                var rSurfaceY = kY * oneOverGamma;\r\n                var rSurfaceZ = kZ * oneOverGamma;\r\n\r\n                var position = new Cartesian3();\r\n                position.x = rSurfaceX + nX * heightSample;\r\n                position.y = rSurfaceY + nY * heightSample;\r\n                position.z = rSurfaceZ + nZ * heightSample;\r\n\r\n                positions[index] = position;\r\n                heights[index] = heightSample;\r\n\r\n                if (includeWebMercatorT) {\r\n                    webMercatorTs[index] = webMercatorT;\r\n                }\r\n\r\n                index++;\r\n\r\n                Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\r\n\r\n                Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\r\n                Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\r\n                hMin = Math.min(hMin, heightSample);\r\n            }\r\n        }\r\n\r\n        var boundingSphere3D = BoundingSphere.fromPoints(positions);\r\n        var orientedBoundingBox;\r\n        if (defined(rectangle) && rectangle.width < CesiumMath.PI_OVER_TWO + CesiumMath.EPSILON5) {\r\n            // Here, rectangle.width < pi/2, and rectangle.height < pi\r\n            // (though it would still work with rectangle.width up to pi)\r\n            orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, ellipsoid);\r\n        }\r\n\r\n        var occludeePointInScaledSpace;\r\n        if (hasRelativeToCenter) {\r\n            var occluder = new EllipsoidalOccluder(ellipsoid);\r\n            occludeePointInScaledSpace = occluder.computeHorizonCullingPoint(relativeToCenter, positions);\r\n        }\r\n\r\n        var aaBox = new AxisAlignedBoundingBox(minimum, maximum, relativeToCenter);\r\n        var encoding = new TerrainEncoding(aaBox, hMin, maximumHeight, fromENU, false, includeWebMercatorT);\r\n        var vertices = new Float32Array(size * encoding.getStride());\r\n\r\n        var bufferIndex = 0;\r\n        for (var j = 0; j < size; ++j) {\r\n            bufferIndex = encoding.encode(vertices, bufferIndex, positions[j], uvs[j], heights[j], undefined, webMercatorTs[j]);\r\n        }\r\n\r\n        return {\r\n            vertices : vertices,\r\n            maximumHeight : maximumHeight,\r\n            minimumHeight : minimumHeight,\r\n            encoding : encoding,\r\n            boundingSphere3D : boundingSphere3D,\r\n            orientedBoundingBox : orientedBoundingBox,\r\n            occludeePointInScaledSpace : occludeePointInScaledSpace\r\n        };\r\n    };\r\n\r\n    return HeightmapTessellator;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/HeightmapTessellator.js\n// module id = 304\n// module chunks = 0","define([\r\n        '../Core/AttributeCompression',\r\n        '../Core/AxisAlignedBoundingBox',\r\n        '../Core/BoundingSphere',\r\n        '../Core/Cartesian2',\r\n        '../Core/Cartesian3',\r\n        '../Core/Cartographic',\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/IndexDatatype',\r\n        '../Core/Math',\r\n        '../Core/Matrix4',\r\n        '../Core/OrientedBoundingBox',\r\n        '../Core/TerrainEncoding',\r\n        '../Core/Transforms',\r\n        '../Core/WebMercatorProjection',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        AttributeCompression,\r\n        AxisAlignedBoundingBox,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        defined,\r\n        Ellipsoid,\r\n        IndexDatatype,\r\n        CesiumMath,\r\n        Matrix4,\r\n        OrientedBoundingBox,\r\n        TerrainEncoding,\r\n        Transforms,\r\n        WebMercatorProjection,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    var maxShort = 32767;\r\n\r\n    var cartesian3Scratch = new Cartesian3();\r\n    var scratchMinimum = new Cartesian3();\r\n    var scratchMaximum = new Cartesian3();\r\n    var cartographicScratch = new Cartographic();\r\n    var toPack = new Cartesian2();\r\n    var scratchNormal = new Cartesian3();\r\n    var scratchToENU = new Matrix4();\r\n    var scratchFromENU = new Matrix4();\r\n\r\n    function createVerticesFromQuantizedTerrainMesh(parameters, transferableObjects) {\r\n        var quantizedVertices = parameters.quantizedVertices;\r\n        var quantizedVertexCount = quantizedVertices.length / 3;\r\n        var octEncodedNormals = parameters.octEncodedNormals;\r\n        var edgeVertexCount = parameters.westIndices.length + parameters.eastIndices.length +\r\n                              parameters.southIndices.length + parameters.northIndices.length;\r\n        var includeWebMercatorT = parameters.includeWebMercatorT;\r\n\r\n        var rectangle = parameters.rectangle;\r\n        var west = rectangle.west;\r\n        var south = rectangle.south;\r\n        var east = rectangle.east;\r\n        var north = rectangle.north;\r\n\r\n        var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n\r\n        var exaggeration = parameters.exaggeration;\r\n        var minimumHeight = parameters.minimumHeight * exaggeration;\r\n        var maximumHeight = parameters.maximumHeight * exaggeration;\r\n\r\n        var center = parameters.relativeToCenter;\r\n        var fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid);\r\n        var toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\r\n\r\n        var southMercatorY;\r\n        var oneOverMercatorHeight;\r\n        if (includeWebMercatorT) {\r\n            southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(south);\r\n            oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(north) - southMercatorY);\r\n        }\r\n\r\n        var uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);\r\n        var vBuffer = quantizedVertices.subarray(quantizedVertexCount, 2 * quantizedVertexCount);\r\n        var heightBuffer = quantizedVertices.subarray(quantizedVertexCount * 2, 3 * quantizedVertexCount);\r\n        var hasVertexNormals = defined(octEncodedNormals);\r\n\r\n        var uvs = new Array(quantizedVertexCount);\r\n        var heights = new Array(quantizedVertexCount);\r\n        var positions = new Array(quantizedVertexCount);\r\n        var webMercatorTs = includeWebMercatorT ? new Array(quantizedVertexCount) : [];\r\n\r\n        var minimum = scratchMinimum;\r\n        minimum.x = Number.POSITIVE_INFINITY;\r\n        minimum.y = Number.POSITIVE_INFINITY;\r\n        minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n        var maximum = scratchMaximum;\r\n        maximum.x = Number.NEGATIVE_INFINITY;\r\n        maximum.y = Number.NEGATIVE_INFINITY;\r\n        maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n        var minLongitude = Number.POSITIVE_INFINITY;\r\n        var maxLongitude = Number.NEGATIVE_INFINITY;\r\n        var minLatitude = Number.POSITIVE_INFINITY;\r\n        var maxLatitude = Number.NEGATIVE_INFINITY;\r\n\r\n        for (var i = 0; i < quantizedVertexCount; ++i) {\r\n            var u = uBuffer[i] / maxShort;\r\n            var v = vBuffer[i] / maxShort;\r\n            var height = CesiumMath.lerp(minimumHeight, maximumHeight, heightBuffer[i] / maxShort);\r\n\r\n            cartographicScratch.longitude = CesiumMath.lerp(west, east, u);\r\n            cartographicScratch.latitude = CesiumMath.lerp(south, north, v);\r\n            cartographicScratch.height = height;\r\n\r\n            minLongitude = Math.min(cartographicScratch.longitude, minLongitude);\r\n            maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);\r\n            minLatitude = Math.min(cartographicScratch.latitude, minLatitude);\r\n            maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);\r\n\r\n            var position = ellipsoid.cartographicToCartesian(cartographicScratch);\r\n\r\n            uvs[i] = new Cartesian2(u, v);\r\n            heights[i] = height;\r\n            positions[i] = position;\r\n\r\n            if (includeWebMercatorT) {\r\n                webMercatorTs[i] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\r\n            }\r\n\r\n            Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\r\n\r\n            Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\r\n            Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\r\n        }\r\n\r\n        var orientedBoundingBox;\r\n        var boundingSphere;\r\n\r\n        if (exaggeration !== 1.0) {\r\n            // Bounding volumes and horizon culling point need to be recomputed since the tile payload assumes no exaggeration.\r\n            boundingSphere = BoundingSphere.fromPoints(positions);\r\n            orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, ellipsoid);\r\n        }\r\n\r\n        var hMin = minimumHeight;\r\n        hMin = Math.min(hMin, findMinMaxSkirts(parameters.westIndices, parameters.westSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n        hMin = Math.min(hMin, findMinMaxSkirts(parameters.southIndices, parameters.southSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n        hMin = Math.min(hMin, findMinMaxSkirts(parameters.eastIndices, parameters.eastSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n        hMin = Math.min(hMin, findMinMaxSkirts(parameters.northIndices, parameters.northSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n\r\n        var aaBox = new AxisAlignedBoundingBox(minimum, maximum, center);\r\n        var encoding = new TerrainEncoding(aaBox, hMin, maximumHeight, fromENU, hasVertexNormals, includeWebMercatorT);\r\n        var vertexStride = encoding.getStride();\r\n        var size = quantizedVertexCount * vertexStride + edgeVertexCount * vertexStride;\r\n        var vertexBuffer = new Float32Array(size);\r\n\r\n        var bufferIndex = 0;\r\n        for (var j = 0; j < quantizedVertexCount; ++j) {\r\n            if (hasVertexNormals) {\r\n                var n = j * 2.0;\r\n                toPack.x = octEncodedNormals[n];\r\n                toPack.y = octEncodedNormals[n + 1];\r\n\r\n                if (exaggeration !== 1.0) {\r\n                    var normal = AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal);\r\n                    var fromENUNormal = Transforms.eastNorthUpToFixedFrame(positions[j], ellipsoid, scratchFromENU);\r\n                    var toENUNormal = Matrix4.inverseTransformation(fromENUNormal, scratchToENU);\r\n\r\n                    Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\r\n                    normal.z *= exaggeration;\r\n                    Cartesian3.normalize(normal, normal);\r\n\r\n                    Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\r\n                    Cartesian3.normalize(normal, normal);\r\n\r\n                    AttributeCompression.octEncode(normal, toPack);\r\n                }\r\n            }\r\n\r\n            bufferIndex = encoding.encode(vertexBuffer, bufferIndex, positions[j], uvs[j], heights[j], toPack, webMercatorTs[j]);\r\n        }\r\n\r\n        var edgeTriangleCount = Math.max(0, (edgeVertexCount - 4) * 2);\r\n        var indexBufferLength = parameters.indices.length + edgeTriangleCount * 3;\r\n        var indexBuffer = IndexDatatype.createTypedArray(quantizedVertexCount + edgeVertexCount, indexBufferLength);\r\n        indexBuffer.set(parameters.indices, 0);\r\n\r\n        var percentage = 0.0001;\r\n        var lonOffset = (maxLongitude - minLongitude) * percentage;\r\n        var latOffset = (maxLatitude - minLatitude) * percentage;\r\n        var westLongitudeOffset = -lonOffset;\r\n        var westLatitudeOffset = 0.0;\r\n        var eastLongitudeOffset = lonOffset;\r\n        var eastLatitudeOffset = 0.0;\r\n        var northLongitudeOffset = 0.0;\r\n        var northLatitudeOffset = latOffset;\r\n        var southLongitudeOffset = 0.0;\r\n        var southLatitudeOffset = -latOffset;\r\n\r\n        // Add skirts.\r\n        var vertexBufferIndex = quantizedVertexCount * vertexStride;\r\n        var indexBufferIndex = parameters.indices.length;\r\n        indexBufferIndex = addSkirt(vertexBuffer, vertexBufferIndex, indexBuffer, indexBufferIndex, parameters.westIndices, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.westSkirtHeight, true, exaggeration, southMercatorY, oneOverMercatorHeight, westLongitudeOffset, westLatitudeOffset);\r\n        vertexBufferIndex += parameters.westIndices.length * vertexStride;\r\n        indexBufferIndex = addSkirt(vertexBuffer, vertexBufferIndex, indexBuffer, indexBufferIndex, parameters.southIndices, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.southSkirtHeight, false, exaggeration, southMercatorY, oneOverMercatorHeight, southLongitudeOffset, southLatitudeOffset);\r\n        vertexBufferIndex += parameters.southIndices.length * vertexStride;\r\n        indexBufferIndex = addSkirt(vertexBuffer, vertexBufferIndex, indexBuffer, indexBufferIndex, parameters.eastIndices, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.eastSkirtHeight, false, exaggeration, southMercatorY, oneOverMercatorHeight, eastLongitudeOffset, eastLatitudeOffset);\r\n        vertexBufferIndex += parameters.eastIndices.length * vertexStride;\r\n        addSkirt(vertexBuffer, vertexBufferIndex, indexBuffer, indexBufferIndex, parameters.northIndices, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.northSkirtHeight, true, exaggeration, southMercatorY, oneOverMercatorHeight, northLongitudeOffset, northLatitudeOffset);\r\n\r\n        transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer);\r\n\r\n        return {\r\n            vertices : vertexBuffer.buffer,\r\n            indices : indexBuffer.buffer,\r\n            vertexStride : vertexStride,\r\n            center : center,\r\n            minimumHeight : minimumHeight,\r\n            maximumHeight : maximumHeight,\r\n            boundingSphere : boundingSphere,\r\n            orientedBoundingBox : orientedBoundingBox,\r\n            encoding : encoding,\r\n            skirtIndex : parameters.indices.length\r\n        };\r\n    }\r\n\r\n    function findMinMaxSkirts(edgeIndices, edgeHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum) {\r\n        var hMin = Number.POSITIVE_INFINITY;\r\n\r\n        var north = rectangle.north;\r\n        var south = rectangle.south;\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var length = edgeIndices.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            var index = edgeIndices[i];\r\n            var h = heights[index];\r\n            var uv = uvs[index];\r\n\r\n            cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x);\r\n            cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y);\r\n            cartographicScratch.height = h - edgeHeight;\r\n\r\n            var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n            Matrix4.multiplyByPoint(toENU, position, position);\r\n\r\n            Cartesian3.minimumByComponent(position, minimum, minimum);\r\n            Cartesian3.maximumByComponent(position, maximum, maximum);\r\n\r\n            hMin = Math.min(hMin, cartographicScratch.height);\r\n        }\r\n        return hMin;\r\n    }\r\n\r\n    function addSkirt(vertexBuffer, vertexBufferIndex, indexBuffer, indexBufferIndex, edgeVertices, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, skirtLength, isWestOrNorthEdge, exaggeration, southMercatorY, oneOverMercatorHeight, longitudeOffset, latitudeOffset) {\r\n        var start, end, increment;\r\n        if (isWestOrNorthEdge) {\r\n            start = edgeVertices.length - 1;\r\n            end = -1;\r\n            increment = -1;\r\n        } else {\r\n            start = 0;\r\n            end = edgeVertices.length;\r\n            increment = 1;\r\n        }\r\n\r\n        var previousIndex = -1;\r\n\r\n        var hasVertexNormals = defined(octEncodedNormals);\r\n        var vertexStride = encoding.getStride();\r\n        var vertexIndex = vertexBufferIndex / vertexStride;\r\n\r\n        var north = rectangle.north;\r\n        var south = rectangle.south;\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        for (var i = start; i !== end; i += increment) {\r\n            var index = edgeVertices[i];\r\n            var h = heights[index];\r\n            var uv = uvs[index];\r\n\r\n            cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x) + longitudeOffset;\r\n            cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y) + latitudeOffset;\r\n            cartographicScratch.height = h - skirtLength;\r\n\r\n            var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n\r\n            if (hasVertexNormals) {\r\n                var n = index * 2.0;\r\n                toPack.x = octEncodedNormals[n];\r\n                toPack.y = octEncodedNormals[n + 1];\r\n\r\n                if (exaggeration !== 1.0) {\r\n                    var normal = AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal);\r\n                    var fromENUNormal = Transforms.eastNorthUpToFixedFrame(cartesian3Scratch, ellipsoid, scratchFromENU);\r\n                    var toENUNormal = Matrix4.inverseTransformation(fromENUNormal, scratchToENU);\r\n\r\n                    Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\r\n                    normal.z *= exaggeration;\r\n                    Cartesian3.normalize(normal, normal);\r\n\r\n                    Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\r\n                    Cartesian3.normalize(normal, normal);\r\n\r\n                    AttributeCompression.octEncode(normal, toPack);\r\n                }\r\n            }\r\n\r\n            var webMercatorT;\r\n            if (encoding.hasWebMercatorT) {\r\n                webMercatorT = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\r\n            }\r\n\r\n            vertexBufferIndex = encoding.encode(vertexBuffer, vertexBufferIndex, position, uv, cartographicScratch.height, toPack, webMercatorT);\r\n\r\n            if (previousIndex !== -1) {\r\n                indexBuffer[indexBufferIndex++] = previousIndex;\r\n                indexBuffer[indexBufferIndex++] = vertexIndex - 1;\r\n                indexBuffer[indexBufferIndex++] = index;\r\n\r\n                indexBuffer[indexBufferIndex++] = vertexIndex - 1;\r\n                indexBuffer[indexBufferIndex++] = vertexIndex;\r\n                indexBuffer[indexBufferIndex++] = index;\r\n            }\r\n\r\n            previousIndex = index;\r\n            ++vertexIndex;\r\n        }\r\n\r\n        return indexBufferIndex;\r\n    }\r\n\r\n    return createTaskProcessorWorker(createVerticesFromQuantizedTerrainMesh);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/createVerticesFromQuantizedTerrainMesh.js\n// module id = 305\n// module chunks = 0","define([\r\n        '../Core/ComponentDatatype',\r\n        '../Core/defined',\r\n        '../Core/IndexDatatype',\r\n        '../Core/RuntimeError',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        ComponentDatatype,\r\n        defined,\r\n        IndexDatatype,\r\n        RuntimeError,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    var draco;\r\n\r\n    function decodeIndexArray(dracoGeometry, dracoDecoder) {\r\n        var numPoints = dracoGeometry.num_points();\r\n        var numFaces = dracoGeometry.num_faces();\r\n        var faceIndices = new draco.DracoInt32Array();\r\n        var numIndices = numFaces * 3;\r\n        var indexArray = IndexDatatype.createTypedArray(numPoints, numIndices);\r\n\r\n        var offset = 0;\r\n        for (var i = 0; i < numFaces; ++i) {\r\n            dracoDecoder.GetFaceFromMesh(dracoGeometry, i, faceIndices);\r\n\r\n            indexArray[offset + 0] = faceIndices.GetValue(0);\r\n            indexArray[offset + 1] = faceIndices.GetValue(1);\r\n            indexArray[offset + 2] = faceIndices.GetValue(2);\r\n            offset += 3;\r\n        }\r\n\r\n        draco.destroy(faceIndices);\r\n\r\n        return {\r\n            typedArray : indexArray,\r\n            numberOfIndices : numIndices\r\n        };\r\n    }\r\n\r\n    function decodeQuantizedDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, quantization, vertexArrayLength) {\r\n        var vertexArray;\r\n        var attributeData;\r\n        if (quantization.quantizationBits <= 8) {\r\n            attributeData = new draco.DracoUInt8Array();\r\n            vertexArray = new Uint8Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n        } else {\r\n            attributeData = new draco.DracoUInt16Array();\r\n            vertexArray = new Uint16Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n        }\r\n\r\n        for (var i = 0; i < vertexArrayLength; ++i) {\r\n            vertexArray[i] = attributeData.GetValue(i);\r\n        }\r\n\r\n        draco.destroy(attributeData);\r\n        return vertexArray;\r\n    }\r\n\r\n    function decodeDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, vertexArrayLength) {\r\n        var vertexArray;\r\n        var attributeData;\r\n\r\n        // Some attribute types are casted down to 32 bit since Draco only returns 32 bit values\r\n        switch (dracoAttribute.data_type()) {\r\n            case 1: case 11: // DT_INT8 or DT_BOOL\r\n                attributeData = new draco.DracoInt8Array();\r\n                vertexArray = new Int8Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 2: // DT_UINT8\r\n                attributeData = new draco.DracoUInt8Array();\r\n                vertexArray = new Uint8Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 3: // DT_INT16\r\n                attributeData = new draco.DracoInt16Array();\r\n                vertexArray = new Int16Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 4: // DT_UINT16\r\n                attributeData = new draco.DracoUInt16Array();\r\n                vertexArray = new Uint16Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 5: case 7: // DT_INT32 or DT_INT64\r\n                attributeData = new draco.DracoInt32Array();\r\n                vertexArray = new Int32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt32ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 6: case 8: // DT_UINT32 or DT_UINT64\r\n                attributeData = new draco.DracoUInt32Array();\r\n                vertexArray = new Uint32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt32ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 9: case 10: // DT_FLOAT32 or DT_FLOAT64\r\n                attributeData = new draco.DracoFloat32Array();\r\n                vertexArray = new Float32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeFloatForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n        }\r\n\r\n        for (var i = 0; i < vertexArrayLength; ++i) {\r\n            vertexArray[i] = attributeData.GetValue(i);\r\n        }\r\n\r\n        draco.destroy(attributeData);\r\n        return vertexArray;\r\n    }\r\n\r\n    function decodeAttribute(dracoGeometry, dracoDecoder, dracoAttribute) {\r\n        var numPoints = dracoGeometry.num_points();\r\n        var numComponents = dracoAttribute.num_components();\r\n\r\n        var quantization;\r\n        var transform = new draco.AttributeQuantizationTransform();\r\n        if (transform.InitFromAttribute(dracoAttribute)) {\r\n            var minValues = new Array(numComponents);\r\n            for (var i = 0; i < numComponents; ++i) {\r\n                minValues[i] = transform.min_value(i);\r\n            }\r\n            quantization = {\r\n                quantizationBits : transform.quantization_bits(),\r\n                minValues : minValues,\r\n                range : transform.range(),\r\n                octEncoded : false\r\n            };\r\n        }\r\n        draco.destroy(transform);\r\n\r\n        transform = new draco.AttributeOctahedronTransform();\r\n        if (transform.InitFromAttribute(dracoAttribute)) {\r\n            quantization = {\r\n                quantizationBits : transform.quantization_bits(),\r\n                octEncoded : true\r\n            };\r\n        }\r\n        draco.destroy(transform);\r\n\r\n        var vertexArrayLength = numPoints * numComponents;\r\n        var vertexArray;\r\n        if (defined(quantization)) {\r\n            vertexArray = decodeQuantizedDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, quantization, vertexArrayLength);\r\n        } else {\r\n            vertexArray = decodeDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, vertexArrayLength);\r\n        }\r\n\r\n        var componentDatatype = ComponentDatatype.fromTypedArray(vertexArray);\r\n\r\n        return {\r\n            array : vertexArray,\r\n            data : {\r\n                componentsPerAttribute : numComponents,\r\n                componentDatatype : componentDatatype,\r\n                byteOffset : dracoAttribute.byte_offset(),\r\n                byteStride : ComponentDatatype.getSizeInBytes(componentDatatype) * numComponents,\r\n                normalized : dracoAttribute.normalized(),\r\n                quantization : quantization\r\n            }\r\n        };\r\n    }\r\n\r\n    function decodePointCloud(parameters) {\r\n        var dracoDecoder = new draco.Decoder();\r\n\r\n        if (parameters.dequantizeInShader) {\r\n            dracoDecoder.SkipAttributeTransform(draco.POSITION);\r\n            dracoDecoder.SkipAttributeTransform(draco.NORMAL);\r\n        }\r\n\r\n        var buffer = new draco.DecoderBuffer();\r\n        buffer.Init(parameters.buffer, parameters.buffer.length);\r\n\r\n        var geometryType = dracoDecoder.GetEncodedGeometryType(buffer);\r\n        if (geometryType !== draco.POINT_CLOUD) {\r\n            throw new RuntimeError('Draco geometry type must be POINT_CLOUD.');\r\n        }\r\n\r\n        var dracoPointCloud = new draco.PointCloud();\r\n        var decodingStatus = dracoDecoder.DecodeBufferToPointCloud(buffer, dracoPointCloud);\r\n        if (!decodingStatus.ok() || dracoPointCloud.ptr === 0) {\r\n            throw new RuntimeError('Error decoding draco point cloud: ' + decodingStatus.error_msg());\r\n        }\r\n\r\n        draco.destroy(buffer);\r\n\r\n        var result = {};\r\n\r\n        var properties = parameters.properties;\r\n        for (var propertyName in properties) {\r\n            if (properties.hasOwnProperty(propertyName)) {\r\n                var attributeId = properties[propertyName];\r\n                var dracoAttribute = dracoDecoder.GetAttributeByUniqueId(dracoPointCloud, attributeId);\r\n                result[propertyName] = decodeAttribute(dracoPointCloud, dracoDecoder, dracoAttribute);\r\n            }\r\n        }\r\n\r\n        draco.destroy(dracoPointCloud);\r\n        draco.destroy(dracoDecoder);\r\n\r\n        return result;\r\n    }\r\n\r\n    function decodePrimitive(parameters) {\r\n        var dracoDecoder = new draco.Decoder();\r\n\r\n        // Skip all parameter types except generic\r\n        var attributesToSkip = ['POSITION', 'NORMAL', 'COLOR', 'TEX_COORD'];\r\n        if (parameters.dequantizeInShader) {\r\n            for (var i = 0; i < attributesToSkip.length; ++i) {\r\n                dracoDecoder.SkipAttributeTransform(draco[attributesToSkip[i]]);\r\n            }\r\n        }\r\n\r\n        var bufferView = parameters.bufferView;\r\n        var buffer = new draco.DecoderBuffer();\r\n        buffer.Init(parameters.array, bufferView.byteLength);\r\n\r\n        var geometryType = dracoDecoder.GetEncodedGeometryType(buffer);\r\n        if (geometryType !== draco.TRIANGULAR_MESH) {\r\n            throw new RuntimeError('Unsupported draco mesh geometry type.');\r\n        }\r\n\r\n        var dracoGeometry = new draco.Mesh();\r\n        var decodingStatus = dracoDecoder.DecodeBufferToMesh(buffer, dracoGeometry);\r\n        if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\r\n            throw new RuntimeError('Error decoding draco mesh geometry: ' + decodingStatus.error_msg());\r\n        }\r\n\r\n        draco.destroy(buffer);\r\n\r\n        var attributeData = {};\r\n\r\n        var compressedAttributes = parameters.compressedAttributes;\r\n        for (var attributeName in compressedAttributes) {\r\n            if (compressedAttributes.hasOwnProperty(attributeName)) {\r\n                var compressedAttribute = compressedAttributes[attributeName];\r\n                var dracoAttribute = dracoDecoder.GetAttributeByUniqueId(dracoGeometry, compressedAttribute);\r\n                attributeData[attributeName] = decodeAttribute(dracoGeometry, dracoDecoder, dracoAttribute);\r\n            }\r\n        }\r\n\r\n        var result = {\r\n            indexArray : decodeIndexArray(dracoGeometry, dracoDecoder),\r\n            attributeData : attributeData\r\n        };\r\n\r\n        draco.destroy(dracoGeometry);\r\n        draco.destroy(dracoDecoder);\r\n\r\n        return result;\r\n    }\r\n\r\n    function decode(parameters) {\r\n        if (defined(parameters.primitive)) {\r\n            return decodePrimitive(parameters);\r\n        }\r\n        return decodePointCloud(parameters);\r\n    }\r\n\r\n    function initWorker(dracoModule) {\r\n        draco = dracoModule;\r\n        self.onmessage = createTaskProcessorWorker(decode);\r\n        self.postMessage(true);\r\n    }\r\n\r\n    //var reqWithContext = require.context('../ThirdParty', false, /.*\\.wasm/);\r\n\r\n    function decodeDraco(event) {\r\n        var data = event.data;\r\n\r\n        // Expect the first message to be to load a web assembly module\r\n        var wasmConfig = data.webAssemblyConfig;\r\n        if (defined(wasmConfig)) {\r\n            // Require and compile WebAssembly module, or use fallback if not supported\r\n            //return reqWithContext.ensure(wasmConfig.modulePath, function() {\r\n                var dracoModule = require('../ThirdParty/Workers/draco_wasm_wrapper')\r\n\r\n                if (defined(wasmConfig.wasmBinaryFile)) {\r\n                    if (!defined(dracoModule)) {\r\n                        dracoModule = self.DracoDecoderModule;\r\n                    }\r\n\r\n                    dracoModule(wasmConfig).then(function (compiledModule) {\r\n                        initWorker(compiledModule);\r\n                    });\r\n                } else {\r\n                    initWorker(dracoModule());\r\n                }\r\n            //}, 'Draco-Decode');\r\n        }\r\n    }\r\n\r\n    return decodeDraco;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/decodeDraco.js\n// module id = 306\n// module chunks = 0","var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||\"function\"==typeof Object.defineProperties?Object.defineProperty:function(d,f,n){d!=Array.prototype&&d!=Object.prototype&&(d[f]=n.value)};$jscomp.getGlobal=function(d){return\"undefined\"!=typeof window&&window===d?d:\"undefined\"!=typeof global&&null!=global?global:d};$jscomp.global=$jscomp.getGlobal(this);\r\n$jscomp.polyfill=function(d,f,n,w){if(f){n=$jscomp.global;d=d.split(\".\");for(w=0;w<d.length-1;w++){var g=d[w];g in n||(n[g]={});n=n[g]}d=d[d.length-1];w=n[d];f=f(w);f!=w&&null!=f&&$jscomp.defineProperty(n,d,{configurable:!0,writable:!0,value:f})}};$jscomp.polyfill(\"Math.imul\",function(d){return d?d:function(f,d){f=Number(f);d=Number(d);var n=f&65535,g=d&65535;return n*g+((f>>>16&65535)*g+n*(d>>>16&65535)<<16>>>0)|0}},\"es6\",\"es3\");\r\n$jscomp.polyfill(\"Math.clz32\",function(d){return d?d:function(f){f=Number(f)>>>0;if(0===f)return 32;var d=0;0===(f&4294901760)&&(f<<=16,d+=16);0===(f&4278190080)&&(f<<=8,d+=8);0===(f&4026531840)&&(f<<=4,d+=4);0===(f&3221225472)&&(f<<=2,d+=2);0===(f&2147483648)&&d++;return d}},\"es6\",\"es3\");$jscomp.polyfill(\"Math.trunc\",function(d){return d?d:function(d){d=Number(d);if(isNaN(d)||Infinity===d||-Infinity===d||0===d)return d;var f=Math.floor(Math.abs(d));return 0>d?-f:f}},\"es6\",\"es3\");\r\n$jscomp.SYMBOL_PREFIX=\"jscomp_symbol_\";$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(d){return $jscomp.SYMBOL_PREFIX+(d||\"\")+$jscomp.symbolCounter_++};\r\n$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var d=$jscomp.global.Symbol.iterator;d||(d=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol(\"iterator\"));\"function\"!=typeof Array.prototype[d]&&$jscomp.defineProperty(Array.prototype,d,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(d){var f=0;return $jscomp.iteratorPrototype(function(){return f<d.length?{done:!1,value:d[f++]}:{done:!0}})};\r\n$jscomp.iteratorPrototype=function(d){$jscomp.initSymbolIterator();d={next:d};d[$jscomp.global.Symbol.iterator]=function(){return this};return d};$jscomp.makeIterator=function(d){$jscomp.initSymbolIterator();var f=d[Symbol.iterator];return f?f.call(d):$jscomp.arrayIterator(d)};$jscomp.FORCE_POLYFILL_PROMISE=!1;\r\n$jscomp.polyfill(\"Promise\",function(d){function f(){this.batch_=null}function n(d){return d instanceof g?d:new g(function(f,D){f(d)})}if(d&&!$jscomp.FORCE_POLYFILL_PROMISE)return d;f.prototype.asyncExecute=function(d){null==this.batch_&&(this.batch_=[],this.asyncExecuteBatch_());this.batch_.push(d);return this};f.prototype.asyncExecuteBatch_=function(){var d=this;this.asyncExecuteFunction(function(){d.executeBatch_()})};var w=$jscomp.global.setTimeout;f.prototype.asyncExecuteFunction=function(d){w(d,\r\n0)};f.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var d=this.batch_;this.batch_=[];for(var f=0;f<d.length;++f){var g=d[f];delete d[f];try{g()}catch(la){this.asyncThrow_(la)}}}this.batch_=null};f.prototype.asyncThrow_=function(d){this.asyncExecuteFunction(function(){throw d;})};var g=function(d){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];var f=this.createResolveAndReject_();try{d(f.resolve,f.reject)}catch(u){f.reject(u)}};g.prototype.createResolveAndReject_=\r\nfunction(){function d(d){return function(D){g||(g=!0,d.call(f,D))}}var f=this,g=!1;return{resolve:d(this.resolveTo_),reject:d(this.reject_)}};g.prototype.resolveTo_=function(d){if(d===this)this.reject_(new TypeError(\"A Promise cannot resolve to itself\"));else if(d instanceof g)this.settleSameAsPromise_(d);else{a:switch(typeof d){case \"object\":var f=null!=d;break a;case \"function\":f=!0;break a;default:f=!1}f?this.resolveToNonPromiseObj_(d):this.fulfill_(d)}};g.prototype.resolveToNonPromiseObj_=function(d){var f=\r\nvoid 0;try{f=d.then}catch(u){this.reject_(u);return}\"function\"==typeof f?this.settleSameAsThenable_(f,d):this.fulfill_(d)};g.prototype.reject_=function(d){this.settle_(2,d)};g.prototype.fulfill_=function(d){this.settle_(1,d)};g.prototype.settle_=function(d,f){if(0!=this.state_)throw Error(\"Cannot settle(\"+d+\", \"+f|\"): Promise already settled in state\"+this.state_);this.state_=d;this.result_=f;this.executeOnSettledCallbacks_()};g.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var d=\r\nthis.onSettledCallbacks_,f=0;f<d.length;++f)d[f].call(),d[f]=null;this.onSettledCallbacks_=null}};var ma=new f;g.prototype.settleSameAsPromise_=function(d){var f=this.createResolveAndReject_();d.callWhenSettled_(f.resolve,f.reject)};g.prototype.settleSameAsThenable_=function(d,f){var g=this.createResolveAndReject_();try{d.call(f,g.resolve,g.reject)}catch(la){g.reject(la)}};g.prototype.then=function(d,f){function u(d,f){return\"function\"==typeof d?function(f){try{n(d(f))}catch(ea){D(ea)}}:f}var n,D,\r\nw=new g(function(d,f){n=d;D=f});this.callWhenSettled_(u(d,n),u(f,D));return w};g.prototype.catch=function(d){return this.then(void 0,d)};g.prototype.callWhenSettled_=function(d,f){function g(){switch(n.state_){case 1:d(n.result_);break;case 2:f(n.result_);break;default:throw Error(\"Unexpected state: \"+n.state_);}}var n=this;null==this.onSettledCallbacks_?ma.asyncExecute(g):this.onSettledCallbacks_.push(function(){ma.asyncExecute(g)})};g.resolve=n;g.reject=function(d){return new g(function(f,g){g(d)})};\r\ng.race=function(d){return new g(function(f,g){for(var u=$jscomp.makeIterator(d),w=u.next();!w.done;w=u.next())n(w.value).callWhenSettled_(f,g)})};g.all=function(d){var f=$jscomp.makeIterator(d),u=f.next();return u.done?n([]):new g(function(d,g){function w(f){return function(g){D[f]=g;Q--;0==Q&&d(D)}}var D=[],Q=0;do D.push(void 0),Q++,n(u.value).callWhenSettled_(w(D.length-1),g),u=f.next();while(!u.done)})};return g},\"es6\",\"es3\");\r\nvar DracoDecoderModule=function(d){function f(a,b){a||W(\"Assertion failed: \"+b)}function n(e,b){if(0===b||!e)return\"\";for(var c=0,l,d=0;;){l=T[e+d>>0];c|=l;if(0==l&&!b)break;d++;if(b&&d==b)break}b||(b=d);l=\"\";if(128>c){for(;0<b;)c=String.fromCharCode.apply(String,T.subarray(e,e+Math.min(b,1024))),l=l?l+c:c,e+=1024,b-=1024;return l}return a.UTF8ToString(e)}function w(a){return a.replace(/__Z[\\w\\d_]+/g,function(a){return a===a?a:a+\" [\"+a+\"]\"})}function g(){a:{var e=Error();if(!e.stack){try{throw Error(0);\r\n}catch(b){e=b}if(!e.stack){e=\"(no stack trace available)\";break a}}e=e.stack.toString()}a.extraStackTrace&&(e+=\"\\n\"+a.extraStackTrace());return w(e)}function ma(a,b){0<a%b&&(a+=b-a%b);return a}function D(){a.HEAP8=fa=new Int8Array(F);a.HEAP16=za=new Int16Array(F);a.HEAP32=x=new Int32Array(F);a.HEAPU8=T=new Uint8Array(F);a.HEAPU16=Oa=new Uint16Array(F);a.HEAPU32=Pa=new Uint32Array(F);a.HEAPF32=Qa=new Float32Array(F);a.HEAPF64=Ra=new Float64Array(F)}function Ma(){var e=a.usingWasm?Aa:Sa,b=2147483648-\r\ne;if(x[ba>>2]>b)return!1;var c=y;for(y=Math.max(y,ib);y<x[ba>>2];)y=536870912>=y?ma(2*y,e):Math.min(ma((3*y+2147483648)/4,e),b);e=a.reallocBuffer(y);if(!e||e.byteLength!=y)return y=c,!1;a.buffer=F=e;D();return!0}function u(e){for(;0<e.length;){var b=e.shift();if(\"function\"==typeof b)b();else{var c=b.func;\"number\"===typeof c?void 0===b.arg?a.dynCall_v(c):a.dynCall_vi(c,b.arg):c(void 0===b.arg?null:b.arg)}}}function la(e){ha++;a.monitorRunDependencies&&a.monitorRunDependencies(ha)}function Na(e){ha--;\r\na.monitorRunDependencies&&a.monitorRunDependencies(ha);0==ha&&(null!==Ba&&(clearInterval(Ba),Ba=null),sa&&(e=sa,sa=null,e()))}function na(){return!!na.uncaught_exception}function qa(){var e=A.last;if(!e)return(m.setTempRet0(0),0)|0;var b=A.infos[e],c=b.type;if(!c)return(m.setTempRet0(0),e)|0;var l=Array.prototype.slice.call(arguments);a.___cxa_is_pointer_type(c);qa.buffer||(qa.buffer=Ta(4));x[qa.buffer>>2]=e;e=qa.buffer;for(var d=0;d<l.length;d++)if(l[d]&&a.___cxa_can_catch(l[d],c,e))return e=x[e>>\r\n2],b.adjusted=e,(m.setTempRet0(l[d]),e)|0;e=x[e>>2];return(m.setTempRet0(c),e)|0}function Q(e,b){v.varargs=b;try{var c=v.get(),l=v.get(),d=v.get();e=0;Q.buffer||(Q.buffers=[null,[],[]],Q.printChar=function(b,c){var e=Q.buffers[b];f(e);if(0===c||10===c){b=1===b?a.print:a.printErr;a:{for(var l=c=0;e[l];)++l;if(16<l-c&&e.subarray&&Ua)c=Ua.decode(e.subarray(c,l));else for(l=\"\";;){var d=e[c++];if(!d){c=l;break a}if(d&128){var g=e[c++]&63;if(192==(d&224))l+=String.fromCharCode((d&31)<<6|g);else{var h=e[c++]&\r\n63;if(224==(d&240))d=(d&15)<<12|g<<6|h;else{var E=e[c++]&63;if(240==(d&248))d=(d&7)<<18|g<<12|h<<6|E;else{var k=e[c++]&63;if(248==(d&252))d=(d&3)<<24|g<<18|h<<12|E<<6|k;else{var ta=e[c++]&63;d=(d&1)<<30|g<<24|h<<18|E<<12|k<<6|ta}}}65536>d?l+=String.fromCharCode(d):(d-=65536,l+=String.fromCharCode(55296|d>>10,56320|d&1023))}}else l+=String.fromCharCode(d)}}b(c);e.length=0}else e.push(c)});for(b=0;b<d;b++){for(var h=x[l+8*b>>2],g=x[l+(8*b+4)>>2],k=0;k<g;k++)Q.printChar(c,T[h+k]);e+=g}return e}catch(Ca){return\"undefined\"!==\r\ntypeof FS&&Ca instanceof FS.ErrnoError||W(Ca),-Ca.errno}}function ra(e,b){ra.seen||(ra.seen={});e in ra.seen||(a.dynCall_v(b),ra.seen[e]=1)}function ea(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}function Da(e){function b(){if(!a.calledRun&&(a.calledRun=!0,!ua)){Va||(Va=!0,u(Wa));u(Xa);if(a.onRuntimeInitialized)a.onRuntimeInitialized();if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)Ya.unshift(a.postRun.shift());\r\nu(Ya)}}null===Za&&(Za=Date.now());if(!(0<ha)){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)$a.unshift(a.preRun.shift());u($a);0<ha||a.calledRun||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1);b()},1)):b())}}function W(e){if(a.onAbort)a.onAbort(e);void 0!==e?(a.print(e),a.printErr(e),e=JSON.stringify(e)):e=\"\";ua=!0;var b=\"abort(\"+e+\") at \"+g()+\"\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.\";\r\nab&&ab.forEach(function(a){b=a(b,e)});throw b;}function p(){}function t(a){return(a||p).__cache__}function X(a,b){var c=t(b),e=c[a];if(e)return e;e=Object.create((b||p).prototype);e.ptr=a;return c[a]=e}function Y(a){if(\"string\"===typeof a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);55296<=e&&57343>=e&&(e=65536+((e&1023)<<10)|a.charCodeAt(++c)&1023);127>=e?++b:b=2047>=e?b+2:65535>=e?b+3:2097151>=e?b+4:67108863>=e?b+5:b+6}b=Array(b+1);c=0;e=b.length;if(0<e){e=c+e-1;for(var d=0;d<a.length;++d){var f=\r\na.charCodeAt(d);55296<=f&&57343>=f&&(f=65536+((f&1023)<<10)|a.charCodeAt(++d)&1023);if(127>=f){if(c>=e)break;b[c++]=f}else{if(2047>=f){if(c+1>=e)break;b[c++]=192|f>>6}else{if(65535>=f){if(c+2>=e)break;b[c++]=224|f>>12}else{if(2097151>=f){if(c+3>=e)break;b[c++]=240|f>>18}else{if(67108863>=f){if(c+4>=e)break;b[c++]=248|f>>24}else{if(c+5>=e)break;b[c++]=252|f>>30;b[c++]=128|f>>24&63}b[c++]=128|f>>18&63}b[c++]=128|f>>12&63}b[c++]=128|f>>6&63}b[c++]=128|f&63}}b[c]=0}a=k.alloc(b,fa);k.copy(b,fa,a)}return a}\r\nfunction B(){throw\"cannot construct a Status, no constructor in IDL\";}function G(){this.ptr=lb();t(G)[this.ptr]=this}function H(){this.ptr=mb();t(H)[this.ptr]=this}function I(){this.ptr=nb();t(I)[this.ptr]=this}function J(){this.ptr=ob();t(J)[this.ptr]=this}function K(){this.ptr=pb();t(K)[this.ptr]=this}function q(){this.ptr=qb();t(q)[this.ptr]=this}function P(){this.ptr=rb();t(P)[this.ptr]=this}function z(){this.ptr=sb();t(z)[this.ptr]=this}function L(){this.ptr=tb();t(L)[this.ptr]=this}function r(){this.ptr=\r\nub();t(r)[this.ptr]=this}function M(){this.ptr=vb();t(M)[this.ptr]=this}function N(){this.ptr=wb();t(N)[this.ptr]=this}function Z(){this.ptr=xb();t(Z)[this.ptr]=this}function R(){this.ptr=yb();t(R)[this.ptr]=this}function h(){this.ptr=zb();t(h)[this.ptr]=this}function C(){this.ptr=Ab();t(C)[this.ptr]=this}function ca(){throw\"cannot construct a VoidPtr, no constructor in IDL\";}function O(){this.ptr=Bb();t(O)[this.ptr]=this}function S(){this.ptr=Cb();t(S)[this.ptr]=this}var a=d=d||{},bb=!1,cb=!1;a.onRuntimeInitialized=\r\nfunction(){bb=!0;if(cb&&\"function\"===typeof a.onModuleLoaded)a.onModuleLoaded(a)};a.onModuleParsed=function(){cb=!0;if(bb&&\"function\"===typeof a.onModuleLoaded)a.onModuleLoaded(a)};a.isVersionSupported=function(a){if(\"string\"!==typeof a)return!1;a=a.split(\".\");return 2>a.length||3<a.length?!1:1==a[0]&&0<=a[1]&&3>=a[1]?!0:0!=a[0]||10<a[1]?!1:!0};a||(a=(\"undefined\"!==typeof d?d:null)||{});var va={},da;for(da in a)a.hasOwnProperty(da)&&(va[da]=a[da]);var oa=!1,ka=!1,pa=!1,wa=!1;if(a.ENVIRONMENT)if(\"WEB\"===\r\na.ENVIRONMENT)oa=!0;else if(\"WORKER\"===a.ENVIRONMENT)ka=!0;else if(\"NODE\"===a.ENVIRONMENT)pa=!0;else if(\"SHELL\"===a.ENVIRONMENT)wa=!0;else throw Error(\"The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.\");else oa=\"object\"===typeof window,ka=\"function\"===typeof importScripts,pa=\"object\"===typeof process&&\"function\"===typeof require&&!oa&&!ka,wa=!oa&&!pa&&!ka;if(pa){a.print||(a.print=console.log);a.printErr||(a.printErr=console.warn);var Ea,Fa;a.read=function(a,\r\nb){Ea||(Ea=require(\"fs\"));Fa||(Fa=require(\"path\"));a=Fa.normalize(a);a=Ea.readFileSync(a);return b?a:a.toString()};a.readBinary=function(e){e=a.read(e,!0);e.buffer||(e=new Uint8Array(e));f(e.buffer);return e};a.thisProgram||(a.thisProgram=1<process.argv.length?process.argv[1].replace(/\\\\/g,\"/\"):\"unknown-program\");a.arguments=process.argv.slice(2);process.on(\"uncaughtException\",function(a){if(!(a instanceof ea))throw a;});a.inspect=function(){return\"[Emscripten Module object]\"}}else if(wa)a.print||\r\n(a.print=print),\"undefined\"!=typeof printErr&&(a.printErr=printErr),a.read=\"undefined\"!=typeof read?function(a){return read(a)}:function(){throw\"no read() available\";},a.readBinary=function(a){if(\"function\"===typeof readbuffer)return new Uint8Array(readbuffer(a));a=read(a,\"binary\");f(\"object\"===typeof a);return a},\"undefined\"!=typeof scriptArgs?a.arguments=scriptArgs:\"undefined\"!=typeof arguments&&(a.arguments=arguments),\"function\"===typeof quit&&(a.quit=function(a,b){quit(a)});else if(oa||ka)a.read=\r\nfunction(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},ka&&(a.readBinary=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),a.readAsync=function(a,b,c){var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\"arraybuffer\";e.onload=function(){200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)},\"undefined\"!=typeof arguments&&(a.arguments=arguments),\r\n\"undefined\"!==typeof console?(a.print||(a.print=function(a){console.log(a)}),a.printErr||(a.printErr=function(a){console.warn(a)})):a.print||(a.print=function(a){}),\"undefined\"===typeof a.setWindowTitle&&(a.setWindowTitle=function(a){document.title=a});else throw Error(\"Unknown runtime environment. Where are we?\");a.print||(a.print=function(){});a.printErr||(a.printErr=a.print);a.arguments||(a.arguments=[]);a.thisProgram||(a.thisProgram=\"./this.program\");a.quit||(a.quit=function(a,b){throw b;});a.print=\r\na.print;a.printErr=a.printErr;a.preRun=[];a.postRun=[];for(da in va)va.hasOwnProperty(da)&&(a[da]=va[da]);va=void 0;var m={setTempRet0:function(a){return tempRet0=a},getTempRet0:function(){return tempRet0},stackSave:function(){return U},stackRestore:function(a){U=a},getNativeTypeSize:function(a){switch(a){case \"i1\":case \"i8\":return 1;case \"i16\":return 2;case \"i32\":return 4;case \"i64\":return 8;case \"float\":return 4;case \"double\":return 8;default:return\"*\"===a[a.length-1]?m.QUANTUM_SIZE:\"i\"===a[0]?\r\n(a=parseInt(a.substr(1)),f(0===a%8),a/8):0}},getNativeFieldSize:function(a){return Math.max(m.getNativeTypeSize(a),m.QUANTUM_SIZE)},STACK_ALIGN:16,prepVararg:function(a,b){\"double\"===b||\"i64\"===b?a&7&&(f(4===(a&7)),a+=4):f(0===(a&3));return a},getAlignSize:function(a,b,c){return c||\"i64\"!=a&&\"double\"!=a?a?Math.min(b||(a?m.getNativeFieldSize(a):0),m.QUANTUM_SIZE):Math.min(b,8):8},dynCall:function(e,b,c){return c&&c.length?a[\"dynCall_\"+e].apply(null,[b].concat(c)):a[\"dynCall_\"+e].call(null,b)},functionPointers:[],\r\naddFunction:function(a){for(var b=0;b<m.functionPointers.length;b++)if(!m.functionPointers[b])return m.functionPointers[b]=a,2*(1+b);throw\"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\";},removeFunction:function(a){m.functionPointers[(a-2)/2]=null},warnOnce:function(e){m.warnOnce.shown||(m.warnOnce.shown={});m.warnOnce.shown[e]||(m.warnOnce.shown[e]=1,a.printErr(e))},funcWrappers:{},getFuncWrapper:function(a,b){if(a){f(b);m.funcWrappers[b]||(m.funcWrappers[b]=\r\n{});var c=m.funcWrappers[b];c[a]||(c[a]=1===b.length?function(){return m.dynCall(b,a)}:2===b.length?function(c){return m.dynCall(b,a,[c])}:function(){return m.dynCall(b,a,Array.prototype.slice.call(arguments))});return c[a]}},getCompilerSetting:function(a){throw\"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work\";},stackAlloc:function(a){var b=U;U=U+a|0;U=U+15&-16;return b},staticAlloc:function(a){var b=aa;aa=aa+a|0;aa=aa+15&\r\n-16;return b},dynamicAlloc:function(a){var b=x[ba>>2];a=(b+a+15|0)&-16;x[ba>>2]=a;return a>=y&&!Ma()?(x[ba>>2]=b,0):b},alignMemory:function(a,b){return Math.ceil(a/(b?b:16))*(b?b:16)},makeBigInt:function(a,b,c){return c?+(a>>>0)+4294967296*+(b>>>0):+(a>>>0)+4294967296*+(b|0)},GLOBAL_BASE:1024,QUANTUM_SIZE:4,__dummy__:0},ua=0,Ua=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\"undefined\"!==typeof TextDecoder&&new TextDecoder(\"utf-16le\");var Aa=65536,Sa=16777216,ib=16777216,fa,T,za,\r\nOa,x,Pa,Qa,Ra,aa,Ga,U,xa,Ha,ba;var Ia=aa=Ga=U=xa=Ha=ba=0;a.reallocBuffer||(a.reallocBuffer=function(a){try{if(ArrayBuffer.transfer)var b=ArrayBuffer.transfer(F,a);else{var c=fa;b=new ArrayBuffer(a);(new Int8Array(b)).set(c)}}catch(l){return!1}return Db(b)?b:!1});try{var Ja=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\"byteLength\").get);Ja(new ArrayBuffer(4))}catch(e){Ja=function(a){return a.byteLength}}var Ka=a.TOTAL_STACK||5242880,y=a.TOTAL_MEMORY||16777216;\r\ny<Ka&&a.printErr(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+y+\"! (TOTAL_STACK=\"+Ka+\")\");if(a.buffer)var F=a.buffer;else\"object\"===typeof WebAssembly&&\"function\"===typeof WebAssembly.Memory?(a.wasmMemory=new WebAssembly.Memory({initial:y/Aa}),F=a.wasmMemory.buffer):F=new ArrayBuffer(y);D();x[0]=1668509029;za[1]=25459;if(115!==T[2]||99!==T[3])throw\"Runtime error: expected the system to be little-endian!\";a.HEAP=void 0;a.buffer=F;a.HEAP8=fa;a.HEAP16=za;a.HEAP32=x;a.HEAPU8=T;a.HEAPU16=Oa;\r\na.HEAPU32=Pa;a.HEAPF32=Qa;a.HEAPF64=Ra;var $a=[],Wa=[],Xa=[],db=[],Ya=[],Va=!1;f(Math.imul&&Math.fround&&Math.clz32&&Math.trunc,\"this is a legacy browser, build with LEGACY_VM_SUPPORT\");var ha=0,Ba=null,sa=null;a.preloadedImages={};a.preloadedAudios={};var V=null;(function(){function e(){try{if(a.wasmBinary)return new Uint8Array(a.wasmBinary);if(a.readBinary)return a.readBinary(d);throw\"on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)\";\r\n}catch(jb){W(jb)}}function b(){return a.wasmBinary||!oa&&!ka||\"function\"!==typeof fetch?new Promise(function(a,b){a(e())}):fetch(d,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+d+\"'\";return a.arrayBuffer()}).catch(function(){return e()})}function c(c,e,l){function f(b,c){h=b.exports;if(h.memory){b=h.memory;c=a.buffer;b.byteLength<c.byteLength&&a.printErr(\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\");\r\nc=new Int8Array(c);var e=new Int8Array(b);V||c.set(e.subarray(a.STATIC_BASE,a.STATIC_BASE+a.STATIC_BUMP),a.STATIC_BASE);e.set(c);a.buffer=F=b;D()}a.asm=h;a.usingWasm=!0;Na(\"wasm-instantiate\")}function E(a){f(a.instance,a.module)}function k(c){b().then(function(a){return WebAssembly.instantiate(a,g)}).then(c).catch(function(b){a.printErr(\"failed to asynchronously prepare wasm: \"+b);W(b)})}if(\"object\"!==typeof WebAssembly)return a.printErr(\"no native wasm support detected\"),!1;if(!(a.wasmMemory instanceof\r\nWebAssembly.Memory))return a.printErr(\"no native wasm Memory in use\"),!1;e.memory=a.wasmMemory;g.global={NaN:NaN,Infinity:Infinity};g[\"global.Math\"]=c.Math;g.env=e;la(\"wasm-instantiate\");if(a.instantiateWasm)try{return a.instantiateWasm(g,f)}catch(kb){return a.printErr(\"Module.instantiateWasm callback failed with error: \"+kb),!1}a.wasmBinary||\"function\"!==typeof WebAssembly.instantiateStreaming||0===d.indexOf(\"data:\")||\"function\"!==typeof fetch?k(E):WebAssembly.instantiateStreaming(fetch(d,{credentials:\"same-origin\"}),\r\ng).then(E).catch(function(b){a.printErr(\"wasm streaming compile failed: \"+b);a.printErr(\"falling back to ArrayBuffer instantiation\");k(E)});return{}}var d=\"draco_decoder.wasm\",f=\"draco_decoder.temp.asm.js\";\"function\"===typeof a.locateFile&&(a.locateFile(\"draco_decoder.wast\"),d=a.locateFile(d),f=a.locateFile(f));var g={global:null,env:null,asm2wasm:{\"f64-rem\":function(a,b){return a%b},\"debugger\":function(){debugger}},parent:a},h=null;a.asmPreload=a.asm;var k=a.reallocBuffer;a.reallocBuffer=function(b){if(\"asmjs\"===\r\nm)var c=k(b);else a:{b=ma(b,a.usingWasm?Aa:Sa);var e=a.buffer.byteLength;if(a.usingWasm)try{c=-1!==a.wasmMemory.grow((b-e)/65536)?a.buffer=a.wasmMemory.buffer:null;break a}catch(Jd){c=null;break a}c=void 0}return c};var m=\"\";a.asm=function(b,e,d){if(!e.table){var l=a.wasmTableSize;void 0===l&&(l=1024);var f=a.wasmMaxTableSize;e.table=\"object\"===typeof WebAssembly&&\"function\"===typeof WebAssembly.Table?void 0!==f?new WebAssembly.Table({initial:l,maximum:f,element:\"anyfunc\"}):new WebAssembly.Table({initial:l,\r\nelement:\"anyfunc\"}):Array(l);a.wasmTable=e.table}e.memoryBase||(e.memoryBase=a.STATIC_BASE);e.tableBase||(e.tableBase=0);(b=c(b,e,d))||W(\"no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods\");return b}})();Ia=m.GLOBAL_BASE;aa=Ia+19104;Wa.push();V=null;a.STATIC_BASE=Ia;a.STATIC_BUMP=19104;var Eb=aa;aa+=16;var A={last:0,caught:[],infos:{},deAdjust:function(a){if(!a||A.infos[a])return a;\r\nfor(var b in A.infos)if(A.infos[b].adjusted===a)return b;return a},addRef:function(a){a&&A.infos[a].refcount++},decRef:function(e){if(e){var b=A.infos[e];f(0<b.refcount);b.refcount--;0!==b.refcount||b.rethrown||(b.destructor&&a.dynCall_vi(b.destructor,e),delete A.infos[e],___cxa_free_exception(e))}},clearRef:function(a){a&&(A.infos[a].refcount=0)}},v={varargs:0,get:function(a){v.varargs+=4;return x[v.varargs-4>>2]},getStr:function(){return n(v.get())},get64:function(){var a=v.get(),b=v.get();0<=a?\r\nf(0===b):f(-1===b);return a},getZero:function(){f(0===v.get())}},ya={},La=1;db.push(function(){var e=a._fflush;e&&e(0);if(e=Q.printChar){var b=Q.buffers;b[1].length&&e(1,10);b[2].length&&e(2,10)}});ba=m.staticAlloc(4);Ga=U=m.alignMemory(aa);xa=Ga+Ka;Ha=m.alignMemory(xa);x[ba>>2]=Ha;a.wasmTableSize=492;a.wasmMaxTableSize=492;a.asmGlobalArg={Math:Math,Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array,Uint32Array:Uint32Array,Float32Array:Float32Array,\r\nFloat64Array:Float64Array,NaN:NaN,Infinity:Infinity,byteLength:Ja};a.asmLibraryArg={abort:W,assert:f,enlargeMemory:Ma,getTotalMemory:function(){return y},abortOnCannotGrowMemory:function(){W(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \"+y+\", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \")},\r\ninvoke_ii:function(e,b){try{return a.dynCall_ii(e,b)}catch(c){if(\"number\"!==typeof c&&\"longjmp\"!==c)throw c;a.setThrew(1,0)}},invoke_iii:function(e,b,c){try{return a.dynCall_iii(e,b,c)}catch(l){if(\"number\"!==typeof l&&\"longjmp\"!==l)throw l;a.setThrew(1,0)}},invoke_iiii:function(e,b,c,d){try{return a.dynCall_iiii(e,b,c,d)}catch(E){if(\"number\"!==typeof E&&\"longjmp\"!==E)throw E;a.setThrew(1,0)}},invoke_iiiiiii:function(e,b,c,d,f,g,h){try{return a.dynCall_iiiiiii(e,b,c,d,f,g,h)}catch(ja){if(\"number\"!==\r\ntypeof ja&&\"longjmp\"!==ja)throw ja;a.setThrew(1,0)}},invoke_v:function(e){try{a.dynCall_v(e)}catch(b){if(\"number\"!==typeof b&&\"longjmp\"!==b)throw b;a.setThrew(1,0)}},invoke_vi:function(e,b){try{a.dynCall_vi(e,b)}catch(c){if(\"number\"!==typeof c&&\"longjmp\"!==c)throw c;a.setThrew(1,0)}},invoke_vii:function(e,b,c){try{a.dynCall_vii(e,b,c)}catch(l){if(\"number\"!==typeof l&&\"longjmp\"!==l)throw l;a.setThrew(1,0)}},invoke_viii:function(e,b,c,d){try{a.dynCall_viii(e,b,c,d)}catch(E){if(\"number\"!==typeof E&&\r\n\"longjmp\"!==E)throw E;a.setThrew(1,0)}},invoke_viiii:function(e,b,c,d,f){try{a.dynCall_viiii(e,b,c,d,f)}catch(ta){if(\"number\"!==typeof ta&&\"longjmp\"!==ta)throw ta;a.setThrew(1,0)}},invoke_viiiii:function(e,b,c,d,f,g){try{a.dynCall_viiiii(e,b,c,d,f,g)}catch(ia){if(\"number\"!==typeof ia&&\"longjmp\"!==ia)throw ia;a.setThrew(1,0)}},invoke_viiiiii:function(e,b,c,d,f,g,h){try{a.dynCall_viiiiii(e,b,c,d,f,g,h)}catch(ja){if(\"number\"!==typeof ja&&\"longjmp\"!==ja)throw ja;a.setThrew(1,0)}},__ZSt18uncaught_exceptionv:na,\r\n___cxa_allocate_exception:function(a){return Ta(a)},___cxa_begin_catch:function(a){var b=A.infos[a];b&&!b.caught&&(b.caught=!0,na.uncaught_exception--);b&&(b.rethrown=!1);A.caught.push(a);A.addRef(A.deAdjust(a));return a},___cxa_find_matching_catch:qa,___cxa_pure_virtual:function(){ua=!0;throw\"Pure virtual function called!\";},___cxa_throw:function(a,b,c){A.infos[a]={ptr:a,adjusted:a,type:b,destructor:c,refcount:0,caught:!1,rethrown:!1};A.last=a;\"uncaught_exception\"in na?na.uncaught_exception++:na.uncaught_exception=\r\n1;throw a+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\";},___gxx_personality_v0:function(){},___resumeException:function(a){A.last||(A.last=a);throw a+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\";},___setErrNo:function(e){a.___errno_location&&(x[a.___errno_location()>>2]=e);return e},\r\n___syscall140:function(a,b){v.varargs=b;try{var c=v.getStreamFromFD();v.get();var e=v.get(),d=v.get(),f=v.get();FS.llseek(c,e,f);x[d>>2]=c.position;c.getdents&&0===e&&0===f&&(c.getdents=null);return 0}catch(ia){return\"undefined\"!==typeof FS&&ia instanceof FS.ErrnoError||W(ia),-ia.errno}},___syscall146:Q,___syscall54:function(a,b){v.varargs=b;return 0},___syscall6:function(a,b){v.varargs=b;try{var c=v.getStreamFromFD();FS.close(c);return 0}catch(l){return\"undefined\"!==typeof FS&&l instanceof FS.ErrnoError||\r\nW(l),-l.errno}},_abort:function(){a.abort()},_emscripten_memcpy_big:function(a,b,c){T.set(T.subarray(b,b+c),a);return a},_pthread_getspecific:function(a){return ya[a]||0},_pthread_key_create:function(a,b){if(0==a)return 22;x[a>>2]=La;ya[La]=0;La++;return 0},_pthread_once:ra,_pthread_setspecific:function(a,b){if(!(a in ya))return 22;ya[a]=b;return 0},DYNAMICTOP_PTR:ba,tempDoublePtr:Eb,ABORT:ua,STACKTOP:U,STACK_MAX:xa};var eb=a.asm(a.asmGlobalArg,a.asmLibraryArg,F);a.asm=eb;a.___cxa_can_catch=function(){return a.asm.___cxa_can_catch.apply(null,\r\narguments)};a.___cxa_is_pointer_type=function(){return a.asm.___cxa_is_pointer_type.apply(null,arguments)};var pb=a._emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0=function(){return a.asm._emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0.apply(null,arguments)},Fb=a._emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1=function(){return a.asm._emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1.apply(null,arguments)},\r\nGb=a._emscripten_bind_AttributeOctahedronTransform___destroy___0=function(){return a.asm._emscripten_bind_AttributeOctahedronTransform___destroy___0.apply(null,arguments)},Hb=a._emscripten_bind_AttributeOctahedronTransform_quantization_bits_0=function(){return a.asm._emscripten_bind_AttributeOctahedronTransform_quantization_bits_0.apply(null,arguments)},sb=a._emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0.apply(null,\r\narguments)},Ib=a._emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1.apply(null,arguments)},Jb=a._emscripten_bind_AttributeQuantizationTransform___destroy___0=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform___destroy___0.apply(null,arguments)},Kb=a._emscripten_bind_AttributeQuantizationTransform_min_value_1=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_min_value_1.apply(null,\r\narguments)},Lb=a._emscripten_bind_AttributeQuantizationTransform_quantization_bits_0=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_quantization_bits_0.apply(null,arguments)},Mb=a._emscripten_bind_AttributeQuantizationTransform_range_0=function(){return a.asm._emscripten_bind_AttributeQuantizationTransform_range_0.apply(null,arguments)},rb=a._emscripten_bind_AttributeTransformData_AttributeTransformData_0=function(){return a.asm._emscripten_bind_AttributeTransformData_AttributeTransformData_0.apply(null,\r\narguments)},Nb=a._emscripten_bind_AttributeTransformData___destroy___0=function(){return a.asm._emscripten_bind_AttributeTransformData___destroy___0.apply(null,arguments)},Ob=a._emscripten_bind_AttributeTransformData_transform_type_0=function(){return a.asm._emscripten_bind_AttributeTransformData_transform_type_0.apply(null,arguments)},yb=a._emscripten_bind_DecoderBuffer_DecoderBuffer_0=function(){return a.asm._emscripten_bind_DecoderBuffer_DecoderBuffer_0.apply(null,arguments)},Pb=a._emscripten_bind_DecoderBuffer_Init_2=\r\nfunction(){return a.asm._emscripten_bind_DecoderBuffer_Init_2.apply(null,arguments)},Qb=a._emscripten_bind_DecoderBuffer___destroy___0=function(){return a.asm._emscripten_bind_DecoderBuffer___destroy___0.apply(null,arguments)},Rb=a._emscripten_bind_Decoder_DecodeBufferToMesh_2=function(){return a.asm._emscripten_bind_Decoder_DecodeBufferToMesh_2.apply(null,arguments)},Sb=a._emscripten_bind_Decoder_DecodeBufferToPointCloud_2=function(){return a.asm._emscripten_bind_Decoder_DecodeBufferToPointCloud_2.apply(null,\r\narguments)},zb=a._emscripten_bind_Decoder_Decoder_0=function(){return a.asm._emscripten_bind_Decoder_Decoder_0.apply(null,arguments)},Tb=a._emscripten_bind_Decoder_GetAttributeByUniqueId_2=function(){return a.asm._emscripten_bind_Decoder_GetAttributeByUniqueId_2.apply(null,arguments)},Ub=a._emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3.apply(null,arguments)},Vb=a._emscripten_bind_Decoder_GetAttributeFloat_3=\r\nfunction(){return a.asm._emscripten_bind_Decoder_GetAttributeFloat_3.apply(null,arguments)},Wb=a._emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3.apply(null,arguments)},Xb=a._emscripten_bind_Decoder_GetAttributeIdByName_2=function(){return a.asm._emscripten_bind_Decoder_GetAttributeIdByName_2.apply(null,arguments)},Yb=a._emscripten_bind_Decoder_GetAttributeId_2=function(){return a.asm._emscripten_bind_Decoder_GetAttributeId_2.apply(null,\r\narguments)},Zb=a._emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3.apply(null,arguments)},$b=a._emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3.apply(null,arguments)},ac=a._emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3.apply(null,arguments)},\r\nbc=a._emscripten_bind_Decoder_GetAttributeIntForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeIntForAllPoints_3.apply(null,arguments)},cc=a._emscripten_bind_Decoder_GetAttributeMetadata_2=function(){return a.asm._emscripten_bind_Decoder_GetAttributeMetadata_2.apply(null,arguments)},dc=a._emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3.apply(null,arguments)},ec=a._emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3=\r\nfunction(){return a.asm._emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3.apply(null,arguments)},fc=a._emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3=function(){return a.asm._emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3.apply(null,arguments)},gc=a._emscripten_bind_Decoder_GetAttribute_2=function(){return a.asm._emscripten_bind_Decoder_GetAttribute_2.apply(null,arguments)},hc=a._emscripten_bind_Decoder_GetEncodedGeometryType_1=function(){return a.asm._emscripten_bind_Decoder_GetEncodedGeometryType_1.apply(null,\r\narguments)},ic=a._emscripten_bind_Decoder_GetFaceFromMesh_3=function(){return a.asm._emscripten_bind_Decoder_GetFaceFromMesh_3.apply(null,arguments)},jc=a._emscripten_bind_Decoder_GetMetadata_1=function(){return a.asm._emscripten_bind_Decoder_GetMetadata_1.apply(null,arguments)},kc=a._emscripten_bind_Decoder_GetTriangleStripsFromMesh_2=function(){return a.asm._emscripten_bind_Decoder_GetTriangleStripsFromMesh_2.apply(null,arguments)},lc=a._emscripten_bind_Decoder_SkipAttributeTransform_1=function(){return a.asm._emscripten_bind_Decoder_SkipAttributeTransform_1.apply(null,\r\narguments)},mc=a._emscripten_bind_Decoder___destroy___0=function(){return a.asm._emscripten_bind_Decoder___destroy___0.apply(null,arguments)},wb=a._emscripten_bind_DracoFloat32Array_DracoFloat32Array_0=function(){return a.asm._emscripten_bind_DracoFloat32Array_DracoFloat32Array_0.apply(null,arguments)},nc=a._emscripten_bind_DracoFloat32Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoFloat32Array_GetValue_1.apply(null,arguments)},oc=a._emscripten_bind_DracoFloat32Array___destroy___0=\r\nfunction(){return a.asm._emscripten_bind_DracoFloat32Array___destroy___0.apply(null,arguments)},pc=a._emscripten_bind_DracoFloat32Array_size_0=function(){return a.asm._emscripten_bind_DracoFloat32Array_size_0.apply(null,arguments)},vb=a._emscripten_bind_DracoInt16Array_DracoInt16Array_0=function(){return a.asm._emscripten_bind_DracoInt16Array_DracoInt16Array_0.apply(null,arguments)},qc=a._emscripten_bind_DracoInt16Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoInt16Array_GetValue_1.apply(null,\r\narguments)},rc=a._emscripten_bind_DracoInt16Array___destroy___0=function(){return a.asm._emscripten_bind_DracoInt16Array___destroy___0.apply(null,arguments)},sc=a._emscripten_bind_DracoInt16Array_size_0=function(){return a.asm._emscripten_bind_DracoInt16Array_size_0.apply(null,arguments)},Bb=a._emscripten_bind_DracoInt32Array_DracoInt32Array_0=function(){return a.asm._emscripten_bind_DracoInt32Array_DracoInt32Array_0.apply(null,arguments)},tc=a._emscripten_bind_DracoInt32Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoInt32Array_GetValue_1.apply(null,\r\narguments)},uc=a._emscripten_bind_DracoInt32Array___destroy___0=function(){return a.asm._emscripten_bind_DracoInt32Array___destroy___0.apply(null,arguments)},vc=a._emscripten_bind_DracoInt32Array_size_0=function(){return a.asm._emscripten_bind_DracoInt32Array_size_0.apply(null,arguments)},tb=a._emscripten_bind_DracoInt8Array_DracoInt8Array_0=function(){return a.asm._emscripten_bind_DracoInt8Array_DracoInt8Array_0.apply(null,arguments)},wc=a._emscripten_bind_DracoInt8Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoInt8Array_GetValue_1.apply(null,\r\narguments)},xc=a._emscripten_bind_DracoInt8Array___destroy___0=function(){return a.asm._emscripten_bind_DracoInt8Array___destroy___0.apply(null,arguments)},yc=a._emscripten_bind_DracoInt8Array_size_0=function(){return a.asm._emscripten_bind_DracoInt8Array_size_0.apply(null,arguments)},lb=a._emscripten_bind_DracoUInt16Array_DracoUInt16Array_0=function(){return a.asm._emscripten_bind_DracoUInt16Array_DracoUInt16Array_0.apply(null,arguments)},zc=a._emscripten_bind_DracoUInt16Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoUInt16Array_GetValue_1.apply(null,\r\narguments)},Ac=a._emscripten_bind_DracoUInt16Array___destroy___0=function(){return a.asm._emscripten_bind_DracoUInt16Array___destroy___0.apply(null,arguments)},Bc=a._emscripten_bind_DracoUInt16Array_size_0=function(){return a.asm._emscripten_bind_DracoUInt16Array_size_0.apply(null,arguments)},ob=a._emscripten_bind_DracoUInt32Array_DracoUInt32Array_0=function(){return a.asm._emscripten_bind_DracoUInt32Array_DracoUInt32Array_0.apply(null,arguments)},Cc=a._emscripten_bind_DracoUInt32Array_GetValue_1=\r\nfunction(){return a.asm._emscripten_bind_DracoUInt32Array_GetValue_1.apply(null,arguments)},Dc=a._emscripten_bind_DracoUInt32Array___destroy___0=function(){return a.asm._emscripten_bind_DracoUInt32Array___destroy___0.apply(null,arguments)},Ec=a._emscripten_bind_DracoUInt32Array_size_0=function(){return a.asm._emscripten_bind_DracoUInt32Array_size_0.apply(null,arguments)},nb=a._emscripten_bind_DracoUInt8Array_DracoUInt8Array_0=function(){return a.asm._emscripten_bind_DracoUInt8Array_DracoUInt8Array_0.apply(null,\r\narguments)},Fc=a._emscripten_bind_DracoUInt8Array_GetValue_1=function(){return a.asm._emscripten_bind_DracoUInt8Array_GetValue_1.apply(null,arguments)},Gc=a._emscripten_bind_DracoUInt8Array___destroy___0=function(){return a.asm._emscripten_bind_DracoUInt8Array___destroy___0.apply(null,arguments)},Hc=a._emscripten_bind_DracoUInt8Array_size_0=function(){return a.asm._emscripten_bind_DracoUInt8Array_size_0.apply(null,arguments)},xb=a._emscripten_bind_GeometryAttribute_GeometryAttribute_0=function(){return a.asm._emscripten_bind_GeometryAttribute_GeometryAttribute_0.apply(null,\r\narguments)},Ic=a._emscripten_bind_GeometryAttribute___destroy___0=function(){return a.asm._emscripten_bind_GeometryAttribute___destroy___0.apply(null,arguments)},Ab=a._emscripten_bind_Mesh_Mesh_0=function(){return a.asm._emscripten_bind_Mesh_Mesh_0.apply(null,arguments)},Jc=a._emscripten_bind_Mesh___destroy___0=function(){return a.asm._emscripten_bind_Mesh___destroy___0.apply(null,arguments)},Kc=a._emscripten_bind_Mesh_num_attributes_0=function(){return a.asm._emscripten_bind_Mesh_num_attributes_0.apply(null,\r\narguments)},Lc=a._emscripten_bind_Mesh_num_faces_0=function(){return a.asm._emscripten_bind_Mesh_num_faces_0.apply(null,arguments)},Mc=a._emscripten_bind_Mesh_num_points_0=function(){return a.asm._emscripten_bind_Mesh_num_points_0.apply(null,arguments)},Nc=a._emscripten_bind_MetadataQuerier_GetDoubleEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_GetDoubleEntry_2.apply(null,arguments)},Oc=a._emscripten_bind_MetadataQuerier_GetEntryName_2=function(){return a.asm._emscripten_bind_MetadataQuerier_GetEntryName_2.apply(null,\r\narguments)},Pc=a._emscripten_bind_MetadataQuerier_GetIntEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_GetIntEntry_2.apply(null,arguments)},Qc=a._emscripten_bind_MetadataQuerier_GetStringEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_GetStringEntry_2.apply(null,arguments)},Rc=a._emscripten_bind_MetadataQuerier_HasDoubleEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_HasDoubleEntry_2.apply(null,arguments)},Sc=a._emscripten_bind_MetadataQuerier_HasEntry_2=\r\nfunction(){return a.asm._emscripten_bind_MetadataQuerier_HasEntry_2.apply(null,arguments)},Tc=a._emscripten_bind_MetadataQuerier_HasIntEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_HasIntEntry_2.apply(null,arguments)},Uc=a._emscripten_bind_MetadataQuerier_HasStringEntry_2=function(){return a.asm._emscripten_bind_MetadataQuerier_HasStringEntry_2.apply(null,arguments)},ub=a._emscripten_bind_MetadataQuerier_MetadataQuerier_0=function(){return a.asm._emscripten_bind_MetadataQuerier_MetadataQuerier_0.apply(null,\r\narguments)},Vc=a._emscripten_bind_MetadataQuerier_NumEntries_1=function(){return a.asm._emscripten_bind_MetadataQuerier_NumEntries_1.apply(null,arguments)},Wc=a._emscripten_bind_MetadataQuerier___destroy___0=function(){return a.asm._emscripten_bind_MetadataQuerier___destroy___0.apply(null,arguments)},Cb=a._emscripten_bind_Metadata_Metadata_0=function(){return a.asm._emscripten_bind_Metadata_Metadata_0.apply(null,arguments)},Xc=a._emscripten_bind_Metadata___destroy___0=function(){return a.asm._emscripten_bind_Metadata___destroy___0.apply(null,\r\narguments)},Yc=a._emscripten_bind_PointAttribute_GetAttributeTransformData_0=function(){return a.asm._emscripten_bind_PointAttribute_GetAttributeTransformData_0.apply(null,arguments)},qb=a._emscripten_bind_PointAttribute_PointAttribute_0=function(){return a.asm._emscripten_bind_PointAttribute_PointAttribute_0.apply(null,arguments)},Zc=a._emscripten_bind_PointAttribute___destroy___0=function(){return a.asm._emscripten_bind_PointAttribute___destroy___0.apply(null,arguments)},$c=a._emscripten_bind_PointAttribute_attribute_type_0=\r\nfunction(){return a.asm._emscripten_bind_PointAttribute_attribute_type_0.apply(null,arguments)},ad=a._emscripten_bind_PointAttribute_byte_offset_0=function(){return a.asm._emscripten_bind_PointAttribute_byte_offset_0.apply(null,arguments)},bd=a._emscripten_bind_PointAttribute_byte_stride_0=function(){return a.asm._emscripten_bind_PointAttribute_byte_stride_0.apply(null,arguments)},cd=a._emscripten_bind_PointAttribute_data_type_0=function(){return a.asm._emscripten_bind_PointAttribute_data_type_0.apply(null,\r\narguments)},dd=a._emscripten_bind_PointAttribute_normalized_0=function(){return a.asm._emscripten_bind_PointAttribute_normalized_0.apply(null,arguments)},ed=a._emscripten_bind_PointAttribute_num_components_0=function(){return a.asm._emscripten_bind_PointAttribute_num_components_0.apply(null,arguments)},fd=a._emscripten_bind_PointAttribute_size_0=function(){return a.asm._emscripten_bind_PointAttribute_size_0.apply(null,arguments)},gd=a._emscripten_bind_PointAttribute_unique_id_0=function(){return a.asm._emscripten_bind_PointAttribute_unique_id_0.apply(null,\r\narguments)},mb=a._emscripten_bind_PointCloud_PointCloud_0=function(){return a.asm._emscripten_bind_PointCloud_PointCloud_0.apply(null,arguments)},hd=a._emscripten_bind_PointCloud___destroy___0=function(){return a.asm._emscripten_bind_PointCloud___destroy___0.apply(null,arguments)},id=a._emscripten_bind_PointCloud_num_attributes_0=function(){return a.asm._emscripten_bind_PointCloud_num_attributes_0.apply(null,arguments)},jd=a._emscripten_bind_PointCloud_num_points_0=function(){return a.asm._emscripten_bind_PointCloud_num_points_0.apply(null,\r\narguments)},kd=a._emscripten_bind_Status___destroy___0=function(){return a.asm._emscripten_bind_Status___destroy___0.apply(null,arguments)},ld=a._emscripten_bind_Status_code_0=function(){return a.asm._emscripten_bind_Status_code_0.apply(null,arguments)},md=a._emscripten_bind_Status_error_msg_0=function(){return a.asm._emscripten_bind_Status_error_msg_0.apply(null,arguments)},nd=a._emscripten_bind_Status_ok_0=function(){return a.asm._emscripten_bind_Status_ok_0.apply(null,arguments)},od=a._emscripten_bind_VoidPtr___destroy___0=\r\nfunction(){return a.asm._emscripten_bind_VoidPtr___destroy___0.apply(null,arguments)},pd=a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM=function(){return a.asm._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM.apply(null,arguments)},qd=a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM=function(){return a.asm._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM.apply(null,arguments)},rd=a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM=\r\nfunction(){return a.asm._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM.apply(null,arguments)},sd=a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM=function(){return a.asm._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM.apply(null,arguments)},td=a._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE=function(){return a.asm._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE.apply(null,\r\narguments)},ud=a._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD=function(){return a.asm._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD.apply(null,arguments)},vd=a._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH=function(){return a.asm._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH.apply(null,arguments)},wd=a._emscripten_enum_draco_GeometryAttribute_Type_COLOR=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_COLOR.apply(null,arguments)},xd=\r\na._emscripten_enum_draco_GeometryAttribute_Type_GENERIC=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_GENERIC.apply(null,arguments)},yd=a._emscripten_enum_draco_GeometryAttribute_Type_INVALID=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_INVALID.apply(null,arguments)},zd=a._emscripten_enum_draco_GeometryAttribute_Type_NORMAL=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_NORMAL.apply(null,arguments)},Ad=a._emscripten_enum_draco_GeometryAttribute_Type_POSITION=\r\nfunction(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_POSITION.apply(null,arguments)},Bd=a._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD=function(){return a.asm._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD.apply(null,arguments)},Cd=a._emscripten_enum_draco_StatusCode_ERROR=function(){return a.asm._emscripten_enum_draco_StatusCode_ERROR.apply(null,arguments)},Dd=a._emscripten_enum_draco_StatusCode_INVALID_PARAMETER=function(){return a.asm._emscripten_enum_draco_StatusCode_INVALID_PARAMETER.apply(null,\r\narguments)},Ed=a._emscripten_enum_draco_StatusCode_IO_ERROR=function(){return a.asm._emscripten_enum_draco_StatusCode_IO_ERROR.apply(null,arguments)},Fd=a._emscripten_enum_draco_StatusCode_OK=function(){return a.asm._emscripten_enum_draco_StatusCode_OK.apply(null,arguments)},Gd=a._emscripten_enum_draco_StatusCode_UNKNOWN_VERSION=function(){return a.asm._emscripten_enum_draco_StatusCode_UNKNOWN_VERSION.apply(null,arguments)},Hd=a._emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION=function(){return a.asm._emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION.apply(null,\r\narguments)};a._emscripten_get_global_libc=function(){return a.asm._emscripten_get_global_libc.apply(null,arguments)};var Db=a._emscripten_replace_memory=function(){return a.asm._emscripten_replace_memory.apply(null,arguments)};a._free=function(){return a.asm._free.apply(null,arguments)};a._llvm_bswap_i32=function(){return a.asm._llvm_bswap_i32.apply(null,arguments)};var Ta=a._malloc=function(){return a.asm._malloc.apply(null,arguments)};a._memcpy=function(){return a.asm._memcpy.apply(null,arguments)};\r\na._memmove=function(){return a.asm._memmove.apply(null,arguments)};a._memset=function(){return a.asm._memset.apply(null,arguments)};a._sbrk=function(){return a.asm._sbrk.apply(null,arguments)};a.establishStackSpace=function(){return a.asm.establishStackSpace.apply(null,arguments)};a.getTempRet0=function(){return a.asm.getTempRet0.apply(null,arguments)};a.runPostSets=function(){return a.asm.runPostSets.apply(null,arguments)};a.setTempRet0=function(){return a.asm.setTempRet0.apply(null,arguments)};\r\na.setThrew=function(){return a.asm.setThrew.apply(null,arguments)};a.stackAlloc=function(){return a.asm.stackAlloc.apply(null,arguments)};a.stackRestore=function(){return a.asm.stackRestore.apply(null,arguments)};a.stackSave=function(){return a.asm.stackSave.apply(null,arguments)};a.dynCall_ii=function(){return a.asm.dynCall_ii.apply(null,arguments)};a.dynCall_iii=function(){return a.asm.dynCall_iii.apply(null,arguments)};a.dynCall_iiii=function(){return a.asm.dynCall_iiii.apply(null,arguments)};\r\na.dynCall_iiiiiii=function(){return a.asm.dynCall_iiiiiii.apply(null,arguments)};a.dynCall_v=function(){return a.asm.dynCall_v.apply(null,arguments)};a.dynCall_vi=function(){return a.asm.dynCall_vi.apply(null,arguments)};a.dynCall_vii=function(){return a.asm.dynCall_vii.apply(null,arguments)};a.dynCall_viii=function(){return a.asm.dynCall_viii.apply(null,arguments)};a.dynCall_viiii=function(){return a.asm.dynCall_viiii.apply(null,arguments)};a.dynCall_viiiii=function(){return a.asm.dynCall_viiiii.apply(null,\r\narguments)};a.dynCall_viiiiii=function(){return a.asm.dynCall_viiiiii.apply(null,arguments)};m.stackAlloc=a.stackAlloc;m.stackSave=a.stackSave;m.stackRestore=a.stackRestore;m.establishStackSpace=a.establishStackSpace;m.setTempRet0=a.setTempRet0;m.getTempRet0=a.getTempRet0;a.asm=eb;if(V)if(\"function\"===typeof a.locateFile?V=a.locateFile(V):a.memoryInitializerPrefixURL&&(V=a.memoryInitializerPrefixURL+V),pa||wa){var Id=a.readBinary(V);T.set(Id,m.GLOBAL_BASE)}else{var gb=function(){a.readAsync(V,fb,\r\nfunction(){throw\"could not load memory initializer \"+V;})};la(\"memory initializer\");var fb=function(d){d.byteLength&&(d=new Uint8Array(d));T.set(d,m.GLOBAL_BASE);a.memoryInitializerRequest&&delete a.memoryInitializerRequest.response;Na(\"memory initializer\")};if(a.memoryInitializerRequest){var hb=function(){var d=a.memoryInitializerRequest,b=d.response;200!==d.status&&0!==d.status?(console.warn(\"a problem seems to have happened with Module.memoryInitializerRequest, status: \"+d.status+\", retrying \"+\r\nV),gb()):fb(b)};a.memoryInitializerRequest.response?setTimeout(hb,0):a.memoryInitializerRequest.addEventListener(\"load\",hb)}else gb()}a.then=function(d){if(a.calledRun)d(a);else{var b=a.onRuntimeInitialized;a.onRuntimeInitialized=function(){b&&b();d(a)}}return a};ea.prototype=Error();ea.prototype.constructor=ea;var Za=null;sa=function b(){a.calledRun||Da();a.calledRun||(sa=b)};a.run=Da;a.exit=function(b,c){if(!c||!a.noExitRuntime){if(!a.noExitRuntime&&(ua=!0,U=void 0,u(db),a.onExit))a.onExit(b);pa&&\r\nprocess.exit(b);a.quit(b,new ea(b))}};var ab=[];a.abort=W;if(a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();Da();p.prototype=Object.create(p.prototype);p.prototype.constructor=p;p.prototype.__class__=p;p.__cache__={};a.WrapperObject=p;a.getCache=t;a.wrapPointer=X;a.castObject=function(a,c){return X(a.ptr,c)};a.NULL=X(0);a.destroy=function(a){if(!a.__destroy__)throw\"Error: Cannot destroy object. (Did you create it yourself?)\";a.__destroy__();\r\ndelete t(a.__class__)[a.ptr]};a.compare=function(a,c){return a.ptr===c.ptr};a.getPointer=function(a){return a.ptr};a.getClass=function(a){return a.__class__};var k={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(k.needed){for(var b=0;b<k.temps.length;b++)a._free(k.temps[b]);k.temps.length=0;a._free(k.buffer);k.buffer=0;k.size+=k.needed;k.needed=0}k.buffer||(k.size+=128,k.buffer=a._malloc(k.size),f(k.buffer));k.pos=0},alloc:function(b,c){f(k.buffer);b=b.length*c.BYTES_PER_ELEMENT;b=\r\nb+7&-8;k.pos+b>=k.size?(f(0<b),k.needed+=b,c=a._malloc(b),k.temps.push(c)):(c=k.buffer+k.pos,k.pos+=b);return c},copy:function(a,c,d){switch(c.BYTES_PER_ELEMENT){case 2:d>>=1;break;case 4:d>>=2;break;case 8:d>>=3}for(var b=0;b<a.length;b++)c[d+b]=a[b]}};B.prototype=Object.create(p.prototype);B.prototype.constructor=B;B.prototype.__class__=B;B.__cache__={};a.Status=B;B.prototype.code=B.prototype.code=function(){return ld(this.ptr)};B.prototype.ok=B.prototype.ok=function(){return!!nd(this.ptr)};B.prototype.error_msg=\r\nB.prototype.error_msg=function(){return n(md(this.ptr))};B.prototype.__destroy__=B.prototype.__destroy__=function(){kd(this.ptr)};G.prototype=Object.create(p.prototype);G.prototype.constructor=G;G.prototype.__class__=G;G.__cache__={};a.DracoUInt16Array=G;G.prototype.GetValue=G.prototype.GetValue=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return zc(b,a)};G.prototype.size=G.prototype.size=function(){return Bc(this.ptr)};G.prototype.__destroy__=G.prototype.__destroy__=function(){Ac(this.ptr)};\r\nH.prototype=Object.create(p.prototype);H.prototype.constructor=H;H.prototype.__class__=H;H.__cache__={};a.PointCloud=H;H.prototype.num_attributes=H.prototype.num_attributes=function(){return id(this.ptr)};H.prototype.num_points=H.prototype.num_points=function(){return jd(this.ptr)};H.prototype.__destroy__=H.prototype.__destroy__=function(){hd(this.ptr)};I.prototype=Object.create(p.prototype);I.prototype.constructor=I;I.prototype.__class__=I;I.__cache__={};a.DracoUInt8Array=I;I.prototype.GetValue=\r\nI.prototype.GetValue=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return Fc(b,a)};I.prototype.size=I.prototype.size=function(){return Hc(this.ptr)};I.prototype.__destroy__=I.prototype.__destroy__=function(){Gc(this.ptr)};J.prototype=Object.create(p.prototype);J.prototype.constructor=J;J.prototype.__class__=J;J.__cache__={};a.DracoUInt32Array=J;J.prototype.GetValue=J.prototype.GetValue=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return Cc(b,a)};J.prototype.size=J.prototype.size=\r\nfunction(){return Ec(this.ptr)};J.prototype.__destroy__=J.prototype.__destroy__=function(){Dc(this.ptr)};K.prototype=Object.create(p.prototype);K.prototype.constructor=K;K.prototype.__class__=K;K.__cache__={};a.AttributeOctahedronTransform=K;K.prototype.InitFromAttribute=K.prototype.InitFromAttribute=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return!!Fb(b,a)};K.prototype.quantization_bits=K.prototype.quantization_bits=function(){return Hb(this.ptr)};K.prototype.__destroy__=K.prototype.__destroy__=\r\nfunction(){Gb(this.ptr)};q.prototype=Object.create(p.prototype);q.prototype.constructor=q;q.prototype.__class__=q;q.__cache__={};a.PointAttribute=q;q.prototype.size=q.prototype.size=function(){return fd(this.ptr)};q.prototype.GetAttributeTransformData=q.prototype.GetAttributeTransformData=function(){return X(Yc(this.ptr),P)};q.prototype.attribute_type=q.prototype.attribute_type=function(){return $c(this.ptr)};q.prototype.data_type=q.prototype.data_type=function(){return cd(this.ptr)};q.prototype.num_components=\r\nq.prototype.num_components=function(){return ed(this.ptr)};q.prototype.normalized=q.prototype.normalized=function(){return!!dd(this.ptr)};q.prototype.byte_stride=q.prototype.byte_stride=function(){return bd(this.ptr)};q.prototype.byte_offset=q.prototype.byte_offset=function(){return ad(this.ptr)};q.prototype.unique_id=q.prototype.unique_id=function(){return gd(this.ptr)};q.prototype.__destroy__=q.prototype.__destroy__=function(){Zc(this.ptr)};P.prototype=Object.create(p.prototype);P.prototype.constructor=\r\nP;P.prototype.__class__=P;P.__cache__={};a.AttributeTransformData=P;P.prototype.transform_type=P.prototype.transform_type=function(){return Ob(this.ptr)};P.prototype.__destroy__=P.prototype.__destroy__=function(){Nb(this.ptr)};z.prototype=Object.create(p.prototype);z.prototype.constructor=z;z.prototype.__class__=z;z.__cache__={};a.AttributeQuantizationTransform=z;z.prototype.InitFromAttribute=z.prototype.InitFromAttribute=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return!!Ib(b,a)};\r\nz.prototype.quantization_bits=z.prototype.quantization_bits=function(){return Lb(this.ptr)};z.prototype.min_value=z.prototype.min_value=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return Kb(b,a)};z.prototype.range=z.prototype.range=function(){return Mb(this.ptr)};z.prototype.__destroy__=z.prototype.__destroy__=function(){Jb(this.ptr)};L.prototype=Object.create(p.prototype);L.prototype.constructor=L;L.prototype.__class__=L;L.__cache__={};a.DracoInt8Array=L;L.prototype.GetValue=L.prototype.GetValue=\r\nfunction(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return wc(b,a)};L.prototype.size=L.prototype.size=function(){return yc(this.ptr)};L.prototype.__destroy__=L.prototype.__destroy__=function(){xc(this.ptr)};r.prototype=Object.create(p.prototype);r.prototype.constructor=r;r.prototype.__class__=r;r.__cache__={};a.MetadataQuerier=r;r.prototype.HasEntry=r.prototype.HasEntry=function(a,c){var b=this.ptr;k.prepare();a&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===typeof c?c.ptr:Y(c);return!!Sc(b,\r\na,c)};r.prototype.HasIntEntry=r.prototype.HasIntEntry=function(a,c){var b=this.ptr;k.prepare();a&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===typeof c?c.ptr:Y(c);return!!Tc(b,a,c)};r.prototype.GetIntEntry=r.prototype.GetIntEntry=function(a,c){var b=this.ptr;k.prepare();a&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===typeof c?c.ptr:Y(c);return Pc(b,a,c)};r.prototype.HasDoubleEntry=r.prototype.HasDoubleEntry=function(a,c){var b=this.ptr;k.prepare();a&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===\r\ntypeof c?c.ptr:Y(c);return!!Rc(b,a,c)};r.prototype.GetDoubleEntry=r.prototype.GetDoubleEntry=function(a,c){var b=this.ptr;k.prepare();a&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===typeof c?c.ptr:Y(c);return Nc(b,a,c)};r.prototype.HasStringEntry=r.prototype.HasStringEntry=function(a,c){var b=this.ptr;k.prepare();a&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===typeof c?c.ptr:Y(c);return!!Uc(b,a,c)};r.prototype.GetStringEntry=r.prototype.GetStringEntry=function(a,c){var b=this.ptr;k.prepare();\r\na&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===typeof c?c.ptr:Y(c);return n(Qc(b,a,c))};r.prototype.NumEntries=r.prototype.NumEntries=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return Vc(b,a)};r.prototype.GetEntryName=r.prototype.GetEntryName=function(a,c){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);return n(Oc(b,a,c))};r.prototype.__destroy__=r.prototype.__destroy__=function(){Wc(this.ptr)};M.prototype=Object.create(p.prototype);M.prototype.constructor=\r\nM;M.prototype.__class__=M;M.__cache__={};a.DracoInt16Array=M;M.prototype.GetValue=M.prototype.GetValue=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return qc(b,a)};M.prototype.size=M.prototype.size=function(){return sc(this.ptr)};M.prototype.__destroy__=M.prototype.__destroy__=function(){rc(this.ptr)};N.prototype=Object.create(p.prototype);N.prototype.constructor=N;N.prototype.__class__=N;N.__cache__={};a.DracoFloat32Array=N;N.prototype.GetValue=N.prototype.GetValue=function(a){var b=\r\nthis.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return nc(b,a)};N.prototype.size=N.prototype.size=function(){return pc(this.ptr)};N.prototype.__destroy__=N.prototype.__destroy__=function(){oc(this.ptr)};Z.prototype=Object.create(p.prototype);Z.prototype.constructor=Z;Z.prototype.__class__=Z;Z.__cache__={};a.GeometryAttribute=Z;Z.prototype.__destroy__=Z.prototype.__destroy__=function(){Ic(this.ptr)};R.prototype=Object.create(p.prototype);R.prototype.constructor=R;R.prototype.__class__=R;R.__cache__={};\r\na.DecoderBuffer=R;R.prototype.Init=R.prototype.Init=function(a,c){var b=this.ptr;k.prepare();if(\"object\"==typeof a&&\"object\"===typeof a){var d=k.alloc(a,fa);k.copy(a,fa,d);a=d}c&&\"object\"===typeof c&&(c=c.ptr);Pb(b,a,c)};R.prototype.__destroy__=R.prototype.__destroy__=function(){Qb(this.ptr)};h.prototype=Object.create(p.prototype);h.prototype.constructor=h;h.prototype.__class__=h;h.__cache__={};a.Decoder=h;h.prototype.GetEncodedGeometryType=h.prototype.GetEncodedGeometryType=function(a){var b=this.ptr;\r\na&&\"object\"===typeof a&&(a=a.ptr);return hc(b,a)};h.prototype.DecodeBufferToPointCloud=h.prototype.DecodeBufferToPointCloud=function(a,c){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);return X(Sb(b,a,c),B)};h.prototype.DecodeBufferToMesh=h.prototype.DecodeBufferToMesh=function(a,c){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);return X(Rb(b,a,c),B)};h.prototype.GetAttributeId=h.prototype.GetAttributeId=function(a,c){var b=this.ptr;\r\na&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);return Yb(b,a,c)};h.prototype.GetAttributeIdByName=h.prototype.GetAttributeIdByName=function(a,c){var b=this.ptr;k.prepare();a&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===typeof c?c.ptr:Y(c);return Xb(b,a,c)};h.prototype.GetAttributeIdByMetadataEntry=h.prototype.GetAttributeIdByMetadataEntry=function(a,c,d){var b=this.ptr;k.prepare();a&&\"object\"===typeof a&&(a=a.ptr);c=c&&\"object\"===typeof c?c.ptr:Y(c);d=d&&\"object\"===typeof d?\r\nd.ptr:Y(d);return Wb(b,a,c,d)};h.prototype.GetAttribute=h.prototype.GetAttribute=function(a,c){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);return X(gc(b,a,c),q)};h.prototype.GetAttributeByUniqueId=h.prototype.GetAttributeByUniqueId=function(a,c){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);return X(Tb(b,a,c),q)};h.prototype.GetMetadata=h.prototype.GetMetadata=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return X(jc(b,\r\na),S)};h.prototype.GetAttributeMetadata=h.prototype.GetAttributeMetadata=function(a,c){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);return X(cc(b,a,c),S)};h.prototype.GetFaceFromMesh=h.prototype.GetFaceFromMesh=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!ic(b,a,c,d)};h.prototype.GetTriangleStripsFromMesh=h.prototype.GetTriangleStripsFromMesh=function(a,c){var b=this.ptr;\r\na&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);return kc(b,a,c)};h.prototype.GetAttributeFloat=h.prototype.GetAttributeFloat=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!Vb(b,a,c,d)};h.prototype.GetAttributeFloatForAllPoints=h.prototype.GetAttributeFloatForAllPoints=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&\r\n(d=d.ptr);return!!Ub(b,a,c,d)};h.prototype.GetAttributeIntForAllPoints=h.prototype.GetAttributeIntForAllPoints=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!bc(b,a,c,d)};h.prototype.GetAttributeInt8ForAllPoints=h.prototype.GetAttributeInt8ForAllPoints=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!ac(b,a,c,d)};\r\nh.prototype.GetAttributeUInt8ForAllPoints=h.prototype.GetAttributeUInt8ForAllPoints=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!fc(b,a,c,d)};h.prototype.GetAttributeInt16ForAllPoints=h.prototype.GetAttributeInt16ForAllPoints=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!Zb(b,a,c,d)};h.prototype.GetAttributeUInt16ForAllPoints=\r\nh.prototype.GetAttributeUInt16ForAllPoints=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!dc(b,a,c,d)};h.prototype.GetAttributeInt32ForAllPoints=h.prototype.GetAttributeInt32ForAllPoints=function(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!$b(b,a,c,d)};h.prototype.GetAttributeUInt32ForAllPoints=h.prototype.GetAttributeUInt32ForAllPoints=\r\nfunction(a,c,d){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);c&&\"object\"===typeof c&&(c=c.ptr);d&&\"object\"===typeof d&&(d=d.ptr);return!!ec(b,a,c,d)};h.prototype.SkipAttributeTransform=h.prototype.SkipAttributeTransform=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);lc(b,a)};h.prototype.__destroy__=h.prototype.__destroy__=function(){mc(this.ptr)};C.prototype=Object.create(p.prototype);C.prototype.constructor=C;C.prototype.__class__=C;C.__cache__={};a.Mesh=C;C.prototype.num_faces=\r\nC.prototype.num_faces=function(){return Lc(this.ptr)};C.prototype.num_attributes=C.prototype.num_attributes=function(){return Kc(this.ptr)};C.prototype.num_points=C.prototype.num_points=function(){return Mc(this.ptr)};C.prototype.__destroy__=C.prototype.__destroy__=function(){Jc(this.ptr)};ca.prototype=Object.create(p.prototype);ca.prototype.constructor=ca;ca.prototype.__class__=ca;ca.__cache__={};a.VoidPtr=ca;ca.prototype.__destroy__=ca.prototype.__destroy__=function(){od(this.ptr)};O.prototype=\r\nObject.create(p.prototype);O.prototype.constructor=O;O.prototype.__class__=O;O.__cache__={};a.DracoInt32Array=O;O.prototype.GetValue=O.prototype.GetValue=function(a){var b=this.ptr;a&&\"object\"===typeof a&&(a=a.ptr);return tc(b,a)};O.prototype.size=O.prototype.size=function(){return vc(this.ptr)};O.prototype.__destroy__=O.prototype.__destroy__=function(){uc(this.ptr)};S.prototype=Object.create(p.prototype);S.prototype.constructor=S;S.prototype.__class__=S;S.__cache__={};a.Metadata=S;S.prototype.__destroy__=\r\nS.prototype.__destroy__=function(){Xc(this.ptr)};(function(){function b(){a.OK=Fd();a.ERROR=Cd();a.IO_ERROR=Ed();a.INVALID_PARAMETER=Dd();a.UNSUPPORTED_VERSION=Hd();a.UNKNOWN_VERSION=Gd();a.INVALID_GEOMETRY_TYPE=td();a.POINT_CLOUD=ud();a.TRIANGULAR_MESH=vd();a.ATTRIBUTE_INVALID_TRANSFORM=pd();a.ATTRIBUTE_NO_TRANSFORM=qd();a.ATTRIBUTE_QUANTIZATION_TRANSFORM=sd();a.ATTRIBUTE_OCTAHEDRON_TRANSFORM=rd();a.INVALID=yd();a.POSITION=Ad();a.NORMAL=zd();a.COLOR=wd();a.TEX_COORD=Bd();a.GENERIC=xd()}a.calledRun?\r\nb():Xa.unshift(b)})();if(\"function\"===typeof a.onModuleParsed)a.onModuleParsed();return d};\"object\"===typeof module&&module.exports&&(module.exports=DracoDecoderModule);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/Workers/draco_wasm_wrapper.js\n// module id = 307\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/path-browserify/index.js\n// module id = 309\n// module chunks = 0","define([\r\n        '../Core/decodeGoogleEarthEnterpriseData',\r\n        '../Core/GoogleEarthEnterpriseTileInformation',\r\n        '../Core/RuntimeError',\r\n        '../ThirdParty/pako_inflate',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        decodeGoogleEarthEnterpriseData,\r\n        GoogleEarthEnterpriseTileInformation,\r\n        RuntimeError,\r\n        pako,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    // Datatype sizes\r\n    var sizeOfUint16 = Uint16Array.BYTES_PER_ELEMENT;\r\n    var sizeOfInt32 = Int32Array.BYTES_PER_ELEMENT;\r\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\r\n\r\n    var Types = {\r\n        METADATA : 0,\r\n        TERRAIN : 1,\r\n        DBROOT : 2\r\n    };\r\n\r\n    Types.fromString = function(s) {\r\n        if (s === 'Metadata') {\r\n            return Types.METADATA;\r\n        } else if (s === 'Terrain') {\r\n            return Types.TERRAIN;\r\n        } else if (s === 'DbRoot') {\r\n            return Types.DBROOT;\r\n        }\r\n    };\r\n\r\n    function decodeGoogleEarthEnterprisePacket(parameters, transferableObjects) {\r\n        var type = Types.fromString(parameters.type);\r\n        var buffer = parameters.buffer;\r\n        decodeGoogleEarthEnterpriseData(parameters.key, buffer);\r\n\r\n        var uncompressedTerrain = uncompressPacket(buffer);\r\n        buffer = uncompressedTerrain.buffer;\r\n        var length = uncompressedTerrain.length;\r\n\r\n        switch (type) {\r\n            case Types.METADATA:\r\n                return processMetadata(buffer, length, parameters.quadKey);\r\n            case Types.TERRAIN:\r\n                return processTerrain(buffer, length, transferableObjects);\r\n            case Types.DBROOT:\r\n                transferableObjects.push(buffer);\r\n                return {\r\n                    buffer : buffer\r\n                };\r\n        }\r\n\r\n    }\r\n\r\n    var qtMagic = 32301;\r\n\r\n    function processMetadata(buffer, totalSize, quadKey) {\r\n        var dv = new DataView(buffer);\r\n        var offset = 0;\r\n        var magic = dv.getUint32(offset, true);\r\n        offset += sizeOfUint32;\r\n        if (magic !== qtMagic) {\r\n            throw new RuntimeError('Invalid magic');\r\n        }\r\n\r\n        var dataTypeId = dv.getUint32(offset, true);\r\n        offset += sizeOfUint32;\r\n        if (dataTypeId !== 1) {\r\n            throw new RuntimeError('Invalid data type. Must be 1 for QuadTreePacket');\r\n        }\r\n\r\n        // Tile format version\r\n        var quadVersion = dv.getUint32(offset, true);\r\n        offset += sizeOfUint32;\r\n        if (quadVersion !== 2) {\r\n            throw new RuntimeError('Invalid QuadTreePacket version. Only version 2 is supported.');\r\n        }\r\n\r\n        var numInstances = dv.getInt32(offset, true);\r\n        offset += sizeOfInt32;\r\n\r\n        var dataInstanceSize = dv.getInt32(offset, true);\r\n        offset += sizeOfInt32;\r\n        if (dataInstanceSize !== 32) {\r\n            throw new RuntimeError('Invalid instance size.');\r\n        }\r\n\r\n        var dataBufferOffset = dv.getInt32(offset, true);\r\n        offset += sizeOfInt32;\r\n\r\n        var dataBufferSize = dv.getInt32(offset, true);\r\n        offset += sizeOfInt32;\r\n\r\n        var metaBufferSize = dv.getInt32(offset, true);\r\n        offset += sizeOfInt32;\r\n\r\n        // Offset from beginning of packet (instances + current offset)\r\n        if (dataBufferOffset !== (numInstances * dataInstanceSize + offset)) {\r\n            throw new RuntimeError('Invalid dataBufferOffset');\r\n        }\r\n\r\n        // Verify the packets is all there header + instances + dataBuffer + metaBuffer\r\n        if (dataBufferOffset + dataBufferSize + metaBufferSize !== totalSize) {\r\n            throw new RuntimeError('Invalid packet offsets');\r\n        }\r\n\r\n        // Read all the instances\r\n        var instances = [];\r\n        for (var i = 0; i < numInstances; ++i) {\r\n            var bitfield = dv.getUint8(offset);\r\n            ++offset;\r\n\r\n            ++offset; // 2 byte align\r\n\r\n            var cnodeVersion = dv.getUint16(offset, true);\r\n            offset += sizeOfUint16;\r\n\r\n            var imageVersion = dv.getUint16(offset, true);\r\n            offset += sizeOfUint16;\r\n\r\n            var terrainVersion = dv.getUint16(offset, true);\r\n            offset += sizeOfUint16;\r\n\r\n            // Number of channels stored in the dataBuffer\r\n            offset += sizeOfUint16;\r\n\r\n            offset += sizeOfUint16; // 4 byte align\r\n\r\n            // Channel type offset into dataBuffer\r\n            offset += sizeOfInt32;\r\n\r\n            // Channel version offset into dataBuffer\r\n            offset += sizeOfInt32;\r\n\r\n            offset += 8; // Ignore image neighbors for now\r\n\r\n            // Data providers\r\n            var imageProvider = dv.getUint8(offset++);\r\n            var terrainProvider = dv.getUint8(offset++);\r\n            offset += sizeOfUint16; // 4 byte align\r\n\r\n            instances.push(new GoogleEarthEnterpriseTileInformation(bitfield, cnodeVersion,\r\n                imageVersion, terrainVersion, imageProvider, terrainProvider));\r\n        }\r\n\r\n        var tileInfo = [];\r\n        var index = 0;\r\n\r\n        function populateTiles(parentKey, parent, level) {\r\n            var isLeaf = false;\r\n            if (level === 4) {\r\n                if (parent.hasSubtree()) {\r\n                    return; // We have a subtree, so just return\r\n                }\r\n\r\n                isLeaf = true; // No subtree, so set all children to null\r\n            }\r\n            for (var i = 0; i < 4; ++i) {\r\n                var childKey = parentKey + i.toString();\r\n                if (isLeaf) {\r\n                    // No subtree so set all children to null\r\n                    tileInfo[childKey] = null;\r\n                } else if (level < 4) {\r\n                    // We are still in the middle of the subtree, so add child\r\n                    //  only if their bits are set, otherwise set child to null.\r\n                    if (!parent.hasChild(i)) {\r\n                        tileInfo[childKey] = null;\r\n                    } else {\r\n                        if (index === numInstances) {\r\n                            console.log('Incorrect number of instances');\r\n                            return;\r\n                        }\r\n\r\n                        var instance = instances[index++];\r\n                        tileInfo[childKey] = instance;\r\n                        populateTiles(childKey, instance, level + 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var level = 0;\r\n        var root = instances[index++];\r\n        if (quadKey === '') {\r\n            // Root tile has data at its root and one less level\r\n            ++level;\r\n        } else {\r\n            tileInfo[quadKey] = root; // This will only contain the child bitmask\r\n        }\r\n\r\n        populateTiles(quadKey, root, level);\r\n\r\n        return tileInfo;\r\n    }\r\n\r\n    function processTerrain(buffer, totalSize, transferableObjects) {\r\n        var dv = new DataView(buffer);\r\n\r\n        var offset = 0;\r\n        var terrainTiles = [];\r\n        while (offset < totalSize) {\r\n            // Each tile is split into 4 parts\r\n            var tileStart = offset;\r\n            for (var quad = 0; quad < 4; ++quad) {\r\n                var size = dv.getUint32(offset, true);\r\n                offset += sizeOfUint32;\r\n                offset += size;\r\n            }\r\n            var tile = buffer.slice(tileStart, offset);\r\n            transferableObjects.push(tile);\r\n            terrainTiles.push(tile);\r\n        }\r\n\r\n        return terrainTiles;\r\n    }\r\n\r\n    var compressedMagic = 0x7468dead;\r\n    var compressedMagicSwap = 0xadde6874;\r\n\r\n    function uncompressPacket(data) {\r\n        // The layout of this decoded data is\r\n        // Magic Uint32\r\n        // Size Uint32\r\n        // [GZipped chunk of Size bytes]\r\n\r\n        // Pullout magic and verify we have the correct data\r\n        var dv = new DataView(data);\r\n        var offset = 0;\r\n        var magic = dv.getUint32(offset, true);\r\n        offset += sizeOfUint32;\r\n        if (magic !== compressedMagic && magic !== compressedMagicSwap) {\r\n            throw new RuntimeError('Invalid magic');\r\n        }\r\n\r\n        // Get the size of the compressed buffer - the endianness depends on which magic was used\r\n        var size = dv.getUint32(offset, (magic === compressedMagic));\r\n        offset += sizeOfUint32;\r\n\r\n        var compressedPacket = new Uint8Array(data, offset);\r\n        var uncompressedPacket = pako.inflate(compressedPacket);\r\n\r\n        if (uncompressedPacket.length !== size) {\r\n            throw new RuntimeError('Size of packet doesn\\'t match header');\r\n        }\r\n\r\n        return uncompressedPacket;\r\n    }\r\n\r\n    return createTaskProcessorWorker(decodeGoogleEarthEnterprisePacket);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/decodeGoogleEarthEnterprisePacket.js\n// module id = 310\n// module chunks = 0","define([\r\n        './Check',\r\n        './RuntimeError'\r\n    ], function(\r\n        Check,\r\n        RuntimeError) {\r\n    'use strict';\r\n\r\n    var compressedMagic = 0x7468dead;\r\n    var compressedMagicSwap = 0xadde6874;\r\n\r\n    /**\r\n     * Decodes data that is received from the Google Earth Enterprise server.\r\n     *\r\n     * @param {ArrayBuffer} key The key used during decoding.\r\n     * @param {ArrayBuffer} data The data to be decoded.\r\n     *\r\n     * @private\r\n     */\r\n    function decodeGoogleEarthEnterpriseData(key, data) {\r\n        if (decodeGoogleEarthEnterpriseData.passThroughDataForTesting) {\r\n            return data;\r\n        }\r\n\r\n        \r\n\r\n        var keyLength = key.byteLength;\r\n        if (keyLength === 0 || (keyLength % 4) !== 0) {\r\n            throw new RuntimeError('The length of key must be greater than 0 and a multiple of 4.');\r\n        }\r\n\r\n        var dataView = new DataView(data);\r\n        var magic = dataView.getUint32(0, true);\r\n        if (magic === compressedMagic || magic === compressedMagicSwap) {\r\n            // Occasionally packets don't come back encoded, so just return\r\n            return data;\r\n        }\r\n\r\n        var keyView = new DataView(key);\r\n\r\n        var dp = 0;\r\n        var dpend = data.byteLength;\r\n        var dpend64 = dpend - (dpend % 8);\r\n        var kpend = keyLength;\r\n        var kp;\r\n        var off = 8;\r\n\r\n        // This algorithm is intentionally asymmetric to make it more difficult to\r\n        // guess. Security through obscurity. :-(\r\n\r\n        // while we have a full uint64 (8 bytes) left to do\r\n        // assumes buffer is 64bit aligned (or processor doesn't care)\r\n        while (dp < dpend64) {\r\n            // rotate the key each time through by using the offets 16,0,8,16,0,8,...\r\n            off = (off + 8) % 24;\r\n            kp = off;\r\n\r\n            // run through one key length xor'ing one uint64 at a time\r\n            // then drop out to rotate the key for the next bit\r\n            while ((dp < dpend64) && (kp < kpend)) {\r\n                dataView.setUint32(dp, dataView.getUint32(dp, true) ^ keyView.getUint32(kp, true), true);\r\n                dataView.setUint32(dp + 4, dataView.getUint32(dp + 4, true) ^ keyView.getUint32(kp + 4, true), true);\r\n                dp += 8;\r\n                kp += 24;\r\n            }\r\n        }\r\n\r\n        // now the remaining 1 to 7 bytes\r\n        if (dp < dpend) {\r\n            if (kp >= kpend) {\r\n                // rotate the key one last time (if necessary)\r\n                off = (off + 8) % 24;\r\n                kp = off;\r\n            }\r\n\r\n            while (dp < dpend) {\r\n                dataView.setUint8(dp, dataView.getUint8(dp) ^ keyView.getUint8(kp));\r\n                dp++;\r\n                kp++;\r\n            }\r\n        }\r\n    }\r\n\r\n    decodeGoogleEarthEnterpriseData.passThroughDataForTesting = false;\r\n\r\n    return decodeGoogleEarthEnterpriseData;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/decodeGoogleEarthEnterpriseData.js\n// module id = 311\n// module chunks = 0","define([\r\n        './defined',\r\n        './isBitSet'\r\n    ], function(\r\n        defined,\r\n        isBitSet) {\r\n    'use strict';\r\n\r\n    // Bitmask for checking tile properties\r\n    var childrenBitmasks = [0x01, 0x02, 0x04, 0x08];\r\n    var anyChildBitmask = 0x0F;\r\n    var cacheFlagBitmask = 0x10; // True if there is a child subtree\r\n    var imageBitmask = 0x40;\r\n    var terrainBitmask = 0x80;\r\n\r\n    /**\r\n     * Contains information about each tile from a Google Earth Enterprise server\r\n     *\r\n     * @param {Number} bits Bitmask that contains the type of data and available children for each tile.\r\n     * @param {Number} cnodeVersion Version of the request for subtree metadata.\r\n     * @param {Number} imageryVersion Version of the request for imagery tile.\r\n     * @param {Number} terrainVersion Version of the request for terrain tile.\r\n     * @param {Number} imageryProvider Id of imagery provider.\r\n     * @param {Number} terrainProvider Id of terrain provider.\r\n     *\r\n     * @private\r\n     */\r\n    function GoogleEarthEnterpriseTileInformation(bits, cnodeVersion, imageryVersion, terrainVersion, imageryProvider, terrainProvider) {\r\n        this._bits = bits;\r\n        this.cnodeVersion = cnodeVersion;\r\n        this.imageryVersion = imageryVersion;\r\n        this.terrainVersion = terrainVersion;\r\n        this.imageryProvider = imageryProvider;\r\n        this.terrainProvider = terrainProvider;\r\n        this.ancestorHasTerrain = false; // Set it later once we find its parent\r\n        this.terrainState = undefined;\r\n    }\r\n\r\n    /**\r\n     * Creates GoogleEarthEnterpriseTileInformation from an object\r\n     *\r\n     * @param {Object} info Object to be cloned\r\n     * @param {GoogleEarthEnterpriseTileInformation} [result] The object onto which to store the result.\r\n     * @returns {GoogleEarthEnterpriseTileInformation} The modified result parameter or a new GoogleEarthEnterpriseTileInformation instance if none was provided.\r\n     */\r\n    GoogleEarthEnterpriseTileInformation.clone = function(info, result) {\r\n        if (!defined(result)) {\r\n            result = new GoogleEarthEnterpriseTileInformation(info._bits, info.cnodeVersion, info.imageryVersion, info.terrainVersion,\r\n                info.imageryProvider, info.terrainProvider);\r\n        } else {\r\n            result._bits = info._bits;\r\n            result.cnodeVersion = info.cnodeVersion;\r\n            result.imageryVersion = info.imageryVersion;\r\n            result.terrainVersion = info.terrainVersion;\r\n            result.imageryProvider = info.imageryProvider;\r\n            result.terrainProvider = info.terrainProvider;\r\n        }\r\n        result.ancestorHasTerrain = info.ancestorHasTerrain;\r\n        result.terrainState = info.terrainState;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Sets the parent for the tile\r\n     *\r\n     * @param {GoogleEarthEnterpriseTileInformation} parent Parent tile\r\n     */\r\n    GoogleEarthEnterpriseTileInformation.prototype.setParent = function(parent) {\r\n        this.ancestorHasTerrain = parent.ancestorHasTerrain || this.hasTerrain();\r\n    };\r\n\r\n    /**\r\n     * Gets whether a subtree is available\r\n     *\r\n     * @returns {Boolean} true if subtree is available, false otherwise.\r\n     */\r\n    GoogleEarthEnterpriseTileInformation.prototype.hasSubtree = function() {\r\n        return isBitSet(this._bits, cacheFlagBitmask);\r\n    };\r\n\r\n    /**\r\n     * Gets whether imagery is available\r\n     *\r\n     * @returns {Boolean} true if imagery is available, false otherwise.\r\n     */\r\n    GoogleEarthEnterpriseTileInformation.prototype.hasImagery = function() {\r\n        return isBitSet(this._bits, imageBitmask);\r\n    };\r\n\r\n    /**\r\n     * Gets whether terrain is available\r\n     *\r\n     * @returns {Boolean} true if terrain is available, false otherwise.\r\n     */\r\n    GoogleEarthEnterpriseTileInformation.prototype.hasTerrain = function() {\r\n        return isBitSet(this._bits, terrainBitmask);\r\n    };\r\n\r\n    /**\r\n     * Gets whether any children are present\r\n     *\r\n     * @returns {Boolean} true if any children are available, false otherwise.\r\n     */\r\n    GoogleEarthEnterpriseTileInformation.prototype.hasChildren = function() {\r\n        return isBitSet(this._bits, anyChildBitmask);\r\n    };\r\n\r\n    /**\r\n     * Gets whether a specified child is available\r\n     *\r\n     * @param {Number} index Index of child tile\r\n     *\r\n     * @returns {Boolean} true if child is available, false otherwise\r\n     */\r\n    GoogleEarthEnterpriseTileInformation.prototype.hasChild = function(index) {\r\n        return isBitSet(this._bits, childrenBitmasks[index]);\r\n    };\r\n\r\n    /**\r\n     * Gets bitmask containing children\r\n     *\r\n     * @returns {Number} Children bitmask\r\n     */\r\n    GoogleEarthEnterpriseTileInformation.prototype.getChildBitmask = function() {\r\n        return this._bits & anyChildBitmask;\r\n    };\r\n\r\n    return GoogleEarthEnterpriseTileInformation;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/GoogleEarthEnterpriseTileInformation.js\n// module id = 312\n// module chunks = 0","define([], function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function isBitSet(bits, mask) {\r\n        return ((bits & mask) !== 0);\r\n    }\r\n\r\n    return isBitSet;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/isBitSet.js\n// module id = 313\n// module chunks = 0","/* pako 1.0.4 nodeca/pako */(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.pako = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n    'use strict';\r\n\r\n\r\n    var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\r\n                    (typeof Uint16Array !== 'undefined') &&\r\n                    (typeof Int32Array !== 'undefined');\r\n\r\n\r\n    exports.assign = function (obj /*from1, from2, from3, ...*/) {\r\n        var sources = Array.prototype.slice.call(arguments, 1);\r\n        while (sources.length) {\r\n            var source = sources.shift();\r\n            if (!source) { continue; }\r\n\r\n            if (typeof source !== 'object') {\r\n                throw new TypeError(source + 'must be non-object');\r\n            }\r\n\r\n            for (var p in source) {\r\n                if (source.hasOwnProperty(p)) {\r\n                    obj[p] = source[p];\r\n                }\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    };\r\n\r\n\r\n// reduce buffer size, avoiding mem copy\r\n    exports.shrinkBuf = function (buf, size) {\r\n        if (buf.length === size) { return buf; }\r\n        if (buf.subarray) { return buf.subarray(0, size); }\r\n        buf.length = size;\r\n        return buf;\r\n    };\r\n\r\n\r\n    var fnTyped = {\r\n        arraySet: function (dest, src, src_offs, len, dest_offs) {\r\n            if (src.subarray && dest.subarray) {\r\n                dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\r\n                return;\r\n            }\r\n            // Fallback to ordinary array\r\n            for (var i = 0; i < len; i++) {\r\n                dest[dest_offs + i] = src[src_offs + i];\r\n            }\r\n        },\r\n        // Join array of chunks to single array.\r\n        flattenChunks: function (chunks) {\r\n            var i, l, len, pos, chunk, result;\r\n\r\n            // calculate data length\r\n            len = 0;\r\n            for (i = 0, l = chunks.length; i < l; i++) {\r\n                len += chunks[i].length;\r\n            }\r\n\r\n            // join chunks\r\n            result = new Uint8Array(len);\r\n            pos = 0;\r\n            for (i = 0, l = chunks.length; i < l; i++) {\r\n                chunk = chunks[i];\r\n                result.set(chunk, pos);\r\n                pos += chunk.length;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    };\r\n\r\n    var fnUntyped = {\r\n        arraySet: function (dest, src, src_offs, len, dest_offs) {\r\n            for (var i = 0; i < len; i++) {\r\n                dest[dest_offs + i] = src[src_offs + i];\r\n            }\r\n        },\r\n        // Join array of chunks to single array.\r\n        flattenChunks: function (chunks) {\r\n            return [].concat.apply([], chunks);\r\n        }\r\n    };\r\n\r\n\r\n// Enable/Disable typed arrays use, for testing\r\n//\r\n    exports.setTyped = function (on) {\r\n        if (on) {\r\n            exports.Buf8  = Uint8Array;\r\n            exports.Buf16 = Uint16Array;\r\n            exports.Buf32 = Int32Array;\r\n            exports.assign(exports, fnTyped);\r\n        } else {\r\n            exports.Buf8  = Array;\r\n            exports.Buf16 = Array;\r\n            exports.Buf32 = Array;\r\n            exports.assign(exports, fnUntyped);\r\n        }\r\n    };\r\n\r\n    exports.setTyped(TYPED_OK);\r\n\r\n},{}],2:[function(require,module,exports){\r\n// String encode/decode helpers\r\n    'use strict';\r\n\r\n\r\n    var utils = require('./common');\r\n\r\n\r\n// Quick check if we can use fast array to bin string conversion\r\n//\r\n// - apply(Array) can fail on Android 2.2\r\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\r\n//\r\n    var STR_APPLY_OK = true;\r\n    var STR_APPLY_UIA_OK = true;\r\n\r\n    try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\r\n    try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\r\n\r\n\r\n// Table with utf8 lengths (calculated by first byte of sequence)\r\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\r\n// because max possible codepoint is 0x10ffff\r\n    var _utf8len = new utils.Buf8(256);\r\n    for (var q = 0; q < 256; q++) {\r\n        _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\r\n    }\r\n    _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\r\n\r\n\r\n// convert string to array (typed, when possible)\r\n    exports.string2buf = function (str) {\r\n        var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\r\n\r\n        // count binary size\r\n        for (m_pos = 0; m_pos < str_len; m_pos++) {\r\n            c = str.charCodeAt(m_pos);\r\n            if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\r\n                c2 = str.charCodeAt(m_pos + 1);\r\n                if ((c2 & 0xfc00) === 0xdc00) {\r\n                    c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\r\n                    m_pos++;\r\n                }\r\n            }\r\n            buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\r\n        }\r\n\r\n        // allocate buffer\r\n        buf = new utils.Buf8(buf_len);\r\n\r\n        // convert\r\n        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\r\n            c = str.charCodeAt(m_pos);\r\n            if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\r\n                c2 = str.charCodeAt(m_pos + 1);\r\n                if ((c2 & 0xfc00) === 0xdc00) {\r\n                    c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\r\n                    m_pos++;\r\n                }\r\n            }\r\n            if (c < 0x80) {\r\n                /* one byte */\r\n                buf[i++] = c;\r\n            } else if (c < 0x800) {\r\n                /* two bytes */\r\n                buf[i++] = 0xC0 | (c >>> 6);\r\n                buf[i++] = 0x80 | (c & 0x3f);\r\n            } else if (c < 0x10000) {\r\n                /* three bytes */\r\n                buf[i++] = 0xE0 | (c >>> 12);\r\n                buf[i++] = 0x80 | (c >>> 6 & 0x3f);\r\n                buf[i++] = 0x80 | (c & 0x3f);\r\n            } else {\r\n                /* four bytes */\r\n                buf[i++] = 0xf0 | (c >>> 18);\r\n                buf[i++] = 0x80 | (c >>> 12 & 0x3f);\r\n                buf[i++] = 0x80 | (c >>> 6 & 0x3f);\r\n                buf[i++] = 0x80 | (c & 0x3f);\r\n            }\r\n        }\r\n\r\n        return buf;\r\n    };\r\n\r\n// Helper (used in 2 places)\r\n    function buf2binstring(buf, len) {\r\n        // use fallback for big arrays to avoid stack overflow\r\n        if (len < 65537) {\r\n            if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\r\n                return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\r\n            }\r\n        }\r\n\r\n        var result = '';\r\n        for (var i = 0; i < len; i++) {\r\n            result += String.fromCharCode(buf[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n// Convert byte array to binary string\r\n    exports.buf2binstring = function (buf) {\r\n        return buf2binstring(buf, buf.length);\r\n    };\r\n\r\n\r\n// Convert binary string (typed, when possible)\r\n    exports.binstring2buf = function (str) {\r\n        var buf = new utils.Buf8(str.length);\r\n        for (var i = 0, len = buf.length; i < len; i++) {\r\n            buf[i] = str.charCodeAt(i);\r\n        }\r\n        return buf;\r\n    };\r\n\r\n\r\n// convert array to string\r\n    exports.buf2string = function (buf, max) {\r\n        var i, out, c, c_len;\r\n        var len = max || buf.length;\r\n\r\n        // Reserve max possible length (2 words per char)\r\n        // NB: by unknown reasons, Array is significantly faster for\r\n        //     String.fromCharCode.apply than Uint16Array.\r\n        var utf16buf = new Array(len * 2);\r\n\r\n        for (out = 0, i = 0; i < len;) {\r\n            c = buf[i++];\r\n            // quick process ascii\r\n            if (c < 0x80) { utf16buf[out++] = c; continue; }\r\n\r\n            c_len = _utf8len[c];\r\n            // skip 5 & 6 byte codes\r\n            if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\r\n\r\n            // apply mask on first byte\r\n            c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\r\n            // join the rest\r\n            while (c_len > 1 && i < len) {\r\n                c = (c << 6) | (buf[i++] & 0x3f);\r\n                c_len--;\r\n            }\r\n\r\n            // terminated by end of string?\r\n            if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\r\n\r\n            if (c < 0x10000) {\r\n                utf16buf[out++] = c;\r\n            } else {\r\n                c -= 0x10000;\r\n                utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\r\n                utf16buf[out++] = 0xdc00 | (c & 0x3ff);\r\n            }\r\n        }\r\n\r\n        return buf2binstring(utf16buf, out);\r\n    };\r\n\r\n\r\n// Calculate max possible position in utf8 buffer,\r\n// that will not break sequence. If that's not possible\r\n// - (very small limits) return max size as is.\r\n//\r\n// buf[] - utf8 bytes array\r\n// max   - length limit (mandatory);\r\n    exports.utf8border = function (buf, max) {\r\n        var pos;\r\n\r\n        max = max || buf.length;\r\n        if (max > buf.length) { max = buf.length; }\r\n\r\n        // go back from last position, until start of sequence found\r\n        pos = max - 1;\r\n        while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\r\n\r\n        // Fuckup - very small and broken sequence,\r\n        // return max, because we should return something anyway.\r\n        if (pos < 0) { return max; }\r\n\r\n        // If we came to start of buffer - that means vuffer is too small,\r\n        // return max too.\r\n        if (pos === 0) { return max; }\r\n\r\n        return (pos + _utf8len[buf[pos]] > max) ? pos : max;\r\n    };\r\n\r\n},{\"./common\":1}],3:[function(require,module,exports){\r\n    'use strict';\r\n\r\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\r\n// It doesn't worth to make additional optimizationa as in original.\r\n// Small size is preferable.\r\n\r\n    function adler32(adler, buf, len, pos) {\r\n        var s1 = (adler & 0xffff) |0,\r\n            s2 = ((adler >>> 16) & 0xffff) |0,\r\n            n = 0;\r\n\r\n        while (len !== 0) {\r\n            // Set limit ~ twice less than 5552, to keep\r\n            // s2 in 31-bits, because we force signed ints.\r\n            // in other case %= will fail.\r\n            n = len > 2000 ? 2000 : len;\r\n            len -= n;\r\n\r\n            do {\r\n                s1 = (s1 + buf[pos++]) |0;\r\n                s2 = (s2 + s1) |0;\r\n            } while (--n);\r\n\r\n            s1 %= 65521;\r\n            s2 %= 65521;\r\n        }\r\n\r\n        return (s1 | (s2 << 16)) |0;\r\n    }\r\n\r\n\r\n    module.exports = adler32;\r\n\r\n},{}],4:[function(require,module,exports){\r\n    'use strict';\r\n\r\n\r\n    module.exports = {\r\n\r\n        /* Allowed flush values; see deflate() and inflate() below for details */\r\n        Z_NO_FLUSH:         0,\r\n        Z_PARTIAL_FLUSH:    1,\r\n        Z_SYNC_FLUSH:       2,\r\n        Z_FULL_FLUSH:       3,\r\n        Z_FINISH:           4,\r\n        Z_BLOCK:            5,\r\n        Z_TREES:            6,\r\n\r\n        /* Return codes for the compression/decompression functions. Negative values\r\n         * are errors, positive values are used for special but normal events.\r\n         */\r\n        Z_OK:               0,\r\n        Z_STREAM_END:       1,\r\n        Z_NEED_DICT:        2,\r\n        Z_ERRNO:           -1,\r\n        Z_STREAM_ERROR:    -2,\r\n        Z_DATA_ERROR:      -3,\r\n        //Z_MEM_ERROR:     -4,\r\n        Z_BUF_ERROR:       -5,\r\n        //Z_VERSION_ERROR: -6,\r\n\r\n        /* compression levels */\r\n        Z_NO_COMPRESSION:         0,\r\n        Z_BEST_SPEED:             1,\r\n        Z_BEST_COMPRESSION:       9,\r\n        Z_DEFAULT_COMPRESSION:   -1,\r\n\r\n\r\n        Z_FILTERED:               1,\r\n        Z_HUFFMAN_ONLY:           2,\r\n        Z_RLE:                    3,\r\n        Z_FIXED:                  4,\r\n        Z_DEFAULT_STRATEGY:       0,\r\n\r\n        /* Possible values of the data_type field (though see inflate()) */\r\n        Z_BINARY:                 0,\r\n        Z_TEXT:                   1,\r\n        //Z_ASCII:                1, // = Z_TEXT (deprecated)\r\n        Z_UNKNOWN:                2,\r\n\r\n        /* The deflate compression method */\r\n        Z_DEFLATED:               8\r\n        //Z_NULL:                 null // Use -1 or null inline, depending on var type\r\n    };\r\n\r\n},{}],5:[function(require,module,exports){\r\n    'use strict';\r\n\r\n// Note: we can't get significant speed boost here.\r\n// So write code to minimize size - no pregenerated tables\r\n// and array tools dependencies.\r\n\r\n\r\n// Use ordinary array, since untyped makes no boost here\r\n    function makeTable() {\r\n        var c, table = [];\r\n\r\n        for (var n = 0; n < 256; n++) {\r\n            c = n;\r\n            for (var k = 0; k < 8; k++) {\r\n                c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\r\n            }\r\n            table[n] = c;\r\n        }\r\n\r\n        return table;\r\n    }\r\n\r\n// Create table on load. Just 255 signed longs. Not a problem.\r\n    var crcTable = makeTable();\r\n\r\n\r\n    function crc32(crc, buf, len, pos) {\r\n        var t = crcTable,\r\n            end = pos + len;\r\n\r\n        crc ^= -1;\r\n\r\n        for (var i = pos; i < end; i++) {\r\n            crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\r\n        }\r\n\r\n        return (crc ^ (-1)); // >>> 0;\r\n    }\r\n\r\n\r\n    module.exports = crc32;\r\n\r\n},{}],6:[function(require,module,exports){\r\n    'use strict';\r\n\r\n\r\n    function GZheader() {\r\n        /* true if compressed data believed to be text */\r\n        this.text       = 0;\r\n        /* modification time */\r\n        this.time       = 0;\r\n        /* extra flags (not used when writing a gzip file) */\r\n        this.xflags     = 0;\r\n        /* operating system */\r\n        this.os         = 0;\r\n        /* pointer to extra field or Z_NULL if none */\r\n        this.extra      = null;\r\n        /* extra field length (valid if extra != Z_NULL) */\r\n        this.extra_len  = 0; // Actually, we don't need it in JS,\r\n                             // but leave for few code modifications\r\n\r\n        //\r\n        // Setup limits is not necessary because in js we should not preallocate memory\r\n        // for inflate use constant limit in 65536 bytes\r\n        //\r\n\r\n        /* space at extra (only when reading header) */\r\n        // this.extra_max  = 0;\r\n        /* pointer to zero-terminated file name or Z_NULL */\r\n        this.name       = '';\r\n        /* space at name (only when reading header) */\r\n        // this.name_max   = 0;\r\n        /* pointer to zero-terminated comment or Z_NULL */\r\n        this.comment    = '';\r\n        /* space at comment (only when reading header) */\r\n        // this.comm_max   = 0;\r\n        /* true if there was or will be a header crc */\r\n        this.hcrc       = 0;\r\n        /* true when done reading gzip header (not used when writing a gzip file) */\r\n        this.done       = false;\r\n    }\r\n\r\n    module.exports = GZheader;\r\n\r\n},{}],7:[function(require,module,exports){\r\n    'use strict';\r\n\r\n// See state defs from inflate.js\r\n    var BAD = 30;       /* got a data error -- remain here until reset */\r\n    var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\r\n\r\n    /*\r\n     Decode literal, length, and distance codes and write out the resulting\r\n     literal and match bytes until either not enough input or output is\r\n     available, an end-of-block is encountered, or a data error is encountered.\r\n     When large enough input and output buffers are supplied to inflate(), for\r\n     example, a 16K input buffer and a 64K output buffer, more than 95% of the\r\n     inflate execution time is spent in this routine.\r\n\r\n     Entry assumptions:\r\n\r\n     state.mode === LEN\r\n     strm.avail_in >= 6\r\n     strm.avail_out >= 258\r\n     start >= strm.avail_out\r\n     state.bits < 8\r\n\r\n     On return, state.mode is one of:\r\n\r\n     LEN -- ran out of enough output space or enough available input\r\n     TYPE -- reached end of block code, inflate() to interpret next block\r\n     BAD -- error in block data\r\n\r\n     Notes:\r\n\r\n     - The maximum input bits used by a length/distance pair is 15 bits for the\r\n     length code, 5 bits for the length extra, 15 bits for the distance code,\r\n     and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\r\n     Therefore if strm.avail_in >= 6, then there is enough input to avoid\r\n     checking for available input while decoding.\r\n\r\n     - The maximum bytes that a single length/distance pair can output is 258\r\n     bytes, which is the maximum length that can be coded.  inflate_fast()\r\n     requires strm.avail_out >= 258 for each loop to avoid checking for\r\n     output space.\r\n     */\r\n    module.exports = function inflate_fast(strm, start) {\r\n        var state;\r\n        var _in;                    /* local strm.input */\r\n        var last;                   /* have enough input while in < last */\r\n        var _out;                   /* local strm.output */\r\n        var beg;                    /* inflate()'s initial strm.output */\r\n        var end;                    /* while out < end, enough space available */\r\n//#ifdef INFLATE_STRICT\r\n        var dmax;                   /* maximum distance from zlib header */\r\n//#endif\r\n        var wsize;                  /* window size or zero if not using window */\r\n        var whave;                  /* valid bytes in the window */\r\n        var wnext;                  /* window write index */\r\n        // Use `s_window` instead `window`, avoid conflict with instrumentation tools\r\n        var s_window;               /* allocated sliding window, if wsize != 0 */\r\n        var hold;                   /* local strm.hold */\r\n        var bits;                   /* local strm.bits */\r\n        var lcode;                  /* local strm.lencode */\r\n        var dcode;                  /* local strm.distcode */\r\n        var lmask;                  /* mask for first level of length codes */\r\n        var dmask;                  /* mask for first level of distance codes */\r\n        var here;                   /* retrieved table entry */\r\n        var op;                     /* code bits, operation, extra bits, or */\r\n        /*  window position, window bytes to copy */\r\n        var len;                    /* match length, unused bytes */\r\n        var dist;                   /* match distance */\r\n        var from;                   /* where to copy match from */\r\n        var from_source;\r\n\r\n\r\n        var input, output; // JS specific, because we have no pointers\r\n\r\n        /* copy state to local variables */\r\n        state = strm.state;\r\n        //here = state.here;\r\n        _in = strm.next_in;\r\n        input = strm.input;\r\n        last = _in + (strm.avail_in - 5);\r\n        _out = strm.next_out;\r\n        output = strm.output;\r\n        beg = _out - (start - strm.avail_out);\r\n        end = _out + (strm.avail_out - 257);\r\n//#ifdef INFLATE_STRICT\r\n        dmax = state.dmax;\r\n//#endif\r\n        wsize = state.wsize;\r\n        whave = state.whave;\r\n        wnext = state.wnext;\r\n        s_window = state.window;\r\n        hold = state.hold;\r\n        bits = state.bits;\r\n        lcode = state.lencode;\r\n        dcode = state.distcode;\r\n        lmask = (1 << state.lenbits) - 1;\r\n        dmask = (1 << state.distbits) - 1;\r\n\r\n\r\n        /* decode literals and length/distances until end-of-block or not enough\r\n         input data or output space */\r\n\r\n        top:\r\n            do {\r\n                if (bits < 15) {\r\n                    hold += input[_in++] << bits;\r\n                    bits += 8;\r\n                    hold += input[_in++] << bits;\r\n                    bits += 8;\r\n                }\r\n\r\n                here = lcode[hold & lmask];\r\n\r\n                dolen:\r\n                    for (;;) { // Goto emulation\r\n                        op = here >>> 24/*here.bits*/;\r\n                        hold >>>= op;\r\n                        bits -= op;\r\n                        op = (here >>> 16) & 0xff/*here.op*/;\r\n                        if (op === 0) {                          /* literal */\r\n                            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\r\n                            //        \"inflate:         literal '%c'\\n\" :\r\n                            //        \"inflate:         literal 0x%02x\\n\", here.val));\r\n                            output[_out++] = here & 0xffff/*here.val*/;\r\n                        }\r\n                        else if (op & 16) {                     /* length base */\r\n                            len = here & 0xffff/*here.val*/;\r\n                            op &= 15;                           /* number of extra bits */\r\n                            if (op) {\r\n                                if (bits < op) {\r\n                                    hold += input[_in++] << bits;\r\n                                    bits += 8;\r\n                                }\r\n                                len += hold & ((1 << op) - 1);\r\n                                hold >>>= op;\r\n                                bits -= op;\r\n                            }\r\n                            //Tracevv((stderr, \"inflate:         length %u\\n\", len));\r\n                            if (bits < 15) {\r\n                                hold += input[_in++] << bits;\r\n                                bits += 8;\r\n                                hold += input[_in++] << bits;\r\n                                bits += 8;\r\n                            }\r\n                            here = dcode[hold & dmask];\r\n\r\n                            dodist:\r\n                                for (;;) { // goto emulation\r\n                                    op = here >>> 24/*here.bits*/;\r\n                                    hold >>>= op;\r\n                                    bits -= op;\r\n                                    op = (here >>> 16) & 0xff/*here.op*/;\r\n\r\n                                    if (op & 16) {                      /* distance base */\r\n                                        dist = here & 0xffff/*here.val*/;\r\n                                        op &= 15;                       /* number of extra bits */\r\n                                        if (bits < op) {\r\n                                            hold += input[_in++] << bits;\r\n                                            bits += 8;\r\n                                            if (bits < op) {\r\n                                                hold += input[_in++] << bits;\r\n                                                bits += 8;\r\n                                            }\r\n                                        }\r\n                                        dist += hold & ((1 << op) - 1);\r\n//#ifdef INFLATE_STRICT\r\n                                        if (dist > dmax) {\r\n                                            strm.msg = 'invalid distance too far back';\r\n                                            state.mode = BAD;\r\n                                            break top;\r\n                                        }\r\n//#endif\r\n                                        hold >>>= op;\r\n                                        bits -= op;\r\n                                        //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\r\n                                        op = _out - beg;                /* max distance in output */\r\n                                        if (dist > op) {                /* see if copy from window */\r\n                                            op = dist - op;               /* distance back in window */\r\n                                            if (op > whave) {\r\n                                                if (state.sane) {\r\n                                                    strm.msg = 'invalid distance too far back';\r\n                                                    state.mode = BAD;\r\n                                                    break top;\r\n                                                }\r\n\r\n// (!) This block is disabled in zlib defailts,\r\n// don't enable it for binary compatibility\r\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\r\n//                if (len <= op - whave) {\r\n//                  do {\r\n//                    output[_out++] = 0;\r\n//                  } while (--len);\r\n//                  continue top;\r\n//                }\r\n//                len -= op - whave;\r\n//                do {\r\n//                  output[_out++] = 0;\r\n//                } while (--op > whave);\r\n//                if (op === 0) {\r\n//                  from = _out - dist;\r\n//                  do {\r\n//                    output[_out++] = output[from++];\r\n//                  } while (--len);\r\n//                  continue top;\r\n//                }\r\n//#endif\r\n                                            }\r\n                                            from = 0; // window index\r\n                                            from_source = s_window;\r\n                                            if (wnext === 0) {           /* very common case */\r\n                                                from += wsize - op;\r\n                                                if (op < len) {         /* some from window */\r\n                                                    len -= op;\r\n                                                    do {\r\n                                                        output[_out++] = s_window[from++];\r\n                                                    } while (--op);\r\n                                                    from = _out - dist;  /* rest from output */\r\n                                                    from_source = output;\r\n                                                }\r\n                                            }\r\n                                            else if (wnext < op) {      /* wrap around window */\r\n                                                from += wsize + wnext - op;\r\n                                                op -= wnext;\r\n                                                if (op < len) {         /* some from end of window */\r\n                                                    len -= op;\r\n                                                    do {\r\n                                                        output[_out++] = s_window[from++];\r\n                                                    } while (--op);\r\n                                                    from = 0;\r\n                                                    if (wnext < len) {  /* some from start of window */\r\n                                                        op = wnext;\r\n                                                        len -= op;\r\n                                                        do {\r\n                                                            output[_out++] = s_window[from++];\r\n                                                        } while (--op);\r\n                                                        from = _out - dist;      /* rest from output */\r\n                                                        from_source = output;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            else {                      /* contiguous in window */\r\n                                                from += wnext - op;\r\n                                                if (op < len) {         /* some from window */\r\n                                                    len -= op;\r\n                                                    do {\r\n                                                        output[_out++] = s_window[from++];\r\n                                                    } while (--op);\r\n                                                    from = _out - dist;  /* rest from output */\r\n                                                    from_source = output;\r\n                                                }\r\n                                            }\r\n                                            while (len > 2) {\r\n                                                output[_out++] = from_source[from++];\r\n                                                output[_out++] = from_source[from++];\r\n                                                output[_out++] = from_source[from++];\r\n                                                len -= 3;\r\n                                            }\r\n                                            if (len) {\r\n                                                output[_out++] = from_source[from++];\r\n                                                if (len > 1) {\r\n                                                    output[_out++] = from_source[from++];\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            from = _out - dist;          /* copy direct from output */\r\n                                            do {                        /* minimum length is three */\r\n                                                output[_out++] = output[from++];\r\n                                                output[_out++] = output[from++];\r\n                                                output[_out++] = output[from++];\r\n                                                len -= 3;\r\n                                            } while (len > 2);\r\n                                            if (len) {\r\n                                                output[_out++] = output[from++];\r\n                                                if (len > 1) {\r\n                                                    output[_out++] = output[from++];\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else if ((op & 64) === 0) {          /* 2nd level distance code */\r\n                                        here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\r\n                                        continue dodist;\r\n                                    }\r\n                                    else {\r\n                                        strm.msg = 'invalid distance code';\r\n                                        state.mode = BAD;\r\n                                        break top;\r\n                                    }\r\n\r\n                                    break; // need to emulate goto via \"continue\"\r\n                                }\r\n                        }\r\n                        else if ((op & 64) === 0) {              /* 2nd level length code */\r\n                            here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\r\n                            continue dolen;\r\n                        }\r\n                        else if (op & 32) {                     /* end-of-block */\r\n                            //Tracevv((stderr, \"inflate:         end of block\\n\"));\r\n                            state.mode = TYPE;\r\n                            break top;\r\n                        }\r\n                        else {\r\n                            strm.msg = 'invalid literal/length code';\r\n                            state.mode = BAD;\r\n                            break top;\r\n                        }\r\n\r\n                        break; // need to emulate goto via \"continue\"\r\n                    }\r\n            } while (_in < last && _out < end);\r\n\r\n        /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\r\n        len = bits >> 3;\r\n        _in -= len;\r\n        bits -= len << 3;\r\n        hold &= (1 << bits) - 1;\r\n\r\n        /* update state and return */\r\n        strm.next_in = _in;\r\n        strm.next_out = _out;\r\n        strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\r\n        strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\r\n        state.hold = hold;\r\n        state.bits = bits;\r\n        return;\r\n    };\r\n\r\n},{}],8:[function(require,module,exports){\r\n    'use strict';\r\n\r\n\r\n    var utils         = require('../utils/common');\r\n    var adler32       = require('./adler32');\r\n    var crc32         = require('./crc32');\r\n    var inflate_fast  = require('./inffast');\r\n    var inflate_table = require('./inftrees');\r\n\r\n    var CODES = 0;\r\n    var LENS = 1;\r\n    var DISTS = 2;\r\n\r\n    /* Public constants ==========================================================*/\r\n    /* ===========================================================================*/\r\n\r\n\r\n    /* Allowed flush values; see deflate() and inflate() below for details */\r\n//var Z_NO_FLUSH      = 0;\r\n//var Z_PARTIAL_FLUSH = 1;\r\n//var Z_SYNC_FLUSH    = 2;\r\n//var Z_FULL_FLUSH    = 3;\r\n    var Z_FINISH        = 4;\r\n    var Z_BLOCK         = 5;\r\n    var Z_TREES         = 6;\r\n\r\n\r\n    /* Return codes for the compression/decompression functions. Negative values\r\n     * are errors, positive values are used for special but normal events.\r\n     */\r\n    var Z_OK            = 0;\r\n    var Z_STREAM_END    = 1;\r\n    var Z_NEED_DICT     = 2;\r\n//var Z_ERRNO         = -1;\r\n    var Z_STREAM_ERROR  = -2;\r\n    var Z_DATA_ERROR    = -3;\r\n    var Z_MEM_ERROR     = -4;\r\n    var Z_BUF_ERROR     = -5;\r\n//var Z_VERSION_ERROR = -6;\r\n\r\n    /* The deflate compression method */\r\n    var Z_DEFLATED  = 8;\r\n\r\n\r\n    /* STATES ====================================================================*/\r\n    /* ===========================================================================*/\r\n\r\n\r\n    var    HEAD = 1;       /* i: waiting for magic header */\r\n    var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\r\n    var    TIME = 3;       /* i: waiting for modification time (gzip) */\r\n    var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\r\n    var    EXLEN = 5;      /* i: waiting for extra length (gzip) */\r\n    var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\r\n    var    NAME = 7;       /* i: waiting for end of file name (gzip) */\r\n    var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\r\n    var    HCRC = 9;       /* i: waiting for header crc (gzip) */\r\n    var    DICTID = 10;    /* i: waiting for dictionary check value */\r\n    var    DICT = 11;      /* waiting for inflateSetDictionary() call */\r\n    var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\r\n    var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\r\n    var        STORED = 14;    /* i: waiting for stored size (length and complement) */\r\n    var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\r\n    var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\r\n    var        TABLE = 17;     /* i: waiting for dynamic block table lengths */\r\n    var        LENLENS = 18;   /* i: waiting for code length code lengths */\r\n    var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\r\n    var            LEN_ = 20;      /* i: same as LEN below, but only first time in */\r\n    var            LEN = 21;       /* i: waiting for length/lit/eob code */\r\n    var            LENEXT = 22;    /* i: waiting for length extra bits */\r\n    var            DIST = 23;      /* i: waiting for distance code */\r\n    var            DISTEXT = 24;   /* i: waiting for distance extra bits */\r\n    var            MATCH = 25;     /* o: waiting for output space to copy string */\r\n    var            LIT = 26;       /* o: waiting for output space to write literal */\r\n    var    CHECK = 27;     /* i: waiting for 32-bit check value */\r\n    var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\r\n    var    DONE = 29;      /* finished check, done -- remain here until reset */\r\n    var    BAD = 30;       /* got a data error -- remain here until reset */\r\n    var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\r\n    var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\r\n\r\n    /* ===========================================================================*/\r\n\r\n\r\n\r\n    var ENOUGH_LENS = 852;\r\n    var ENOUGH_DISTS = 592;\r\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\r\n\r\n    var MAX_WBITS = 15;\r\n    /* 32K LZ77 window */\r\n    var DEF_WBITS = MAX_WBITS;\r\n\r\n\r\n    function zswap32(q) {\r\n        return  (((q >>> 24) & 0xff) +\r\n                 ((q >>> 8) & 0xff00) +\r\n                 ((q & 0xff00) << 8) +\r\n                 ((q & 0xff) << 24));\r\n    }\r\n\r\n\r\n    function InflateState() {\r\n        this.mode = 0;             /* current inflate mode */\r\n        this.last = false;          /* true if processing last block */\r\n        this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\r\n        this.havedict = false;      /* true if dictionary provided */\r\n        this.flags = 0;             /* gzip header method and flags (0 if zlib) */\r\n        this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\r\n        this.check = 0;             /* protected copy of check value */\r\n        this.total = 0;             /* protected copy of output count */\r\n        // TODO: may be {}\r\n        this.head = null;           /* where to save gzip header information */\r\n\r\n        /* sliding window */\r\n        this.wbits = 0;             /* log base 2 of requested window size */\r\n        this.wsize = 0;             /* window size or zero if not using window */\r\n        this.whave = 0;             /* valid bytes in the window */\r\n        this.wnext = 0;             /* window write index */\r\n        this.window = null;         /* allocated sliding window, if needed */\r\n\r\n        /* bit accumulator */\r\n        this.hold = 0;              /* input bit accumulator */\r\n        this.bits = 0;              /* number of bits in \"in\" */\r\n\r\n        /* for string and stored block copying */\r\n        this.length = 0;            /* literal or length of data to copy */\r\n        this.offset = 0;            /* distance back to copy string from */\r\n\r\n        /* for table and code decoding */\r\n        this.extra = 0;             /* extra bits needed */\r\n\r\n        /* fixed and dynamic code tables */\r\n        this.lencode = null;          /* starting table for length/literal codes */\r\n        this.distcode = null;         /* starting table for distance codes */\r\n        this.lenbits = 0;           /* index bits for lencode */\r\n        this.distbits = 0;          /* index bits for distcode */\r\n\r\n        /* dynamic table building */\r\n        this.ncode = 0;             /* number of code length code lengths */\r\n        this.nlen = 0;              /* number of length code lengths */\r\n        this.ndist = 0;             /* number of distance code lengths */\r\n        this.have = 0;              /* number of code lengths in lens[] */\r\n        this.next = null;              /* next available space in codes[] */\r\n\r\n        this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\r\n        this.work = new utils.Buf16(288); /* work area for code table building */\r\n\r\n        /*\r\n         because we don't have pointers in js, we use lencode and distcode directly\r\n         as buffers so we don't need codes\r\n         */\r\n        //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\r\n        this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\r\n        this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\r\n        this.sane = 0;                   /* if false, allow invalid distance too far */\r\n        this.back = 0;                   /* bits back of last unprocessed length/lit */\r\n        this.was = 0;                    /* initial length of match */\r\n    }\r\n\r\n    function inflateResetKeep(strm) {\r\n        var state;\r\n\r\n        if (!strm || !strm.state) { return Z_STREAM_ERROR; }\r\n        state = strm.state;\r\n        strm.total_in = strm.total_out = state.total = 0;\r\n        strm.msg = ''; /*Z_NULL*/\r\n        if (state.wrap) {       /* to support ill-conceived Java test suite */\r\n            strm.adler = state.wrap & 1;\r\n        }\r\n        state.mode = HEAD;\r\n        state.last = 0;\r\n        state.havedict = 0;\r\n        state.dmax = 32768;\r\n        state.head = null/*Z_NULL*/;\r\n        state.hold = 0;\r\n        state.bits = 0;\r\n        //state.lencode = state.distcode = state.next = state.codes;\r\n        state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\r\n        state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\r\n\r\n        state.sane = 1;\r\n        state.back = -1;\r\n        //Tracev((stderr, \"inflate: reset\\n\"));\r\n        return Z_OK;\r\n    }\r\n\r\n    function inflateReset(strm) {\r\n        var state;\r\n\r\n        if (!strm || !strm.state) { return Z_STREAM_ERROR; }\r\n        state = strm.state;\r\n        state.wsize = 0;\r\n        state.whave = 0;\r\n        state.wnext = 0;\r\n        return inflateResetKeep(strm);\r\n\r\n    }\r\n\r\n    function inflateReset2(strm, windowBits) {\r\n        var wrap;\r\n        var state;\r\n\r\n        /* get the state */\r\n        if (!strm || !strm.state) { return Z_STREAM_ERROR; }\r\n        state = strm.state;\r\n\r\n        /* extract wrap request from windowBits parameter */\r\n        if (windowBits < 0) {\r\n            wrap = 0;\r\n            windowBits = -windowBits;\r\n        }\r\n        else {\r\n            wrap = (windowBits >> 4) + 1;\r\n            if (windowBits < 48) {\r\n                windowBits &= 15;\r\n            }\r\n        }\r\n\r\n        /* set number of window bits, free window if different */\r\n        if (windowBits && (windowBits < 8 || windowBits > 15)) {\r\n            return Z_STREAM_ERROR;\r\n        }\r\n        if (state.window !== null && state.wbits !== windowBits) {\r\n            state.window = null;\r\n        }\r\n\r\n        /* update state and reset the rest of it */\r\n        state.wrap = wrap;\r\n        state.wbits = windowBits;\r\n        return inflateReset(strm);\r\n    }\r\n\r\n    function inflateInit2(strm, windowBits) {\r\n        var ret;\r\n        var state;\r\n\r\n        if (!strm) { return Z_STREAM_ERROR; }\r\n        //strm.msg = Z_NULL;                 /* in case we return an error */\r\n\r\n        state = new InflateState();\r\n\r\n        //if (state === Z_NULL) return Z_MEM_ERROR;\r\n        //Tracev((stderr, \"inflate: allocated\\n\"));\r\n        strm.state = state;\r\n        state.window = null/*Z_NULL*/;\r\n        ret = inflateReset2(strm, windowBits);\r\n        if (ret !== Z_OK) {\r\n            strm.state = null/*Z_NULL*/;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function inflateInit(strm) {\r\n        return inflateInit2(strm, DEF_WBITS);\r\n    }\r\n\r\n\r\n    /*\r\n     Return state with length and distance decoding tables and index sizes set to\r\n     fixed code decoding.  Normally this returns fixed tables from inffixed.h.\r\n     If BUILDFIXED is defined, then instead this routine builds the tables the\r\n     first time it's called, and returns those tables the first time and\r\n     thereafter.  This reduces the size of the code by about 2K bytes, in\r\n     exchange for a little execution time.  However, BUILDFIXED should not be\r\n     used for threaded applications, since the rewriting of the tables and virgin\r\n     may not be thread-safe.\r\n     */\r\n    var virgin = true;\r\n\r\n    var lenfix, distfix; // We have no pointers in JS, so keep tables separate\r\n\r\n    function fixedtables(state) {\r\n        /* build fixed huffman tables if first call (may not be thread safe) */\r\n        if (virgin) {\r\n            var sym;\r\n\r\n            lenfix = new utils.Buf32(512);\r\n            distfix = new utils.Buf32(32);\r\n\r\n            /* literal/length table */\r\n            sym = 0;\r\n            while (sym < 144) { state.lens[sym++] = 8; }\r\n            while (sym < 256) { state.lens[sym++] = 9; }\r\n            while (sym < 280) { state.lens[sym++] = 7; }\r\n            while (sym < 288) { state.lens[sym++] = 8; }\r\n\r\n            inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\r\n\r\n            /* distance table */\r\n            sym = 0;\r\n            while (sym < 32) { state.lens[sym++] = 5; }\r\n\r\n            inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\r\n\r\n            /* do this just once */\r\n            virgin = false;\r\n        }\r\n\r\n        state.lencode = lenfix;\r\n        state.lenbits = 9;\r\n        state.distcode = distfix;\r\n        state.distbits = 5;\r\n    }\r\n\r\n\r\n    /*\r\n     Update the window with the last wsize (normally 32K) bytes written before\r\n     returning.  If window does not exist yet, create it.  This is only called\r\n     when a window is already in use, or when output has been written during this\r\n     inflate call, but the end of the deflate stream has not been reached yet.\r\n     It is also called to create a window for dictionary data when a dictionary\r\n     is loaded.\r\n\r\n     Providing output buffers larger than 32K to inflate() should provide a speed\r\n     advantage, since only the last 32K of output is copied to the sliding window\r\n     upon return from inflate(), and since all distances after the first 32K of\r\n     output will fall in the output data, making match copies simpler and faster.\r\n     The advantage may be dependent on the size of the processor's data caches.\r\n     */\r\n    function updatewindow(strm, src, end, copy) {\r\n        var dist;\r\n        var state = strm.state;\r\n\r\n        /* if it hasn't been done already, allocate space for the window */\r\n        if (state.window === null) {\r\n            state.wsize = 1 << state.wbits;\r\n            state.wnext = 0;\r\n            state.whave = 0;\r\n\r\n            state.window = new utils.Buf8(state.wsize);\r\n        }\r\n\r\n        /* copy state->wsize or less output bytes into the circular window */\r\n        if (copy >= state.wsize) {\r\n            utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\r\n            state.wnext = 0;\r\n            state.whave = state.wsize;\r\n        }\r\n        else {\r\n            dist = state.wsize - state.wnext;\r\n            if (dist > copy) {\r\n                dist = copy;\r\n            }\r\n            //zmemcpy(state->window + state->wnext, end - copy, dist);\r\n            utils.arraySet(state.window, src, end - copy, dist, state.wnext);\r\n            copy -= dist;\r\n            if (copy) {\r\n                //zmemcpy(state->window, end - copy, copy);\r\n                utils.arraySet(state.window, src, end - copy, copy, 0);\r\n                state.wnext = copy;\r\n                state.whave = state.wsize;\r\n            }\r\n            else {\r\n                state.wnext += dist;\r\n                if (state.wnext === state.wsize) { state.wnext = 0; }\r\n                if (state.whave < state.wsize) { state.whave += dist; }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function inflate(strm, flush) {\r\n        var state;\r\n        var input, output;          // input/output buffers\r\n        var next;                   /* next input INDEX */\r\n        var put;                    /* next output INDEX */\r\n        var have, left;             /* available input and output */\r\n        var hold;                   /* bit buffer */\r\n        var bits;                   /* bits in bit buffer */\r\n        var _in, _out;              /* save starting available input and output */\r\n        var copy;                   /* number of stored or match bytes to copy */\r\n        var from;                   /* where to copy match bytes from */\r\n        var from_source;\r\n        var here = 0;               /* current decoding table entry */\r\n        var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\r\n        //var last;                   /* parent table entry */\r\n        var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\r\n        var len;                    /* length to copy for repeats, bits to drop */\r\n        var ret;                    /* return code */\r\n        var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\r\n        var opts;\r\n\r\n        var n; // temporary var for NEED_BITS\r\n\r\n        var order = /* permutation of code lengths */\r\n            [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\r\n\r\n\r\n        if (!strm || !strm.state || !strm.output ||\r\n            (!strm.input && strm.avail_in !== 0)) {\r\n            return Z_STREAM_ERROR;\r\n        }\r\n\r\n        state = strm.state;\r\n        if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\r\n\r\n\r\n        //--- LOAD() ---\r\n        put = strm.next_out;\r\n        output = strm.output;\r\n        left = strm.avail_out;\r\n        next = strm.next_in;\r\n        input = strm.input;\r\n        have = strm.avail_in;\r\n        hold = state.hold;\r\n        bits = state.bits;\r\n        //---\r\n\r\n        _in = have;\r\n        _out = left;\r\n        ret = Z_OK;\r\n\r\n        inf_leave: // goto emulation\r\n            for (;;) {\r\n                switch (state.mode) {\r\n                    case HEAD:\r\n                        if (state.wrap === 0) {\r\n                            state.mode = TYPEDO;\r\n                            break;\r\n                        }\r\n                        //=== NEEDBITS(16);\r\n                        while (bits < 16) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                        }\r\n                        //===//\r\n                        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\r\n                            state.check = 0/*crc32(0L, Z_NULL, 0)*/;\r\n                            //=== CRC2(state.check, hold);\r\n                            hbuf[0] = hold & 0xff;\r\n                            hbuf[1] = (hold >>> 8) & 0xff;\r\n                            state.check = crc32(state.check, hbuf, 2, 0);\r\n                            //===//\r\n\r\n                            //=== INITBITS();\r\n                            hold = 0;\r\n                            bits = 0;\r\n                            //===//\r\n                            state.mode = FLAGS;\r\n                            break;\r\n                        }\r\n                        state.flags = 0;           /* expect zlib header */\r\n                        if (state.head) {\r\n                            state.head.done = false;\r\n                        }\r\n                        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\r\n                            (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\r\n                            strm.msg = 'incorrect header check';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\r\n                            strm.msg = 'unknown compression method';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        //--- DROPBITS(4) ---//\r\n                        hold >>>= 4;\r\n                        bits -= 4;\r\n                        //---//\r\n                        len = (hold & 0x0f)/*BITS(4)*/ + 8;\r\n                        if (state.wbits === 0) {\r\n                            state.wbits = len;\r\n                        }\r\n                        else if (len > state.wbits) {\r\n                            strm.msg = 'invalid window size';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        state.dmax = 1 << len;\r\n                        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\r\n                        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\r\n                        state.mode = hold & 0x200 ? DICTID : TYPE;\r\n                        //=== INITBITS();\r\n                        hold = 0;\r\n                        bits = 0;\r\n                        //===//\r\n                        break;\r\n                    case FLAGS:\r\n                        //=== NEEDBITS(16); */\r\n                        while (bits < 16) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                        }\r\n                        //===//\r\n                        state.flags = hold;\r\n                        if ((state.flags & 0xff) !== Z_DEFLATED) {\r\n                            strm.msg = 'unknown compression method';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        if (state.flags & 0xe000) {\r\n                            strm.msg = 'unknown header flags set';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        if (state.head) {\r\n                            state.head.text = ((hold >> 8) & 1);\r\n                        }\r\n                        if (state.flags & 0x0200) {\r\n                            //=== CRC2(state.check, hold);\r\n                            hbuf[0] = hold & 0xff;\r\n                            hbuf[1] = (hold >>> 8) & 0xff;\r\n                            state.check = crc32(state.check, hbuf, 2, 0);\r\n                            //===//\r\n                        }\r\n                        //=== INITBITS();\r\n                        hold = 0;\r\n                        bits = 0;\r\n                        //===//\r\n                        state.mode = TIME;\r\n                    /* falls through */\r\n                    case TIME:\r\n                        //=== NEEDBITS(32); */\r\n                        while (bits < 32) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                        }\r\n                        //===//\r\n                        if (state.head) {\r\n                            state.head.time = hold;\r\n                        }\r\n                        if (state.flags & 0x0200) {\r\n                            //=== CRC4(state.check, hold)\r\n                            hbuf[0] = hold & 0xff;\r\n                            hbuf[1] = (hold >>> 8) & 0xff;\r\n                            hbuf[2] = (hold >>> 16) & 0xff;\r\n                            hbuf[3] = (hold >>> 24) & 0xff;\r\n                            state.check = crc32(state.check, hbuf, 4, 0);\r\n                            //===\r\n                        }\r\n                        //=== INITBITS();\r\n                        hold = 0;\r\n                        bits = 0;\r\n                        //===//\r\n                        state.mode = OS;\r\n                    /* falls through */\r\n                    case OS:\r\n                        //=== NEEDBITS(16); */\r\n                        while (bits < 16) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                        }\r\n                        //===//\r\n                        if (state.head) {\r\n                            state.head.xflags = (hold & 0xff);\r\n                            state.head.os = (hold >> 8);\r\n                        }\r\n                        if (state.flags & 0x0200) {\r\n                            //=== CRC2(state.check, hold);\r\n                            hbuf[0] = hold & 0xff;\r\n                            hbuf[1] = (hold >>> 8) & 0xff;\r\n                            state.check = crc32(state.check, hbuf, 2, 0);\r\n                            //===//\r\n                        }\r\n                        //=== INITBITS();\r\n                        hold = 0;\r\n                        bits = 0;\r\n                        //===//\r\n                        state.mode = EXLEN;\r\n                    /* falls through */\r\n                    case EXLEN:\r\n                        if (state.flags & 0x0400) {\r\n                            //=== NEEDBITS(16); */\r\n                            while (bits < 16) {\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                            }\r\n                            //===//\r\n                            state.length = hold;\r\n                            if (state.head) {\r\n                                state.head.extra_len = hold;\r\n                            }\r\n                            if (state.flags & 0x0200) {\r\n                                //=== CRC2(state.check, hold);\r\n                                hbuf[0] = hold & 0xff;\r\n                                hbuf[1] = (hold >>> 8) & 0xff;\r\n                                state.check = crc32(state.check, hbuf, 2, 0);\r\n                                //===//\r\n                            }\r\n                            //=== INITBITS();\r\n                            hold = 0;\r\n                            bits = 0;\r\n                            //===//\r\n                        }\r\n                        else if (state.head) {\r\n                            state.head.extra = null/*Z_NULL*/;\r\n                        }\r\n                        state.mode = EXTRA;\r\n                    /* falls through */\r\n                    case EXTRA:\r\n                        if (state.flags & 0x0400) {\r\n                            copy = state.length;\r\n                            if (copy > have) { copy = have; }\r\n                            if (copy) {\r\n                                if (state.head) {\r\n                                    len = state.head.extra_len - state.length;\r\n                                    if (!state.head.extra) {\r\n                                        // Use untyped array for more conveniend processing later\r\n                                        state.head.extra = new Array(state.head.extra_len);\r\n                                    }\r\n                                    utils.arraySet(\r\n                                        state.head.extra,\r\n                                        input,\r\n                                        next,\r\n                                        // extra field is limited to 65536 bytes\r\n                                        // - no need for additional size check\r\n                                        copy,\r\n                                        /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\r\n                                        len\r\n                                    );\r\n                                    //zmemcpy(state.head.extra + len, next,\r\n                                    //        len + copy > state.head.extra_max ?\r\n                                    //        state.head.extra_max - len : copy);\r\n                                }\r\n                                if (state.flags & 0x0200) {\r\n                                    state.check = crc32(state.check, input, copy, next);\r\n                                }\r\n                                have -= copy;\r\n                                next += copy;\r\n                                state.length -= copy;\r\n                            }\r\n                            if (state.length) { break inf_leave; }\r\n                        }\r\n                        state.length = 0;\r\n                        state.mode = NAME;\r\n                    /* falls through */\r\n                    case NAME:\r\n                        if (state.flags & 0x0800) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            copy = 0;\r\n                            do {\r\n                                // TODO: 2 or 1 bytes?\r\n                                len = input[next + copy++];\r\n                                /* use constant limit because in js we should not preallocate memory */\r\n                                if (state.head && len &&\r\n                                    (state.length < 65536 /*state.head.name_max*/)) {\r\n                                    state.head.name += String.fromCharCode(len);\r\n                                }\r\n                            } while (len && copy < have);\r\n\r\n                            if (state.flags & 0x0200) {\r\n                                state.check = crc32(state.check, input, copy, next);\r\n                            }\r\n                            have -= copy;\r\n                            next += copy;\r\n                            if (len) { break inf_leave; }\r\n                        }\r\n                        else if (state.head) {\r\n                            state.head.name = null;\r\n                        }\r\n                        state.length = 0;\r\n                        state.mode = COMMENT;\r\n                    /* falls through */\r\n                    case COMMENT:\r\n                        if (state.flags & 0x1000) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            copy = 0;\r\n                            do {\r\n                                len = input[next + copy++];\r\n                                /* use constant limit because in js we should not preallocate memory */\r\n                                if (state.head && len &&\r\n                                    (state.length < 65536 /*state.head.comm_max*/)) {\r\n                                    state.head.comment += String.fromCharCode(len);\r\n                                }\r\n                            } while (len && copy < have);\r\n                            if (state.flags & 0x0200) {\r\n                                state.check = crc32(state.check, input, copy, next);\r\n                            }\r\n                            have -= copy;\r\n                            next += copy;\r\n                            if (len) { break inf_leave; }\r\n                        }\r\n                        else if (state.head) {\r\n                            state.head.comment = null;\r\n                        }\r\n                        state.mode = HCRC;\r\n                    /* falls through */\r\n                    case HCRC:\r\n                        if (state.flags & 0x0200) {\r\n                            //=== NEEDBITS(16); */\r\n                            while (bits < 16) {\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                            }\r\n                            //===//\r\n                            if (hold !== (state.check & 0xffff)) {\r\n                                strm.msg = 'header crc mismatch';\r\n                                state.mode = BAD;\r\n                                break;\r\n                            }\r\n                            //=== INITBITS();\r\n                            hold = 0;\r\n                            bits = 0;\r\n                            //===//\r\n                        }\r\n                        if (state.head) {\r\n                            state.head.hcrc = ((state.flags >> 9) & 1);\r\n                            state.head.done = true;\r\n                        }\r\n                        strm.adler = state.check = 0;\r\n                        state.mode = TYPE;\r\n                        break;\r\n                    case DICTID:\r\n                        //=== NEEDBITS(32); */\r\n                        while (bits < 32) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                        }\r\n                        //===//\r\n                        strm.adler = state.check = zswap32(hold);\r\n                        //=== INITBITS();\r\n                        hold = 0;\r\n                        bits = 0;\r\n                        //===//\r\n                        state.mode = DICT;\r\n                    /* falls through */\r\n                    case DICT:\r\n                        if (state.havedict === 0) {\r\n                            //--- RESTORE() ---\r\n                            strm.next_out = put;\r\n                            strm.avail_out = left;\r\n                            strm.next_in = next;\r\n                            strm.avail_in = have;\r\n                            state.hold = hold;\r\n                            state.bits = bits;\r\n                            //---\r\n                            return Z_NEED_DICT;\r\n                        }\r\n                        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\r\n                        state.mode = TYPE;\r\n                    /* falls through */\r\n                    case TYPE:\r\n                        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\r\n                    /* falls through */\r\n                    case TYPEDO:\r\n                        if (state.last) {\r\n                            //--- BYTEBITS() ---//\r\n                            hold >>>= bits & 7;\r\n                            bits -= bits & 7;\r\n                            //---//\r\n                            state.mode = CHECK;\r\n                            break;\r\n                        }\r\n                        //=== NEEDBITS(3); */\r\n                        while (bits < 3) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                        }\r\n                        //===//\r\n                        state.last = (hold & 0x01)/*BITS(1)*/;\r\n                        //--- DROPBITS(1) ---//\r\n                        hold >>>= 1;\r\n                        bits -= 1;\r\n                        //---//\r\n\r\n                        switch ((hold & 0x03)/*BITS(2)*/) {\r\n                            case 0:                             /* stored block */\r\n                                //Tracev((stderr, \"inflate:     stored block%s\\n\",\r\n                                //        state.last ? \" (last)\" : \"\"));\r\n                                state.mode = STORED;\r\n                                break;\r\n                            case 1:                             /* fixed block */\r\n                                fixedtables(state);\r\n                                //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\r\n                                //        state.last ? \" (last)\" : \"\"));\r\n                                state.mode = LEN_;             /* decode codes */\r\n                                if (flush === Z_TREES) {\r\n                                    //--- DROPBITS(2) ---//\r\n                                    hold >>>= 2;\r\n                                    bits -= 2;\r\n                                    //---//\r\n                                    break inf_leave;\r\n                                }\r\n                                break;\r\n                            case 2:                             /* dynamic block */\r\n                                //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\r\n                                //        state.last ? \" (last)\" : \"\"));\r\n                                state.mode = TABLE;\r\n                                break;\r\n                            case 3:\r\n                                strm.msg = 'invalid block type';\r\n                                state.mode = BAD;\r\n                        }\r\n                        //--- DROPBITS(2) ---//\r\n                        hold >>>= 2;\r\n                        bits -= 2;\r\n                        //---//\r\n                        break;\r\n                    case STORED:\r\n                        //--- BYTEBITS() ---// /* go to byte boundary */\r\n                        hold >>>= bits & 7;\r\n                        bits -= bits & 7;\r\n                        //---//\r\n                        //=== NEEDBITS(32); */\r\n                        while (bits < 32) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                        }\r\n                        //===//\r\n                        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\r\n                            strm.msg = 'invalid stored block lengths';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        state.length = hold & 0xffff;\r\n                        //Tracev((stderr, \"inflate:       stored length %u\\n\",\r\n                        //        state.length));\r\n                        //=== INITBITS();\r\n                        hold = 0;\r\n                        bits = 0;\r\n                        //===//\r\n                        state.mode = COPY_;\r\n                        if (flush === Z_TREES) { break inf_leave; }\r\n                    /* falls through */\r\n                    case COPY_:\r\n                        state.mode = COPY;\r\n                    /* falls through */\r\n                    case COPY:\r\n                        copy = state.length;\r\n                        if (copy) {\r\n                            if (copy > have) { copy = have; }\r\n                            if (copy > left) { copy = left; }\r\n                            if (copy === 0) { break inf_leave; }\r\n                            //--- zmemcpy(put, next, copy); ---\r\n                            utils.arraySet(output, input, next, copy, put);\r\n                            //---//\r\n                            have -= copy;\r\n                            next += copy;\r\n                            left -= copy;\r\n                            put += copy;\r\n                            state.length -= copy;\r\n                            break;\r\n                        }\r\n                        //Tracev((stderr, \"inflate:       stored end\\n\"));\r\n                        state.mode = TYPE;\r\n                        break;\r\n                    case TABLE:\r\n                        //=== NEEDBITS(14); */\r\n                        while (bits < 14) {\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                        }\r\n                        //===//\r\n                        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\r\n                        //--- DROPBITS(5) ---//\r\n                        hold >>>= 5;\r\n                        bits -= 5;\r\n                        //---//\r\n                        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\r\n                        //--- DROPBITS(5) ---//\r\n                        hold >>>= 5;\r\n                        bits -= 5;\r\n                        //---//\r\n                        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\r\n                        //--- DROPBITS(4) ---//\r\n                        hold >>>= 4;\r\n                        bits -= 4;\r\n                        //---//\r\n//#ifndef PKZIP_BUG_WORKAROUND\r\n                        if (state.nlen > 286 || state.ndist > 30) {\r\n                            strm.msg = 'too many length or distance symbols';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n//#endif\r\n                        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\r\n                        state.have = 0;\r\n                        state.mode = LENLENS;\r\n                    /* falls through */\r\n                    case LENLENS:\r\n                        while (state.have < state.ncode) {\r\n                            //=== NEEDBITS(3);\r\n                            while (bits < 3) {\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                            }\r\n                            //===//\r\n                            state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\r\n                            //--- DROPBITS(3) ---//\r\n                            hold >>>= 3;\r\n                            bits -= 3;\r\n                            //---//\r\n                        }\r\n                        while (state.have < 19) {\r\n                            state.lens[order[state.have++]] = 0;\r\n                        }\r\n                        // We have separate tables & no pointers. 2 commented lines below not needed.\r\n                        //state.next = state.codes;\r\n                        //state.lencode = state.next;\r\n                        // Switch to use dynamic table\r\n                        state.lencode = state.lendyn;\r\n                        state.lenbits = 7;\r\n\r\n                        opts = { bits: state.lenbits };\r\n                        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\r\n                        state.lenbits = opts.bits;\r\n\r\n                        if (ret) {\r\n                            strm.msg = 'invalid code lengths set';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\r\n                        state.have = 0;\r\n                        state.mode = CODELENS;\r\n                    /* falls through */\r\n                    case CODELENS:\r\n                        while (state.have < state.nlen + state.ndist) {\r\n                            for (;;) {\r\n                                here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\r\n                                here_bits = here >>> 24;\r\n                                here_op = (here >>> 16) & 0xff;\r\n                                here_val = here & 0xffff;\r\n\r\n                                if ((here_bits) <= bits) { break; }\r\n                                //--- PULLBYTE() ---//\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                                //---//\r\n                            }\r\n                            if (here_val < 16) {\r\n                                //--- DROPBITS(here.bits) ---//\r\n                                hold >>>= here_bits;\r\n                                bits -= here_bits;\r\n                                //---//\r\n                                state.lens[state.have++] = here_val;\r\n                            }\r\n                            else {\r\n                                if (here_val === 16) {\r\n                                    //=== NEEDBITS(here.bits + 2);\r\n                                    n = here_bits + 2;\r\n                                    while (bits < n) {\r\n                                        if (have === 0) { break inf_leave; }\r\n                                        have--;\r\n                                        hold += input[next++] << bits;\r\n                                        bits += 8;\r\n                                    }\r\n                                    //===//\r\n                                    //--- DROPBITS(here.bits) ---//\r\n                                    hold >>>= here_bits;\r\n                                    bits -= here_bits;\r\n                                    //---//\r\n                                    if (state.have === 0) {\r\n                                        strm.msg = 'invalid bit length repeat';\r\n                                        state.mode = BAD;\r\n                                        break;\r\n                                    }\r\n                                    len = state.lens[state.have - 1];\r\n                                    copy = 3 + (hold & 0x03);//BITS(2);\r\n                                    //--- DROPBITS(2) ---//\r\n                                    hold >>>= 2;\r\n                                    bits -= 2;\r\n                                    //---//\r\n                                }\r\n                                else if (here_val === 17) {\r\n                                    //=== NEEDBITS(here.bits + 3);\r\n                                    n = here_bits + 3;\r\n                                    while (bits < n) {\r\n                                        if (have === 0) { break inf_leave; }\r\n                                        have--;\r\n                                        hold += input[next++] << bits;\r\n                                        bits += 8;\r\n                                    }\r\n                                    //===//\r\n                                    //--- DROPBITS(here.bits) ---//\r\n                                    hold >>>= here_bits;\r\n                                    bits -= here_bits;\r\n                                    //---//\r\n                                    len = 0;\r\n                                    copy = 3 + (hold & 0x07);//BITS(3);\r\n                                    //--- DROPBITS(3) ---//\r\n                                    hold >>>= 3;\r\n                                    bits -= 3;\r\n                                    //---//\r\n                                }\r\n                                else {\r\n                                    //=== NEEDBITS(here.bits + 7);\r\n                                    n = here_bits + 7;\r\n                                    while (bits < n) {\r\n                                        if (have === 0) { break inf_leave; }\r\n                                        have--;\r\n                                        hold += input[next++] << bits;\r\n                                        bits += 8;\r\n                                    }\r\n                                    //===//\r\n                                    //--- DROPBITS(here.bits) ---//\r\n                                    hold >>>= here_bits;\r\n                                    bits -= here_bits;\r\n                                    //---//\r\n                                    len = 0;\r\n                                    copy = 11 + (hold & 0x7f);//BITS(7);\r\n                                    //--- DROPBITS(7) ---//\r\n                                    hold >>>= 7;\r\n                                    bits -= 7;\r\n                                    //---//\r\n                                }\r\n                                if (state.have + copy > state.nlen + state.ndist) {\r\n                                    strm.msg = 'invalid bit length repeat';\r\n                                    state.mode = BAD;\r\n                                    break;\r\n                                }\r\n                                while (copy--) {\r\n                                    state.lens[state.have++] = len;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        /* handle error breaks in while */\r\n                        if (state.mode === BAD) { break; }\r\n\r\n                        /* check for end-of-block code (better have one) */\r\n                        if (state.lens[256] === 0) {\r\n                            strm.msg = 'invalid code -- missing end-of-block';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n\r\n                        /* build code tables -- note: do not change the lenbits or distbits\r\n                         values here (9 and 6) without reading the comments in inftrees.h\r\n                         concerning the ENOUGH constants, which depend on those values */\r\n                        state.lenbits = 9;\r\n\r\n                        opts = { bits: state.lenbits };\r\n                        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\r\n                        // We have separate tables & no pointers. 2 commented lines below not needed.\r\n                        // state.next_index = opts.table_index;\r\n                        state.lenbits = opts.bits;\r\n                        // state.lencode = state.next;\r\n\r\n                        if (ret) {\r\n                            strm.msg = 'invalid literal/lengths set';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n\r\n                        state.distbits = 6;\r\n                        //state.distcode.copy(state.codes);\r\n                        // Switch to use dynamic table\r\n                        state.distcode = state.distdyn;\r\n                        opts = { bits: state.distbits };\r\n                        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\r\n                        // We have separate tables & no pointers. 2 commented lines below not needed.\r\n                        // state.next_index = opts.table_index;\r\n                        state.distbits = opts.bits;\r\n                        // state.distcode = state.next;\r\n\r\n                        if (ret) {\r\n                            strm.msg = 'invalid distances set';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        //Tracev((stderr, 'inflate:       codes ok\\n'));\r\n                        state.mode = LEN_;\r\n                        if (flush === Z_TREES) { break inf_leave; }\r\n                    /* falls through */\r\n                    case LEN_:\r\n                        state.mode = LEN;\r\n                    /* falls through */\r\n                    case LEN:\r\n                        if (have >= 6 && left >= 258) {\r\n                            //--- RESTORE() ---\r\n                            strm.next_out = put;\r\n                            strm.avail_out = left;\r\n                            strm.next_in = next;\r\n                            strm.avail_in = have;\r\n                            state.hold = hold;\r\n                            state.bits = bits;\r\n                            //---\r\n                            inflate_fast(strm, _out);\r\n                            //--- LOAD() ---\r\n                            put = strm.next_out;\r\n                            output = strm.output;\r\n                            left = strm.avail_out;\r\n                            next = strm.next_in;\r\n                            input = strm.input;\r\n                            have = strm.avail_in;\r\n                            hold = state.hold;\r\n                            bits = state.bits;\r\n                            //---\r\n\r\n                            if (state.mode === TYPE) {\r\n                                state.back = -1;\r\n                            }\r\n                            break;\r\n                        }\r\n                        state.back = 0;\r\n                        for (;;) {\r\n                            here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\r\n                            here_bits = here >>> 24;\r\n                            here_op = (here >>> 16) & 0xff;\r\n                            here_val = here & 0xffff;\r\n\r\n                            if (here_bits <= bits) { break; }\r\n                            //--- PULLBYTE() ---//\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                            //---//\r\n                        }\r\n                        if (here_op && (here_op & 0xf0) === 0) {\r\n                            last_bits = here_bits;\r\n                            last_op = here_op;\r\n                            last_val = here_val;\r\n                            for (;;) {\r\n                                here = state.lencode[last_val +\r\n                                                     ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\r\n                                here_bits = here >>> 24;\r\n                                here_op = (here >>> 16) & 0xff;\r\n                                here_val = here & 0xffff;\r\n\r\n                                if ((last_bits + here_bits) <= bits) { break; }\r\n                                //--- PULLBYTE() ---//\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                                //---//\r\n                            }\r\n                            //--- DROPBITS(last.bits) ---//\r\n                            hold >>>= last_bits;\r\n                            bits -= last_bits;\r\n                            //---//\r\n                            state.back += last_bits;\r\n                        }\r\n                        //--- DROPBITS(here.bits) ---//\r\n                        hold >>>= here_bits;\r\n                        bits -= here_bits;\r\n                        //---//\r\n                        state.back += here_bits;\r\n                        state.length = here_val;\r\n                        if (here_op === 0) {\r\n                            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\r\n                            //        \"inflate:         literal '%c'\\n\" :\r\n                            //        \"inflate:         literal 0x%02x\\n\", here.val));\r\n                            state.mode = LIT;\r\n                            break;\r\n                        }\r\n                        if (here_op & 32) {\r\n                            //Tracevv((stderr, \"inflate:         end of block\\n\"));\r\n                            state.back = -1;\r\n                            state.mode = TYPE;\r\n                            break;\r\n                        }\r\n                        if (here_op & 64) {\r\n                            strm.msg = 'invalid literal/length code';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        state.extra = here_op & 15;\r\n                        state.mode = LENEXT;\r\n                    /* falls through */\r\n                    case LENEXT:\r\n                        if (state.extra) {\r\n                            //=== NEEDBITS(state.extra);\r\n                            n = state.extra;\r\n                            while (bits < n) {\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                            }\r\n                            //===//\r\n                            state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\r\n                            //--- DROPBITS(state.extra) ---//\r\n                            hold >>>= state.extra;\r\n                            bits -= state.extra;\r\n                            //---//\r\n                            state.back += state.extra;\r\n                        }\r\n                        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\r\n                        state.was = state.length;\r\n                        state.mode = DIST;\r\n                    /* falls through */\r\n                    case DIST:\r\n                        for (;;) {\r\n                            here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\r\n                            here_bits = here >>> 24;\r\n                            here_op = (here >>> 16) & 0xff;\r\n                            here_val = here & 0xffff;\r\n\r\n                            if ((here_bits) <= bits) { break; }\r\n                            //--- PULLBYTE() ---//\r\n                            if (have === 0) { break inf_leave; }\r\n                            have--;\r\n                            hold += input[next++] << bits;\r\n                            bits += 8;\r\n                            //---//\r\n                        }\r\n                        if ((here_op & 0xf0) === 0) {\r\n                            last_bits = here_bits;\r\n                            last_op = here_op;\r\n                            last_val = here_val;\r\n                            for (;;) {\r\n                                here = state.distcode[last_val +\r\n                                                      ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\r\n                                here_bits = here >>> 24;\r\n                                here_op = (here >>> 16) & 0xff;\r\n                                here_val = here & 0xffff;\r\n\r\n                                if ((last_bits + here_bits) <= bits) { break; }\r\n                                //--- PULLBYTE() ---//\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                                //---//\r\n                            }\r\n                            //--- DROPBITS(last.bits) ---//\r\n                            hold >>>= last_bits;\r\n                            bits -= last_bits;\r\n                            //---//\r\n                            state.back += last_bits;\r\n                        }\r\n                        //--- DROPBITS(here.bits) ---//\r\n                        hold >>>= here_bits;\r\n                        bits -= here_bits;\r\n                        //---//\r\n                        state.back += here_bits;\r\n                        if (here_op & 64) {\r\n                            strm.msg = 'invalid distance code';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n                        state.offset = here_val;\r\n                        state.extra = (here_op) & 15;\r\n                        state.mode = DISTEXT;\r\n                    /* falls through */\r\n                    case DISTEXT:\r\n                        if (state.extra) {\r\n                            //=== NEEDBITS(state.extra);\r\n                            n = state.extra;\r\n                            while (bits < n) {\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                            }\r\n                            //===//\r\n                            state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\r\n                            //--- DROPBITS(state.extra) ---//\r\n                            hold >>>= state.extra;\r\n                            bits -= state.extra;\r\n                            //---//\r\n                            state.back += state.extra;\r\n                        }\r\n//#ifdef INFLATE_STRICT\r\n                        if (state.offset > state.dmax) {\r\n                            strm.msg = 'invalid distance too far back';\r\n                            state.mode = BAD;\r\n                            break;\r\n                        }\r\n//#endif\r\n                        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\r\n                        state.mode = MATCH;\r\n                    /* falls through */\r\n                    case MATCH:\r\n                        if (left === 0) { break inf_leave; }\r\n                        copy = _out - left;\r\n                        if (state.offset > copy) {         /* copy from window */\r\n                            copy = state.offset - copy;\r\n                            if (copy > state.whave) {\r\n                                if (state.sane) {\r\n                                    strm.msg = 'invalid distance too far back';\r\n                                    state.mode = BAD;\r\n                                    break;\r\n                                }\r\n// (!) This block is disabled in zlib defailts,\r\n// don't enable it for binary compatibility\r\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\r\n//          Trace((stderr, \"inflate.c too far\\n\"));\r\n//          copy -= state.whave;\r\n//          if (copy > state.length) { copy = state.length; }\r\n//          if (copy > left) { copy = left; }\r\n//          left -= copy;\r\n//          state.length -= copy;\r\n//          do {\r\n//            output[put++] = 0;\r\n//          } while (--copy);\r\n//          if (state.length === 0) { state.mode = LEN; }\r\n//          break;\r\n//#endif\r\n                            }\r\n                            if (copy > state.wnext) {\r\n                                copy -= state.wnext;\r\n                                from = state.wsize - copy;\r\n                            }\r\n                            else {\r\n                                from = state.wnext - copy;\r\n                            }\r\n                            if (copy > state.length) { copy = state.length; }\r\n                            from_source = state.window;\r\n                        }\r\n                        else {                              /* copy from output */\r\n                            from_source = output;\r\n                            from = put - state.offset;\r\n                            copy = state.length;\r\n                        }\r\n                        if (copy > left) { copy = left; }\r\n                        left -= copy;\r\n                        state.length -= copy;\r\n                        do {\r\n                            output[put++] = from_source[from++];\r\n                        } while (--copy);\r\n                        if (state.length === 0) { state.mode = LEN; }\r\n                        break;\r\n                    case LIT:\r\n                        if (left === 0) { break inf_leave; }\r\n                        output[put++] = state.length;\r\n                        left--;\r\n                        state.mode = LEN;\r\n                        break;\r\n                    case CHECK:\r\n                        if (state.wrap) {\r\n                            //=== NEEDBITS(32);\r\n                            while (bits < 32) {\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                // Use '|' insdead of '+' to make sure that result is signed\r\n                                hold |= input[next++] << bits;\r\n                                bits += 8;\r\n                            }\r\n                            //===//\r\n                            _out -= left;\r\n                            strm.total_out += _out;\r\n                            state.total += _out;\r\n                            if (_out) {\r\n                                strm.adler = state.check =\r\n                                    /*UPDATE(state.check, put - _out, _out);*/\r\n                                    (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\r\n\r\n                            }\r\n                            _out = left;\r\n                            // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\r\n                            if ((state.flags ? hold : zswap32(hold)) !== state.check) {\r\n                                strm.msg = 'incorrect data check';\r\n                                state.mode = BAD;\r\n                                break;\r\n                            }\r\n                            //=== INITBITS();\r\n                            hold = 0;\r\n                            bits = 0;\r\n                            //===//\r\n                            //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\r\n                        }\r\n                        state.mode = LENGTH;\r\n                    /* falls through */\r\n                    case LENGTH:\r\n                        if (state.wrap && state.flags) {\r\n                            //=== NEEDBITS(32);\r\n                            while (bits < 32) {\r\n                                if (have === 0) { break inf_leave; }\r\n                                have--;\r\n                                hold += input[next++] << bits;\r\n                                bits += 8;\r\n                            }\r\n                            //===//\r\n                            if (hold !== (state.total & 0xffffffff)) {\r\n                                strm.msg = 'incorrect length check';\r\n                                state.mode = BAD;\r\n                                break;\r\n                            }\r\n                            //=== INITBITS();\r\n                            hold = 0;\r\n                            bits = 0;\r\n                            //===//\r\n                            //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\r\n                        }\r\n                        state.mode = DONE;\r\n                    /* falls through */\r\n                    case DONE:\r\n                        ret = Z_STREAM_END;\r\n                        break inf_leave;\r\n                    case BAD:\r\n                        ret = Z_DATA_ERROR;\r\n                        break inf_leave;\r\n                    case MEM:\r\n                        return Z_MEM_ERROR;\r\n                    case SYNC:\r\n                    /* falls through */\r\n                    default:\r\n                        return Z_STREAM_ERROR;\r\n                }\r\n            }\r\n\r\n        // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\r\n\r\n        /*\r\n         Return from inflate(), updating the total counts and the check value.\r\n         If there was no progress during the inflate() call, return a buffer\r\n         error.  Call updatewindow() to create and/or update the window state.\r\n         Note: a memory error from inflate() is non-recoverable.\r\n         */\r\n\r\n        //--- RESTORE() ---\r\n        strm.next_out = put;\r\n        strm.avail_out = left;\r\n        strm.next_in = next;\r\n        strm.avail_in = have;\r\n        state.hold = hold;\r\n        state.bits = bits;\r\n        //---\r\n\r\n        if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\r\n                            (state.mode < CHECK || flush !== Z_FINISH))) {\r\n            if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\r\n                state.mode = MEM;\r\n                return Z_MEM_ERROR;\r\n            }\r\n        }\r\n        _in -= strm.avail_in;\r\n        _out -= strm.avail_out;\r\n        strm.total_in += _in;\r\n        strm.total_out += _out;\r\n        state.total += _out;\r\n        if (state.wrap && _out) {\r\n            strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\r\n                (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\r\n        }\r\n        strm.data_type = state.bits + (state.last ? 64 : 0) +\r\n                         (state.mode === TYPE ? 128 : 0) +\r\n                         (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\r\n        if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\r\n            ret = Z_BUF_ERROR;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function inflateEnd(strm) {\r\n\r\n        if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\r\n            return Z_STREAM_ERROR;\r\n        }\r\n\r\n        var state = strm.state;\r\n        if (state.window) {\r\n            state.window = null;\r\n        }\r\n        strm.state = null;\r\n        return Z_OK;\r\n    }\r\n\r\n    function inflateGetHeader(strm, head) {\r\n        var state;\r\n\r\n        /* check state */\r\n        if (!strm || !strm.state) { return Z_STREAM_ERROR; }\r\n        state = strm.state;\r\n        if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\r\n\r\n        /* save header structure */\r\n        state.head = head;\r\n        head.done = false;\r\n        return Z_OK;\r\n    }\r\n\r\n    function inflateSetDictionary(strm, dictionary) {\r\n        var dictLength = dictionary.length;\r\n\r\n        var state;\r\n        var dictid;\r\n        var ret;\r\n\r\n        /* check state */\r\n        if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\r\n        state = strm.state;\r\n\r\n        if (state.wrap !== 0 && state.mode !== DICT) {\r\n            return Z_STREAM_ERROR;\r\n        }\r\n\r\n        /* check for correct dictionary identifier */\r\n        if (state.mode === DICT) {\r\n            dictid = 1; /* adler32(0, null, 0)*/\r\n            /* dictid = adler32(dictid, dictionary, dictLength); */\r\n            dictid = adler32(dictid, dictionary, dictLength, 0);\r\n            if (dictid !== state.check) {\r\n                return Z_DATA_ERROR;\r\n            }\r\n        }\r\n        /* copy dictionary to window using updatewindow(), which will amend the\r\n         existing dictionary if appropriate */\r\n        ret = updatewindow(strm, dictionary, dictLength, dictLength);\r\n        if (ret) {\r\n            state.mode = MEM;\r\n            return Z_MEM_ERROR;\r\n        }\r\n        state.havedict = 1;\r\n        // Tracev((stderr, \"inflate:   dictionary set\\n\"));\r\n        return Z_OK;\r\n    }\r\n\r\n    exports.inflateReset = inflateReset;\r\n    exports.inflateReset2 = inflateReset2;\r\n    exports.inflateResetKeep = inflateResetKeep;\r\n    exports.inflateInit = inflateInit;\r\n    exports.inflateInit2 = inflateInit2;\r\n    exports.inflate = inflate;\r\n    exports.inflateEnd = inflateEnd;\r\n    exports.inflateGetHeader = inflateGetHeader;\r\n    exports.inflateSetDictionary = inflateSetDictionary;\r\n    exports.inflateInfo = 'pako inflate (from Nodeca project)';\r\n\r\n    /* Not implemented\r\n     exports.inflateCopy = inflateCopy;\r\n     exports.inflateGetDictionary = inflateGetDictionary;\r\n     exports.inflateMark = inflateMark;\r\n     exports.inflatePrime = inflatePrime;\r\n     exports.inflateSync = inflateSync;\r\n     exports.inflateSyncPoint = inflateSyncPoint;\r\n     exports.inflateUndermine = inflateUndermine;\r\n     */\r\n\r\n},{\"../utils/common\":1,\"./adler32\":3,\"./crc32\":5,\"./inffast\":7,\"./inftrees\":9}],9:[function(require,module,exports){\r\n    'use strict';\r\n\r\n\r\n    var utils = require('../utils/common');\r\n\r\n    var MAXBITS = 15;\r\n    var ENOUGH_LENS = 852;\r\n    var ENOUGH_DISTS = 592;\r\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\r\n\r\n    var CODES = 0;\r\n    var LENS = 1;\r\n    var DISTS = 2;\r\n\r\n    var lbase = [ /* Length codes 257..285 base */\r\n        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\r\n        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\r\n    ];\r\n\r\n    var lext = [ /* Length codes 257..285 extra */\r\n        16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\r\n        19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\r\n    ];\r\n\r\n    var dbase = [ /* Distance codes 0..29 base */\r\n        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\r\n        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\r\n        8193, 12289, 16385, 24577, 0, 0\r\n    ];\r\n\r\n    var dext = [ /* Distance codes 0..29 extra */\r\n        16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\r\n        23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\r\n        28, 28, 29, 29, 64, 64\r\n    ];\r\n\r\n    module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\r\n    {\r\n        var bits = opts.bits;\r\n        //here = opts.here; /* table entry for duplication */\r\n\r\n        var len = 0;               /* a code's length in bits */\r\n        var sym = 0;               /* index of code symbols */\r\n        var min = 0, max = 0;          /* minimum and maximum code lengths */\r\n        var root = 0;              /* number of index bits for root table */\r\n        var curr = 0;              /* number of index bits for current table */\r\n        var drop = 0;              /* code bits to drop for sub-table */\r\n        var left = 0;                   /* number of prefix codes available */\r\n        var used = 0;              /* code entries in table used */\r\n        var huff = 0;              /* Huffman code */\r\n        var incr;              /* for incrementing code, index */\r\n        var fill;              /* index for replicating entries */\r\n        var low;               /* low bits for current root entry */\r\n        var mask;              /* mask for low root bits */\r\n        var next;             /* next available space in table */\r\n        var base = null;     /* base value table to use */\r\n        var base_index = 0;\r\n//  var shoextra;    /* extra bits table to use */\r\n        var end;                    /* use base and extra for symbol > end */\r\n        var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\r\n        var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\r\n        var extra = null;\r\n        var extra_index = 0;\r\n\r\n        var here_bits, here_op, here_val;\r\n\r\n        /*\r\n         Process a set of code lengths to create a canonical Huffman code.  The\r\n         code lengths are lens[0..codes-1].  Each length corresponds to the\r\n         symbols 0..codes-1.  The Huffman code is generated by first sorting the\r\n         symbols by length from short to long, and retaining the symbol order\r\n         for codes with equal lengths.  Then the code starts with all zero bits\r\n         for the first code of the shortest length, and the codes are integer\r\n         increments for the same length, and zeros are appended as the length\r\n         increases.  For the deflate format, these bits are stored backwards\r\n         from their more natural integer increment ordering, and so when the\r\n         decoding tables are built in the large loop below, the integer codes\r\n         are incremented backwards.\r\n\r\n         This routine assumes, but does not check, that all of the entries in\r\n         lens[] are in the range 0..MAXBITS.  The caller must assure this.\r\n         1..MAXBITS is interpreted as that code length.  zero means that that\r\n         symbol does not occur in this code.\r\n\r\n         The codes are sorted by computing a count of codes for each length,\r\n         creating from that a table of starting indices for each length in the\r\n         sorted table, and then entering the symbols in order in the sorted\r\n         table.  The sorted table is work[], with that space being provided by\r\n         the caller.\r\n\r\n         The length counts are used for other purposes as well, i.e. finding\r\n         the minimum and maximum length codes, determining if there are any\r\n         codes at all, checking for a valid set of lengths, and looking ahead\r\n         at length counts to determine sub-table sizes when building the\r\n         decoding tables.\r\n         */\r\n\r\n        /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\r\n        for (len = 0; len <= MAXBITS; len++) {\r\n            count[len] = 0;\r\n        }\r\n        for (sym = 0; sym < codes; sym++) {\r\n            count[lens[lens_index + sym]]++;\r\n        }\r\n\r\n        /* bound code lengths, force root to be within code lengths */\r\n        root = bits;\r\n        for (max = MAXBITS; max >= 1; max--) {\r\n            if (count[max] !== 0) { break; }\r\n        }\r\n        if (root > max) {\r\n            root = max;\r\n        }\r\n        if (max === 0) {                     /* no symbols to code at all */\r\n            //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\r\n            //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\r\n            //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\r\n            table[table_index++] = (1 << 24) | (64 << 16) | 0;\r\n\r\n\r\n            //table.op[opts.table_index] = 64;\r\n            //table.bits[opts.table_index] = 1;\r\n            //table.val[opts.table_index++] = 0;\r\n            table[table_index++] = (1 << 24) | (64 << 16) | 0;\r\n\r\n            opts.bits = 1;\r\n            return 0;     /* no symbols, but wait for decoding to report error */\r\n        }\r\n        for (min = 1; min < max; min++) {\r\n            if (count[min] !== 0) { break; }\r\n        }\r\n        if (root < min) {\r\n            root = min;\r\n        }\r\n\r\n        /* check for an over-subscribed or incomplete set of lengths */\r\n        left = 1;\r\n        for (len = 1; len <= MAXBITS; len++) {\r\n            left <<= 1;\r\n            left -= count[len];\r\n            if (left < 0) {\r\n                return -1;\r\n            }        /* over-subscribed */\r\n        }\r\n        if (left > 0 && (type === CODES || max !== 1)) {\r\n            return -1;                      /* incomplete set */\r\n        }\r\n\r\n        /* generate offsets into symbol table for each length for sorting */\r\n        offs[1] = 0;\r\n        for (len = 1; len < MAXBITS; len++) {\r\n            offs[len + 1] = offs[len] + count[len];\r\n        }\r\n\r\n        /* sort symbols by length, by symbol order within each length */\r\n        for (sym = 0; sym < codes; sym++) {\r\n            if (lens[lens_index + sym] !== 0) {\r\n                work[offs[lens[lens_index + sym]]++] = sym;\r\n            }\r\n        }\r\n\r\n        /*\r\n         Create and fill in decoding tables.  In this loop, the table being\r\n         filled is at next and has curr index bits.  The code being used is huff\r\n         with length len.  That code is converted to an index by dropping drop\r\n         bits off of the bottom.  For codes where len is less than drop + curr,\r\n         those top drop + curr - len bits are incremented through all values to\r\n         fill the table with replicated entries.\r\n\r\n         root is the number of index bits for the root table.  When len exceeds\r\n         root, sub-tables are created pointed to by the root entry with an index\r\n         of the low root bits of huff.  This is saved in low to check for when a\r\n         new sub-table should be started.  drop is zero when the root table is\r\n         being filled, and drop is root when sub-tables are being filled.\r\n\r\n         When a new sub-table is needed, it is necessary to look ahead in the\r\n         code lengths to determine what size sub-table is needed.  The length\r\n         counts are used for this, and so count[] is decremented as codes are\r\n         entered in the tables.\r\n\r\n         used keeps track of how many table entries have been allocated from the\r\n         provided *table space.  It is checked for LENS and DIST tables against\r\n         the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\r\n         the initial root table size constants.  See the comments in inftrees.h\r\n         for more information.\r\n\r\n         sym increments through all symbols, and the loop terminates when\r\n         all codes of length max, i.e. all codes, have been processed.  This\r\n         routine permits incomplete codes, so another loop after this one fills\r\n         in the rest of the decoding tables with invalid code markers.\r\n         */\r\n\r\n        /* set up for code type */\r\n        // poor man optimization - use if-else instead of switch,\r\n        // to avoid deopts in old v8\r\n        if (type === CODES) {\r\n            base = extra = work;    /* dummy value--not used */\r\n            end = 19;\r\n\r\n        } else if (type === LENS) {\r\n            base = lbase;\r\n            base_index -= 257;\r\n            extra = lext;\r\n            extra_index -= 257;\r\n            end = 256;\r\n\r\n        } else {                    /* DISTS */\r\n            base = dbase;\r\n            extra = dext;\r\n            end = -1;\r\n        }\r\n\r\n        /* initialize opts for loop */\r\n        huff = 0;                   /* starting code */\r\n        sym = 0;                    /* starting code symbol */\r\n        len = min;                  /* starting code length */\r\n        next = table_index;              /* current table to fill in */\r\n        curr = root;                /* current table index bits */\r\n        drop = 0;                   /* current bits to drop from code for index */\r\n        low = -1;                   /* trigger new sub-table when len > root */\r\n        used = 1 << root;          /* use root table entries */\r\n        mask = used - 1;            /* mask for comparing low */\r\n\r\n        /* check available table space */\r\n        if ((type === LENS && used > ENOUGH_LENS) ||\r\n            (type === DISTS && used > ENOUGH_DISTS)) {\r\n            return 1;\r\n        }\r\n\r\n        /* process all codes and make table entries */\r\n        for (;;) {\r\n            /* create table entry */\r\n            here_bits = len - drop;\r\n            if (work[sym] < end) {\r\n                here_op = 0;\r\n                here_val = work[sym];\r\n            }\r\n            else if (work[sym] > end) {\r\n                here_op = extra[extra_index + work[sym]];\r\n                here_val = base[base_index + work[sym]];\r\n            }\r\n            else {\r\n                here_op = 32 + 64;         /* end of block */\r\n                here_val = 0;\r\n            }\r\n\r\n            /* replicate for those indices with low len bits equal to huff */\r\n            incr = 1 << (len - drop);\r\n            fill = 1 << curr;\r\n            min = fill;                 /* save offset to next table */\r\n            do {\r\n                fill -= incr;\r\n                table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\r\n            } while (fill !== 0);\r\n\r\n            /* backwards increment the len-bit code huff */\r\n            incr = 1 << (len - 1);\r\n            while (huff & incr) {\r\n                incr >>= 1;\r\n            }\r\n            if (incr !== 0) {\r\n                huff &= incr - 1;\r\n                huff += incr;\r\n            } else {\r\n                huff = 0;\r\n            }\r\n\r\n            /* go to next symbol, update count, len */\r\n            sym++;\r\n            if (--count[len] === 0) {\r\n                if (len === max) { break; }\r\n                len = lens[lens_index + work[sym]];\r\n            }\r\n\r\n            /* create new sub-table if needed */\r\n            if (len > root && (huff & mask) !== low) {\r\n                /* if first time, transition to sub-tables */\r\n                if (drop === 0) {\r\n                    drop = root;\r\n                }\r\n\r\n                /* increment past last table */\r\n                next += min;            /* here min is 1 << curr */\r\n\r\n                /* determine length of next table */\r\n                curr = len - drop;\r\n                left = 1 << curr;\r\n                while (curr + drop < max) {\r\n                    left -= count[curr + drop];\r\n                    if (left <= 0) { break; }\r\n                    curr++;\r\n                    left <<= 1;\r\n                }\r\n\r\n                /* check for enough space */\r\n                used += 1 << curr;\r\n                if ((type === LENS && used > ENOUGH_LENS) ||\r\n                    (type === DISTS && used > ENOUGH_DISTS)) {\r\n                    return 1;\r\n                }\r\n\r\n                /* point entry in root table to sub-table */\r\n                low = huff & mask;\r\n                /*table.op[low] = curr;\r\n                 table.bits[low] = root;\r\n                 table.val[low] = next - opts.table_index;*/\r\n                table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\r\n            }\r\n        }\r\n\r\n        /* fill in remaining table entry if code is incomplete (guaranteed to have\r\n         at most one remaining entry, since if the code is incomplete, the\r\n         maximum code length that was allowed to get this far is one bit) */\r\n        if (huff !== 0) {\r\n            //table.op[next + huff] = 64;            /* invalid code marker */\r\n            //table.bits[next + huff] = len - drop;\r\n            //table.val[next + huff] = 0;\r\n            table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\r\n        }\r\n\r\n        /* set return parameters */\r\n        //opts.table_index += used;\r\n        opts.bits = root;\r\n        return 0;\r\n    };\r\n\r\n},{\"../utils/common\":1}],10:[function(require,module,exports){\r\n    'use strict';\r\n\r\n    module.exports = {\r\n        2:      'need dictionary',     /* Z_NEED_DICT       2  */\r\n        1:      'stream end',          /* Z_STREAM_END      1  */\r\n        0:      '',                    /* Z_OK              0  */\r\n        '-1':   'file error',          /* Z_ERRNO         (-1) */\r\n        '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\r\n        '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\r\n        '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\r\n        '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\r\n        '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\r\n    };\r\n\r\n},{}],11:[function(require,module,exports){\r\n    'use strict';\r\n\r\n\r\n    function ZStream() {\r\n        /* next input byte */\r\n        this.input = null; // JS specific, because we have no pointers\r\n        this.next_in = 0;\r\n        /* number of bytes available at input */\r\n        this.avail_in = 0;\r\n        /* total number of input bytes read so far */\r\n        this.total_in = 0;\r\n        /* next output byte should be put there */\r\n        this.output = null; // JS specific, because we have no pointers\r\n        this.next_out = 0;\r\n        /* remaining free space at output */\r\n        this.avail_out = 0;\r\n        /* total number of bytes output so far */\r\n        this.total_out = 0;\r\n        /* last error message, NULL if no error */\r\n        this.msg = ''/*Z_NULL*/;\r\n        /* not visible by applications */\r\n        this.state = null;\r\n        /* best guess about the data type: binary or text */\r\n        this.data_type = 2/*Z_UNKNOWN*/;\r\n        /* adler32 value of the uncompressed data */\r\n        this.adler = 0;\r\n    }\r\n\r\n    module.exports = ZStream;\r\n\r\n},{}],\"/lib/inflate.js\":[function(require,module,exports){\r\n    'use strict';\r\n\r\n\r\n    var zlib_inflate = require('./zlib/inflate');\r\n    var utils        = require('./utils/common');\r\n    var strings      = require('./utils/strings');\r\n    var c            = require('./zlib/constants');\r\n    var msg          = require('./zlib/messages');\r\n    var ZStream      = require('./zlib/zstream');\r\n    var GZheader     = require('./zlib/gzheader');\r\n\r\n    var toString = Object.prototype.toString;\r\n\r\n    /**\r\n     * class Inflate\r\n     *\r\n     * Generic JS-style wrapper for zlib calls. If you don't need\r\n     * streaming behaviour - use more simple functions: [[inflate]]\r\n     * and [[inflateRaw]].\r\n     **/\r\n\r\n    /* internal\r\n     * inflate.chunks -> Array\r\n     *\r\n     * Chunks of output data, if [[Inflate#onData]] not overriden.\r\n     **/\r\n\r\n    /**\r\n     * Inflate.result -> Uint8Array|Array|String\r\n     *\r\n     * Uncompressed result, generated by default [[Inflate#onData]]\r\n     * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\r\n     * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\r\n     * push a chunk with explicit flush (call [[Inflate#push]] with\r\n     * `Z_SYNC_FLUSH` param).\r\n     **/\r\n\r\n    /**\r\n     * Inflate.err -> Number\r\n     *\r\n     * Error code after inflate finished. 0 (Z_OK) on success.\r\n     * Should be checked if broken data possible.\r\n     **/\r\n\r\n    /**\r\n     * Inflate.msg -> String\r\n     *\r\n     * Error message, if [[Inflate.err]] != 0\r\n     **/\r\n\r\n\r\n    /**\r\n     * new Inflate(options)\r\n     * - options (Object): zlib inflate options.\r\n     *\r\n     * Creates new inflator instance with specified params. Throws exception\r\n     * on bad params. Supported options:\r\n     *\r\n     * - `windowBits`\r\n     * - `dictionary`\r\n     *\r\n     * [http-colon-slashslash zlib.net/manual.html#Advanced](http-colon-slashslash zlib.net/manual.html#Advanced)\r\n     * for more information on these.\r\n     *\r\n     * Additional options, for internal needs:\r\n     *\r\n     * - `chunkSize` - size of generated data chunks (16K by default)\r\n     * - `raw` (Boolean) - do raw inflate\r\n     * - `to` (String) - if equal to 'string', then result will be converted\r\n     *   from utf8 to utf16 (javascript) string. When string output requested,\r\n     *   chunk length can differ from `chunkSize`, depending on content.\r\n     *\r\n     * By default, when no options set, autodetect deflate/gzip data format via\r\n     * wrapper header.\r\n     *\r\n     * ##### Example:\r\n     *\r\n     * ```javascript\r\n     * var pako = require('pako')\r\n     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\r\n     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\r\n     *\r\n     * var inflate = new pako.Inflate({ level: 3});\r\n     *\r\n     * inflate.push(chunk1, false);\r\n     * inflate.push(chunk2, true);  // true -> last chunk\r\n     *\r\n     * if (inflate.err) { throw new Error(inflate.err); }\r\n     *\r\n     * console.log(inflate.result);\r\n     * ```\r\n     **/\r\n    function Inflate(options) {\r\n        if (!(this instanceof Inflate)) return new Inflate(options);\r\n\r\n        this.options = utils.assign({\r\n            chunkSize: 16384,\r\n            windowBits: 0,\r\n            to: ''\r\n        }, options || {});\r\n\r\n        var opt = this.options;\r\n\r\n        // Force window size for `raw` data, if not set directly,\r\n        // because we have no header for autodetect.\r\n        if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\r\n            opt.windowBits = -opt.windowBits;\r\n            if (opt.windowBits === 0) { opt.windowBits = -15; }\r\n        }\r\n\r\n        // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\r\n        if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\r\n            !(options && options.windowBits)) {\r\n            opt.windowBits += 32;\r\n        }\r\n\r\n        // Gzip header has no info about windows size, we can do autodetect only\r\n        // for deflate. So, if window size not set, force it to max when gzip possible\r\n        if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\r\n            // bit 3 (16) -> gzipped data\r\n            // bit 4 (32) -> autodetect gzip/deflate\r\n            if ((opt.windowBits & 15) === 0) {\r\n                opt.windowBits |= 15;\r\n            }\r\n        }\r\n\r\n        this.err    = 0;      // error code, if happens (0 = Z_OK)\r\n        this.msg    = '';     // error message\r\n        this.ended  = false;  // used to avoid multiple onEnd() calls\r\n        this.chunks = [];     // chunks of compressed data\r\n\r\n        this.strm   = new ZStream();\r\n        this.strm.avail_out = 0;\r\n\r\n        var status  = zlib_inflate.inflateInit2(\r\n            this.strm,\r\n            opt.windowBits\r\n        );\r\n\r\n        if (status !== c.Z_OK) {\r\n            throw new Error(msg[status]);\r\n        }\r\n\r\n        this.header = new GZheader();\r\n\r\n        zlib_inflate.inflateGetHeader(this.strm, this.header);\r\n    }\r\n\r\n    /**\r\n     * Inflate#push(data[, mode]) -> Boolean\r\n     * - data (Uint8Array|Array|ArrayBuffer|String): input data\r\n     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\r\n     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\r\n     *\r\n     * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\r\n     * new output chunks. Returns `true` on success. The last data block must have\r\n     * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\r\n     * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\r\n     * can use mode Z_SYNC_FLUSH, keeping the decompression context.\r\n     *\r\n     * On fail call [[Inflate#onEnd]] with error code and return false.\r\n     *\r\n     * We strongly recommend to use `Uint8Array` on input for best speed (output\r\n     * format is detected automatically). Also, don't skip last param and always\r\n     * use the same type in your code (boolean or number). That will improve JS speed.\r\n     *\r\n     * For regular `Array`-s make sure all elements are [0..255].\r\n     *\r\n     * ##### Example\r\n     *\r\n     * ```javascript\r\n     * push(chunk, false); // push one of data chunks\r\n     * ...\r\n     * push(chunk, true);  // push last chunk\r\n     * ```\r\n     **/\r\n    Inflate.prototype.push = function (data, mode) {\r\n        var strm = this.strm;\r\n        var chunkSize = this.options.chunkSize;\r\n        var dictionary = this.options.dictionary;\r\n        var status, _mode;\r\n        var next_out_utf8, tail, utf8str;\r\n        var dict;\r\n\r\n        // Flag to properly process Z_BUF_ERROR on testing inflate call\r\n        // when we check that all output data was flushed.\r\n        var allowBufError = false;\r\n\r\n        if (this.ended) { return false; }\r\n        _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\r\n\r\n        // Convert data if needed\r\n        if (typeof data === 'string') {\r\n            // Only binary strings can be decompressed on practice\r\n            strm.input = strings.binstring2buf(data);\r\n        } else if (toString.call(data) === '[object ArrayBuffer]') {\r\n            strm.input = new Uint8Array(data);\r\n        } else {\r\n            strm.input = data;\r\n        }\r\n\r\n        strm.next_in = 0;\r\n        strm.avail_in = strm.input.length;\r\n\r\n        do {\r\n            if (strm.avail_out === 0) {\r\n                strm.output = new utils.Buf8(chunkSize);\r\n                strm.next_out = 0;\r\n                strm.avail_out = chunkSize;\r\n            }\r\n\r\n            status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\r\n\r\n            if (status === c.Z_NEED_DICT && dictionary) {\r\n                // Convert data if needed\r\n                if (typeof dictionary === 'string') {\r\n                    dict = strings.string2buf(dictionary);\r\n                } else if (toString.call(dictionary) === '[object ArrayBuffer]') {\r\n                    dict = new Uint8Array(dictionary);\r\n                } else {\r\n                    dict = dictionary;\r\n                }\r\n\r\n                status = zlib_inflate.inflateSetDictionary(this.strm, dict);\r\n\r\n            }\r\n\r\n            if (status === c.Z_BUF_ERROR && allowBufError === true) {\r\n                status = c.Z_OK;\r\n                allowBufError = false;\r\n            }\r\n\r\n            if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\r\n                this.onEnd(status);\r\n                this.ended = true;\r\n                return false;\r\n            }\r\n\r\n            if (strm.next_out) {\r\n                if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\r\n\r\n                    if (this.options.to === 'string') {\r\n\r\n                        next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\r\n\r\n                        tail = strm.next_out - next_out_utf8;\r\n                        utf8str = strings.buf2string(strm.output, next_out_utf8);\r\n\r\n                        // move tail\r\n                        strm.next_out = tail;\r\n                        strm.avail_out = chunkSize - tail;\r\n                        if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\r\n\r\n                        this.onData(utf8str);\r\n\r\n                    } else {\r\n                        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\r\n                    }\r\n                }\r\n            }\r\n\r\n            // When no more input data, we should check that internal inflate buffers\r\n            // are flushed. The only way to do it when avail_out = 0 - run one more\r\n            // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\r\n            // Here we set flag to process this error properly.\r\n            //\r\n            // NOTE. Deflate does not return error in this case and does not needs such\r\n            // logic.\r\n            if (strm.avail_in === 0 && strm.avail_out === 0) {\r\n                allowBufError = true;\r\n            }\r\n\r\n        } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\r\n\r\n        if (status === c.Z_STREAM_END) {\r\n            _mode = c.Z_FINISH;\r\n        }\r\n\r\n        // Finalize on the last chunk.\r\n        if (_mode === c.Z_FINISH) {\r\n            status = zlib_inflate.inflateEnd(this.strm);\r\n            this.onEnd(status);\r\n            this.ended = true;\r\n            return status === c.Z_OK;\r\n        }\r\n\r\n        // callback interim results if Z_SYNC_FLUSH.\r\n        if (_mode === c.Z_SYNC_FLUSH) {\r\n            this.onEnd(c.Z_OK);\r\n            strm.avail_out = 0;\r\n            return true;\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n\r\n    /**\r\n     * Inflate#onData(chunk) -> Void\r\n     * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\r\n     *   on js engine support. When string output requested, each chunk\r\n     *   will be string.\r\n     *\r\n     * By default, stores data blocks in `chunks[]` property and glue\r\n     * those in `onEnd`. Override this handler, if you need another behaviour.\r\n     **/\r\n    Inflate.prototype.onData = function (chunk) {\r\n        this.chunks.push(chunk);\r\n    };\r\n\r\n\r\n    /**\r\n     * Inflate#onEnd(status) -> Void\r\n     * - status (Number): inflate status. 0 (Z_OK) on success,\r\n     *   other if not.\r\n     *\r\n     * Called either after you tell inflate that the input stream is\r\n     * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\r\n     * or if an error happened. By default - join collected chunks,\r\n     * free memory and fill `results` / `err` properties.\r\n     **/\r\n    Inflate.prototype.onEnd = function (status) {\r\n        // On success - join\r\n        if (status === c.Z_OK) {\r\n            if (this.options.to === 'string') {\r\n                // Glue & convert here, until we teach pako to send\r\n                // utf8 alligned strings to onData\r\n                this.result = this.chunks.join('');\r\n            } else {\r\n                this.result = utils.flattenChunks(this.chunks);\r\n            }\r\n        }\r\n        this.chunks = [];\r\n        this.err = status;\r\n        this.msg = this.strm.msg;\r\n    };\r\n\r\n\r\n    /**\r\n     * inflate(data[, options]) -> Uint8Array|Array|String\r\n     * - data (Uint8Array|Array|String): input data to decompress.\r\n     * - options (Object): zlib inflate options.\r\n     *\r\n     * Decompress `data` with inflate/ungzip and `options`. Autodetect\r\n     * format via wrapper header by default. That's why we don't provide\r\n     * separate `ungzip` method.\r\n     *\r\n     * Supported options are:\r\n     *\r\n     * - windowBits\r\n     *\r\n     * [http-colon-slashslash zlib.net/manual.html#Advanced](http-colon-slashslash zlib.net/manual.html#Advanced)\r\n     * for more information.\r\n     *\r\n     * Sugar (options):\r\n     *\r\n     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\r\n     *   negative windowBits implicitly.\r\n     * - `to` (String) - if equal to 'string', then result will be converted\r\n     *   from utf8 to utf16 (javascript) string. When string output requested,\r\n     *   chunk length can differ from `chunkSize`, depending on content.\r\n     *\r\n     *\r\n     * ##### Example:\r\n     *\r\n     * ```javascript\r\n     * var pako = require('pako')\r\n     *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\r\n     *   , output;\r\n     *\r\n     * try {\r\n *   output = pako.inflate(input);\r\n * } catch (err)\r\n     *   console.log(err);\r\n     * }\r\n     * ```\r\n     **/\r\n    function inflate(input, options) {\r\n        var inflator = new Inflate(options);\r\n\r\n        inflator.push(input, true);\r\n\r\n        // That will never happens, if you don't cheat with options :)\r\n        if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\r\n\r\n        return inflator.result;\r\n    }\r\n\r\n\r\n    /**\r\n     * inflateRaw(data[, options]) -> Uint8Array|Array|String\r\n     * - data (Uint8Array|Array|String): input data to decompress.\r\n     * - options (Object): zlib inflate options.\r\n     *\r\n     * The same as [[inflate]], but creates raw data, without wrapper\r\n     * (header and adler32 crc).\r\n     **/\r\n    function inflateRaw(input, options) {\r\n        options = options || {};\r\n        options.raw = true;\r\n        return inflate(input, options);\r\n    }\r\n\r\n\r\n    /**\r\n     * ungzip(data[, options]) -> Uint8Array|Array|String\r\n     * - data (Uint8Array|Array|String): input data to decompress.\r\n     * - options (Object): zlib inflate options.\r\n     *\r\n     * Just shortcut to [[inflate]], because it autodetects format\r\n     * by header.content. Done for convenience.\r\n     **/\r\n\r\n\r\n    exports.Inflate = Inflate;\r\n    exports.inflate = inflate;\r\n    exports.inflateRaw = inflateRaw;\r\n    exports.ungzip  = inflate;\r\n\r\n},{\"./utils/common\":1,\"./utils/strings\":2,\"./zlib/constants\":4,\"./zlib/gzheader\":6,\"./zlib/inflate\":8,\"./zlib/messages\":10,\"./zlib/zstream\":11}]},{},[])(\"/lib/inflate.js\")\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/pako_inflate.js\n// module id = 314\n// module chunks = 0","define([\r\n        '../Core/CompressedTextureBuffer',\r\n        '../Core/defined',\r\n        '../Core/PixelFormat',\r\n        '../Core/RuntimeError',\r\n        '../ThirdParty/crunch',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        CompressedTextureBuffer,\r\n        defined,\r\n        PixelFormat,\r\n        RuntimeError,\r\n        crunch,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    // Modified from texture-tester\r\n    // See:\r\n    //     https://github.com/toji/texture-tester/blob/master/js/webgl-texture-util.js\r\n    //     http://toji.github.io/texture-tester/\r\n\r\n    /**\r\n     * @license\r\n     *\r\n     * Copyright (c) 2014, Brandon Jones. All rights reserved.\r\n     *\r\n     * Redistribution and use in source and binary forms, with or without modification,\r\n     * are permitted provided that the following conditions are met:\r\n     *\r\n     *  * Redistributions of source code must retain the above copyright notice, this\r\n     *  list of conditions and the following disclaimer.\r\n     *  * Redistributions in binary form must reproduce the above copyright notice,\r\n     *  this list of conditions and the following disclaimer in the documentation\r\n     *  and/or other materials provided with the distribution.\r\n     *\r\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n     * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n     * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n     * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n     * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n     * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n     */\r\n\r\n    // Taken from crnlib.h\r\n    var CRN_FORMAT = {\r\n        cCRNFmtInvalid: -1,\r\n\r\n        cCRNFmtDXT1: 0,\r\n        // cCRNFmtDXT3 is not currently supported when writing to CRN - only DDS.\r\n        cCRNFmtDXT3: 1,\r\n        cCRNFmtDXT5: 2\r\n\r\n        // Crunch supports more formats than this, but we can't use them here.\r\n    };\r\n\r\n    // Mapping of Crunch formats to DXT formats.\r\n    var DXT_FORMAT_MAP = {};\r\n    DXT_FORMAT_MAP[CRN_FORMAT.cCRNFmtDXT1] = PixelFormat.RGB_DXT1;\r\n    DXT_FORMAT_MAP[CRN_FORMAT.cCRNFmtDXT3] = PixelFormat.RGBA_DXT3;\r\n    DXT_FORMAT_MAP[CRN_FORMAT.cCRNFmtDXT5] = PixelFormat.RGBA_DXT5;\r\n\r\n    var dst;\r\n    var dxtData;\r\n    var cachedDstSize = 0;\r\n\r\n    // Copy an array of bytes into or out of the emscripten heap.\r\n    function arrayBufferCopy(src, dst, dstByteOffset, numBytes) {\r\n        var i;\r\n        var dst32Offset = dstByteOffset / 4;\r\n        var tail = (numBytes % 4);\r\n        var src32 = new Uint32Array(src.buffer, 0, (numBytes - tail) / 4);\r\n        var dst32 = new Uint32Array(dst.buffer);\r\n        for (i = 0; i < src32.length; i++) {\r\n            dst32[dst32Offset + i] = src32[i];\r\n        }\r\n        for (i = numBytes - tail; i < numBytes; i++) {\r\n            dst[dstByteOffset + i] = src[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    function transcodeCRNToDXT(arrayBuffer, transferableObjects) {\r\n        // Copy the contents of the arrayBuffer into emscriptens heap.\r\n        var srcSize = arrayBuffer.byteLength;\r\n        var bytes = new Uint8Array(arrayBuffer);\r\n        var src = crunch._malloc(srcSize);\r\n        arrayBufferCopy(bytes, crunch.HEAPU8, src, srcSize);\r\n\r\n        // Determine what type of compressed data the file contains.\r\n        var crnFormat = crunch._crn_get_dxt_format(src, srcSize);\r\n        var format = DXT_FORMAT_MAP[crnFormat];\r\n        if (!defined(format)) {\r\n            throw new RuntimeError('Unsupported compressed format.');\r\n        }\r\n\r\n        // Gather basic metrics about the DXT data.\r\n        var levels = crunch._crn_get_levels(src, srcSize);\r\n        var width = crunch._crn_get_width(src, srcSize);\r\n        var height = crunch._crn_get_height(src, srcSize);\r\n\r\n        // Determine the size of the decoded DXT data.\r\n        var dstSize = 0;\r\n        var i;\r\n        for (i = 0; i < levels; ++i) {\r\n            dstSize += PixelFormat.compressedTextureSizeInBytes(format, width >> i, height >> i);\r\n        }\r\n\r\n        // Allocate enough space on the emscripten heap to hold the decoded DXT data\r\n        // or reuse the existing allocation if a previous call to this function has\r\n        // already acquired a large enough buffer.\r\n        if(cachedDstSize < dstSize) {\r\n            if(defined(dst)) {\r\n                crunch._free(dst);\r\n            }\r\n            dst = crunch._malloc(dstSize);\r\n            dxtData = new Uint8Array(crunch.HEAPU8.buffer, dst, dstSize);\r\n            cachedDstSize = dstSize;\r\n        }\r\n\r\n        // Decompress the DXT data from the Crunch file into the allocated space.\r\n        crunch._crn_decompress(src, srcSize, dst, dstSize, 0, levels);\r\n\r\n        // Release the crunch file data from the emscripten heap.\r\n        crunch._free(src);\r\n\r\n        // Mipmaps are unsupported, so copy the level 0 texture\r\n        // When mipmaps are supported, a copy will still be necessary as dxtData is a view on the heap.\r\n        var length = PixelFormat.compressedTextureSizeInBytes(format, width, height);\r\n\r\n        // Get a copy of the 0th mip level. dxtData will exceed length when there are more mip levels.\r\n        // Equivalent to dxtData.slice(0, length), which is not supported in IE11\r\n        var level0DXTDataView = dxtData.subarray(0, length);\r\n        var level0DXTData = new Uint8Array(length);\r\n        level0DXTData.set(level0DXTDataView, 0);\r\n\r\n        transferableObjects.push(level0DXTData.buffer);\r\n        return new CompressedTextureBuffer(format, width, height, level0DXTData);\r\n    }\r\n\r\n    return createTaskProcessorWorker(transcodeCRNToDXT);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/transcodeCRNToDXT.js\n// module id = 315\n// module chunks = 0","define([\r\n        './defined',\r\n        './defineProperties'\r\n    ], function(\r\n        defined,\r\n        defineProperties) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Describes a compressed texture and contains a compressed texture buffer.\r\n     * @alias CompressedTextureBuffer\r\n     * @constructor\r\n     *\r\n     * @param {PixelFormat} internalFormat The pixel format of the compressed texture.\r\n     * @param {Number} width The width of the texture.\r\n     * @param {Number} height The height of the texture.\r\n     * @param {Uint8Array} buffer The compressed texture buffer.\r\n     */\r\n    function CompressedTextureBuffer(internalFormat, width, height, buffer) {\r\n        this._format = internalFormat;\r\n        this._width = width;\r\n        this._height = height;\r\n        this._buffer =  buffer;\r\n    }\r\n\r\n    defineProperties(CompressedTextureBuffer.prototype, {\r\n        /**\r\n         * The format of the compressed texture.\r\n         * @type PixelFormat\r\n         * @readonly\r\n         * @memberof CompressedTextureBuffer.prototype\r\n         */\r\n        internalFormat : {\r\n            get : function() {\r\n                return this._format;\r\n            }\r\n        },\r\n        /**\r\n         * The width of the texture.\r\n         * @type Number\r\n         * @readonly\r\n         * @memberof CompressedTextureBuffer.prototype\r\n         */\r\n        width : {\r\n            get : function() {\r\n                return this._width;\r\n            }\r\n        },\r\n        /**\r\n         * The height of the texture.\r\n         * @type Number\r\n         * @readonly\r\n         * @memberof CompressedTextureBuffer.prototype\r\n         */\r\n        height : {\r\n            get : function() {\r\n                return this._height;\r\n            }\r\n        },\r\n        /**\r\n         * The compressed texture buffer.\r\n         * @type Uint8Array\r\n         * @readonly\r\n         * @memberof CompressedTextureBuffer.prototype\r\n         */\r\n        bufferView : {\r\n            get : function() {\r\n                return this._buffer;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Creates a shallow clone of a compressed texture buffer.\r\n     *\r\n     * @param {CompressedTextureBuffer} object The compressed texture buffer to be cloned.\r\n     * @return {CompressedTextureBuffer} A shallow clone of the compressed texture buffer.\r\n     */\r\n    CompressedTextureBuffer.clone = function(object) {\r\n        if (!defined(object)) {\r\n            return undefined;\r\n        }\r\n\r\n        return new CompressedTextureBuffer(object._format, object._width, object._height, object._buffer);\r\n    };\r\n\r\n    /**\r\n     * Creates a shallow clone of this compressed texture buffer.\r\n     *\r\n     * @return {CompressedTextureBuffer} A shallow clone of the compressed texture buffer.\r\n     */\r\n    CompressedTextureBuffer.prototype.clone = function() {\r\n        return CompressedTextureBuffer.clone(this);\r\n    };\r\n\r\n    return CompressedTextureBuffer;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CompressedTextureBuffer.js\n// module id = 316\n// module chunks = 0","define([\r\n        '../Renderer/PixelDatatype',\r\n        './freezeObject',\r\n        './WebGLConstants'\r\n    ], function(\r\n        PixelDatatype,\r\n        freezeObject,\r\n        WebGLConstants) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The format of a pixel, i.e., the number of components it has and what they represent.\r\n     *\r\n     * @exports PixelFormat\r\n     */\r\n    var PixelFormat = {\r\n        /**\r\n         * A pixel format containing a depth value.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        DEPTH_COMPONENT : WebGLConstants.DEPTH_COMPONENT,\r\n\r\n        /**\r\n         * A pixel format containing a depth and stencil value, most often used with {@link PixelDatatype.UNSIGNED_INT_24_8}.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        DEPTH_STENCIL : WebGLConstants.DEPTH_STENCIL,\r\n\r\n        /**\r\n         * A pixel format containing an alpha channel.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        ALPHA : WebGLConstants.ALPHA,\r\n\r\n        /**\r\n         * A pixel format containing red, green, and blue channels.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGB : WebGLConstants.RGB,\r\n\r\n        /**\r\n         * A pixel format containing red, green, blue, and alpha channels.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGBA : WebGLConstants.RGBA,\r\n\r\n        /**\r\n         * A pixel format containing a luminance (intensity) channel.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        LUMINANCE : WebGLConstants.LUMINANCE,\r\n\r\n        /**\r\n         * A pixel format containing luminance (intensity) and alpha channels.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        LUMINANCE_ALPHA : WebGLConstants.LUMINANCE_ALPHA,\r\n\r\n        /**\r\n         * A pixel format containing red, green, and blue channels that is DXT1 compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGB_DXT1 : WebGLConstants.COMPRESSED_RGB_S3TC_DXT1_EXT,\r\n\r\n        /**\r\n         * A pixel format containing red, green, blue, and alpha channels that is DXT1 compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGBA_DXT1 : WebGLConstants.COMPRESSED_RGBA_S3TC_DXT1_EXT,\r\n\r\n        /**\r\n         * A pixel format containing red, green, blue, and alpha channels that is DXT3 compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGBA_DXT3 : WebGLConstants.COMPRESSED_RGBA_S3TC_DXT3_EXT,\r\n\r\n        /**\r\n         * A pixel format containing red, green, blue, and alpha channels that is DXT5 compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGBA_DXT5 : WebGLConstants.COMPRESSED_RGBA_S3TC_DXT5_EXT,\r\n\r\n        /**\r\n         * A pixel format containing red, green, and blue channels that is PVR 4bpp compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGB_PVRTC_4BPPV1 : WebGLConstants.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\r\n\r\n        /**\r\n         * A pixel format containing red, green, and blue channels that is PVR 2bpp compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGB_PVRTC_2BPPV1 : WebGLConstants.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\r\n\r\n        /**\r\n         * A pixel format containing red, green, blue, and alpha channels that is PVR 4bpp compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGBA_PVRTC_4BPPV1 : WebGLConstants.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\r\n\r\n        /**\r\n         * A pixel format containing red, green, blue, and alpha channels that is PVR 2bpp compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGBA_PVRTC_2BPPV1 : WebGLConstants.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\r\n\r\n        /**\r\n         * A pixel format containing red, green, and blue channels that is ETC1 compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        RGB_ETC1 : WebGLConstants.COMPRESSED_RGB_ETC1_WEBGL,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        componentsLength : function(pixelFormat) {\r\n            switch (pixelFormat) {\r\n                case PixelFormat.RGB:\r\n                    return 3;\r\n                case PixelFormat.RGBA:\r\n                    return 4;\r\n                case PixelFormat.LUMINANCE_ALPHA:\r\n                    return 2;\r\n                case PixelFormat.ALPHA:\r\n                case PixelFormat.LUMINANCE:\r\n                    return 1;\r\n                default:\r\n                    return 1;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        validate : function(pixelFormat) {\r\n            return pixelFormat === PixelFormat.DEPTH_COMPONENT ||\r\n                   pixelFormat === PixelFormat.DEPTH_STENCIL ||\r\n                   pixelFormat === PixelFormat.ALPHA ||\r\n                   pixelFormat === PixelFormat.RGB ||\r\n                   pixelFormat === PixelFormat.RGBA ||\r\n                   pixelFormat === PixelFormat.LUMINANCE ||\r\n                   pixelFormat === PixelFormat.LUMINANCE_ALPHA ||\r\n                   pixelFormat === PixelFormat.RGB_DXT1 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT1 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT3 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT5 ||\r\n                   pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGB_ETC1;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        isColorFormat : function(pixelFormat) {\r\n            return pixelFormat === PixelFormat.ALPHA ||\r\n                   pixelFormat === PixelFormat.RGB ||\r\n                   pixelFormat === PixelFormat.RGBA ||\r\n                   pixelFormat === PixelFormat.LUMINANCE ||\r\n                   pixelFormat === PixelFormat.LUMINANCE_ALPHA;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        isDepthFormat : function(pixelFormat) {\r\n            return pixelFormat === PixelFormat.DEPTH_COMPONENT ||\r\n                   pixelFormat === PixelFormat.DEPTH_STENCIL;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        isCompressedFormat : function(pixelFormat) {\r\n            return pixelFormat === PixelFormat.RGB_DXT1 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT1 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT3 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT5 ||\r\n                   pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGB_ETC1;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        isDXTFormat : function(pixelFormat) {\r\n            return pixelFormat === PixelFormat.RGB_DXT1 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT1 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT3 ||\r\n                   pixelFormat === PixelFormat.RGBA_DXT5;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        isPVRTCFormat : function(pixelFormat) {\r\n            return pixelFormat === PixelFormat.RGB_PVRTC_4BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGB_PVRTC_2BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGBA_PVRTC_4BPPV1 ||\r\n                   pixelFormat === PixelFormat.RGBA_PVRTC_2BPPV1;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        isETC1Format : function(pixelFormat) {\r\n            return pixelFormat === PixelFormat.RGB_ETC1;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        compressedTextureSizeInBytes : function(pixelFormat, width, height) {\r\n            switch (pixelFormat) {\r\n                case PixelFormat.RGB_DXT1:\r\n                case PixelFormat.RGBA_DXT1:\r\n                case PixelFormat.RGB_ETC1:\r\n                    return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\r\n\r\n                case PixelFormat.RGBA_DXT3:\r\n                case PixelFormat.RGBA_DXT5:\r\n                    return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\r\n\r\n                case PixelFormat.RGB_PVRTC_4BPPV1:\r\n                case PixelFormat.RGBA_PVRTC_4BPPV1:\r\n                    return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\r\n\r\n                case PixelFormat.RGB_PVRTC_2BPPV1:\r\n                case PixelFormat.RGBA_PVRTC_2BPPV1:\r\n                    return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\r\n\r\n                default:\r\n                    return 0;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        textureSizeInBytes : function(pixelFormat, pixelDatatype, width, height) {\r\n            var componentsLength = PixelFormat.componentsLength(pixelFormat);\r\n            if (PixelDatatype.isPacked(pixelDatatype)) {\r\n                componentsLength = 1;\r\n            }\r\n            return componentsLength * PixelDatatype.sizeInBytes(pixelDatatype) * width * height;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        createTypedArray : function(pixelFormat, pixelDatatype, width, height) {\r\n            var constructor;\r\n            var sizeInBytes = PixelDatatype.sizeInBytes(pixelDatatype);\r\n            if (sizeInBytes === Uint8Array.BYTES_PER_ELEMENT) {\r\n                constructor = Uint8Array;\r\n            } else if (sizeInBytes === Uint16Array.BYTES_PER_ELEMENT) {\r\n                constructor = Uint16Array;\r\n            } else if (sizeInBytes === Float32Array.BYTES_PER_ELEMENT && pixelDatatype === PixelDatatype.FLOAT) {\r\n                constructor = Float32Array;\r\n            } else {\r\n                constructor = Uint32Array;\r\n            }\r\n\r\n            var size = PixelFormat.componentsLength(pixelFormat) * width * height;\r\n            return new constructor(size);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        flipY : function(bufferView, pixelFormat, pixelDatatype, width, height) {\r\n            if (height === 1) {\r\n                return bufferView;\r\n            }\r\n            var flipped = PixelFormat.createTypedArray(pixelFormat, pixelDatatype, width, height);\r\n            var numberOfComponents = PixelFormat.componentsLength(pixelFormat);\r\n            var textureWidth = width * numberOfComponents;\r\n            for (var i = 0; i < height; ++i) {\r\n                var row = i * height * numberOfComponents;\r\n                var flippedRow = (height - i - 1) * height * numberOfComponents;\r\n                for (var j = 0; j < textureWidth; ++j) {\r\n                    flipped[flippedRow + j] = bufferView[row + j];\r\n                }\r\n            }\r\n            return flipped;\r\n        }\r\n    };\r\n\r\n    return freezeObject(PixelFormat);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/PixelFormat.js\n// module id = 317\n// module chunks = 0","define([\r\n        '../Core/freezeObject',\r\n        '../Core/WebGLConstants'\r\n    ], function(\r\n        freezeObject,\r\n        WebGLConstants) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PixelDatatype = {\r\n        UNSIGNED_BYTE : WebGLConstants.UNSIGNED_BYTE,\r\n        UNSIGNED_SHORT : WebGLConstants.UNSIGNED_SHORT,\r\n        UNSIGNED_INT : WebGLConstants.UNSIGNED_INT,\r\n        FLOAT : WebGLConstants.FLOAT,\r\n        HALF_FLOAT : WebGLConstants.HALF_FLOAT_OES,\r\n        UNSIGNED_INT_24_8 : WebGLConstants.UNSIGNED_INT_24_8,\r\n        UNSIGNED_SHORT_4_4_4_4 : WebGLConstants.UNSIGNED_SHORT_4_4_4_4,\r\n        UNSIGNED_SHORT_5_5_5_1 : WebGLConstants.UNSIGNED_SHORT_5_5_5_1,\r\n        UNSIGNED_SHORT_5_6_5 : WebGLConstants.UNSIGNED_SHORT_5_6_5,\r\n\r\n        isPacked : function(pixelDatatype) {\r\n            return pixelDatatype === PixelDatatype.UNSIGNED_INT_24_8 ||\r\n                   pixelDatatype === PixelDatatype.UNSIGNED_SHORT_4_4_4_4 ||\r\n                   pixelDatatype === PixelDatatype.UNSIGNED_SHORT_5_5_5_1 ||\r\n                   pixelDatatype === PixelDatatype.UNSIGNED_SHORT_5_6_5;\r\n        },\r\n\r\n        sizeInBytes : function(pixelDatatype) {\r\n            switch (pixelDatatype) {\r\n                case PixelDatatype.UNSIGNED_BYTE:\r\n                    return 1;\r\n                case PixelDatatype.UNSIGNED_SHORT:\r\n                case PixelDatatype.UNSIGNED_SHORT_4_4_4_4:\r\n                case PixelDatatype.UNSIGNED_SHORT_5_5_5_1:\r\n                case PixelDatatype.UNSIGNED_SHORT_5_6_5:\r\n                case PixelDatatype.HALF_FLOAT:\r\n                    return 2;\r\n                case PixelDatatype.UNSIGNED_INT:\r\n                case PixelDatatype.FLOAT:\r\n                case PixelDatatype.UNSIGNED_INT_24_8:\r\n                    return 4;\r\n            }\r\n        },\r\n\r\n        validate : function(pixelDatatype) {\r\n            return ((pixelDatatype === PixelDatatype.UNSIGNED_BYTE) ||\r\n                    (pixelDatatype === PixelDatatype.UNSIGNED_SHORT) ||\r\n                    (pixelDatatype === PixelDatatype.UNSIGNED_INT) ||\r\n                    (pixelDatatype === PixelDatatype.FLOAT) ||\r\n                    (pixelDatatype === PixelDatatype.HALF_FLOAT) ||\r\n                    (pixelDatatype === PixelDatatype.UNSIGNED_INT_24_8) ||\r\n                    (pixelDatatype === PixelDatatype.UNSIGNED_SHORT_4_4_4_4) ||\r\n                    (pixelDatatype === PixelDatatype.UNSIGNED_SHORT_5_5_5_1) ||\r\n                    (pixelDatatype === PixelDatatype.UNSIGNED_SHORT_5_6_5));\r\n        }\r\n    };\r\n\r\n    return freezeObject(PixelDatatype);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Renderer/PixelDatatype.js\n// module id = 318\n// module chunks = 0","/*** IMPORTS FROM imports-loader ***/\nvar require = false;\n\n/**\r\n * @licence\r\n * crunch/crnlib uses the ZLIB license:\r\n * http-colon-slashslash opensource.org/licenses/Zlib\r\n *\r\n * Copyright (c) 2010-2016 Richard Geldreich, Jr. and Binomial LLC\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n *\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n *\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n *\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n *\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n\r\n// The C++ code was compiled to Javascript with Emcripten.\r\n// For instructions, see: https://github.com/BinomialLLC/crunch\r\n\r\ndefine([], function() {\r\n\r\nvar Module;if(!Module)Module=(typeof Module!==\"undefined\"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;if(Module[\"ENVIRONMENT\"]){if(Module[\"ENVIRONMENT\"]===\"WEB\"){ENVIRONMENT_IS_WEB=true}else if(Module[\"ENVIRONMENT\"]===\"WORKER\"){ENVIRONMENT_IS_WORKER=true}else if(Module[\"ENVIRONMENT\"]===\"NODE\"){ENVIRONMENT_IS_NODE=true}else if(Module[\"ENVIRONMENT\"]===\"SHELL\"){ENVIRONMENT_IS_SHELL=true}else{throw new Error(\"The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.\")}}else{ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof require===\"function\"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER}if(ENVIRONMENT_IS_NODE){if(!Module[\"print\"])Module[\"print\"]=console.log;if(!Module[\"printErr\"])Module[\"printErr\"]=console.warn;var nodeFS;var nodePath;Module[\"read\"]=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);var ret=nodeFS[\"readFileSync\"](filename);return binary?ret:ret.toString()};Module[\"readBinary\"]=function readBinary(filename){var ret=Module[\"read\"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module[\"load\"]=function load(f){globalEval(read(f))};if(!Module[\"thisProgram\"]){if(process[\"argv\"].length>1){Module[\"thisProgram\"]=process[\"argv\"][1].replace(/\\\\/g,\"/\")}else{Module[\"thisProgram\"]=\"unknown-program\"}}Module[\"arguments\"]=process[\"argv\"].slice(2);if(typeof module!==\"undefined\"){module[\"exports\"]=Module}process[\"on\"](\"uncaughtException\",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module[\"inspect\"]=(function(){return\"[Emscripten Module object]\"})}else if(ENVIRONMENT_IS_SHELL){if(!Module[\"print\"])Module[\"print\"]=print;if(typeof printErr!=\"undefined\")Module[\"printErr\"]=printErr;if(typeof read!=\"undefined\"){Module[\"read\"]=read}else{Module[\"read\"]=function shell_read(){throw\"no read() available\"}}Module[\"readBinary\"]=function readBinary(f){if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}var data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){Module[\"arguments\"]=scriptArgs}else if(typeof arguments!=\"undefined\"){Module[\"arguments\"]=arguments}if(typeof quit===\"function\"){Module[\"quit\"]=(function(status,toThrow){quit(status)})}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module[\"read\"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module[\"readBinary\"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}Module[\"readAsync\"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)};if(typeof arguments!=\"undefined\"){Module[\"arguments\"]=arguments}if(typeof console!==\"undefined\"){if(!Module[\"print\"])Module[\"print\"]=function shell_print(x){console.log(x)};if(!Module[\"printErr\"])Module[\"printErr\"]=function shell_printErr(x){console.warn(x)}}else{var TRY_USE_DUMP=false;if(!Module[\"print\"])Module[\"print\"]=TRY_USE_DUMP&&typeof dump!==\"undefined\"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module[\"load\"]=importScripts}if(typeof Module[\"setWindowTitle\"]===\"undefined\"){Module[\"setWindowTitle\"]=(function(title){document.title=title})}}else{throw\"Unknown runtime environment. Where are we?\"}function globalEval(x){eval.call(null,x)}if(!Module[\"load\"]&&Module[\"read\"]){Module[\"load\"]=function load(f){globalEval(Module[\"read\"](f))}}if(!Module[\"print\"]){Module[\"print\"]=(function(){})}if(!Module[\"printErr\"]){Module[\"printErr\"]=Module[\"print\"]}if(!Module[\"arguments\"]){Module[\"arguments\"]=[]}if(!Module[\"thisProgram\"]){Module[\"thisProgram\"]=\"./this.program\"}if(!Module[\"quit\"]){Module[\"quit\"]=(function(status,toThrow){throw toThrow})}Module.print=Module[\"print\"];Module.printErr=Module[\"printErr\"];Module[\"preRun\"]=[];Module[\"postRun\"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var Runtime={setTempRet0:(function(value){tempRet0=value;return value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":return 4;case\"i64\":return 8;case\"float\":return 4;case\"double\":return 8;default:{if(type[type.length-1]===\"*\"){return Runtime.QUANTUM_SIZE}else if(type[0]===\"i\"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type===\"double\"||type===\"i64\"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type==\"i64\"||type==\"double\"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){return Module[\"dynCall_\"+sig].apply(null,[ptr].concat(args))}else{return Module[\"dynCall_\"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw\"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\"}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){if(sig.length===1){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func)}}else if(sig.length===2){sigCache[func]=function dynCall_wrapper(arg){return Runtime.dynCall(sig,func,[arg])}}else{sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,Array.prototype.slice.call(arguments))}}}return sigCache[func]}),getCompilerSetting:(function(name){throw\"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work\"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=(ret+size+15|0)&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module[\"Runtime\"]=Runtime;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];if(!func){try{func=eval(\"_\"+ident)}catch(e){}}assert(func,\"Cannot call unknown function \"+ident+\" (perhaps LLVM optimizations or closure removed it?)\");return func}var cwrap,ccall;((function(){var JSfuncs={\"stackSave\":(function(){Runtime.stackSave()}),\"stackRestore\":(function(){Runtime.stackRestore()}),\"arrayToC\":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),\"stringToC\":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=Runtime.stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={\"string\":JSfuncs[\"stringToC\"],\"array\":JSfuncs[\"arrayToC\"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType===\"string\")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\\s*[a-zA-Z$_0-9]*\\s*\\(([^)]*)\\)\\s*{\\s*([^*]*?)[\\s;]*(?:return\\s*(.*?)[;\\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource=null;function ensureJSsource(){if(!JSsource){JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type===\"number\"}));var numericRet=returnType!==\"string\";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return\"$\"+i}));var funcstr=\"(function(\"+argNames.join(\",\")+\") {\";var nargs=argTypes.length;if(!numericArgs){ensureJSsource();funcstr+=\"var stack = \"+JSsource[\"stackSave\"].body+\";\";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type===\"number\")continue;var convertCode=JSsource[type+\"ToC\"];funcstr+=\"var \"+convertCode.arguments+\" = \"+arg+\";\";funcstr+=convertCode.body+\";\";funcstr+=arg+\"=(\"+convertCode.returnValue+\");\"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+=\"var ret = \"+cfuncname+\"(\"+argNames.join(\",\")+\");\";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+=\"ret = \"+strgfy+\"(ret);\"}if(!numericArgs){ensureJSsource();funcstr+=JSsource[\"stackRestore\"].body.replace(\"()\",\"(stack)\")+\";\"}funcstr+=\"return ret})\";return eval(funcstr)}}))();Module[\"ccall\"]=ccall;Module[\"cwrap\"]=cwrap;function setValue(ptr,value,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":HEAP8[ptr>>0]=value;break;case\"i8\":HEAP8[ptr>>0]=value;break;case\"i16\":HEAP16[ptr>>1]=value;break;case\"i32\":HEAP32[ptr>>2]=value;break;case\"i64\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\"float\":HEAPF32[ptr>>2]=value;break;case\"double\":HEAPF64[ptr>>3]=value;break;default:abort(\"invalid type for setValue: \"+type)}}Module[\"setValue\"]=setValue;function getValue(ptr,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":return HEAP8[ptr>>0];case\"i8\":return HEAP8[ptr>>0];case\"i16\":return HEAP16[ptr>>1];case\"i32\":return HEAP32[ptr>>2];case\"i64\":return HEAP32[ptr>>2];case\"float\":return HEAPF32[ptr>>2];case\"double\":return HEAPF64[ptr>>3];default:abort(\"invalid type for setValue: \"+type)}return null}Module[\"getValue\"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module[\"ALLOC_NORMAL\"]=ALLOC_NORMAL;Module[\"ALLOC_STACK\"]=ALLOC_STACK;Module[\"ALLOC_STATIC\"]=ALLOC_STATIC;Module[\"ALLOC_DYNAMIC\"]=ALLOC_DYNAMIC;Module[\"ALLOC_NONE\"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab===\"number\"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types===\"string\"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[typeof _malloc===\"function\"?_malloc:Runtime.staticAlloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType===\"i8\"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr===\"function\"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type==\"i64\")type=\"i32\";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module[\"allocate\"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module[\"getMemory\"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return\"\";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret=\"\";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module[\"UTF8ToString\"](ptr)}Module[\"Pointer_stringify\"]=Pointer_stringify;function AsciiToString(ptr){var str=\"\";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module[\"AsciiToString\"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module[\"stringToAscii\"]=stringToAscii;var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str=\"\";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}Module[\"UTF8ArrayToString\"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module[\"UTF8ToString\"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module[\"stringToUTF8Array\"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module[\"stringToUTF8\"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module[\"lengthBytesUTF8\"]=lengthBytesUTF8;var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function demangle(func){var __cxa_demangle_func=Module[\"___cxa_demangle\"]||Module[\"__cxa_demangle\"];if(__cxa_demangle_func){try{var s=func.substr(1);var len=lengthBytesUTF8(s)+1;var buf=_malloc(len);stringToUTF8(s,buf,len);var status=_malloc(4);var ret=__cxa_demangle_func(buf,0,0,status);if(getValue(status,\"i32\")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}return func}Runtime.warnOnce(\"warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling\");return func}function demangleAll(text){var regex=/__Z[\\w\\d_]+/g;return text.replace(regex,(function(x){var y=demangle(x);return x===y?x:x+\" [\"+y+\"]\"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return\"(no stack trace available)\"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module[\"extraStackTrace\"])js+=\"\\n\"+Module[\"extraStackTrace\"]();return demangleAll(js)}Module[\"stackTrace\"]=stackTrace;var WASM_PAGE_SIZE=65536;var ASMJS_PAGE_SIZE=16777216;var MIN_TOTAL_MEMORY=16777216;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var HEAP,buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module[\"buffer\"]=buffer=buf}function updateGlobalBufferViews(){Module[\"HEAP8\"]=HEAP8=new Int8Array(buffer);Module[\"HEAP16\"]=HEAP16=new Int16Array(buffer);Module[\"HEAP32\"]=HEAP32=new Int32Array(buffer);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buffer);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buffer);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buffer);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buffer);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \"+TOTAL_MEMORY+\", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \")}if(!Module[\"reallocBuffer\"])Module[\"reallocBuffer\"]=(function(size){var ret;try{if(ArrayBuffer.transfer){ret=ArrayBuffer.transfer(buffer,size)}else{var oldHEAP8=HEAP8;ret=new ArrayBuffer(size);var temp=new Int8Array(ret);temp.set(oldHEAP8)}}catch(e){return false}var success=_emscripten_replace_memory(ret);if(!success)return false;return ret});function enlargeMemory(){var PAGE_MULTIPLE=Module[\"usingWasm\"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;var LIMIT=2147483648-PAGE_MULTIPLE;if(HEAP32[DYNAMICTOP_PTR>>2]>LIMIT){return false}var OLD_TOTAL_MEMORY=TOTAL_MEMORY;TOTAL_MEMORY=Math.max(TOTAL_MEMORY,MIN_TOTAL_MEMORY);while(TOTAL_MEMORY<HEAP32[DYNAMICTOP_PTR>>2]){if(TOTAL_MEMORY<=536870912){TOTAL_MEMORY=alignUp(2*TOTAL_MEMORY,PAGE_MULTIPLE)}else{TOTAL_MEMORY=Math.min(alignUp((3*TOTAL_MEMORY+2147483648)/4,PAGE_MULTIPLE),LIMIT)}}var replacement=Module[\"reallocBuffer\"](TOTAL_MEMORY);if(!replacement||replacement.byteLength!=TOTAL_MEMORY){TOTAL_MEMORY=OLD_TOTAL_MEMORY;return false}updateGlobalBuffer(replacement);updateGlobalBufferViews();return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\"byteLength\").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module[\"TOTAL_STACK\"]||5242880;var TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)Module.printErr(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+TOTAL_MEMORY+\"! (TOTAL_STACK=\"+TOTAL_STACK+\")\");if(Module[\"buffer\"]){buffer=Module[\"buffer\"]}else{{buffer=new ArrayBuffer(TOTAL_MEMORY)}}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw\"Runtime error: expected the system to be little-endian!\";Module[\"HEAP\"]=HEAP;Module[\"buffer\"]=buffer;Module[\"HEAP8\"]=HEAP8;Module[\"HEAP16\"]=HEAP16;Module[\"HEAP32\"]=HEAP32;Module[\"HEAPU8\"]=HEAPU8;Module[\"HEAPU16\"]=HEAPU16;Module[\"HEAPU32\"]=HEAPU32;Module[\"HEAPF32\"]=HEAPF32;Module[\"HEAPF64\"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module[\"addOnPreRun\"]=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module[\"addOnInit\"]=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module[\"addOnPreMain\"]=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module[\"addOnExit\"]=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module[\"addOnPostRun\"]=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module[\"intArrayFromString\"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join(\"\")}Module[\"intArrayToString\"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){Runtime.warnOnce(\"writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!\");var lastChar,end;if(dontAddNull){end=buffer+lengthBytesUTF8(string);lastChar=HEAP8[end]}stringToUTF8(string,buffer,Infinity);if(dontAddNull)HEAP8[end]=lastChar}Module[\"writeStringToMemory\"]=writeStringToMemory;function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}Module[\"writeArrayToMemory\"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module[\"writeAsciiToMemory\"]=writeAsciiToMemory;if(!Math[\"imul\"]||Math[\"imul\"](4294967295,5)!==-5)Math[\"imul\"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math[\"imul\"];if(!Math[\"clz32\"])Math[\"clz32\"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math[\"clz32\"];if(!Math[\"trunc\"])Math[\"trunc\"]=(function(x){return x<0?Math.ceil(x):Math.floor(x)});Math.trunc=Math[\"trunc\"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_round=Math.round;var Math_min=Math.min;var Math_clz32=Math.clz32;var Math_trunc=Math.trunc;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}Module[\"addRunDependency\"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"removeRunDependency\"]=removeRunDependency;Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};var ASM_CONSTS=[];STATIC_BASE=Runtime.GLOBAL_BASE;STATICTOP=STATIC_BASE+6192;__ATINIT__.push();allocate([228,2,0,0,81,16,0,0,12,3,0,0,177,16,0,0,32,0,0,0,0,0,0,0,12,3,0,0,94,16,0,0,48,0,0,0,0,0,0,0,228,2,0,0,127,16,0,0,12,3,0,0,140,16,0,0,16,0,0,0,0,0,0,0,12,3,0,0,183,17,0,0,32,0,0,0,0,0,0,0,12,3,0,0,147,17,0,0,72,0,0,0,0,0,0,0,108,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,32,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,40,20,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,56,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,37,115,40,37,117,41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,117,114,101,58,32,34,37,115,34,10,0,109,95,115,105,122,101,32,60,61,32,109,95,99,97,112,97,99,105,116,121,0,46,47,105,110,99,92,99,114,110,95,100,101,99,111,109,112,46,104,0,109,105,110,95,110,101,119,95,99,97,112,97,99,105,116,121,32,60,32,40,48,120,55,70,70,70,48,48,48,48,85,32,47,32,101,108,101,109,101,110,116,95,115,105,122,101,41,0,110,101,119,95,99,97,112,97,99,105,116,121,32,38,38,32,40,110,101,119,95,99,97,112,97,99,105,116,121,32,62,32,109,95,99,97,112,97,99,105,116,121,41,0,110,117,109,95,99,111,100,101,115,91,99,93,0,115,111,114,116,101,100,95,112,111,115,32,60,32,116,111,116,97,108,95,117,115,101,100,95,115,121,109,115,0,112,67,111,100,101,115,105,122,101,115,91,115,121,109,95,105,110,100,101,120,93,32,61,61,32,99,111,100,101,115,105,122,101,0,116,32,60,32,40,49,85,32,60,60,32,116,97,98,108,101,95,98,105,116,115,41,0,109,95,108,111,111,107,117,112,91,116,93,32,61,61,32,99,85,73,78,84,51,50,95,77,65,88,0,99,114,110,100,95,109,97,108,108,111,99,58,32,115,105,122,101,32,116,111,111,32,98,105,103,0,99,114,110,100,95,109,97,108,108,111,99,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,40,40,117,105,110,116,51,50,41,112,95,110,101,119,32,38,32,40,67,82,78,68,95,77,73,78,95,65,76,76,79,67,95,65,76,73,71,78,77,69,78,84,32,45,32,49,41,41,32,61,61,32,48,0,99,114,110,100,95,114,101,97,108,108,111,99,58,32,98,97,100,32,112,116,114,0,99,114,110,100,95,102,114,101,101,58,32,98,97,100,32,112,116,114,0,102,97,108,115,101,0,40,116,111,116,97,108,95,115,121,109,115,32,62,61,32,49,41,32,38,38,32,40,116,111,116,97,108,95,115,121,109,115,32,60,61,32,112,114,101,102,105,120,95,99,111,100,105,110,103,58,58,99,77,97,120,83,117,112,112,111,114,116,101,100,83,121,109,115,41,0,17,18,19,20,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,16,48,0,110,117,109,95,98,105,116,115,32,60,61,32,51,50,85,0,109,95,98,105,116,95,99,111,117,110,116,32,60,61,32,99,66,105,116,66,117,102,83,105,122,101,0,116,32,33,61,32,99,85,73,78,84,51,50,95,77,65,88,0,109,111,100,101,108,46,109,95,99,111,100,101,95,115,105,122,101,115,91,115,121,109,93,32,61,61,32,108,101,110,0,0,2,3,1,0,2,3,4,5,6,7,1,40,108,101,110,32,62,61,32,49,41,32,38,38,32,40,108,101,110,32,60,61,32,99,77,97,120,69,120,112,101,99,116,101,100,67,111,100,101,83,105,122,101,41,0,105,32,60,32,109,95,115,105,122,101,0,110,101,120,116,95,108,101,118,101,108,95,111,102,115,32,62,32,99,117,114,95,108,101,118,101,108,95,111,102,115,0,1,2,2,3,3,3,3,4,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,2,1,2,0,0,0,1,0,2,1,0,2,0,0,1,2,3,110,117,109,32,38,38,32,40,110,117,109,32,61,61,32,126,110,117,109,95,99,104,101,99,107,41,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0],\"i8\",ALLOC_NONE,Runtime.GLOBAL_BASE);var tempDoublePtr=STATICTOP;STATICTOP+=16;function _abort(){Module[\"abort\"]()}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Module[\"dynCall_vi\"](info.destructor,ptr)}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___cxa_begin_catch(ptr){var info=EXCEPTIONS.infos[ptr];if(info&&!info.caught){info.caught=true;__ZSt18uncaught_exceptionv.uncaught_exception--}if(info)info.rethrown=false;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Module[\"dynCall_v\"](func);_pthread_once.seen[ptr]=1}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],\"i8\",ALLOC_STATIC);var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}function ___setErrNo(value){if(Module[\"___errno_location\"])HEAP32[Module[\"___errno_location\"]()>>2]=value;return value}var PTHREAD_SPECIFIC_NEXT_KEY=1;var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}throw ptr+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\"}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(Runtime.setTempRet0(0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(Runtime.setTempRet0(0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module[\"___cxa_is_pointer_type\"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module[\"___cxa_can_catch\"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(Runtime.setTempRet0(typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(Runtime.setTempRet0(throwntype),thrown)|0}function ___gxx_personality_v0(){}function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffer){___syscall146.buffers=[null,[],[]];___syscall146.printChar=(function(stream,curr){var buffer=___syscall146.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?Module[\"print\"]:Module[\"printErr\"])(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}})}for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){___syscall146.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}__ATEXIT__.push((function(){var fflush=Module[\"_fflush\"];if(fflush)fflush(0);var printChar=___syscall146.printChar;if(!printChar)return;var buffers=___syscall146.buffers;if(buffers[1].length)printChar(1,10);if(buffers[2].length)printChar(2,10)}));DYNAMICTOP_PTR=allocate(1,\"i32\",ALLOC_STATIC);STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=Runtime.alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;function invoke_iiii(index,a1,a2,a3){try{return Module[\"dynCall_iiii\"](index,a1,a2,a3)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;Module[\"setThrew\"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module[\"dynCall_viiiii\"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;Module[\"setThrew\"](1,0)}}function invoke_vi(index,a1){try{Module[\"dynCall_vi\"](index,a1)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;Module[\"setThrew\"](1,0)}}function invoke_ii(index,a1){try{return Module[\"dynCall_ii\"](index,a1)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;Module[\"setThrew\"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module[\"dynCall_viii\"](index,a1,a2,a3)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;Module[\"setThrew\"](1,0)}}function invoke_v(index){try{Module[\"dynCall_v\"](index)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;Module[\"setThrew\"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module[\"dynCall_viiiiii\"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;Module[\"setThrew\"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module[\"dynCall_viiii\"](index,a1,a2,a3,a4)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;Module[\"setThrew\"](1,0)}}Module.asmGlobalArg={\"Math\":Math,\"Int8Array\":Int8Array,\"Int16Array\":Int16Array,\"Int32Array\":Int32Array,\"Uint8Array\":Uint8Array,\"Uint16Array\":Uint16Array,\"Uint32Array\":Uint32Array,\"Float32Array\":Float32Array,\"Float64Array\":Float64Array,\"NaN\":NaN,\"Infinity\":Infinity,\"byteLength\":byteLength};Module.asmLibraryArg={\"abort\":abort,\"assert\":assert,\"enlargeMemory\":enlargeMemory,\"getTotalMemory\":getTotalMemory,\"abortOnCannotGrowMemory\":abortOnCannotGrowMemory,\"invoke_iiii\":invoke_iiii,\"invoke_viiiii\":invoke_viiiii,\"invoke_vi\":invoke_vi,\"invoke_ii\":invoke_ii,\"invoke_viii\":invoke_viii,\"invoke_v\":invoke_v,\"invoke_viiiiii\":invoke_viiiiii,\"invoke_viiii\":invoke_viiii,\"_pthread_getspecific\":_pthread_getspecific,\"___syscall54\":___syscall54,\"_pthread_setspecific\":_pthread_setspecific,\"___gxx_personality_v0\":___gxx_personality_v0,\"___syscall6\":___syscall6,\"___setErrNo\":___setErrNo,\"_abort\":_abort,\"___cxa_begin_catch\":___cxa_begin_catch,\"_pthread_once\":_pthread_once,\"_emscripten_memcpy_big\":_emscripten_memcpy_big,\"_pthread_key_create\":_pthread_key_create,\"___syscall140\":___syscall140,\"___resumeException\":___resumeException,\"___cxa_find_matching_catch\":___cxa_find_matching_catch,\"___syscall146\":___syscall146,\"__ZSt18uncaught_exceptionv\":__ZSt18uncaught_exceptionv,\"DYNAMICTOP_PTR\":DYNAMICTOP_PTR,\"tempDoublePtr\":tempDoublePtr,\"ABORT\":ABORT,\"STACKTOP\":STACKTOP,\"STACK_MAX\":STACK_MAX,\"cttz_i8\":cttz_i8};// EMSCRIPTEN_START_ASM\r\nvar asm=(function(global,env,buffer) {\r\n\"almost asm\";var a=global.Int8Array;var b=new a(buffer);var c=global.Int16Array;var d=new c(buffer);var e=global.Int32Array;var f=new e(buffer);var g=global.Uint8Array;var h=new g(buffer);var i=global.Uint16Array;var j=new i(buffer);var k=global.Uint32Array;var l=new k(buffer);var m=global.Float32Array;var n=new m(buffer);var o=global.Float64Array;var p=new o(buffer);var q=global.byteLength;var r=env.DYNAMICTOP_PTR|0;var s=env.tempDoublePtr|0;var t=env.ABORT|0;var u=env.STACKTOP|0;var v=env.STACK_MAX|0;var w=env.cttz_i8|0;var x=0;var y=0;var z=0;var A=0;var B=global.NaN,C=global.Infinity;var D=0,E=0,F=0,G=0,H=0.0;var I=0;var J=global.Math.floor;var K=global.Math.abs;var L=global.Math.sqrt;var M=global.Math.pow;var N=global.Math.cos;var O=global.Math.sin;var P=global.Math.tan;var Q=global.Math.acos;var R=global.Math.asin;var S=global.Math.atan;var T=global.Math.atan2;var U=global.Math.exp;var V=global.Math.log;var W=global.Math.ceil;var X=global.Math.imul;var Y=global.Math.min;var Z=global.Math.max;var _=global.Math.clz32;var $=env.abort;var aa=env.assert;var ba=env.enlargeMemory;var ca=env.getTotalMemory;var da=env.abortOnCannotGrowMemory;var ea=env.invoke_iiii;var fa=env.invoke_viiiii;var ga=env.invoke_vi;var ha=env.invoke_ii;var ia=env.invoke_viii;var ja=env.invoke_v;var ka=env.invoke_viiiiii;var la=env.invoke_viiii;var ma=env._pthread_getspecific;var na=env.___syscall54;var oa=env._pthread_setspecific;var pa=env.___gxx_personality_v0;var qa=env.___syscall6;var ra=env.___setErrNo;var sa=env._abort;var ta=env.___cxa_begin_catch;var ua=env._pthread_once;var va=env._emscripten_memcpy_big;var wa=env._pthread_key_create;var xa=env.___syscall140;var ya=env.___resumeException;var za=env.___cxa_find_matching_catch;var Aa=env.___syscall146;var Ba=env.__ZSt18uncaught_exceptionv;var Ca=0.0;function Da(newBuffer){if(q(newBuffer)&16777215||q(newBuffer)<=16777215||q(newBuffer)>2147483648)return false;b=new a(newBuffer);d=new c(newBuffer);f=new e(newBuffer);h=new g(newBuffer);j=new i(newBuffer);l=new k(newBuffer);n=new m(newBuffer);p=new o(newBuffer);buffer=newBuffer;return true}\r\n// EMSCRIPTEN_START_FUNCS\r\nfunction Ma(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0;x=u;u=u+16|0;n=x;do if(a>>>0<245){k=a>>>0<11?16:a+11&-8;a=k>>>3;m=f[1144]|0;c=m>>>a;if(c&3|0){b=(c&1^1)+a|0;a=4616+(b<<1<<2)|0;c=a+8|0;d=f[c>>2]|0;e=d+8|0;g=f[e>>2]|0;if((a|0)==(g|0))f[1144]=m&~(1<<b);else{f[g+12>>2]=a;f[c>>2]=g}w=b<<3;f[d+4>>2]=w|3;w=d+w+4|0;f[w>>2]=f[w>>2]|1;w=e;u=x;return w|0}l=f[1146]|0;if(k>>>0>l>>>0){if(c|0){b=2<<a;b=c<<a&(b|0-b);b=(b&0-b)+-1|0;h=b>>>12&16;b=b>>>h;c=b>>>5&8;b=b>>>c;e=b>>>2&4;b=b>>>e;a=b>>>1&2;b=b>>>a;d=b>>>1&1;d=(c|h|e|a|d)+(b>>>d)|0;b=4616+(d<<1<<2)|0;a=b+8|0;e=f[a>>2]|0;h=e+8|0;c=f[h>>2]|0;if((b|0)==(c|0)){a=m&~(1<<d);f[1144]=a}else{f[c+12>>2]=b;f[a>>2]=c;a=m}g=(d<<3)-k|0;f[e+4>>2]=k|3;d=e+k|0;f[d+4>>2]=g|1;f[d+g>>2]=g;if(l|0){e=f[1149]|0;b=l>>>3;c=4616+(b<<1<<2)|0;b=1<<b;if(!(a&b)){f[1144]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=e;f[b+12>>2]=e;f[e+8>>2]=b;f[e+12>>2]=c}f[1146]=g;f[1149]=d;w=h;u=x;return w|0}i=f[1145]|0;if(i){c=(i&0-i)+-1|0;h=c>>>12&16;c=c>>>h;g=c>>>5&8;c=c>>>g;j=c>>>2&4;c=c>>>j;d=c>>>1&2;c=c>>>d;a=c>>>1&1;a=f[4880+((g|h|j|d|a)+(c>>>a)<<2)>>2]|0;c=(f[a+4>>2]&-8)-k|0;d=f[a+16+(((f[a+16>>2]|0)==0&1)<<2)>>2]|0;if(!d){j=a;g=c}else{do{h=(f[d+4>>2]&-8)-k|0;j=h>>>0<c>>>0;c=j?h:c;a=j?d:a;d=f[d+16+(((f[d+16>>2]|0)==0&1)<<2)>>2]|0}while((d|0)!=0);j=a;g=c}h=j+k|0;if(j>>>0<h>>>0){e=f[j+24>>2]|0;b=f[j+12>>2]|0;do if((b|0)==(j|0)){a=j+20|0;b=f[a>>2]|0;if(!b){a=j+16|0;b=f[a>>2]|0;if(!b){c=0;break}}while(1){c=b+20|0;d=f[c>>2]|0;if(d|0){b=d;a=c;continue}c=b+16|0;d=f[c>>2]|0;if(!d)break;else{b=d;a=c}}f[a>>2]=0;c=b}else{c=f[j+8>>2]|0;f[c+12>>2]=b;f[b+8>>2]=c;c=b}while(0);do if(e|0){b=f[j+28>>2]|0;a=4880+(b<<2)|0;if((j|0)==(f[a>>2]|0)){f[a>>2]=c;if(!c){f[1145]=i&~(1<<b);break}}else{f[e+16+(((f[e+16>>2]|0)!=(j|0)&1)<<2)>>2]=c;if(!c)break}f[c+24>>2]=e;b=f[j+16>>2]|0;if(b|0){f[c+16>>2]=b;f[b+24>>2]=c}b=f[j+20>>2]|0;if(b|0){f[c+20>>2]=b;f[b+24>>2]=c}}while(0);if(g>>>0<16){w=g+k|0;f[j+4>>2]=w|3;w=j+w+4|0;f[w>>2]=f[w>>2]|1}else{f[j+4>>2]=k|3;f[h+4>>2]=g|1;f[h+g>>2]=g;if(l|0){d=f[1149]|0;b=l>>>3;c=4616+(b<<1<<2)|0;b=1<<b;if(!(m&b)){f[1144]=m|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=d;f[b+12>>2]=d;f[d+8>>2]=b;f[d+12>>2]=c}f[1146]=g;f[1149]=h}w=j+8|0;u=x;return w|0}else m=k}else m=k}else m=k}else if(a>>>0<=4294967231){a=a+11|0;k=a&-8;j=f[1145]|0;if(j){d=0-k|0;a=a>>>8;if(a)if(k>>>0>16777215)i=31;else{m=(a+1048320|0)>>>16&8;v=a<<m;l=(v+520192|0)>>>16&4;v=v<<l;i=(v+245760|0)>>>16&2;i=14-(l|m|i)+(v<<i>>>15)|0;i=k>>>(i+7|0)&1|i<<1}else i=0;c=f[4880+(i<<2)>>2]|0;a:do if(!c){c=0;a=0;v=57}else{a=0;h=k<<((i|0)==31?0:25-(i>>>1)|0);g=0;while(1){e=(f[c+4>>2]&-8)-k|0;if(e>>>0<d>>>0)if(!e){a=c;d=0;e=c;v=61;break a}else{a=c;d=e}e=f[c+20>>2]|0;c=f[c+16+(h>>>31<<2)>>2]|0;g=(e|0)==0|(e|0)==(c|0)?g:e;e=(c|0)==0;if(e){c=g;v=57;break}else h=h<<((e^1)&1)}}while(0);if((v|0)==57){if((c|0)==0&(a|0)==0){a=2<<i;a=j&(a|0-a);if(!a){m=k;break}m=(a&0-a)+-1|0;h=m>>>12&16;m=m>>>h;g=m>>>5&8;m=m>>>g;i=m>>>2&4;m=m>>>i;l=m>>>1&2;m=m>>>l;c=m>>>1&1;a=0;c=f[4880+((g|h|i|l|c)+(m>>>c)<<2)>>2]|0}if(!c){i=a;h=d}else{e=c;v=61}}if((v|0)==61)while(1){v=0;c=(f[e+4>>2]&-8)-k|0;m=c>>>0<d>>>0;c=m?c:d;a=m?e:a;e=f[e+16+(((f[e+16>>2]|0)==0&1)<<2)>>2]|0;if(!e){i=a;h=c;break}else{d=c;v=61}}if((i|0)!=0?h>>>0<((f[1146]|0)-k|0)>>>0:0){g=i+k|0;if(i>>>0>=g>>>0){w=0;u=x;return w|0}e=f[i+24>>2]|0;b=f[i+12>>2]|0;do if((b|0)==(i|0)){a=i+20|0;b=f[a>>2]|0;if(!b){a=i+16|0;b=f[a>>2]|0;if(!b){b=0;break}}while(1){c=b+20|0;d=f[c>>2]|0;if(d|0){b=d;a=c;continue}c=b+16|0;d=f[c>>2]|0;if(!d)break;else{b=d;a=c}}f[a>>2]=0}else{w=f[i+8>>2]|0;f[w+12>>2]=b;f[b+8>>2]=w}while(0);do if(e){a=f[i+28>>2]|0;c=4880+(a<<2)|0;if((i|0)==(f[c>>2]|0)){f[c>>2]=b;if(!b){d=j&~(1<<a);f[1145]=d;break}}else{f[e+16+(((f[e+16>>2]|0)!=(i|0)&1)<<2)>>2]=b;if(!b){d=j;break}}f[b+24>>2]=e;a=f[i+16>>2]|0;if(a|0){f[b+16>>2]=a;f[a+24>>2]=b}a=f[i+20>>2]|0;if(a){f[b+20>>2]=a;f[a+24>>2]=b;d=j}else d=j}else d=j;while(0);do if(h>>>0>=16){f[i+4>>2]=k|3;f[g+4>>2]=h|1;f[g+h>>2]=h;b=h>>>3;if(h>>>0<256){c=4616+(b<<1<<2)|0;a=f[1144]|0;b=1<<b;if(!(a&b)){f[1144]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=g;f[b+12>>2]=g;f[g+8>>2]=b;f[g+12>>2]=c;break}b=h>>>8;if(b)if(h>>>0>16777215)b=31;else{v=(b+1048320|0)>>>16&8;w=b<<v;t=(w+520192|0)>>>16&4;w=w<<t;b=(w+245760|0)>>>16&2;b=14-(t|v|b)+(w<<b>>>15)|0;b=h>>>(b+7|0)&1|b<<1}else b=0;c=4880+(b<<2)|0;f[g+28>>2]=b;a=g+16|0;f[a+4>>2]=0;f[a>>2]=0;a=1<<b;if(!(d&a)){f[1145]=d|a;f[c>>2]=g;f[g+24>>2]=c;f[g+12>>2]=g;f[g+8>>2]=g;break}a=h<<((b|0)==31?0:25-(b>>>1)|0);c=f[c>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(h|0)){v=97;break}d=c+16+(a>>>31<<2)|0;b=f[d>>2]|0;if(!b){v=96;break}else{a=a<<1;c=b}}if((v|0)==96){f[d>>2]=g;f[g+24>>2]=c;f[g+12>>2]=g;f[g+8>>2]=g;break}else if((v|0)==97){v=c+8|0;w=f[v>>2]|0;f[w+12>>2]=g;f[v>>2]=g;f[g+8>>2]=w;f[g+12>>2]=c;f[g+24>>2]=0;break}}else{w=h+k|0;f[i+4>>2]=w|3;w=i+w+4|0;f[w>>2]=f[w>>2]|1}while(0);w=i+8|0;u=x;return w|0}else m=k}else m=k}else m=-1;while(0);c=f[1146]|0;if(c>>>0>=m>>>0){b=c-m|0;a=f[1149]|0;if(b>>>0>15){w=a+m|0;f[1149]=w;f[1146]=b;f[w+4>>2]=b|1;f[w+b>>2]=b;f[a+4>>2]=m|3}else{f[1146]=0;f[1149]=0;f[a+4>>2]=c|3;w=a+c+4|0;f[w>>2]=f[w>>2]|1}w=a+8|0;u=x;return w|0}h=f[1147]|0;if(h>>>0>m>>>0){t=h-m|0;f[1147]=t;w=f[1150]|0;v=w+m|0;f[1150]=v;f[v+4>>2]=t|1;f[w+4>>2]=m|3;w=w+8|0;u=x;return w|0}if(!(f[1262]|0)){f[1264]=4096;f[1263]=4096;f[1265]=-1;f[1266]=-1;f[1267]=0;f[1255]=0;a=n&-16^1431655768;f[n>>2]=a;f[1262]=a;a=4096}else a=f[1264]|0;i=m+48|0;j=m+47|0;g=a+j|0;e=0-a|0;k=g&e;if(k>>>0<=m>>>0){w=0;u=x;return w|0}a=f[1254]|0;if(a|0?(l=f[1252]|0,n=l+k|0,n>>>0<=l>>>0|n>>>0>a>>>0):0){w=0;u=x;return w|0}b:do if(!(f[1255]&4)){c=f[1150]|0;c:do if(c){d=5024;while(1){a=f[d>>2]|0;if(a>>>0<=c>>>0?(q=d+4|0,(a+(f[q>>2]|0)|0)>>>0>c>>>0):0)break;a=f[d+8>>2]|0;if(!a){v=118;break c}else d=a}b=g-h&e;if(b>>>0<2147483647){a=ac(b|0)|0;if((a|0)==((f[d>>2]|0)+(f[q>>2]|0)|0)){if((a|0)!=(-1|0)){h=b;g=a;v=135;break b}}else{d=a;v=126}}else b=0}else v=118;while(0);do if((v|0)==118){c=ac(0)|0;if((c|0)!=(-1|0)?(b=c,o=f[1263]|0,p=o+-1|0,b=((p&b|0)==0?0:(p+b&0-o)-b|0)+k|0,o=f[1252]|0,p=b+o|0,b>>>0>m>>>0&b>>>0<2147483647):0){q=f[1254]|0;if(q|0?p>>>0<=o>>>0|p>>>0>q>>>0:0){b=0;break}a=ac(b|0)|0;if((a|0)==(c|0)){h=b;g=c;v=135;break b}else{d=a;v=126}}else b=0}while(0);do if((v|0)==126){c=0-b|0;if(!(i>>>0>b>>>0&(b>>>0<2147483647&(d|0)!=(-1|0))))if((d|0)==(-1|0)){b=0;break}else{h=b;g=d;v=135;break b}a=f[1264]|0;a=j-b+a&0-a;if(a>>>0>=2147483647){h=b;g=d;v=135;break b}if((ac(a|0)|0)==(-1|0)){ac(c|0)|0;b=0;break}else{h=a+b|0;g=d;v=135;break b}}while(0);f[1255]=f[1255]|4;v=133}else{b=0;v=133}while(0);if(((v|0)==133?k>>>0<2147483647:0)?(t=ac(k|0)|0,q=ac(0)|0,r=q-t|0,s=r>>>0>(m+40|0)>>>0,!((t|0)==(-1|0)|s^1|t>>>0<q>>>0&((t|0)!=(-1|0)&(q|0)!=(-1|0))^1)):0){h=s?r:b;g=t;v=135}if((v|0)==135){b=(f[1252]|0)+h|0;f[1252]=b;if(b>>>0>(f[1253]|0)>>>0)f[1253]=b;j=f[1150]|0;do if(j){b=5024;while(1){a=f[b>>2]|0;c=b+4|0;d=f[c>>2]|0;if((g|0)==(a+d|0)){v=145;break}e=f[b+8>>2]|0;if(!e)break;else b=e}if(((v|0)==145?(f[b+12>>2]&8|0)==0:0)?j>>>0<g>>>0&j>>>0>=a>>>0:0){f[c>>2]=d+h;w=j+8|0;w=(w&7|0)==0?0:0-w&7;v=j+w|0;w=(f[1147]|0)+(h-w)|0;f[1150]=v;f[1147]=w;f[v+4>>2]=w|1;f[v+w+4>>2]=40;f[1151]=f[1266];break}if(g>>>0<(f[1148]|0)>>>0)f[1148]=g;c=g+h|0;b=5024;while(1){if((f[b>>2]|0)==(c|0)){v=153;break}a=f[b+8>>2]|0;if(!a)break;else b=a}if((v|0)==153?(f[b+12>>2]&8|0)==0:0){f[b>>2]=g;l=b+4|0;f[l>>2]=(f[l>>2]|0)+h;l=g+8|0;l=g+((l&7|0)==0?0:0-l&7)|0;b=c+8|0;b=c+((b&7|0)==0?0:0-b&7)|0;k=l+m|0;i=b-l-m|0;f[l+4>>2]=m|3;do if((b|0)!=(j|0)){if((b|0)==(f[1149]|0)){w=(f[1146]|0)+i|0;f[1146]=w;f[1149]=k;f[k+4>>2]=w|1;f[k+w>>2]=w;break}a=f[b+4>>2]|0;if((a&3|0)==1){h=a&-8;d=a>>>3;d:do if(a>>>0<256){a=f[b+8>>2]|0;c=f[b+12>>2]|0;if((c|0)==(a|0)){f[1144]=f[1144]&~(1<<d);break}else{f[a+12>>2]=c;f[c+8>>2]=a;break}}else{g=f[b+24>>2]|0;a=f[b+12>>2]|0;do if((a|0)==(b|0)){d=b+16|0;c=d+4|0;a=f[c>>2]|0;if(!a){a=f[d>>2]|0;if(!a){a=0;break}else c=d}while(1){d=a+20|0;e=f[d>>2]|0;if(e|0){a=e;c=d;continue}d=a+16|0;e=f[d>>2]|0;if(!e)break;else{a=e;c=d}}f[c>>2]=0}else{w=f[b+8>>2]|0;f[w+12>>2]=a;f[a+8>>2]=w}while(0);if(!g)break;c=f[b+28>>2]|0;d=4880+(c<<2)|0;do if((b|0)!=(f[d>>2]|0)){f[g+16+(((f[g+16>>2]|0)!=(b|0)&1)<<2)>>2]=a;if(!a)break d}else{f[d>>2]=a;if(a|0)break;f[1145]=f[1145]&~(1<<c);break d}while(0);f[a+24>>2]=g;c=b+16|0;d=f[c>>2]|0;if(d|0){f[a+16>>2]=d;f[d+24>>2]=a}c=f[c+4>>2]|0;if(!c)break;f[a+20>>2]=c;f[c+24>>2]=a}while(0);b=b+h|0;e=h+i|0}else e=i;b=b+4|0;f[b>>2]=f[b>>2]&-2;f[k+4>>2]=e|1;f[k+e>>2]=e;b=e>>>3;if(e>>>0<256){c=4616+(b<<1<<2)|0;a=f[1144]|0;b=1<<b;if(!(a&b)){f[1144]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=k;f[b+12>>2]=k;f[k+8>>2]=b;f[k+12>>2]=c;break}b=e>>>8;do if(!b)b=0;else{if(e>>>0>16777215){b=31;break}v=(b+1048320|0)>>>16&8;w=b<<v;t=(w+520192|0)>>>16&4;w=w<<t;b=(w+245760|0)>>>16&2;b=14-(t|v|b)+(w<<b>>>15)|0;b=e>>>(b+7|0)&1|b<<1}while(0);d=4880+(b<<2)|0;f[k+28>>2]=b;a=k+16|0;f[a+4>>2]=0;f[a>>2]=0;a=f[1145]|0;c=1<<b;if(!(a&c)){f[1145]=a|c;f[d>>2]=k;f[k+24>>2]=d;f[k+12>>2]=k;f[k+8>>2]=k;break}a=e<<((b|0)==31?0:25-(b>>>1)|0);c=f[d>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(e|0)){v=194;break}d=c+16+(a>>>31<<2)|0;b=f[d>>2]|0;if(!b){v=193;break}else{a=a<<1;c=b}}if((v|0)==193){f[d>>2]=k;f[k+24>>2]=c;f[k+12>>2]=k;f[k+8>>2]=k;break}else if((v|0)==194){v=c+8|0;w=f[v>>2]|0;f[w+12>>2]=k;f[v>>2]=k;f[k+8>>2]=w;f[k+12>>2]=c;f[k+24>>2]=0;break}}else{w=(f[1147]|0)+i|0;f[1147]=w;f[1150]=k;f[k+4>>2]=w|1}while(0);w=l+8|0;u=x;return w|0}b=5024;while(1){a=f[b>>2]|0;if(a>>>0<=j>>>0?(w=a+(f[b+4>>2]|0)|0,w>>>0>j>>>0):0)break;b=f[b+8>>2]|0}e=w+-47|0;a=e+8|0;a=e+((a&7|0)==0?0:0-a&7)|0;e=j+16|0;a=a>>>0<e>>>0?j:a;b=a+8|0;c=g+8|0;c=(c&7|0)==0?0:0-c&7;v=g+c|0;c=h+-40-c|0;f[1150]=v;f[1147]=c;f[v+4>>2]=c|1;f[v+c+4>>2]=40;f[1151]=f[1266];c=a+4|0;f[c>>2]=27;f[b>>2]=f[1256];f[b+4>>2]=f[1257];f[b+8>>2]=f[1258];f[b+12>>2]=f[1259];f[1256]=g;f[1257]=h;f[1259]=0;f[1258]=b;b=a+24|0;do{v=b;b=b+4|0;f[b>>2]=7}while((v+8|0)>>>0<w>>>0);if((a|0)!=(j|0)){g=a-j|0;f[c>>2]=f[c>>2]&-2;f[j+4>>2]=g|1;f[a>>2]=g;b=g>>>3;if(g>>>0<256){c=4616+(b<<1<<2)|0;a=f[1144]|0;b=1<<b;if(!(a&b)){f[1144]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=j;f[b+12>>2]=j;f[j+8>>2]=b;f[j+12>>2]=c;break}b=g>>>8;if(b)if(g>>>0>16777215)c=31;else{v=(b+1048320|0)>>>16&8;w=b<<v;t=(w+520192|0)>>>16&4;w=w<<t;c=(w+245760|0)>>>16&2;c=14-(t|v|c)+(w<<c>>>15)|0;c=g>>>(c+7|0)&1|c<<1}else c=0;d=4880+(c<<2)|0;f[j+28>>2]=c;f[j+20>>2]=0;f[e>>2]=0;b=f[1145]|0;a=1<<c;if(!(b&a)){f[1145]=b|a;f[d>>2]=j;f[j+24>>2]=d;f[j+12>>2]=j;f[j+8>>2]=j;break}a=g<<((c|0)==31?0:25-(c>>>1)|0);c=f[d>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(g|0)){v=216;break}d=c+16+(a>>>31<<2)|0;b=f[d>>2]|0;if(!b){v=215;break}else{a=a<<1;c=b}}if((v|0)==215){f[d>>2]=j;f[j+24>>2]=c;f[j+12>>2]=j;f[j+8>>2]=j;break}else if((v|0)==216){v=c+8|0;w=f[v>>2]|0;f[w+12>>2]=j;f[v>>2]=j;f[j+8>>2]=w;f[j+12>>2]=c;f[j+24>>2]=0;break}}}else{w=f[1148]|0;if((w|0)==0|g>>>0<w>>>0)f[1148]=g;f[1256]=g;f[1257]=h;f[1259]=0;f[1153]=f[1262];f[1152]=-1;b=0;do{w=4616+(b<<1<<2)|0;f[w+12>>2]=w;f[w+8>>2]=w;b=b+1|0}while((b|0)!=32);w=g+8|0;w=(w&7|0)==0?0:0-w&7;v=g+w|0;w=h+-40-w|0;f[1150]=v;f[1147]=w;f[v+4>>2]=w|1;f[v+w+4>>2]=40;f[1151]=f[1266]}while(0);b=f[1147]|0;if(b>>>0>m>>>0){t=b-m|0;f[1147]=t;w=f[1150]|0;v=w+m|0;f[1150]=v;f[v+4>>2]=t|1;f[w+4>>2]=m|3;w=w+8|0;u=x;return w|0}}w=jd()|0;f[w>>2]=12;w=0;u=x;return w|0}function Na(a,c,d,e,g,i){a=a|0;c=+c;d=d|0;e=e|0;g=g|0;i=i|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=u;u=u+560|0;l=G+8|0;t=G;F=G+524|0;E=F;m=G+512|0;f[t>>2]=0;D=m+12|0;Fc(c)|0;if((I|0)<0){c=-c;B=1;A=2087}else{B=(g&2049|0)!=0&1;A=(g&2048|0)==0?((g&1|0)==0?2088:2093):2090}Fc(c)|0;C=I&2146435072;do if(C>>>0<2146435072|(C|0)==2146435072&0<0){q=+hd(c,t)*2.0;j=q!=0.0;if(j)f[t>>2]=(f[t>>2]|0)+-1;w=i|32;if((w|0)==97){r=i&32;p=(r|0)==0?A:A+9|0;o=B|2;j=12-e|0;do if(!(e>>>0>11|(j|0)==0)){c=8.0;do{j=j+-1|0;c=c*16.0}while((j|0)!=0);if((b[p>>0]|0)==45){c=-(c+(-q-c));break}else{c=q+c-c;break}}else c=q;while(0);k=f[t>>2]|0;j=(k|0)<0?0-k|0:k;j=Rb(j,((j|0)<0)<<31>>31,D)|0;if((j|0)==(D|0)){j=m+11|0;b[j>>0]=48}b[j+-1>>0]=(k>>31&2)+43;n=j+-2|0;b[n>>0]=i+15;m=(e|0)<1;l=(g&8|0)==0;j=F;do{C=~~c;k=j+1|0;b[j>>0]=h[2122+C>>0]|r;c=(c-+(C|0))*16.0;if((k-E|0)==1?!(l&(m&c==0.0)):0){b[k>>0]=46;j=j+2|0}else j=k}while(c!=0.0);C=j-E|0;E=D-n|0;D=(e|0)!=0&(C+-2|0)<(e|0)?e+2|0:C;j=E+o+D|0;Wb(a,32,d,j,g);Nc(a,p,o);Wb(a,48,d,j,g^65536);Nc(a,F,C);Wb(a,48,D-C|0,0,0);Nc(a,n,E);Wb(a,32,d,j,g^8192);break}k=(e|0)<0?6:e;if(j){j=(f[t>>2]|0)+-28|0;f[t>>2]=j;c=q*268435456.0}else{c=q;j=f[t>>2]|0}C=(j|0)<0?l:l+288|0;l=C;do{y=~~c>>>0;f[l>>2]=y;l=l+4|0;c=(c-+(y>>>0))*1.0e9}while(c!=0.0);if((j|0)>0){m=C;o=l;while(1){n=(j|0)<29?j:29;j=o+-4|0;if(j>>>0>=m>>>0){l=0;do{x=yc(f[j>>2]|0,0,n|0)|0;x=Gc(x|0,I|0,l|0,0)|0;y=I;v=mc(x|0,y|0,1e9,0)|0;f[j>>2]=v;l=Uc(x|0,y|0,1e9,0)|0;j=j+-4|0}while(j>>>0>=m>>>0);if(l){m=m+-4|0;f[m>>2]=l}}l=o;while(1){if(l>>>0<=m>>>0)break;j=l+-4|0;if(!(f[j>>2]|0))l=j;else break}j=(f[t>>2]|0)-n|0;f[t>>2]=j;if((j|0)>0)o=l;else break}}else m=C;if((j|0)<0){e=((k+25|0)/9|0)+1|0;s=(w|0)==102;do{r=0-j|0;r=(r|0)<9?r:9;if(m>>>0<l>>>0){n=(1<<r)+-1|0;o=1e9>>>r;p=0;j=m;do{y=f[j>>2]|0;f[j>>2]=(y>>>r)+p;p=X(y&n,o)|0;j=j+4|0}while(j>>>0<l>>>0);j=(f[m>>2]|0)==0?m+4|0:m;if(!p){m=j;j=l}else{f[l>>2]=p;m=j;j=l+4|0}}else{m=(f[m>>2]|0)==0?m+4|0:m;j=l}l=s?C:m;l=(j-l>>2|0)>(e|0)?l+(e<<2)|0:j;j=(f[t>>2]|0)+r|0;f[t>>2]=j}while((j|0)<0);j=m;e=l}else{j=m;e=l}y=C;if(j>>>0<e>>>0){l=(y-j>>2)*9|0;n=f[j>>2]|0;if(n>>>0>=10){m=10;do{m=m*10|0;l=l+1|0}while(n>>>0>=m>>>0)}}else l=0;s=(w|0)==103;v=(k|0)!=0;m=k-((w|0)!=102?l:0)+((v&s)<<31>>31)|0;if((m|0)<(((e-y>>2)*9|0)+-9|0)){m=m+9216|0;r=C+4+(((m|0)/9|0)+-1024<<2)|0;m=((m|0)%9|0)+1|0;if((m|0)<9){n=10;do{n=n*10|0;m=m+1|0}while((m|0)!=9)}else n=10;o=f[r>>2]|0;p=(o>>>0)%(n>>>0)|0;m=(r+4|0)==(e|0);if(!(m&(p|0)==0)){q=(((o>>>0)/(n>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;x=(n|0)/2|0;c=p>>>0<x>>>0?.5:m&(p|0)==(x|0)?1.0:1.5;if(B){x=(b[A>>0]|0)==45;c=x?-c:c;q=x?-q:q}m=o-p|0;f[r>>2]=m;if(q+c!=q){x=m+n|0;f[r>>2]=x;if(x>>>0>999999999){l=r;while(1){m=l+-4|0;f[l>>2]=0;if(m>>>0<j>>>0){j=j+-4|0;f[j>>2]=0}x=(f[m>>2]|0)+1|0;f[m>>2]=x;if(x>>>0>999999999)l=m;else break}}else m=r;l=(y-j>>2)*9|0;o=f[j>>2]|0;if(o>>>0>=10){n=10;do{n=n*10|0;l=l+1|0}while(o>>>0>=n>>>0)}}else m=r}else m=r;m=m+4|0;m=e>>>0>m>>>0?m:e;x=j}else{m=e;x=j}w=m;while(1){if(w>>>0<=x>>>0){t=0;break}j=w+-4|0;if(!(f[j>>2]|0))w=j;else{t=1;break}}e=0-l|0;do if(s){j=((v^1)&1)+k|0;if((j|0)>(l|0)&(l|0)>-5){n=i+-1|0;k=j+-1-l|0}else{n=i+-2|0;k=j+-1|0}j=g&8;if(!j){if(t?(z=f[w+-4>>2]|0,(z|0)!=0):0)if(!((z>>>0)%10|0)){m=0;j=10;do{j=j*10|0;m=m+1|0}while(!((z>>>0)%(j>>>0)|0|0))}else m=0;else m=9;j=((w-y>>2)*9|0)+-9|0;if((n|32|0)==102){r=j-m|0;r=(r|0)>0?r:0;k=(k|0)<(r|0)?k:r;r=0;break}else{r=j+l-m|0;r=(r|0)>0?r:0;k=(k|0)<(r|0)?k:r;r=0;break}}else r=j}else{n=i;r=g&8}while(0);s=k|r;o=(s|0)!=0&1;p=(n|32|0)==102;if(p){v=0;j=(l|0)>0?l:0}else{j=(l|0)<0?e:l;j=Rb(j,((j|0)<0)<<31>>31,D)|0;m=D;if((m-j|0)<2)do{j=j+-1|0;b[j>>0]=48}while((m-j|0)<2);b[j+-1>>0]=(l>>31&2)+43;j=j+-2|0;b[j>>0]=n;v=j;j=m-j|0}j=B+1+k+o+j|0;Wb(a,32,d,j,g);Nc(a,A,B);Wb(a,48,d,j,g^65536);if(p){n=x>>>0>C>>>0?C:x;r=F+9|0;o=r;p=F+8|0;m=n;do{l=Rb(f[m>>2]|0,0,r)|0;if((m|0)==(n|0)){if((l|0)==(r|0)){b[p>>0]=48;l=p}}else if(l>>>0>F>>>0){Ib(F|0,48,l-E|0)|0;do l=l+-1|0;while(l>>>0>F>>>0)}Nc(a,l,o-l|0);m=m+4|0}while(m>>>0<=C>>>0);if(s|0)Nc(a,2138,1);if(m>>>0<w>>>0&(k|0)>0)while(1){l=Rb(f[m>>2]|0,0,r)|0;if(l>>>0>F>>>0){Ib(F|0,48,l-E|0)|0;do l=l+-1|0;while(l>>>0>F>>>0)}Nc(a,l,(k|0)<9?k:9);m=m+4|0;l=k+-9|0;if(!(m>>>0<w>>>0&(k|0)>9)){k=l;break}else k=l}Wb(a,48,k+9|0,9,0)}else{s=t?w:x+4|0;if((k|0)>-1){t=F+9|0;r=(r|0)==0;e=t;o=0-E|0;p=F+8|0;n=x;do{l=Rb(f[n>>2]|0,0,t)|0;if((l|0)==(t|0)){b[p>>0]=48;l=p}do if((n|0)==(x|0)){m=l+1|0;Nc(a,l,1);if(r&(k|0)<1){l=m;break}Nc(a,2138,1);l=m}else{if(l>>>0<=F>>>0)break;Ib(F|0,48,l+o|0)|0;do l=l+-1|0;while(l>>>0>F>>>0)}while(0);E=e-l|0;Nc(a,l,(k|0)>(E|0)?E:k);k=k-E|0;n=n+4|0}while(n>>>0<s>>>0&(k|0)>-1)}Wb(a,48,k+18|0,18,0);Nc(a,v,D-v|0)}Wb(a,32,d,j,g^8192)}else{F=(i&32|0)!=0;j=B+3|0;Wb(a,32,d,j,g&-65537);Nc(a,A,B);Nc(a,c!=c|0.0!=0.0?(F?2114:2118):F?2106:2110,3);Wb(a,32,d,j,g^8192)}while(0);u=G;return ((j|0)<(d|0)?d:j)|0}function Oa(a,c,e,g,h){a=a|0;c=c|0;e=e|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=u;u=u+64|0;C=G+16|0;D=G;A=G+24|0;E=G+8|0;F=G+20|0;f[C>>2]=c;x=(a|0)!=0;y=A+40|0;z=y;A=A+39|0;B=E+4|0;j=0;i=0;n=0;a:while(1){do if((i|0)>-1)if((j|0)>(2147483647-i|0)){i=jd()|0;f[i>>2]=75;i=-1;break}else{i=j+i|0;break}while(0);j=b[c>>0]|0;if(!(j<<24>>24)){w=87;break}else k=c;b:while(1){switch(j<<24>>24){case 37:{j=k;w=9;break b}case 0:{j=k;break b}default:{}}v=k+1|0;f[C>>2]=v;j=b[v>>0]|0;k=v}c:do if((w|0)==9)while(1){w=0;if((b[k+1>>0]|0)!=37)break c;j=j+1|0;k=k+2|0;f[C>>2]=k;if((b[k>>0]|0)==37)w=9;else break}while(0);j=j-c|0;if(x)Nc(a,c,j);if(j|0){c=k;continue}l=k+1|0;j=(b[l>>0]|0)+-48|0;if(j>>>0<10){v=(b[k+2>>0]|0)==36;t=v?j:-1;n=v?1:n;l=v?k+3|0:l}else t=-1;f[C>>2]=l;j=b[l>>0]|0;k=(j<<24>>24)+-32|0;d:do if(k>>>0<32){m=0;o=j;while(1){j=1<<k;if(!(j&75913)){j=o;break d}m=j|m;l=l+1|0;f[C>>2]=l;j=b[l>>0]|0;k=(j<<24>>24)+-32|0;if(k>>>0>=32)break;else o=j}}else m=0;while(0);if(j<<24>>24==42){k=l+1|0;j=(b[k>>0]|0)+-48|0;if(j>>>0<10?(b[l+2>>0]|0)==36:0){f[h+(j<<2)>>2]=10;j=f[g+((b[k>>0]|0)+-48<<3)>>2]|0;n=1;l=l+3|0}else{if(n|0){i=-1;break}if(x){n=(f[e>>2]|0)+(4-1)&~(4-1);j=f[n>>2]|0;f[e>>2]=n+4;n=0;l=k}else{j=0;n=0;l=k}}f[C>>2]=l;v=(j|0)<0;j=v?0-j|0:j;m=v?m|8192:m}else{j=ec(C)|0;if((j|0)<0){i=-1;break}l=f[C>>2]|0}do if((b[l>>0]|0)==46){if((b[l+1>>0]|0)!=42){f[C>>2]=l+1;k=ec(C)|0;l=f[C>>2]|0;break}o=l+2|0;k=(b[o>>0]|0)+-48|0;if(k>>>0<10?(b[l+3>>0]|0)==36:0){f[h+(k<<2)>>2]=10;k=f[g+((b[o>>0]|0)+-48<<3)>>2]|0;l=l+4|0;f[C>>2]=l;break}if(n|0){i=-1;break a}if(x){v=(f[e>>2]|0)+(4-1)&~(4-1);k=f[v>>2]|0;f[e>>2]=v+4}else k=0;f[C>>2]=o;l=o}else k=-1;while(0);s=0;while(1){if(((b[l>>0]|0)+-65|0)>>>0>57){i=-1;break a}v=l+1|0;f[C>>2]=v;o=b[(b[l>>0]|0)+-65+(1606+(s*58|0))>>0]|0;q=o&255;if((q+-1|0)>>>0<8){s=q;l=v}else break}if(!(o<<24>>24)){i=-1;break}r=(t|0)>-1;do if(o<<24>>24==19)if(r){i=-1;break a}else w=49;else{if(r){f[h+(t<<2)>>2]=q;r=g+(t<<3)|0;t=f[r+4>>2]|0;w=D;f[w>>2]=f[r>>2];f[w+4>>2]=t;w=49;break}if(!x){i=0;break a}db(D,q,e)}while(0);if((w|0)==49?(w=0,!x):0){j=0;c=v;continue}l=b[l>>0]|0;l=(s|0)!=0&(l&15|0)==3?l&-33:l;r=m&-65537;t=(m&8192|0)==0?m:r;e:do switch(l|0){case 110:switch((s&255)<<24>>24){case 0:{f[f[D>>2]>>2]=i;j=0;c=v;continue a}case 1:{f[f[D>>2]>>2]=i;j=0;c=v;continue a}case 2:{j=f[D>>2]|0;f[j>>2]=i;f[j+4>>2]=((i|0)<0)<<31>>31;j=0;c=v;continue a}case 3:{d[f[D>>2]>>1]=i;j=0;c=v;continue a}case 4:{b[f[D>>2]>>0]=i;j=0;c=v;continue a}case 6:{f[f[D>>2]>>2]=i;j=0;c=v;continue a}case 7:{j=f[D>>2]|0;f[j>>2]=i;f[j+4>>2]=((i|0)<0)<<31>>31;j=0;c=v;continue a}default:{j=0;c=v;continue a}}case 112:{l=120;k=k>>>0>8?k:8;c=t|8;w=61;break}case 88:case 120:{c=t;w=61;break}case 111:{l=D;c=f[l>>2]|0;l=f[l+4>>2]|0;q=kc(c,l,y)|0;r=z-q|0;m=0;o=2070;k=(t&8|0)==0|(k|0)>(r|0)?k:r+1|0;r=t;w=67;break}case 105:case 100:{l=D;c=f[l>>2]|0;l=f[l+4>>2]|0;if((l|0)<0){c=Cc(0,0,c|0,l|0)|0;l=I;m=D;f[m>>2]=c;f[m+4>>2]=l;m=1;o=2070;w=66;break e}else{m=(t&2049|0)!=0&1;o=(t&2048|0)==0?((t&1|0)==0?2070:2072):2071;w=66;break e}}case 117:{l=D;m=0;o=2070;c=f[l>>2]|0;l=f[l+4>>2]|0;w=66;break}case 99:{b[A>>0]=f[D>>2];c=A;m=0;o=2070;q=y;l=1;k=r;break}case 109:{l=jd()|0;l=Qc(f[l>>2]|0)|0;w=71;break}case 115:{l=f[D>>2]|0;l=l|0?l:2080;w=71;break}case 67:{f[E>>2]=f[D>>2];f[B>>2]=0;f[D>>2]=E;q=-1;l=E;w=75;break}case 83:{c=f[D>>2]|0;if(!k){Wb(a,32,j,0,t);c=0;w=84}else{q=k;l=c;w=75}break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{j=Na(a,+p[D>>3],j,k,t,l)|0;c=v;continue a}default:{m=0;o=2070;q=y;l=k;k=t}}while(0);f:do if((w|0)==61){t=D;s=f[t>>2]|0;t=f[t+4>>2]|0;q=gc(s,t,y,l&32)|0;o=(c&8|0)==0|(s|0)==0&(t|0)==0;m=o?0:2;o=o?2070:2070+(l>>4)|0;r=c;c=s;l=t;w=67}else if((w|0)==66){q=Rb(c,l,y)|0;r=t;w=67}else if((w|0)==71){w=0;t=vb(l,0,k)|0;s=(t|0)==0;c=l;m=0;o=2070;q=s?l+k|0:t;l=s?k:t-l|0;k=r}else if((w|0)==75){w=0;o=l;c=0;k=0;while(1){m=f[o>>2]|0;if(!m)break;k=Rc(F,m)|0;if((k|0)<0|k>>>0>(q-c|0)>>>0)break;c=k+c|0;if(q>>>0>c>>>0)o=o+4|0;else break}if((k|0)<0){i=-1;break a}Wb(a,32,j,c,t);if(!c){c=0;w=84}else{m=0;while(1){k=f[l>>2]|0;if(!k){w=84;break f}k=Rc(F,k)|0;m=k+m|0;if((m|0)>(c|0)){w=84;break f}Nc(a,F,k);if(m>>>0>=c>>>0){w=84;break}else l=l+4|0}}}while(0);if((w|0)==67){w=0;l=(c|0)!=0|(l|0)!=0;t=(k|0)!=0|l;l=((l^1)&1)+(z-q)|0;c=t?q:y;q=y;l=t?((k|0)>(l|0)?k:l):k;k=(k|0)>-1?r&-65537:r}else if((w|0)==84){w=0;Wb(a,32,j,c,t^8192);j=(j|0)>(c|0)?j:c;c=v;continue}s=q-c|0;r=(l|0)<(s|0)?s:l;t=r+m|0;j=(j|0)<(t|0)?t:j;Wb(a,32,j,t,k);Nc(a,o,m);Wb(a,48,j,t,k^65536);Wb(a,48,r,s,0);Nc(a,c,s);Wb(a,32,j,t,k^8192);c=v}g:do if((w|0)==87)if(!a)if(!n)i=0;else{i=1;while(1){c=f[h+(i<<2)>>2]|0;if(!c)break;db(g+(i<<3)|0,c,e);i=i+1|0;if((i|0)>=10){i=1;break g}}while(1){if(f[h+(i<<2)>>2]|0){i=-1;break g}i=i+1|0;if((i|0)>=10){i=1;break}}}while(0);u=G;return i|0}function Pa(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;E=u;u=u+704|0;A=E+144|0;z=E+128|0;y=E+112|0;x=E+96|0;w=E+80|0;v=E+64|0;t=E+48|0;B=E+32|0;n=E+16|0;k=E;p=E+184|0;D=E+160|0;q=yb(a,14)|0;if(!q){Eb(c);D=1;u=E;return D|0}r=c+4|0;s=c+8|0;d=f[s>>2]|0;if((d|0)!=(q|0)){if(d>>>0<=q>>>0){do if((f[c+12>>2]|0)>>>0<q>>>0){if(fb(r,q,(d+1|0)==(q|0),1,0)|0){d=f[s>>2]|0;break}b[c+16>>0]=1;D=0;u=E;return D|0}while(0);Ib((f[r>>2]|0)+d|0,0,q-d|0)|0}f[s>>2]=q}Ib(f[r>>2]|0,0,q|0)|0;o=a+20|0;d=f[o>>2]|0;if((d|0)<5){i=a+4|0;j=a+8|0;g=a+16|0;do{e=f[i>>2]|0;if((e|0)==(f[j>>2]|0))e=0;else{f[i>>2]=e+1;e=h[e>>0]|0}d=d+8|0;f[o>>2]=d;if((d|0)>=33){f[k>>2]=866;f[k+4>>2]=3208;f[k+8>>2]=1366;vc(p,812,k)|0;Ub(p)|0;d=f[o>>2]|0}e=e<<32-d|f[g>>2];f[g>>2]=e}while((d|0)<5)}else{e=a+16|0;g=e;e=f[e>>2]|0}m=e>>>27;f[g>>2]=e<<5;f[o>>2]=d+-5;if((m+-1|0)>>>0>20){D=0;u=E;return D|0}f[D+20>>2]=0;f[D>>2]=0;f[D+4>>2]=0;f[D+8>>2]=0;f[D+12>>2]=0;b[D+16>>0]=0;d=D+4|0;e=D+8|0;a:do if(fb(d,21,0,1,0)|0){i=f[e>>2]|0;l=f[d>>2]|0;Ib(l+i|0,0,21-i|0)|0;f[e>>2]=21;i=a+4|0;j=a+8|0;k=a+16|0;g=0;do{d=f[o>>2]|0;if((d|0)<3)do{e=f[i>>2]|0;if((e|0)==(f[j>>2]|0))e=0;else{f[i>>2]=e+1;e=h[e>>0]|0}d=d+8|0;f[o>>2]=d;if((d|0)>=33){f[n>>2]=866;f[n+4>>2]=3208;f[n+8>>2]=1366;vc(p,812,n)|0;Ub(p)|0;d=f[o>>2]|0}e=e<<32-d|f[k>>2];f[k>>2]=e}while((d|0)<3);else e=f[k>>2]|0;f[k>>2]=e<<3;f[o>>2]=d+-3;b[l+(h[1327+g>>0]|0)>>0]=e>>>29;g=g+1|0}while((g|0)!=(m|0));if(qb(D)|0){k=a+4|0;l=a+8|0;m=a+16|0;d=0;b:do{j=q-d|0;g=bb(a,D)|0;c:do if(g>>>0<17){if((f[s>>2]|0)>>>0<=d>>>0){f[B>>2]=866;f[B+4>>2]=910;f[B+8>>2]=1497;vc(p,812,B)|0;Ub(p)|0}b[(f[r>>2]|0)+d>>0]=g;d=d+1|0}else switch(g|0){case 17:{e=f[o>>2]|0;if((e|0)<3)do{g=f[k>>2]|0;if((g|0)==(f[l>>2]|0))g=0;else{f[k>>2]=g+1;g=h[g>>0]|0}e=e+8|0;f[o>>2]=e;if((e|0)>=33){f[t>>2]=866;f[t+4>>2]=3208;f[t+8>>2]=1366;vc(p,812,t)|0;Ub(p)|0;e=f[o>>2]|0}g=g<<32-e|f[m>>2];f[m>>2]=g}while((e|0)<3);else g=f[m>>2]|0;f[m>>2]=g<<3;f[o>>2]=e+-3;g=(g>>>29)+3|0;e=g>>>0>j>>>0;if(e){d=0;break a}else{d=(e?0:g)+d|0;break c}}case 18:{e=f[o>>2]|0;if((e|0)<7)do{g=f[k>>2]|0;if((g|0)==(f[l>>2]|0))g=0;else{f[k>>2]=g+1;g=h[g>>0]|0}e=e+8|0;f[o>>2]=e;if((e|0)>=33){f[v>>2]=866;f[v+4>>2]=3208;f[v+8>>2]=1366;vc(p,812,v)|0;Ub(p)|0;e=f[o>>2]|0}g=g<<32-e|f[m>>2];f[m>>2]=g}while((e|0)<7);else g=f[m>>2]|0;f[m>>2]=g<<7;f[o>>2]=e+-7;g=(g>>>25)+11|0;e=g>>>0>j>>>0;if(e){d=0;break a}else{d=(e?0:g)+d|0;break c}}default:{if((g+-19|0)>>>0>=2){C=81;break b}e=f[o>>2]|0;if((g|0)==19){if((e|0)<2){g=e;while(1){e=f[k>>2]|0;if((e|0)==(f[l>>2]|0))i=0;else{f[k>>2]=e+1;i=h[e>>0]|0}e=g+8|0;f[o>>2]=e;if((e|0)>=33){f[w>>2]=866;f[w+4>>2]=3208;f[w+8>>2]=1366;vc(p,812,w)|0;Ub(p)|0;e=f[o>>2]|0}g=i<<32-e|f[m>>2];f[m>>2]=g;if((e|0)<2)g=e;else break}}else g=f[m>>2]|0;f[m>>2]=g<<2;g=g>>>30;i=3;e=e+-2|0}else{if((e|0)<6)do{g=f[k>>2]|0;if((g|0)==(f[l>>2]|0))g=0;else{f[k>>2]=g+1;g=h[g>>0]|0}e=e+8|0;f[o>>2]=e;if((e|0)>=33){f[x>>2]=866;f[x+4>>2]=3208;f[x+8>>2]=1366;vc(p,812,x)|0;Ub(p)|0;e=f[o>>2]|0}g=g<<32-e|f[m>>2];f[m>>2]=g}while((e|0)<6);else g=f[m>>2]|0;f[m>>2]=g<<6;g=g>>>26;i=7;e=e+-6|0}f[o>>2]=e;g=g+i|0;if((d|0)==0|g>>>0>j>>>0){d=0;break a}e=d+-1|0;if((f[s>>2]|0)>>>0<=e>>>0){f[y>>2]=866;f[y+4>>2]=910;f[y+8>>2]=1497;vc(p,812,y)|0;Ub(p)|0}i=b[(f[r>>2]|0)+e>>0]|0;if(!(i<<24>>24)){d=0;break a}e=g+d|0;if(d>>>0>=e>>>0)break c;do{if((f[s>>2]|0)>>>0<=d>>>0){f[z>>2]=866;f[z+4>>2]=910;f[z+8>>2]=1497;vc(p,812,z)|0;Ub(p)|0}b[(f[r>>2]|0)+d>>0]=i;d=d+1|0}while((d|0)!=(e|0));d=e}}while(0)}while(q>>>0>d>>>0);if((C|0)==81){f[A>>2]=866;f[A+4>>2]=3149;f[A+8>>2]=1348;vc(p,812,A)|0;Ub(p)|0;d=0;break}if((q|0)==(d|0))d=qb(c)|0;else d=0}else d=0}else{b[D+16>>0]=1;d=0}while(0);Cb(D);D=d;u=E;return D|0}function Qa(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;L=u;u=u+880|0;J=L+144|0;I=L+128|0;H=L+112|0;G=L+96|0;C=L+80|0;x=L+64|0;v=L+48|0;w=L+32|0;q=L+16|0;p=L;E=L+360|0;F=L+296|0;K=L+224|0;t=L+156|0;if((c|0)==0|g>>>0>11){K=0;u=L;return K|0}f[a>>2]=c;i=K;k=i+68|0;do{f[i>>2]=0;i=i+4|0}while((i|0)<(k|0));i=0;do{D=b[e+i>>0]|0;k=K+((D&255)<<2)|0;if(D<<24>>24)f[k>>2]=(f[k>>2]|0)+1;i=i+1|0}while((i|0)!=(c|0));k=0;l=0;m=0;n=-1;o=1;while(1){i=f[K+(o<<2)>>2]|0;if(!i){f[a+28+(o+-1<<2)>>2]=0;r=l}else{r=o+-1|0;f[F+(r<<2)>>2]=k;k=i+k|0;D=16-o|0;f[a+28+(r<<2)>>2]=(k+-1<<D|(1<<D)+-1)+1;f[a+96+(r<<2)>>2]=l;f[t+(o<<2)>>2]=l;r=i+l|0;m=m>>>0>o>>>0?m:o;n=n>>>0<o>>>0?n:o}o=o+1|0;if((o|0)==17)break;else{k=k<<1;l=r}}f[a+4>>2]=r;k=a+172|0;do if(r>>>0>(f[k>>2]|0)>>>0){i=r+-1|0;if(!(i&r))i=r;else{i=i>>>16|i;i=i>>>8|i;i=i>>>4|i;i=i>>>2|i;i=(i>>>1|i)+1|0;i=i>>>0>c>>>0?c:i}f[k>>2]=i;l=a+176|0;i=f[l>>2]|0;do if(i|0){D=f[i+-4>>2]|0;i=i+-8|0;if(!((D|0)!=0?(D|0)==(~f[i>>2]|0):0)){f[p>>2]=866;f[p+4>>2]=651;f[p+8>>2]=1579;vc(E,812,p)|0;Ub(E)|0}if(!(i&7)){Nb(i,0,0,1,0)|0;break}else{f[q>>2]=866;f[q+4>>2]=2506;f[q+8>>2]=1232;vc(E,812,q)|0;Ub(E)|0;break}}while(0);i=f[k>>2]|0;i=i|0?i:1;k=Db((i<<1)+8|0,0)|0;if(!k){f[l>>2]=0;g=0;break}else{f[k+4>>2]=i;f[k>>2]=~i;f[l>>2]=k+8;s=24;break}}else s=24;while(0);a:do if((s|0)==24){D=a+24|0;b[D>>0]=n;b[a+25>>0]=m;l=a+176|0;k=0;do{B=b[e+k>>0]|0;i=B&255;if(B<<24>>24){if(!(f[K+(i<<2)>>2]|0)){f[w>>2]=866;f[w+4>>2]=2276;f[w+8>>2]=977;vc(E,812,w)|0;Ub(E)|0}B=t+(i<<2)|0;i=f[B>>2]|0;f[B>>2]=i+1;if(i>>>0>=r>>>0){f[v>>2]=866;f[v+4>>2]=2280;f[v+8>>2]=990;vc(E,812,v)|0;Ub(E)|0}d[(f[l>>2]|0)+(i<<1)>>1]=k}k=k+1|0}while((k|0)!=(c|0));A=(h[D>>0]|0)>>>0<g>>>0?g:0;B=a+8|0;f[B>>2]=A;z=(A|0)!=0;if(z){y=1<<A;i=a+164|0;do if(y>>>0>(f[i>>2]|0)>>>0){f[i>>2]=y;l=a+168|0;i=f[l>>2]|0;do if(i|0){w=f[i+-4>>2]|0;i=i+-8|0;if(!((w|0)!=0?(w|0)==(~f[i>>2]|0):0)){f[x>>2]=866;f[x+4>>2]=651;f[x+8>>2]=1579;vc(E,812,x)|0;Ub(E)|0}if(!(i&7)){Nb(i,0,0,1,0)|0;break}else{f[C>>2]=866;f[C+4>>2]=2506;f[C+8>>2]=1232;vc(E,812,C)|0;Ub(E)|0;break}}while(0);i=y<<2;k=Db(i+8|0,0)|0;if(!k){f[l>>2]=0;g=0;break a}else{C=k+8|0;f[k+4>>2]=y;f[k>>2]=~y;f[l>>2]=C;k=C;break}}else{k=a+168|0;i=y<<2;l=k;k=f[k>>2]|0}while(0);Ib(k|0,-1,i|0)|0;v=a+176|0;t=1;do{if(f[K+(t<<2)>>2]|0){w=A-t|0;x=1<<w;i=t+-1|0;k=f[F+(i<<2)>>2]|0;if(i>>>0>=16){f[G>>2]=866;f[G+4>>2]=1960;f[G+8>>2]=1453;vc(E,812,G)|0;Ub(E)|0}c=f[a+28+(i<<2)>>2]|0;c=(c|0)==0?-1:(c+-1|0)>>>(16-t|0);if(k>>>0<=c>>>0){r=(f[a+96+(i<<2)>>2]|0)-k|0;s=t<<16;do{i=j[(f[v>>2]|0)+(r+k<<1)>>1]|0;if((h[e+i>>0]|0|0)!=(t|0)){f[H>>2]=866;f[H+4>>2]=2322;f[H+8>>2]=1019;vc(E,812,H)|0;Ub(E)|0}q=k<<w;o=i|s;n=0;do{p=n+q|0;if(p>>>0>=y>>>0){f[I>>2]=866;f[I+4>>2]=2328;f[I+8>>2]=1053;vc(E,812,I)|0;Ub(E)|0}i=f[l>>2]|0;if((f[i+(p<<2)>>2]|0)!=-1){f[J>>2]=866;f[J+4>>2]=2330;f[J+8>>2]=1076;vc(E,812,J)|0;Ub(E)|0;i=f[l>>2]|0}f[i+(p<<2)>>2]=o;n=n+1|0}while(n>>>0<x>>>0);k=k+1|0}while(k>>>0<=c>>>0)}}t=t+1|0}while(A>>>0>=t>>>0)}i=a+96|0;f[i>>2]=(f[i>>2]|0)-(f[F>>2]|0);i=a+100|0;f[i>>2]=(f[i>>2]|0)-(f[F+4>>2]|0);i=a+104|0;f[i>>2]=(f[i>>2]|0)-(f[F+8>>2]|0);i=a+108|0;f[i>>2]=(f[i>>2]|0)-(f[F+12>>2]|0);i=a+112|0;f[i>>2]=(f[i>>2]|0)-(f[F+16>>2]|0);i=a+116|0;f[i>>2]=(f[i>>2]|0)-(f[F+20>>2]|0);i=a+120|0;f[i>>2]=(f[i>>2]|0)-(f[F+24>>2]|0);i=a+124|0;f[i>>2]=(f[i>>2]|0)-(f[F+28>>2]|0);i=a+128|0;f[i>>2]=(f[i>>2]|0)-(f[F+32>>2]|0);i=a+132|0;f[i>>2]=(f[i>>2]|0)-(f[F+36>>2]|0);i=a+136|0;f[i>>2]=(f[i>>2]|0)-(f[F+40>>2]|0);i=a+140|0;f[i>>2]=(f[i>>2]|0)-(f[F+44>>2]|0);i=a+144|0;f[i>>2]=(f[i>>2]|0)-(f[F+48>>2]|0);i=a+148|0;f[i>>2]=(f[i>>2]|0)-(f[F+52>>2]|0);i=a+152|0;f[i>>2]=(f[i>>2]|0)-(f[F+56>>2]|0);i=a+156|0;f[i>>2]=(f[i>>2]|0)-(f[F+60>>2]|0);i=a+16|0;f[i>>2]=0;k=a+20|0;f[k>>2]=h[D>>0];b:do if(z){do{if(!g)break b;J=g;g=g+-1|0}while(!(f[K+(J<<2)>>2]|0));f[i>>2]=f[a+28+(g<<2)>>2];g=A+1|0;f[k>>2]=g;if(g>>>0<=m>>>0){while(1){if(f[K+(g<<2)>>2]|0)break;g=g+1|0;if(g>>>0>m>>>0)break b}f[k>>2]=g}}while(0);f[a+92>>2]=-1;f[a+160>>2]=1048575;f[a+12>>2]=32-(f[B>>2]|0);g=1}while(0);K=g;u=L;return K|0}function Ra(a,c,d,e,g,i,j,k){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;i=i|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0;ga=u;u=u+656|0;ea=ga+112|0;ca=ga+96|0;ba=ga+80|0;aa=ga+64|0;$=ga+48|0;fa=ga+32|0;da=ga+16|0;_=ga;Y=ga+144|0;Z=ga+128|0;N=a+240|0;O=f[N>>2]|0;P=a+256|0;Q=f[P>>2]|0;W=b[(f[a+88>>2]|0)+17>>0]|0;R=W&255;S=e>>>2;if(!(W<<24>>24)){u=ga;return 1}T=(k|0)==0;U=j+-1|0;V=U<<4;W=k+-1|0;H=(i&1|0)!=0;I=e<<1;J=a+92|0;K=a+116|0;L=a+140|0;M=a+236|0;G=(g&1|0)!=0;F=a+188|0;B=a+252|0;C=S+1|0;D=S+2|0;E=S+3|0;A=0;i=0;d=0;g=1;do{if(!T){y=f[c+(A<<2)>>2]|0;z=0;while(1){w=z&1;m=(w|0)==0;v=(w<<5^32)+-16|0;w=(w<<1^2)+-1|0;t=m?j:-1;l=m?0:U;a=(z|0)==(W|0);x=H&a;if((l|0)!=(t|0)){s=H&a^1;r=m?y:y+V|0;while(1){if((g|0)==1)g=bb(J,K)|0|512;q=g&7;g=g>>>3;m=h[1539+q>>0]|0;a=0;do{n=(bb(J,L)|0)+d|0;o=n-O|0;p=o>>31;d=p&n|o&~p;if((f[N>>2]|0)>>>0<=d>>>0){f[_>>2]=866;f[_+4>>2]=910;f[_+8>>2]=1497;vc(Y,812,_)|0;Ub(Y)|0}f[Z+(a<<2)>>2]=f[(f[M>>2]|0)+(d<<2)>>2];a=a+1|0}while(a>>>0<m>>>0);p=G&(l|0)==(U|0);if(x|p){o=0;do{a=r+(X(o,e)|0)|0;n=(o|0)==0|s;m=o<<1;ia=(bb(J,F)|0)+i|0;ha=ia-Q|0;i=ha>>31;i=i&ia|ha&~i;do if(!p){if(n){f[a>>2]=f[Z+((h[1547+(q<<2)+m>>0]|0)<<2)>>2];if((f[P>>2]|0)>>>0<=i>>>0){f[ba>>2]=866;f[ba+4>>2]=910;f[ba+8>>2]=1497;vc(Y,812,ba)|0;Ub(Y)|0}f[a+4>>2]=f[(f[B>>2]|0)+(i<<2)>>2]}a=a+8|0;ha=(bb(J,F)|0)+i|0;ia=ha-Q|0;i=ia>>31;i=i&ha|ia&~i;if(n){f[a>>2]=f[Z+((h[(m|1)+(1547+(q<<2))>>0]|0)<<2)>>2];if((f[P>>2]|0)>>>0<=i>>>0){f[ea>>2]=866;f[ea+4>>2]=910;f[ea+8>>2]=1497;vc(Y,812,ea)|0;Ub(Y)|0}f[a+4>>2]=f[(f[B>>2]|0)+(i<<2)>>2]}}else{if(!n){ha=(bb(J,F)|0)+i|0;ia=ha-Q|0;i=ia>>31;i=i&ha|ia&~i;break}f[a>>2]=f[Z+((h[1547+(q<<2)+m>>0]|0)<<2)>>2];if((f[P>>2]|0)>>>0<=i>>>0){f[ca>>2]=866;f[ca+4>>2]=910;f[ca+8>>2]=1497;vc(Y,812,ca)|0;Ub(Y)|0}f[a+4>>2]=f[(f[B>>2]|0)+(i<<2)>>2];ha=(bb(J,F)|0)+i|0;ia=ha-Q|0;i=ia>>31;i=i&ha|ia&~i}while(0);o=o+1|0}while((o|0)!=2)}else{f[r>>2]=f[Z+((h[1547+(q<<2)>>0]|0)<<2)>>2];ha=(bb(J,F)|0)+i|0;ia=ha-Q|0;i=ia>>31;i=i&ha|ia&~i;if((f[P>>2]|0)>>>0<=i>>>0){f[da>>2]=866;f[da+4>>2]=910;f[da+8>>2]=1497;vc(Y,812,da)|0;Ub(Y)|0}f[r+4>>2]=f[(f[B>>2]|0)+(i<<2)>>2];f[r+8>>2]=f[Z+((h[1547+(q<<2)+1>>0]|0)<<2)>>2];ha=(bb(J,F)|0)+i|0;ia=ha-Q|0;i=ia>>31;i=i&ha|ia&~i;if((f[P>>2]|0)>>>0<=i>>>0){f[fa>>2]=866;f[fa+4>>2]=910;f[fa+8>>2]=1497;vc(Y,812,fa)|0;Ub(Y)|0}f[r+12>>2]=f[(f[B>>2]|0)+(i<<2)>>2];f[r+(S<<2)>>2]=f[Z+((h[1547+(q<<2)+2>>0]|0)<<2)>>2];ha=(bb(J,F)|0)+i|0;ia=ha-Q|0;i=ia>>31;i=i&ha|ia&~i;if((f[P>>2]|0)>>>0<=i>>>0){f[$>>2]=866;f[$+4>>2]=910;f[$+8>>2]=1497;vc(Y,812,$)|0;Ub(Y)|0}f[r+(C<<2)>>2]=f[(f[B>>2]|0)+(i<<2)>>2];f[r+(D<<2)>>2]=f[Z+((h[1547+(q<<2)+3>>0]|0)<<2)>>2];ha=(bb(J,F)|0)+i|0;ia=ha-Q|0;i=ia>>31;i=i&ha|ia&~i;if((f[P>>2]|0)>>>0<=i>>>0){f[aa>>2]=866;f[aa+4>>2]=910;f[aa+8>>2]=1497;vc(Y,812,aa)|0;Ub(Y)|0}f[r+(E<<2)>>2]=f[(f[B>>2]|0)+(i<<2)>>2]}l=w+l|0;if((l|0)==(t|0))break;else r=r+v|0}}z=z+1|0;if((z|0)==(k|0))break;else y=y+I|0}}A=A+1|0}while((A|0)!=(R|0));u=ga;return 1}function Sa(a,c,d,e,g,i,k,l){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;i=i|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0;ka=u;u=u+640|0;ha=ka+80|0;ga=ka+64|0;fa=ka+48|0;ja=ka+32|0;ia=ka+16|0;ea=ka;ca=ka+128|0;da=ka+112|0;P=ka+96|0;Q=a+272|0;R=f[Q>>2]|0;ba=f[a+88>>2]|0;S=(h[ba+63>>0]|0)<<8|(h[ba+64>>0]|0);ba=b[ba+17>>0]|0;T=ba&255;if(!(ba<<24>>24)){u=ka;return 1}U=(l|0)==0;V=k+-1|0;W=V<<5;X=l+-1|0;Y=e<<1;Z=a+92|0;_=a+116|0;$=a+164|0;aa=a+268|0;ba=a+212|0;O=(g&1|0)==0;N=(i&1|0)==0;M=a+288|0;L=a+284|0;K=0;a=0;i=0;g=0;d=0;m=1;do{if(!U){I=f[c+(K<<2)>>2]|0;J=0;while(1){H=J&1;o=(H|0)==0;G=(H<<6^64)+-32|0;H=(H<<1^2)+-1|0;E=o?k:-1;n=o?0:V;if((n|0)!=(E|0)){F=N|(J|0)!=(X|0);D=o?I:I+W|0;while(1){if((m|0)==1)m=bb(Z,_)|0|512;C=m&7;m=m>>>3;p=h[1539+C>>0]|0;o=0;do{z=(bb(Z,$)|0)+d|0;A=z-R|0;B=A>>31;d=B&z|A&~B;if((f[Q>>2]|0)>>>0<=d>>>0){f[ea>>2]=866;f[ea+4>>2]=910;f[ea+8>>2]=1497;vc(ca,812,ea)|0;Ub(ca)|0}f[da+(o<<2)>>2]=j[(f[aa>>2]|0)+(d<<1)>>1];o=o+1|0}while(o>>>0<p>>>0);o=0;do{z=(bb(Z,$)|0)+i|0;A=z-R|0;B=A>>31;i=B&z|A&~B;if((f[Q>>2]|0)>>>0<=i>>>0){f[ia>>2]=866;f[ia+4>>2]=910;f[ia+8>>2]=1497;vc(ca,812,ia)|0;Ub(ca)|0}f[P+(o<<2)>>2]=j[(f[aa>>2]|0)+(i<<1)>>1];o=o+1|0}while(o>>>0<p>>>0);B=O|(n|0)!=(V|0);z=0;A=D;while(1){w=F|(z|0)==0;x=z<<1;if(B){t=0;v=A;while(1){y=(bb(Z,ba)|0)+g|0;s=y-S|0;g=s>>31;g=g&y|s&~g;s=(bb(Z,ba)|0)+a|0;y=s-S|0;a=y>>31;a=a&s|y&~a;if(w){s=h[t+x+(1547+(C<<2))>>0]|0;p=g*3|0;o=f[M>>2]|0;if(o>>>0<=p>>>0){f[ja>>2]=866;f[ja+4>>2]=910;f[ja+8>>2]=1497;vc(ca,812,ja)|0;Ub(ca)|0;o=f[M>>2]|0}q=f[L>>2]|0;p=q+(p<<1)|0;r=a*3|0;if(o>>>0>r>>>0)o=q;else{f[fa>>2]=866;f[fa+4>>2]=910;f[fa+8>>2]=1497;vc(ca,812,fa)|0;Ub(ca)|0;o=f[L>>2]|0}y=o+(r<<1)|0;f[v>>2]=(j[p>>1]|0)<<16|f[da+(s<<2)>>2];f[v+4>>2]=(j[p+4>>1]|0)<<16|(j[p+2>>1]|0);f[v+8>>2]=(j[y>>1]|0)<<16|f[P+(s<<2)>>2];f[v+12>>2]=(j[y+4>>1]|0)<<16|(j[y+2>>1]|0)}t=t+1|0;if((t|0)==2)break;else v=v+16|0}}else{y=w^1;w=1547+(C<<2)+x|0;t=0;v=A;while(1){x=(bb(Z,ba)|0)+g|0;s=x-S|0;g=s>>31;g=g&x|s&~g;s=(bb(Z,ba)|0)+a|0;x=s-S|0;a=x>>31;a=a&s|x&~a;if(!((t|0)!=0|y)){s=h[w>>0]|0;p=g*3|0;o=f[M>>2]|0;if(o>>>0<=p>>>0){f[ga>>2]=866;f[ga+4>>2]=910;f[ga+8>>2]=1497;vc(ca,812,ga)|0;Ub(ca)|0;o=f[M>>2]|0}q=f[L>>2]|0;p=q+(p<<1)|0;r=a*3|0;if(o>>>0>r>>>0)o=q;else{f[ha>>2]=866;f[ha+4>>2]=910;f[ha+8>>2]=1497;vc(ca,812,ha)|0;Ub(ca)|0;o=f[L>>2]|0}x=o+(r<<1)|0;f[v>>2]=(j[p>>1]|0)<<16|f[da+(s<<2)>>2];f[v+4>>2]=(j[p+4>>1]|0)<<16|(j[p+2>>1]|0);f[v+8>>2]=(j[x>>1]|0)<<16|f[P+(s<<2)>>2];f[v+12>>2]=(j[x+4>>1]|0)<<16|(j[x+2>>1]|0)}t=t+1|0;if((t|0)==2)break;else v=v+16|0}}z=z+1|0;if((z|0)==2)break;else A=A+e|0}n=H+n|0;if((n|0)==(E|0))break;else D=D+G|0}}J=J+1|0;if((J|0)==(l|0))break;else I=I+Y|0}}K=K+1|0}while((K|0)!=(T|0));u=ka;return 1}function Ta(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0;if(!a)return;c=a+-8|0;e=f[1148]|0;a=f[a+-4>>2]|0;b=a&-8;j=c+b|0;do if(!(a&1)){d=f[c>>2]|0;if(!(a&3))return;h=c+(0-d)|0;g=d+b|0;if(h>>>0<e>>>0)return;if((h|0)==(f[1149]|0)){a=j+4|0;b=f[a>>2]|0;if((b&3|0)!=3){i=h;b=g;break}f[1146]=g;f[a>>2]=b&-2;f[h+4>>2]=g|1;f[h+g>>2]=g;return}c=d>>>3;if(d>>>0<256){a=f[h+8>>2]|0;b=f[h+12>>2]|0;if((b|0)==(a|0)){f[1144]=f[1144]&~(1<<c);i=h;b=g;break}else{f[a+12>>2]=b;f[b+8>>2]=a;i=h;b=g;break}}e=f[h+24>>2]|0;a=f[h+12>>2]|0;do if((a|0)==(h|0)){c=h+16|0;b=c+4|0;a=f[b>>2]|0;if(!a){a=f[c>>2]|0;if(!a){a=0;break}else b=c}while(1){c=a+20|0;d=f[c>>2]|0;if(d|0){a=d;b=c;continue}c=a+16|0;d=f[c>>2]|0;if(!d)break;else{a=d;b=c}}f[b>>2]=0}else{i=f[h+8>>2]|0;f[i+12>>2]=a;f[a+8>>2]=i}while(0);if(e){b=f[h+28>>2]|0;c=4880+(b<<2)|0;if((h|0)==(f[c>>2]|0)){f[c>>2]=a;if(!a){f[1145]=f[1145]&~(1<<b);i=h;b=g;break}}else{f[e+16+(((f[e+16>>2]|0)!=(h|0)&1)<<2)>>2]=a;if(!a){i=h;b=g;break}}f[a+24>>2]=e;b=h+16|0;c=f[b>>2]|0;if(c|0){f[a+16>>2]=c;f[c+24>>2]=a}b=f[b+4>>2]|0;if(b){f[a+20>>2]=b;f[b+24>>2]=a;i=h;b=g}else{i=h;b=g}}else{i=h;b=g}}else{i=c;h=c}while(0);if(h>>>0>=j>>>0)return;a=j+4|0;d=f[a>>2]|0;if(!(d&1))return;if(!(d&2)){a=f[1149]|0;if((j|0)==(f[1150]|0)){j=(f[1147]|0)+b|0;f[1147]=j;f[1150]=i;f[i+4>>2]=j|1;if((i|0)!=(a|0))return;f[1149]=0;f[1146]=0;return}if((j|0)==(a|0)){j=(f[1146]|0)+b|0;f[1146]=j;f[1149]=h;f[i+4>>2]=j|1;f[h+j>>2]=j;return}e=(d&-8)+b|0;c=d>>>3;do if(d>>>0<256){b=f[j+8>>2]|0;a=f[j+12>>2]|0;if((a|0)==(b|0)){f[1144]=f[1144]&~(1<<c);break}else{f[b+12>>2]=a;f[a+8>>2]=b;break}}else{g=f[j+24>>2]|0;a=f[j+12>>2]|0;do if((a|0)==(j|0)){c=j+16|0;b=c+4|0;a=f[b>>2]|0;if(!a){a=f[c>>2]|0;if(!a){c=0;break}else b=c}while(1){c=a+20|0;d=f[c>>2]|0;if(d|0){a=d;b=c;continue}c=a+16|0;d=f[c>>2]|0;if(!d)break;else{a=d;b=c}}f[b>>2]=0;c=a}else{c=f[j+8>>2]|0;f[c+12>>2]=a;f[a+8>>2]=c;c=a}while(0);if(g|0){a=f[j+28>>2]|0;b=4880+(a<<2)|0;if((j|0)==(f[b>>2]|0)){f[b>>2]=c;if(!c){f[1145]=f[1145]&~(1<<a);break}}else{f[g+16+(((f[g+16>>2]|0)!=(j|0)&1)<<2)>>2]=c;if(!c)break}f[c+24>>2]=g;a=j+16|0;b=f[a>>2]|0;if(b|0){f[c+16>>2]=b;f[b+24>>2]=c}a=f[a+4>>2]|0;if(a|0){f[c+20>>2]=a;f[a+24>>2]=c}}}while(0);f[i+4>>2]=e|1;f[h+e>>2]=e;if((i|0)==(f[1149]|0)){f[1146]=e;return}}else{f[a>>2]=d&-2;f[i+4>>2]=b|1;f[h+b>>2]=b;e=b}a=e>>>3;if(e>>>0<256){c=4616+(a<<1<<2)|0;b=f[1144]|0;a=1<<a;if(!(b&a)){f[1144]=b|a;a=c;b=c+8|0}else{b=c+8|0;a=f[b>>2]|0}f[b>>2]=i;f[a+12>>2]=i;f[i+8>>2]=a;f[i+12>>2]=c;return}a=e>>>8;if(a)if(e>>>0>16777215)a=31;else{h=(a+1048320|0)>>>16&8;j=a<<h;g=(j+520192|0)>>>16&4;j=j<<g;a=(j+245760|0)>>>16&2;a=14-(g|h|a)+(j<<a>>>15)|0;a=e>>>(a+7|0)&1|a<<1}else a=0;d=4880+(a<<2)|0;f[i+28>>2]=a;f[i+20>>2]=0;f[i+16>>2]=0;b=f[1145]|0;c=1<<a;do if(b&c){b=e<<((a|0)==31?0:25-(a>>>1)|0);c=f[d>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(e|0)){a=73;break}d=c+16+(b>>>31<<2)|0;a=f[d>>2]|0;if(!a){a=72;break}else{b=b<<1;c=a}}if((a|0)==72){f[d>>2]=i;f[i+24>>2]=c;f[i+12>>2]=i;f[i+8>>2]=i;break}else if((a|0)==73){h=c+8|0;j=f[h>>2]|0;f[j+12>>2]=i;f[h>>2]=i;f[i+8>>2]=j;f[i+12>>2]=c;f[i+24>>2]=0;break}}else{f[1145]=b|c;f[d>>2]=i;f[i+24>>2]=d;f[i+12>>2]=i;f[i+8>>2]=i}while(0);j=(f[1152]|0)+-1|0;f[1152]=j;if(!j)a=5032;else return;while(1){a=f[a>>2]|0;if(!a)break;else a=a+8|0}f[1152]=-1;return}function Ua(a,c,d,e,g,i,k,l){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;i=i|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0;pa=u;u=u+640|0;ma=pa+80|0;la=pa+64|0;ka=pa+48|0;oa=pa+32|0;na=pa+16|0;ja=pa;ha=pa+128|0;ia=pa+112|0;N=pa+96|0;O=a+240|0;P=f[O>>2]|0;Q=a+256|0;R=f[Q>>2]|0;S=a+272|0;T=f[S>>2]|0;ga=f[a+88>>2]|0;U=(h[ga+63>>0]|0)<<8|(h[ga+64>>0]|0);ga=b[ga+17>>0]|0;V=ga&255;if(!(ga<<24>>24)){u=pa;return 1}W=(l|0)==0;X=k+-1|0;Y=X<<5;Z=l+-1|0;_=e<<1;$=a+92|0;aa=a+116|0;ba=a+164|0;ca=a+268|0;da=a+140|0;ea=a+236|0;fa=a+212|0;ga=a+188|0;M=(g&1|0)==0;L=(i&1|0)==0;J=a+288|0;K=a+284|0;I=a+252|0;H=0;a=0;i=0;g=0;d=0;m=1;do{if(!W){F=f[c+(H<<2)>>2]|0;G=0;while(1){E=G&1;o=(E|0)==0;D=(E<<6^64)+-32|0;E=(E<<1^2)+-1|0;B=o?k:-1;n=o?0:X;if((n|0)!=(B|0)){C=L|(G|0)!=(Z|0);A=o?F:F+Y|0;while(1){if((m|0)==1)m=bb($,aa)|0|512;z=m&7;m=m>>>3;p=h[1539+z>>0]|0;o=0;do{w=(bb($,ba)|0)+i|0;x=w-T|0;y=x>>31;i=y&w|x&~y;if((f[S>>2]|0)>>>0<=i>>>0){f[ja>>2]=866;f[ja+4>>2]=910;f[ja+8>>2]=1497;vc(ha,812,ja)|0;Ub(ha)|0}f[N+(o<<2)>>2]=j[(f[ca>>2]|0)+(i<<1)>>1];o=o+1|0}while(o>>>0<p>>>0);o=0;do{w=(bb($,da)|0)+d|0;x=w-P|0;y=x>>31;d=y&w|x&~y;if((f[O>>2]|0)>>>0<=d>>>0){f[na>>2]=866;f[na+4>>2]=910;f[na+8>>2]=1497;vc(ha,812,na)|0;Ub(ha)|0}f[ia+(o<<2)>>2]=f[(f[ea>>2]|0)+(d<<2)>>2];o=o+1|0}while(o>>>0<p>>>0);y=M|(n|0)!=(X|0);w=0;x=A;while(1){s=C|(w|0)==0;t=w<<1;if(y){q=0;r=x;while(1){v=(bb($,fa)|0)+a|0;p=v-U|0;a=p>>31;a=a&v|p&~a;p=(bb($,ga)|0)+g|0;v=p-R|0;g=v>>31;g=g&p|v&~g;if(s){o=h[q+t+(1547+(z<<2))>>0]|0;p=a*3|0;if((f[J>>2]|0)>>>0<=p>>>0){f[oa>>2]=866;f[oa+4>>2]=910;f[oa+8>>2]=1497;vc(ha,812,oa)|0;Ub(ha)|0}v=(f[K>>2]|0)+(p<<1)|0;f[r>>2]=(j[v>>1]|0)<<16|f[N+(o<<2)>>2];f[r+4>>2]=(j[v+4>>1]|0)<<16|(j[v+2>>1]|0);f[r+8>>2]=f[ia+(o<<2)>>2];if((f[Q>>2]|0)>>>0<=g>>>0){f[ka>>2]=866;f[ka+4>>2]=910;f[ka+8>>2]=1497;vc(ha,812,ka)|0;Ub(ha)|0}f[r+12>>2]=f[(f[I>>2]|0)+(g<<2)>>2]}q=q+1|0;if((q|0)==2)break;else r=r+16|0}}else{v=s^1;s=1547+(z<<2)+t|0;q=0;r=x;while(1){t=(bb($,fa)|0)+a|0;p=t-U|0;a=p>>31;a=a&t|p&~a;p=(bb($,ga)|0)+g|0;t=p-R|0;g=t>>31;g=g&p|t&~g;if(!((q|0)!=0|v)){o=h[s>>0]|0;p=a*3|0;if((f[J>>2]|0)>>>0<=p>>>0){f[la>>2]=866;f[la+4>>2]=910;f[la+8>>2]=1497;vc(ha,812,la)|0;Ub(ha)|0}t=(f[K>>2]|0)+(p<<1)|0;f[r>>2]=(j[t>>1]|0)<<16|f[N+(o<<2)>>2];f[r+4>>2]=(j[t+4>>1]|0)<<16|(j[t+2>>1]|0);f[r+8>>2]=f[ia+(o<<2)>>2];if((f[Q>>2]|0)>>>0<=g>>>0){f[ma>>2]=866;f[ma+4>>2]=910;f[ma+8>>2]=1497;vc(ha,812,ma)|0;Ub(ha)|0}f[r+12>>2]=f[(f[I>>2]|0)+(g<<2)>>2]}q=q+1|0;if((q|0)==2)break;else r=r+16|0}}w=w+1|0;if((w|0)==2)break;else x=x+e|0}n=E+n|0;if((n|0)==(B|0))break;else A=A+D|0}}G=G+1|0;if((G|0)==(l|0))break;else F=F+_|0}}H=H+1|0}while((H|0)!=(V|0));u=pa;return 1}function Va(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0;j=a+b|0;c=f[a+4>>2]|0;do if(!(c&1)){d=f[a>>2]|0;if(!(c&3))return;g=a+(0-d)|0;h=d+b|0;if((g|0)==(f[1149]|0)){a=j+4|0;c=f[a>>2]|0;if((c&3|0)!=3){i=g;c=h;break}f[1146]=h;f[a>>2]=c&-2;f[g+4>>2]=h|1;f[g+h>>2]=h;return}b=d>>>3;if(d>>>0<256){a=f[g+8>>2]|0;c=f[g+12>>2]|0;if((c|0)==(a|0)){f[1144]=f[1144]&~(1<<b);i=g;c=h;break}else{f[a+12>>2]=c;f[c+8>>2]=a;i=g;c=h;break}}e=f[g+24>>2]|0;a=f[g+12>>2]|0;do if((a|0)==(g|0)){b=g+16|0;c=b+4|0;a=f[c>>2]|0;if(!a){a=f[b>>2]|0;if(!a){a=0;break}else c=b}while(1){b=a+20|0;d=f[b>>2]|0;if(d|0){a=d;c=b;continue}b=a+16|0;d=f[b>>2]|0;if(!d)break;else{a=d;c=b}}f[c>>2]=0}else{i=f[g+8>>2]|0;f[i+12>>2]=a;f[a+8>>2]=i}while(0);if(e){c=f[g+28>>2]|0;b=4880+(c<<2)|0;if((g|0)==(f[b>>2]|0)){f[b>>2]=a;if(!a){f[1145]=f[1145]&~(1<<c);i=g;c=h;break}}else{f[e+16+(((f[e+16>>2]|0)!=(g|0)&1)<<2)>>2]=a;if(!a){i=g;c=h;break}}f[a+24>>2]=e;c=g+16|0;b=f[c>>2]|0;if(b|0){f[a+16>>2]=b;f[b+24>>2]=a}c=f[c+4>>2]|0;if(c){f[a+20>>2]=c;f[c+24>>2]=a;i=g;c=h}else{i=g;c=h}}else{i=g;c=h}}else{i=a;c=b}while(0);a=j+4|0;d=f[a>>2]|0;if(!(d&2)){a=f[1149]|0;if((j|0)==(f[1150]|0)){j=(f[1147]|0)+c|0;f[1147]=j;f[1150]=i;f[i+4>>2]=j|1;if((i|0)!=(a|0))return;f[1149]=0;f[1146]=0;return}if((j|0)==(a|0)){j=(f[1146]|0)+c|0;f[1146]=j;f[1149]=i;f[i+4>>2]=j|1;f[i+j>>2]=j;return}g=(d&-8)+c|0;b=d>>>3;do if(d>>>0<256){c=f[j+8>>2]|0;a=f[j+12>>2]|0;if((a|0)==(c|0)){f[1144]=f[1144]&~(1<<b);break}else{f[c+12>>2]=a;f[a+8>>2]=c;break}}else{e=f[j+24>>2]|0;a=f[j+12>>2]|0;do if((a|0)==(j|0)){b=j+16|0;c=b+4|0;a=f[c>>2]|0;if(!a){a=f[b>>2]|0;if(!a){b=0;break}else c=b}while(1){b=a+20|0;d=f[b>>2]|0;if(d|0){a=d;c=b;continue}b=a+16|0;d=f[b>>2]|0;if(!d)break;else{a=d;c=b}}f[c>>2]=0;b=a}else{b=f[j+8>>2]|0;f[b+12>>2]=a;f[a+8>>2]=b;b=a}while(0);if(e|0){a=f[j+28>>2]|0;c=4880+(a<<2)|0;if((j|0)==(f[c>>2]|0)){f[c>>2]=b;if(!b){f[1145]=f[1145]&~(1<<a);break}}else{f[e+16+(((f[e+16>>2]|0)!=(j|0)&1)<<2)>>2]=b;if(!b)break}f[b+24>>2]=e;a=j+16|0;c=f[a>>2]|0;if(c|0){f[b+16>>2]=c;f[c+24>>2]=b}a=f[a+4>>2]|0;if(a|0){f[b+20>>2]=a;f[a+24>>2]=b}}}while(0);f[i+4>>2]=g|1;f[i+g>>2]=g;if((i|0)==(f[1149]|0)){f[1146]=g;return}else c=g}else{f[a>>2]=d&-2;f[i+4>>2]=c|1;f[i+c>>2]=c}a=c>>>3;if(c>>>0<256){b=4616+(a<<1<<2)|0;c=f[1144]|0;a=1<<a;if(!(c&a)){f[1144]=c|a;a=b;c=b+8|0}else{c=b+8|0;a=f[c>>2]|0}f[c>>2]=i;f[a+12>>2]=i;f[i+8>>2]=a;f[i+12>>2]=b;return}a=c>>>8;if(a)if(c>>>0>16777215)a=31;else{h=(a+1048320|0)>>>16&8;j=a<<h;g=(j+520192|0)>>>16&4;j=j<<g;a=(j+245760|0)>>>16&2;a=14-(g|h|a)+(j<<a>>>15)|0;a=c>>>(a+7|0)&1|a<<1}else a=0;e=4880+(a<<2)|0;f[i+28>>2]=a;f[i+20>>2]=0;f[i+16>>2]=0;b=f[1145]|0;d=1<<a;if(!(b&d)){f[1145]=b|d;f[e>>2]=i;f[i+24>>2]=e;f[i+12>>2]=i;f[i+8>>2]=i;return}b=c<<((a|0)==31?0:25-(a>>>1)|0);d=f[e>>2]|0;while(1){if((f[d+4>>2]&-8|0)==(c|0)){a=69;break}e=d+16+(b>>>31<<2)|0;a=f[e>>2]|0;if(!a){a=68;break}else{b=b<<1;d=a}}if((a|0)==68){f[e>>2]=i;f[i+24>>2]=d;f[i+12>>2]=i;f[i+8>>2]=i;return}else if((a|0)==69){h=d+8|0;j=f[h>>2]|0;f[j+12>>2]=i;f[h>>2]=i;f[i+8>>2]=j;f[i+12>>2]=d;f[i+24>>2]=0;return}}function Wa(a){a=a|0;var c=0,e=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0;S=u;u=u+2416|0;k=S;j=S+1904|0;R=S+1880|0;O=S+980|0;P=S+80|0;Q=S+16|0;e=f[a+88>>2]|0;M=(h[e+63>>0]|0)<<8|(h[e+64>>0]|0);N=a+92|0;c=(f[a+4>>2]|0)+((h[e+58>>0]|0)<<8|(h[e+57>>0]|0)<<16|(h[e+59>>0]|0))|0;e=(h[e+61>>0]|0)<<8|(h[e+60>>0]|0)<<16|(h[e+62>>0]|0);if(!e){R=0;u=S;return R|0}f[N>>2]=c;f[a+96>>2]=c;f[a+104>>2]=e;f[a+100>>2]=c+e;f[a+108>>2]=0;f[a+112>>2]=0;f[R+20>>2]=0;f[R>>2]=0;f[R+4>>2]=0;f[R+8>>2]=0;f[R+12>>2]=0;b[R+16>>0]=0;if(Pa(N,R)|0){c=0;e=-7;g=-7;while(1){f[O+(c<<2)>>2]=g;f[P+(c<<2)>>2]=e;i=(g|0)>6;c=c+1|0;if((c|0)==225)break;else{e=(i&1)+e|0;g=i?-7:g+1|0}}c=Q;e=c+64|0;do{f[c>>2]=0;c=c+4|0}while((c|0)<(e|0));i=a+284|0;e=M*3|0;g=a+288|0;c=f[g>>2]|0;a:do if((c|0)==(e|0))l=13;else{if(c>>>0<=e>>>0){do if((f[a+292>>2]|0)>>>0<e>>>0)if(fb(i,e,(c+1|0)==(e|0),2,0)|0){c=f[g>>2]|0;break}else{b[a+296>>0]=1;c=0;break a}while(0);Ib((f[i>>2]|0)+(c<<1)|0,0,e-c<<1|0)|0}f[g>>2]=e;l=13}while(0);do if((l|0)==13){if(!M){f[k>>2]=866;f[k+4>>2]=910;f[k+8>>2]=1497;vc(j,812,k)|0;Ub(j)|0;c=1;break}x=Q+4|0;y=Q+8|0;z=Q+12|0;A=Q+16|0;B=Q+20|0;C=Q+24|0;D=Q+28|0;E=Q+32|0;F=Q+36|0;G=Q+40|0;H=Q+44|0;I=Q+48|0;J=Q+52|0;K=Q+56|0;L=Q+60|0;w=0;c=f[i>>2]|0;e=f[Q>>2]|0;g=f[x>>2]|0;i=f[y>>2]|0;a=f[z>>2]|0;j=f[A>>2]|0;k=f[B>>2]|0;l=f[C>>2]|0;m=f[D>>2]|0;n=f[E>>2]|0;o=f[F>>2]|0;p=f[G>>2]|0;q=f[H>>2]|0;r=0;s=0;t=0;v=0;while(1){U=bb(N,R)|0;e=e+(f[O+(U<<2)>>2]|0)&7;g=g+(f[P+(U<<2)>>2]|0)&7;U=bb(N,R)|0;i=i+(f[O+(U<<2)>>2]|0)&7;a=a+(f[P+(U<<2)>>2]|0)&7;U=bb(N,R)|0;j=j+(f[O+(U<<2)>>2]|0)&7;k=k+(f[P+(U<<2)>>2]|0)&7;U=bb(N,R)|0;l=l+(f[O+(U<<2)>>2]|0)&7;m=m+(f[P+(U<<2)>>2]|0)&7;U=bb(N,R)|0;n=n+(f[O+(U<<2)>>2]|0)&7;o=o+(f[P+(U<<2)>>2]|0)&7;U=bb(N,R)|0;p=p+(f[O+(U<<2)>>2]|0)&7;q=q+(f[P+(U<<2)>>2]|0)&7;U=bb(N,R)|0;r=r+(f[O+(U<<2)>>2]|0)&7;s=s+(f[P+(U<<2)>>2]|0)&7;U=bb(N,R)|0;t=t+(f[O+(U<<2)>>2]|0)&7;v=v+(f[P+(U<<2)>>2]|0)&7;U=h[1445+k>>0]|0;d[c>>1]=(h[1445+g>>0]|0)<<3|(h[1445+e>>0]|0)|(h[1445+i>>0]|0)<<6|(h[1445+a>>0]|0)<<9|(h[1445+j>>0]|0)<<12|U<<15;T=h[1445+p>>0]|0;d[c+2>>1]=(h[1445+l>>0]|0)<<2|U>>>1|(h[1445+m>>0]|0)<<5|(h[1445+n>>0]|0)<<8|(h[1445+o>>0]|0)<<11|T<<14;d[c+4>>1]=(h[1445+q>>0]|0)<<1|T>>>2|(h[1445+r>>0]|0)<<4|(h[1445+s>>0]|0)<<7|(h[1445+t>>0]|0)<<10|(h[1445+v>>0]|0)<<13;w=w+1|0;if(w>>>0>=M>>>0)break;else c=c+6|0}f[Q>>2]=e;f[x>>2]=g;f[y>>2]=i;f[z>>2]=a;f[A>>2]=j;f[B>>2]=k;f[C>>2]=l;f[D>>2]=m;f[E>>2]=n;f[F>>2]=o;f[G>>2]=p;f[H>>2]=q;f[I>>2]=r;f[J>>2]=s;f[K>>2]=t;f[L>>2]=v;c=1}while(0)}else c=0;Cb(R);U=c;u=S;return U|0}function Xa(a){a=a|0;var c=0,d=0,e=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;D=u;u=u+1008|0;j=D;i=D+496|0;C=D+472|0;z=D+276|0;A=D+80|0;B=D+16|0;d=f[a+88>>2]|0;x=(h[d+47>>0]|0)<<8|(h[d+48>>0]|0);y=a+92|0;c=(f[a+4>>2]|0)+((h[d+42>>0]|0)<<8|(h[d+41>>0]|0)<<16|(h[d+43>>0]|0))|0;d=(h[d+45>>0]|0)<<8|(h[d+44>>0]|0)<<16|(h[d+46>>0]|0);if(!d){C=0;u=D;return C|0}f[y>>2]=c;f[a+96>>2]=c;f[a+104>>2]=d;f[a+100>>2]=c+d;f[a+108>>2]=0;f[a+112>>2]=0;f[C+20>>2]=0;f[C>>2]=0;f[C+4>>2]=0;f[C+8>>2]=0;f[C+12>>2]=0;b[C+16>>0]=0;if(Pa(y,C)|0){c=0;d=-3;e=-3;while(1){f[z+(c<<2)>>2]=e;f[A+(c<<2)>>2]=d;g=(e|0)>2;c=c+1|0;if((c|0)==49)break;else{d=(g&1)+d|0;e=g?-3:e+1|0}}c=B;d=c+64|0;do{f[c>>2]=0;c=c+4|0}while((c|0)<(d|0));e=a+252|0;d=a+256|0;c=f[d>>2]|0;a:do if((c|0)==(x|0))k=13;else{if(c>>>0<=x>>>0){do if((f[a+260>>2]|0)>>>0<x>>>0)if(fb(e,x,(c+1|0)==(x|0),4,0)|0){c=f[d>>2]|0;break}else{b[a+264>>0]=1;c=0;break a}while(0);Ib((f[e>>2]|0)+(c<<2)|0,0,x-c<<2|0)|0}f[d>>2]=x;k=13}while(0);do if((k|0)==13){if(!x){f[j>>2]=866;f[j+4>>2]=910;f[j+8>>2]=1497;vc(i,812,j)|0;Ub(i)|0;c=1;break}a=B+4|0;i=B+8|0;j=B+12|0;k=B+16|0;l=B+20|0;m=B+24|0;n=B+28|0;o=B+32|0;p=B+36|0;q=B+40|0;r=B+44|0;s=B+48|0;t=B+52|0;v=B+56|0;w=B+60|0;g=0;c=f[e>>2]|0;d=f[a>>2]|0;e=f[B>>2]|0;while(1){Q=bb(y,C)|0;e=e+(f[z+(Q<<2)>>2]|0)&3;d=d+(f[A+(Q<<2)>>2]|0)&3;Q=bb(y,C)|0;R=(f[i>>2]|0)+(f[z+(Q<<2)>>2]|0)&3;f[i>>2]=R;Q=(f[j>>2]|0)+(f[A+(Q<<2)>>2]|0)&3;f[j>>2]=Q;O=bb(y,C)|0;P=(f[k>>2]|0)+(f[z+(O<<2)>>2]|0)&3;f[k>>2]=P;O=(f[l>>2]|0)+(f[A+(O<<2)>>2]|0)&3;f[l>>2]=O;M=bb(y,C)|0;N=(f[m>>2]|0)+(f[z+(M<<2)>>2]|0)&3;f[m>>2]=N;M=(f[n>>2]|0)+(f[A+(M<<2)>>2]|0)&3;f[n>>2]=M;K=bb(y,C)|0;L=(f[o>>2]|0)+(f[z+(K<<2)>>2]|0)&3;f[o>>2]=L;K=(f[p>>2]|0)+(f[A+(K<<2)>>2]|0)&3;f[p>>2]=K;I=bb(y,C)|0;J=(f[q>>2]|0)+(f[z+(I<<2)>>2]|0)&3;f[q>>2]=J;I=(f[r>>2]|0)+(f[A+(I<<2)>>2]|0)&3;f[r>>2]=I;G=bb(y,C)|0;H=(f[s>>2]|0)+(f[z+(G<<2)>>2]|0)&3;f[s>>2]=H;G=(f[t>>2]|0)+(f[A+(G<<2)>>2]|0)&3;f[t>>2]=G;E=bb(y,C)|0;F=(f[v>>2]|0)+(f[z+(E<<2)>>2]|0)&3;f[v>>2]=F;E=(f[w>>2]|0)+(f[A+(E<<2)>>2]|0)&3;f[w>>2]=E;f[c>>2]=(h[1441+d>>0]|0)<<2|(h[1441+e>>0]|0)|(h[1441+R>>0]|0)<<4|(h[1441+Q>>0]|0)<<6|(h[1441+P>>0]|0)<<8|(h[1441+O>>0]|0)<<10|(h[1441+N>>0]|0)<<12|(h[1441+M>>0]|0)<<14|(h[1441+L>>0]|0)<<16|(h[1441+K>>0]|0)<<18|(h[1441+J>>0]|0)<<20|(h[1441+I>>0]|0)<<22|(h[1441+H>>0]|0)<<24|(h[1441+G>>0]|0)<<26|(h[1441+F>>0]|0)<<28|(h[1441+E>>0]|0)<<30;g=g+1|0;if(g>>>0>=x>>>0)break;else c=c+4|0}f[B>>2]=e;f[a>>2]=d;c=1}while(0)}else c=0;Cb(C);R=c;u=D;return R|0}function Ya(a,c,d,e,g,i,k,l){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;i=i|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0;aa=u;u=u+592|0;Z=aa+48|0;$=aa+32|0;_=aa+16|0;Y=aa;W=aa+80|0;X=aa+64|0;I=a+272|0;J=f[I>>2]|0;V=f[a+88>>2]|0;K=(h[V+63>>0]|0)<<8|(h[V+64>>0]|0);V=b[V+17>>0]|0;L=V&255;if(!(V<<24>>24)){u=aa;return 1}M=(l|0)==0;N=k+-1|0;O=N<<4;P=l+-1|0;Q=e<<1;R=a+92|0;S=a+116|0;T=a+164|0;U=a+268|0;V=a+212|0;H=(g&1|0)==0;G=(i&1|0)==0;F=a+288|0;E=a+284|0;D=0;g=0;d=0;i=1;do{if(!M){B=f[c+(D<<2)>>2]|0;C=0;while(1){A=C&1;m=(A|0)==0;z=(A<<5^32)+-16|0;A=(A<<1^2)+-1|0;x=m?k:-1;a=m?0:N;if((a|0)!=(x|0)){y=G|(C|0)!=(P|0);w=m?B:B+O|0;while(1){if((i|0)==1)i=bb(R,S)|0|512;v=i&7;i=i>>>3;n=h[1539+v>>0]|0;m=0;do{r=(bb(R,T)|0)+d|0;s=r-J|0;t=s>>31;d=t&r|s&~t;if((f[I>>2]|0)>>>0<=d>>>0){f[Y>>2]=866;f[Y+4>>2]=910;f[Y+8>>2]=1497;vc(W,812,Y)|0;Ub(W)|0}f[X+(m<<2)>>2]=j[(f[U>>2]|0)+(d<<1)>>1];m=m+1|0}while(m>>>0<n>>>0);t=H|(a|0)!=(N|0);r=0;s=w;while(1){q=y|(r|0)==0;n=r<<1;m=(bb(R,V)|0)+g|0;o=m-K|0;p=o>>31;p=p&m|o&~p;if(t){if(q){g=h[1547+(v<<2)+n>>0]|0;m=p*3|0;if((f[F>>2]|0)>>>0<=m>>>0){f[_>>2]=866;f[_+4>>2]=910;f[_+8>>2]=1497;vc(W,812,_)|0;Ub(W)|0}o=(f[E>>2]|0)+(m<<1)|0;f[s>>2]=(j[o>>1]|0)<<16|f[X+(g<<2)>>2];f[s+4>>2]=(j[o+4>>1]|0)<<16|(j[o+2>>1]|0)}o=s+8|0;m=(bb(R,V)|0)+p|0;p=m-K|0;g=p>>31;g=g&m|p&~g;if(q){m=h[(n|1)+(1547+(v<<2))>>0]|0;n=g*3|0;if((f[F>>2]|0)>>>0<=n>>>0){f[Z>>2]=866;f[Z+4>>2]=910;f[Z+8>>2]=1497;vc(W,812,Z)|0;Ub(W)|0}q=(f[E>>2]|0)+(n<<1)|0;f[o>>2]=(j[q>>1]|0)<<16|f[X+(m<<2)>>2];f[s+12>>2]=(j[q+4>>1]|0)<<16|(j[q+2>>1]|0)}}else{if(q){g=h[1547+(v<<2)+n>>0]|0;m=p*3|0;if((f[F>>2]|0)>>>0<=m>>>0){f[$>>2]=866;f[$+4>>2]=910;f[$+8>>2]=1497;vc(W,812,$)|0;Ub(W)|0}q=(f[E>>2]|0)+(m<<1)|0;f[s>>2]=(j[q>>1]|0)<<16|f[X+(g<<2)>>2];f[s+4>>2]=(j[q+4>>1]|0)<<16|(j[q+2>>1]|0)}p=(bb(R,V)|0)+p|0;q=p-K|0;g=q>>31;g=g&p|q&~g}r=r+1|0;if((r|0)==2)break;else s=s+e|0}a=A+a|0;if((a|0)==(x|0))break;else w=w+z|0}}C=C+1|0;if((C|0)==(l|0))break;else B=B+Q|0}}D=D+1|0}while((D|0)!=(L|0));u=aa;return 1}function Za(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=a;j=b;k=j;h=c;n=d;i=n;if(!k){g=(e|0)!=0;if(!i){if(g){f[e>>2]=(l>>>0)%(h>>>0);f[e+4>>2]=0}n=0;e=(l>>>0)/(h>>>0)>>>0;return (I=n,e)|0}else{if(!g){n=0;e=0;return (I=n,e)|0}f[e>>2]=a|0;f[e+4>>2]=b&0;n=0;e=0;return (I=n,e)|0}}g=(i|0)==0;do if(h){if(!g){g=(_(i|0)|0)-(_(k|0)|0)|0;if(g>>>0<=31){m=g+1|0;i=31-g|0;b=g-31>>31;h=m;a=l>>>(m>>>0)&b|k<<i;b=k>>>(m>>>0)&b;g=0;i=l<<i;break}if(!e){n=0;e=0;return (I=n,e)|0}f[e>>2]=a|0;f[e+4>>2]=j|b&0;n=0;e=0;return (I=n,e)|0}g=h-1|0;if(g&h|0){i=(_(h|0)|0)+33-(_(k|0)|0)|0;p=64-i|0;m=32-i|0;j=m>>31;o=i-32|0;b=o>>31;h=i;a=m-1>>31&k>>>(o>>>0)|(k<<m|l>>>(i>>>0))&b;b=b&k>>>(i>>>0);g=l<<p&j;i=(k<<p|l>>>(o>>>0))&j|l<<m&i-33>>31;break}if(e|0){f[e>>2]=g&l;f[e+4>>2]=0}if((h|0)==1){o=j|b&0;p=a|0|0;return (I=o,p)|0}else{p=ic(h|0)|0;o=k>>>(p>>>0)|0;p=k<<32-p|l>>>(p>>>0)|0;return (I=o,p)|0}}else{if(g){if(e|0){f[e>>2]=(k>>>0)%(h>>>0);f[e+4>>2]=0}o=0;p=(k>>>0)/(h>>>0)>>>0;return (I=o,p)|0}if(!l){if(e|0){f[e>>2]=0;f[e+4>>2]=(k>>>0)%(i>>>0)}o=0;p=(k>>>0)/(i>>>0)>>>0;return (I=o,p)|0}g=i-1|0;if(!(g&i)){if(e|0){f[e>>2]=a|0;f[e+4>>2]=g&k|b&0}o=0;p=k>>>((ic(i|0)|0)>>>0);return (I=o,p)|0}g=(_(i|0)|0)-(_(k|0)|0)|0;if(g>>>0<=30){b=g+1|0;i=31-g|0;h=b;a=k<<i|l>>>(b>>>0);b=k>>>(b>>>0);g=0;i=l<<i;break}if(!e){o=0;p=0;return (I=o,p)|0}f[e>>2]=a|0;f[e+4>>2]=j|b&0;o=0;p=0;return (I=o,p)|0}while(0);if(!h){k=i;j=0;i=0}else{m=c|0|0;l=n|d&0;k=Gc(m|0,l|0,-1,-1)|0;c=I;j=i;i=0;do{d=j;j=g>>>31|j<<1;g=i|g<<1;d=a<<1|d>>>31|0;n=a>>>31|b<<1|0;Cc(k|0,c|0,d|0,n|0)|0;p=I;o=p>>31|((p|0)<0?-1:0)<<1;i=o&1;a=Cc(d|0,n|0,o&m|0,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l|0)|0;b=I;h=h-1|0}while((h|0)!=0);k=j;j=0}h=0;if(e|0){f[e>>2]=a;f[e+4>>2]=b}o=(g|0)>>>31|(k|h)<<1|(h<<1|g>>>31)&0|j;p=(g<<1|0>>>31)&-2|i;return (I=o,p)|0}function _a(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=a+4|0;l=f[m>>2]|0;c=l&-8;i=a+c|0;if(!(l&3)){if(b>>>0<256){a=0;return a|0}if(c>>>0>=(b+4|0)>>>0?(c-b|0)>>>0<=f[1264]<<1>>>0:0)return a|0;a=0;return a|0}if(c>>>0>=b>>>0){c=c-b|0;if(c>>>0<=15)return a|0;k=a+b|0;f[m>>2]=l&1|b|2;f[k+4>>2]=c|3;m=k+c+4|0;f[m>>2]=f[m>>2]|1;Va(k,c);return a|0}if((i|0)==(f[1150]|0)){k=(f[1147]|0)+c|0;c=k-b|0;d=a+b|0;if(k>>>0<=b>>>0){a=0;return a|0}f[m>>2]=l&1|b|2;f[d+4>>2]=c|1;f[1150]=d;f[1147]=c;return a|0}if((i|0)==(f[1149]|0)){e=(f[1146]|0)+c|0;if(e>>>0<b>>>0){a=0;return a|0}c=e-b|0;d=l&1;if(c>>>0>15){l=a+b|0;k=l+c|0;f[m>>2]=d|b|2;f[l+4>>2]=c|1;f[k>>2]=c;d=k+4|0;f[d>>2]=f[d>>2]&-2;d=l}else{f[m>>2]=d|e|2;d=a+e+4|0;f[d>>2]=f[d>>2]|1;d=0;c=0}f[1146]=c;f[1149]=d;return a|0}d=f[i+4>>2]|0;if(d&2|0){a=0;return a|0}j=(d&-8)+c|0;if(j>>>0<b>>>0){a=0;return a|0}k=j-b|0;e=d>>>3;do if(d>>>0<256){d=f[i+8>>2]|0;c=f[i+12>>2]|0;if((c|0)==(d|0)){f[1144]=f[1144]&~(1<<e);break}else{f[d+12>>2]=c;f[c+8>>2]=d;break}}else{h=f[i+24>>2]|0;c=f[i+12>>2]|0;do if((c|0)==(i|0)){e=i+16|0;d=e+4|0;c=f[d>>2]|0;if(!c){c=f[e>>2]|0;if(!c){e=0;break}else g=e}else g=d;while(1){e=c+20|0;d=f[e>>2]|0;if(d|0){c=d;g=e;continue}d=c+16|0;e=f[d>>2]|0;if(!e)break;else{c=e;g=d}}f[g>>2]=0;e=c}else{e=f[i+8>>2]|0;f[e+12>>2]=c;f[c+8>>2]=e;e=c}while(0);if(h|0){c=f[i+28>>2]|0;d=4880+(c<<2)|0;if((i|0)==(f[d>>2]|0)){f[d>>2]=e;if(!e){f[1145]=f[1145]&~(1<<c);break}}else{f[h+16+(((f[h+16>>2]|0)!=(i|0)&1)<<2)>>2]=e;if(!e)break}f[e+24>>2]=h;c=i+16|0;d=f[c>>2]|0;if(d|0){f[e+16>>2]=d;f[d+24>>2]=e}c=f[c+4>>2]|0;if(c|0){f[e+20>>2]=c;f[c+24>>2]=e}}}while(0);c=l&1;if(k>>>0<16){f[m>>2]=j|c|2;m=a+j+4|0;f[m>>2]=f[m>>2]|1;return a|0}else{l=a+b|0;f[m>>2]=c|b|2;f[l+4>>2]=k|3;m=l+k+4|0;f[m>>2]=f[m>>2]|1;Va(l,k);return a|0}return 0}function $a(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=u;u=u+592|0;o=p+56|0;j=p+40|0;m=p+72|0;l=p;n=p+68|0;f[l>>2]=40;tb(a,b,l)|0;h=(f[l+4>>2]|0)>>>e;i=(f[l+8>>2]|0)>>>e;l=l+32|0;d=f[l+4>>2]|0;do switch(f[l>>2]|0){case 0:{if(!d)l=8;else k=14;break}case 1:{if(!d)k=13;else k=14;break}case 2:{if(!d)k=13;else k=14;break}case 3:{if(!d)k=13;else k=14;break}case 4:{if(!d)k=13;else k=14;break}case 5:{if(!d)k=13;else k=14;break}case 6:{if(!d)k=13;else k=14;break}case 7:{if(!d)k=13;else k=14;break}case 8:{if(!d)k=13;else k=14;break}case 9:{if(!d)l=8;else k=14;break}case 10:{if(!d)l=8;else k=14;break}default:k=14}while(0);if((k|0)==13)l=16;else if((k|0)==14){f[j>>2]=866;f[j+4>>2]=2672;f[j+8>>2]=1251;vc(m,812,j)|0;Ub(m)|0;l=0}f[n>>2]=c;k=gb(a,b)|0;b=g+e|0;do if(b>>>0>e>>>0){if(!k){d=c;while(1){d=d+(X(X((h+3|0)>>>2,l)|0,(i+3|0)>>>2)|0)|0;e=e+1|0;if((e|0)==(b|0))break;else{i=i>>>1;h=h>>>1}}f[n>>2]=d;break}else{a=i;d=c}while(1){i=X((h+3|0)>>>2,l)|0;j=X(i,(a+3|0)>>>2)|0;if(!(e>>>0>15|j>>>0<8)?(f[k>>2]|0)==519686845:0){wb(k,n,j,i,e)|0;d=f[n>>2]|0}d=d+j|0;f[n>>2]=d;e=e+1|0;if((e|0)==(b|0))break;else{a=a>>>1;h=h>>>1}}}while(0);if(!k){u=p;return}if((f[k>>2]|0)!=519686845){u=p;return}cb(k);if(!(k&7)){Nb(k,0,0,1,0)|0;u=p;return}else{f[o>>2]=866;f[o+4>>2]=2506;f[o+8>>2]=1232;vc(m,812,o)|0;Ub(m)|0;u=p;return}}function ab(a){a=a|0;var c=0,d=0,e=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=u;u=u+576|0;j=q;g=q+64|0;p=q+16|0;e=a+88|0;c=f[e>>2]|0;o=(h[c+39>>0]|0)<<8|(h[c+40>>0]|0);m=a+236|0;i=a+240|0;d=f[i>>2]|0;if((d|0)!=(o|0)){if(d>>>0<=o>>>0){do if((f[a+244>>2]|0)>>>0<o>>>0){if(fb(m,o,(d+1|0)==(o|0),4,0)|0){c=f[i>>2]|0;break}b[a+248>>0]=1;p=0;u=q;return p|0}else c=d;while(0);Ib((f[m>>2]|0)+(c<<2)|0,0,o-c<<2|0)|0;c=f[e>>2]|0}f[i>>2]=o}n=a+92|0;d=(f[a+4>>2]|0)+((h[c+34>>0]|0)<<8|(h[c+33>>0]|0)<<16|(h[c+35>>0]|0))|0;c=(h[c+37>>0]|0)<<8|(h[c+36>>0]|0)<<16|(h[c+38>>0]|0);if(!c){p=0;u=q;return p|0}f[n>>2]=d;f[a+96>>2]=d;f[a+104>>2]=c;f[a+100>>2]=d+c;f[a+108>>2]=0;f[a+112>>2]=0;k=p+20|0;f[p>>2]=0;f[p+4>>2]=0;f[p+8>>2]=0;f[p+12>>2]=0;b[p+16>>0]=0;l=p+24|0;f[p+44>>2]=0;f[k>>2]=0;f[k+4>>2]=0;f[k+8>>2]=0;f[k+12>>2]=0;f[k+16>>2]=0;b[k+20>>0]=0;if(Pa(n,p)|0?Pa(n,l)|0:0){if(!(f[i>>2]|0)){f[j>>2]=866;f[j+4>>2]=910;f[j+8>>2]=1497;vc(g,812,j)|0;Ub(g)|0}if(!o)c=1;else{j=0;k=0;d=f[m>>2]|0;e=0;a=0;c=0;g=0;i=0;while(1){j=(bb(n,p)|0)+j&31;i=(bb(n,l)|0)+i&63;g=(bb(n,p)|0)+g&31;c=(bb(n,p)|0)+c|0;a=(bb(n,l)|0)+a&63;e=(bb(n,p)|0)+e&31;f[d>>2]=i<<5|j<<11|g|c<<27|a<<21|e<<16;k=k+1|0;if(k>>>0>=o>>>0){c=1;break}else{d=d+4|0;c=c&31}}}}else c=0;Cb(p+24|0);Cb(p);p=c;u=q;return p|0}function bb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=u;u=u+576|0;m=s+48|0;o=s+32|0;n=s+16|0;l=s;q=s+64|0;p=f[b+20>>2]|0;r=a+20|0;k=f[r>>2]|0;if((k|0)<24){i=a+4|0;c=f[i>>2]|0;e=f[a+8>>2]|0;d=c>>>0<e>>>0;if((k|0)<16){if(d){g=(h[c>>0]|0)<<8;c=c+1|0}else g=0;if(c>>>0<e>>>0){e=h[c>>0]|0;c=c+1|0}else e=0;f[i>>2]=c;f[r>>2]=k+16;d=16;c=e|g}else{if(d){f[i>>2]=c+1;c=h[c>>0]|0}else c=0;f[r>>2]=k+8;d=24}i=a+16|0;e=f[i>>2]|c<<d-k;f[i>>2]=e}else{e=a+16|0;i=e;e=f[e>>2]|0}g=(e>>>16)+1|0;do if(g>>>0<=(f[p+16>>2]|0)>>>0){d=f[(f[p+168>>2]|0)+(e>>>(32-(f[p+8>>2]|0)|0)<<2)>>2]|0;if((d|0)==-1){f[l>>2]=866;f[l+4>>2]=3253;f[l+8>>2]=1393;vc(q,812,l)|0;Ub(q)|0}c=d&65535;d=d>>>16;if((f[b+8>>2]|0)>>>0<=c>>>0){f[n>>2]=866;f[n+4>>2]=909;f[n+8>>2]=1497;vc(q,812,n)|0;Ub(q)|0}if((h[(f[b+4>>2]|0)+c>>0]|0|0)!=(d|0)){f[o>>2]=866;f[o+4>>2]=3257;f[o+8>>2]=1410;vc(q,812,o)|0;Ub(q)|0}}else{d=f[p+20>>2]|0;while(1){c=d+-1|0;if(g>>>0>(f[p+28+(c<<2)>>2]|0)>>>0)d=d+1|0;else break}c=(e>>>(32-d|0))+(f[p+96+(c<<2)>>2]|0)|0;if(c>>>0<(f[b>>2]|0)>>>0){c=j[(f[p+176>>2]|0)+(c<<1)>>1]|0;break}f[m>>2]=866;f[m+4>>2]=3275;f[m+8>>2]=1348;vc(q,812,m)|0;Ub(q)|0;r=0;u=s;return r|0}while(0);f[i>>2]=f[i>>2]<<d;f[r>>2]=(f[r>>2]|0)-d;r=c;u=s;return r|0}function cb(a){a=a|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0;k=u;u=u+576|0;j=k+48|0;h=k+32|0;g=k+16|0;e=k;i=k+64|0;f[a>>2]=0;c=a+284|0;d=f[c>>2]|0;if(d|0){if(!(d&7))Nb(d,0,0,1,0)|0;else{f[e>>2]=866;f[e+4>>2]=2506;f[e+8>>2]=1232;vc(i,812,e)|0;Ub(i)|0}f[c>>2]=0;f[a+288>>2]=0;f[a+292>>2]=0}b[a+296>>0]=0;c=a+268|0;d=f[c>>2]|0;if(d|0){if(!(d&7))Nb(d,0,0,1,0)|0;else{f[g>>2]=866;f[g+4>>2]=2506;f[g+8>>2]=1232;vc(i,812,g)|0;Ub(i)|0}f[c>>2]=0;f[a+272>>2]=0;f[a+276>>2]=0}b[a+280>>0]=0;c=a+252|0;d=f[c>>2]|0;if(d|0){if(!(d&7))Nb(d,0,0,1,0)|0;else{f[h>>2]=866;f[h+4>>2]=2506;f[h+8>>2]=1232;vc(i,812,h)|0;Ub(i)|0}f[c>>2]=0;f[a+256>>2]=0;f[a+260>>2]=0}b[a+264>>0]=0;c=a+236|0;d=f[c>>2]|0;if(!d){j=a+248|0;b[j>>0]=0;j=a+212|0;Cb(j);j=a+188|0;Cb(j);j=a+164|0;Cb(j);j=a+140|0;Cb(j);j=a+116|0;Cb(j);u=k;return}if(!(d&7))Nb(d,0,0,1,0)|0;else{f[j>>2]=866;f[j+4>>2]=2506;f[j+8>>2]=1232;vc(i,812,j)|0;Ub(i)|0}f[c>>2]=0;f[a+240>>2]=0;f[a+244>>2]=0;j=a+248|0;b[j>>0]=0;j=a+212|0;Cb(j);j=a+188|0;Cb(j);j=a+164|0;Cb(j);j=a+140|0;Cb(j);j=a+116|0;Cb(j);u=k;return}function db(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{d=(f[c>>2]|0)+(4-1)&~(4-1);b=f[d>>2]|0;f[c>>2]=d+4;f[a>>2]=b;break a}case 10:{d=(f[c>>2]|0)+(4-1)&~(4-1);b=f[d>>2]|0;f[c>>2]=d+4;d=a;f[d>>2]=b;f[d+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{d=(f[c>>2]|0)+(4-1)&~(4-1);b=f[d>>2]|0;f[c>>2]=d+4;d=a;f[d>>2]=b;f[d+4>>2]=0;break a}case 12:{d=(f[c>>2]|0)+(8-1)&~(8-1);b=d;e=f[b>>2]|0;b=f[b+4>>2]|0;f[c>>2]=d+8;d=a;f[d>>2]=e;f[d+4>>2]=b;break a}case 13:{e=(f[c>>2]|0)+(4-1)&~(4-1);d=f[e>>2]|0;f[c>>2]=e+4;d=(d&65535)<<16>>16;e=a;f[e>>2]=d;f[e+4>>2]=((d|0)<0)<<31>>31;break a}case 14:{e=(f[c>>2]|0)+(4-1)&~(4-1);d=f[e>>2]|0;f[c>>2]=e+4;e=a;f[e>>2]=d&65535;f[e+4>>2]=0;break a}case 15:{e=(f[c>>2]|0)+(4-1)&~(4-1);d=f[e>>2]|0;f[c>>2]=e+4;d=(d&255)<<24>>24;e=a;f[e>>2]=d;f[e+4>>2]=((d|0)<0)<<31>>31;break a}case 16:{e=(f[c>>2]|0)+(4-1)&~(4-1);d=f[e>>2]|0;f[c>>2]=e+4;e=a;f[e>>2]=d&255;f[e+4>>2]=0;break a}case 17:{e=(f[c>>2]|0)+(8-1)&~(8-1);g=+p[e>>3];f[c>>2]=e+8;p[a>>3]=g;break a}case 18:{e=(f[c>>2]|0)+(8-1)&~(8-1);g=+p[e>>3];f[c>>2]=e+8;p[a>>3]=g;break a}default:break a}while(0);while(0);return}function eb(a){a=a|0;var c=0,e=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0;n=u;u=u+560|0;i=n;g=n+40|0;m=n+16|0;e=f[a+88>>2]|0;k=(h[e+55>>0]|0)<<8|(h[e+56>>0]|0);l=a+92|0;c=(f[a+4>>2]|0)+((h[e+50>>0]|0)<<8|(h[e+49>>0]|0)<<16|(h[e+51>>0]|0))|0;e=(h[e+53>>0]|0)<<8|(h[e+52>>0]|0)<<16|(h[e+54>>0]|0);if(!e){m=0;u=n;return m|0}f[l>>2]=c;f[a+96>>2]=c;f[a+104>>2]=e;f[a+100>>2]=c+e;f[a+108>>2]=0;f[a+112>>2]=0;f[m+20>>2]=0;f[m>>2]=0;f[m+4>>2]=0;f[m+8>>2]=0;f[m+12>>2]=0;b[m+16>>0]=0;a:do if(Pa(l,m)|0){j=a+268|0;e=a+272|0;c=f[e>>2]|0;if((c|0)!=(k|0)){if(c>>>0<=k>>>0){do if((f[a+276>>2]|0)>>>0<k>>>0)if(fb(j,k,(c+1|0)==(k|0),2,0)|0){c=f[e>>2]|0;break}else{b[a+280>>0]=1;c=0;break a}while(0);Ib((f[j>>2]|0)+(c<<1)|0,0,k-c<<1|0)|0}f[e>>2]=k}if(!k){f[i>>2]=866;f[i+4>>2]=910;f[i+8>>2]=1497;vc(g,812,i)|0;Ub(g)|0;c=1;break}e=0;a=0;g=0;c=f[j>>2]|0;while(1){j=bb(l,m)|0;g=j+g&255;a=(bb(l,m)|0)+a&255;d[c>>1]=a<<8|g;e=e+1|0;if(e>>>0>=k>>>0){c=1;break}else c=c+2|0}}else c=0;while(0);Cb(m);m=c;u=n;return m|0}function fb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=u;u=u+576|0;m=p+48|0;j=p+32|0;h=p+16|0;g=p;l=p+64|0;n=p+60|0;k=a+4|0;o=a+8|0;if((f[k>>2]|0)>>>0>(f[o>>2]|0)>>>0){f[g>>2]=866;f[g+4>>2]=2123;f[g+8>>2]=845;vc(l,812,g)|0;Ub(l)|0}if((2147418112/(d>>>0)|0)>>>0<=b>>>0){f[h>>2]=866;f[h+4>>2]=2124;f[h+8>>2]=885;vc(l,812,h)|0;Ub(l)|0}g=f[o>>2]|0;if(g>>>0>=b>>>0){o=1;u=p;return o|0}if(c?(i=b+-1|0,(i&b|0)!=0):0){b=i>>>16|i;b=b>>>8|b;b=b>>>4|b;b=b>>>2|b;b=(b>>>1|b)+1|0;if(!b){b=0;c=10}else c=9}else c=9;if((c|0)==9)if(b>>>0<=g>>>0)c=10;if((c|0)==10){f[j>>2]=866;f[j+4>>2]=2133;f[j+8>>2]=933;vc(l,812,j)|0;Ub(l)|0}i=X(b,d)|0;if(!e){g=Gb(f[a>>2]|0,i,n,1)|0;if(!g)b=0;else{f[a>>2]=g;c=20}}else{h=Db(i,n)|0;if(!h)b=0;else{Ia[e&0](h,f[a>>2]|0,f[k>>2]|0);g=f[a>>2]|0;do if(g|0)if(!(g&7)){Nb(g,0,0,1,0)|0;break}else{f[m>>2]=866;f[m+4>>2]=2506;f[m+8>>2]=1232;vc(l,812,m)|0;Ub(l)|0;break}while(0);f[a>>2]=h;c=20}}if((c|0)==20){g=f[n>>2]|0;if(g>>>0>i>>>0)b=(g>>>0)/(d>>>0)|0;f[o>>2]=b;b=1}o=b;u=p;return o|0}function gb(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;o=u;u=u+528|0;m=o;j=o+16|0;if((a|0)==0|c>>>0<62){p=0;u=o;return p|0}k=Db(300,0)|0;if(!k){p=0;u=o;return p|0}f[k>>2]=519686845;f[k+4>>2]=0;f[k+8>>2]=0;l=k+88|0;d=k+136|0;e=k+160|0;g=k+184|0;h=k+208|0;i=k+232|0;n=k+252|0;f[n>>2]=0;f[n+4>>2]=0;f[n+8>>2]=0;b[n+12>>0]=0;n=k+268|0;f[n>>2]=0;f[n+4>>2]=0;f[n+8>>2]=0;b[n+12>>0]=0;n=k+284|0;f[n>>2]=0;f[n+4>>2]=0;f[n+8>>2]=0;b[n+12>>0]=0;n=l;p=n+44|0;do{f[n>>2]=0;n=n+4|0}while((n|0)<(p|0));b[l+44>>0]=0;f[d>>2]=0;f[d+4>>2]=0;f[d+8>>2]=0;f[d+12>>2]=0;f[d+16>>2]=0;b[d+20>>0]=0;f[e>>2]=0;f[e+4>>2]=0;f[e+8>>2]=0;f[e+12>>2]=0;f[e+16>>2]=0;b[e+20>>0]=0;f[g>>2]=0;f[g+4>>2]=0;f[g+8>>2]=0;f[g+12>>2]=0;f[g+16>>2]=0;b[g+20>>0]=0;f[h>>2]=0;f[h+4>>2]=0;f[h+8>>2]=0;f[h+12>>2]=0;f[h+16>>2]=0;b[h+20>>0]=0;f[i>>2]=0;f[i+4>>2]=0;f[i+8>>2]=0;f[i+12>>2]=0;b[i+16>>0]=0;if(xb(k,a,c)|0){p=k;u=o;return p|0}cb(k);if(!(k&7)){Nb(k,0,0,1,0)|0;p=0;u=o;return p|0}else{f[m>>2]=866;f[m+4>>2]=2506;f[m+8>>2]=1232;vc(j,812,m)|0;Ub(j)|0;p=0;u=o;return p|0}return 0}function hb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0;i=u;u=u+576|0;g=i+40|0;e=i+56|0;j=i;f[j>>2]=40;tb(a,b,j)|0;d=(((f[j+4>>2]|0)>>>c)+3|0)>>>2;b=(((f[j+8>>2]|0)>>>c)+3|0)>>>2;c=j+32|0;a=f[c+4>>2]|0;do switch(f[c>>2]|0){case 0:{if(!a)a=8;else h=14;break}case 1:{if(!a)h=13;else h=14;break}case 2:{if(!a)h=13;else h=14;break}case 3:{if(!a)h=13;else h=14;break}case 4:{if(!a)h=13;else h=14;break}case 5:{if(!a)h=13;else h=14;break}case 6:{if(!a)h=13;else h=14;break}case 7:{if(!a)h=13;else h=14;break}case 8:{if(!a)h=13;else h=14;break}case 9:{if(!a)a=8;else h=14;break}case 10:{if(!a)a=8;else h=14;break}default:h=14}while(0);if((h|0)==13)a=16;else if((h|0)==14){f[g>>2]=866;f[g+4>>2]=2672;f[g+8>>2]=1251;vc(e,812,g)|0;Ub(e)|0;a=0}j=X(X(b,d)|0,a)|0;u=i;return j|0}function ib(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0;e=u;u=u+576|0;d=e+40|0;c=e+56|0;g=e;f[g>>2]=40;tb(a,b,g)|0;b=g+32|0;a=f[b+4>>2]|0;do switch(f[b>>2]|0){case 0:{if(!a){g=8;u=e;return g|0}else a=14;break}case 1:{if(!a)a=13;else a=14;break}case 2:{if(!a)a=13;else a=14;break}case 3:{if(!a)a=13;else a=14;break}case 4:{if(!a)a=13;else a=14;break}case 5:{if(!a)a=13;else a=14;break}case 6:{if(!a)a=13;else a=14;break}case 7:{if(!a)a=13;else a=14;break}case 8:{if(!a)a=13;else a=14;break}case 9:{if(!a){g=8;u=e;return g|0}else a=14;break}case 10:{if(!a){g=8;u=e;return g|0}else a=14;break}default:a=14}while(0);if((a|0)==13){g=16;u=e;return g|0}else if((a|0)==14){f[d>>2]=866;f[d+4>>2]=2672;f[d+8>>2]=1251;vc(c,812,d)|0;Ub(c)|0;g=0;u=e;return g|0}return 0}function jb(a,c,d,e,g,i,j){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;i=i|0;j=j|0;var k=0,l=0,m=0,n=0;n=f[a+88>>2]|0;l=(h[n+12>>0]<<8|h[n+13>>0])>>>j;m=(h[n+14>>0]<<8|h[n+15>>0])>>>j;l=((l>>>0>1?l:1)+3|0)>>>2;m=((m>>>0>1?m:1)+3|0)>>>2;n=n+18|0;j=b[n>>0]|0;j=X(l,j<<24>>24==0|j<<24>>24==9?8:16)|0;if(i)if((i&3|0)==0&j>>>0<=i>>>0)j=i;else{g=0;return g|0}if((X(j,m)|0)>>>0>g>>>0){g=0;return g|0}i=(l+1|0)>>>1;k=(m+1|0)>>>1;if(!d){g=0;return g|0}f[a+92>>2]=c;f[a+96>>2]=c;f[a+104>>2]=d;f[a+100>>2]=c+d;f[a+108>>2]=0;f[a+112>>2]=0;switch(b[n>>0]|0){case 0:{if(!(Ra(a,e,g,j,l,m,i,k)|0)){g=0;return g|0}break}case 4:case 6:case 5:case 3:case 2:{if(!(Ua(a,e,g,j,l,m,i,k)|0)){g=0;return g|0}break}case 9:{if(!(Ya(a,e,g,j,l,m,i,k)|0)){g=0;return g|0}break}case 8:case 7:{if(!(Sa(a,e,g,j,l,m,i,k)|0)){g=0;return g|0}break}default:{g=0;return g|0}}g=1;return g|0}function kb(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0;if((d|0)>=8192)return va(a|0,c|0,d|0)|0;h=a|0;g=a+d|0;if((a&3)==(c&3)){while(a&3){if(!d)return h|0;b[a>>0]=b[c>>0]|0;a=a+1|0;c=c+1|0;d=d-1|0}d=g&-4|0;e=d-64|0;while((a|0)<=(e|0)){f[a>>2]=f[c>>2];f[a+4>>2]=f[c+4>>2];f[a+8>>2]=f[c+8>>2];f[a+12>>2]=f[c+12>>2];f[a+16>>2]=f[c+16>>2];f[a+20>>2]=f[c+20>>2];f[a+24>>2]=f[c+24>>2];f[a+28>>2]=f[c+28>>2];f[a+32>>2]=f[c+32>>2];f[a+36>>2]=f[c+36>>2];f[a+40>>2]=f[c+40>>2];f[a+44>>2]=f[c+44>>2];f[a+48>>2]=f[c+48>>2];f[a+52>>2]=f[c+52>>2];f[a+56>>2]=f[c+56>>2];f[a+60>>2]=f[c+60>>2];a=a+64|0;c=c+64|0}while((a|0)<(d|0)){f[a>>2]=f[c>>2];a=a+4|0;c=c+4|0}}else{d=g-4|0;while((a|0)<(d|0)){b[a>>0]=b[c>>0]|0;b[a+1>>0]=b[c+1>>0]|0;b[a+2>>0]=b[c+2>>0]|0;b[a+3>>0]=b[c+3>>0]|0;a=a+4|0;c=c+4|0}}while((a|0)<(g|0)){b[a>>0]=b[c>>0]|0;a=a+1|0;c=c+1|0}return h|0}function lb(a){a=a|0;var b=0,c=0,d=0,e=0;e=a+92|0;d=a+88|0;c=f[d>>2]|0;b=(f[a+4>>2]|0)+((h[c+68>>0]|0)<<8|(h[c+67>>0]|0)<<16|(h[c+69>>0]|0))|0;c=(h[c+65>>0]|0)<<8|(h[c+66>>0]|0);if(!c){e=0;return e|0}f[e>>2]=b;f[a+96>>2]=b;f[a+104>>2]=c;f[a+100>>2]=b+c;f[a+108>>2]=0;f[a+112>>2]=0;if(!(Pa(e,a+116|0)|0)){e=0;return e|0}b=f[d>>2]|0;do if(!((h[b+39>>0]|0)<<8|(h[b+40>>0]|0))){if(!((h[b+55>>0]|0)<<8|(h[b+56>>0]|0))){e=0;return e|0}}else{if(!(Pa(e,a+140|0)|0)){e=0;return e|0}if(Pa(e,a+188|0)|0){b=f[d>>2]|0;break}else{e=0;return e|0}}while(0);if((h[b+55>>0]|0)<<8|(h[b+56>>0]|0)|0){if(!(Pa(e,a+164|0)|0)){e=0;return e|0}if(!(Pa(e,a+212|0)|0)){e=0;return e|0}}e=1;return e|0}function mb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;m=u;u=u+48|0;k=m+16|0;g=m;e=m+32|0;i=a+28|0;d=f[i>>2]|0;f[e>>2]=d;j=a+20|0;d=(f[j>>2]|0)-d|0;f[e+4>>2]=d;f[e+8>>2]=b;f[e+12>>2]=c;d=d+c|0;h=a+60|0;f[g>>2]=f[h>>2];f[g+4>>2]=e;f[g+8>>2]=2;g=Ic(Aa(146,g|0)|0)|0;a:do if((d|0)!=(g|0)){b=2;while(1){if((g|0)<0)break;d=d-g|0;o=f[e+4>>2]|0;n=g>>>0>o>>>0;e=n?e+8|0:e;b=(n<<31>>31)+b|0;o=g-(n?o:0)|0;f[e>>2]=(f[e>>2]|0)+o;n=e+4|0;f[n>>2]=(f[n>>2]|0)-o;f[k>>2]=f[h>>2];f[k+4>>2]=e;f[k+8>>2]=b;g=Ic(Aa(146,k|0)|0)|0;if((d|0)==(g|0)){l=3;break a}}f[a+16>>2]=0;f[i>>2]=0;f[j>>2]=0;f[a>>2]=f[a>>2]|32;if((b|0)==2)c=0;else c=c-(f[e+4>>2]|0)|0}else l=3;while(0);if((l|0)==3){o=f[a+44>>2]|0;f[a+16>>2]=o+(f[a+48>>2]|0);f[i>>2]=o;f[j>>2]=o}u=m;return c|0}function nb(a,c,d,e,g){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0;do if(!(Sc(a,f[c+8>>2]|0,g)|0)){h=a+8|0;if(!(Sc(a,f[c>>2]|0,g)|0)){j=f[h>>2]|0;Fa[f[(f[j>>2]|0)+24>>2]&3](j,c,d,e,g);break}a=c+32|0;if((f[c+16>>2]|0)!=(d|0)?(i=c+20|0,(f[i>>2]|0)!=(d|0)):0){f[a>>2]=e;e=c+44|0;if((f[e>>2]|0)==4)break;a=c+52|0;b[a>>0]=0;k=c+53|0;b[k>>0]=0;h=f[h>>2]|0;Ka[f[(f[h>>2]|0)+20>>2]&3](h,c,d,d,1,g);if(b[k>>0]|0)if(!(b[a>>0]|0)){a=3;j=11}else a=3;else{a=4;j=11}if((j|0)==11){f[i>>2]=d;k=c+40|0;f[k>>2]=(f[k>>2]|0)+1;if((f[c+36>>2]|0)==1?(f[c+24>>2]|0)==2:0)b[c+54>>0]=1}f[e>>2]=a;break}if((e|0)==1)f[a>>2]=1}else jc(0,c,d,e);while(0);return}function ob(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=u;u=u+224|0;m=r+120|0;n=r+80|0;p=r;q=r+136|0;e=n;g=e+40|0;do{f[e>>2]=0;e=e+4|0}while((e|0)<(g|0));f[m>>2]=f[d>>2];if((Oa(0,c,m,p,n)|0)<0)d=-1;else{if((f[a+76>>2]|0)>-1)o=td(a)|0;else o=0;d=f[a>>2]|0;l=d&32;if((b[a+74>>0]|0)<1)f[a>>2]=d&-33;e=a+48|0;if(!(f[e>>2]|0)){g=a+44|0;h=f[g>>2]|0;f[g>>2]=q;i=a+28|0;f[i>>2]=q;j=a+20|0;f[j>>2]=q;f[e>>2]=80;k=a+16|0;f[k>>2]=q+80;d=Oa(a,c,m,p,n)|0;if(h){Ea[f[a+36>>2]&7](a,0,0)|0;d=(f[j>>2]|0)==0?-1:d;f[g>>2]=h;f[e>>2]=0;f[k>>2]=0;f[i>>2]=0;f[j>>2]=0}}else d=Oa(a,c,m,p,n)|0;e=f[a>>2]|0;f[a>>2]=e|l;if(o|0)sd(a);d=(e&32|0)==0?d:-1}u=r;return d|0}function pb(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=u;u=u+64|0;n=p;m=f[a>>2]|0;o=a+(f[m+-8>>2]|0)|0;m=f[m+-4>>2]|0;f[n>>2]=e;f[n+4>>2]=a;f[n+8>>2]=c;f[n+12>>2]=g;a=n+16|0;c=n+20|0;g=n+24|0;h=n+28|0;i=n+32|0;j=n+40|0;k=a;l=k+36|0;do{f[k>>2]=0;k=k+4|0}while((k|0)<(l|0));d[a+36>>1]=0;b[a+38>>0]=0;a:do if(Sc(m,e,0)|0){f[n+48>>2]=1;Ka[f[(f[m>>2]|0)+20>>2]&3](m,n,o,o,1,0);a=(f[g>>2]|0)==1?o:0}else{Fa[f[(f[m>>2]|0)+24>>2]&3](m,n,o,1,0);switch(f[n+36>>2]|0){case 0:{a=(f[j>>2]|0)==1&(f[h>>2]|0)==1&(f[i>>2]|0)==1?f[c>>2]|0:0;break a}case 1:break;default:{a=0;break a}}if((f[g>>2]|0)!=1?!((f[j>>2]|0)==0&(f[h>>2]|0)==1&(f[i>>2]|0)==1):0){a=0;break}a=f[a>>2]|0}while(0);u=p;return a|0}function qb(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0;j=u;u=u+544|0;h=j+16|0;b=j;e=j+32|0;g=a+8|0;c=f[g>>2]|0;if((c+-1|0)>>>0>=8192){f[b>>2]=866;f[b+4>>2]=3006;f[b+8>>2]=1257;vc(e,812,b)|0;Ub(e)|0}f[a>>2]=c;d=a+20|0;b=f[d>>2]|0;if(!b){b=Db(180,0)|0;if(!b)b=0;else{i=b+164|0;f[i>>2]=0;f[i+4>>2]=0;f[i+8>>2]=0;f[i+12>>2]=0}f[d>>2]=b;i=f[a>>2]|0}else i=c;if(!(f[g>>2]|0)){f[h>>2]=866;f[h+4>>2]=910;f[h+8>>2]=1497;vc(e,812,h)|0;Ub(e)|0;h=f[a>>2]|0}else h=i;e=f[a+4>>2]|0;if(h>>>0>16){c=h;d=0}else{a=0;a=Qa(b,i,e,a)|0;u=j;return a|0}while(1){g=d+1|0;if(c>>>0>3){c=c>>>1;d=g}else break}a=d+2+((g|0)!=32&1<<g>>>0<h>>>0&1)|0;a=(a>>>0<11?a:11)&255;a=Qa(b,i,e,a)|0;u=j;return a|0}function rb(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=(f[a>>2]|0)+1794895138|0;h=Tc(f[a+8>>2]|0,o)|0;e=Tc(f[a+12>>2]|0,o)|0;g=Tc(f[a+16>>2]|0,o)|0;a:do if((h>>>0<c>>>2>>>0?(n=c-(h<<2)|0,e>>>0<n>>>0&g>>>0<n>>>0):0)?((g|e)&3|0)==0:0){n=e>>>2;m=g>>>2;l=0;while(1){j=h>>>1;k=l+j|0;i=k<<1;g=i+n|0;e=Tc(f[a+(g<<2)>>2]|0,o)|0;g=Tc(f[a+(g+1<<2)>>2]|0,o)|0;if(!(g>>>0<c>>>0&e>>>0<(c-g|0)>>>0)){e=0;break a}if(b[a+(g+e)>>0]|0){e=0;break a}e=_b(d,a+g|0)|0;if(!e)break;e=(e|0)<0;if((h|0)==1){e=0;break a}else{l=e?l:k;h=e?j:h-j|0}}e=i+m|0;g=Tc(f[a+(e<<2)>>2]|0,o)|0;e=Tc(f[a+(e+1<<2)>>2]|0,o)|0;if(e>>>0<c>>>0&g>>>0<(c-e|0)>>>0)e=(b[a+(e+g)>>0]|0)==0?a+e|0:0;else e=0}else e=0;while(0);return e|0}function sb(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0;i=u;u=u+576|0;g=i+48|0;h=i+32|0;d=i+16|0;c=i;e=i+64|0;b=f[a+168>>2]|0;do if(b|0){j=f[b+-4>>2]|0;b=b+-8|0;if(!((j|0)!=0?(j|0)==(~f[b>>2]|0):0)){f[c>>2]=866;f[c+4>>2]=651;f[c+8>>2]=1579;vc(e,812,c)|0;Ub(e)|0}if(!(b&7)){Nb(b,0,0,1,0)|0;break}else{f[d>>2]=866;f[d+4>>2]=2506;f[d+8>>2]=1232;vc(e,812,d)|0;Ub(e)|0;break}}while(0);b=f[a+176>>2]|0;if(!b){u=i;return}j=f[b+-4>>2]|0;b=b+-8|0;if(!((j|0)!=0?(j|0)==(~f[b>>2]|0):0)){f[h>>2]=866;f[h+4>>2]=651;f[h+8>>2]=1579;vc(e,812,h)|0;Ub(e)|0}if(!(b&7)){Nb(b,0,0,1,0)|0;u=i;return}else{f[g>>2]=866;f[g+4>>2]=2506;f[g+8>>2]=1232;vc(e,812,g)|0;Ub(e)|0;u=i;return}}function tb(a,c,d){a=a|0;c=c|0;d=d|0;var e=0;if(!((a|0)!=0&c>>>0>73&(d|0)!=0)){d=0;return d|0}if((f[d>>2]|0)!=40){d=0;return d|0}if(((h[a>>0]|0)<<8|(h[a+1>>0]|0)|0)!=18552){d=0;return d|0}if(((h[a+2>>0]|0)<<8|(h[a+3>>0]|0))>>>0<74){d=0;return d|0}if(((h[a+7>>0]|0)<<16|(h[a+6>>0]|0)<<24|(h[a+8>>0]|0)<<8|(h[a+9>>0]|0))>>>0>c>>>0){d=0;return d|0}f[d+4>>2]=(h[a+12>>0]|0)<<8|(h[a+13>>0]|0);f[d+8>>2]=(h[a+14>>0]|0)<<8|(h[a+15>>0]|0);f[d+12>>2]=h[a+16>>0];f[d+16>>2]=h[a+17>>0];c=a+18|0;e=d+32|0;f[e>>2]=h[c>>0];f[e+4>>2]=0;c=b[c>>0]|0;f[d+20>>2]=c<<24>>24==0|c<<24>>24==9?8:16;f[d+24>>2]=(h[a+26>>0]|0)<<16|(h[a+25>>0]|0)<<24|(h[a+27>>0]|0)<<8|(h[a+28>>0]|0);f[d+28>>2]=(h[a+30>>0]|0)<<16|(h[a+29>>0]|0)<<24|(h[a+31>>0]|0)<<8|(h[a+32>>0]|0);d=1;return d|0}function ub(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,i=0,j=0,k=0,l=0;l=u;u=u+544|0;j=l+16|0;c=l;i=l+32|0;if(b>>>0>=33){f[c>>2]=866;f[c+4>>2]=3199;f[c+8>>2]=1350;vc(i,812,c)|0;Ub(i)|0}k=a+20|0;c=f[k>>2]|0;if((c|0)>=(b|0)){e=a+16|0;g=e;e=f[e>>2]|0;i=c;j=32-b|0;j=e>>>j;e=e<<b;f[g>>2]=e;b=i-b|0;f[k>>2]=b;u=l;return j|0}e=a+4|0;g=a+8|0;d=a+16|0;do{a=f[e>>2]|0;if((a|0)==(f[g>>2]|0))a=0;else{f[e>>2]=a+1;a=h[a>>0]|0}c=c+8|0;f[k>>2]=c;if((c|0)>=33){f[j>>2]=866;f[j+4>>2]=3208;f[j+8>>2]=1366;vc(i,812,j)|0;Ub(i)|0;c=f[k>>2]|0}a=a<<32-c|f[d>>2];f[d>>2]=a}while((c|0)<(b|0));j=32-b|0;j=a>>>j;i=a<<b;f[d>>2]=i;b=c-b|0;f[k>>2]=b;u=l;return j|0}function vb(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;h=c&255;e=(d|0)!=0;a:do if(e&(a&3|0)!=0){g=c&255;while(1){if((b[a>>0]|0)==g<<24>>24){i=6;break a}a=a+1|0;d=d+-1|0;e=(d|0)!=0;if(!(e&(a&3|0)!=0)){i=5;break}}}else i=5;while(0);if((i|0)==5)if(e)i=6;else d=0;b:do if((i|0)==6){g=c&255;if((b[a>>0]|0)!=g<<24>>24){e=X(h,16843009)|0;c:do if(d>>>0>3)while(1){h=f[a>>2]^e;if((h&-2139062144^-2139062144)&h+-16843009|0)break;a=a+4|0;d=d+-4|0;if(d>>>0<=3){i=11;break c}}else i=11;while(0);if((i|0)==11)if(!d){d=0;break}while(1){if((b[a>>0]|0)==g<<24>>24)break b;a=a+1|0;d=d+-1|0;if(!d){d=0;break}}}}while(0);return (d|0?a:0)|0}function wb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,i=0,j=0,k=0,l=0,m=0;m=u;u=u+528|0;l=m;k=m+16|0;i=f[a+88>>2]|0;j=(h[i+70+(e<<2)+1>>0]|0)<<16|(h[i+70+(e<<2)>>0]|0)<<24|(h[i+70+(e<<2)+2>>0]|0)<<8|(h[i+70+(e<<2)+3>>0]|0);g=e+1|0;if(g>>>0<(h[i+16>>0]|0)>>>0)g=(h[i+70+(g<<2)+1>>0]|0)<<16|(h[i+70+(g<<2)>>0]|0)<<24|(h[i+70+(g<<2)+2>>0]|0)<<8|(h[i+70+(g<<2)+3>>0]|0);else g=f[a+8>>2]|0;if(g>>>0>j>>>0){k=a+4|0;k=f[k>>2]|0;k=k+j|0;l=g-j|0;l=jb(a,k,l,b,c,d,e)|0;u=m;return l|0}f[l>>2]=866;f[l+4>>2]=3694;f[l+8>>2]=1508;vc(k,812,l)|0;Ub(k)|0;k=a+4|0;k=f[k>>2]|0;k=k+j|0;l=g-j|0;l=jb(a,k,l,b,c,d,e)|0;u=m;return l|0}function xb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(((!((b|0)==0|c>>>0<74)?((h[b>>0]|0)<<8|(h[b+1>>0]|0)|0)==18552:0)?((h[b+2>>0]|0)<<8|(h[b+3>>0]|0))>>>0>=74:0)?((h[b+7>>0]|0)<<16|(h[b+6>>0]|0)<<24|(h[b+8>>0]|0)<<8|(h[b+9>>0]|0))>>>0<=c>>>0:0){d=a+88|0;f[d>>2]=b;f[a+4>>2]=b;f[a+8>>2]=c;if(!(lb(a)|0)){e=0;return e|0}b=f[d>>2]|0;if((h[b+39>>0]|0)<<8|(h[b+40>>0]|0)){if(ab(a)|0?Xa(a)|0:0){b=f[d>>2]|0;e=11}}else e=11;if((e|0)==11){if(!((h[b+55>>0]|0)<<8|(h[b+56>>0]|0))){e=1;return e|0}if(eb(a)|0?Wa(a)|0:0){e=1;return e|0}}e=0;return e|0}f[a+88>>2]=0;e=0;return e|0}function yb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,i=0,j=0,k=0,l=0;l=u;u=u+528|0;i=l;g=l+16|0;if(!b){k=0;u=l;return k|0}if(b>>>0<=16){k=ub(a,b)|0;u=l;return k|0}j=ub(a,b+-16|0)|0;k=a+20|0;b=f[k>>2]|0;if((b|0)<16){d=a+4|0;e=a+8|0;c=a+16|0;do{a=f[d>>2]|0;if((a|0)==(f[e>>2]|0))a=0;else{f[d>>2]=a+1;a=h[a>>0]|0}b=b+8|0;f[k>>2]=b;if((b|0)>=33){f[i>>2]=866;f[i+4>>2]=3208;f[i+8>>2]=1366;vc(g,812,i)|0;Ub(g)|0;b=f[k>>2]|0}a=a<<32-b|f[c>>2];f[c>>2]=a}while((b|0)<16)}else{a=a+16|0;c=a;a=f[a>>2]|0}f[c>>2]=a<<16;f[k>>2]=b+-16;k=a>>>16|j<<16;u=l;return k|0}function zb(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0;e=d+16|0;g=f[e>>2]|0;if(!g)if(!(Zb(d)|0)){g=f[e>>2]|0;h=5}else e=0;else h=5;a:do if((h|0)==5){j=d+20|0;i=f[j>>2]|0;e=i;if((g-i|0)>>>0<c>>>0){e=Ea[f[d+36>>2]&7](d,a,c)|0;break}b:do if((b[d+75>>0]|0)>-1){i=c;while(1){if(!i){h=0;g=a;break b}g=i+-1|0;if((b[a+g>>0]|0)==10)break;else i=g}e=Ea[f[d+36>>2]&7](d,a,i)|0;if(e>>>0<i>>>0)break a;h=i;g=a+i|0;c=c-i|0;e=f[j>>2]|0}else{h=0;g=a}while(0);kb(e|0,g|0,c|0)|0;f[j>>2]=(f[j>>2]|0)+c;e=h+c|0}while(0);return e|0}function Ab(a,c,d){a=a|0;c=c|0;d=d|0;do if(a){if(c>>>0<128){b[a>>0]=c;a=1;break}d=(ld()|0)+188|0;if(!(f[f[d>>2]>>2]|0))if((c&-128|0)==57216){b[a>>0]=c;a=1;break}else{a=jd()|0;f[a>>2]=84;a=-1;break}if(c>>>0<2048){b[a>>0]=c>>>6|192;b[a+1>>0]=c&63|128;a=2;break}if(c>>>0<55296|(c&-8192|0)==57344){b[a>>0]=c>>>12|224;b[a+1>>0]=c>>>6&63|128;b[a+2>>0]=c&63|128;a=3;break}if((c+-65536|0)>>>0<1048576){b[a>>0]=c>>>18|240;b[a+1>>0]=c>>>12&63|128;b[a+2>>0]=c>>>6&63|128;b[a+3>>0]=c&63|128;a=4;break}else{a=jd()|0;f[a>>2]=84;a=-1;break}}else a=1;while(0);return a|0}function Bb(){var a=0,b=0,c=0,d=0,e=0,g=0,h=0,i=0;e=u;u=u+48|0;h=e+32|0;c=e+24|0;i=e+16|0;g=e;e=e+36|0;a=rc()|0;if(a|0?(d=f[a>>2]|0,d|0):0){a=d+48|0;b=f[a>>2]|0;a=f[a+4>>2]|0;if(!((b&-256|0)==1126902528&(a|0)==1129074247)){f[c>>2]=4168;Ac(4118,c)}if((b|0)==1126902529&(a|0)==1129074247)a=f[d+44>>2]|0;else a=d+80|0;f[e>>2]=a;d=f[d>>2]|0;a=f[d+4>>2]|0;if(Ea[f[(f[2]|0)+16>>2]&7](8,d,e)|0){i=f[e>>2]|0;i=Ha[f[(f[i>>2]|0)+8>>2]&1](i)|0;f[g>>2]=4168;f[g+4>>2]=a;f[g+8>>2]=i;Ac(4032,g)}else{f[i>>2]=4168;f[i+4>>2]=a;Ac(4077,i)}}Ac(4156,h)}function Cb(a){a=a|0;var c=0,d=0,e=0,g=0,h=0;h=u;u=u+544|0;g=h+16|0;d=h;e=h+32|0;c=f[a+20>>2]|0;do if(c|0){sb(c);if(!(c&7)){Nb(c,0,0,1,0)|0;break}else{f[d>>2]=866;f[d+4>>2]=2506;f[d+8>>2]=1232;vc(e,812,d)|0;Ub(e)|0;break}}while(0);c=a+4|0;d=f[c>>2]|0;if(!d){g=a+16|0;b[g>>0]=0;u=h;return}if(!(d&7))Nb(d,0,0,1,0)|0;else{f[g>>2]=866;f[g+4>>2]=2506;f[g+8>>2]=1232;vc(e,812,g)|0;Ub(e)|0}f[c>>2]=0;f[a+8>>2]=0;f[a+12>>2]=0;g=a+16|0;b[g>>0]=0;u=h;return}function Db(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0;j=u;u=u+560|0;i=j+32|0;h=j+16|0;c=j;g=j+48|0;e=j+44|0;d=a+3&-4;d=d|0?d:4;if(d>>>0>2147418112){f[c>>2]=866;f[c+4>>2]=2506;f[c+8>>2]=1103;vc(g,812,c)|0;Ub(g)|0;i=0;u=j;return i|0}f[e>>2]=d;a=Nb(0,d,e,1,0)|0;c=f[e>>2]|0;if(b|0)f[b>>2]=c;if(!((a|0)==0|c>>>0<d>>>0)){if(a&7){f[i>>2]=866;f[i+4>>2]=2533;f[i+8>>2]=1156;vc(g,812,i)|0;Ub(g)|0}}else{f[h>>2]=866;f[h+4>>2]=2506;f[h+8>>2]=1129;vc(g,812,h)|0;Ub(g)|0;a=0}i=a;u=j;return i|0}function Eb(a){a=a|0;var c=0,d=0,e=0,g=0,h=0,i=0;i=u;u=u+544|0;h=i+16|0;e=i;g=i+32|0;f[a>>2]=0;c=a+4|0;d=f[c>>2]|0;if(d|0){if(!(d&7))Nb(d,0,0,1,0)|0;else{f[e>>2]=866;f[e+4>>2]=2506;f[e+8>>2]=1232;vc(g,812,e)|0;Ub(g)|0}f[c>>2]=0;f[a+8>>2]=0;f[a+12>>2]=0}b[a+16>>0]=0;a=a+20|0;c=f[a>>2]|0;if(!c){u=i;return}sb(c);if(!(c&7))Nb(c,0,0,1,0)|0;else{f[h>>2]=866;f[h+4>>2]=2506;f[h+8>>2]=1232;vc(g,812,h)|0;Ub(g)|0}f[a>>2]=0;u=i;return}function Fb(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=u;u=u+128|0;g=m+124|0;l=m;h=l;i=604;j=h+124|0;do{f[h>>2]=f[i>>2];h=h+4|0;i=i+4|0}while((h|0)<(j|0));if((c+-1|0)>>>0>2147483646)if(!c){a=g;c=1;k=4}else{c=jd()|0;f[c>>2]=75;c=-1}else k=4;if((k|0)==4){k=-2-a|0;k=c>>>0>k>>>0?k:c;f[l+48>>2]=k;g=l+20|0;f[g>>2]=a;f[l+44>>2]=a;c=a+k|0;a=l+16|0;f[a>>2]=c;f[l+28>>2]=c;c=ob(l,d,e)|0;if(k){l=f[g>>2]|0;b[l+(((l|0)==(f[a>>2]|0))<<31>>31)>>0]=0}}u=m;return c|0}function Gb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0;k=u;u=u+560|0;j=k+32|0;g=k+16|0;e=k;h=k+48|0;i=k+44|0;if(a&7|0){f[e>>2]=866;f[e+4>>2]=2506;f[e+8>>2]=1210;vc(h,812,e)|0;Ub(h)|0;j=0;u=k;return j|0}if(b>>>0>2147418112){f[g>>2]=866;f[g+4>>2]=2506;f[g+8>>2]=1103;vc(h,812,g)|0;Ub(h)|0;j=0;u=k;return j|0}f[i>>2]=b;a=Nb(a,b,i,d,0)|0;if(c|0)f[c>>2]=f[i>>2];if(a&7|0){f[j>>2]=866;f[j+4>>2]=2558;f[j+8>>2]=1156;vc(h,812,j)|0;Ub(h)|0}j=a;u=k;return j|0}function Hb(a,c,d,e,g){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;var h=0;do if(!(Sc(a,f[c+8>>2]|0,g)|0)){if(Sc(a,f[c>>2]|0,g)|0){a=c+32|0;if((f[c+16>>2]|0)!=(d|0)?(h=c+20|0,(f[h>>2]|0)!=(d|0)):0){f[a>>2]=e;f[h>>2]=d;e=c+40|0;f[e>>2]=(f[e>>2]|0)+1;if((f[c+36>>2]|0)==1?(f[c+24>>2]|0)==2:0)b[c+54>>0]=1;f[c+44>>2]=4;break}if((e|0)==1)f[a>>2]=1}}else jc(0,c,d,e);while(0);return}function Ib(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;h=a+d|0;c=c&255;if((d|0)>=67){while(a&3){b[a>>0]=c;a=a+1|0}e=h&-4|0;g=e-64|0;i=c|c<<8|c<<16|c<<24;while((a|0)<=(g|0)){f[a>>2]=i;f[a+4>>2]=i;f[a+8>>2]=i;f[a+12>>2]=i;f[a+16>>2]=i;f[a+20>>2]=i;f[a+24>>2]=i;f[a+28>>2]=i;f[a+32>>2]=i;f[a+36>>2]=i;f[a+40>>2]=i;f[a+44>>2]=i;f[a+48>>2]=i;f[a+52>>2]=i;f[a+56>>2]=i;f[a+60>>2]=i;a=a+64|0}while((a|0)<(e|0)){f[a>>2]=i;a=a+4|0}}while((a|0)<(h|0)){b[a>>0]=c;a=a+1|0}return h-d|0}function Jb(a,c,d,e,g){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0;b[c+53>>0]=1;do if((f[c+4>>2]|0)==(e|0)){b[c+52>>0]=1;e=c+16|0;h=f[e>>2]|0;j=c+54|0;k=c+48|0;i=c+24|0;a=c+36|0;if(!h){f[e>>2]=d;f[i>>2]=g;f[a>>2]=1;if(!((f[k>>2]|0)==1&(g|0)==1))break;b[j>>0]=1;break}if((h|0)!=(d|0)){f[a>>2]=(f[a>>2]|0)+1;b[j>>0]=1;break}a=f[i>>2]|0;if((a|0)==2){f[i>>2]=g;a=g}if((f[k>>2]|0)==1&(a|0)==1)b[j>>0]=1}while(0);return}function Kb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0;h=u;u=u+64|0;e=h;if(!(Sc(a,b,0)|0))if((b|0)!=0?(g=pb(b,32,16,0)|0,(g|0)!=0):0){b=e+4|0;d=b+52|0;do{f[b>>2]=0;b=b+4|0}while((b|0)<(d|0));f[e>>2]=g;f[e+8>>2]=a;f[e+12>>2]=-1;f[e+48>>2]=1;La[f[(f[g>>2]|0)+28>>2]&3](g,e,f[c>>2]|0,1);if((f[e+24>>2]|0)==1){f[c>>2]=f[e+16>>2];b=1}else b=0}else b=0;else b=1;u=h;return b|0}function Lb(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,i=0,j=0,k=0,l=0;l=u;u=u+16|0;j=l;k=c&255;b[j>>0]=k;e=a+16|0;g=f[e>>2]|0;if(!g)if(!(Zb(a)|0)){g=f[e>>2]|0;i=4}else d=-1;else i=4;do if((i|0)==4){i=a+20|0;e=f[i>>2]|0;if(e>>>0<g>>>0?(d=c&255,(d|0)!=(b[a+75>>0]|0)):0){f[i>>2]=e+1;b[e>>0]=k;break}if((Ea[f[a+36>>2]&7](a,j,1)|0)==1)d=h[j>>0]|0;else d=-1}while(0);u=l;return d|0}function Mb(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0;j=a&255;d=a&255;if((f[c+76>>2]|0)>=0?(td(c)|0)!=0:0){if((d|0)!=(b[c+75>>0]|0)?(h=c+20|0,i=f[h>>2]|0,i>>>0<(f[c+16>>2]|0)>>>0):0){f[h>>2]=i+1;b[i>>0]=j}else d=Lb(c,a)|0;sd(c)}else k=3;do if((k|0)==3){if((d|0)!=(b[c+75>>0]|0)?(e=c+20|0,g=f[e>>2]|0,g>>>0<(f[c+16>>2]|0)>>>0):0){f[e>>2]=g+1;b[g>>0]=j;break}d=Lb(c,a)|0}while(0);return d|0}function Nb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;do if(!a){b=Ma(b)|0;if(c){if(!b)a=0;else a=uc(b)|0;f[c>>2]=a}}else{if(!b){Ta(a);if(!c){b=0;break}f[c>>2]=0;b=0;break}if(d){b=Sb(a,b)|0;a=(b|0)==0?a:b}else b=0;if(c){e=uc(a)|0;f[c>>2]=e}}while(0);return b|0}function Ob(a){a=a|0;var c=0,d=0,e=0;e=a;a:do if(!(e&3))d=4;else{c=e;while(1){if(!(b[a>>0]|0)){a=c;break a}a=a+1|0;c=a;if(!(c&3)){d=4;break}}}while(0);if((d|0)==4){while(1){c=f[a>>2]|0;if(!((c&-2139062144^-2139062144)&c+-16843009))a=a+4|0;else break}if((c&255)<<24>>24)do a=a+1|0;while((b[a>>0]|0)!=0)}return a-e|0}function Pb(a,b){a=+a;b=b|0;var c=0,d=0,e=0;p[s>>3]=a;c=f[s>>2]|0;d=f[s+4>>2]|0;e=zc(c|0,d|0,52)|0;switch(e&2047){case 0:{if(a!=0.0){a=+Pb(a*18446744073709551616.0,b);c=(f[b>>2]|0)+-64|0}else c=0;f[b>>2]=c;break}case 2047:break;default:{f[b>>2]=(e&2047)+-1022;f[s>>2]=c;f[s+4>>2]=d&-2146435073|1071644672;a=+p[s>>3]}}return +a}function Qb(a,c){a=a|0;c=c|0;var d=0,e=0;e=0;while(1){if((h[2140+e>>0]|0)==(a|0)){a=2;break}d=e+1|0;if((d|0)==87){d=2228;e=87;a=5;break}else e=d}if((a|0)==2)if(!e)d=2228;else{d=2228;a=5}if((a|0)==5)while(1){do{a=d;d=d+1|0}while((b[a>>0]|0)!=0);e=e+-1|0;if(!e)break;else a=5}return ed(d,f[c+20>>2]|0)|0}function Rb(a,c,d){a=a|0;c=c|0;d=d|0;var e=0;if(c>>>0>0|(c|0)==0&a>>>0>4294967295){while(1){e=mc(a|0,c|0,10,0)|0;d=d+-1|0;b[d>>0]=e&255|48;e=a;a=Uc(a|0,c|0,10,0)|0;if(!(c>>>0>9|(c|0)==9&e>>>0>4294967295))break;else c=I}c=a}else c=a;if(c)while(1){d=d+-1|0;b[d>>0]=(c>>>0)%10|0|48;if(c>>>0<10)break;else c=(c>>>0)/10|0}return d|0}function Sb(a,b){a=a|0;b=b|0;var c=0,d=0;if(!a){b=Ma(b)|0;return b|0}if(b>>>0>4294967231){b=jd()|0;f[b>>2]=12;b=0;return b|0}c=_a(a+-8|0,b>>>0<11?16:b+11&-8)|0;if(c|0){b=c+8|0;return b|0}c=Ma(b)|0;if(!c){b=0;return b|0}d=f[a+-4>>2]|0;d=(d&-8)-((d&3|0)==0?8:4)|0;kb(c|0,a|0,(d>>>0<b>>>0?d:b)|0)|0;Ta(a);b=c;return b|0}function Tb(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0;a=c+16|0;g=f[a>>2]|0;h=c+36|0;i=c+24|0;do if(g){if((g|0)!=(d|0)){f[h>>2]=(f[h>>2]|0)+1;f[i>>2]=2;b[c+54>>0]=1;break}if((f[i>>2]|0)==2)f[i>>2]=e}else{f[a>>2]=d;f[i>>2]=e;f[h>>2]=1}while(0);return}function Ub(a){a=a|0;var c=0,d=0,e=0,g=0;e=f[119]|0;if((f[e+76>>2]|0)>-1)g=td(e)|0;else g=0;do if((Mc(a,e)|0)<0)a=1;else{if((b[e+75>>0]|0)!=10?(c=e+20|0,d=f[c>>2]|0,d>>>0<(f[e+16>>2]|0)>>>0):0){f[c>>2]=d+1;b[d>>0]=10;a=0;break}a=(Lb(e,10)|0)<0}while(0);if(g|0)sd(e);return a<<31>>31|0}function Vb(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;if(Sc(a,f[b+8>>2]|0,g)|0)Jb(0,b,c,d,e);else{a=f[a+8>>2]|0;Ka[f[(f[a>>2]|0)+20>>2]&3](a,b,c,d,e,g)}return}function Wb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=u;u=u+256|0;f=g;if((c|0)>(d|0)&(e&73728|0)==0){e=c-d|0;Ib(f|0,b|0,(e>>>0<256?e:256)|0)|0;if(e>>>0>255){b=c-d|0;do{Nc(a,f,256);e=e+-256|0}while(e>>>0>255);e=b&255}Nc(a,f,e)}u=g;return}function Xb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(Sc(a,f[b+8>>2]|0,0)|0)Tb(0,b,c,d);else{a=f[a+8>>2]|0;La[f[(f[a>>2]|0)+28>>2]&3](a,b,c,d)}return}function Yb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;e=u;u=u+32|0;g=e;d=e+20|0;f[g>>2]=f[a+60>>2];f[g+4>>2]=0;f[g+8>>2]=b;f[g+12>>2]=d;f[g+16>>2]=c;if((Ic(xa(140,g|0)|0)|0)<0){f[d>>2]=-1;a=-1}else a=f[d>>2]|0;u=e;return a|0}function Zb(a){a=a|0;var c=0,d=0;c=a+74|0;d=b[c>>0]|0;b[c>>0]=d+255|d;c=f[a>>2]|0;if(!(c&8)){f[a+8>>2]=0;f[a+4>>2]=0;d=f[a+44>>2]|0;f[a+28>>2]=d;f[a+20>>2]=d;f[a+16>>2]=d+(f[a+48>>2]|0);a=0}else{f[a>>2]=c|32;a=-1}return a|0}function _b(a,c){a=a|0;c=c|0;var d=0,e=0;d=b[a>>0]|0;e=b[c>>0]|0;if(d<<24>>24==0?1:d<<24>>24!=e<<24>>24)a=e;else{do{a=a+1|0;c=c+1|0;d=b[a>>0]|0;e=b[c>>0]|0}while(!(d<<24>>24==0?1:d<<24>>24!=e<<24>>24));a=e}return (d&255)-(a&255)|0}function $b(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0;g=u;u=u+32|0;e=g;f[a+36>>2]=1;if((f[a>>2]&64|0)==0?(f[e>>2]=f[a+60>>2],f[e+4>>2]=21523,f[e+8>>2]=g+16,na(54,e|0)|0):0)b[a+75>>0]=-1;e=mb(a,c,d)|0;u=g;return e|0}function ac(a){a=a|0;var b=0,c=0;c=a+15&-16|0;b=f[r>>2]|0;a=b+c|0;if((c|0)>0&(a|0)<(b|0)|(a|0)<0){da()|0;ra(12);return -1}f[r>>2]=a;if((a|0)>(ca()|0)?(ba()|0)==0:0){f[r>>2]=b;ra(12);return -1}return b|0}function bc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0;e=X(c,b)|0;c=(b|0)==0?0:c;if((f[d+76>>2]|0)>-1){g=(td(d)|0)==0;a=zb(a,e,d)|0;if(!g)sd(d)}else a=zb(a,e,d)|0;if((a|0)!=(e|0))c=(a>>>0)/(b>>>0)|0;return c|0}function cc(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;if(Sc(a,f[b+8>>2]|0,g)|0)Jb(0,b,c,d,e);return}function dc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(Sc(a,f[b+8>>2]|0,0)|0)Tb(0,b,c,d);return}function ec(a){a=a|0;var c=0,d=0,e=0;d=f[a>>2]|0;e=(b[d>>0]|0)+-48|0;if(e>>>0<10){c=0;do{c=e+(c*10|0)|0;d=d+1|0;f[a>>2]=d;e=(b[d>>0]|0)+-48|0}while(e>>>0<10)}else c=0;return c|0}function fc(){var a=0,b=0;a=rc()|0;if((a|0?(b=f[a>>2]|0,b|0):0)?(a=b+48|0,(f[a>>2]&-256|0)==1126902528?(f[a+4>>2]|0)==1129074247:0):0)Jc(f[b+12>>2]|0);Jc($c()|0)}function gc(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;if(!((a|0)==0&(c|0)==0))do{d=d+-1|0;b[d>>0]=h[2122+(a&15)>>0]|0|e;a=zc(a|0,c|0,4)|0;c=I}while(!((a|0)==0&(c|0)==0));return d|0}function hc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=u;u=u+16|0;d=e;f[d>>2]=f[c>>2];a=Ea[f[(f[a>>2]|0)+16>>2]&7](a,b,d)|0;if(a)f[c>>2]=f[d>>2];u=e;return a&1|0}function ic(a){a=a|0;var c=0;c=b[w+(a&255)>>0]|0;if((c|0)<8)return c|0;c=b[w+(a>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=b[w+(a>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return (b[w+(a>>>24)>>0]|0)+24|0}function jc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;if((f[b+4>>2]|0)==(c|0)?(e=b+28|0,(f[e>>2]|0)!=1):0)f[e>>2]=d;return}function kc(a,c,d){a=a|0;c=c|0;d=d|0;if(!((a|0)==0&(c|0)==0))do{d=d+-1|0;b[d>>0]=a&7|48;a=zc(a|0,c|0,3)|0;c=I}while(!((a|0)==0&(c|0)==0));return d|0}function lc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=a+20|0;e=f[d>>2]|0;a=(f[a+16>>2]|0)-e|0;a=a>>>0>c>>>0?c:a;kb(e|0,b|0,a|0)|0;f[d>>2]=(f[d>>2]|0)+a;return c|0}function mc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0;g=u;u=u+16|0;e=g|0;Za(a,b,c,d,e)|0;u=g;return (I=f[e+4>>2]|0,f[e>>2]|0)|0}function nc(a,b){a=a|0;b=b|0;var c=0,d=0;d=u;u=u+48|0;c=d;f[c>>2]=40;tb(a,b,c)|0;u=d;return f[c+32>>2]|0}function oc(a,b){a=a|0;b=b|0;var c=0,d=0;d=u;u=u+48|0;c=d;f[c>>2]=40;tb(a,b,c)|0;u=d;return f[c+12>>2]|0}function pc(a,b){a=a|0;b=b|0;var c=0,d=0;d=u;u=u+48|0;c=d;f[c>>2]=40;tb(a,b,c)|0;u=d;return f[c+8>>2]|0}function qc(a,b){a=a|0;b=b|0;var c=0,d=0;d=u;u=u+48|0;c=d;f[c>>2]=40;tb(a,b,c)|0;u=d;return f[c+4>>2]|0}function rc(){var a=0,b=0;a=u;u=u+16|0;if(!(ua(5136,2)|0)){b=ma(f[1285]|0)|0;u=a;return b|0}else Ac(4307,a);return 0}function sc(a){a=a|0;var b=0,c=0;b=u;u=u+16|0;c=b;a=pd(f[a+60>>2]|0)|0;f[c>>2]=a;a=Ic(qa(6,c|0)|0)|0;u=b;return a|0}function tc(a){a=a|0;var b=0;b=u;u=u+16|0;Ta(a);if(!(oa(f[1285]|0,0)|0)){u=b;return}else Ac(4406,b)}function uc(a){a=a|0;var b=0;if(!a)return 0;else{b=f[a+-4>>2]|0;a=b&3;return ((a|0)==1?0:(b&-8)-((a|0)==0?8:4)|0)|0}return 0}function vc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=u;u=u+16|0;e=d;f[e>>2]=c;c=Yc(a,b,e)|0;u=d;return c|0}function wc(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Ka[a&3](b|0,c|0,d|0,e|0,f|0,g|0)}function xc(){var a=0;a=u;u=u+16|0;if(!(wa(5140,6)|0)){u=a;return}else Ac(4356,a)}function yc(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}I=a<<c-32;return 0}function zc(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}I=0;return b>>>c-32|0}function Ac(a,b){a=a|0;b=b|0;var c=0;c=u;u=u+16|0;f[c>>2]=b;b=f[26]|0;ob(b,a,c)|0;Mb(10,b)|0;sa()}function Bc(){}function Cc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (I=d,a-c>>>0|0)|0}function Dc(a,b){a=a|0;b=b|0;if(!b)b=0;else b=rb(f[b>>2]|0,f[b+4>>2]|0,a)|0;return (b|0?b:a)|0}function Ec(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Fa[a&3](b|0,c|0,d|0,e|0,f|0)}function Fc(a){a=+a;var b=0;p[s>>3]=a;b=f[s>>2]|0;I=f[s+4>>2]|0;return b|0}function Gc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (I=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function Hc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;La[a&3](b|0,c|0,d|0,e|0)}function Ic(a){a=a|0;var b=0;if(a>>>0>4294963200){b=jd()|0;f[b>>2]=0-a;a=-1}return a|0}function Jc(a){a=a|0;var b=0;b=u;u=u+16|0;Ja[a&3]();Ac(4459,b)}function Kc(a){a=a|0;if(!a)a=0;else a=(pb(a,32,88,0)|0)!=0;return a&1|0}function Lc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Ea[a&7](b|0,c|0,d|0)|0}function Mc(a,b){a=a|0;b=b|0;var c=0;c=Ob(a)|0;return ((bc(a,1,c,b)|0)!=(c|0))<<31>>31|0}function Nc(a,b,c){a=a|0;b=b|0;c=c|0;if(!(f[a>>2]&32))zb(b,c,a)|0;return}function Oc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Ia[a&0](b|0,c|0,d|0)}function Pc(a){a=a|0;var b=0;b=u;u=u+a|0;u=u+15&-16;return b|0}function Qc(a){a=a|0;var b=0;b=(ld()|0)+188|0;return Qb(a,f[b>>2]|0)|0}function Rc(a,b){a=a|0;b=b|0;if(!a)a=0;else a=Ab(a,b,0)|0;return a|0}function Sc(a,b,c){a=a|0;b=b|0;c=c|0;return (a|0)==(b|0)|0}function Tc(a,b){a=a|0;b=b|0;var c=0;c=Vc(a|0)|0;return ((b|0)==0?a:c)|0}function Uc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Za(a,b,c,d,0)|0}function Vc(a){a=a|0;return (a&255)<<24|(a>>8&255)<<16|(a>>16&255)<<8|a>>>24|0}function Wc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;$(6)}function Xc(a,b){a=a|0;b=b|0;if(!x){x=a;y=b}}function Yc(a,b,c){a=a|0;b=b|0;c=c|0;return Fb(a,2147483647,b,c)|0}function Zc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;$(1)}function _c(a){a=a|0;sd(a);nd(a);return}function $c(){var a=0;a=f[182]|0;f[182]=a+0;return a|0}function ad(a){a=a|0;ta(a|0)|0;fc()}function bd(a,b){a=a|0;b=b|0;return Ha[a&1](b|0)|0}function cd(a,b){a=a|0;b=b|0;u=a;v=b}function dd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;$(7)}function ed(a,b){a=a|0;b=b|0;return Dc(a,b)|0}function fd(a,b){a=a|0;b=b|0;Ga[a&7](b|0)}function gd(a,b,c){a=a|0;b=b|0;c=c|0;$(0);return 0}function hd(a,b){a=+a;b=b|0;return +(+Pb(a,b))}function id(a,b,c){a=a|0;b=b|0;c=c|0;$(4)}function jd(){return (ld()|0)+64|0}function kd(a){a=a|0;Ja[a&3]()}function ld(){return xd()|0}function md(a){a=a|0;u=a}function nd(a){a=a|0;Ta(a);return}function od(a){a=a|0;I=a}function pd(a){a=a|0;return a|0}function qd(){return 5072}function rd(a){a=a|0;$(3);return 0}function sd(a){a=a|0;return}function td(a){a=a|0;return 0}function ud(){return I|0}function vd(){return u|0}function wd(a){a=a|0;$(2)}function xd(){return 232}function yd(){$(5)}\r\n\r\n// EMSCRIPTEN_END_FUNCS\r\nvar Ea=[gd,mb,Yb,$b,lc,Kb,gd,gd];var Fa=[Zc,Hb,nb,Zc];var Ga=[wd,sd,_c,sd,sd,_c,tc,wd];var Ha=[rd,sc];var Ia=[id];var Ja=[yd,Bb,xc,yd];var Ka=[Wc,cc,Vb,Wc];var La=[dd,dc,Xb,dd];return{stackSave:vd,_i64Subtract:Cc,_crn_get_bytes_per_block:ib,setThrew:Xc,dynCall_viii:Oc,_bitshift64Lshr:zc,_bitshift64Shl:yc,dynCall_viiii:Hc,setTempRet0:od,_crn_decompress:$a,_memset:Ib,_sbrk:ac,_memcpy:kb,stackAlloc:Pc,_crn_get_height:pc,dynCall_vi:fd,getTempRet0:ud,_crn_get_levels:oc,_crn_get_uncompressed_size:hb,_i64Add:Gc,dynCall_iiii:Lc,_emscripten_get_global_libc:qd,dynCall_ii:bd,___udivdi3:Uc,_llvm_bswap_i32:Vc,dynCall_viiiii:Ec,___cxa_can_catch:hc,_free:Ta,runPostSets:Bc,dynCall_viiiiii:wc,establishStackSpace:cd,___uremdi3:mc,___cxa_is_pointer_type:Kc,stackRestore:md,_malloc:Ma,_emscripten_replace_memory:Da,dynCall_v:kd,_crn_get_width:qc,_crn_get_dxt_format:nc}})\r\n\r\n\r\n// EMSCRIPTEN_END_ASM\r\n(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var stackSave=Module[\"stackSave\"]=asm[\"stackSave\"];var getTempRet0=Module[\"getTempRet0\"]=asm[\"getTempRet0\"];var _memset=Module[\"_memset\"]=asm[\"_memset\"];var setThrew=Module[\"setThrew\"]=asm[\"setThrew\"];var _bitshift64Lshr=Module[\"_bitshift64Lshr\"]=asm[\"_bitshift64Lshr\"];var _bitshift64Shl=Module[\"_bitshift64Shl\"]=asm[\"_bitshift64Shl\"];var setTempRet0=Module[\"setTempRet0\"]=asm[\"setTempRet0\"];var _crn_decompress=Module[\"_crn_decompress\"]=asm[\"_crn_decompress\"];var _crn_get_bytes_per_block=Module[\"_crn_get_bytes_per_block\"]=asm[\"_crn_get_bytes_per_block\"];var _sbrk=Module[\"_sbrk\"]=asm[\"_sbrk\"];var _memcpy=Module[\"_memcpy\"]=asm[\"_memcpy\"];var stackAlloc=Module[\"stackAlloc\"]=asm[\"stackAlloc\"];var _crn_get_height=Module[\"_crn_get_height\"]=asm[\"_crn_get_height\"];var _i64Subtract=Module[\"_i64Subtract\"]=asm[\"_i64Subtract\"];var _crn_get_levels=Module[\"_crn_get_levels\"]=asm[\"_crn_get_levels\"];var _crn_get_uncompressed_size=Module[\"_crn_get_uncompressed_size\"]=asm[\"_crn_get_uncompressed_size\"];var _i64Add=Module[\"_i64Add\"]=asm[\"_i64Add\"];var _emscripten_get_global_libc=Module[\"_emscripten_get_global_libc\"]=asm[\"_emscripten_get_global_libc\"];var ___udivdi3=Module[\"___udivdi3\"]=asm[\"___udivdi3\"];var _llvm_bswap_i32=Module[\"_llvm_bswap_i32\"]=asm[\"_llvm_bswap_i32\"];var ___cxa_can_catch=Module[\"___cxa_can_catch\"]=asm[\"___cxa_can_catch\"];var _free=Module[\"_free\"]=asm[\"_free\"];var runPostSets=Module[\"runPostSets\"]=asm[\"runPostSets\"];var establishStackSpace=Module[\"establishStackSpace\"]=asm[\"establishStackSpace\"];var ___uremdi3=Module[\"___uremdi3\"]=asm[\"___uremdi3\"];var ___cxa_is_pointer_type=Module[\"___cxa_is_pointer_type\"]=asm[\"___cxa_is_pointer_type\"];var stackRestore=Module[\"stackRestore\"]=asm[\"stackRestore\"];var _malloc=Module[\"_malloc\"]=asm[\"_malloc\"];var _emscripten_replace_memory=Module[\"_emscripten_replace_memory\"]=asm[\"_emscripten_replace_memory\"];var _crn_get_width=Module[\"_crn_get_width\"]=asm[\"_crn_get_width\"];var _crn_get_dxt_format=Module[\"_crn_get_dxt_format\"]=asm[\"_crn_get_dxt_format\"];var dynCall_iiii=Module[\"dynCall_iiii\"]=asm[\"dynCall_iiii\"];var dynCall_viiiii=Module[\"dynCall_viiiii\"]=asm[\"dynCall_viiiii\"];var dynCall_vi=Module[\"dynCall_vi\"]=asm[\"dynCall_vi\"];var dynCall_ii=Module[\"dynCall_ii\"]=asm[\"dynCall_ii\"];var dynCall_viii=Module[\"dynCall_viii\"]=asm[\"dynCall_viii\"];var dynCall_v=Module[\"dynCall_v\"]=asm[\"dynCall_v\"];var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=asm[\"dynCall_viiiiii\"];var dynCall_viiii=Module[\"dynCall_viiii\"]=asm[\"dynCall_viiii\"];Runtime.stackAlloc=Module[\"stackAlloc\"];Runtime.stackSave=Module[\"stackSave\"];Runtime.stackRestore=Module[\"stackRestore\"];Runtime.establishStackSpace=Module[\"establishStackSpace\"];Runtime.setTempRet0=Module[\"setTempRet0\"];Runtime.getTempRet0=Module[\"getTempRet0\"];Module[\"asm\"]=asm;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module[\"calledRun\"])run();if(!Module[\"calledRun\"])dependenciesFulfilled=runCaller};Module[\"callMain\"]=Module.callMain=function callMain(args){args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module[\"thisProgram\"]),\"i8\",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),\"i8\",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,\"i32\",ALLOC_NORMAL);try{var ret=Module[\"_main\"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e==\"SimulateInfiniteLoop\"){Module[\"noExitRuntime\"]=true;return}else{var toLog=e;if(e&&typeof e===\"object\"&&e.stack){toLog=[e,e.stack]}Module.printErr(\"exception thrown: \"+toLog);Module[\"quit\"](1,e)}}finally{calledMain=true}};function run(args){args=args||Module[\"arguments\"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module[\"calledRun\"])return;function doRun(){if(Module[\"calledRun\"])return;Module[\"calledRun\"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();if(Module[\"_main\"]&&shouldRunNow)Module[\"callMain\"](args);postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout((function(){setTimeout((function(){Module[\"setStatus\"](\"\")}),1);doRun()}),1)}else{doRun()}}Module[\"run\"]=Module.run=run;function exit(status,implicit){if(implicit&&Module[\"noExitRuntime\"]){return}if(Module[\"noExitRuntime\"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module[\"onExit\"])Module[\"onExit\"](status)}if(ENVIRONMENT_IS_NODE){process[\"exit\"](status)}Module[\"quit\"](status,new ExitStatus(status))}Module[\"exit\"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=\"\"}ABORT=true;EXITSTATUS=1;var extra=\"\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.\";var output=\"abort(\"+what+\") at \"+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module[\"abort\"]=Module.abort=abort;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}var shouldRunNow=true;if(Module[\"noInitialRun\"]){shouldRunNow=false}Module[\"noExitRuntime\"]=true;run()\r\n\r\n    return Module;\r\n});\r\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/crunch.js\n// module id = 319\n// module chunks = 0","/*global self:true*/\r\n// make sure self is defined so that the Dojo build can evaluate this file without crashing.\r\nif (typeof self === 'undefined') {\r\n    self = {};\r\n}\r\n\r\nself.onmessage = function(event) {\r\n    'use strict';\r\n    var array = event.data.array;\r\n    var postMessage = self.webkitPostMessage || self.postMessage;\r\n\r\n    try {\r\n        // transfer the test array back to the caller\r\n        postMessage({\r\n            array : array\r\n        }, [array.buffer]);\r\n    } catch (e) {\r\n        postMessage({});\r\n    }\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/transferTypedArrayTest.js\n// module id = 320\n// module chunks = 0","define([\r\n        '../Core/AttributeCompression',\r\n        '../Core/BoundingSphere',\r\n        '../Core/Cartesian2',\r\n        '../Core/Cartesian3',\r\n        '../Core/Cartographic',\r\n        '../Core/defined',\r\n        '../Core/Ellipsoid',\r\n        '../Core/EllipsoidalOccluder',\r\n        '../Core/IndexDatatype',\r\n        '../Core/Intersections2D',\r\n        '../Core/Math',\r\n        '../Core/OrientedBoundingBox',\r\n        '../Core/TerrainEncoding',\r\n        './createTaskProcessorWorker'\r\n    ], function(\r\n        AttributeCompression,\r\n        BoundingSphere,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        defined,\r\n        Ellipsoid,\r\n        EllipsoidalOccluder,\r\n        IndexDatatype,\r\n        Intersections2D,\r\n        CesiumMath,\r\n        OrientedBoundingBox,\r\n        TerrainEncoding,\r\n        createTaskProcessorWorker) {\r\n    'use strict';\r\n\r\n    var maxShort = 32767;\r\n    var halfMaxShort = (maxShort / 2) | 0;\r\n\r\n    var clipScratch = [];\r\n    var clipScratch2 = [];\r\n    var verticesScratch = [];\r\n    var cartographicScratch = new Cartographic();\r\n    var cartesian3Scratch = new Cartesian3();\r\n    var uScratch = [];\r\n    var vScratch = [];\r\n    var heightScratch = [];\r\n    var indicesScratch = [];\r\n    var normalsScratch = [];\r\n    var horizonOcclusionPointScratch = new Cartesian3();\r\n    var boundingSphereScratch = new BoundingSphere();\r\n    var orientedBoundingBoxScratch = new OrientedBoundingBox();\r\n    var decodeTexCoordsScratch = new Cartesian2();\r\n    var octEncodedNormalScratch = new Cartesian3();\r\n\r\n    function upsampleQuantizedTerrainMesh(parameters, transferableObjects) {\r\n        var isEastChild = parameters.isEastChild;\r\n        var isNorthChild = parameters.isNorthChild;\r\n\r\n        var minU = isEastChild ? halfMaxShort : 0;\r\n        var maxU = isEastChild ? maxShort : halfMaxShort;\r\n        var minV = isNorthChild ? halfMaxShort : 0;\r\n        var maxV = isNorthChild ? maxShort : halfMaxShort;\r\n\r\n        var uBuffer = uScratch;\r\n        var vBuffer = vScratch;\r\n        var heightBuffer = heightScratch;\r\n        var normalBuffer = normalsScratch;\r\n\r\n        uBuffer.length = 0;\r\n        vBuffer.length = 0;\r\n        heightBuffer.length = 0;\r\n        normalBuffer.length = 0;\r\n\r\n        var indices = indicesScratch;\r\n        indices.length = 0;\r\n\r\n        var vertexMap = {};\r\n\r\n        var parentVertices = parameters.vertices;\r\n        var parentIndices = parameters.indices;\r\n        parentIndices = parentIndices.subarray(0, parameters.skirtIndex);\r\n\r\n        var encoding = TerrainEncoding.clone(parameters.encoding);\r\n        var hasVertexNormals = encoding.hasVertexNormals;\r\n        var exaggeration = parameters.exaggeration;\r\n\r\n        var vertexCount = 0;\r\n        var quantizedVertexCount = parameters.vertexCountWithoutSkirts;\r\n\r\n        var parentMinimumHeight = parameters.minimumHeight;\r\n        var parentMaximumHeight = parameters.maximumHeight;\r\n\r\n        var parentUBuffer = new Array(quantizedVertexCount);\r\n        var parentVBuffer = new Array(quantizedVertexCount);\r\n        var parentHeightBuffer = new Array(quantizedVertexCount);\r\n        var parentNormalBuffer = hasVertexNormals ? new Array(quantizedVertexCount * 2) : undefined;\r\n\r\n        var threshold = 20;\r\n        var height;\r\n\r\n        var i, n;\r\n        for (i = 0, n = 0; i < quantizedVertexCount; ++i, n += 2) {\r\n            var texCoords = encoding.decodeTextureCoordinates(parentVertices, i, decodeTexCoordsScratch);\r\n            height  = encoding.decodeHeight(parentVertices, i) / exaggeration;\r\n\r\n            parentUBuffer[i] = CesiumMath.clamp((texCoords.x * maxShort) | 0, 0, maxShort);\r\n            parentVBuffer[i] = CesiumMath.clamp((texCoords.y * maxShort) | 0, 0, maxShort);\r\n            parentHeightBuffer[i] = CesiumMath.clamp((((height - parentMinimumHeight) / (parentMaximumHeight - parentMinimumHeight)) * maxShort) | 0, 0, maxShort);\r\n\r\n            if (parentUBuffer[i] < threshold) {\r\n                parentUBuffer[i] = 0;\r\n            }\r\n\r\n            if (parentVBuffer[i] < threshold) {\r\n                parentVBuffer[i] = 0;\r\n            }\r\n\r\n            if (maxShort - parentUBuffer[i] < threshold) {\r\n                parentUBuffer[i] = maxShort;\r\n            }\r\n\r\n            if (maxShort - parentVBuffer[i] < threshold) {\r\n                parentVBuffer[i] = maxShort;\r\n            }\r\n\r\n            if (hasVertexNormals) {\r\n                var encodedNormal = encoding.getOctEncodedNormal(parentVertices, i, octEncodedNormalScratch);\r\n                parentNormalBuffer[n] = encodedNormal.x;\r\n                parentNormalBuffer[n + 1] = encodedNormal.y;\r\n            }\r\n        }\r\n\r\n        var u, v;\r\n        for (i = 0, n = 0; i < quantizedVertexCount; ++i, n += 2) {\r\n            u = parentUBuffer[i];\r\n            v = parentVBuffer[i];\r\n            if ((isEastChild && u >= halfMaxShort || !isEastChild && u <= halfMaxShort) &&\r\n                (isNorthChild && v >= halfMaxShort || !isNorthChild && v <= halfMaxShort)) {\r\n\r\n                vertexMap[i] = vertexCount;\r\n                uBuffer.push(u);\r\n                vBuffer.push(v);\r\n                heightBuffer.push(parentHeightBuffer[i]);\r\n                if (hasVertexNormals) {\r\n                    normalBuffer.push(parentNormalBuffer[n]);\r\n                    normalBuffer.push(parentNormalBuffer[n + 1]);\r\n                }\r\n\r\n                ++vertexCount;\r\n            }\r\n        }\r\n\r\n        var triangleVertices = [];\r\n        triangleVertices.push(new Vertex());\r\n        triangleVertices.push(new Vertex());\r\n        triangleVertices.push(new Vertex());\r\n\r\n        var clippedTriangleVertices = [];\r\n        clippedTriangleVertices.push(new Vertex());\r\n        clippedTriangleVertices.push(new Vertex());\r\n        clippedTriangleVertices.push(new Vertex());\r\n\r\n        var clippedIndex;\r\n        var clipped2;\r\n\r\n        for (i = 0; i < parentIndices.length; i += 3) {\r\n            var i0 = parentIndices[i];\r\n            var i1 = parentIndices[i + 1];\r\n            var i2 = parentIndices[i + 2];\r\n\r\n            var u0 = parentUBuffer[i0];\r\n            var u1 = parentUBuffer[i1];\r\n            var u2 = parentUBuffer[i2];\r\n\r\n            triangleVertices[0].initializeIndexed(parentUBuffer, parentVBuffer, parentHeightBuffer, parentNormalBuffer, i0);\r\n            triangleVertices[1].initializeIndexed(parentUBuffer, parentVBuffer, parentHeightBuffer, parentNormalBuffer, i1);\r\n            triangleVertices[2].initializeIndexed(parentUBuffer, parentVBuffer, parentHeightBuffer, parentNormalBuffer, i2);\r\n\r\n            // Clip triangle on the east-west boundary.\r\n            var clipped = Intersections2D.clipTriangleAtAxisAlignedThreshold(halfMaxShort, isEastChild, u0, u1, u2, clipScratch);\r\n\r\n            // Get the first clipped triangle, if any.\r\n            clippedIndex = 0;\r\n\r\n            if (clippedIndex >= clipped.length) {\r\n                continue;\r\n            }\r\n            clippedIndex = clippedTriangleVertices[0].initializeFromClipResult(clipped, clippedIndex, triangleVertices);\r\n\r\n            if (clippedIndex >= clipped.length) {\r\n                continue;\r\n            }\r\n            clippedIndex = clippedTriangleVertices[1].initializeFromClipResult(clipped, clippedIndex, triangleVertices);\r\n\r\n            if (clippedIndex >= clipped.length) {\r\n                continue;\r\n            }\r\n            clippedIndex = clippedTriangleVertices[2].initializeFromClipResult(clipped, clippedIndex, triangleVertices);\r\n\r\n            // Clip the triangle against the North-south boundary.\r\n            clipped2 = Intersections2D.clipTriangleAtAxisAlignedThreshold(halfMaxShort, isNorthChild, clippedTriangleVertices[0].getV(), clippedTriangleVertices[1].getV(), clippedTriangleVertices[2].getV(), clipScratch2);\r\n            addClippedPolygon(uBuffer, vBuffer, heightBuffer, normalBuffer, indices, vertexMap, clipped2, clippedTriangleVertices, hasVertexNormals);\r\n\r\n            // If there's another vertex in the original clipped result,\r\n            // it forms a second triangle.  Clip it as well.\r\n            if (clippedIndex < clipped.length) {\r\n                clippedTriangleVertices[2].clone(clippedTriangleVertices[1]);\r\n                clippedTriangleVertices[2].initializeFromClipResult(clipped, clippedIndex, triangleVertices);\r\n\r\n                clipped2 = Intersections2D.clipTriangleAtAxisAlignedThreshold(halfMaxShort, isNorthChild, clippedTriangleVertices[0].getV(), clippedTriangleVertices[1].getV(), clippedTriangleVertices[2].getV(), clipScratch2);\r\n                addClippedPolygon(uBuffer, vBuffer, heightBuffer, normalBuffer, indices, vertexMap, clipped2, clippedTriangleVertices, hasVertexNormals);\r\n            }\r\n        }\r\n\r\n        var uOffset = isEastChild ? -maxShort : 0;\r\n        var vOffset = isNorthChild ? -maxShort : 0;\r\n\r\n        var westIndices = [];\r\n        var southIndices = [];\r\n        var eastIndices = [];\r\n        var northIndices = [];\r\n\r\n        var minimumHeight = Number.MAX_VALUE;\r\n        var maximumHeight = -minimumHeight;\r\n\r\n        var cartesianVertices = verticesScratch;\r\n        cartesianVertices.length = 0;\r\n\r\n        var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n        var rectangle = parameters.childRectangle;\r\n\r\n        var north = rectangle.north;\r\n        var south = rectangle.south;\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        for (i = 0; i < uBuffer.length; ++i) {\r\n            u = Math.round(uBuffer[i]);\r\n            if (u <= minU) {\r\n                westIndices.push(i);\r\n                u = 0;\r\n            } else if (u >= maxU) {\r\n                eastIndices.push(i);\r\n                u = maxShort;\r\n            } else {\r\n                u = u * 2 + uOffset;\r\n            }\r\n\r\n            uBuffer[i] = u;\r\n\r\n            v = Math.round(vBuffer[i]);\r\n            if (v <= minV) {\r\n                southIndices.push(i);\r\n                v = 0;\r\n            } else if (v >= maxV) {\r\n                northIndices.push(i);\r\n                v = maxShort;\r\n            } else {\r\n                v = v * 2 + vOffset;\r\n            }\r\n\r\n            vBuffer[i] = v;\r\n\r\n            height = CesiumMath.lerp(parentMinimumHeight, parentMaximumHeight, heightBuffer[i] / maxShort);\r\n            if (height < minimumHeight) {\r\n                minimumHeight = height;\r\n            }\r\n            if (height > maximumHeight) {\r\n                maximumHeight = height;\r\n            }\r\n\r\n            heightBuffer[i] = height;\r\n\r\n            cartographicScratch.longitude = CesiumMath.lerp(west, east, u / maxShort);\r\n            cartographicScratch.latitude = CesiumMath.lerp(south, north, v / maxShort);\r\n            cartographicScratch.height = height;\r\n\r\n            ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n\r\n            cartesianVertices.push(cartesian3Scratch.x);\r\n            cartesianVertices.push(cartesian3Scratch.y);\r\n            cartesianVertices.push(cartesian3Scratch.z);\r\n        }\r\n\r\n        var boundingSphere = BoundingSphere.fromVertices(cartesianVertices, Cartesian3.ZERO, 3, boundingSphereScratch);\r\n        var orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, ellipsoid, orientedBoundingBoxScratch);\r\n\r\n        var occluder = new EllipsoidalOccluder(ellipsoid);\r\n        var horizonOcclusionPoint = occluder.computeHorizonCullingPointFromVertices(boundingSphere.center, cartesianVertices, 3, boundingSphere.center, horizonOcclusionPointScratch);\r\n\r\n        var heightRange = maximumHeight - minimumHeight;\r\n\r\n        var vertices = new Uint16Array(uBuffer.length + vBuffer.length + heightBuffer.length);\r\n\r\n        for (i = 0; i < uBuffer.length; ++i) {\r\n            vertices[i] = uBuffer[i];\r\n        }\r\n\r\n        var start = uBuffer.length;\r\n\r\n        for (i = 0; i < vBuffer.length; ++i) {\r\n            vertices[start + i] = vBuffer[i];\r\n        }\r\n\r\n        start += vBuffer.length;\r\n\r\n        for (i = 0; i < heightBuffer.length; ++i) {\r\n            vertices[start + i] = maxShort * (heightBuffer[i] - minimumHeight) / heightRange;\r\n        }\r\n\r\n        var indicesTypedArray = IndexDatatype.createTypedArray(uBuffer.length, indices);\r\n\r\n        var encodedNormals;\r\n        if (hasVertexNormals) {\r\n            var normalArray = new Uint8Array(normalBuffer);\r\n            transferableObjects.push(vertices.buffer, indicesTypedArray.buffer, normalArray.buffer);\r\n            encodedNormals = normalArray.buffer;\r\n        } else {\r\n            transferableObjects.push(vertices.buffer, indicesTypedArray.buffer);\r\n        }\r\n\r\n        return {\r\n            vertices : vertices.buffer,\r\n            encodedNormals : encodedNormals,\r\n            indices : indicesTypedArray.buffer,\r\n            minimumHeight : minimumHeight,\r\n            maximumHeight : maximumHeight,\r\n            westIndices : westIndices,\r\n            southIndices : southIndices,\r\n            eastIndices : eastIndices,\r\n            northIndices : northIndices,\r\n            boundingSphere : boundingSphere,\r\n            orientedBoundingBox : orientedBoundingBox,\r\n            horizonOcclusionPoint : horizonOcclusionPoint\r\n        };\r\n    }\r\n\r\n    function Vertex() {\r\n        this.vertexBuffer = undefined;\r\n        this.index = undefined;\r\n        this.first = undefined;\r\n        this.second = undefined;\r\n        this.ratio = undefined;\r\n    }\r\n\r\n    Vertex.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new Vertex();\r\n        }\r\n\r\n        result.uBuffer = this.uBuffer;\r\n        result.vBuffer = this.vBuffer;\r\n        result.heightBuffer = this.heightBuffer;\r\n        result.normalBuffer = this.normalBuffer;\r\n        result.index = this.index;\r\n        result.first = this.first;\r\n        result.second = this.second;\r\n        result.ratio = this.ratio;\r\n\r\n        return result;\r\n    };\r\n\r\n    Vertex.prototype.initializeIndexed = function(uBuffer, vBuffer, heightBuffer, normalBuffer, index) {\r\n        this.uBuffer = uBuffer;\r\n        this.vBuffer = vBuffer;\r\n        this.heightBuffer = heightBuffer;\r\n        this.normalBuffer = normalBuffer;\r\n        this.index = index;\r\n        this.first = undefined;\r\n        this.second = undefined;\r\n        this.ratio = undefined;\r\n    };\r\n\r\n    Vertex.prototype.initializeFromClipResult = function(clipResult, index, vertices) {\r\n        var nextIndex = index + 1;\r\n\r\n        if (clipResult[index] !== -1) {\r\n            vertices[clipResult[index]].clone(this);\r\n        } else {\r\n            this.vertexBuffer = undefined;\r\n            this.index = undefined;\r\n            this.first = vertices[clipResult[nextIndex]];\r\n            ++nextIndex;\r\n            this.second = vertices[clipResult[nextIndex]];\r\n            ++nextIndex;\r\n            this.ratio = clipResult[nextIndex];\r\n            ++nextIndex;\r\n        }\r\n\r\n        return nextIndex;\r\n    };\r\n\r\n    Vertex.prototype.getKey = function() {\r\n        if (this.isIndexed()) {\r\n            return this.index;\r\n        }\r\n        return JSON.stringify({\r\n            first : this.first.getKey(),\r\n            second : this.second.getKey(),\r\n            ratio : this.ratio\r\n        });\r\n    };\r\n\r\n    Vertex.prototype.isIndexed = function() {\r\n        return defined(this.index);\r\n    };\r\n\r\n    Vertex.prototype.getH = function() {\r\n        if (defined(this.index)) {\r\n            return this.heightBuffer[this.index];\r\n        }\r\n        return CesiumMath.lerp(this.first.getH(), this.second.getH(), this.ratio);\r\n    };\r\n\r\n    Vertex.prototype.getU = function() {\r\n        if (defined(this.index)) {\r\n            return this.uBuffer[this.index];\r\n        }\r\n        return CesiumMath.lerp(this.first.getU(), this.second.getU(), this.ratio);\r\n    };\r\n\r\n    Vertex.prototype.getV = function() {\r\n        if (defined(this.index)) {\r\n            return this.vBuffer[this.index];\r\n        }\r\n        return CesiumMath.lerp(this.first.getV(), this.second.getV(), this.ratio);\r\n    };\r\n\r\n    var encodedScratch = new Cartesian2();\r\n    // An upsampled triangle may be clipped twice before it is assigned an index\r\n    // In this case, we need a buffer to handle the recursion of getNormalX() and getNormalY().\r\n    var depth = -1;\r\n    var cartesianScratch1 = [new Cartesian3(), new Cartesian3()];\r\n    var cartesianScratch2 = [new Cartesian3(), new Cartesian3()];\r\n    function lerpOctEncodedNormal(vertex, result) {\r\n        ++depth;\r\n\r\n        var first = cartesianScratch1[depth];\r\n        var second = cartesianScratch2[depth];\r\n\r\n        first = AttributeCompression.octDecode(vertex.first.getNormalX(), vertex.first.getNormalY(), first);\r\n        second = AttributeCompression.octDecode(vertex.second.getNormalX(), vertex.second.getNormalY(), second);\r\n        cartesian3Scratch = Cartesian3.lerp(first, second, vertex.ratio, cartesian3Scratch);\r\n        Cartesian3.normalize(cartesian3Scratch, cartesian3Scratch);\r\n\r\n        AttributeCompression.octEncode(cartesian3Scratch, result);\r\n\r\n        --depth;\r\n\r\n        return result;\r\n    }\r\n\r\n    Vertex.prototype.getNormalX = function() {\r\n        if (defined(this.index)) {\r\n            return this.normalBuffer[this.index * 2];\r\n        }\r\n\r\n        encodedScratch = lerpOctEncodedNormal(this, encodedScratch);\r\n        return encodedScratch.x;\r\n    };\r\n\r\n    Vertex.prototype.getNormalY = function() {\r\n        if (defined(this.index)) {\r\n            return this.normalBuffer[this.index * 2 + 1];\r\n        }\r\n\r\n        encodedScratch = lerpOctEncodedNormal(this, encodedScratch);\r\n        return encodedScratch.y;\r\n    };\r\n\r\n    var polygonVertices = [];\r\n    polygonVertices.push(new Vertex());\r\n    polygonVertices.push(new Vertex());\r\n    polygonVertices.push(new Vertex());\r\n    polygonVertices.push(new Vertex());\r\n\r\n    function addClippedPolygon(uBuffer, vBuffer, heightBuffer, normalBuffer, indices, vertexMap, clipped, triangleVertices, hasVertexNormals) {\r\n        if (clipped.length === 0) {\r\n            return;\r\n        }\r\n\r\n        var numVertices = 0;\r\n        var clippedIndex = 0;\r\n        while (clippedIndex < clipped.length) {\r\n            clippedIndex = polygonVertices[numVertices++].initializeFromClipResult(clipped, clippedIndex, triangleVertices);\r\n        }\r\n\r\n        for (var i = 0; i < numVertices; ++i) {\r\n            var polygonVertex = polygonVertices[i];\r\n            if (!polygonVertex.isIndexed()) {\r\n                var key = polygonVertex.getKey();\r\n                if (defined(vertexMap[key])) {\r\n                    polygonVertex.newIndex = vertexMap[key];\r\n                } else {\r\n                    var newIndex = uBuffer.length;\r\n                    uBuffer.push(polygonVertex.getU());\r\n                    vBuffer.push(polygonVertex.getV());\r\n                    heightBuffer.push(polygonVertex.getH());\r\n                    if (hasVertexNormals) {\r\n                        normalBuffer.push(polygonVertex.getNormalX());\r\n                        normalBuffer.push(polygonVertex.getNormalY());\r\n                    }\r\n                    polygonVertex.newIndex = newIndex;\r\n                    vertexMap[key] = newIndex;\r\n                }\r\n            } else {\r\n                polygonVertex.newIndex = vertexMap[polygonVertex.index];\r\n                polygonVertex.uBuffer = uBuffer;\r\n                polygonVertex.vBuffer = vBuffer;\r\n                polygonVertex.heightBuffer = heightBuffer;\r\n                if (hasVertexNormals) {\r\n                    polygonVertex.normalBuffer = normalBuffer;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (numVertices === 3) {\r\n            // A triangle.\r\n            indices.push(polygonVertices[0].newIndex);\r\n            indices.push(polygonVertices[1].newIndex);\r\n            indices.push(polygonVertices[2].newIndex);\r\n        } else if (numVertices === 4) {\r\n            // A quad - two triangles.\r\n            indices.push(polygonVertices[0].newIndex);\r\n            indices.push(polygonVertices[1].newIndex);\r\n            indices.push(polygonVertices[2].newIndex);\r\n\r\n            indices.push(polygonVertices[0].newIndex);\r\n            indices.push(polygonVertices[2].newIndex);\r\n            indices.push(polygonVertices[3].newIndex);\r\n        }\r\n    }\r\n\r\n    return createTaskProcessorWorker(upsampleQuantizedTerrainMesh);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Workers/upsampleQuantizedTerrainMesh.js\n// module id = 321\n// module chunks = 0","define([\r\n        './Cartesian3',\r\n        './defined',\r\n        './DeveloperError'\r\n    ], function(\r\n        Cartesian3,\r\n        defined,\r\n        DeveloperError) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Contains functions for operating on 2D triangles.\r\n     *\r\n     * @exports Intersections2D\r\n     */\r\n    var Intersections2D = {};\r\n\r\n    /**\r\n     * Splits a 2D triangle at given axis-aligned threshold value and returns the resulting\r\n     * polygon on a given side of the threshold.  The resulting polygon may have 0, 1, 2,\r\n     * 3, or 4 vertices.\r\n     *\r\n     * @param {Number} threshold The threshold coordinate value at which to clip the triangle.\r\n     * @param {Boolean} keepAbove true to keep the portion of the triangle above the threshold, or false\r\n     *                            to keep the portion below.\r\n     * @param {Number} u0 The coordinate of the first vertex in the triangle, in counter-clockwise order.\r\n     * @param {Number} u1 The coordinate of the second vertex in the triangle, in counter-clockwise order.\r\n     * @param {Number} u2 The coordinate of the third vertex in the triangle, in counter-clockwise order.\r\n     * @param {Number[]} [result] The array into which to copy the result.  If this parameter is not supplied,\r\n     *                            a new array is constructed and returned.\r\n     * @returns {Number[]} The polygon that results after the clip, specified as a list of\r\n     *                     vertices.  The vertices are specified in counter-clockwise order.\r\n     *                     Each vertex is either an index from the existing list (identified as\r\n     *                     a 0, 1, or 2) or -1 indicating a new vertex not in the original triangle.\r\n     *                     For new vertices, the -1 is followed by three additional numbers: the\r\n     *                     index of each of the two original vertices forming the line segment that\r\n     *                     the new vertex lies on, and the fraction of the distance from the first\r\n     *                     vertex to the second one.\r\n     *\r\n     * @example\r\n     * var result = Cesium.Intersections2D.clipTriangleAtAxisAlignedThreshold(0.5, false, 0.2, 0.6, 0.4);\r\n     * // result === [2, 0, -1, 1, 0, 0.25, -1, 1, 2, 0.5]\r\n     */\r\n    Intersections2D.clipTriangleAtAxisAlignedThreshold = function(threshold, keepAbove, u0, u1, u2, result) {\r\n        \r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        } else {\r\n            result.length = 0;\r\n        }\r\n\r\n        var u0Behind;\r\n        var u1Behind;\r\n        var u2Behind;\r\n        if (keepAbove) {\r\n            u0Behind = u0 < threshold;\r\n            u1Behind = u1 < threshold;\r\n            u2Behind = u2 < threshold;\r\n        } else {\r\n            u0Behind = u0 > threshold;\r\n            u1Behind = u1 > threshold;\r\n            u2Behind = u2 > threshold;\r\n        }\r\n\r\n        var numBehind = u0Behind + u1Behind + u2Behind;\r\n\r\n        var u01Ratio;\r\n        var u02Ratio;\r\n        var u12Ratio;\r\n        var u10Ratio;\r\n        var u20Ratio;\r\n        var u21Ratio;\r\n\r\n        if (numBehind === 1) {\r\n            if (u0Behind) {\r\n                u01Ratio = (threshold - u0) / (u1 - u0);\r\n                u02Ratio = (threshold - u0) / (u2 - u0);\r\n\r\n                result.push(1);\r\n\r\n                result.push(2);\r\n\r\n                if (u02Ratio !== 1.0) {\r\n                    result.push(-1);\r\n                    result.push(0);\r\n                    result.push(2);\r\n                    result.push(u02Ratio);\r\n                }\r\n\r\n                if (u01Ratio !== 1.0) {\r\n                    result.push(-1);\r\n                    result.push(0);\r\n                    result.push(1);\r\n                    result.push(u01Ratio);\r\n                }\r\n            } else if (u1Behind) {\r\n                u12Ratio = (threshold - u1) / (u2 - u1);\r\n                u10Ratio = (threshold - u1) / (u0 - u1);\r\n\r\n                result.push(2);\r\n\r\n                result.push(0);\r\n\r\n                if (u10Ratio !== 1.0) {\r\n                    result.push(-1);\r\n                    result.push(1);\r\n                    result.push(0);\r\n                    result.push(u10Ratio);\r\n                }\r\n\r\n                if (u12Ratio !== 1.0) {\r\n                    result.push(-1);\r\n                    result.push(1);\r\n                    result.push(2);\r\n                    result.push(u12Ratio);\r\n                }\r\n            } else if (u2Behind) {\r\n                u20Ratio = (threshold - u2) / (u0 - u2);\r\n                u21Ratio = (threshold - u2) / (u1 - u2);\r\n\r\n                result.push(0);\r\n\r\n                result.push(1);\r\n\r\n                if (u21Ratio !== 1.0) {\r\n                    result.push(-1);\r\n                    result.push(2);\r\n                    result.push(1);\r\n                    result.push(u21Ratio);\r\n                }\r\n\r\n                if (u20Ratio !== 1.0) {\r\n                    result.push(-1);\r\n                    result.push(2);\r\n                    result.push(0);\r\n                    result.push(u20Ratio);\r\n                }\r\n            }\r\n        } else if (numBehind === 2) {\r\n            if (!u0Behind && u0 !== threshold) {\r\n                u10Ratio = (threshold - u1) / (u0 - u1);\r\n                u20Ratio = (threshold - u2) / (u0 - u2);\r\n\r\n                result.push(0);\r\n\r\n                result.push(-1);\r\n                result.push(1);\r\n                result.push(0);\r\n                result.push(u10Ratio);\r\n\r\n                result.push(-1);\r\n                result.push(2);\r\n                result.push(0);\r\n                result.push(u20Ratio);\r\n            } else if (!u1Behind && u1 !== threshold) {\r\n                u21Ratio = (threshold - u2) / (u1 - u2);\r\n                u01Ratio = (threshold - u0) / (u1 - u0);\r\n\r\n                result.push(1);\r\n\r\n                result.push(-1);\r\n                result.push(2);\r\n                result.push(1);\r\n                result.push(u21Ratio);\r\n\r\n                result.push(-1);\r\n                result.push(0);\r\n                result.push(1);\r\n                result.push(u01Ratio);\r\n            } else if (!u2Behind && u2 !== threshold) {\r\n                u02Ratio = (threshold - u0) / (u2 - u0);\r\n                u12Ratio = (threshold - u1) / (u2 - u1);\r\n\r\n                result.push(2);\r\n\r\n                result.push(-1);\r\n                result.push(0);\r\n                result.push(2);\r\n                result.push(u02Ratio);\r\n\r\n                result.push(-1);\r\n                result.push(1);\r\n                result.push(2);\r\n                result.push(u12Ratio);\r\n            }\r\n        } else if (numBehind !== 3) {\r\n            // Completely in front of threshold\r\n            result.push(0);\r\n            result.push(1);\r\n            result.push(2);\r\n        }\r\n        // else Completely behind threshold\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compute the barycentric coordinates of a 2D position within a 2D triangle.\r\n     *\r\n     * @param {Number} x The x coordinate of the position for which to find the barycentric coordinates.\r\n     * @param {Number} y The y coordinate of the position for which to find the barycentric coordinates.\r\n     * @param {Number} x1 The x coordinate of the triangle's first vertex.\r\n     * @param {Number} y1 The y coordinate of the triangle's first vertex.\r\n     * @param {Number} x2 The x coordinate of the triangle's second vertex.\r\n     * @param {Number} y2 The y coordinate of the triangle's second vertex.\r\n     * @param {Number} x3 The x coordinate of the triangle's third vertex.\r\n     * @param {Number} y3 The y coordinate of the triangle's third vertex.\r\n     * @param {Cartesian3} [result] The instance into to which to copy the result.  If this parameter\r\n     *                     is undefined, a new instance is created and returned.\r\n     * @returns {Cartesian3} The barycentric coordinates of the position within the triangle.\r\n     *\r\n     * @example\r\n     * var result = Cesium.Intersections2D.computeBarycentricCoordinates(0.0, 0.0, 0.0, 1.0, -1, -0.5, 1, -0.5);\r\n     * // result === new Cesium.Cartesian3(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0);\r\n     */\r\n    Intersections2D.computeBarycentricCoordinates = function(x, y, x1, y1, x2, y2, x3, y3, result) {\r\n        \r\n\r\n        var x1mx3 = x1 - x3;\r\n        var x3mx2 = x3 - x2;\r\n        var y2my3 = y2 - y3;\r\n        var y1my3 = y1 - y3;\r\n        var inverseDeterminant = 1.0 / (y2my3 * x1mx3 + x3mx2 * y1my3);\r\n        var ymy3 = y - y3;\r\n        var xmx3 = x - x3;\r\n        var l1 = (y2my3 * xmx3 + x3mx2 * ymy3) * inverseDeterminant;\r\n        var l2 = (-y1my3 * xmx3 + x1mx3 * ymy3) * inverseDeterminant;\r\n        var l3 = 1.0 - l1 - l2;\r\n\r\n        if (defined(result)) {\r\n            result.x = l1;\r\n            result.y = l2;\r\n            result.z = l3;\r\n            return result;\r\n        }\r\n        return new Cartesian3(l1, l2, l3);\r\n    };\r\n\r\n    return Intersections2D;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Intersections2D.js\n// module id = 322\n// module chunks = 0"],"sourceRoot":""}