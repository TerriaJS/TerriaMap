{"version":3,"sources":["webpack:///./node_modules/terriajs-cesium/Source/DataSources/CompositeProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CompositePositionProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PositionPropertyArray.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/ReferenceProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StripeOrientation.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/VelocityVectorProperty.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CornerType.js","webpack:///./node_modules/terriajs-cesium/Source/Core/HermitePolynomialApproximation.js","webpack:///./node_modules/terriajs-cesium/Source/Core/LagrangePolynomialApproximation.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Spherical.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ColorBlendMode.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CompositeMaterialProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/GridMaterialProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineArrowMaterialProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineDashMaterialProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineOutlineMaterialProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PropertyArray.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/Rotation.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StripeMaterialProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/VelocityOrientationProperty.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/Autolinker.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/KmlCamera.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/KmlLookAt.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/KmlTour.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/KmlTourFlyTo.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/KmlTourWait.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/ScaledPositionProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CzmlDataSource.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/KmlDataSource.js"],"names":[],"mappings":";;;;;gEAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAe,wBAAwB,6BAA6B;AAC9E,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECxJD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,wBAAwB,kBAAkB,uBAAuB;AAC3E;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEChJD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,uBAAuB;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECnLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,uCAAuC;AAClE;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,eAAe;AACzB;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wEAAwE,uBAAuB;AAC/F;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,OAAO;AACtB,iBAAiB,kBAAkB;AACnC;AACA,mBAAmB,eAAe;AAClC;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,wEAAwE,uBAAuB;AAC/F;AACA,eAAe,WAAW;AAC1B,eAAe,eAAe;AAC9B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,eAAe;AAChC,wEAAwE,uBAAuB;AAC/F;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECpVD;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,6BAA6B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC1BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAe,uBAAuB,iBAAiB;AACjE,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC9MD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,iFAAiF;AACjF;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,iFAAiF;AACjF;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC5CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,eAAe;AACtC;AACA,2BAA2B,yCAAyC;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,eAAe;AAClC;AACA,uBAAuB,yCAAyC;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,6BAA6B;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB,mBAAmB,eAAe;AAClC,mBAAmB,eAAe;AAClC;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB,iFAAiF,uBAAuB;AACxG,eAAe,OAAO;AACtB;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,aAAa;AAChC;;AAEA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;;AAEA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;;AAEA;AACA,mBAAmB,aAAa;AAChC,uBAAuB,oBAAoB;AAC3C;AACA;AACA;;AAEA,uBAAuB,oBAAoB;AAC3C;AACA,2BAA2B,wBAAwB;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,UAAU;AACtC,uBAAuB,yBAAyB;AAChD;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB,iFAAiF,uBAAuB;AACxG,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B,2BAA2B,sBAAsB;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,eAAe;AACtC,uBAAuB,yBAAyB;AAChD;AACA;AACA;;AAEA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa;AACpC;;AAEA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;;AAEA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;;AAEA,2BAA2B,wBAAwB;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC5RD;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,6BAA6B;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB,iFAAiF,uBAAuB;AACxG,eAAe,OAAO;AACtB;AACA,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,aAAa;AAChC;AACA;;AAEA,mBAAmB,YAAY;AAC/B;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECtED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,UAAU;AACxB,cAAc,OAAO;AACrB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECxKD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECxCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,wBAAwB,kBAAkB,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,eAAe;AAChC;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC3HD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,uBAAuB,oBAAoB,eAAe;AACpE;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS,6DAA6D,YAAY;AACjG,eAAe,SAAS;AACxB,eAAe,SAAS,6CAA6C,iBAAiB;AACtF,eAAe,SAAS,qDAAqD,iBAAiB;AAC9F,eAAe,SAAS,kDAAkD,iBAAiB;AAC3F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0DAA0D,YAAY;AACtE;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,eAAe;AAChC;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECjLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,uBAAuB,6BAA6B,eAAe;AAC7E;AACA,eAAe,SAAS,0BAA0B,YAAY;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,YAAY,EAAE,eAAe;AAC1D;AACA,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,eAAe;AAChC;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC3GD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,uBAAuB,6BAA6B,eAAe;AAC7E;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS,wDAAwD,YAAY;AAC5F,eAAe,SAAS,iEAAiE,YAAY;AACrG,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qDAAqD,YAAY;AACjE;AACA,kBAAkB;AAClB;AACA;AACA;AACA,qDAAqD,YAAY;AACjE;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,eAAe;AAChC;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC1JD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU,uBAAuB,gCAAgC,eAAe;AAChF;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS,wDAAwD,YAAY;AAC5F,eAAe,SAAS,+DAA+D,YAAY;AACnG,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qDAAqD,YAAY;AACjE;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,qDAAqD,YAAY;AACjE;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,eAAe;AAChC;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC9ID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAe;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECpJD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,eAAe;AACpC;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB,SAAS;AAC9B;AACA;;;AAGA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B,mBAAmB,SAAS;AAC5B,qBAAqB,SAAS;AAC9B;AACA;;;AAGA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,SAAS;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA,gEAAgE,SAAS;AACzE;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,qEAAqE,kDAAkD;AACvH;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,SAAS;AAC5B,qBAAqB,SAAS;AAC9B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEC9HD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,uBAAuB,sBAAsB,eAAe;AACtE;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS,kEAAkE,YAAY;AACtG,eAAe,SAAS,kEAAkE,YAAY;AACtG,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS,+EAA+E,wBAAwB;AAC/H;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qDAAqD,wBAAwB;AAC7E;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,2DAA2D,YAAY;AACvE;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,4DAA4D,YAAY;AACxE;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;;AAEL;AACA,iBAAiB,eAAe;AAChC;AACA,eAAe,WAAW;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECxLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAe,uBAAuB,iBAAiB;AACjE,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;AC5JD;AACA;AACA;AACA;AACA;AACA,KAAK;AAAA;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAiC;AACzC;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mDAAmD;AAC3F,wBAAwB;AACxB,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,qCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB,yBAAyB,iCAAiC;AAC1D,UAAU,uBAAuB;AACjC,+DAA+D,6BAA6B;AAC5F;;;AAGA;AACA;AACA,eAAe,iCAAiC;AAChD;AACA;AACA,YAAY,qBAAqB;AACjC;AACA;;AAEA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA;AACA,KAAK,YAAY,sCAAsC,sBAAsB;AAC7E;AACA;;AAEA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA,YAAY,qBAAqB;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gDAAgD,uCAAuC,MAAM;AACrG;AACA;AACA;AACA;AACA,mBAAmB,KAAK;AACxB;AACA,YAAY,OAAO;AACnB,4BAA4B,YAAY,GAAG,aAAa,GAAG,aAAa;AACxE,OAAO,eAAe,OAAO,eAAe;AAC5C,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,MAAM,OAAO;AACb,mEAAmE;AACnE;AACA;AACA,gCAAgC;;AAEhC,IAAI;AACJ,gCAAgC,8CAA8C;;AAE9E,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA,YAAY,uBAAuB;AACnC,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;;AAEA;AACA,0BAA0B;;AAE1B,GAAG;AACH,iCAAiC;;AAEjC,GAAG;AACH;;AAEA,GAAG,OAAO;AACV;AACA;AACA,6CAA6C;;AAE7C;AACA;AACA,EAAE;;;AAGF;AACA,yCAAyC,kBAAkB;AAC3D;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA,yCAAyC,mBAAmB;AAC5D;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA,EAAE;;;AAGF;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,kCAAkC,iBAAiB,kBAAkB,iCAAiC;AACtG;AACA;AACA;AACA;AACA,oEAAoE,iBAAiB,yBAAyB;AAC9G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gDAAgD,uCAAuC,MAAM;AAC9I;AACA;AACA;AACA,8DAA8D,mBAAmB;AACjF;AACA;AACA;AACA,WAAW,OAAO;AAClB,gBAAgB,YAAY,GAAG,aAAa,GAAG,aAAa,GAAG,eAAe;AAC9E,UAAU,eAAe;AACzB,WAAW,OAAO;AAClB;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,8BAA8B,kBAAkB,EAAE;;;AAGlD;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,SAAS;AACrB,YAAY,OAAO;AACnB;AACA,aAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,0BAA0B,sDAAsD;AAChF;;AAEA,mDAAmD;AACnD,uCAAuC;AACvC;;AAEA,gCAAgC;AAChC;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,EAAE;AACd,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA,GAAG;AACH,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA,EAAE;;;;AAIF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qCAAqC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uEAAuE;AAC7F;AACA,QAAQ;AACR;AACA,4BAA4B;AAC5B;AACA;AACA,wBAAwB;AACxB,6BAA6B;AAC7B,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,6BAA6B;AAC7B,uCAAuC;AACvC;AACA,4BAA4B;AAC5B;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,mEAAmE,iBAAiB,yBAAyB;AAC7G;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gDAAgD;AAC9E;AACA,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,iEAAiE,kBAAkB,SAAS;AAC5F;AACA;;AAEA;AACA,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA,cAAc,iBAAiB;AAC/B;AACA;;;AAGA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;;AAEA,oDAAoD;AACpD,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,wBAAwB;AACpC,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;AACA,wCAAwC;AACxC,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,mBAAmB;AAChC;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,mBAAmB;AAChC;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,gDAAgD;;AAEhD;AACA,EAAE;;;AAGF;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA,8BAA8B;;AAE9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA,+EAA+E,iBAAiB;AAChG,+BAA+B,qCAAqC,YAAY,iCAAiC;AACjH,oDAAoD,qCAAqC;AACzF;AACA;AACA;AACA,mEAAmE,iBAAiB,yBAAyB;AAC7G;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,EAAE;;;AAGF;AACA,qCAAqC,KAAK;AAC1C;AACA;AACA,YAAY,uBAAuB;AACnC;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,EAAE;;;AAGF;AACA,wEAAwE,KAAK;AAC7E;AACA;AACA;AACA,YAAY,0CAA0C;AACtD;AACA,YAAY,OAAO;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA,YAAY,0CAA0C;AACtD;AACA,aAAa,OAAO;AACpB,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD;AACxD,EAAE;;;AAGF;AACA;AACA,KAAK,gBAAgB;AACrB;AACA;AACA,YAAY,OAAO;AACnB;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA,qBAAqB,gBAAgB;AACrC,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAA+C;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA;AACA,gCAAgC,gBAAgB;AAChD,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG;;AAElG;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,qCAAqC,OAAO,KAAK,MAAM,KAAK,MAAM,OAAO,MAAM,MAAM;;;AAGrF;AACA,yDAAyD;AACzD;AACA;AACA,YAAY,OAAO;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,iCAAiC;AAC9C,qBAAqB,+CAA+C;AACpE,OAAO,mDAAmD;AAC1D;AACA;AACA;AACA,qGAAqG;;AAErG;AACA,iDAAiD,UAAU;AAC3D,gDAAgD,kBAAkB;AAClE,mDAAmD,SAAS;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;AACA,iCAAiC,oDAAoD;AACrF;AACA;AACA,YAAY,OAAO;AACnB,iCAAiC,cAAc;AAC/C,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;;AAGF;AACA,iCAAiC,oDAAoD;AACrF;AACA;AACA,YAAY,OAAO;AACnB;AACA,YAAY,OAAO,yCAAyC,OAAO;AACnE;AACA,YAAY,QAAQ;AACpB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;;AAGF;AACA,gCAAgC,kDAAkD;AAClF;AACA;AACA,YAAY,OAAO;AACnB,eAAe,KAAK;AACpB,aAAa;AACb;AACA;AACA,gDAAgD,aAAa;AAC7D,EAAE;;;AAGF;AACA,gCAAgC,8CAA8C;AAC9E;AACA;AACA,YAAY,OAAO;AACnB,aAAa;AACb;AACA;AACA,8CAA8C,aAAa;AAC3D;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oDAAoD;AAC9D,SAAS,8CAA8C;AACvD,SAAS,kDAAkD;AAC3D,iFAAiF,KAAK,UAAU;AAChG;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,yBAAyB,oDAAoD;AAC7E;AACA,wBAAwB,8CAA8C;AACtE,wBAAwB,kDAAkD;AAC1E;AACA;AACA;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA,mBAAmB,YAAY;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uCAAuC;AAC3C;AACA,iCAAiC,qCAAqC;AACtE;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,gEAAgE,uCAAuC;AACvG;AACA,iCAAiC,qCAAqC;AACtE;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA,4DAA4D,OAAO;AACnE;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA,mEAAmE,OAAO;AAC1E,uBAAuB,QAAQ;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC;AAC3G,aAAa,KAAK,gBAAgB,uCAAuC,eAAe;AACxF;AACA;AACA,mBAAmB,kEAAkE;AACrF;AACA,iCAAiC,qCAAqC;AACtE;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,uDAAuD,uCAAuC;AAC9F;AACA,iCAAiC,qCAAqC;AACtE;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uCAAuC;AACrE;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;;AAEA;AACA,UAAU,eAAe;AACzB;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;;;AAGA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,KAAK;;AAEzC,oCAAoC,KAAK;;AAEzC,2BAA2B;AAC3B,6BAA6B,IAAI,cAAc,EAAE,aAAa,EAAE,SAAS,EAAE;AAC3E;AACA;AACA;AACA;;AAEA,4GAA4G;AAC5G;AACA,8DAA8D;;AAE9D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA,SAAS,oBAAoB,OAAO,gCAAgC;AACpE;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB,6DAA6D;AAC7D;AACA,YAAY,OAAO;AACnB;AACA,aAAa;AACb;AACA;AACA,gBAAgB;;AAEhB;AACA,8GAA8G;;AAE9G;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;;AAGF;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,OAAO,oBAAoB;AAC3B,YAAY,OAAO;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,YAAY,OAAO;AACnB;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,mBAAmB;AACnB;;AAEA;AACA,wCAAwC,kDAAkD;;AAE1F,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,0CAA0C,sDAAsD;;AAEhG,GAAG;AACH;AACA;AACA,yCAAyC,6CAA6C;;AAEtF,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,0CAA0C,qEAAqE;;AAE/G,GAAG,OAAO;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO,0CAA0C,oBAAoB;AACjF,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sDAAsD;AAC1D;AACA;AACA;AACA;AACA;AACA,IAAI,sDAAsD;AAC1D;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,4BAA4B,sDAAsD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;;;AAGA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qCAAqC;AACzC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,YAAY,iBAAiB,sCAAsC,qCAAqC;AACxG;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA,kDAAkD;AAClD;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;;AAGA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA,+EAA+E,WAAW;AAC1F,QAAQ,qBAAqB;AAC7B;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,8FAA8F,WAAW;AACzG,KAAK,WAAW;AAChB;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,4BAA4B,UAAU,cAAc,6EAA6E;AACjI,EAAE;;;AAGF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;;AAEtD;AACA,EAAE;;;AAGF;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;;AAEA,CAAC;;;;;;;;gECnsFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gEChBD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECfD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO,oDAAoD;AAC1E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA,4CAA4C,qBAAqB;AACjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,OAAO,oBAAoB,mBAAmB;AAC7D,eAAe,SAAS;AACxB,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECtLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC,eAAe,OAAO;AACtB,eAAe,OAAO,sEAAsE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,mBAAmB,KAAK;AACpD;AACA;AACA,eAAe,OAAO,qDAAqD;AAC3E,iBAAiB,OAAO,EAAE,mBAAmB,KAAK,iCAAiC;AACnF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ,qBAAqB,wBAAwB;AACpE;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECjHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ,qBAAqB,uBAAuB;AACnE;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECpDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECxuBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,YAAY;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kEAAkE,SAAS;AAC3E;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,YAAY;AACnE;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0DAA0D,YAAY;AACtE;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbqEAAqE,SAAS;AAC9E;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,+CAA+C,SAAS;AACxqDAAqD,QAAQ;AAC7D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,iBAAiB,kBAAkB,2EAA2E;AACxH;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,gBAAgB;AAC/B,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mCAAmC,aAAa;AAChD;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC;AACA;;AAEA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC;AACA;;AAEA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB,eAAe,iBAAiB;AAChC;AACA;;AAEA;AACA;;AAEA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,CAAC;AAAA;;;;;;;;gECruaAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,qCAAqC;AACrC,uEAAuE;AACvE,4DAA4D;AAC5D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,4BAA4B;AACnD;AACA;;AAEA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,yBAAyB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,uBAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB;;AAEjB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB,+BAA+B;AACxD;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,UAAU,iBAAiB;AAC3B;AACA;AACA;AACA,QAAQ,sEAAsE;AAC9E;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB,0BAA0B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB;AACA,aAAa;AACb,aAAa;AACb;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mCAAmC,aAAa;AAChD;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C,eAAe,OAAO;AACtB,eAAe,gBAAgB;AAC/B,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA,iBAAiB,wBAAwB;AACzC;AACA;;;AAGA,0CAA0C;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sFAAsF,oBAAofile":"0.TerriaJS-specs.js","sourcesContent":["define([\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Event',\r\n        '../Core/EventHelper',\r\n        '../Core/TimeIntervalCollection',\r\n        './Property'\r\n    ], function(\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Event,\r\n        EventHelper,\r\n        TimeIntervalCollection,\r\n        Property) {\r\n    'use strict';\r\n\r\n    function subscribeAll(property, eventHelper, definitionChanged, intervals) {\r\n        function callback() {\r\n            definitionChanged.raiseEvent(property);\r\n        }\r\n        var items = [];\r\n        eventHelper.removeAll();\r\n        var length = intervals.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var interval = intervals.get(i);\r\n            if (defined(interval.data) && items.indexOf(interval.data) === -1) {\r\n                eventHelper.add(interval.data.definitionChanged, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A {@link Property} which is defined by a {@link TimeIntervalCollection}, where the\r\n     * data property of each {@link TimeInterval} is another Property instance which is\r\n     * evaluated at the provided time.\r\n     *\r\n     * @alias CompositeProperty\r\n     * @constructor\r\n     *\r\n     *\r\n     * @example\r\n     * var constantProperty = ...;\r\n     * var sampledProperty = ...;\r\n     *\r\n     * //Create a composite property from two previously defined properties\r\n     * //where the property is valid on August 1st, 2012 and uses a constant\r\n     * //property for the first half of the day and a sampled property for the\r\n     * //remaining half.\r\n     * var composite = new Cesium.CompositeProperty();\r\n     * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\r\n     *     iso8601 : '2012-08-01T00:00:00.00Z/2012-08-01T12:00:00.00Z',\r\n     *     data : constantProperty\r\n     * }));\r\n     * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\r\n     *     iso8601 : '2012-08-01T12:00:00.00Z/2012-08-02T00:00:00.00Z',\r\n     *     isStartIncluded : false,\r\n     *     isStopIncluded : false,\r\n     *     data : sampledProperty\r\n     * }));\r\n     *\r\n     * @see CompositeMaterialProperty\r\n     * @see CompositePositionProperty\r\n     */\r\n    function CompositeProperty() {\r\n        this._eventHelper = new EventHelper();\r\n        this._definitionChanged = new Event();\r\n        this._intervals = new TimeIntervalCollection();\r\n        this._intervals.changedEvent.addEventListener(CompositeProperty.prototype._intervalsChanged, this);\r\n    }\r\n\r\n    defineProperties(CompositeProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  A property is considered\r\n         * constant if getValue always returns the same result for the current definition.\r\n         * @memberof CompositeProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return this._intervals.isEmpty;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is changed whenever setValue is called with data different\r\n         * than the current value.\r\n         * @memberof CompositeProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the interval collection.\r\n         * @memberof CompositeProperty.prototype\r\n         *\r\n         * @type {TimeIntervalCollection}\r\n         */\r\n        intervals : {\r\n            get : function() {\r\n                return this._intervals;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    CompositeProperty.prototype.getValue = function(time, result) {\r\n        \r\n\r\n        var innerProperty = this._intervals.findDataForIntervalContainingDate(time);\r\n        if (defined(innerProperty)) {\r\n            return innerProperty.getValue(time, result);\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    CompositeProperty.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof CompositeProperty && //\r\n                this._intervals.equals(other._intervals, Property.equals));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CompositeProperty.prototype._intervalsChanged = function() {\r\n        subscribeAll(this, this._eventHelper, this._definitionChanged, this._intervals);\r\n        this._definitionChanged.raiseEvent(this);\r\n    };\r\n\r\n    return CompositeProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/CompositeProperty.js\n// module id = 2229\n// module chunks = 0","define([\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Event',\r\n        '../Core/ReferenceFrame',\r\n        './CompositeProperty',\r\n        './Property'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Event,\r\n        ReferenceFrame,\r\n        CompositeProperty,\r\n        Property) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A {@link CompositeProperty} which is also a {@link PositionProperty}.\r\n     *\r\n     * @alias CompositePositionProperty\r\n     * @constructor\r\n     *\r\n     * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\r\n     */\r\n    function CompositePositionProperty(referenceFrame) {\r\n        this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\r\n        this._definitionChanged = new Event();\r\n        this._composite = new CompositeProperty();\r\n        this._composite.definitionChanged.addEventListener(CompositePositionProperty.prototype._raiseDefinitionChanged, this);\r\n    }\r\n\r\n    defineProperties(CompositePositionProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  A property is considered\r\n         * constant if getValue always returns the same result for the current definition.\r\n         * @memberof CompositePositionProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return this._composite.isConstant;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is changed whenever setValue is called with data different\r\n         * than the current value.\r\n         * @memberof CompositePositionProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the interval collection.\r\n         * @memberof CompositePositionProperty.prototype\r\n         *\r\n         * @type {TimeIntervalCollection}\r\n         */\r\n        intervals : {\r\n            get : function() {\r\n                return this._composite.intervals;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the reference frame which this position presents itself as.\r\n         * Each PositionProperty making up this object has it's own reference frame,\r\n         * so this property merely exposes a \"preferred\" reference frame for clients\r\n         * to use.\r\n         * @memberof CompositePositionProperty.prototype\r\n         *\r\n         * @type {ReferenceFrame}\r\n         */\r\n        referenceFrame : {\r\n            get : function() {\r\n                return this._referenceFrame;\r\n            },\r\n            set : function(value) {\r\n                this._referenceFrame = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time in the fixed frame.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    CompositePositionProperty.prototype.getValue = function(time, result) {\r\n        return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time and in the provided reference frame.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\r\n     * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    CompositePositionProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\r\n        \r\n\r\n        var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(time);\r\n        if (defined(innerProperty)) {\r\n            return innerProperty.getValueInReferenceFrame(time, referenceFrame, result);\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    CompositePositionProperty.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof CompositePositionProperty && //\r\n                this._referenceFrame === other._referenceFrame && //\r\n                this._composite.equals(other._composite, Property.equals));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CompositePositionProperty.prototype._raiseDefinitionChanged = function() {\r\n        this._definitionChanged.raiseEvent(this);\r\n    };\r\n\r\n    return CompositePositionProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/CompositePositionProperty.js\n// module id = 2230\n// module chunks = 0","define([\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Event',\r\n        '../Core/EventHelper',\r\n        '../Core/ReferenceFrame',\r\n        './Property'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Event,\r\n        EventHelper,\r\n        ReferenceFrame,\r\n        Property) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A {@link PositionProperty} whose value is an array whose items are the computed value\r\n     * of other PositionProperty instances.\r\n     *\r\n     * @alias PositionPropertyArray\r\n     * @constructor\r\n     *\r\n     * @param {Property[]} [value] An array of Property instances.\r\n     * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\r\n     */\r\n    function PositionPropertyArray(value, referenceFrame) {\r\n        this._value = undefined;\r\n        this._definitionChanged = new Event();\r\n        this._eventHelper = new EventHelper();\r\n        this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\r\n        this.setValue(value);\r\n    }\r\n\r\n    defineProperties(PositionPropertyArray.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  This property\r\n         * is considered constant if all property items in the array are constant.\r\n         * @memberof PositionPropertyArray.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                var value = this._value;\r\n                if (!defined(value)) {\r\n                    return true;\r\n                }\r\n\r\n                var length = value.length;\r\n                for (var i = 0; i < length; i++) {\r\n                    if (!Property.isConstant(value[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is changed whenever setValue is called with data different\r\n         * than the current value or one of the properties in the array also changes.\r\n         * @memberof PositionPropertyArray.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the reference frame in which the position is defined.\r\n         * @memberof PositionPropertyArray.prototype\r\n         * @type {ReferenceFrame}\r\n         * @default ReferenceFrame.FIXED;\r\n         */\r\n        referenceFrame : {\r\n            get : function() {\r\n                return this._referenceFrame;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Gets the value of the property.\r\n     *\r\n     * @param {JulianDate} [time] The time for which to retrieve the value.  This parameter is unused since the value does not change with respect to time.\r\n     * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    PositionPropertyArray.prototype.getValue = function(time, result) {\r\n        return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time and in the provided reference frame.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\r\n     * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    PositionPropertyArray.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\r\n        \r\n\r\n        var value = this._value;\r\n        if (!defined(value)) {\r\n            return undefined;\r\n        }\r\n\r\n        var length = value.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length);\r\n        }\r\n        var i = 0;\r\n        var x = 0;\r\n        while (i < length) {\r\n            var property = value[i];\r\n            var itemValue = property.getValueInReferenceFrame(time, referenceFrame, result[i]);\r\n            if (defined(itemValue)) {\r\n                result[x] = itemValue;\r\n                x++;\r\n            }\r\n            i++;\r\n        }\r\n        result.length = x;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Sets the value of the property.\r\n     *\r\n     * @param {Property[]} value An array of Property instances.\r\n     */\r\n    PositionPropertyArray.prototype.setValue = function(value) {\r\n        var eventHelper = this._eventHelper;\r\n        eventHelper.removeAll();\r\n\r\n        if (defined(value)) {\r\n            this._value = value.slice();\r\n            var length = value.length;\r\n            for (var i = 0; i < length; i++) {\r\n                var property = value[i];\r\n                if (defined(property)) {\r\n                    eventHelper.add(property.definitionChanged, PositionPropertyArray.prototype._raiseDefinitionChanged, this);\r\n                }\r\n            }\r\n        } else {\r\n            this._value = undefined;\r\n        }\r\n        this._definitionChanged.raiseEvent(this);\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    PositionPropertyArray.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof PositionPropertyArray && //\r\n                this._referenceFrame === other._referenceFrame && //\r\n                Property.arrayEquals(this._value, other._value));\r\n    };\r\n\r\n    PositionPropertyArray.prototype._raiseDefinitionChanged = function() {\r\n        this._definitionChanged.raiseEvent(this);\r\n    };\r\n\r\n    return PositionPropertyArray;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/PositionPropertyArray.js\n// module id = 2231\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Event',\r\n        '../Core/RuntimeError',\r\n        './Property'\r\n    ], function(\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Event,\r\n        RuntimeError,\r\n        Property) {\r\n    'use strict';\r\n\r\n    function resolveEntity(that) {\r\n        var entityIsResolved = true;\r\n        if (that._resolveEntity) {\r\n            var targetEntity = that._targetCollection.getById(that._targetId);\r\n\r\n            if (defined(targetEntity)) {\r\n                targetEntity.definitionChanged.addEventListener(ReferenceProperty.prototype._onTargetEntityDefinitionChanged, that);\r\n                that._targetEntity = targetEntity;\r\n                that._resolveEntity = false;\r\n            } else {\r\n                //The property has become detached.  It has a valid value but is not currently resolved to an entity in the collection\r\n                targetEntity = that._targetEntity;\r\n                entityIsResolved = false;\r\n            }\r\n\r\n            if (!defined(targetEntity)) {\r\n                throw new RuntimeError('target entity \"' + that._targetId + '\" could not be resolved.');\r\n            }\r\n        }\r\n        return entityIsResolved;\r\n    }\r\n\r\n    function resolve(that) {\r\n        var targetProperty = that._targetProperty;\r\n\r\n        if (that._resolveProperty) {\r\n            var entityIsResolved = resolveEntity(that);\r\n\r\n            var names = that._targetPropertyNames;\r\n            targetProperty = that._targetEntity;\r\n            var length = names.length;\r\n            for (var i = 0; i < length && defined(targetProperty); i++) {\r\n                targetProperty = targetProperty[names[i]];\r\n            }\r\n\r\n            if (defined(targetProperty)) {\r\n                that._targetProperty = targetProperty;\r\n                that._resolveProperty = !entityIsResolved;\r\n            } else if (!defined(that._targetProperty)) {\r\n                throw new RuntimeError('targetProperty \"' + that._targetId + '.' + names.join('.') + '\" could not be resolved.');\r\n            }\r\n        }\r\n\r\n        return targetProperty;\r\n    }\r\n\r\n    /**\r\n     * A {@link Property} which transparently links to another property on a provided object.\r\n     *\r\n     * @alias ReferenceProperty\r\n     * @constructor\r\n     *\r\n     * @param {EntityCollection} targetCollection The entity collection which will be used to resolve the reference.\r\n     * @param {String} targetId The id of the entity which is being referenced.\r\n     * @param {String[]} targetPropertyNames The names of the property on the target entity which we will use.\r\n     *\r\n     * @example\r\n     * var collection = new Cesium.EntityCollection();\r\n     *\r\n     * //Create a new entity and assign a billboard scale.\r\n     * var object1 = new Cesium.Entity({id:'object1'});\r\n     * object1.billboard = new Cesium.BillboardGraphics();\r\n     * object1.billboard.scale = new Cesium.ConstantProperty(2.0);\r\n     * collection.add(object1);\r\n     *\r\n     * //Create a second entity and reference the scale from the first one.\r\n     * var object2 = new Cesium.Entity({id:'object2'});\r\n     * object2.model = new Cesium.ModelGraphics();\r\n     * object2.model.scale = new Cesium.ReferenceProperty(collection, 'object1', ['billboard', 'scale']);\r\n     * collection.add(object2);\r\n     *\r\n     * //Create a third object, but use the fromString helper function.\r\n     * var object3 = new Cesium.Entity({id:'object3'});\r\n     * object3.billboard = new Cesium.BillboardGraphics();\r\n     * object3.billboard.scale = Cesium.ReferenceProperty.fromString(collection, 'object1#billboard.scale');\r\n     * collection.add(object3);\r\n     *\r\n     * //You can refer to an entity with a # or . in id and property names by escaping them.\r\n     * var object4 = new Cesium.Entity({id:'#object.4'});\r\n     * object4.billboard = new Cesium.BillboardGraphics();\r\n     * object4.billboard.scale = new Cesium.ConstantProperty(2.0);\r\n     * collection.add(object4);\r\n     *\r\n     * var object5 = new Cesium.Entity({id:'object5'});\r\n     * object5.billboard = new Cesium.BillboardGraphics();\r\n     * object5.billboard.scale = Cesium.ReferenceProperty.fromString(collection, '\\\\#object\\\\.4#billboard.scale');\r\n     * collection.add(object5);\r\n     */\r\n    function ReferenceProperty(targetCollection, targetId, targetPropertyNames) {\r\n        \r\n\r\n        this._targetCollection = targetCollection;\r\n        this._targetId = targetId;\r\n        this._targetPropertyNames = targetPropertyNames;\r\n        this._targetProperty = undefined;\r\n        this._targetEntity = undefined;\r\n        this._definitionChanged = new Event();\r\n        this._resolveEntity = true;\r\n        this._resolveProperty = true;\r\n\r\n        targetCollection.collectionChanged.addEventListener(ReferenceProperty.prototype._onCollectionChanged, this);\r\n    }\r\n\r\n    defineProperties(ReferenceProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.\r\n         * @memberof ReferenceProperty.prototype\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return Property.isConstant(resolve(this));\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is changed whenever the referenced property's definition is changed.\r\n         * @memberof ReferenceProperty.prototype\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the reference frame that the position is defined in.\r\n         * This property is only valid if the referenced property is a {@link PositionProperty}.\r\n         * @memberof ReferenceProperty.prototype\r\n         * @type {ReferenceFrame}\r\n         * @readonly\r\n         */\r\n        referenceFrame : {\r\n            get : function() {\r\n                return resolve(this).referenceFrame;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the id of the entity being referenced.\r\n         * @memberof ReferenceProperty.prototype\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        targetId : {\r\n            get : function() {\r\n                return this._targetId;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the collection containing the entity being referenced.\r\n         * @memberof ReferenceProperty.prototype\r\n         * @type {EntityCollection}\r\n         * @readonly\r\n         */\r\n        targetCollection : {\r\n            get : function() {\r\n                return this._targetCollection;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the array of property names used to retrieve the referenced property.\r\n         * @memberof ReferenceProperty.prototype\r\n         * @type {String[]}\r\n         * @readonly\r\n         */\r\n        targetPropertyNames : {\r\n            get : function() {\r\n                return this._targetPropertyNames;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the resolved instance of the underlying referenced property.\r\n         * @memberof ReferenceProperty.prototype\r\n         * @type {Property}\r\n         * @readonly\r\n         */\r\n        resolvedProperty : {\r\n            get : function() {\r\n                return resolve(this);\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Creates a new instance given the entity collection that will\r\n     * be used to resolve it and a string indicating the target entity id and property.\r\n     * The format of the string is \"objectId#foo.bar\", where # separates the id from\r\n     * property path and . separates sub-properties.  If the reference identifier or\r\n     * or any sub-properties contains a # . or \\ they must be escaped.\r\n     *\r\n     * @param {EntityCollection} targetCollection\r\n     * @param {String} referenceString\r\n     * @returns {ReferenceProperty} A new instance of ReferenceProperty.\r\n     *\r\n     * @exception {DeveloperError} invalid referenceString.\r\n     */\r\n    ReferenceProperty.fromString = function(targetCollection, referenceString) {\r\n        \r\n\r\n        var identifier;\r\n        var values = [];\r\n\r\n        var inIdentifier = true;\r\n        var isEscaped = false;\r\n        var token = '';\r\n        for (var i = 0; i < referenceString.length; ++i) {\r\n            var c = referenceString.charAt(i);\r\n\r\n            if (isEscaped) {\r\n                token += c;\r\n                isEscaped = false;\r\n            } else if (c === '\\\\') {\r\n                isEscaped = true;\r\n            } else if (inIdentifier && c === '#') {\r\n                identifier = token;\r\n                inIdentifier = false;\r\n                token = '';\r\n            } else if (!inIdentifier && c === '.') {\r\n                values.push(token);\r\n                token = '';\r\n            } else {\r\n                token += c;\r\n            }\r\n        }\r\n        values.push(token);\r\n\r\n        return new ReferenceProperty(targetCollection, identifier, values);\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    ReferenceProperty.prototype.getValue = function(time, result) {\r\n        return resolve(this).getValue(time, result);\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time and in the provided reference frame.\r\n     * This method is only valid if the property being referenced is a {@link PositionProperty}.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\r\n     * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    ReferenceProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\r\n        return resolve(this).getValueInReferenceFrame(time, referenceFrame, result);\r\n    };\r\n\r\n    /**\r\n     * Gets the {@link Material} type at the provided time.\r\n     * This method is only valid if the property being referenced is a {@link MaterialProperty}.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the type.\r\n     * @returns {String} The type of material.\r\n     */\r\n    ReferenceProperty.prototype.getType = function(time) {\r\n        return resolve(this).getType(time);\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    ReferenceProperty.prototype.equals = function(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n\r\n        var names = this._targetPropertyNames;\r\n        var otherNames = other._targetPropertyNames;\r\n\r\n        if (this._targetCollection !== other._targetCollection || //\r\n            this._targetId !== other._targetId || //\r\n            names.length !== otherNames.length) {\r\n            return false;\r\n        }\r\n\r\n        var length = this._targetPropertyNames.length;\r\n        for (var i = 0; i < length; i++) {\r\n            if (names[i] !== otherNames[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    ReferenceProperty.prototype._onTargetEntityDefinitionChanged = function(targetEntity, name, value, oldValue) {\r\n        if (this._targetPropertyNames[0] === name) {\r\n            this._resolveProperty = true;\r\n            this._definitionChanged.raiseEvent(this);\r\n        }\r\n    };\r\n\r\n    ReferenceProperty.prototype._onCollectionChanged = function(collection, added, removed) {\r\n        var targetEntity = this._targetEntity;\r\n        if (defined(targetEntity)) {\r\n            if (removed.indexOf(targetEntity) !== -1) {\r\n                targetEntity.definitionChanged.removeEventListener(ReferenceProperty.prototype._onTargetEntityDefinitionChanged, this);\r\n                this._resolveEntity = true;\r\n                this._resolveProperty = true;\r\n            } else if (this._resolveEntity) {\r\n                //If targetEntity is defined but resolveEntity is true, then the entity is detached\r\n                //and any change to the collection needs to incur an attempt to resolve in order to re-attach.\r\n                //without this if block, a reference that becomes re-attached will not signal definitionChanged\r\n                resolve(this);\r\n                if (!this._resolveEntity) {\r\n                    this._definitionChanged.raiseEvent(this);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return ReferenceProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/ReferenceProperty.js\n// module id = 2232\n// module chunks = 0","define([\r\n        '../Core/freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defined the orientation of stripes in {@link StripeMaterialProperty}.\r\n     *\r\n     * @exports StripeOrientation\r\n     */\r\n    var StripeOrientation = {\r\n        /**\r\n         * Horizontal orientation.\r\n         * @type {Number}\r\n         */\r\n        HORIZONTAL : 0,\r\n\r\n        /**\r\n         * Vertical orientation.\r\n         * @type {Number}\r\n         */\r\n        VERTICAL : 1\r\n    };\r\n\r\n    return freezeObject(StripeOrientation);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/StripeOrientation.js\n// module id = 2233\n// module chunks = 0","define([\r\n        '../Core/Cartesian3',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Event',\r\n        '../Core/JulianDate',\r\n        './Property'\r\n    ], function(\r\n        Cartesian3,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Event,\r\n        JulianDate,\r\n        Property) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A {@link Property} which evaluates to a {@link Cartesian3} vector\r\n     * based on the velocity of the provided {@link PositionProperty}.\r\n     *\r\n     * @alias VelocityVectorProperty\r\n     * @constructor\r\n     *\r\n     * @param {Property} [position] The position property used to compute the velocity.\r\n     * @param {Boolean} [normalize=true] Whether to normalize the computed velocity vector.\r\n     *\r\n     * @example\r\n     * //Create an entity with a billboard rotated to match its velocity.\r\n     * var position = new Cesium.SampledProperty();\r\n     * position.addSamples(...);\r\n     * var entity = viewer.entities.add({\r\n     *   position : position,\r\n     *   billboard : {\r\n     *     image : 'image.png',\r\n     *     alignedAxis : new Cesium.VelocityVectorProperty(position, true) // alignedAxis must be a unit vector\r\n     *   }\r\n     * }));\r\n     */\r\n    function VelocityVectorProperty(position, normalize) {\r\n        this._position = undefined;\r\n        this._subscription = undefined;\r\n        this._definitionChanged = new Event();\r\n        this._normalize = defaultValue(normalize, true);\r\n\r\n        this.position = position;\r\n    }\r\n\r\n    defineProperties(VelocityVectorProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.\r\n         * @memberof VelocityVectorProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return Property.isConstant(this._position);\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * @memberof VelocityVectorProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the position property used to compute the velocity vector.\r\n         * @memberof VelocityVectorProperty.prototype\r\n         *\r\n         * @type {Property}\r\n         */\r\n        position : {\r\n            get : function() {\r\n                return this._position;\r\n            },\r\n            set : function(value) {\r\n                var oldValue = this._position;\r\n                if (oldValue !== value) {\r\n                    if (defined(oldValue)) {\r\n                        this._subscription();\r\n                    }\r\n\r\n                    this._position = value;\r\n\r\n                    if (defined(value)) {\r\n                        this._subscription = value._definitionChanged.addEventListener(function() {\r\n                            this._definitionChanged.raiseEvent(this);\r\n                        }, this);\r\n                    }\r\n\r\n                    this._definitionChanged.raiseEvent(this);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets whether the vector produced by this property\r\n         * will be normalized or not.\r\n         * @memberof VelocityVectorProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        normalize : {\r\n            get : function() {\r\n                return this._normalize;\r\n            },\r\n            set : function(value) {\r\n                if (this._normalize === value) {\r\n                    return;\r\n                }\r\n\r\n                this._normalize = value;\r\n                this._definitionChanged.raiseEvent(this);\r\n            }\r\n        }\r\n    });\r\n\r\n    var position1Scratch = new Cartesian3();\r\n    var position2Scratch = new Cartesian3();\r\n    var timeScratch = new JulianDate();\r\n    var step = 1.0 / 60.0;\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} [time] The time for which to retrieve the value.\r\n     * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    VelocityVectorProperty.prototype.getValue = function(time, result) {\r\n        return this._getValue(time, result);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    VelocityVectorProperty.prototype._getValue = function(time, velocityResult, positionResult) {\r\n        \r\n\r\n        if (!defined(velocityResult)) {\r\n            velocityResult = new Cartesian3();\r\n        }\r\n\r\n        var property = this._position;\r\n        if (Property.isConstant(property)) {\r\n            return this._normalize ? undefined : Cartesian3.clone(Cartesian3.ZERO, velocityResult);\r\n        }\r\n\r\n        var position1 = property.getValue(time, position1Scratch);\r\n        var position2 = property.getValue(JulianDate.addSeconds(time, step, timeScratch), position2Scratch);\r\n\r\n        //If we don't have a position for now, return undefined.\r\n        if (!defined(position1)) {\r\n            return undefined;\r\n        }\r\n\r\n        //If we don't have a position for now + step, see if we have a position for now - step.\r\n        if (!defined(position2)) {\r\n            position2 = position1;\r\n            position1 = property.getValue(JulianDate.addSeconds(time, -step, timeScratch), position2Scratch);\r\n\r\n            if (!defined(position1)) {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        if (Cartesian3.equals(position1, position2)) {\r\n            return this._normalize ? undefined : Cartesian3.clone(Cartesian3.ZERO, velocityResult);\r\n        }\r\n\r\n        if (defined(positionResult)) {\r\n            position1.clone(positionResult);\r\n        }\r\n\r\n        var velocity = Cartesian3.subtract(position2, position1, velocityResult);\r\n        if (this._normalize) {\r\n            return Cartesian3.normalize(velocity, velocityResult);\r\n        }\r\n\r\n        return Cartesian3.divideByScalar(velocity, step, velocityResult);\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    VelocityVectorProperty.prototype.equals = function(other) {\r\n        return this === other ||//\r\n               (other instanceof VelocityVectorProperty &&\r\n                Property.equals(this._position, other._position));\r\n    };\r\n\r\n    return VelocityVectorProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/VelocityVectorProperty.js\n// module id = 2234\n// module chunks = 0","define([\r\n        './freezeObject'\r\n    ], function(\r\n        freezeObject) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Style options for corners.\r\n     *\r\n     * @demo The {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\r\n     * demonstrates the three corner types, as used by {@link CorridorGraphics}.\r\n     *\r\n     * @exports CornerType\r\n     */\r\n    var CornerType = {\r\n        /**\r\n         * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner has a smooth edge.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        ROUNDED : 0,\r\n\r\n        /**\r\n         * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner point is the intersection of adjacent edges.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        MITERED : 1,\r\n\r\n        /**\r\n         * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner is clipped.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        BEVELED : 2\r\n    };\r\n\r\n    return freezeObject(CornerType);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/CornerType.js\n// module id = 2235\n// module chunks = 0","define([\r\n        './defaultValue',\r\n        './defined',\r\n        './DeveloperError',\r\n        './Math'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    var factorial = CesiumMath.factorial;\r\n\r\n    function calculateCoefficientTerm(x, zIndices, xTable, derivOrder, termOrder, reservedIndices) {\r\n        var result = 0;\r\n        var reserved;\r\n        var i;\r\n        var j;\r\n\r\n        if (derivOrder > 0) {\r\n            for (i = 0; i < termOrder; i++) {\r\n                reserved = false;\r\n                for (j = 0; j < reservedIndices.length && !reserved; j++) {\r\n                    if (i === reservedIndices[j]) {\r\n                        reserved = true;\r\n                    }\r\n                }\r\n\r\n                if (!reserved) {\r\n                    reservedIndices.push(i);\r\n                    result += calculateCoefficientTerm(x, zIndices, xTable, derivOrder - 1, termOrder, reservedIndices);\r\n                    reservedIndices.splice(reservedIndices.length - 1, 1);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        result = 1;\r\n        for (i = 0; i < termOrder; i++) {\r\n            reserved = false;\r\n            for (j = 0; j < reservedIndices.length && !reserved; j++) {\r\n                if (i === reservedIndices[j]) {\r\n                    reserved = true;\r\n                }\r\n            }\r\n\r\n            if (!reserved) {\r\n                result *= x - xTable[zIndices[i]];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * An {@link InterpolationAlgorithm} for performing Hermite interpolation.\r\n     *\r\n     * @exports HermitePolynomialApproximation\r\n     */\r\n    var HermitePolynomialApproximation = {\r\n        type : 'Hermite'\r\n    };\r\n\r\n    /**\r\n     * Given the desired degree, returns the number of data points required for interpolation.\r\n     *\r\n     * @param {Number} degree The desired degree of interpolation.\r\n     * @param {Number} [inputOrder=0]  The order of the inputs (0 means just the data, 1 means the data and its derivative, etc).\r\n     * @returns {Number} The number of required data points needed for the desired degree of interpolation.\r\n     * @exception {DeveloperError} degree must be 0 or greater.\r\n     * @exception {DeveloperError} inputOrder must be 0 or greater.\r\n     */\r\n    HermitePolynomialApproximation.getRequiredDataPoints = function(degree, inputOrder) {\r\n        inputOrder = defaultValue(inputOrder, 0);\r\n\r\n        \r\n\r\n        return Math.max(Math.floor((degree + 1) / (inputOrder + 1)), 2);\r\n    };\r\n\r\n    /**\r\n     * Interpolates values using Hermite Polynomial Approximation.\r\n     *\r\n     * @param {Number} x The independent variable for which the dependent variables will be interpolated.\r\n     * @param {Number[]} xTable The array of independent variables to use to interpolate.  The values\r\n     * in this array must be in increasing order and the same value must not occur twice in the array.\r\n     * @param {Number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\r\n     * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\r\n     * @param {Number} yStride The number of dependent variable values in yTable corresponding to\r\n     * each independent variable value in xTable.\r\n     * @param {Number[]} [result] An existing array into which to store the result.\r\n     * @returns {Number[]} The array of interpolated values, or the result parameter if one was provided.\r\n     */\r\n    HermitePolynomialApproximation.interpolateOrderZero = function(x, xTable, yTable, yStride, result) {\r\n        if (!defined(result)) {\r\n            result = new Array(yStride);\r\n        }\r\n\r\n        var i;\r\n        var j;\r\n        var d;\r\n        var s;\r\n        var len;\r\n        var index;\r\n        var length = xTable.length;\r\n        var coefficients = new Array(yStride);\r\n\r\n        for (i = 0; i < yStride; i++) {\r\n            result[i] = 0;\r\n\r\n            var l = new Array(length);\r\n            coefficients[i] = l;\r\n            for (j = 0; j < length; j++) {\r\n                l[j] = [];\r\n            }\r\n        }\r\n\r\n        var zIndicesLength = length, zIndices = new Array(zIndicesLength);\r\n\r\n        for (i = 0; i < zIndicesLength; i++) {\r\n            zIndices[i] = i;\r\n        }\r\n\r\n        var highestNonZeroCoef = length - 1;\r\n        for (s = 0; s < yStride; s++) {\r\n            for (j = 0; j < zIndicesLength; j++) {\r\n                index = zIndices[j] * yStride + s;\r\n                coefficients[s][0].push(yTable[index]);\r\n            }\r\n\r\n            for (i = 1; i < zIndicesLength; i++) {\r\n                var nonZeroCoefficients = false;\r\n                for (j = 0; j < zIndicesLength - i; j++) {\r\n                    var zj = xTable[zIndices[j]];\r\n                    var zn = xTable[zIndices[j + i]];\r\n\r\n                    var numerator;\r\n                    if (zn - zj <= 0) {\r\n                        index = zIndices[j] * yStride + yStride * i + s;\r\n                        numerator = yTable[index];\r\n                        coefficients[s][i].push(numerator / factorial(i));\r\n                    } else {\r\n                        numerator = (coefficients[s][i - 1][j + 1] - coefficients[s][i - 1][j]);\r\n                        coefficients[s][i].push(numerator / (zn - zj));\r\n                    }\r\n                    nonZeroCoefficients = nonZeroCoefficients || (numerator !== 0);\r\n                }\r\n\r\n                if (!nonZeroCoefficients) {\r\n                    highestNonZeroCoef = i - 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (d = 0, len = 0; d <= len; d++) {\r\n            for (i = d; i <= highestNonZeroCoef; i++) {\r\n                var tempTerm = calculateCoefficientTerm(x, zIndices, xTable, d, i, []);\r\n                for (s = 0; s < yStride; s++) {\r\n                    var coeff = coefficients[s][i][0];\r\n                    result[s + d * yStride] += coeff * tempTerm;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    var arrayScratch = [];\r\n\r\n    /**\r\n     * Interpolates values using Hermite Polynomial Approximation.\r\n     *\r\n     * @param {Number} x The independent variable for which the dependent variables will be interpolated.\r\n     * @param {Number[]} xTable The array of independent variables to use to interpolate.  The values\r\n     * in this array must be in increasing order and the same value must not occur twice in the array.\r\n     * @param {Number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\r\n     * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\r\n     * @param {Number} yStride The number of dependent variable values in yTable corresponding to\r\n     * each independent variable value in xTable.\r\n     * @param {Number} inputOrder The number of derivatives supplied for input.\r\n     * @param {Number} outputOrder The number of derivatives desired for output.\r\n     * @param {Number[]} [result] An existing array into which to store the result.\r\n     *\r\n     * @returns {Number[]} The array of interpolated values, or the result parameter if one was provided.\r\n     */\r\n    HermitePolynomialApproximation.interpolate = function(x, xTable, yTable, yStride, inputOrder, outputOrder, result) {\r\n        var resultLength = yStride * (outputOrder + 1);\r\n        if (!defined(result)) {\r\n            result = new Array(resultLength);\r\n        }\r\n        for (var r = 0; r < resultLength; r++) {\r\n            result[r] = 0;\r\n        }\r\n\r\n        var length = xTable.length;\r\n        // The zIndices array holds copies of the addresses of the xTable values\r\n        // in the range we're looking at. Even though this just holds information already\r\n        // available in xTable this is a much more convenient format.\r\n        var zIndices = new Array(length * (inputOrder + 1));\r\n        var i;\r\n        for (i = 0; i < length; i++) {\r\n            for (var j = 0; j < (inputOrder + 1); j++) {\r\n                zIndices[i * (inputOrder + 1) + j] = i;\r\n            }\r\n        }\r\n\r\n        var zIndiceslength = zIndices.length;\r\n        var coefficients = arrayScratch;\r\n        var highestNonZeroCoef = fillCoefficientList(coefficients, zIndices, xTable, yTable, yStride, inputOrder);\r\n        var reservedIndices = [];\r\n\r\n        var tmp = zIndiceslength * (zIndiceslength + 1) / 2;\r\n        var loopStop = Math.min(highestNonZeroCoef, outputOrder);\r\n        for (var d = 0; d <= loopStop; d++) {\r\n            for (i = d; i <= highestNonZeroCoef; i++) {\r\n                reservedIndices.length = 0;\r\n                var tempTerm = calculateCoefficientTerm(x, zIndices, xTable, d, i, reservedIndices);\r\n                var dimTwo = Math.floor(i * (1 - i) / 2) + (zIndiceslength * i);\r\n\r\n                for (var s = 0; s < yStride; s++) {\r\n                    var dimOne = Math.floor(s * tmp);\r\n                    var coef = coefficients[dimOne + dimTwo];\r\n                    result[s + d * yStride] += coef * tempTerm;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    function fillCoefficientList(coefficients, zIndices, xTable, yTable, yStride, inputOrder) {\r\n        var j;\r\n        var index;\r\n        var highestNonZero = -1;\r\n        var zIndiceslength = zIndices.length;\r\n        var tmp = zIndiceslength * (zIndiceslength + 1) / 2;\r\n\r\n        for (var s = 0; s < yStride; s++) {\r\n            var dimOne = Math.floor(s * tmp);\r\n\r\n            for (j = 0; j < zIndiceslength; j++) {\r\n                index = zIndices[j] * yStride * (inputOrder + 1) + s;\r\n                coefficients[dimOne + j] = yTable[index];\r\n            }\r\n\r\n            for (var i = 1; i < zIndiceslength; i++) {\r\n                var coefIndex = 0;\r\n                var dimTwo = Math.floor(i * (1 - i) / 2) + (zIndiceslength * i);\r\n                var nonZeroCoefficients = false;\r\n\r\n                for (j = 0; j < zIndiceslength - i; j++) {\r\n                    var zj = xTable[zIndices[j]];\r\n                    var zn = xTable[zIndices[j + i]];\r\n\r\n                    var numerator;\r\n                    var coefficient;\r\n                    if (zn - zj <= 0) {\r\n                        index = zIndices[j] * yStride * (inputOrder + 1) + yStride * i + s;\r\n                        numerator = yTable[index];\r\n                        coefficient = (numerator / CesiumMath.factorial(i));\r\n                        coefficients[dimOne + dimTwo + coefIndex] = coefficient;\r\n                        coefIndex++;\r\n                    } else {\r\n                        var dimTwoMinusOne = Math.floor((i - 1) * (2 - i) / 2) + (zIndiceslength * (i - 1));\r\n                        numerator = coefficients[dimOne + dimTwoMinusOne + j + 1] - coefficients[dimOne + dimTwoMinusOne + j];\r\n                        coefficient = (numerator / (zn - zj));\r\n                        coefficients[dimOne + dimTwo + coefIndex] = coefficient;\r\n                        coefIndex++;\r\n                    }\r\n                    nonZeroCoefficients = nonZeroCoefficients || (numerator !== 0.0);\r\n                }\r\n\r\n                if (nonZeroCoefficients) {\r\n                    highestNonZero = Math.max(highestNonZero, i);\r\n                }\r\n            }\r\n        }\r\n\r\n        return highestNonZero;\r\n    }\r\n\r\n    return HermitePolynomialApproximation;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/HermitePolynomialApproximation.js\n// module id = 2236\n// module chunks = 0","define([\r\n        './defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * An {@link InterpolationAlgorithm} for performing Lagrange interpolation.\r\n     *\r\n     * @exports LagrangePolynomialApproximation\r\n     */\r\n    var LagrangePolynomialApproximation = {\r\n        type : 'Lagrange'\r\n    };\r\n\r\n    /**\r\n     * Given the desired degree, returns the number of data points required for interpolation.\r\n     *\r\n     * @param {Number} degree The desired degree of interpolation.\r\n     * @returns {Number} The number of required data points needed for the desired degree of interpolation.\r\n     */\r\n    LagrangePolynomialApproximation.getRequiredDataPoints = function(degree) {\r\n        return Math.max(degree + 1.0, 2);\r\n    };\r\n\r\n    /**\r\n     * Interpolates values using Lagrange Polynomial Approximation.\r\n     *\r\n     * @param {Number} x The independent variable for which the dependent variables will be interpolated.\r\n     * @param {Number[]} xTable The array of independent variables to use to interpolate.  The values\r\n     * in this array must be in increasing order and the same value must not occur twice in the array.\r\n     * @param {Number[]} yTable The array of dependent variables to use to interpolate.  For a set of three\r\n     * dependent values (p,q,w) at time 1 and time 2 this should be as follows: {p1, q1, w1, p2, q2, w2}.\r\n     * @param {Number} yStride The number of dependent variable values in yTable corresponding to\r\n     * each independent variable value in xTable.\r\n     * @param {Number[]} [result] An existing array into which to store the result.\r\n     * @returns {Number[]} The array of interpolated values, or the result parameter if one was provided.\r\n     */\r\n    LagrangePolynomialApproximation.interpolateOrderZero = function(x, xTable, yTable, yStride, result) {\r\n        if (!defined(result)) {\r\n            result = new Array(yStride);\r\n        }\r\n\r\n        var i;\r\n        var j;\r\n        var length = xTable.length;\r\n\r\n        for (i = 0; i < yStride; i++) {\r\n            result[i] = 0;\r\n        }\r\n\r\n        for (i = 0; i < length; i++) {\r\n            var coefficient = 1;\r\n\r\n            for (j = 0; j < length; j++) {\r\n                if (j !== i) {\r\n                    var diffX = xTable[i] - xTable[j];\r\n                    coefficient *= (x - xTable[j]) / diffX;\r\n                }\r\n            }\r\n\r\n            for (j = 0; j < yStride; j++) {\r\n                result[j] += coefficient * yTable[i * yStride + j];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    return LagrangePolynomialApproximation;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/LagrangePolynomialApproximation.js\n// module id = 2237\n// module chunks = 0","define([\r\n        './Check',\r\n        './defaultValue',\r\n        './defined'\r\n    ], function(\r\n        Check,\r\n        defaultValue,\r\n        defined) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A set of curvilinear 3-dimensional coordinates.\r\n     *\r\n     * @alias Spherical\r\n     * @constructor\r\n     *\r\n     * @param {Number} [clock=0.0] The angular coordinate lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n     * @param {Number} [cone=0.0] The angular coordinate measured from the positive z-axis and toward the negative z-axis.\r\n     * @param {Number} [magnitude=1.0] The linear coordinate measured from the origin.\r\n     */\r\n    function Spherical(clock, cone, magnitude) {\r\n        this.clock = defaultValue(clock, 0.0);\r\n        this.cone = defaultValue(cone, 0.0);\r\n        this.magnitude = defaultValue(magnitude, 1.0);\r\n    }\r\n\r\n    /**\r\n     * Converts the provided Cartesian3 into Spherical coordinates.\r\n     *\r\n     * @param {Cartesian3} cartesian3 The Cartesian3 to be converted to Spherical.\r\n     * @param {Spherical} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Spherical} The modified result parameter, or a new instance if one was not provided.\r\n     */\r\n    Spherical.fromCartesian3 = function(cartesian3, result) {\r\n        \r\n\r\n        var x = cartesian3.x;\r\n        var y = cartesian3.y;\r\n        var z = cartesian3.z;\r\n        var radialSquared = x * x + y * y;\r\n\r\n        if (!defined(result)) {\r\n            result = new Spherical();\r\n        }\r\n\r\n        result.clock = Math.atan2(y, x);\r\n        result.cone = Math.atan2(Math.sqrt(radialSquared), z);\r\n        result.magnitude = Math.sqrt(radialSquared + z * z);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a duplicate of a Spherical.\r\n     *\r\n     * @param {Spherical} spherical The spherical to clone.\r\n     * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\r\n     * @returns {Spherical} The modified result parameter or a new instance if result was undefined. (Returns undefined if spherical is undefined)\r\n     */\r\n    Spherical.clone = function(spherical, result) {\r\n        if (!defined(spherical)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Spherical(spherical.clock, spherical.cone, spherical.magnitude);\r\n        }\r\n\r\n        result.clock = spherical.clock;\r\n        result.cone = spherical.cone;\r\n        result.magnitude = spherical.magnitude;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized version of the provided spherical.\r\n     *\r\n     * @param {Spherical} spherical The spherical to be normalized.\r\n     * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\r\n     * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\r\n     */\r\n    Spherical.normalize = function(spherical, result) {\r\n      \r\n\r\n        if (!defined(result)) {\r\n            return new Spherical(spherical.clock, spherical.cone, 1.0);\r\n        }\r\n\r\n        result.clock = spherical.clock;\r\n        result.cone = spherical.cone;\r\n        result.magnitude = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the first spherical is equal to the second spherical, false otherwise.\r\n     *\r\n     * @param {Spherical} left The first Spherical to be compared.\r\n     * @param {Spherical} right The second Spherical to be compared.\r\n     * @returns {Boolean} true if the first spherical is equal to the second spherical, false otherwise.\r\n     */\r\n    Spherical.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.clock === right.clock) &&\r\n                (left.cone === right.cone) &&\r\n                (left.magnitude === right.magnitude));\r\n    };\r\n\r\n    /**\r\n     * Returns true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\r\n     *\r\n     * @param {Spherical} left The first Spherical to be compared.\r\n     * @param {Spherical} right The second Spherical to be compared.\r\n     * @param {Number} [epsilon=0.0] The epsilon to compare against.\r\n     * @returns {Boolean} true if the first spherical is within the provided epsilon of the second spherical, false otherwise.\r\n     */\r\n    Spherical.equalsEpsilon = function(left, right, epsilon) {\r\n        epsilon = defaultValue(epsilon, 0.0);\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (Math.abs(left.clock - right.clock) <= epsilon) &&\r\n                (Math.abs(left.cone - right.cone) <= epsilon) &&\r\n                (Math.abs(left.magnitude - right.magnitude) <= epsilon));\r\n    };\r\n\r\n    /**\r\n     * Returns true if this spherical is equal to the provided spherical, false otherwise.\r\n     *\r\n     * @param {Spherical} other The Spherical to be compared.\r\n     * @returns {Boolean} true if this spherical is equal to the provided spherical, false otherwise.\r\n     */\r\n    Spherical.prototype.equals = function(other) {\r\n        return Spherical.equals(this, other);\r\n    };\r\n\r\n    /**\r\n     * Creates a duplicate of this Spherical.\r\n     *\r\n     * @param {Spherical} [result] The object to store the result into, if undefined a new instance will be created.\r\n     * @returns {Spherical} The modified result parameter or a new instance if result was undefined.\r\n     */\r\n    Spherical.prototype.clone = function(result) {\r\n        return Spherical.clone(this, result);\r\n    };\r\n\r\n    /**\r\n    * Returns true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\r\n    *\r\n    * @param {Spherical} other The Spherical to be compared.\r\n    * @param {Number} epsilon The epsilon to compare against.\r\n    * @returns {Boolean} true if this spherical is within the provided epsilon of the provided spherical, false otherwise.\r\n    */\r\n    Spherical.prototype.equalsEpsilon = function(other, epsilon) {\r\n        return Spherical.equalsEpsilon(this, other, epsilon);\r\n    };\r\n\r\n    /**\r\n    * Returns a string representing this instance in the format (clock, cone, magnitude).\r\n    *\r\n    * @returns {String} A string representing this instance.\r\n    */\r\n    Spherical.prototype.toString = function() {\r\n        return '(' + this.clock + ', ' + this.cone + ', ' + this.magnitude + ')';\r\n    };\r\n\r\n    return Spherical;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Core/Spherical.js\n// module id = 2238\n// module chunks = 0","define([\r\n        '../Core/freezeObject',\r\n        '../Core/Math'\r\n    ], function(\r\n        freezeObject,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines different modes for blending between a target color and a primitive's source color.\r\n     *\r\n     * HIGHLIGHT multiplies the source color by the target color\r\n     * REPLACE replaces the source color with the target color\r\n     * MIX blends the source color and target color together\r\n     *\r\n     * @exports ColorBlendMode\r\n     *\r\n     * @see Model.colorBlendMode\r\n     */\r\n    var ColorBlendMode = {\r\n        HIGHLIGHT : 0,\r\n        REPLACE : 1,\r\n        MIX : 2\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    ColorBlendMode.getColorBlend = function(colorBlendMode, colorBlendAmount) {\r\n        if (colorBlendMode === ColorBlendMode.HIGHLIGHT) {\r\n            return 0.0;\r\n        } else if (colorBlendMode === ColorBlendMode.REPLACE) {\r\n            return 1.0;\r\n        } else if (colorBlendMode === ColorBlendMode.MIX) {\r\n            // The value 0.0 is reserved for highlight, so clamp to just above 0.0.\r\n            return CesiumMath.clamp(colorBlendAmount, CesiumMath.EPSILON4, 1.0);\r\n        }\r\n    };\r\n\r\n    return freezeObject(ColorBlendMode);\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/Scene/ColorBlendMode.js\n// module id = 2239\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Event',\r\n        './CompositeProperty',\r\n        './Property'\r\n    ], function(\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Event,\r\n        CompositeProperty,\r\n        Property) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A {@link CompositeProperty} which is also a {@link MaterialProperty}.\r\n     *\r\n     * @alias CompositeMaterialProperty\r\n     * @constructor\r\n     */\r\n    function CompositeMaterialProperty() {\r\n        this._definitionChanged = new Event();\r\n        this._composite = new CompositeProperty();\r\n        this._composite.definitionChanged.addEventListener(CompositeMaterialProperty.prototype._raiseDefinitionChanged, this);\r\n    }\r\n\r\n    defineProperties(CompositeMaterialProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  A property is considered\r\n         * constant if getValue always returns the same result for the current definition.\r\n         * @memberof CompositeMaterialProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return this._composite.isConstant;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is changed whenever setValue is called with data different\r\n         * than the current value.\r\n         * @memberof CompositeMaterialProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the interval collection.\r\n         * @memberof CompositeMaterialProperty.prototype\r\n         *\r\n         * @type {TimeIntervalCollection}\r\n         */\r\n        intervals : {\r\n            get : function() {\r\n                return this._composite._intervals;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Gets the {@link Material} type at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the type.\r\n     * @returns {String} The type of material.\r\n     */\r\n    CompositeMaterialProperty.prototype.getType = function(time) {\r\n        \r\n\r\n        var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(time);\r\n        if (defined(innerProperty)) {\r\n            return innerProperty.getType(time);\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    CompositeMaterialProperty.prototype.getValue = function(time, result) {\r\n        \r\n\r\n        var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(time);\r\n        if (defined(innerProperty)) {\r\n            return innerProperty.getValue(time, result);\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    CompositeMaterialProperty.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof CompositeMaterialProperty && //\r\n                this._composite.equals(other._composite, Property.equals));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CompositeMaterialProperty.prototype._raiseDefinitionChanged = function() {\r\n        this._definitionChanged.raiseEvent(this);\r\n    };\r\n\r\n    return CompositeMaterialProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/CompositeMaterialProperty.js\n// module id = 2240\n// module chunks = 0","define([\r\n        '../Core/Cartesian2',\r\n        '../Core/Color',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/Event',\r\n        './createPropertyDescriptor',\r\n        './Property'\r\n    ], function(\r\n        Cartesian2,\r\n        Color,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Event,\r\n        createPropertyDescriptor,\r\n        Property) {\r\n    'use strict';\r\n\r\n    var defaultColor = Color.WHITE;\r\n    var defaultCellAlpha = 0.1;\r\n    var defaultLineCount = new Cartesian2(8, 8);\r\n    var defaultLineOffset = new Cartesian2(0, 0);\r\n    var defaultLineThickness = new Cartesian2(1, 1);\r\n\r\n    /**\r\n     * A {@link MaterialProperty} that maps to grid {@link Material} uniforms.\r\n     * @alias GridMaterialProperty\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Property} [options.color=Color.WHITE] A Property specifying the grid {@link Color}.\r\n     * @param {Property} [options.cellAlpha=0.1] A numeric Property specifying cell alpha values.\r\n     * @param {Property} [options.lineCount=new Cartesian2(8, 8)] A {@link Cartesian2} Property specifying the number of grid lines along each axis.\r\n     * @param {Property} [options.lineThickness=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\r\n     * @param {Property} [options.lineOffset=new Cartesian2(0.0, 0.0)] A {@link Cartesian2} Property specifying starting offset of grid lines along each axis.\r\n     *\r\n     * @constructor\r\n     */\r\n    function GridMaterialProperty(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._definitionChanged = new Event();\r\n        this._color = undefined;\r\n        this._colorSubscription = undefined;\r\n        this._cellAlpha = undefined;\r\n        this._cellAlphaSubscription = undefined;\r\n        this._lineCount = undefined;\r\n        this._lineCountSubscription = undefined;\r\n        this._lineThickness = undefined;\r\n        this._lineThicknessSubscription = undefined;\r\n        this._lineOffset = undefined;\r\n        this._lineOffsetSubscription = undefined;\r\n\r\n        this.color = options.color;\r\n        this.cellAlpha = options.cellAlpha;\r\n        this.lineCount = options.lineCount;\r\n        this.lineThickness = options.lineThickness;\r\n        this.lineOffset = options.lineOffset;\r\n    }\r\n\r\n    defineProperties(GridMaterialProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  A property is considered\r\n         * constant if getValue always returns the same result for the current definition.\r\n         * @memberof GridMaterialProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return Property.isConstant(this._color) &&\r\n                       Property.isConstant(this._cellAlpha) &&\r\n                       Property.isConstant(this._lineCount) &&\r\n                       Property.isConstant(this._lineThickness) &&\r\n                       Property.isConstant(this._lineOffset);\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is considered to have changed if a call to getValue would return\r\n         * a different result for the same time.\r\n         * @memberof GridMaterialProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the Property specifying the grid {@link Color}.\r\n         * @memberof GridMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default Color.WHITE\r\n         */\r\n        color : createPropertyDescriptor('color'),\r\n        /**\r\n         * Gets or sets the numeric Property specifying cell alpha values.\r\n         * @memberof GridMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default 0.1\r\n         */\r\n        cellAlpha : createPropertyDescriptor('cellAlpha'),\r\n        /**\r\n         * Gets or sets the {@link Cartesian2} Property specifying the number of grid lines along each axis.\r\n         * @memberof GridMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default new Cartesian2(8.0, 8.0)\r\n         */\r\n        lineCount : createPropertyDescriptor('lineCount'),\r\n        /**\r\n         * Gets or sets the {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\r\n         * @memberof GridMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default new Cartesian2(1.0, 1.0)\r\n         */\r\n        lineThickness : createPropertyDescriptor('lineThickness'),\r\n        /**\r\n         * Gets or sets the {@link Cartesian2} Property specifying the starting offset of grid lines along each axis.\r\n         * @memberof GridMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default new Cartesian2(0.0, 0.0)\r\n         */\r\n        lineOffset : createPropertyDescriptor('lineOffset')\r\n    });\r\n\r\n    /**\r\n     * Gets the {@link Material} type at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the type.\r\n     * @returns {String} The type of material.\r\n     */\r\n    GridMaterialProperty.prototype.getType = function(time) {\r\n        return 'Grid';\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    GridMaterialProperty.prototype.getValue = function(time, result) {\r\n        if (!defined(result)) {\r\n            result = {};\r\n        }\r\n        result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\r\n        result.cellAlpha = Property.getValueOrDefault(this._cellAlpha, time, defaultCellAlpha);\r\n        result.lineCount = Property.getValueOrClonedDefault(this._lineCount, time, defaultLineCount, result.lineCount);\r\n        result.lineThickness = Property.getValueOrClonedDefault(this._lineThickness, time, defaultLineThickness, result.lineThickness);\r\n        result.lineOffset = Property.getValueOrClonedDefault(this._lineOffset, time, defaultLineOffset, result.lineOffset);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    GridMaterialProperty.prototype.equals = function(other) {\r\n        return this === other || //\r\n        (other instanceof GridMaterialProperty && //\r\n        Property.equals(this._color, other._color) && //\r\n        Property.equals(this._cellAlpha, other._cellAlpha) && //\r\n        Property.equals(this._lineCount, other._lineCount) && //\r\n        Property.equals(this._lineThickness, other._lineThickness) && //\r\n        Property.equals(this._lineOffset, other._lineOffset));\r\n    };\r\n\r\n    return GridMaterialProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/GridMaterialProperty.js\n// module id = 2241\n// module chunks = 0","define([\r\n        '../Core/Color',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/Event',\r\n        './createPropertyDescriptor',\r\n        './Property'\r\n    ], function(\r\n        Color,\r\n        defined,\r\n        defineProperties,\r\n        Event,\r\n        createPropertyDescriptor,\r\n        Property) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A {@link MaterialProperty} that maps to PolylineArrow {@link Material} uniforms.\r\n     *\r\n     * @param {Property} [color=Color.WHITE] The {@link Color} Property to be used.\r\n     *\r\n     * @alias PolylineArrowMaterialProperty\r\n     * @constructor\r\n     */\r\n    function PolylineArrowMaterialProperty(color) {\r\n        this._definitionChanged = new Event();\r\n        this._color = undefined;\r\n        this._colorSubscription = undefined;\r\n        this.color = color;\r\n    }\r\n\r\n    defineProperties(PolylineArrowMaterialProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  A property is considered\r\n         * constant if getValue always returns the same result for the current definition.\r\n         * @memberof PolylineArrowMaterialProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return Property.isConstant(this._color);\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is considered to have changed if a call to getValue would return\r\n         * a different result for the same time.\r\n         * @memberof PolylineArrowMaterialProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the {@link Color} {@link Property}.\r\n         * @memberof PolylineArrowMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default Color.WHITE\r\n         */\r\n        color : createPropertyDescriptor('color')\r\n    });\r\n\r\n    /**\r\n     * Gets the {@link Material} type at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the type.\r\n     * @returns {String} The type of material.\r\n     */\r\n    PolylineArrowMaterialProperty.prototype.getType = function(time) {\r\n        return 'PolylineArrow';\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    PolylineArrowMaterialProperty.prototype.getValue = function(time, result) {\r\n        if (!defined(result)) {\r\n            result = {};\r\n        }\r\n        result.color = Property.getValueOrClonedDefault(this._color, time, Color.WHITE, result.color);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    PolylineArrowMaterialProperty.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof PolylineArrowMaterialProperty && //\r\n                Property.equals(this._color, other._color));\r\n    };\r\n\r\n    return PolylineArrowMaterialProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/PolylineArrowMaterialProperty.js\n// module id = 2242\n// module chunks = 0","define([\r\n        '../Core/Color',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/Event',\r\n        './createPropertyDescriptor',\r\n        './Property'\r\n    ], function(\r\n        Color,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Event,\r\n        createPropertyDescriptor,\r\n        Property) {\r\n    'use strict';\r\n\r\n    var defaultColor = Color.WHITE;\r\n    var defaultGapColor = Color.TRANSPARENT;\r\n    var defaultDashLength = 16.0;\r\n    var defaultDashPattern = 255.0;\r\n\r\n    /**\r\n     * A {@link MaterialProperty} that maps to polyline dash {@link Material} uniforms.\r\n     * @alias PolylineDashMaterialProperty\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Property} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\r\n     * @param {Property} [options.gapColor=Color.TRANSPARENT] A Property specifying the {@link Color} of the gaps in the line.\r\n     * @param {Property} [options.dashLength=16.0] A numeric Property specifying the length of the dash pattern in pixel.s\r\n     * @param {Property} [options.dashPattern=255.0] A numeric Property specifying a 16 bit pattern for the dash\r\n     */\r\n    function PolylineDashMaterialProperty(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._definitionChanged = new Event();\r\n        this._color = undefined;\r\n        this._colorSubscription = undefined;\r\n        this._gapColor = undefined;\r\n        this._gapColorSubscription = undefined;\r\n        this._dashLength = undefined;\r\n        this._dashLengthSubscription = undefined;\r\n        this._dashPattern = undefined;\r\n        this._dashPatternSubscription = undefined;\r\n\r\n        this.color = options.color;\r\n        this.gapColor = options.gapColor;\r\n        this.dashLength = options.dashLength;\r\n        this.dashPattern = options.dashPattern;\r\n    }\r\n\r\n    defineProperties(PolylineDashMaterialProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  A property is considered\r\n         * constant if getValue always returns the same result for the current definition.\r\n         * @memberof PolylineDashMaterialProperty.prototype\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return (Property.isConstant(this._color) &&\r\n                        Property.isConstant(this._gapColor) &&\r\n                        Property.isConstant(this._dashLength) &&\r\n                        Property.isConstant(this._dashPattern));\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is considered to have changed if a call to getValue would return\r\n         * a different result for the same time.\r\n         * @memberof PolylineDashMaterialProperty.prototype\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the Property specifying the {@link Color} of the line.\r\n         * @memberof PolylineDashMaterialProperty.prototype\r\n         * @type {Property}\r\n         */\r\n        color : createPropertyDescriptor('color'),\r\n        /**\r\n         * Gets or sets the Property specifying the {@link Color} of the gaps in the line.\r\n         * @memberof PolylineDashMaterialProperty.prototype\r\n         * @type {Property}\r\n         */\r\n        gapColor : createPropertyDescriptor('gapColor'),\r\n        /**\r\n         * Gets or sets the numeric Property specifying the length of a dash cycle\r\n         * @memberof PolylineDashMaterialProperty.prototype\r\n         * @type {Property}\r\n         */\r\n        dashLength : createPropertyDescriptor('dashLength'),\r\n        /**\r\n         * Gets or sets the numeric Property specifying a dash pattern\r\n         * @memberof PolylineDashMaterialProperty.prototype\r\n         * @type {Property}\r\n         */\r\n        dashPattern : createPropertyDescriptor('dashPattern')\r\n    });\r\n\r\n    /**\r\n     * Gets the {@link Material} type at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the type.\r\n     * @returns {String} The type of material.\r\n     */\r\n    PolylineDashMaterialProperty.prototype.getType = function(time) {\r\n        return 'PolylineDash';\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    PolylineDashMaterialProperty.prototype.getValue = function(time, result) {\r\n        if (!defined(result)) {\r\n            result = {};\r\n        }\r\n        result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\r\n        result.gapColor = Property.getValueOrClonedDefault(this._gapColor, time, defaultGapColor, result.gapColor);\r\n        result.dashLength = Property.getValueOrDefault(this._dashLength, time, defaultDashLength, result.dashLength);\r\n        result.dashPattern = Property.getValueOrDefault(this._dashPattern, time, defaultDashPattern, result.dashPattern);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    PolylineDashMaterialProperty.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof PolylineDashMaterialProperty &&\r\n                Property.equals(this._color, other._color) &&\r\n                Property.equals(this._gapColor, other._gapColor) &&\r\n                Property.equals(this._dashLength, other._dashLength) &&\r\n                Property.equals(this._dashPattern, other._dashPattern)\r\n                );\r\n    };\r\n\r\n    return PolylineDashMaterialProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/PolylineDashMaterialProperty.js\n// module id = 2243\n// module chunks = 0","define([\r\n        '../Core/Color',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/Event',\r\n        './createPropertyDescriptor',\r\n        './Property'\r\n    ], function(\r\n        Color,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Event,\r\n        createPropertyDescriptor,\r\n        Property) {\r\n    'use strict';\r\n\r\n    var defaultColor = Color.WHITE;\r\n    var defaultOutlineColor = Color.BLACK;\r\n    var defaultOutlineWidth = 1.0;\r\n\r\n    /**\r\n     * A {@link MaterialProperty} that maps to polyline outline {@link Material} uniforms.\r\n     * @alias PolylineOutlineMaterialProperty\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Property} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\r\n     * @param {Property} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\r\n     * @param {Property} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline, in pixels.\r\n     */\r\n    function PolylineOutlineMaterialProperty(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._definitionChanged = new Event();\r\n        this._color = undefined;\r\n        this._colorSubscription = undefined;\r\n        this._outlineColor = undefined;\r\n        this._outlineColorSubscription = undefined;\r\n        this._outlineWidth = undefined;\r\n        this._outlineWidthSubscription = undefined;\r\n\r\n        this.color = options.color;\r\n        this.outlineColor = options.outlineColor;\r\n        this.outlineWidth = options.outlineWidth;\r\n    }\r\n\r\n    defineProperties(PolylineOutlineMaterialProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  A property is considered\r\n         * constant if getValue always returns the same result for the current definition.\r\n         * @memberof PolylineOutlineMaterialProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return Property.isConstant(this._color) && Property.isConstant(this._outlineColor) && Property.isConstant(this._outlineWidth);\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is considered to have changed if a call to getValue would return\r\n         * a different result for the same time.\r\n         * @memberof PolylineOutlineMaterialProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the Property specifying the {@link Color} of the line.\r\n         * @memberof PolylineOutlineMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default Color.WHITE\r\n         */\r\n        color : createPropertyDescriptor('color'),\r\n        /**\r\n         * Gets or sets the Property specifying the {@link Color} of the outline.\r\n         * @memberof PolylineOutlineMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default Color.BLACK\r\n         */\r\n        outlineColor : createPropertyDescriptor('outlineColor'),\r\n        /**\r\n         * Gets or sets the numeric Property specifying the width of the outline.\r\n         * @memberof PolylineOutlineMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default 1.0\r\n         */\r\n        outlineWidth : createPropertyDescriptor('outlineWidth')\r\n    });\r\n\r\n    /**\r\n     * Gets the {@link Material} type at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the type.\r\n     * @returns {String} The type of material.\r\n     */\r\n    PolylineOutlineMaterialProperty.prototype.getType = function(time) {\r\n        return 'PolylineOutline';\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    PolylineOutlineMaterialProperty.prototype.getValue = function(time, result) {\r\n        if (!defined(result)) {\r\n            result = {};\r\n        }\r\n        result.color = Property.getValueOrClonedDefault(this._color, time, defaultColor, result.color);\r\n        result.outlineColor = Property.getValueOrClonedDefault(this._outlineColor, time, defaultOutlineColor, result.outlineColor);\r\n        result.outlineWidth = Property.getValueOrDefault(this._outlineWidth, time, defaultOutlineWidth);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    PolylineOutlineMaterialProperty.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof PolylineOutlineMaterialProperty && //\r\n                Property.equals(this._color, other._color) && //\r\n                Property.equals(this._outlineColor, other._outlineColor) && //\r\n                Property.equals(this._outlineWidth, other._outlineWidth));\r\n    };\r\n\r\n    return PolylineOutlineMaterialProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/PolylineOutlineMaterialProperty.js\n// module id = 2244\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Event',\r\n        '../Core/EventHelper',\r\n        './Property'\r\n    ], function(\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Event,\r\n        EventHelper,\r\n        Property) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A {@link Property} whose value is an array whose items are the computed value\r\n     * of other property instances.\r\n     *\r\n     * @alias PropertyArray\r\n     * @constructor\r\n     *\r\n     * @param {Property[]} [value] An array of Property instances.\r\n     */\r\n    function PropertyArray(value) {\r\n        this._value = undefined;\r\n        this._definitionChanged = new Event();\r\n        this._eventHelper = new EventHelper();\r\n        this.setValue(value);\r\n    }\r\n\r\n    defineProperties(PropertyArray.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  This property\r\n         * is considered constant if all property items in the array are constant.\r\n         * @memberof PropertyArray.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                var value = this._value;\r\n                if (!defined(value)) {\r\n                    return true;\r\n                }\r\n                var length = value.length;\r\n                for (var i = 0; i < length; i++) {\r\n                    if (!Property.isConstant(value[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is changed whenever setValue is called with data different\r\n         * than the current value or one of the properties in the array also changes.\r\n         * @memberof PropertyArray.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Gets the value of the property.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object[]} The modified result parameter, which is an array of values produced by evaluating each of the contained properties at the given time or a new instance if the result parameter was not supplied.\r\n     */\r\n    PropertyArray.prototype.getValue = function(time, result) {\r\n        \r\n\r\n        var value = this._value;\r\n        if (!defined(value)) {\r\n            return undefined;\r\n        }\r\n\r\n        var length = value.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length);\r\n        }\r\n        var i = 0;\r\n        var x = 0;\r\n        while (i < length) {\r\n            var property = this._value[i];\r\n            var itemValue = property.getValue(time, result[i]);\r\n            if (defined(itemValue)) {\r\n                result[x] = itemValue;\r\n                x++;\r\n            }\r\n            i++;\r\n        }\r\n        result.length = x;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Sets the value of the property.\r\n     *\r\n     * @param {Property[]} value An array of Property instances.\r\n     */\r\n    PropertyArray.prototype.setValue = function(value) {\r\n        var eventHelper = this._eventHelper;\r\n        eventHelper.removeAll();\r\n\r\n        if (defined(value)) {\r\n            this._value = value.slice();\r\n            var length = value.length;\r\n            for (var i = 0; i < length; i++) {\r\n                var property = value[i];\r\n                if (defined(property)) {\r\n                    eventHelper.add(property.definitionChanged, PropertyArray.prototype._raiseDefinitionChanged, this);\r\n                }\r\n            }\r\n        } else {\r\n            this._value = undefined;\r\n        }\r\n        this._definitionChanged.raiseEvent(this);\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    PropertyArray.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof PropertyArray && //\r\n                Property.arrayEquals(this._value, other._value));\r\n    };\r\n\r\n    PropertyArray.prototype._raiseDefinitionChanged = function() {\r\n        this._definitionChanged.raiseEvent(this);\r\n    };\r\n\r\n    return PropertyArray;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/PropertyArray.js\n// module id = 2245\n// module chunks = 0","define([\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/DeveloperError',\r\n        '../Core/Math'\r\n    ], function(\r\n        defaultValue,\r\n        defined,\r\n        DeveloperError,\r\n        CesiumMath) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Represents a {@link Packable} number that always interpolates values\r\n     * towards the shortest angle of rotation. This object is never used directly\r\n     * but is instead passed to the constructor of {@link SampledProperty}\r\n     * in order to represent a two-dimensional angle of rotation.\r\n     *\r\n     * @exports Rotation\r\n     *\r\n     *\r\n     * @example\r\n     * var time1 = Cesium.JulianDate.fromIso8601('2010-05-07T00:00:00');\r\n     * var time2 = Cesium.JulianDate.fromIso8601('2010-05-07T00:01:00');\r\n     * var time3 = Cesium.JulianDate.fromIso8601('2010-05-07T00:02:00');\r\n     *\r\n     * var property = new Cesium.SampledProperty(Cesium.Rotation);\r\n     * property.addSample(time1, 0);\r\n     * property.addSample(time3, Cesium.Math.toRadians(350));\r\n     *\r\n     * //Getting the value at time2 will equal 355 degrees instead\r\n     * //of 175 degrees (which is what you get if you construct\r\n     * //a SampledProperty(Number) instead.  Note, the actual\r\n     * //return value is in radians, not degrees.\r\n     * property.getValue(time2);\r\n     *\r\n     * @see PackableForInterpolation\r\n     */\r\n    var Rotation = {\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        packedLength : 1,\r\n\r\n        /**\r\n         * Stores the provided instance into the provided array.\r\n         *\r\n         * @param {Rotation} value The value to pack.\r\n         * @param {Number[]} array The array to pack into.\r\n         * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n         *\r\n         * @returns {Number[]} The array that was packed into\r\n         */\r\n        pack : function(value, array, startingIndex) {\r\n            \r\n\r\n            startingIndex = defaultValue(startingIndex, 0);\r\n            array[startingIndex] = value;\r\n\r\n            return array;\r\n        },\r\n\r\n        /**\r\n         * Retrieves an instance from a packed array.\r\n         *\r\n         * @param {Number[]} array The packed array.\r\n         * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n         * @param {Rotation} [result] The object into which to store the result.\r\n         * @returns {Rotation} The modified result parameter or a new Rotation instance if one was not provided.\r\n         */\r\n        unpack : function(array, startingIndex, result) {\r\n            \r\n\r\n            startingIndex = defaultValue(startingIndex, 0);\r\n            return array[startingIndex];\r\n        },\r\n\r\n        /**\r\n         * Converts a packed array into a form suitable for interpolation.\r\n         *\r\n         * @param {Number[]} packedArray The packed array.\r\n         * @param {Number} [startingIndex=0] The index of the first element to be converted.\r\n         * @param {Number} [lastIndex=packedArray.length] The index of the last element to be converted.\r\n         * @param {Number[]} result The object into which to store the result.\r\n         */\r\n        convertPackedArrayForInterpolation : function(packedArray, startingIndex, lastIndex, result) {\r\n            \r\n\r\n            startingIndex = defaultValue(startingIndex, 0);\r\n            lastIndex = defaultValue(lastIndex, packedArray.length);\r\n\r\n            var previousValue;\r\n            for (var i = 0, len = lastIndex - startingIndex + 1; i < len; i++) {\r\n                var value = packedArray[startingIndex + i];\r\n                if (i === 0 || Math.abs(previousValue - value) < Math.PI) {\r\n                    result[i] = value;\r\n                } else {\r\n                    result[i] = value - CesiumMath.TWO_PI;\r\n                }\r\n                previousValue = value;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Retrieves an instance from a packed array converted with {@link Rotation.convertPackedArrayForInterpolation}.\r\n         *\r\n         * @param {Number[]} array The array previously packed for interpolation.\r\n         * @param {Number[]} sourceArray The original packed array.\r\n         * @param {Number} [firstIndex=0] The firstIndex used to convert the array.\r\n         * @param {Number} [lastIndex=packedArray.length] The lastIndex used to convert the array.\r\n         * @param {Rotation} [result] The object into which to store the result.\r\n         * @returns {Rotation} The modified result parameter or a new Rotation instance if one was not provided.\r\n         */\r\n        unpackInterpolationResult : function(array, sourceArray, firstIndex, lastIndex, result) {\r\n            \r\n\r\n            result = array[0];\r\n            if (result < 0) {\r\n                return result + CesiumMath.TWO_PI;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n\r\n    return Rotation;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/Rotation.js\n// module id = 2246\n// module chunks = 0","define([\r\n        '../Core/Color',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/Event',\r\n        './createPropertyDescriptor',\r\n        './Property',\r\n        './StripeOrientation'\r\n    ], function(\r\n        Color,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Event,\r\n        createPropertyDescriptor,\r\n        Property,\r\n        StripeOrientation) {\r\n    'use strict';\r\n\r\n    var defaultOrientation = StripeOrientation.HORIZONTAL;\r\n    var defaultEvenColor = Color.WHITE;\r\n    var defaultOddColor = Color.BLACK;\r\n    var defaultOffset = 0;\r\n    var defaultRepeat = 1;\r\n\r\n    /**\r\n     * A {@link MaterialProperty} that maps to stripe {@link Material} uniforms.\r\n     * @alias StripeMaterialProperty\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Property} [options.evenColor=Color.WHITE] A Property specifying the first {@link Color}.\r\n     * @param {Property} [options.oddColor=Color.BLACK] A Property specifying the second {@link Color}.\r\n     * @param {Property} [options.repeat=1] A numeric Property specifying how many times the stripes repeat.\r\n     * @param {Property} [options.offset=0] A numeric Property specifying how far into the pattern to start the material.\r\n     * @param {Property} [options.orientation=StripeOrientation.HORIZONTAL] A Property specifying the {@link StripeOrientation}.\r\n     */\r\n    function StripeMaterialProperty(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._definitionChanged = new Event();\r\n\r\n        this._orientation = undefined;\r\n        this._orientationSubscription = undefined;\r\n\r\n        this._evenColor = undefined;\r\n        this._evenColorSubscription = undefined;\r\n\r\n        this._oddColor = undefined;\r\n        this._oddColorSubscription = undefined;\r\n\r\n        this._offset = undefined;\r\n        this._offsetSubscription = undefined;\r\n\r\n        this._repeat = undefined;\r\n        this._repeatSubscription = undefined;\r\n\r\n        this.orientation = options.orientation;\r\n        this.evenColor = options.evenColor;\r\n        this.oddColor = options.oddColor;\r\n        this.offset = options.offset;\r\n        this.repeat = options.repeat;\r\n    }\r\n\r\n    defineProperties(StripeMaterialProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.  A property is considered\r\n         * constant if getValue always returns the same result for the current definition.\r\n         * @memberof StripeMaterialProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return Property.isConstant(this._orientation) && //\r\n                       Property.isConstant(this._evenColor) && //\r\n                       Property.isConstant(this._oddColor) && //\r\n                       Property.isConstant(this._offset) && //\r\n                       Property.isConstant(this._repeat);\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * The definition is considered to have changed if a call to getValue would return\r\n         * a different result for the same time.\r\n         * @memberof StripeMaterialProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the Property specifying the {@link StripeOrientation}/\r\n         * @memberof StripeMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default StripeOrientation.HORIZONTAL\r\n         */\r\n        orientation : createPropertyDescriptor('orientation'),\r\n        /**\r\n         * Gets or sets the Property specifying the first {@link Color}.\r\n         * @memberof StripeMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default Color.WHITE\r\n         */\r\n        evenColor : createPropertyDescriptor('evenColor'),\r\n        /**\r\n         * Gets or sets the Property specifying the second {@link Color}.\r\n         * @memberof StripeMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default Color.BLACK\r\n         */\r\n        oddColor : createPropertyDescriptor('oddColor'),\r\n        /**\r\n         * Gets or sets the numeric Property specifying the point into the pattern\r\n         * to begin drawing; with 0.0 being the beginning of the even color, 1.0 the beginning\r\n         * of the odd color, 2.0 being the even color again, and any multiple or fractional values\r\n         * being in between.\r\n         * @memberof StripeMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default 0.0\r\n         */\r\n        offset : createPropertyDescriptor('offset'),\r\n        /**\r\n         * Gets or sets the numeric Property specifying how many times the stripes repeat.\r\n         * @memberof StripeMaterialProperty.prototype\r\n         * @type {Property}\r\n         * @default 1.0\r\n         */\r\n        repeat : createPropertyDescriptor('repeat')\r\n    });\r\n\r\n    /**\r\n     * Gets the {@link Material} type at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the type.\r\n     * @returns {String} The type of material.\r\n     */\r\n    StripeMaterialProperty.prototype.getType = function(time) {\r\n        return 'Stripe';\r\n    };\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} time The time for which to retrieve the value.\r\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    StripeMaterialProperty.prototype.getValue = function(time, result) {\r\n        if (!defined(result)) {\r\n            result = {};\r\n        }\r\n        result.horizontal = Property.getValueOrDefault(this._orientation, time, defaultOrientation) === StripeOrientation.HORIZONTAL;\r\n        result.evenColor = Property.getValueOrClonedDefault(this._evenColor, time, defaultEvenColor, result.evenColor);\r\n        result.oddColor = Property.getValueOrClonedDefault(this._oddColor, time, defaultOddColor, result.oddColor);\r\n        result.offset = Property.getValueOrDefault(this._offset, time, defaultOffset);\r\n        result.repeat = Property.getValueOrDefault(this._repeat, time, defaultRepeat);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    StripeMaterialProperty.prototype.equals = function(other) {\r\n        return this === other || //\r\n               (other instanceof StripeMaterialProperty && //\r\n                       Property.equals(this._orientation, other._orientation) && //\r\n                       Property.equals(this._evenColor, other._evenColor) && //\r\n                       Property.equals(this._oddColor, other._oddColor) && //\r\n                       Property.equals(this._offset, other._offset) && //\r\n                       Property.equals(this._repeat, other._repeat));\r\n    };\r\n\r\n    return StripeMaterialProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/StripeMaterialProperty.js\n// module id = 2247\n// module chunks = 0","define([\r\n        '../Core/Cartesian3',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/Ellipsoid',\r\n        '../Core/Event',\r\n        '../Core/Matrix3',\r\n        '../Core/Quaternion',\r\n        '../Core/Transforms',\r\n        './Property',\r\n        './VelocityVectorProperty'\r\n    ], function(\r\n        Cartesian3,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        Ellipsoid,\r\n        Event,\r\n        Matrix3,\r\n        Quaternion,\r\n        Transforms,\r\n        Property,\r\n        VelocityVectorProperty) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A {@link Property} which evaluates to a {@link Quaternion} rotation\r\n     * based on the velocity of the provided {@link PositionProperty}.\r\n     *\r\n     * @alias VelocityOrientationProperty\r\n     * @constructor\r\n     *\r\n     * @param {Property} [position] The position property used to compute the orientation.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid used to determine which way is up.\r\n     *\r\n     * @example\r\n     * //Create an entity with position and orientation.\r\n     * var position = new Cesium.SampledProperty();\r\n     * position.addSamples(...);\r\n     * var entity = viewer.entities.add({\r\n     *   position : position,\r\n     *   orientation : new Cesium.VelocityOrientationProperty(position)\r\n     * }));\r\n     */\r\n    function VelocityOrientationProperty(position, ellipsoid) {\r\n        this._velocityVectorProperty = new VelocityVectorProperty(position, true);\r\n        this._subscription = undefined;\r\n        this._ellipsoid = undefined;\r\n        this._definitionChanged = new Event();\r\n\r\n        this.ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var that = this;\r\n        this._velocityVectorProperty.definitionChanged.addEventListener(function() {\r\n            that._definitionChanged.raiseEvent(that);\r\n        });\r\n    }\r\n\r\n    defineProperties(VelocityOrientationProperty.prototype, {\r\n        /**\r\n         * Gets a value indicating if this property is constant.\r\n         * @memberof VelocityOrientationProperty.prototype\r\n         *\r\n         * @type {Boolean}\r\n         * @readonly\r\n         */\r\n        isConstant : {\r\n            get : function() {\r\n                return Property.isConstant(this._velocityVectorProperty);\r\n            }\r\n        },\r\n        /**\r\n         * Gets the event that is raised whenever the definition of this property changes.\r\n         * @memberof VelocityOrientationProperty.prototype\r\n         *\r\n         * @type {Event}\r\n         * @readonly\r\n         */\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the position property used to compute orientation.\r\n         * @memberof VelocityOrientationProperty.prototype\r\n         *\r\n         * @type {Property}\r\n         */\r\n        position : {\r\n            get : function() {\r\n                return this._velocityVectorProperty.position;\r\n            },\r\n            set : function(value) {\r\n                this._velocityVectorProperty.position = value;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the ellipsoid used to determine which way is up.\r\n         * @memberof VelocityOrientationProperty.prototype\r\n         *\r\n         * @type {Property}\r\n         */\r\n        ellipsoid : {\r\n            get : function() {\r\n                return this._ellipsoid;\r\n            },\r\n            set : function(value) {\r\n                var oldValue = this._ellipsoid;\r\n                if (oldValue !== value) {\r\n                    this._ellipsoid = value;\r\n                    this._definitionChanged.raiseEvent(this);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    var positionScratch = new Cartesian3();\r\n    var velocityScratch = new Cartesian3();\r\n    var rotationScratch = new Matrix3();\r\n\r\n    /**\r\n     * Gets the value of the property at the provided time.\r\n     *\r\n     * @param {JulianDate} [time] The time for which to retrieve the value.\r\n     * @param {Quaternion} [result] The object to store the value into, if omitted, a new instance is created and returned.\r\n     * @returns {Quaternion} The modified result parameter or a new instance if the result parameter was not supplied.\r\n     */\r\n    VelocityOrientationProperty.prototype.getValue = function(time, result) {\r\n        var velocity = this._velocityVectorProperty._getValue(time, velocityScratch, positionScratch);\r\n\r\n        if (!defined(velocity)) {\r\n            return undefined;\r\n        }\r\n\r\n        Transforms.rotationMatrixFromPositionVelocity(positionScratch, velocity, this._ellipsoid, rotationScratch);\r\n        return Quaternion.fromRotationMatrix(rotationScratch, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this property to the provided property and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Property} [other] The other property.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    VelocityOrientationProperty.prototype.equals = function(other) {\r\n        return this === other ||//\r\n               (other instanceof VelocityOrientationProperty &&\r\n                Property.equals(this._velocityVectorProperty, other._velocityVectorProperty) &&\r\n                (this._ellipsoid === other._ellipsoid ||\r\n                 this._ellipsoid.equals(other._ellipsoid)));\r\n    };\r\n\r\n    return VelocityOrientationProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/VelocityOrientationProperty.js\n// module id = 2248\n// module chunks = 0","(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module unless amdModuleId is set\r\n    define([], function () {\r\n      return (root['Autolinker'] = factory());\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like environments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory();\r\n  } else {\r\n    root['Autolinker'] = factory();\r\n  }\r\n}(this, function () {\r\n\r\n/*!\r\n * Autolinker.js\r\n * 0.17.1\r\n *\r\n * Copyright(c) 2015 Gregory Jacobs <greg@greg-jacobs.com>\r\n * MIT Licensed. http-colon-slashslash www.opensource.org/licenses/mit-license.php\r\n *\r\n * https-colon-slashslash github.com/gregjacobs/Autolinker.js\r\n */\r\n/**\r\n * @class Autolinker\r\n * @extends Object\r\n *\r\n * Utility class used to process a given string of text, and wrap the matches in\r\n * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\r\n *\r\n * Any of the configuration options may be provided in an Object (map) provided\r\n * to the Autolinker constructor, which will configure how the {@link #link link()}\r\n * method will process the links.\r\n *\r\n * For example:\r\n *\r\n *     var autolinker = new Autolinker( {\r\n *         newWindow : false,\r\n *         truncate  : 30\r\n *     } );\r\n *\r\n *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\r\n *     // produces: 'Joe went to <a href=\"http-colon-slashslash www.yahoo.com\">yahoo.com</a>'\r\n *\r\n *\r\n * The {@link #static-link static link()} method may also be used to inline options into a single call, which may\r\n * be more convenient for one-off uses. For example:\r\n *\r\n *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\r\n *         newWindow : false,\r\n *         truncate  : 30\r\n *     } );\r\n *     // produces: 'Joe went to <a href=\"http-colon-slashslash www.yahoo.com\">yahoo.com</a>'\r\n *\r\n *\r\n * ## Custom Replacements of Links\r\n *\r\n * If the configuration options do not provide enough flexibility, a {@link #replaceFn}\r\n * may be provided to fully customize the output of Autolinker. This function is\r\n * called once for each URL/Email/Phone#/Twitter Handle/Hashtag match that is\r\n * encountered.\r\n *\r\n * For example:\r\n *\r\n *     var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Twitter Handles, and Hashtags\r\n *\r\n *     var linkedText = Autolinker.link( input, {\r\n *         replaceFn : function( autolinker, match ) {\r\n *             console.log( \"href = \", match.getAnchorHref() );\r\n *             console.log( \"text = \", match.getAnchorText() );\r\n *\r\n *             switch( match.getType() ) {\r\n *                 case 'url' :\r\n *                     console.log( \"url: \", match.getUrl() );\r\n *\r\n *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\r\n *                         var tag = autolinker.getTagBuilder().build( match );  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\r\n *                         tag.setAttr( 'rel', 'nofollow' );\r\n *                         tag.addClass( 'external-link' );\r\n *\r\n *                         return tag;\r\n *\r\n *                     } else {\r\n *                         return true;  // let Autolinker perform its normal anchor tag replacement\r\n *                     }\r\n *\r\n *                 case 'email' :\r\n *                     var email = match.getEmail();\r\n *                     console.log( \"email: \", email );\r\n *\r\n *                     if( email === \"my@own.address\" ) {\r\n *                         return false;  // don't auto-link this particular email address; leave as-is\r\n *                     } else {\r\n *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\r\n *                     }\r\n *\r\n *                 case 'phone' :\r\n *                     var phoneNumber = match.getPhoneNumber();\r\n *                     console.log( phoneNumber );\r\n *\r\n *                     return '<a href=\"http-colon-slashslash newplace.to.link.phone.numbers.to/\">' + phoneNumber + '</a>';\r\n *\r\n *                 case 'twitter' :\r\n *                     var twitterHandle = match.getTwitterHandle();\r\n *                     console.log( twitterHandle );\r\n *\r\n *                     return '<a href=\"http-colon-slashslash newplace.to.link.twitter.handles.to/\">' + twitterHandle + '</a>';\r\n *\r\n *                 case 'hashtag' :\r\n *                     var hashtag = match.getHashtag();\r\n *                     console.log( hashtag );\r\n *\r\n *                     return '<a href=\"http-colon-slashslash newplace.to.link.hashtag.handles.to/\">' + hashtag + '</a>';\r\n *             }\r\n *         }\r\n *     } );\r\n *\r\n *\r\n * The function may return the following values:\r\n *\r\n * - `true` (Boolean): Allow Autolinker to replace the match as it normally would.\r\n * - `false` (Boolean): Do not replace the current match at all - leave as-is.\r\n * - Any String: If a string is returned from the function, the string will be used directly as the replacement HTML for\r\n *   the match.\r\n * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify an HTML tag before writing out its HTML text.\r\n *\r\n * @constructor\r\n * @param {Object} [config] The configuration options for the Autolinker instance, specified in an Object (map).\r\n */\r\nvar Autolinker = function( cfg ) {\r\n\tAutolinker.Util.assign( this, cfg );  // assign the properties of `cfg` onto the Autolinker instance. Prototype properties will be used for missing configs.\r\n\r\n\t// Validate the value of the `hashtag` cfg.\r\n\tvar hashtag = this.hashtag;\r\n\tif( hashtag !== false && hashtag !== 'twitter' && hashtag !== 'facebook' ) {\r\n\t\tthrow new Error( \"invalid `hashtag` cfg - see docs\" );\r\n\t}\r\n};\r\n\r\nAutolinker.prototype = {\r\n\tconstructor : Autolinker,  // fix constructor property\r\n\r\n\t/**\r\n\t * @cfg {Boolean} urls\r\n\t *\r\n\t * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\r\n\t */\r\n\turls : true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} email\r\n\t *\r\n\t * `true` if email addresses should be automatically linked, `false` if they should not be.\r\n\t */\r\n\temail : true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} twitter\r\n\t *\r\n\t * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\r\n\t */\r\n\ttwitter : true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} phone\r\n\t *\r\n\t * `true` if Phone numbers (\"(555)555-5555\") should be automatically linked, `false` if they should not be.\r\n\t */\r\n\tphone: true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean/String} hashtag\r\n\t *\r\n\t * A string for the service name to have hashtags (ex: \"#myHashtag\")\r\n\t * auto-linked to. The currently-supported values are:\r\n\t *\r\n\t * - 'twitter'\r\n\t * - 'facebook'\r\n\t *\r\n\t * Pass `false` to skip auto-linking of hashtags.\r\n\t */\r\n\thashtag : false,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} newWindow\r\n\t *\r\n\t * `true` if the links should open in a new window, `false` otherwise.\r\n\t */\r\n\tnewWindow : true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} stripPrefix\r\n\t *\r\n\t * `true` if 'http-colon-slashslash ' or 'https-colon-slashslash ' and/or the 'www.' should be stripped\r\n\t * from the beginning of URL links' text, `false` otherwise.\r\n\t */\r\n\tstripPrefix : true,\r\n\r\n\t/**\r\n\t * @cfg {Number} truncate\r\n\t *\r\n\t * A number for how many characters long matched text should be truncated to inside the text of\r\n\t * a link. If the matched text is over this number of characters, it will be truncated to this length by\r\n\t * adding a two period ellipsis ('..') to the end of the string.\r\n\t *\r\n\t * For example: A url like 'http-colon-slashslash www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look\r\n\t * something like this: 'yahoo.com/some/long/pat..'\r\n\t */\r\n\ttruncate : undefined,\r\n\r\n\t/**\r\n\t * @cfg {String} className\r\n\t *\r\n\t * A CSS class name to add to the generated links. This class will be added to all links, as well as this class\r\n\t * plus match suffixes for styling url/email/phone/twitter/hashtag links differently.\r\n\t *\r\n\t * For example, if this config is provided as \"myLink\", then:\r\n\t *\r\n\t * - URL links will have the CSS classes: \"myLink myLink-url\"\r\n\t * - Email links will have the CSS classes: \"myLink myLink-email\", and\r\n\t * - Twitter links will have the CSS classes: \"myLink myLink-twitter\"\r\n\t * - Phone links will have the CSS classes: \"myLink myLink-phone\"\r\n\t * - Hashtag links will have the CSS classes: \"myLink myLink-hashtag\"\r\n\t */\r\n\tclassName : \"\",\r\n\r\n\t/**\r\n\t * @cfg {Function} replaceFn\r\n\t *\r\n\t * A function to individually process each match found in the input string.\r\n\t *\r\n\t * See the class's description for usage.\r\n\t *\r\n\t * This function is called with the following parameters:\r\n\t *\r\n\t * @cfg {Autolinker} replaceFn.autolinker The Autolinker instance, which may be used to retrieve child objects from (such\r\n\t *   as the instance's {@link #getTagBuilder tag builder}).\r\n\t * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which can be used to retrieve information about the\r\n\t *   match that the `replaceFn` is currently processing. See {@link Autolinker.match.Match} subclasses for details.\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {Autolinker.htmlParser.HtmlParser} htmlParser\r\n\t *\r\n\t * The HtmlParser instance used to skip over HTML tags, while finding text nodes to process. This is lazily instantiated\r\n\t * in the {@link #getHtmlParser} method.\r\n\t */\r\n\thtmlParser : undefined,\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {Autolinker.matchParser.MatchParser} matchParser\r\n\t *\r\n\t * The MatchParser instance used to find matches in the text nodes of an input string passed to\r\n\t * {@link #link}. This is lazily instantiated in the {@link #getMatchParser} method.\r\n\t */\r\n\tmatchParser : undefined,\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {Autolinker.AnchorTagBuilder} tagBuilder\r\n\t *\r\n\t * The AnchorTagBuilder instance used to build match replacement anchor tags. Note: this is lazily instantiated\r\n\t * in the {@link #getTagBuilder} method.\r\n\t */\r\n\ttagBuilder : undefined,\r\n\r\n\t/**\r\n\t * Automatically links URLs, Email addresses, Phone numbers, Twitter\r\n\t * handles, and Hashtags found in the given chunk of HTML. Does not link\r\n\t * URLs found within HTML tags.\r\n\t *\r\n\t * For instance, if given the text: `You should go to http-colon-slashslash www.yahoo.com`,\r\n\t * then the result will be `You should go to\r\n\t * &lt;a href=\"http-colon-slashslash www.yahoo.com\"&gt;http-colon-slashslash www.yahoo.com&lt;/a&gt;`\r\n\t *\r\n\t * This method finds the text around any HTML elements in the input\r\n\t * `textOrHtml`, which will be the text that is processed. Any original HTML\r\n\t * elements will be left as-is, as well as the text that is already wrapped\r\n\t * in anchor (&lt;a&gt;) tags.\r\n\t *\r\n\t * @param {String} textOrHtml The HTML or text to autolink matches within\r\n\t *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\r\n\t *   {@link #twitter}, and {@link #hashtag} options are enabled).\r\n\t * @return {String} The HTML, with matches automatically linked.\r\n\t */\r\n\tlink : function( textOrHtml ) {\r\n\t\tvar htmlParser = this.getHtmlParser(),\r\n\t\t    htmlNodes = htmlParser.parse( textOrHtml ),\r\n\t\t    anchorTagStackCount = 0,  // used to only process text around anchor tags, and any inner text/html they may have\r\n\t\t    resultHtml = [];\r\n\r\n\t\tfor( var i = 0, len = htmlNodes.length; i < len; i++ ) {\r\n\t\t\tvar node = htmlNodes[ i ],\r\n\t\t\t    nodeType = node.getType(),\r\n\t\t\t    nodeText = node.getText();\r\n\r\n\t\t\tif( nodeType === 'element' ) {\r\n\t\t\t\t// Process HTML nodes in the input `textOrHtml`\r\n\t\t\t\tif( node.getTagName() === 'a' ) {\r\n\t\t\t\t\tif( !node.isClosing() ) {  // it's the start <a> tag\r\n\t\t\t\t\t\tanchorTagStackCount++;\r\n\t\t\t\t\t} else {   // it's the end </a> tag\r\n\t\t\t\t\t\tanchorTagStackCount = Math.max( anchorTagStackCount - 1, 0 );  // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresultHtml.push( nodeText );  // now add the text of the tag itself verbatim\r\n\r\n\t\t\t} else if( nodeType === 'entity' || nodeType === 'comment' ) {\r\n\t\t\t\tresultHtml.push( nodeText );  // append HTML entity nodes (such as '&nbsp;') or HTML comments (such as '<!-- Comment -->') verbatim\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// Process text nodes in the input `textOrHtml`\r\n\t\t\t\tif( anchorTagStackCount === 0 ) {\r\n\t\t\t\t\t// If we're not within an <a> tag, process the text node to linkify\r\n\t\t\t\t\tvar linkifiedStr = this.linkifyStr( nodeText );\r\n\t\t\t\t\tresultHtml.push( linkifiedStr );\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// `text` is within an <a> tag, simply append the text - we do not want to autolink anything\r\n\t\t\t\t\t// already within an <a>...</a> tag\r\n\t\t\t\t\tresultHtml.push( nodeText );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn resultHtml.join( \"\" );\r\n\t},\r\n\r\n\t/**\r\n\t * Process the text that lies in between HTML tags, performing the anchor\r\n\t * tag replacements for the matches, and returns the string with the\r\n\t * replacements made.\r\n\t *\r\n\t * This method does the actual wrapping of matches with anchor tags.\r\n\t *\r\n\t * @private\r\n\t * @param {String} str The string of text to auto-link.\r\n\t * @return {String} The text with anchor tags auto-filled.\r\n\t */\r\n\tlinkifyStr : function( str ) {\r\n\t\treturn this.getMatchParser().replace( str, this.createMatchReturnVal, this );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Creates the return string value for a given match in the input string,\r\n\t * for the {@link #linkifyStr} method.\r\n\t *\r\n\t * This method handles the {@link #replaceFn}, if one was provided.\r\n\t *\r\n\t * @private\r\n\t * @param {Autolinker.match.Match} match The Match object that represents the match.\r\n\t * @return {String} The string that the `match` should be replaced with. This is usually the anchor tag string, but\r\n\t *   may be the `matchStr` itself if the match is not to be replaced.\r\n\t */\r\n\tcreateMatchReturnVal : function( match ) {\r\n\t\t// Handle a custom `replaceFn` being provided\r\n\t\tvar replaceFnResult;\r\n\t\tif( this.replaceFn ) {\r\n\t\t\treplaceFnResult = this.replaceFn.call( this, this, match );  // Autolinker instance is the context, and the first arg\r\n\t\t}\r\n\r\n\t\tif( typeof replaceFnResult === 'string' ) {\r\n\t\t\treturn replaceFnResult;  // `replaceFn` returned a string, use that\r\n\r\n\t\t} else if( replaceFnResult === false ) {\r\n\t\t\treturn match.getMatchedText();  // no replacement for the match\r\n\r\n\t\t} else if( replaceFnResult instanceof Autolinker.HtmlTag ) {\r\n\t\t\treturn replaceFnResult.toAnchorString();\r\n\r\n\t\t} else {  // replaceFnResult === true, or no/unknown return value from function\r\n\t\t\t// Perform Autolinker's default anchor tag generation\r\n\t\t\tvar tagBuilder = this.getTagBuilder(),\r\n\t\t\t    anchorTag = tagBuilder.build( match );  // returns an Autolinker.HtmlTag instance\r\n\r\n\t\t\treturn anchorTag.toAnchorString();\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Lazily instantiates and returns the {@link #htmlParser} instance for this Autolinker instance.\r\n\t *\r\n\t * @protected\r\n\t * @return {Autolinker.htmlParser.HtmlParser}\r\n\t */\r\n\tgetHtmlParser : function() {\r\n\t\tvar htmlParser = this.htmlParser;\r\n\r\n\t\tif( !htmlParser ) {\r\n\t\t\thtmlParser = this.htmlParser = new Autolinker.htmlParser.HtmlParser();\r\n\t\t}\r\n\r\n\t\treturn htmlParser;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Lazily instantiates and returns the {@link #matchParser} instance for this Autolinker instance.\r\n\t *\r\n\t * @protected\r\n\t * @return {Autolinker.matchParser.MatchParser}\r\n\t */\r\n\tgetMatchParser : function() {\r\n\t\tvar matchParser = this.matchParser;\r\n\r\n\t\tif( !matchParser ) {\r\n\t\t\tmatchParser = this.matchParser = new Autolinker.matchParser.MatchParser( {\r\n\t\t\t\turls        : this.urls,\r\n\t\t\t\temail       : this.email,\r\n\t\t\t\ttwitter     : this.twitter,\r\n\t\t\t\tphone       : this.phone,\r\n\t\t\t\thashtag     : this.hashtag,\r\n\t\t\t\tstripPrefix : this.stripPrefix\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn matchParser;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Returns the {@link #tagBuilder} instance for this Autolinker instance, lazily instantiating it\r\n\t * if it does not yet exist.\r\n\t *\r\n\t * This method may be used in a {@link #replaceFn} to generate the {@link Autolinker.HtmlTag HtmlTag} instance that\r\n\t * Autolinker would normally generate, and then allow for modifications before returning it. For example:\r\n\t *\r\n\t *     var html = Autolinker.link( \"Test google.com\", {\r\n\t *         replaceFn : function( autolinker, match ) {\r\n\t *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\r\n\t *             tag.setAttr( 'rel', 'nofollow' );\r\n\t *\r\n\t *             return tag;\r\n\t *         }\r\n\t *     } );\r\n\t *\r\n\t *     // generated html:\r\n\t *     //   Test <a href=\"http-colon-slashslash google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\r\n\t *\r\n\t * @return {Autolinker.AnchorTagBuilder}\r\n\t */\r\n\tgetTagBuilder : function() {\r\n\t\tvar tagBuilder = this.tagBuilder;\r\n\r\n\t\tif( !tagBuilder ) {\r\n\t\t\ttagBuilder = this.tagBuilder = new Autolinker.AnchorTagBuilder( {\r\n\t\t\t\tnewWindow   : this.newWindow,\r\n\t\t\t\ttruncate    : this.truncate,\r\n\t\t\t\tclassName   : this.className\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn tagBuilder;\r\n\t}\r\n\r\n};\r\n\r\n\r\n/**\r\n * Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\r\n * and Hashtags found in the given chunk of HTML. Does not link URLs found\r\n * within HTML tags.\r\n *\r\n * For instance, if given the text: `You should go to http-colon-slashslash www.yahoo.com`,\r\n * then the result will be `You should go to &lt;a href=\"http-colon-slashslash www.yahoo.com\"&gt;http-colon-slashslash www.yahoo.com&lt;/a&gt;`\r\n *\r\n * Example:\r\n *\r\n *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\r\n *     // Produces: \"Go to <a href=\"http-colon-slashslash google.com\">google.com</a>\"\r\n *\r\n * @static\r\n * @param {String} textOrHtml The HTML or text to find matches within (depending\r\n *   on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #twitter},\r\n *   and {@link #hashtag} options are enabled).\r\n * @param {Object} [options] Any of the configuration options for the Autolinker\r\n *   class, specified in an Object (map). See the class description for an\r\n *   example call.\r\n * @return {String} The HTML text, with matches automatically linked.\r\n */\r\nAutolinker.link = function( textOrHtml, options ) {\r\n\tvar autolinker = new Autolinker( options );\r\n\treturn autolinker.link( textOrHtml );\r\n};\r\n\r\n\r\n// Autolinker Namespaces\r\nAutolinker.match = {};\r\nAutolinker.htmlParser = {};\r\nAutolinker.matchParser = {};\r\n\r\n/*global Autolinker */\r\n/*jshint eqnull:true, boss:true */\r\n/**\r\n * @class Autolinker.Util\r\n * @singleton\r\n *\r\n * A few utility methods for Autolinker.\r\n */\r\nAutolinker.Util = {\r\n\r\n\t/**\r\n\t * @property {Function} abstractMethod\r\n\t *\r\n\t * A function object which represents an abstract method.\r\n\t */\r\n\tabstractMethod : function() { throw \"abstract\"; },\r\n\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {RegExp} trimRegex\r\n\t *\r\n\t * The regular expression used to trim the leading and trailing whitespace\r\n\t * from a string.\r\n\t */\r\n\ttrimRegex : /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\r\n\r\n\r\n\t/**\r\n\t * Assigns (shallow copies) the properties of `src` onto `dest`.\r\n\t *\r\n\t * @param {Object} dest The destination object.\r\n\t * @param {Object} src The source object.\r\n\t * @return {Object} The destination object (`dest`)\r\n\t */\r\n\tassign : function( dest, src ) {\r\n\t\tfor( var prop in src ) {\r\n\t\t\tif( src.hasOwnProperty( prop ) ) {\r\n\t\t\t\tdest[ prop ] = src[ prop ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dest;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Extends `superclass` to create a new subclass, adding the `protoProps` to the new subclass's prototype.\r\n\t *\r\n\t * @param {Function} superclass The constructor function for the superclass.\r\n\t * @param {Object} protoProps The methods/properties to add to the subclass's prototype. This may contain the\r\n\t *   special property `constructor`, which will be used as the new subclass's constructor function.\r\n\t * @return {Function} The new subclass function.\r\n\t */\r\n\textend : function( superclass, protoProps ) {\r\n\t\tvar superclassProto = superclass.prototype;\r\n\r\n\t\tvar F = function() {};\r\n\t\tF.prototype = superclassProto;\r\n\r\n\t\tvar subclass;\r\n\t\tif( protoProps.hasOwnProperty( 'constructor' ) ) {\r\n\t\t\tsubclass = protoProps.constructor;\r\n\t\t} else {\r\n\t\t\tsubclass = function() { superclassProto.constructor.apply( this, arguments ); };\r\n\t\t}\r\n\r\n\t\tvar subclassProto = subclass.prototype = new F();  // set up prototype chain\r\n\t\tsubclassProto.constructor = subclass;  // fix constructor property\r\n\t\tsubclassProto.superclass = superclassProto;\r\n\r\n\t\tdelete protoProps.constructor;  // don't re-assign constructor property to the prototype, since a new function may have been created (`subclass`), which is now already there\r\n\t\tAutolinker.Util.assign( subclassProto, protoProps );\r\n\r\n\t\treturn subclass;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\r\n\t * end of the string (by default, two periods: '..'). If the `str` length does not exceed\r\n\t * `len`, the string will be returned unchanged.\r\n\t *\r\n\t * @param {String} str The string to truncate and add an ellipsis to.\r\n\t * @param {Number} truncateLen The length to truncate the string at.\r\n\t * @param {String} [ellipsisChars=..] The ellipsis character(s) to add to the end of `str`\r\n\t *   when truncated. Defaults to '..'\r\n\t */\r\n\tellipsis : function( str, truncateLen, ellipsisChars ) {\r\n\t\tif( str.length > truncateLen ) {\r\n\t\t\tellipsisChars = ( ellipsisChars == null ) ? '..' : ellipsisChars;\r\n\t\t\tstr = str.substring( 0, truncateLen - ellipsisChars.length ) + ellipsisChars;\r\n\t\t}\r\n\t\treturn str;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\r\n\t *\r\n\t * @param {Array} arr The array to find an element of.\r\n\t * @param {*} element The element to find in the array, and return the index of.\r\n\t * @return {Number} The index of the `element`, or -1 if it was not found.\r\n\t */\r\n\tindexOf : function( arr, element ) {\r\n\t\tif( Array.prototype.indexOf ) {\r\n\t\t\treturn arr.indexOf( element );\r\n\r\n\t\t} else {\r\n\t\t\tfor( var i = 0, len = arr.length; i < len; i++ ) {\r\n\t\t\t\tif( arr[ i ] === element ) return i;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t},\r\n\r\n\r\n\r\n\t/**\r\n\t * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\r\n\t * with a regular expression that contains capturing parenthesis.\r\n\t *\r\n\t * For example:\r\n\t *\r\n\t *     // Modern browsers:\r\n\t *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\r\n\t *\r\n\t *     // Old IE (including IE8):\r\n\t *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\r\n\t *\r\n\t * This method emulates the functionality of modern browsers for the old IE case.\r\n\t *\r\n\t * @param {String} str The string to split.\r\n\t * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\r\n\t *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the\r\n\t *   description of this method.\r\n\t *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\r\n\t *   Note #2: for simplicity's sake, the regular expression does not need\r\n\t *   to contain capturing parenthesis - it will be assumed that any match has them.\r\n\t * @return {String[]} The split array of strings, with the splitting character(s) included.\r\n\t */\r\n\tsplitAndCapture : function( str, splitRegex ) {\r\n\t\tif( !splitRegex.global ) throw new Error( \"`splitRegex` must have the 'g' flag set\" );\r\n\r\n\t\tvar result = [],\r\n\t\t    lastIdx = 0,\r\n\t\t    match;\r\n\r\n\t\twhile( match = splitRegex.exec( str ) ) {\r\n\t\t\tresult.push( str.substring( lastIdx, match.index ) );\r\n\t\t\tresult.push( match[ 0 ] );  // push the splitting char(s)\r\n\r\n\t\t\tlastIdx = match.index + match[ 0 ].length;\r\n\t\t}\r\n\t\tresult.push( str.substring( lastIdx ) );\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Trims the leading and trailing whitespace from a string.\r\n\t *\r\n\t * @param {String} str The string to trim.\r\n\t * @return {String}\r\n\t */\r\n\ttrim : function( str ) {\r\n\t\treturn str.replace( this.trimRegex, '' );\r\n\t}\r\n\r\n};\r\n/*global Autolinker */\r\n/*jshint boss:true */\r\n/**\r\n * @class Autolinker.HtmlTag\r\n * @extends Object\r\n *\r\n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\r\n *\r\n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\r\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\r\n *\r\n * ## Examples\r\n *\r\n * Example instantiation:\r\n *\r\n *     var tag = new Autolinker.HtmlTag( {\r\n *         tagName : 'a',\r\n *         attrs   : { 'href': 'http-colon-slashslash google.com', 'class': 'external-link' },\r\n *         innerHtml : 'Google'\r\n *     } );\r\n *\r\n *     tag.toAnchorString();  // <a href=\"http-colon-slashslash google.com\" class=\"external-link\">Google</a>\r\n *\r\n *     // Individual accessor methods\r\n *     tag.getTagName();                 // 'a'\r\n *     tag.getAttr( 'href' );            // 'http-colon-slashslash google.com'\r\n *     tag.hasClass( 'external-link' );  // true\r\n *\r\n *\r\n * Using mutator methods (which may be used in combination with instantiation config properties):\r\n *\r\n *     var tag = new Autolinker.HtmlTag();\r\n *     tag.setTagName( 'a' );\r\n *     tag.setAttr( 'href', 'http-colon-slashslash google.com' );\r\n *     tag.addClass( 'external-link' );\r\n *     tag.setInnerHtml( 'Google' );\r\n *\r\n *     tag.getTagName();                 // 'a'\r\n *     tag.getAttr( 'href' );            // 'http-colon-slashslash google.com'\r\n *     tag.hasClass( 'external-link' );  // true\r\n *\r\n *     tag.toAnchorString();  // <a href=\"http-colon-slashslash google.com\" class=\"external-link\">Google</a>\r\n *\r\n *\r\n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\r\n *\r\n *     var html = Autolinker.link( \"Test google.com\", {\r\n *         replaceFn : function( autolinker, match ) {\r\n *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\r\n *             tag.setAttr( 'rel', 'nofollow' );\r\n *\r\n *             return tag;\r\n *         }\r\n *     } );\r\n *\r\n *     // generated html:\r\n *     //   Test <a href=\"http-colon-slashslash google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\r\n *\r\n *\r\n * ## Example use with a new tag for the replacement\r\n *\r\n *     var html = Autolinker.link( \"Test google.com\", {\r\n *         replaceFn : function( autolinker, match ) {\r\n *             var tag = new Autolinker.HtmlTag( {\r\n *                 tagName : 'button',\r\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\r\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\r\n *             } );\r\n *\r\n *             return tag;\r\n *         }\r\n *     } );\r\n *\r\n *     // generated html:\r\n *     //   Test <button title=\"Load URL: http-colon-slashslash google.com\">Load URL: google.com</button>\r\n */\r\nAutolinker.HtmlTag = Autolinker.Util.extend( Object, {\r\n\r\n\t/**\r\n\t * @cfg {String} tagName\r\n\t *\r\n\t * The tag name. Ex: 'a', 'button', etc.\r\n\t *\r\n\t * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\r\n\t * is executed.\r\n\t */\r\n\r\n\t/**\r\n\t * @cfg {Object.<String, String>} attrs\r\n\t *\r\n\t * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\r\n\t * values are the attribute values.\r\n\t */\r\n\r\n\t/**\r\n\t * @cfg {String} innerHtml\r\n\t *\r\n\t * The inner HTML for the tag.\r\n\t *\r\n\t * Note the camel case name on `innerHtml`. Acronyms are camelCased in this utility (such as not to run into the acronym\r\n\t * naming inconsistency that the DOM developers created with `XMLHttpRequest`). You may alternatively use {@link #innerHTML}\r\n\t * if you prefer, but this one is recommended.\r\n\t */\r\n\r\n\t/**\r\n\t * @cfg {String} innerHTML\r\n\t *\r\n\t * Alias of {@link #innerHtml}, accepted for consistency with the browser DOM api, but prefer the camelCased version\r\n\t * for acronym names.\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * @protected\r\n\t * @property {RegExp} whitespaceRegex\r\n\t *\r\n\t * Regular expression used to match whitespace in a string of CSS classes.\r\n\t */\r\n\twhitespaceRegex : /\\s+/,\r\n\r\n\r\n\t/**\r\n\t * @constructor\r\n\t * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\r\n\t */\r\n\tconstructor : function( cfg ) {\r\n\t\tAutolinker.Util.assign( this, cfg );\r\n\r\n\t\tthis.innerHtml = this.innerHtml || this.innerHTML;  // accept either the camelCased form or the fully capitalized acronym\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Sets the tag name that will be used to generate the tag with.\r\n\t *\r\n\t * @param {String} tagName\r\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n\t */\r\n\tsetTagName : function( tagName ) {\r\n\t\tthis.tagName = tagName;\r\n\t\treturn this;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Retrieves the tag name.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetTagName : function() {\r\n\t\treturn this.tagName || \"\";\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Sets an attribute on the HtmlTag.\r\n\t *\r\n\t * @param {String} attrName The attribute name to set.\r\n\t * @param {String} attrValue The attribute value to set.\r\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n\t */\r\n\tsetAttr : function( attrName, attrValue ) {\r\n\t\tvar tagAttrs = this.getAttrs();\r\n\t\ttagAttrs[ attrName ] = attrValue;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\r\n\t *\r\n\t * @param {String} name The attribute name to retrieve.\r\n\t * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\r\n\t */\r\n\tgetAttr : function( attrName ) {\r\n\t\treturn this.getAttrs()[ attrName ];\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Sets one or more attributes on the HtmlTag.\r\n\t *\r\n\t * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\r\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n\t */\r\n\tsetAttrs : function( attrs ) {\r\n\t\tvar tagAttrs = this.getAttrs();\r\n\t\tAutolinker.Util.assign( tagAttrs, attrs );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Retrieves the attributes Object (map) for the HtmlTag.\r\n\t *\r\n\t * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\r\n\t */\r\n\tgetAttrs : function() {\r\n\t\treturn this.attrs || ( this.attrs = {} );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\r\n\t *\r\n\t * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\r\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n\t */\r\n\tsetClass : function( cssClass ) {\r\n\t\treturn this.setAttr( 'class', cssClass );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\r\n\t *\r\n\t * @param {String} cssClass One or more space-separated CSS classes to add.\r\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n\t */\r\n\taddClass : function( cssClass ) {\r\n\t\tvar classAttr = this.getClass(),\r\n\t\t    whitespaceRegex = this.whitespaceRegex,\r\n\t\t    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below\r\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\r\n\t\t    newClasses = cssClass.split( whitespaceRegex ),\r\n\t\t    newClass;\r\n\r\n\t\twhile( newClass = newClasses.shift() ) {\r\n\t\t\tif( indexOf( classes, newClass ) === -1 ) {\r\n\t\t\t\tclasses.push( newClass );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\r\n\t\treturn this;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Convenience method to remove one or more CSS classes from the HtmlTag.\r\n\t *\r\n\t * @param {String} cssClass One or more space-separated CSS classes to remove.\r\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n\t */\r\n\tremoveClass : function( cssClass ) {\r\n\t\tvar classAttr = this.getClass(),\r\n\t\t    whitespaceRegex = this.whitespaceRegex,\r\n\t\t    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below\r\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\r\n\t\t    removeClasses = cssClass.split( whitespaceRegex ),\r\n\t\t    removeClass;\r\n\r\n\t\twhile( classes.length && ( removeClass = removeClasses.shift() ) ) {\r\n\t\t\tvar idx = indexOf( classes, removeClass );\r\n\t\t\tif( idx !== -1 ) {\r\n\t\t\t\tclasses.splice( idx, 1 );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\r\n\t\treturn this;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\r\n\t * there are multiple.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetClass : function() {\r\n\t\treturn this.getAttrs()[ 'class' ] || \"\";\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Convenience method to check if the tag has a CSS class or not.\r\n\t *\r\n\t * @param {String} cssClass The CSS class to check for.\r\n\t * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\r\n\t */\r\n\thasClass : function( cssClass ) {\r\n\t\treturn ( ' ' + this.getClass() + ' ' ).indexOf( ' ' + cssClass + ' ' ) !== -1;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Sets the inner HTML for the tag.\r\n\t *\r\n\t * @param {String} html The inner HTML to set.\r\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n\t */\r\n\tsetInnerHtml : function( html ) {\r\n\t\tthis.innerHtml = html;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Retrieves the inner HTML for the tag.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetInnerHtml : function() {\r\n\t\treturn this.innerHtml || \"\";\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Override of superclass method used to generate the HTML string for the tag.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\ttoAnchorString : function() {\r\n\t\tvar tagName = this.getTagName(),\r\n\t\t    attrsStr = this.buildAttrsStr();\r\n\r\n\t\tattrsStr = ( attrsStr ) ? ' ' + attrsStr : '';  // prepend a space if there are actually attributes\r\n\r\n\t\treturn [ '<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>' ].join( \"\" );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\r\n\t * the stringified HtmlTag.\r\n\t *\r\n\t * @protected\r\n\t * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\r\n\t */\r\n\tbuildAttrsStr : function() {\r\n\t\tif( !this.attrs ) return \"\";  // no `attrs` Object (map) has been set, return empty string\r\n\r\n\t\tvar attrs = this.getAttrs(),\r\n\t\t    attrsArr = [];\r\n\r\n\t\tfor( var prop in attrs ) {\r\n\t\t\tif( attrs.hasOwnProperty( prop ) ) {\r\n\t\t\t\tattrsArr.push( prop + '=\"' + attrs[ prop ] + '\"' );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn attrsArr.join( \" \" );\r\n\t}\r\n\r\n} );\r\n\r\n/*global Autolinker */\r\n/*jshint sub:true */\r\n/**\r\n * @protected\r\n * @class Autolinker.AnchorTagBuilder\r\n * @extends Object\r\n *\r\n * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is found.\r\n *\r\n * Normally this class is instantiated, configured, and used internally by an {@link Autolinker} instance, but may\r\n * actually be retrieved in a {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag} instances\r\n * which may be modified before returning from the {@link Autolinker#replaceFn replaceFn}. For example:\r\n *\r\n *     var html = Autolinker.link( \"Test google.com\", {\r\n *         replaceFn : function( autolinker, match ) {\r\n *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\r\n *             tag.setAttr( 'rel', 'nofollow' );\r\n *\r\n *             return tag;\r\n *         }\r\n *     } );\r\n *\r\n *     // generated html:\r\n *     //   Test <a href=\"http-colon-slashslash google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\r\n */\r\nAutolinker.AnchorTagBuilder = Autolinker.Util.extend( Object, {\r\n\r\n\t/**\r\n\t * @cfg {Boolean} newWindow\r\n\t * @inheritdoc Autolinker#newWindow\r\n\t */\r\n\r\n\t/**\r\n\t * @cfg {Number} truncate\r\n\t * @inheritdoc Autolinker#truncate\r\n\t */\r\n\r\n\t/**\r\n\t * @cfg {String} className\r\n\t * @inheritdoc Autolinker#className\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * @constructor\r\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\r\n\t */\r\n\tconstructor : function( cfg ) {\r\n\t\tAutolinker.Util.assign( this, cfg );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Generates the actual anchor (&lt;a&gt;) tag to use in place of the\r\n\t * matched text, via its `match` object.\r\n\t *\r\n\t * @param {Autolinker.match.Match} match The Match instance to generate an\r\n\t *   anchor tag from.\r\n\t * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\r\n\t */\r\n\tbuild : function( match ) {\r\n\t\tvar tag = new Autolinker.HtmlTag( {\r\n\t\t\ttagName   : 'a',\r\n\t\t\tattrs     : this.createAttrs( match.getType(), match.getAnchorHref() ),\r\n\t\t\tinnerHtml : this.processAnchorText( match.getAnchorText() )\r\n\t\t} );\r\n\r\n\t\treturn tag;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;)\r\n\t *   tag being generated.\r\n\t *\r\n\t * @protected\r\n\t * @param {\"url\"/\"email\"/\"phone\"/\"twitter\"/\"hashtag\"} matchType The type of\r\n\t *   match that an anchor tag is being generated for.\r\n\t * @param {String} href The href for the anchor tag.\r\n\t * @return {Object} A key/value Object (map) of the anchor tag's attributes.\r\n\t */\r\n\tcreateAttrs : function( matchType, anchorHref ) {\r\n\t\tvar attrs = {\r\n\t\t\t'href' : anchorHref  // we'll always have the `href` attribute\r\n\t\t};\r\n\r\n\t\tvar cssClass = this.createCssClass( matchType );\r\n\t\tif( cssClass ) {\r\n\t\t\tattrs[ 'class' ] = cssClass;\r\n\t\t}\r\n\t\tif( this.newWindow ) {\r\n\t\t\tattrs[ 'target' ] = \"_blank\";\r\n\t\t}\r\n\r\n\t\treturn attrs;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Creates the CSS class that will be used for a given anchor tag, based on\r\n\t * the `matchType` and the {@link #className} config.\r\n\t *\r\n\t * @private\r\n\t * @param {\"url\"/\"email\"/\"phone\"/\"twitter\"/\"hashtag\"} matchType The type of\r\n\t *   match that an anchor tag is being generated for.\r\n\t * @return {String} The CSS class string for the link. Example return:\r\n\t *   \"myLink myLink-url\". If no {@link #className} was configured, returns\r\n\t *   an empty string.\r\n\t */\r\n\tcreateCssClass : function( matchType ) {\r\n\t\tvar className = this.className;\r\n\r\n\t\tif( !className )\r\n\t\t\treturn \"\";\r\n\t\telse\r\n\t\t\treturn className + \" \" + className + \"-\" + matchType;  // ex: \"myLink myLink-url\", \"myLink myLink-email\", \"myLink myLink-phone\", \"myLink myLink-twitter\", or \"myLink myLink-hashtag\"\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Processes the `anchorText` by truncating the text according to the\r\n\t * {@link #truncate} config.\r\n\t *\r\n\t * @private\r\n\t * @param {String} anchorText The anchor tag's text (i.e. what will be\r\n\t *   displayed).\r\n\t * @return {String} The processed `anchorText`.\r\n\t */\r\n\tprocessAnchorText : function( anchorText ) {\r\n\t\tanchorText = this.doTruncate( anchorText );\r\n\r\n\t\treturn anchorText;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Performs the truncation of the `anchorText`, if the `anchorText` is\r\n\t * longer than the {@link #truncate} option. Truncates the text to 2\r\n\t * characters fewer than the {@link #truncate} option, and adds \"..\" to the\r\n\t * end.\r\n\t *\r\n\t * @private\r\n\t * @param {String} text The anchor tag's text (i.e. what will be displayed).\r\n\t * @return {String} The truncated anchor text.\r\n\t */\r\n\tdoTruncate : function( anchorText ) {\r\n\t\treturn Autolinker.Util.ellipsis( anchorText, this.truncate || Number.POSITIVE_INFINITY );\r\n\t}\r\n\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @private\r\n * @class Autolinker.htmlParser.HtmlParser\r\n * @extends Object\r\n *\r\n * An HTML parser implementation which simply walks an HTML string and returns an array of\r\n * {@link Autolinker.htmlParser.HtmlNode HtmlNodes} that represent the basic HTML structure of the input string.\r\n *\r\n * Autolinker uses this to only link URLs/emails/Twitter handles within text nodes, effectively ignoring / \"walking\r\n * around\" HTML tags.\r\n */\r\nAutolinker.htmlParser.HtmlParser = Autolinker.Util.extend( Object, {\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {RegExp} htmlRegex\r\n\t *\r\n\t * The regular expression used to pull out HTML tags from a string. Handles namespaced HTML tags and\r\n\t * attribute names, as specified by http-colon-slashslash www.w3.org/TR/html-markup/syntax.html.\r\n\t *\r\n\t * Capturing groups:\r\n\t *\r\n\t * 1. The \"!DOCTYPE\" tag name, if a tag is a &lt;!DOCTYPE&gt; tag.\r\n\t * 2. If it is an end tag, this group will have the '/'.\r\n\t * 3. If it is a comment tag, this group will hold the comment text (i.e.\r\n\t *    the text inside the `&lt;!--` and `--&gt;`.\r\n\t * 4. The tag name for all tags (other than the &lt;!DOCTYPE&gt; tag)\r\n\t */\r\n\thtmlRegex : (function() {\r\n\t\tvar commentTagRegex = /!--([\\s\\S]+?)--/,\r\n\t\t    tagNameRegex = /[0-9a-zA-Z][0-9a-zA-Z:]*/,\r\n\t\t    attrNameRegex = /[^\\s\\0\"'>\\/=\\x01-\\x1F\\x7F]+/,   // the unicode range accounts for excluding control chars, and the delete char\r\n\t\t    attrValueRegex = /(?:\"[^\"]*?\"|'[^']*?'|[^'\"=<>`\\s]+)/, // double quoted, single quoted, or unquoted attribute values\r\n\t\t    nameEqualsValueRegex = attrNameRegex.source + '(?:\\\\s*=\\\\s*' + attrValueRegex.source + ')?';  // optional '=[value]'\r\n\r\n\t\treturn new RegExp( [\r\n\t\t\t// for <!DOCTYPE> tag. Ex: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">)\r\n\t\t\t'(?:',\r\n\t\t\t\t'<(!DOCTYPE)',  // *** Capturing Group 1 - If it's a doctype tag\r\n\r\n\t\t\t\t\t// Zero or more attributes following the tag name\r\n\t\t\t\t\t'(?:',\r\n\t\t\t\t\t\t'\\\\s+',  // one or more whitespace chars before an attribute\r\n\r\n\t\t\t\t\t\t// Either:\r\n\t\t\t\t\t\t// A. attr=\"value\", or\r\n\t\t\t\t\t\t// B. \"value\" alone (To cover example doctype tag: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">)\r\n\t\t\t\t\t\t'(?:', nameEqualsValueRegex, '|', attrValueRegex.source + ')',\r\n\t\t\t\t\t')*',\r\n\t\t\t\t'>',\r\n\t\t\t')',\r\n\r\n\t\t\t'|',\r\n\r\n\t\t\t// All other HTML tags (i.e. tags that are not <!DOCTYPE>)\r\n\t\t\t'(?:',\r\n\t\t\t\t'<(/)?',  // Beginning of a tag or comment. Either '<' for a start tag, or '</' for an end tag.\r\n\t\t\t\t          // *** Capturing Group 2: The slash or an empty string. Slash ('/') for end tag, empty string for start or self-closing tag.\r\n\r\n\t\t\t\t\t'(?:',\r\n\t\t\t\t\t\tcommentTagRegex.source,  // *** Capturing Group 3 - A Comment Tag's Text\r\n\r\n\t\t\t\t\t\t'|',\r\n\r\n\t\t\t\t\t\t'(?:',\r\n\r\n\t\t\t\t\t\t\t// *** Capturing Group 4 - The tag name\r\n\t\t\t\t\t\t\t'(' + tagNameRegex.source + ')',\r\n\r\n\t\t\t\t\t\t\t// Zero or more attributes following the tag name\r\n\t\t\t\t\t\t\t'(?:',\r\n\t\t\t\t\t\t\t\t'\\\\s+',                // one or more whitespace chars before an attribute\r\n\t\t\t\t\t\t\t\tnameEqualsValueRegex,  // attr=\"value\" (with optional =\"value\" part)\r\n\t\t\t\t\t\t\t')*',\r\n\r\n\t\t\t\t\t\t\t'\\\\s*/?',  // any trailing spaces and optional '/' before the closing '>'\r\n\r\n\t\t\t\t\t\t')',\r\n\t\t\t\t\t')',\r\n\t\t\t\t'>',\r\n\t\t\t')'\r\n\t\t].join( \"\" ), 'gi' );\r\n\t} )(),\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {RegExp} htmlCharacterEntitiesRegex\r\n\t *\r\n\t * The regular expression that matches common HTML character entities.\r\n\t *\r\n\t * Ignoring &amp; as it could be part of a query string -- handling it separately.\r\n\t */\r\n\thtmlCharacterEntitiesRegex: /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi,\r\n\r\n\r\n\t/**\r\n\t * Parses an HTML string and returns a simple array of {@link Autolinker.htmlParser.HtmlNode HtmlNodes}\r\n\t * to represent the HTML structure of the input string.\r\n\t *\r\n\t * @param {String} html The HTML to parse.\r\n\t * @return {Autolinker.htmlParser.HtmlNode[]}\r\n\t */\r\n\tparse : function( html ) {\r\n\t\tvar htmlRegex = this.htmlRegex,\r\n\t\t    currentResult,\r\n\t\t    lastIndex = 0,\r\n\t\t    textAndEntityNodes,\r\n\t\t    nodes = [];  // will be the result of the method\r\n\r\n\t\twhile( ( currentResult = htmlRegex.exec( html ) ) !== null ) {\r\n\t\t\tvar tagText = currentResult[ 0 ],\r\n\t\t\t    commentText = currentResult[ 3 ], // if we've matched a comment\r\n\t\t\t    tagName = currentResult[ 1 ] || currentResult[ 4 ],  // The <!DOCTYPE> tag (ex: \"!DOCTYPE\"), or another tag (ex: \"a\" or \"img\")\r\n\t\t\t    isClosingTag = !!currentResult[ 2 ],\r\n\t\t\t    inBetweenTagsText = html.substring( lastIndex, currentResult.index );\r\n\r\n\t\t\t// Push TextNodes and EntityNodes for any text found between tags\r\n\t\t\tif( inBetweenTagsText ) {\r\n\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes( inBetweenTagsText );\r\n\t\t\t\tnodes.push.apply( nodes, textAndEntityNodes );\r\n\t\t\t}\r\n\r\n\t\t\t// Push the CommentNode or ElementNode\r\n\t\t\tif( commentText ) {\r\n\t\t\t\tnodes.push( this.createCommentNode( tagText, commentText ) );\r\n\t\t\t} else {\r\n\t\t\t\tnodes.push( this.createElementNode( tagText, tagName, isClosingTag ) );\r\n\t\t\t}\r\n\r\n\t\t\tlastIndex = currentResult.index + tagText.length;\r\n\t\t}\r\n\r\n\t\t// Process any remaining text after the last HTML element. Will process all of the text if there were no HTML elements.\r\n\t\tif( lastIndex < html.length ) {\r\n\t\t\tvar text = html.substring( lastIndex );\r\n\r\n\t\t\t// Push TextNodes and EntityNodes for any text found between tags\r\n\t\t\tif( text ) {\r\n\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes( text );\r\n\t\t\t\tnodes.push.apply( nodes, textAndEntityNodes );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn nodes;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Parses text and HTML entity nodes from a given string. The input string\r\n\t * should not have any HTML tags (elements) within it.\r\n\t *\r\n\t * @private\r\n\t * @param {String} text The text to parse.\r\n\t * @return {Autolinker.htmlParser.HtmlNode[]} An array of HtmlNodes to\r\n\t *   represent the {@link Autolinker.htmlParser.TextNode TextNodes} and\r\n\t *   {@link Autolinker.htmlParser.EntityNode EntityNodes} found.\r\n\t */\r\n\tparseTextAndEntityNodes : function( text ) {\r\n\t\tvar nodes = [],\r\n\t\t    textAndEntityTokens = Autolinker.Util.splitAndCapture( text, this.htmlCharacterEntitiesRegex );  // split at HTML entities, but include the HTML entities in the results array\r\n\r\n\t\t// Every even numbered token is a TextNode, and every odd numbered token is an EntityNode\r\n\t\t// For example: an input `text` of \"Test &quot;this&quot; today\" would turn into the\r\n\t\t//   `textAndEntityTokens`: [ 'Test ', '&quot;', 'this', '&quot;', ' today' ]\r\n\t\tfor( var i = 0, len = textAndEntityTokens.length; i < len; i += 2 ) {\r\n\t\t\tvar textToken = textAndEntityTokens[ i ],\r\n\t\t\t    entityToken = textAndEntityTokens[ i + 1 ];\r\n\r\n\t\t\tif( textToken ) nodes.push( this.createTextNode( textToken ) );\r\n\t\t\tif( entityToken ) nodes.push( this.createEntityNode( entityToken ) );\r\n\t\t}\r\n\t\treturn nodes;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Factory method to create an {@link Autolinker.htmlParser.CommentNode CommentNode}.\r\n\t *\r\n\t * @private\r\n\t * @param {String} tagText The full text of the tag (comment) that was\r\n\t *   matched, including its &lt;!-- and --&gt;.\r\n\t * @param {String} comment The full text of the comment that was matched.\r\n\t */\r\n\tcreateCommentNode : function( tagText, commentText ) {\r\n\t\treturn new Autolinker.htmlParser.CommentNode( {\r\n\t\t\ttext: tagText,\r\n\t\t\tcomment: Autolinker.Util.trim( commentText )\r\n\t\t} );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Factory method to create an {@link Autolinker.htmlParser.ElementNode ElementNode}.\r\n\t *\r\n\t * @private\r\n\t * @param {String} tagText The full text of the tag (element) that was\r\n\t *   matched, including its attributes.\r\n\t * @param {String} tagName The name of the tag. Ex: An &lt;img&gt; tag would\r\n\t *   be passed to this method as \"img\".\r\n\t * @param {Boolean} isClosingTag `true` if it's a closing tag, false\r\n\t *   otherwise.\r\n\t * @return {Autolinker.htmlParser.ElementNode}\r\n\t */\r\n\tcreateElementNode : function( tagText, tagName, isClosingTag ) {\r\n\t\treturn new Autolinker.htmlParser.ElementNode( {\r\n\t\t\ttext    : tagText,\r\n\t\t\ttagName : tagName.toLowerCase(),\r\n\t\t\tclosing : isClosingTag\r\n\t\t} );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Factory method to create a {@link Autolinker.htmlParser.EntityNode EntityNode}.\r\n\t *\r\n\t * @private\r\n\t * @param {String} text The text that was matched for the HTML entity (such\r\n\t *   as '&amp;nbsp;').\r\n\t * @return {Autolinker.htmlParser.EntityNode}\r\n\t */\r\n\tcreateEntityNode : function( text ) {\r\n\t\treturn new Autolinker.htmlParser.EntityNode( { text: text } );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Factory method to create a {@link Autolinker.htmlParser.TextNode TextNode}.\r\n\t *\r\n\t * @private\r\n\t * @param {String} text The text that was matched.\r\n\t * @return {Autolinker.htmlParser.TextNode}\r\n\t */\r\n\tcreateTextNode : function( text ) {\r\n\t\treturn new Autolinker.htmlParser.TextNode( { text: text } );\r\n\t}\r\n\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @abstract\r\n * @class Autolinker.htmlParser.HtmlNode\r\n * \r\n * Represents an HTML node found in an input string. An HTML node is one of the following:\r\n * \r\n * 1. An {@link Autolinker.htmlParser.ElementNode ElementNode}, which represents HTML tags.\r\n * 2. A {@link Autolinker.htmlParser.TextNode TextNode}, which represents text outside or within HTML tags.\r\n * 3. A {@link Autolinker.htmlParser.EntityNode EntityNode}, which represents one of the known HTML\r\n *    entities that Autolinker looks for. This includes common ones such as &amp;quot; and &amp;nbsp;\r\n */\r\nAutolinker.htmlParser.HtmlNode = Autolinker.Util.extend( Object, {\r\n\t\r\n\t/**\r\n\t * @cfg {String} text (required)\r\n\t * \r\n\t * The original text that was matched for the HtmlNode. \r\n\t * \r\n\t * - In the case of an {@link Autolinker.htmlParser.ElementNode ElementNode}, this will be the tag's\r\n\t *   text.\r\n\t * - In the case of a {@link Autolinker.htmlParser.TextNode TextNode}, this will be the text itself.\r\n\t * - In the case of a {@link Autolinker.htmlParser.EntityNode EntityNode}, this will be the text of\r\n\t *   the HTML entity.\r\n\t */\r\n\ttext : \"\",\r\n\t\r\n\t\r\n\t/**\r\n\t * @constructor\r\n\t * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\r\n\t */\r\n\tconstructor : function( cfg ) {\r\n\t\tAutolinker.Util.assign( this, cfg );\r\n\t},\r\n\r\n\t\r\n\t/**\r\n\t * Returns a string name for the type of node that this class represents.\r\n\t * \r\n\t * @abstract\r\n\t * @return {String}\r\n\t */\r\n\tgetType : Autolinker.Util.abstractMethod,\r\n\t\r\n\t\r\n\t/**\r\n\t * Retrieves the {@link #text} for the HtmlNode.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetText : function() {\r\n\t\treturn this.text;\r\n\t}\r\n\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.htmlParser.CommentNode\r\n * @extends Autolinker.htmlParser.HtmlNode\r\n *\r\n * Represents an HTML comment node that has been parsed by the\r\n * {@link Autolinker.htmlParser.HtmlParser}.\r\n *\r\n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more\r\n * details.\r\n */\r\nAutolinker.htmlParser.CommentNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\r\n\r\n\t/**\r\n\t * @cfg {String} comment (required)\r\n\t *\r\n\t * The text inside the comment tag. This text is stripped of any leading or\r\n\t * trailing whitespace.\r\n\t */\r\n\tcomment : '',\r\n\r\n\r\n\t/**\r\n\t * Returns a string name for the type of node that this class represents.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'comment';\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Returns the comment inside the comment tag.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetComment : function() {\r\n\t\treturn this.comment;\r\n\t}\r\n\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.htmlParser.ElementNode\r\n * @extends Autolinker.htmlParser.HtmlNode\r\n * \r\n * Represents an HTML element node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\r\n * \r\n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\r\n */\r\nAutolinker.htmlParser.ElementNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\r\n\t\r\n\t/**\r\n\t * @cfg {String} tagName (required)\r\n\t * \r\n\t * The name of the tag that was matched.\r\n\t */\r\n\ttagName : '',\r\n\t\r\n\t/**\r\n\t * @cfg {Boolean} closing (required)\r\n\t * \r\n\t * `true` if the element (tag) is a closing tag, `false` if its an opening tag.\r\n\t */\r\n\tclosing : false,\r\n\r\n\t\r\n\t/**\r\n\t * Returns a string name for the type of node that this class represents.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'element';\r\n\t},\r\n\t\r\n\r\n\t/**\r\n\t * Returns the HTML element's (tag's) name. Ex: for an &lt;img&gt; tag, returns \"img\".\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetTagName : function() {\r\n\t\treturn this.tagName;\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Determines if the HTML element (tag) is a closing tag. Ex: &lt;div&gt; returns\r\n\t * `false`, while &lt;/div&gt; returns `true`.\r\n\t * \r\n\t * @return {Boolean}\r\n\t */\r\n\tisClosing : function() {\r\n\t\treturn this.closing;\r\n\t}\r\n\t\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.htmlParser.EntityNode\r\n * @extends Autolinker.htmlParser.HtmlNode\r\n * \r\n * Represents a known HTML entity node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\r\n * Ex: '&amp;nbsp;', or '&amp#160;' (which will be retrievable from the {@link #getText} method.\r\n * \r\n * Note that this class will only be returned from the HtmlParser for the set of checked HTML entity nodes \r\n * defined by the {@link Autolinker.htmlParser.HtmlParser#htmlCharacterEntitiesRegex}.\r\n * \r\n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\r\n */\r\nAutolinker.htmlParser.EntityNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\r\n\t\r\n\t/**\r\n\t * Returns a string name for the type of node that this class represents.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'entity';\r\n\t}\r\n\t\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.htmlParser.TextNode\r\n * @extends Autolinker.htmlParser.HtmlNode\r\n * \r\n * Represents a text node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\r\n * \r\n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\r\n */\r\nAutolinker.htmlParser.TextNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\r\n\t\r\n\t/**\r\n\t * Returns a string name for the type of node that this class represents.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'text';\r\n\t}\r\n\t\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @private\r\n * @class Autolinker.matchParser.MatchParser\r\n * @extends Object\r\n *\r\n * Used by Autolinker to parse potential matches, given an input string of text.\r\n *\r\n * The MatchParser is fed a non-HTML string in order to search for matches.\r\n * Autolinker first uses the {@link Autolinker.htmlParser.HtmlParser} to \"walk\r\n * around\" HTML tags, and then the text around the HTML tags is passed into the\r\n * MatchParser in order to find the actual matches.\r\n */\r\nAutolinker.matchParser.MatchParser = Autolinker.Util.extend( Object, {\r\n\r\n\t/**\r\n\t * @cfg {Boolean} urls\r\n\t * @inheritdoc Autolinker#urls\r\n\t */\r\n\turls : true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} email\r\n\t * @inheritdoc Autolinker#email\r\n\t */\r\n\temail : true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} twitter\r\n\t * @inheritdoc Autolinker#twitter\r\n\t */\r\n\ttwitter : true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} phone\r\n\t * @inheritdoc Autolinker#phone\r\n\t */\r\n\tphone: true,\r\n\r\n\t/**\r\n\t * @cfg {Boolean/String} hashtag\r\n\t * @inheritdoc Autolinker#hashtag\r\n\t */\r\n\thashtag : false,\r\n\r\n\t/**\r\n\t * @cfg {Boolean} stripPrefix\r\n\t * @inheritdoc Autolinker#stripPrefix\r\n\t */\r\n\tstripPrefix : true,\r\n\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {RegExp} matcherRegex\r\n\t *\r\n\t * The regular expression that matches URLs, email addresses, phone #s,\r\n\t * Twitter handles, and Hashtags.\r\n\t *\r\n\t * This regular expression has the following capturing groups:\r\n\t *\r\n\t * 1.  Group that is used to determine if there is a Twitter handle match\r\n\t *     (i.e. \\@someTwitterUser). Simply check for its existence to determine\r\n\t *     if there is a Twitter handle match. The next couple of capturing\r\n\t *     groups give information about the Twitter handle match.\r\n\t * 2.  The whitespace character before the \\@sign in a Twitter handle. This\r\n\t *     is needed because there are no lookbehinds in JS regular expressions,\r\n\t *     and can be used to reconstruct the original string in a replace().\r\n\t * 3.  The Twitter handle itself in a Twitter match. If the match is\r\n\t *     '@someTwitterUser', the handle is 'someTwitterUser'.\r\n\t * 4.  Group that matches an email address. Used to determine if the match\r\n\t *     is an email address, as well as holding the full address. Ex:\r\n\t *     'me@my.com'\r\n\t * 5.  Group that matches a URL in the input text. Ex: 'http-colon-slashslash google.com',\r\n\t *     'www.google.com', or just 'google.com'. This also includes a path,\r\n\t *     url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&q2=2#myAnchor\r\n\t * 6.  Group that matches a protocol URL (i.e. 'http-colon-slashslash google.com'). This is\r\n\t *     used to match protocol URLs with just a single word, like 'http-colon-slashslash localhost',\r\n\t *     where we won't double check that the domain name has at least one '.'\r\n\t *     in it.\r\n\t * 7.  A protocol-relative ('//') match for the case of a 'www.' prefixed\r\n\t *     URL. Will be an empty string if it is not a protocol-relative match.\r\n\t *     We need to know the character before the '//' in order to determine\r\n\t *     if it is a valid match or the // was in a string we don't want to\r\n\t *     auto-link.\r\n\t * 8.  A protocol-relative ('//') match for the case of a known TLD prefixed\r\n\t *     URL. Will be an empty string if it is not a protocol-relative match.\r\n\t *     See #6 for more info.\r\n\t * 9.  Group that is used to determine if there is a phone number match. The\r\n\t *     next 3 groups give segments of the phone number.\r\n\t * 10. Group that is used to determine if there is a Hashtag match\r\n\t *     (i.e. \\#someHashtag). Simply check for its existence to determine if\r\n\t *     there is a Hashtag match. The next couple of capturing groups give\r\n\t *     information about the Hashtag match.\r\n\t * 11. The whitespace character before the #sign in a Hashtag handle. This\r\n\t *     is needed because there are no look-behinds in JS regular\r\n\t *     expressions, and can be used to reconstruct the original string in a\r\n\t *     replace().\r\n\t * 12. The Hashtag itself in a Hashtag match. If the match is\r\n\t *     '#someHashtag', the hashtag is 'someHashtag'.\r\n\t */\r\n\tmatcherRegex : (function() {\r\n\t\tvar twitterRegex = /(^|[^\\w])@(\\w{1,15})/,              // For matching a twitter handle. Ex: @gregory_jacobs\r\n\r\n\t\t    hashtagRegex = /(^|[^\\w])#(\\w{1,15})/,              // For matching a Hashtag. Ex: #games\r\n\r\n\t\t    emailRegex = /(?:[\\-;:&=\\+\\$,\\w\\.]+@)/,             // something@ for email addresses (a.k.a. local-part)\r\n\t\t    phoneRegex = /(?:\\+?\\d{1,3}[-\\s.])?\\(?\\d{3}\\)?[-\\s.]?\\d{3}[-\\s.]\\d{4}/,  // ex: (123) 456-7890, 123 456 7890, 123-456-7890, etc.\r\n\t\t    protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,  // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\r\n\t\t    wwwRegex = /(?:www\\.)/,                             // starting with 'www.'\r\n\t\t    domainNameRegex = /[A-Za-z0-9\\.\\-]*[A-Za-z0-9\\-]/,  // anything looking at all like a domain, non-unicode domains, not ending in a period\r\n\t\t    tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/,   // match our known top level domains (TLDs)\r\n\r\n\t\t    // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\r\n\t\t    // http://blog.codinghorror.com/the-problem-with-urls/\r\n\t\t    urlSuffixRegex = /[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]?!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]]/;\r\n\r\n\t\treturn new RegExp( [\r\n\t\t\t'(',  // *** Capturing group $1, which can be used to check for a twitter handle match. Use group $3 for the actual twitter handle though. $2 may be used to reconstruct the original string in a replace()\r\n\t\t\t\t// *** Capturing group $2, which matches the whitespace character before the '@' sign (needed because of no lookbehinds), and\r\n\t\t\t\t// *** Capturing group $3, which matches the actual twitter handle\r\n\t\t\t\ttwitterRegex.source,\r\n\t\t\t')',\r\n\r\n\t\t\t'|',\r\n\r\n\t\t\t'(',  // *** Capturing group $4, which is used to determine an email match\r\n\t\t\t\temailRegex.source,\r\n\t\t\t\tdomainNameRegex.source,\r\n\t\t\t\ttldRegex.source,\r\n\t\t\t')',\r\n\r\n\t\t\t'|',\r\n\r\n\t\t\t'(',  // *** Capturing group $5, which is used to match a URL\r\n\t\t\t\t'(?:', // parens to cover match for protocol (optional), and domain\r\n\t\t\t\t\t'(',  // *** Capturing group $6, for a protocol-prefixed url (ex: http://google.com)\r\n\t\t\t\t\t\tprotocolRegex.source,\r\n\t\t\t\t\t\tdomainNameRegex.source,\r\n\t\t\t\t\t')',\r\n\r\n\t\t\t\t\t'|',\r\n\r\n\t\t\t\t\t'(?:',  // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\r\n\t\t\t\t\t\t'(.?//)?',  // *** Capturing group $7 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\r\n\t\t\t\t\t\twwwRegex.source,\r\n\t\t\t\t\t\tdomainNameRegex.source,\r\n\t\t\t\t\t')',\r\n\r\n\t\t\t\t\t'|',\r\n\r\n\t\t\t\t\t'(?:',  // non-capturing paren for known a TLD url (ex: google.com)\r\n\t\t\t\t\t\t'(.?//)?',  // *** Capturing group $8 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\r\n\t\t\t\t\t\tdomainNameRegex.source,\r\n\t\t\t\t\t\ttldRegex.source,\r\n\t\t\t\t\t')',\r\n\t\t\t\t')',\r\n\r\n\t\t\t\t'(?:' + urlSuffixRegex.source + ')?',  // match for path, query string, and/or hash anchor - optional\r\n\t\t\t')',\r\n\r\n\t\t\t'|',\r\n\r\n\t\t\t// this setup does not scale well for open extension :( Need to rethink design of autolinker...\r\n\t\t\t// ***  Capturing group $9, which matches a (USA for now) phone number\r\n\t\t\t'(',\r\n\t\t\t\tphoneRegex.source,\r\n\t\t\t')',\r\n\r\n\t\t\t'|',\r\n\r\n\t\t\t'(',  // *** Capturing group $10, which can be used to check for a Hashtag match. Use group $12 for the actual Hashtag though. $11 may be used to reconstruct the original string in a replace()\r\n\t\t\t\t// *** Capturing group $11, which matches the whitespace character before the '#' sign (needed because of no lookbehinds), and\r\n\t\t\t\t// *** Capturing group $12, which matches the actual Hashtag\r\n\t\t\t\thashtagRegex.source,\r\n\t\t\t')'\r\n\t\t].join( \"\" ), 'gi' );\r\n\t} )(),\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {RegExp} charBeforeProtocolRelMatchRegex\r\n\t *\r\n\t * The regular expression used to retrieve the character before a\r\n\t * protocol-relative URL match.\r\n\t *\r\n\t * This is used in conjunction with the {@link #matcherRegex}, which needs\r\n\t * to grab the character before a protocol-relative '//' due to the lack of\r\n\t * a negative look-behind in JavaScript regular expressions. The character\r\n\t * before the match is stripped from the URL.\r\n\t */\r\n\tcharBeforeProtocolRelMatchRegex : /^(.)?\\/\\//,\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {Autolinker.MatchValidator} matchValidator\r\n\t *\r\n\t * The MatchValidator object, used to filter out any false positives from\r\n\t * the {@link #matcherRegex}. See {@link Autolinker.MatchValidator} for details.\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * @constructor\r\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder\r\n\t * instance, specified in an Object (map).\r\n\t */\r\n\tconstructor : function( cfg ) {\r\n\t\tAutolinker.Util.assign( this, cfg );\r\n\r\n\t\tthis.matchValidator = new Autolinker.MatchValidator();\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Parses the input `text` to search for matches, and calls the `replaceFn`\r\n\t * to allow replacements of the matches. Returns the `text` with matches\r\n\t * replaced.\r\n\t *\r\n\t * @param {String} text The text to search and repace matches in.\r\n\t * @param {Function} replaceFn The iterator function to handle the\r\n\t *   replacements. The function takes a single argument, a {@link Autolinker.match.Match}\r\n\t *   object, and should return the text that should make the replacement.\r\n\t * @param {Object} [contextObj=window] The context object (\"scope\") to run\r\n\t *   the `replaceFn` in.\r\n\t * @return {String}\r\n\t */\r\n\treplace : function( text, replaceFn, contextObj ) {\r\n\t\tvar me = this;  // for closure\r\n\r\n\t\treturn text.replace( this.matcherRegex, function( matchStr, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12 ) {\r\n\t\t\tvar matchDescObj = me.processCandidateMatch( matchStr, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12 );  // \"match description\" object\r\n\r\n\t\t\t// Return out with no changes for match types that are disabled (url,\r\n\t\t\t// email, phone, etc.), or for matches that are invalid (false\r\n\t\t\t// positives from the matcherRegex, which can't use look-behinds\r\n\t\t\t// since they are unavailable in JS).\r\n\t\t\tif( !matchDescObj ) {\r\n\t\t\t\treturn matchStr;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// Generate replacement text for the match from the `replaceFn`\r\n\t\t\t\tvar replaceStr = replaceFn.call( contextObj, matchDescObj.match );\r\n\t\t\t\treturn matchDescObj.prefixStr + replaceStr + matchDescObj.suffixStr;\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Processes a candidate match from the {@link #matcherRegex}.\r\n\t *\r\n\t * Not all matches found by the regex are actual URL/Email/Phone/Twitter/Hashtag\r\n\t * matches, as determined by the {@link #matchValidator}. In this case, the\r\n\t * method returns `null`. Otherwise, a valid Object with `prefixStr`,\r\n\t * `match`, and `suffixStr` is returned.\r\n\t *\r\n\t * @private\r\n\t * @param {String} matchStr The full match that was found by the\r\n\t *   {@link #matcherRegex}.\r\n\t * @param {String} twitterMatch The matched text of a Twitter handle, if the\r\n\t *   match is a Twitter match.\r\n\t * @param {String} twitterHandlePrefixWhitespaceChar The whitespace char\r\n\t *   before the @ sign in a Twitter handle match. This is needed because of\r\n\t *   no lookbehinds in JS regexes, and is need to re-include the character\r\n\t *   for the anchor tag replacement.\r\n\t * @param {String} twitterHandle The actual Twitter user (i.e the word after\r\n\t *   the @ sign in a Twitter match).\r\n\t * @param {String} emailAddressMatch The matched email address for an email\r\n\t *   address match.\r\n\t * @param {String} urlMatch The matched URL string for a URL match.\r\n\t * @param {String} protocolUrlMatch The match URL string for a protocol\r\n\t *   match. Ex: 'http-colon-slashslash yahoo.com'. This is used to match something like\r\n\t *   'http-colon-slashslash localhost', where we won't double check that the domain name\r\n\t *   has at least one '.' in it.\r\n\t * @param {String} wwwProtocolRelativeMatch The '//' for a protocol-relative\r\n\t *   match from a 'www' url, with the character that comes before the '//'.\r\n\t * @param {String} tldProtocolRelativeMatch The '//' for a protocol-relative\r\n\t *   match from a TLD (top level domain) match, with the character that\r\n\t *   comes before the '//'.\r\n\t * @param {String} phoneMatch The matched text of a phone number\r\n\t * @param {String} hashtagMatch The matched text of a Twitter\r\n\t *   Hashtag, if the match is a Hashtag match.\r\n\t * @param {String} hashtagPrefixWhitespaceChar The whitespace char\r\n\t *   before the # sign in a Hashtag match. This is needed because of no\r\n\t *   lookbehinds in JS regexes, and is need to re-include the character for\r\n\t *   the anchor tag replacement.\r\n\t * @param {String} hashtag The actual Hashtag (i.e the word\r\n\t *   after the # sign in a Hashtag match).\r\n\t *\r\n\t * @return {Object} A \"match description object\". This will be `null` if the\r\n\t *   match was invalid, or if a match type is disabled. Otherwise, this will\r\n\t *   be an Object (map) with the following properties:\r\n\t * @return {String} return.prefixStr The char(s) that should be prepended to\r\n\t *   the replacement string. These are char(s) that were needed to be\r\n\t *   included from the regex match that were ignored by processing code, and\r\n\t *   should be re-inserted into the replacement stream.\r\n\t * @return {String} return.suffixStr The char(s) that should be appended to\r\n\t *   the replacement string. These are char(s) that were needed to be\r\n\t *   included from the regex match that were ignored by processing code, and\r\n\t *   should be re-inserted into the replacement stream.\r\n\t * @return {Autolinker.match.Match} return.match The Match object that\r\n\t *   represents the match that was found.\r\n\t */\r\n\tprocessCandidateMatch : function(\r\n\t\tmatchStr, twitterMatch, twitterHandlePrefixWhitespaceChar, twitterHandle,\r\n\t\temailAddressMatch, urlMatch, protocolUrlMatch, wwwProtocolRelativeMatch,\r\n\t\ttldProtocolRelativeMatch, phoneMatch, hashtagMatch,\r\n\t\thashtagPrefixWhitespaceChar, hashtag\r\n\t) {\r\n\t\t// Note: The `matchStr` variable wil be fixed up to remove characters that are no longer needed (which will\r\n\t\t// be added to `prefixStr` and `suffixStr`).\r\n\r\n\t\tvar protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\r\n\t\t    match,  // Will be an Autolinker.match.Match object\r\n\r\n\t\t    prefixStr = \"\",  // A string to use to prefix the anchor tag that is created. This is needed for the Twitter and Hashtag matches.\r\n\t\t    suffixStr = \"\";  // A string to suffix the anchor tag that is created. This is used if there is a trailing parenthesis that should not be auto-linked.\r\n\r\n\t\t// Return out with `null` for match types that are disabled (url, email,\r\n\t\t// twitter, hashtag), or for matches that are invalid (false positives\r\n\t\t// from the matcherRegex, which can't use look-behinds since they are\r\n\t\t// unavailable in JS).\r\n\t\tif(\r\n\t\t\t( urlMatch && !this.urls ) ||\r\n\t\t\t( emailAddressMatch && !this.email ) ||\r\n\t\t\t( phoneMatch && !this.phone ) ||\r\n\t\t\t( twitterMatch && !this.twitter ) ||\r\n\t\t\t( hashtagMatch && !this.hashtag ) ||\r\n\t\t\t!this.matchValidator.isValidMatch( urlMatch, protocolUrlMatch, protocolRelativeMatch )\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Handle a closing parenthesis at the end of the match, and exclude it\r\n\t\t// if there is not a matching open parenthesis\r\n\t\t// in the match itself.\r\n\t\tif( this.matchHasUnbalancedClosingParen( matchStr ) ) {\r\n\t\t\tmatchStr = matchStr.substr( 0, matchStr.length - 1 );  // remove the trailing \")\"\r\n\t\t\tsuffixStr = \")\";  // this will be added after the generated <a> tag\r\n\t\t}\r\n\r\n\t\tif( emailAddressMatch ) {\r\n\t\t\tmatch = new Autolinker.match.Email( { matchedText: matchStr, email: emailAddressMatch } );\r\n\r\n\t\t} else if( twitterMatch ) {\r\n\t\t\t// fix up the `matchStr` if there was a preceding whitespace char,\r\n\t\t\t// which was needed to determine the match itself (since there are\r\n\t\t\t// no look-behinds in JS regexes)\r\n\t\t\tif( twitterHandlePrefixWhitespaceChar ) {\r\n\t\t\t\tprefixStr = twitterHandlePrefixWhitespaceChar;\r\n\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed whitespace char from the match\r\n\t\t\t}\r\n\t\t\tmatch = new Autolinker.match.Twitter( { matchedText: matchStr, twitterHandle: twitterHandle } );\r\n\r\n\t\t} else if( phoneMatch ) {\r\n\t\t\t// remove non-numeric values from phone number string\r\n\t\t\tvar cleanNumber = matchStr.replace( /\\D/g, '' );\r\n \t\t\tmatch = new Autolinker.match.Phone( { matchedText: matchStr, number: cleanNumber } );\r\n\r\n\t\t} else if( hashtagMatch ) {\r\n\t\t\t// fix up the `matchStr` if there was a preceding whitespace char,\r\n\t\t\t// which was needed to determine the match itself (since there are\r\n\t\t\t// no look-behinds in JS regexes)\r\n\t\t\tif( hashtagPrefixWhitespaceChar ) {\r\n\t\t\t\tprefixStr = hashtagPrefixWhitespaceChar;\r\n\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed whitespace char from the match\r\n\t\t\t}\r\n\t\t\tmatch = new Autolinker.match.Hashtag( { matchedText: matchStr, serviceName: this.hashtag, hashtag: hashtag } );\r\n\r\n\t\t} else {  // url match\r\n\t\t\t// If it's a protocol-relative '//' match, remove the character\r\n\t\t\t// before the '//' (which the matcherRegex needed to match due to\r\n\t\t\t// the lack of a negative look-behind in JavaScript regular\r\n\t\t\t// expressions)\r\n\t\t\tif( protocolRelativeMatch ) {\r\n\t\t\t\tvar charBeforeMatch = protocolRelativeMatch.match( this.charBeforeProtocolRelMatchRegex )[ 1 ] || \"\";\r\n\r\n\t\t\t\tif( charBeforeMatch ) {  // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\r\n\t\t\t\t\tprefixStr = charBeforeMatch;\r\n\t\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed char from the match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tmatch = new Autolinker.match.Url( {\r\n\t\t\t\tmatchedText : matchStr,\r\n\t\t\t\turl : matchStr,\r\n\t\t\t\tprotocolUrlMatch : !!protocolUrlMatch,\r\n\t\t\t\tprotocolRelativeMatch : !!protocolRelativeMatch,\r\n\t\t\t\tstripPrefix : this.stripPrefix\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tprefixStr : prefixStr,\r\n\t\t\tsuffixStr : suffixStr,\r\n\t\t\tmatch     : match\r\n\t\t};\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Determines if a match found has an unmatched closing parenthesis. If so,\r\n\t * this parenthesis will be removed from the match itself, and appended\r\n\t * after the generated anchor tag in {@link #processCandidateMatch}.\r\n\t *\r\n\t * A match may have an extra closing parenthesis at the end of the match\r\n\t * because the regular expression must include parenthesis for URLs such as\r\n\t * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\r\n\t *\r\n\t * However, an extra parenthesis *will* be included when the URL itself is\r\n\t * wrapped in parenthesis, such as in the case of \"(wikipedia.com/something_(disambiguation))\".\r\n\t * In this case, the last closing parenthesis should *not* be part of the\r\n\t * URL itself, and this method will return `true`.\r\n\t *\r\n\t * @private\r\n\t * @param {String} matchStr The full match string from the {@link #matcherRegex}.\r\n\t * @return {Boolean} `true` if there is an unbalanced closing parenthesis at\r\n\t *   the end of the `matchStr`, `false` otherwise.\r\n\t */\r\n\tmatchHasUnbalancedClosingParen : function( matchStr ) {\r\n\t\tvar lastChar = matchStr.charAt( matchStr.length - 1 );\r\n\r\n\t\tif( lastChar === ')' ) {\r\n\t\t\tvar openParensMatch = matchStr.match( /\\(/g ),\r\n\t\t\t    closeParensMatch = matchStr.match( /\\)/g ),\r\n\t\t\t    numOpenParens = ( openParensMatch && openParensMatch.length ) || 0,\r\n\t\t\t    numCloseParens = ( closeParensMatch && closeParensMatch.length ) || 0;\r\n\r\n\t\t\tif( numOpenParens < numCloseParens ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n} );\r\n/*global Autolinker */\r\n/*jshint scripturl:true */\r\n/**\r\n * @private\r\n * @class Autolinker.MatchValidator\r\n * @extends Object\r\n *\r\n * Used by Autolinker to filter out false positives from the\r\n * {@link Autolinker.matchParser.MatchParser#matcherRegex}.\r\n *\r\n * Due to the limitations of regular expressions (including the missing feature\r\n * of look-behinds in JS regular expressions), we cannot always determine the\r\n * validity of a given match. This class applies a bit of additional logic to\r\n * filter out any false positives that have been matched by the\r\n * {@link Autolinker.matchParser.MatchParser#matcherRegex}.\r\n */\r\nAutolinker.MatchValidator = Autolinker.Util.extend( Object, {\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {RegExp} invalidProtocolRelMatchRegex\r\n\t *\r\n\t * The regular expression used to check a potential protocol-relative URL\r\n\t * match, coming from the {@link Autolinker.matchParser.MatchParser#matcherRegex}.\r\n\t * A protocol-relative URL is, for example, \"//yahoo.com\"\r\n\t *\r\n\t * This regular expression checks to see if there is a word character before\r\n\t * the '//' match in order to determine if we should actually autolink a\r\n\t * protocol-relative URL. This is needed because there is no negative\r\n\t * look-behind in JavaScript regular expressions.\r\n\t *\r\n\t * For instance, we want to autolink something like \"Go to: //google.com\",\r\n\t * but we don't want to autolink something like \"abc//google.com\"\r\n\t */\r\n\tinvalidProtocolRelMatchRegex : /^[\\w]\\/\\//,\r\n\r\n\t/**\r\n\t * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http-colon-slashslash '\r\n\t *\r\n\t * @private\r\n\t * @property {RegExp} hasFullProtocolRegex\r\n\t */\r\n\thasFullProtocolRegex : /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//,\r\n\r\n\t/**\r\n\t * Regex to find the URI scheme, such as 'mailto:'.\r\n\t *\r\n\t * This is used to filter out 'javascript:' and 'vbscript:' schemes.\r\n\t *\r\n\t * @private\r\n\t * @property {RegExp} uriSchemeRegex\r\n\t */\r\n\turiSchemeRegex : /^[A-Za-z][-.+A-Za-z0-9]+:/,\r\n\r\n\t/**\r\n\t * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\r\n\t *\r\n\t * @private\r\n\t * @property {RegExp} hasWordCharAfterProtocolRegex\r\n\t */\r\n\thasWordCharAfterProtocolRegex : /:[^\\s]*?[A-Za-z]/,\r\n\r\n\r\n\t/**\r\n\t * Determines if a given match found by the {@link Autolinker.matchParser.MatchParser}\r\n\t * is valid. Will return `false` for:\r\n\t *\r\n\t * 1) URL matches which do not have at least have one period ('.') in the\r\n\t *    domain name (effectively skipping over matches like \"abc:def\").\r\n\t *    However, URL matches with a protocol will be allowed (ex: 'http-colon-slashslash localhost')\r\n\t * 2) URL matches which do not have at least one word character in the\r\n\t *    domain name (effectively skipping over matches like \"git:1.0\").\r\n\t * 3) A protocol-relative url match (a URL beginning with '//') whose\r\n\t *    previous character is a word character (effectively skipping over\r\n\t *    strings like \"abc//google.com\")\r\n\t *\r\n\t * Otherwise, returns `true`.\r\n\t *\r\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an\r\n\t *   empty string if the match is not a URL match.\r\n\t * @param {String} protocolUrlMatch The match URL string for a protocol\r\n\t *   match. Ex: 'http-colon-slashslash yahoo.com'. This is used to match something like\r\n\t *   'http-colon-slashslash localhost', where we won't double check that the domain name\r\n\t *   has at least one '.' in it.\r\n\t * @param {String} protocolRelativeMatch The protocol-relative string for a\r\n\t *   URL match (i.e. '//'), possibly with a preceding character (ex, a\r\n\t *   space, such as: ' //', or a letter, such as: 'a//'). The match is\r\n\t *   invalid if there is a word character preceding the '//'.\r\n\t * @return {Boolean} `true` if the match given is valid and should be\r\n\t *   processed, or `false` if the match is invalid and/or should just not be\r\n\t *   processed.\r\n\t */\r\n\tisValidMatch : function( urlMatch, protocolUrlMatch, protocolRelativeMatch ) {\r\n\t\tif(\r\n\t\t\t( protocolUrlMatch && !this.isValidUriScheme( protocolUrlMatch ) ) ||\r\n\t\t\tthis.urlMatchDoesNotHaveProtocolOrDot( urlMatch, protocolUrlMatch ) ||       // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\r\n\t\t\tthis.urlMatchDoesNotHaveAtLeastOneWordChar( urlMatch, protocolUrlMatch ) ||  // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\r\n\t\t\tthis.isInvalidProtocolRelativeMatch( protocolRelativeMatch )                 // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\r\n\t\t) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Determines if the URI scheme is a valid scheme to be autolinked. Returns\r\n\t * `false` if the scheme is 'javascript:' or 'vbscript:'\r\n\t *\r\n\t * @private\r\n\t * @param {String} uriSchemeMatch The match URL string for a full URI scheme\r\n\t *   match. Ex: 'http-colon-slashslash yahoo.com' or 'mailto:a@a.com'.\r\n\t * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\r\n\t */\r\n\tisValidUriScheme : function( uriSchemeMatch ) {\r\n\t\tvar uriScheme = uriSchemeMatch.match( this.uriSchemeRegex )[ 0 ].toLowerCase();\r\n\r\n\t\treturn ( uriScheme !== 'javascript:' && uriScheme !== 'vbscript:' );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Determines if a URL match does not have either:\r\n\t *\r\n\t * a) a full protocol (i.e. 'http-colon-slashslash '), or\r\n\t * b) at least one dot ('.') in the domain name (for a non-full-protocol\r\n\t *    match).\r\n\t *\r\n\t * Either situation is considered an invalid URL (ex: 'git:d' does not have\r\n\t * either the '://' part, or at least one dot in the domain name. If the\r\n\t * match was 'git:abc.com', we would consider this valid.)\r\n\t *\r\n\t * @private\r\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an\r\n\t *   empty string if the match is not a URL match.\r\n\t * @param {String} protocolUrlMatch The match URL string for a protocol\r\n\t *   match. Ex: 'http-colon-slashslash yahoo.com'. This is used to match something like\r\n\t *   'http-colon-slashslash localhost', where we won't double check that the domain name\r\n\t *   has at least one '.' in it.\r\n\t * @return {Boolean} `true` if the URL match does not have a full protocol,\r\n\t *   or at least one dot ('.') in a non-full-protocol match.\r\n\t */\r\n\turlMatchDoesNotHaveProtocolOrDot : function( urlMatch, protocolUrlMatch ) {\r\n\t\treturn ( !!urlMatch && ( !protocolUrlMatch || !this.hasFullProtocolRegex.test( protocolUrlMatch ) ) && urlMatch.indexOf( '.' ) === -1 );\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Determines if a URL match does not have at least one word character after\r\n\t * the protocol (i.e. in the domain name).\r\n\t *\r\n\t * At least one letter character must exist in the domain name after a\r\n\t * protocol match. Ex: skip over something like \"git:1.0\"\r\n\t *\r\n\t * @private\r\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an\r\n\t *   empty string if the match is not a URL match.\r\n\t * @param {String} protocolUrlMatch The match URL string for a protocol\r\n\t *   match. Ex: 'http-colon-slashslash yahoo.com'. This is used to know whether or not we\r\n\t *   have a protocol in the URL string, in order to check for a word\r\n\t *   character after the protocol separator (':').\r\n\t * @return {Boolean} `true` if the URL match does not have at least one word\r\n\t *   character in it after the protocol, `false` otherwise.\r\n\t */\r\n\turlMatchDoesNotHaveAtLeastOneWordChar : function( urlMatch, protocolUrlMatch ) {\r\n\t\tif( urlMatch && protocolUrlMatch ) {\r\n\t\t\treturn !this.hasWordCharAfterProtocolRegex.test( urlMatch );\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Determines if a protocol-relative match is an invalid one. This method\r\n\t * returns `true` if there is a `protocolRelativeMatch`, and that match\r\n\t * contains a word character before the '//' (i.e. it must contain\r\n\t * whitespace or nothing before the '//' in order to be considered valid).\r\n\t *\r\n\t * @private\r\n\t * @param {String} protocolRelativeMatch The protocol-relative string for a\r\n\t *   URL match (i.e. '//'), possibly with a preceding character (ex, a\r\n\t *   space, such as: ' //', or a letter, such as: 'a//'). The match is\r\n\t *   invalid if there is a word character preceding the '//'.\r\n\t * @return {Boolean} `true` if it is an invalid protocol-relative match,\r\n\t *   `false` otherwise.\r\n\t */\r\n\tisInvalidProtocolRelativeMatch : function( protocolRelativeMatch ) {\r\n\t\treturn ( !!protocolRelativeMatch && this.invalidProtocolRelMatchRegex.test( protocolRelativeMatch ) );\r\n\t}\r\n\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @abstract\r\n * @class Autolinker.match.Match\r\n * \r\n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a \r\n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\r\n * \r\n * For example:\r\n * \r\n *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\r\n *     \r\n *     var linkedText = Autolinker.link( input, {\r\n *         replaceFn : function( autolinker, match ) {\r\n *             console.log( \"href = \", match.getAnchorHref() );\r\n *             console.log( \"text = \", match.getAnchorText() );\r\n *         \r\n *             switch( match.getType() ) {\r\n *                 case 'url' : \r\n *                     console.log( \"url: \", match.getUrl() );\r\n *                     \r\n *                 case 'email' :\r\n *                     console.log( \"email: \", match.getEmail() );\r\n *                     \r\n *                 case 'twitter' :\r\n *                     console.log( \"twitter: \", match.getTwitterHandle() );\r\n *             }\r\n *         }\r\n *     } );\r\n *     \r\n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\r\n */\r\nAutolinker.match.Match = Autolinker.Util.extend( Object, {\r\n\t\r\n\t/**\r\n\t * @cfg {String} matchedText (required)\r\n\t * \r\n\t * The original text that was matched.\r\n\t */\r\n\t\r\n\t\r\n\t/**\r\n\t * @constructor\r\n\t * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\r\n\t */\r\n\tconstructor : function( cfg ) {\r\n\t\tAutolinker.Util.assign( this, cfg );\r\n\t},\r\n\r\n\t\r\n\t/**\r\n\t * Returns a string name for the type of match that this class represents.\r\n\t * \r\n\t * @abstract\r\n\t * @return {String}\r\n\t */\r\n\tgetType : Autolinker.Util.abstractMethod,\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns the original text that was matched.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetMatchedText : function() {\r\n\t\treturn this.matchedText;\r\n\t},\r\n\t\r\n\r\n\t/**\r\n\t * Returns the anchor href that should be generated for the match.\r\n\t * \r\n\t * @abstract\r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorHref : Autolinker.Util.abstractMethod,\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns the anchor text that should be generated for the match.\r\n\t * \r\n\t * @abstract\r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorText : Autolinker.Util.abstractMethod\r\n\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.match.Email\r\n * @extends Autolinker.match.Match\r\n * \r\n * Represents a Email match found in an input string which should be Autolinked.\r\n * \r\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\r\n */\r\nAutolinker.match.Email = Autolinker.Util.extend( Autolinker.match.Match, {\r\n\t\r\n\t/**\r\n\t * @cfg {String} email (required)\r\n\t * \r\n\t * The email address that was matched.\r\n\t */\r\n\t\r\n\r\n\t/**\r\n\t * Returns a string name for the type of match that this class represents.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'email';\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns the email address that was matched.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetEmail : function() {\r\n\t\treturn this.email;\r\n\t},\r\n\t\r\n\r\n\t/**\r\n\t * Returns the anchor href that should be generated for the match.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorHref : function() {\r\n\t\treturn 'mailto:' + this.email;\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns the anchor text that should be generated for the match.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorText : function() {\r\n\t\treturn this.email;\r\n\t}\r\n\t\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.match.Hashtag\r\n * @extends Autolinker.match.Match\r\n *\r\n * Represents a Hashtag match found in an input string which should be\r\n * Autolinked.\r\n *\r\n * See this class's superclass ({@link Autolinker.match.Match}) for more\r\n * details.\r\n */\r\nAutolinker.match.Hashtag = Autolinker.Util.extend( Autolinker.match.Match, {\r\n\r\n\t/**\r\n\t * @cfg {String} serviceName (required)\r\n\t *\r\n\t * The service to point hashtag matches to. See {@link Autolinker#hashtag}\r\n\t * for available values.\r\n\t */\r\n\r\n\t/**\r\n\t * @cfg {String} hashtag (required)\r\n\t *\r\n\t * The Hashtag that was matched, without the '#'.\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * Returns the type of match that this class represents.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'hashtag';\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Returns the matched hashtag.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetHashtag : function() {\r\n\t\treturn this.hashtag;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Returns the anchor href that should be generated for the match.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorHref : function() {\r\n\t\tvar serviceName = this.serviceName,\r\n\t\t    hashtag = this.hashtag;\r\n\r\n\t\tswitch( serviceName ) {\r\n\t\t\tcase 'twitter' :\r\n\t\t\t\treturn 'https://twitter.com/hashtag/' + hashtag;\r\n\t\t\tcase 'facebook' :\r\n\t\t\t\treturn 'https://www.facebook.com/hashtag/' + hashtag;\r\n\r\n\t\t\tdefault :  // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\r\n\t\t\t\tthrow new Error( 'Unknown service name to point hashtag to: ', serviceName );\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Returns the anchor text that should be generated for the match.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorText : function() {\r\n\t\treturn '#' + this.hashtag;\r\n\t}\r\n\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.match.Phone\r\n * @extends Autolinker.match.Match\r\n *\r\n * Represents a Phone number match found in an input string which should be\r\n * Autolinked.\r\n *\r\n * See this class's superclass ({@link Autolinker.match.Match}) for more\r\n * details.\r\n */\r\nAutolinker.match.Phone = Autolinker.Util.extend( Autolinker.match.Match, {\r\n\r\n\t/**\r\n\t * @cfg {String} number (required)\r\n\t *\r\n\t * The phone number that was matched.\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * Returns a string name for the type of match that this class represents.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'phone';\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Returns the phone number that was matched.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetNumber: function() {\r\n\t\treturn this.number;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Returns the anchor href that should be generated for the match.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorHref : function() {\r\n\t\treturn 'tel:' + this.number;\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * Returns the anchor text that should be generated for the match.\r\n\t *\r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorText : function() {\r\n\t\treturn this.matchedText;\r\n\t}\r\n\r\n} );\r\n\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.match.Twitter\r\n * @extends Autolinker.match.Match\r\n * \r\n * Represents a Twitter match found in an input string which should be Autolinked.\r\n * \r\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\r\n */\r\nAutolinker.match.Twitter = Autolinker.Util.extend( Autolinker.match.Match, {\r\n\t\r\n\t/**\r\n\t * @cfg {String} twitterHandle (required)\r\n\t * \r\n\t * The Twitter handle that was matched.\r\n\t */\r\n\t\r\n\r\n\t/**\r\n\t * Returns the type of match that this class represents.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'twitter';\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns a string name for the type of match that this class represents.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetTwitterHandle : function() {\r\n\t\treturn this.twitterHandle;\r\n\t},\r\n\t\r\n\r\n\t/**\r\n\t * Returns the anchor href that should be generated for the match.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorHref : function() {\r\n\t\treturn 'https://twitter.com/' + this.twitterHandle;\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns the anchor text that should be generated for the match.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorText : function() {\r\n\t\treturn '@' + this.twitterHandle;\r\n\t}\r\n\t\r\n} );\r\n/*global Autolinker */\r\n/**\r\n * @class Autolinker.match.Url\r\n * @extends Autolinker.match.Match\r\n * \r\n * Represents a Url match found in an input string which should be Autolinked.\r\n * \r\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\r\n */\r\nAutolinker.match.Url = Autolinker.Util.extend( Autolinker.match.Match, {\r\n\t\r\n\t/**\r\n\t * @cfg {String} url (required)\r\n\t * \r\n\t * The url that was matched.\r\n\t */\r\n\t\r\n\t/**\r\n\t * @cfg {Boolean} protocolUrlMatch (required)\r\n\t * \r\n\t * `true` if the URL is a match which already has a protocol (i.e. 'http-colon-slashslash '), `false` if the match was from a 'www' or\r\n\t * known TLD match.\r\n\t */\r\n\t\r\n\t/**\r\n\t * @cfg {Boolean} protocolRelativeMatch (required)\r\n\t * \r\n\t * `true` if the URL is a protocol-relative match. A protocol-relative match is a URL that starts with '//',\r\n\t * and will be either http-colon-slashslash  or https-colon-slashslash  based on the protocol that the site is loaded under.\r\n\t */\r\n\t\r\n\t/**\r\n\t * @cfg {Boolean} stripPrefix (required)\r\n\t * @inheritdoc Autolinker#stripPrefix\r\n\t */\r\n\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * @property {RegExp} urlPrefixRegex\r\n\t * \r\n\t * A regular expression used to remove the 'http-colon-slashslash ' or 'https-colon-slashslash ' and/or the 'www.' from URLs.\r\n\t */\r\n\turlPrefixRegex: /^(https?:\\/\\/)?(www\\.)?/i,\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @property {RegExp} protocolRelativeRegex\r\n\t * \r\n\t * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\r\n\t * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\r\n\t */\r\n\tprotocolRelativeRegex : /^\\/\\//,\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @property {Boolean} protocolPrepended\r\n\t * \r\n\t * Will be set to `true` if the 'http-colon-slashslash ' protocol has been prepended to the {@link #url} (because the\r\n\t * {@link #url} did not have a protocol)\r\n\t */\r\n\tprotocolPrepended : false,\r\n\t\r\n\r\n\t/**\r\n\t * Returns a string name for the type of match that this class represents.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetType : function() {\r\n\t\treturn 'url';\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns the url that was matched, assuming the protocol to be 'http-colon-slashslash ' if the original\r\n\t * match was missing a protocol.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetUrl : function() {\r\n\t\tvar url = this.url;\r\n\t\t\r\n\t\t// if the url string doesn't begin with a protocol, assume 'http://'\r\n\t\tif( !this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended ) {\r\n\t\t\turl = this.url = 'http://' + url;\r\n\t\t\t\r\n\t\t\tthis.protocolPrepended = true;\r\n\t\t}\r\n\t\t\r\n\t\treturn url;\r\n\t},\r\n\t\r\n\r\n\t/**\r\n\t * Returns the anchor href that should be generated for the match.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorHref : function() {\r\n\t\tvar url = this.getUrl();\r\n\t\t\r\n\t\treturn url.replace( /&amp;/g, '&' );  // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html \r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns the anchor text that should be generated for the match.\r\n\t * \r\n\t * @return {String}\r\n\t */\r\n\tgetAnchorText : function() {\r\n\t\tvar anchorText = this.getUrl();\r\n\t\t\r\n\t\tif( this.protocolRelativeMatch ) {\r\n\t\t\t// Strip off any protocol-relative '//' from the anchor text\r\n\t\t\tanchorText = this.stripProtocolRelativePrefix( anchorText );\r\n\t\t}\r\n\t\tif( this.stripPrefix ) {\r\n\t\t\tanchorText = this.stripUrlPrefix( anchorText );\r\n\t\t}\r\n\t\tanchorText = this.removeTrailingSlash( anchorText );  // remove trailing slash, if there is one\r\n\t\t\r\n\t\treturn anchorText;\r\n\t},\r\n\t\r\n\t\r\n\t// ---------------------------------------\r\n\t\r\n\t// Utility Functionality\r\n\t\r\n\t/**\r\n\t * Strips the URL prefix (such as \"http-colon-slashslash \" or \"https-colon-slashslash \") from the given text.\r\n\t * \r\n\t * @private\r\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\r\n\t *   url prefix (such as stripping off \"http-colon-slashslash \")\r\n\t * @return {String} The `anchorText`, with the prefix stripped.\r\n\t */\r\n\tstripUrlPrefix : function( text ) {\r\n\t\treturn text.replace( this.urlPrefixRegex, '' );\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Strips any protocol-relative '//' from the anchor text.\r\n\t * \r\n\t * @private\r\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\r\n\t *   protocol-relative prefix (such as stripping off \"//\")\r\n\t * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\r\n\t */\r\n\tstripProtocolRelativePrefix : function( text ) {\r\n\t\treturn text.replace( this.protocolRelativeRegex, '' );\r\n\t},\r\n\t\r\n\t\r\n\t/**\r\n\t * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\r\n\t * \r\n\t * @private\r\n\t * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\r\n\t *   slash ('/') that may exist.\r\n\t * @return {String} The `anchorText`, with the trailing slash removed.\r\n\t */\r\n\tremoveTrailingSlash : function( anchorText ) {\r\n\t\tif( anchorText.charAt( anchorText.length - 1 ) === '/' ) {\r\n\t\t\tanchorText = anchorText.slice( 0, -1 );\r\n\t\t}\r\n\t\treturn anchorText;\r\n\t}\r\n\t\r\n} );\r\nreturn Autolinker;\r\n\r\n}));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/ThirdParty/Autolinker.js\n// module id = 2249\n// module chunks = 0","define([], function() {\r\n    'use strict';\r\n    /**\r\n     * Representation of <Camera> from KML\r\n     * @alias KmlCamera\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} position camera position\r\n     * @param {HeadingPitchRoll} headingPitchRoll camera orientation\r\n     */\r\n    function KmlCamera(position, headingPitchRoll) {\r\n        this.position = position;\r\n        this.headingPitchRoll = headingPitchRoll;\r\n    }\r\n\r\n    return KmlCamera;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/KmlCamera.js\n// module id = 2250\n// module chunks = 0","define([], function() {\r\n    'use strict';\r\n    /**\r\n     * @alias KmlLookAt\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} position camera position\r\n     * @param {HeadingPitchRange} headingPitchRange camera orientation\r\n     */\r\n    function KmlLookAt(position, headingPitchRange) {\r\n        this.position = position;\r\n        this.headingPitchRange = headingPitchRange;\r\n    }\r\n\r\n    return KmlLookAt;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/KmlLookAt.js\n// module id = 2251\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/Event'\r\n    ], function(\r\n        defined,\r\n        Event) {\r\n    'use strict';\r\n    /**\r\n     * @alias KmlTour\r\n     * @constructor\r\n     *\r\n     * @param {String} name name parsed from KML\r\n     * @param {String} id id parsed from KML\r\n     * @param {Array} playlist array with KMLTourFlyTos, KMLTourWaits and KMLTourSoundCues\r\n     */\r\n    function KmlTour(name, id) {\r\n        /**\r\n         * Id of kml gx:Tour entry\r\n         * @type String\r\n         */\r\n        this.id = id;\r\n        /**\r\n         * Tour name\r\n         * @type String\r\n         */\r\n        this.name = name;\r\n        /**\r\n         * Index of current entry from playlist\r\n         * @type Number\r\n         */\r\n        this.playlistIndex = 0;\r\n        /**\r\n         * Array of playlist entries\r\n         * @type Array\r\n         */\r\n        this.playlist = [];\r\n        /**\r\n         * Event will be called when tour starts to play,\r\n         * before any playlist entry starts to play.\r\n         * @type Event\r\n         */\r\n        this.tourStart = new Event();\r\n        /**\r\n         * Event will be called when all playlist entries are\r\n         * played, or tour playback being canceled.\r\n         *\r\n         * If tour playback was terminated, event callback will\r\n         * be called with terminated=true parameter.\r\n         * @type Event\r\n         */\r\n        this.tourEnd = new Event();\r\n        /**\r\n         * Event will be called when entry from playlist starts to play.\r\n         *\r\n         * Event callback will be called with curent entry as first parameter.\r\n         * @type Event\r\n         */\r\n        this.entryStart = new Event();\r\n        /**\r\n         * Event will be called when entry from playlist ends to play.\r\n         *\r\n         * Event callback will be called with following parameters:\r\n         * 1. entry - entry\r\n         * 2. terminated - true if playback was terminated by calling {@link KmlTour#stop}\r\n         * @type Event\r\n         */\r\n        this.entryEnd = new Event();\r\n\r\n        this._activeEntries = [];\r\n    }\r\n\r\n    /**\r\n     * Add entry to this tour playlist.\r\n     *\r\n     * @param {KmlTourFlyTo|KmlTourWait} entry an entry to add to the playlist.\r\n     */\r\n    KmlTour.prototype.addPlaylistEntry = function(entry) {\r\n        this.playlist.push(entry);\r\n    };\r\n\r\n    /**\r\n     * Play this tour.\r\n     *\r\n     * @param {Viewer} viewer viewer widget.\r\n     * @param {Object} [cameraOptions] these options will be merged with {@link Camera#flyTo}\r\n     * options for FlyTo playlist entries.\r\n     */\r\n    KmlTour.prototype.play = function(viewer, cameraOptions) {\r\n        this.tourStart.raiseEvent();\r\n\r\n        var tour = this;\r\n        playEntry.call(this, viewer, cameraOptions, function(terminated) {\r\n            tour.playlistIndex = 0;\r\n            // Stop nonblocking entries\r\n            if (!terminated) {\r\n                cancelAllEntries(tour._activeEntries);\r\n            }\r\n            tour.tourEnd.raiseEvent(terminated);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Stop curently playing tour.\r\n     */\r\n    KmlTour.prototype.stop = function() {\r\n        cancelAllEntries(this._activeEntries);\r\n    };\r\n\r\n    /**\r\n     * Stop all activeEntries.\r\n     * @param {Array} activeEntries\r\n     */\r\n    function cancelAllEntries(activeEntries) {\r\n        for(var entry = activeEntries.pop(); entry !== undefined; entry = activeEntries.pop()) {\r\n            entry.stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play playlist entry.\r\n     * This function is called recursevly with playNext\r\n     * and iterates over all entries from playlist.\r\n     *\r\n     * @param {ViewerWidget} viewer Cesium viewer.\r\n     * @param {Object} cameraOptions see {@link Camera#flyTo}.\r\n     * @param {Function} allDone a function will be called when all entries from playlist\r\n     * being played or user call {@link KmlTour#stop}.\r\n     */\r\n    function playEntry(viewer, cameraOptions, allDone) {\r\n        var entry = this.playlist[this.playlistIndex];\r\n        if (entry) {\r\n            var _playNext = playNext.bind(this, viewer, cameraOptions, allDone);\r\n            this._activeEntries.push(entry);\r\n            this.entryStart.raiseEvent(entry);\r\n            if (entry.blocking) {\r\n                entry.play(_playNext, viewer.scene.camera, cameraOptions);\r\n            }\r\n            else {\r\n                var tour = this;\r\n                entry.play(function() {\r\n                    tour.entryEnd.raiseEvent(entry);\r\n                    var indx = tour._activeEntries.indexOf(entry);\r\n                    if (indx >= 0) {\r\n                        tour._activeEntries.splice(indx, 1);\r\n                    }\r\n                });\r\n                _playNext(viewer, cameraOptions, allDone);\r\n            }\r\n        }\r\n        else if(defined(allDone)) {\r\n            allDone(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment playlistIndex and call playEntry\r\n     * if terminated isn't true.\r\n     *\r\n     * @param {ViewerWidget} viewer passed for recursion.\r\n     * @param {Object} cameraOptions passed for recursion.\r\n     * @param {Function} allDone passed for recursion.\r\n     * @param {Boolean} terminated true if active entry was terminated,\r\n     * and the whole tour should be terminated.\r\n     */\r\n    function playNext(viewer, cameraOptions, allDone, terminated) {\r\n        var entry = this.playlist[this.playlistIndex];\r\n        this.entryEnd.raiseEvent(entry, terminated);\r\n\r\n        if (terminated) {\r\n            allDone(terminated);\r\n        }\r\n        else {\r\n            var indx = this._activeEntries.indexOf(entry);\r\n            if (indx >= 0) {\r\n                this._activeEntries.splice(indx, 1);\r\n            }\r\n            this.playlistIndex++;\r\n            playEntry.call(this, viewer, cameraOptions, allDone);\r\n        }\r\n    }\r\n\r\n    return KmlTour;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/KmlTour.js\n// module id = 2252\n// module chunks = 0","define([\r\n        '../Core/BoundingSphere',\r\n        '../Core/combine',\r\n        '../Core/defined',\r\n        '../Core/EasingFunction'\r\n    ], function(\r\n        BoundingSphere,\r\n        combine,\r\n        defined,\r\n        EasingFunction) {\r\n    'use strict';\r\n    /**\r\n     * @alias KmlTourFlyTo\r\n     * @constructor\r\n     *\r\n     * @param {Number} duration entry duration\r\n     * @param {String} flyToMode KML fly to mode: bounce, smooth, etc\r\n     * @param {KmlCamera|KmlLookAt} view KmlCamera or KmlLookAt\r\n     */\r\n    function KmlTourFlyTo(duration, flyToMode, view) {\r\n        this.type = 'KmlTourFlyTo';\r\n        this.blocking = true;\r\n        this.activeCamera = null;\r\n        this.activeCallback = null;\r\n\r\n        this.duration = duration;\r\n        this.view = view;\r\n        this.flyToMode = flyToMode;\r\n    }\r\n\r\n    /**\r\n     * Play this playlist entry\r\n     *\r\n     * @param {KmlTourFlyTo~DoneCallback} done function which will be called when playback ends\r\n     * @param {Camera} camera Cesium camera\r\n     * @param {Object} [cameraOptions] which will be merged with camera flyTo options. See {@link Camera#flyTo}\r\n     */\r\n    KmlTourFlyTo.prototype.play = function(done, camera, cameraOptions) {\r\n        this.activeCamera = camera;\r\n        if (defined(done) && done !== null) {\r\n            var self = this;\r\n            this.activeCallback = function(terminated) {\r\n                delete self.activeCallback;\r\n                delete self.activeCamera;\r\n                done(defined(terminated) ? false : terminated);\r\n            };\r\n        }\r\n\r\n        var options = this.getCameraOptions(cameraOptions);\r\n        if (this.view.headingPitchRoll) {\r\n            camera.flyTo(options);\r\n        }\r\n        else if (this.view.headingPitchRange) {\r\n            var target = new BoundingSphere(this.view.position);\r\n            camera.flyToBoundingSphere(target, options);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Stop execution of curent entry. Cancel camera flyTo\r\n     */\r\n    KmlTourFlyTo.prototype.stop = function() {\r\n        if (defined(this.activeCamera)) {\r\n            this.activeCamera.cancelFlight();\r\n        }\r\n        if (defined(this.activeCallback)) {\r\n            this.activeCallback(true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns options for {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere}\r\n     * depends on this.view type.\r\n     *\r\n     * @param {Object} cameraOptions options to merge with generated. See {@link Camera#flyTo}\r\n     * @returns {Object} {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere} options\r\n     */\r\n    KmlTourFlyTo.prototype.getCameraOptions = function(cameraOptions) {\r\n        var options = {\r\n            duration: this.duration\r\n        };\r\n\r\n        if (defined(this.activeCallback)) {\r\n            options.complete = this.activeCallback;\r\n        }\r\n\r\n        if (this.flyToMode === 'smooth' ) {\r\n            options.easingFunction = EasingFunction.LINEAR_NONE;\r\n        }\r\n\r\n        if (this.view.headingPitchRoll) {\r\n            options.destination = this.view.position;\r\n            options.orientation = this.view.headingPitchRoll;\r\n        }\r\n        else if (this.view.headingPitchRange) {\r\n            options.offset = this.view.headingPitchRange;\r\n        }\r\n\r\n        if (defined(cameraOptions)) {\r\n            options = combine(options, cameraOptions);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * A function that will be executed when the flight completes.\r\n     * @callback KmlTourFlyTo~DoneCallback\r\n     *\r\n     * @param {Boolean} terminated true if {@link KmlTourFlyTo#stop} was\r\n     * called before entry done playback.\r\n     */\r\n\r\n    return KmlTourFlyTo;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/KmlTourFlyTo.js\n// module id = 2253\n// module chunks = 0","define([\r\n        '../Core/defined'\r\n    ], function(\r\n        defined) {\r\n    'use strict';\r\n    /**\r\n     * @alias KmlTourWait\r\n     * @constructor\r\n     *\r\n     * @param {Number} duration entry duration\r\n     */\r\n    function KmlTourWait(duration) {\r\n        this.type = 'KmlTourWait';\r\n        this.blocking = true;\r\n        this.duration = duration;\r\n\r\n        this.timeout = null;\r\n    }\r\n\r\n    /**\r\n     * Play this playlist entry\r\n     *\r\n     * @param {KmlTourWait~DoneCallback} done function which will be called when playback ends\r\n     */\r\n    KmlTourWait.prototype.play = function(done) {\r\n        var self = this;\r\n        this.activeCallback = done;\r\n        this.timeout = setTimeout(function() {\r\n            delete self.activeCallback;\r\n            done(false);\r\n        }, this.duration * 1000);\r\n    };\r\n\r\n    /**\r\n     * Stop execution of curent entry, cancel curent timeout\r\n     */\r\n    KmlTourWait.prototype.stop = function() {\r\n        clearTimeout(this.timeout);\r\n        if (defined(this.activeCallback)) {\r\n            this.activeCallback(true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * A function which will be called when playback ends.\r\n     *\r\n     * @callback KmlTourWait~DoneCallback\r\n     * @param {Boolean} terminated true if {@link KmlTourWait#stop} was\r\n     * called before entry done playback.\r\n     */\r\n\r\n    return KmlTourWait;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/KmlTourWait.js\n// module id = 2254\n// module chunks = 0","define([\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Ellipsoid',\r\n        '../Core/Event',\r\n        '../Core/ReferenceFrame',\r\n        './Property'\r\n    ], function(\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Event,\r\n        ReferenceFrame,\r\n        Property) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This is a temporary class for scaling position properties to the WGS84 surface.\r\n     * It will go away or be refactored to support data with arbitrary height references.\r\n     * @private\r\n     */\r\n    function ScaledPositionProperty(value) {\r\n        this._definitionChanged = new Event();\r\n        this._value = undefined;\r\n        this._removeSubscription = undefined;\r\n        this.setValue(value);\r\n    }\r\n\r\n    defineProperties(ScaledPositionProperty.prototype, {\r\n        isConstant : {\r\n            get : function() {\r\n                return Property.isConstant(this._value);\r\n            }\r\n        },\r\n        definitionChanged : {\r\n            get : function() {\r\n                return this._definitionChanged;\r\n            }\r\n        },\r\n        referenceFrame : {\r\n            get : function() {\r\n                return defined(this._value) ? this._value.referenceFrame : ReferenceFrame.FIXED;\r\n            }\r\n        }\r\n    });\r\n\r\n    ScaledPositionProperty.prototype.getValue = function(time, result) {\r\n        return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\r\n    };\r\n\r\n    ScaledPositionProperty.prototype.setValue = function(value) {\r\n        if (this._value !== value) {\r\n            this._value = value;\r\n\r\n            if (defined(this._removeSubscription)) {\r\n                this._removeSubscription();\r\n                this._removeSubscription = undefined;\r\n            }\r\n\r\n            if (defined(value)) {\r\n                this._removeSubscription = value.definitionChanged.addEventListener(this._raiseDefinitionChanged, this);\r\n            }\r\n            this._definitionChanged.raiseEvent(this);\r\n        }\r\n    };\r\n\r\n    ScaledPositionProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\r\n        \r\n\r\n        if (!defined(this._value)) {\r\n            return undefined;\r\n        }\r\n\r\n        result = this._value.getValueInReferenceFrame(time, referenceFrame, result);\r\n        return defined(result) ? Ellipsoid.WGS84.scaleToGeodeticSurface(result, result) : undefined;\r\n    };\r\n\r\n    ScaledPositionProperty.prototype.equals = function(other) {\r\n        return this === other || (other instanceof ScaledPositionProperty && this._value === other._value);\r\n    };\r\n\r\n    ScaledPositionProperty.prototype._raiseDefinitionChanged = function() {\r\n        this._definitionChanged.raiseEvent(this);\r\n    };\r\n\r\n    return ScaledPositionProperty;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/ScaledPositionProperty.js\n// module id = 2255\n// module chunks = 0","define([\r\n        '../Core/BoundingRectangle',\r\n        '../Core/Cartesian2',\r\n        '../Core/Cartesian3',\r\n        '../Core/Cartographic',\r\n        '../Core/ClockRange',\r\n        '../Core/ClockStep',\r\n        '../Core/Color',\r\n        '../Core/CornerType',\r\n        '../Core/createGuid',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/DistanceDisplayCondition',\r\n        '../Core/Ellipsoid',\r\n        '../Core/Event',\r\n        '../Core/ExtrapolationType',\r\n        '../Core/getFilenameFromUri',\r\n        '../Core/HermitePolynomialApproximation',\r\n        '../Core/isArray',\r\n        '../Core/Iso8601',\r\n        '../Core/JulianDate',\r\n        '../Core/LagrangePolynomialApproximation',\r\n        '../Core/LinearApproximation',\r\n        '../Core/Math',\r\n        '../Core/NearFarScalar',\r\n        '../Core/Quaternion',\r\n        '../Core/Rectangle',\r\n        '../Core/ReferenceFrame',\r\n        '../Core/Resource',\r\n        '../Core/RuntimeError',\r\n        '../Core/Spherical',\r\n        '../Core/TimeInterval',\r\n        '../Core/TimeIntervalCollection',\r\n        '../Scene/ColorBlendMode',\r\n        '../Scene/HeightReference',\r\n        '../Scene/HorizontalOrigin',\r\n        '../Scene/LabelStyle',\r\n        '../Scene/ShadowMode',\r\n        '../Scene/VerticalOrigin',\r\n        '../ThirdParty/Uri',\r\n        '../ThirdParty/when',\r\n        './BillboardGraphics',\r\n        './BoxGraphics',\r\n        './ColorMaterialProperty',\r\n        './CompositeMaterialProperty',\r\n        './CompositePositionProperty',\r\n        './CompositeProperty',\r\n        './ConstantPositionProperty',\r\n        './ConstantProperty',\r\n        './CorridorGraphics',\r\n        './CylinderGraphics',\r\n        './DataSource',\r\n        './DataSourceClock',\r\n        './EllipseGraphics',\r\n        './EllipsoidGraphics',\r\n        './EntityCluster',\r\n        './EntityCollection',\r\n        './GridMaterialProperty',\r\n        './ImageMaterialProperty',\r\n        './LabelGraphics',\r\n        './ModelGraphics',\r\n        './NodeTransformationProperty',\r\n        './PathGraphics',\r\n        './PointGraphics',\r\n        './PolygonGraphics',\r\n        './PolylineArrowMaterialProperty',\r\n        './PolylineDashMaterialProperty',\r\n        './PolylineGlowMaterialProperty',\r\n        './PolylineGraphics',\r\n        './PolylineOutlineMaterialProperty',\r\n        './PositionPropertyArray',\r\n        './PropertyArray',\r\n        './PropertyBag',\r\n        './RectangleGraphics',\r\n        './ReferenceProperty',\r\n        './Rotation',\r\n        './SampledPositionProperty',\r\n        './SampledProperty',\r\n        './StripeMaterialProperty',\r\n        './StripeOrientation',\r\n        './TimeIntervalCollectionPositionProperty',\r\n        './TimeIntervalCollectionProperty',\r\n        './VelocityOrientationProperty',\r\n        './VelocityVectorProperty',\r\n        './WallGraphics'\r\n    ], function(\r\n        BoundingRectangle,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        ClockRange,\r\n        ClockStep,\r\n        Color,\r\n        CornerType,\r\n        createGuid,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        DistanceDisplayCondition,\r\n        Ellipsoid,\r\n        Event,\r\n        ExtrapolationType,\r\n        getFilenameFromUri,\r\n        HermitePolynomialApproximation,\r\n        isArray,\r\n        Iso8601,\r\n        JulianDate,\r\n        LagrangePolynomialApproximation,\r\n        LinearApproximation,\r\n        CesiumMath,\r\n        NearFarScalar,\r\n        Quaternion,\r\n        Rectangle,\r\n        ReferenceFrame,\r\n        Resource,\r\n        RuntimeError,\r\n        Spherical,\r\n        TimeInterval,\r\n        TimeIntervalCollection,\r\n        ColorBlendMode,\r\n        HeightReference,\r\n        HorizontalOrigin,\r\n        LabelStyle,\r\n        ShadowMode,\r\n        VerticalOrigin,\r\n        Uri,\r\n        when,\r\n        BillboardGraphics,\r\n        BoxGraphics,\r\n        ColorMaterialProperty,\r\n        CompositeMaterialProperty,\r\n        CompositePositionProperty,\r\n        CompositeProperty,\r\n        ConstantPositionProperty,\r\n        ConstantProperty,\r\n        CorridorGraphics,\r\n        CylinderGraphics,\r\n        DataSource,\r\n        DataSourceClock,\r\n        EllipseGraphics,\r\n        EllipsoidGraphics,\r\n        EntityCluster,\r\n        EntityCollection,\r\n        GridMaterialProperty,\r\n        ImageMaterialProperty,\r\n        LabelGraphics,\r\n        ModelGraphics,\r\n        NodeTransformationProperty,\r\n        PathGraphics,\r\n        PointGraphics,\r\n        PolygonGraphics,\r\n        PolylineArrowMaterialProperty,\r\n        PolylineDashMaterialProperty,\r\n        PolylineGlowMaterialProperty,\r\n        PolylineGraphics,\r\n        PolylineOutlineMaterialProperty,\r\n        PositionPropertyArray,\r\n        PropertyArray,\r\n        PropertyBag,\r\n        RectangleGraphics,\r\n        ReferenceProperty,\r\n        Rotation,\r\n        SampledPositionProperty,\r\n        SampledProperty,\r\n        StripeMaterialProperty,\r\n        StripeOrientation,\r\n        TimeIntervalCollectionPositionProperty,\r\n        TimeIntervalCollectionProperty,\r\n        VelocityOrientationProperty,\r\n        VelocityVectorProperty,\r\n        WallGraphics) {\r\n    'use strict';\r\n\r\n    // A marker type to distinguish CZML properties where we need to end up with a unit vector.\r\n    // The data is still loaded into Cartesian3 objects but they are normalized.\r\n    function UnitCartesian3() {}\r\n    UnitCartesian3.packedLength = Cartesian3.packedLength;\r\n    UnitCartesian3.unpack = Cartesian3.unpack;\r\n    UnitCartesian3.pack = Cartesian3.pack;\r\n\r\n    // As a side note, for the purposes of CZML, Quaternion always indicates a unit quaternion.\r\n\r\n    var currentId;\r\n\r\n    function createReferenceProperty(entityCollection, referenceString) {\r\n        if (referenceString[0] === '#') {\r\n            referenceString = currentId + referenceString;\r\n        }\r\n        return ReferenceProperty.fromString(entityCollection, referenceString);\r\n    }\r\n\r\n    function createSpecializedProperty(type, entityCollection, packetData) {\r\n        if (defined(packetData.reference)) {\r\n            return createReferenceProperty(entityCollection, packetData.reference);\r\n        }\r\n\r\n        if (defined(packetData.velocityReference)) {\r\n            var referenceProperty = createReferenceProperty(entityCollection, packetData.velocityReference);\r\n            switch (type) {\r\n                case Cartesian3:\r\n                case UnitCartesian3:\r\n                    return new VelocityVectorProperty(referenceProperty, type === UnitCartesian3);\r\n                case Quaternion:\r\n                    return new VelocityOrientationProperty(referenceProperty);\r\n            }\r\n        }\r\n\r\n        throw new RuntimeError(JSON.stringify(packetData) + ' is not valid CZML.');\r\n    }\r\n\r\n    var scratchCartesian = new Cartesian3();\r\n    var scratchSpherical = new Spherical();\r\n    var scratchCartographic = new Cartographic();\r\n    var scratchTimeInterval = new TimeInterval();\r\n    var scratchQuaternion = new Quaternion();\r\n\r\n    function unwrapColorInterval(czmlInterval) {\r\n        var rgbaf = czmlInterval.rgbaf;\r\n        if (defined(rgbaf)) {\r\n            return rgbaf;\r\n        }\r\n\r\n        var rgba = czmlInterval.rgba;\r\n        if (!defined(rgba)) {\r\n            return undefined;\r\n        }\r\n\r\n        var length = rgba.length;\r\n        if (length === Color.packedLength) {\r\n            return [Color.byteToFloat(rgba[0]), Color.byteToFloat(rgba[1]), Color.byteToFloat(rgba[2]), Color.byteToFloat(rgba[3])];\r\n        }\r\n\r\n        rgbaf = new Array(length);\r\n        for (var i = 0; i < length; i += 5) {\r\n            rgbaf[i] = rgba[i];\r\n            rgbaf[i + 1] = Color.byteToFloat(rgba[i + 1]);\r\n            rgbaf[i + 2] = Color.byteToFloat(rgba[i + 2]);\r\n            rgbaf[i + 3] = Color.byteToFloat(rgba[i + 3]);\r\n            rgbaf[i + 4] = Color.byteToFloat(rgba[i + 4]);\r\n        }\r\n        return rgbaf;\r\n    }\r\n\r\n    function unwrapUriInterval(czmlInterval, sourceUri) {\r\n        var uri = defaultValue(czmlInterval.uri, czmlInterval);\r\n        if (defined(sourceUri)) {\r\n            return sourceUri.getDerivedResource({\r\n                url: uri\r\n            });\r\n        }\r\n\r\n        return Resource.createIfNeeded(uri);\r\n    }\r\n\r\n    function unwrapRectangleInterval(czmlInterval) {\r\n        var wsen = czmlInterval.wsen;\r\n        if (defined(wsen)) {\r\n            return wsen;\r\n        }\r\n\r\n        var wsenDegrees = czmlInterval.wsenDegrees;\r\n        if (!defined(wsenDegrees)) {\r\n            return undefined;\r\n        }\r\n\r\n        var length = wsenDegrees.length;\r\n        if (length === Rectangle.packedLength) {\r\n            return [CesiumMath.toRadians(wsenDegrees[0]), CesiumMath.toRadians(wsenDegrees[1]), CesiumMath.toRadians(wsenDegrees[2]), CesiumMath.toRadians(wsenDegrees[3])];\r\n        }\r\n\r\n        wsen = new Array(length);\r\n        for (var i = 0; i < length; i += 5) {\r\n            wsen[i] = wsenDegrees[i];\r\n            wsen[i + 1] = CesiumMath.toRadians(wsenDegrees[i + 1]);\r\n            wsen[i + 2] = CesiumMath.toRadians(wsenDegrees[i + 2]);\r\n            wsen[i + 3] = CesiumMath.toRadians(wsenDegrees[i + 3]);\r\n            wsen[i + 4] = CesiumMath.toRadians(wsenDegrees[i + 4]);\r\n        }\r\n        return wsen;\r\n    }\r\n\r\n    function convertUnitSphericalToCartesian(unitSpherical) {\r\n        var length = unitSpherical.length;\r\n        scratchSpherical.magnitude = 1.0;\r\n        if (length === 2) {\r\n            scratchSpherical.clock = unitSpherical[0];\r\n            scratchSpherical.cone = unitSpherical[1];\r\n            Cartesian3.fromSpherical(scratchSpherical, scratchCartesian);\r\n            return [scratchCartesian.x, scratchCartesian.y, scratchCartesian.z];\r\n        }\r\n\r\n        var result = new Array(length / 3 * 4);\r\n        for (var i = 0, j = 0; i < length; i += 3, j += 4) {\r\n            result[j] = unitSpherical[i];\r\n\r\n            scratchSpherical.clock = unitSpherical[i + 1];\r\n            scratchSpherical.cone = unitSpherical[i + 2];\r\n            Cartesian3.fromSpherical(scratchSpherical, scratchCartesian);\r\n\r\n            result[j + 1] = scratchCartesian.x;\r\n            result[j + 2] = scratchCartesian.y;\r\n            result[j + 3] = scratchCartesian.z;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertSphericalToCartesian(spherical) {\r\n        var length = spherical.length;\r\n        if (length === 3) {\r\n            scratchSpherical.clock = spherical[0];\r\n            scratchSpherical.cone = spherical[1];\r\n            scratchSpherical.magnitude = spherical[2];\r\n            Cartesian3.fromSpherical(scratchSpherical, scratchCartesian);\r\n            return [scratchCartesian.x, scratchCartesian.y, scratchCartesian.z];\r\n        }\r\n\r\n        var result = new Array(length);\r\n        for (var i = 0; i < length; i += 4) {\r\n            result[i] = spherical[i];\r\n\r\n            scratchSpherical.clock = spherical[i + 1];\r\n            scratchSpherical.cone = spherical[i + 2];\r\n            scratchSpherical.magnitude = spherical[i + 3];\r\n            Cartesian3.fromSpherical(scratchSpherical, scratchCartesian);\r\n\r\n            result[i + 1] = scratchCartesian.x;\r\n            result[i + 2] = scratchCartesian.y;\r\n            result[i + 3] = scratchCartesian.z;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertCartographicRadiansToCartesian(cartographicRadians) {\r\n        var length = cartographicRadians.length;\r\n        if (length === 3) {\r\n            scratchCartographic.longitude = cartographicRadians[0];\r\n            scratchCartographic.latitude = cartographicRadians[1];\r\n            scratchCartographic.height = cartographicRadians[2];\r\n            Ellipsoid.WGS84.cartographicToCartesian(scratchCartographic, scratchCartesian);\r\n            return [scratchCartesian.x, scratchCartesian.y, scratchCartesian.z];\r\n        }\r\n\r\n        var result = new Array(length);\r\n        for (var i = 0; i < length; i += 4) {\r\n            result[i] = cartographicRadians[i];\r\n\r\n            scratchCartographic.longitude = cartographicRadians[i + 1];\r\n            scratchCartographic.latitude = cartographicRadians[i + 2];\r\n            scratchCartographic.height = cartographicRadians[i + 3];\r\n            Ellipsoid.WGS84.cartographicToCartesian(scratchCartographic, scratchCartesian);\r\n\r\n            result[i + 1] = scratchCartesian.x;\r\n            result[i + 2] = scratchCartesian.y;\r\n            result[i + 3] = scratchCartesian.z;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertCartographicDegreesToCartesian(cartographicDegrees) {\r\n        var length = cartographicDegrees.length;\r\n        if (length === 3) {\r\n            scratchCartographic.longitude = CesiumMath.toRadians(cartographicDegrees[0]);\r\n            scratchCartographic.latitude = CesiumMath.toRadians(cartographicDegrees[1]);\r\n            scratchCartographic.height = cartographicDegrees[2];\r\n            Ellipsoid.WGS84.cartographicToCartesian(scratchCartographic, scratchCartesian);\r\n            return [scratchCartesian.x, scratchCartesian.y, scratchCartesian.z];\r\n        }\r\n\r\n        var result = new Array(length);\r\n        for (var i = 0; i < length; i += 4) {\r\n            result[i] = cartographicDegrees[i];\r\n\r\n            scratchCartographic.longitude = CesiumMath.toRadians(cartographicDegrees[i + 1]);\r\n            scratchCartographic.latitude = CesiumMath.toRadians(cartographicDegrees[i + 2]);\r\n            scratchCartographic.height = cartographicDegrees[i + 3];\r\n            Ellipsoid.WGS84.cartographicToCartesian(scratchCartographic, scratchCartesian);\r\n\r\n            result[i + 1] = scratchCartesian.x;\r\n            result[i + 2] = scratchCartesian.y;\r\n            result[i + 3] = scratchCartesian.z;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function unwrapCartesianInterval(czmlInterval) {\r\n        var cartesian = czmlInterval.cartesian;\r\n        if (defined(cartesian)) {\r\n            return cartesian;\r\n        }\r\n\r\n        var cartesianVelocity = czmlInterval.cartesianVelocity;\r\n        if (defined(cartesianVelocity)) {\r\n            return cartesianVelocity;\r\n        }\r\n\r\n        var unitCartesian = czmlInterval.unitCartesian;\r\n        if (defined(unitCartesian)) {\r\n            return unitCartesian;\r\n        }\r\n\r\n        var unitSpherical = czmlInterval.unitSpherical;\r\n        if (defined(unitSpherical)) {\r\n            return convertUnitSphericalToCartesian(unitSpherical);\r\n        }\r\n\r\n        var spherical = czmlInterval.spherical;\r\n        if (defined(spherical)) {\r\n            return convertSphericalToCartesian(spherical);\r\n        }\r\n\r\n        var cartographicRadians = czmlInterval.cartographicRadians;\r\n        if (defined(cartographicRadians)) {\r\n            return convertCartographicRadiansToCartesian(cartographicRadians);\r\n        }\r\n\r\n        var cartographicDegrees = czmlInterval.cartographicDegrees;\r\n        if (defined(cartographicDegrees)) {\r\n            return convertCartographicDegreesToCartesian(cartographicDegrees);\r\n        }\r\n\r\n        throw new RuntimeError(JSON.stringify(czmlInterval) + ' is not a valid CZML interval.');\r\n    }\r\n\r\n    function normalizePackedCartesianArray(array, startingIndex) {\r\n        Cartesian3.unpack(array, startingIndex, scratchCartesian);\r\n        Cartesian3.normalize(scratchCartesian, scratchCartesian);\r\n        Cartesian3.pack(scratchCartesian, array, startingIndex);\r\n    }\r\n\r\n    function unwrapUnitCartesianInterval(czmlInterval) {\r\n        var cartesian = unwrapCartesianInterval(czmlInterval);\r\n        if (cartesian.length === 3) {\r\n            normalizePackedCartesianArray(cartesian, 0);\r\n            return cartesian;\r\n        }\r\n\r\n        for (var i = 1; i < cartesian.length; i += 4) {\r\n            normalizePackedCartesianArray(cartesian, i);\r\n        }\r\n\r\n        return cartesian;\r\n    }\r\n\r\n    function normalizePackedQuaternionArray(array, startingIndex) {\r\n        Quaternion.unpack(array, startingIndex, scratchQuaternion);\r\n        Quaternion.normalize(scratchQuaternion, scratchQuaternion);\r\n        Quaternion.pack(scratchQuaternion, array, startingIndex);\r\n    }\r\n\r\n    function unwrapQuaternionInterval(czmlInterval) {\r\n        var unitQuaternion = czmlInterval.unitQuaternion;\r\n        if (defined(unitQuaternion)) {\r\n            if (unitQuaternion.length === 4) {\r\n                normalizePackedQuaternionArray(unitQuaternion, 0);\r\n                return unitQuaternion;\r\n            }\r\n\r\n            for (var i = 1; i < unitQuaternion.length; i += 5) {\r\n                normalizePackedQuaternionArray(unitQuaternion, i);\r\n            }\r\n        }\r\n        return unitQuaternion;\r\n    }\r\n\r\n    function getPropertyType(czmlInterval) {\r\n        // The associations in this function need to be kept in sync with the\r\n        // associations in unwrapInterval.\r\n\r\n        // Intentionally omitted due to conficts in CZML property names:\r\n        // * Image (conflicts with Uri)\r\n        // * Rotation (conflicts with Number)\r\n        //\r\n        // cartesianVelocity is also omitted due to incomplete support for\r\n        // derivative information in CZML properties.\r\n        // (Currently cartesianVelocity is hacked directly into the position processing code)\r\n        if (typeof czmlInterval === 'boolean') {\r\n            return Boolean;\r\n        } else if (typeof czmlInterval === 'number') {\r\n            return Number;\r\n        } else if (typeof czmlInterval === 'string') {\r\n            return String;\r\n        } else if (czmlInterval.hasOwnProperty('array')) {\r\n            return Array;\r\n        } else if (czmlInterval.hasOwnProperty('boolean')) {\r\n            return Boolean;\r\n        } else if (czmlInterval.hasOwnProperty('boundingRectangle')) {\r\n            return BoundingRectangle;\r\n        } else if (czmlInterval.hasOwnProperty('cartesian2')) {\r\n            return Cartesian2;\r\n        } else if (czmlInterval.hasOwnProperty('cartesian') ||\r\n                   czmlInterval.hasOwnProperty('spherical') ||\r\n                   czmlInterval.hasOwnProperty('cartographicRadians') ||\r\n                   czmlInterval.hasOwnProperty('cartographicDegrees')) {\r\n            return Cartesian3;\r\n        } else if (czmlInterval.hasOwnProperty('unitCartesian') ||\r\n                   czmlInterval.hasOwnProperty('unitSpherical')) {\r\n            return UnitCartesian3;\r\n        } else if (czmlInterval.hasOwnProperty('rgba') ||\r\n                   czmlInterval.hasOwnProperty('rgbaf')) {\r\n            return Color;\r\n        } else if (czmlInterval.hasOwnProperty('colorBlendMode')) {\r\n            return ColorBlendMode;\r\n        } else if (czmlInterval.hasOwnProperty('cornerType')) {\r\n            return CornerType;\r\n        } else if (czmlInterval.hasOwnProperty('heightReference')) {\r\n            return HeightReference;\r\n        } else if (czmlInterval.hasOwnProperty('horizontalOrigin')) {\r\n            return HorizontalOrigin;\r\n        } else if (czmlInterval.hasOwnProperty('date')) {\r\n            return JulianDate;\r\n        } else if (czmlInterval.hasOwnProperty('labelStyle')) {\r\n            return LabelStyle;\r\n        } else if (czmlInterval.hasOwnProperty('number')) {\r\n            return Number;\r\n        } else if (czmlInterval.hasOwnProperty('nearFarScalar')) {\r\n            return NearFarScalar;\r\n        } else if (czmlInterval.hasOwnProperty('distanceDisplayCondition')) {\r\n            return DistanceDisplayCondition;\r\n        } else if (czmlInterval.hasOwnProperty('object') ||\r\n                   czmlInterval.hasOwnProperty('value')) {\r\n            return Object;\r\n        } else if (czmlInterval.hasOwnProperty('unitQuaternion')) {\r\n            return Quaternion;\r\n        } else if (czmlInterval.hasOwnProperty('shadowMode')) {\r\n            return ShadowMode;\r\n        } else if (czmlInterval.hasOwnProperty('string')) {\r\n            return String;\r\n        } else if (czmlInterval.hasOwnProperty('stripeOrientation')) {\r\n            return StripeOrientation;\r\n        } else if (czmlInterval.hasOwnProperty('wsen') ||\r\n                   czmlInterval.hasOwnProperty('wsenDegrees')) {\r\n            return Rectangle;\r\n        } else if (czmlInterval.hasOwnProperty('uri')) {\r\n            return Uri;\r\n        } else if (czmlInterval.hasOwnProperty('verticalOrigin')) {\r\n            return VerticalOrigin;\r\n        }\r\n        // fallback case\r\n        return Object;\r\n    }\r\n\r\n    function unwrapInterval(type, czmlInterval, sourceUri) {\r\n        // The associations in this function need to be kept in sync with the\r\n        // associations in getPropertyType\r\n        switch (type) {\r\n            case Array:\r\n                return czmlInterval.array;\r\n            case Boolean:\r\n                return defaultValue(czmlInterval['boolean'], czmlInterval);\r\n            case BoundingRectangle:\r\n                return czmlInterval.boundingRectangle;\r\n            case Cartesian2:\r\n                return czmlInterval.cartesian2;\r\n            case Cartesian3:\r\n                return unwrapCartesianInterval(czmlInterval);\r\n            case UnitCartesian3:\r\n                return unwrapUnitCartesianInterval(czmlInterval);\r\n            case Color:\r\n                return unwrapColorInterval(czmlInterval);\r\n            case ColorBlendMode:\r\n                return ColorBlendMode[defaultValue(czmlInterval.colorBlendMode, czmlInterval)];\r\n            case CornerType:\r\n                return CornerType[defaultValue(czmlInterval.cornerType, czmlInterval)];\r\n            case HeightReference:\r\n                return HeightReference[defaultValue(czmlInterval.heightReference, czmlInterval)];\r\n            case HorizontalOrigin:\r\n                return HorizontalOrigin[defaultValue(czmlInterval.horizontalOrigin, czmlInterval)];\r\n            case Image:\r\n                return unwrapUriInterval(czmlInterval, sourceUri);\r\n            case JulianDate:\r\n                return JulianDate.fromIso8601(defaultValue(czmlInterval.date, czmlInterval));\r\n            case LabelStyle:\r\n                return LabelStyle[defaultValue(czmlInterval.labelStyle, czmlInterval)];\r\n            case Number:\r\n                return defaultValue(czmlInterval.number, czmlInterval);\r\n            case NearFarScalar:\r\n                return czmlInterval.nearFarScalar;\r\n            case DistanceDisplayCondition:\r\n                return czmlInterval.distanceDisplayCondition;\r\n            case Object:\r\n                return defaultValue(defaultValue(czmlInterval.object, czmlInterval.value), czmlInterval);\r\n            case Quaternion:\r\n                return unwrapQuaternionInterval(czmlInterval);\r\n            case Rectangle:\r\n                return unwrapRectangleInterval(czmlInterval);\r\n            case Rotation:\r\n                return defaultValue(czmlInterval.number, czmlInterval);\r\n            case ShadowMode:\r\n                return ShadowMode[defaultValue(defaultValue(czmlInterval.shadowMode, czmlInterval.shadows), czmlInterval)];\r\n            case String:\r\n                return defaultValue(czmlInterval.string, czmlInterval);\r\n            case StripeOrientation:\r\n                return StripeOrientation[defaultValue(czmlInterval.stripeOrientation, czmlInterval)];\r\n            case Uri:\r\n                return unwrapUriInterval(czmlInterval, sourceUri);\r\n            case VerticalOrigin:\r\n                return VerticalOrigin[defaultValue(czmlInterval.verticalOrigin, czmlInterval)];\r\n            default:\r\n                throw new RuntimeError(type);\r\n        }\r\n    }\r\n\r\n    var interpolators = {\r\n        HERMITE : HermitePolynomialApproximation,\r\n        LAGRANGE : LagrangePolynomialApproximation,\r\n        LINEAR : LinearApproximation\r\n    };\r\n\r\n    function updateInterpolationSettings(packetData, property) {\r\n        var interpolationAlgorithm = packetData.interpolationAlgorithm;\r\n        if (defined(interpolationAlgorithm) || defined(packetData.interpolationDegree)) {\r\n            property.setInterpolationOptions({\r\n                interpolationAlgorithm : interpolators[interpolationAlgorithm],\r\n                interpolationDegree : packetData.interpolationDegree\r\n            });\r\n        }\r\n\r\n        var forwardExtrapolationType = packetData.forwardExtrapolationType;\r\n        if (defined(forwardExtrapolationType)) {\r\n            property.forwardExtrapolationType = ExtrapolationType[forwardExtrapolationType];\r\n        }\r\n\r\n        var forwardExtrapolationDuration = packetData.forwardExtrapolationDuration;\r\n        if (defined(forwardExtrapolationDuration)) {\r\n            property.forwardExtrapolationDuration = forwardExtrapolationDuration;\r\n        }\r\n\r\n        var backwardExtrapolationType = packetData.backwardExtrapolationType;\r\n        if (defined(backwardExtrapolationType)) {\r\n            property.backwardExtrapolationType = ExtrapolationType[backwardExtrapolationType];\r\n        }\r\n\r\n        var backwardExtrapolationDuration = packetData.backwardExtrapolationDuration;\r\n        if (defined(backwardExtrapolationDuration)) {\r\n            property.backwardExtrapolationDuration = backwardExtrapolationDuration;\r\n        }\r\n    }\r\n\r\n    var iso8601Scratch = {\r\n        iso8601 : undefined\r\n    };\r\n\r\n    function processProperty(type, object, propertyName, packetData, constrainedInterval, sourceUri, entityCollection) {\r\n        var combinedInterval;\r\n        var packetInterval = packetData.interval;\r\n        if (defined(packetInterval)) {\r\n            iso8601Scratch.iso8601 = packetInterval;\r\n            combinedInterval = TimeInterval.fromIso8601(iso8601Scratch);\r\n            if (defined(constrainedInterval)) {\r\n                combinedInterval = TimeInterval.intersect(combinedInterval, constrainedInterval, scratchTimeInterval);\r\n            }\r\n        } else if (defined(constrainedInterval)) {\r\n            combinedInterval = constrainedInterval;\r\n        }\r\n\r\n        var packedLength;\r\n        var isSampled;\r\n        var unwrappedInterval;\r\n        var unwrappedIntervalLength;\r\n\r\n        // CZML properties can be defined in many ways.  Most ways represent a structure for\r\n        // encoding a single value (number, string, cartesian, etc.)  Regardless of the value type,\r\n        // if it encodes a single value it will get loaded into a ConstantProperty eventually.\r\n        // Alternatively, there are ways of defining a property that require specialized\r\n        // client-side representation. Currently, these are ReferenceProperty,\r\n        // and client-side velocity computation properties such as VelocityVectorProperty.\r\n        var isValue = !defined(packetData.reference) && !defined(packetData.velocityReference);\r\n        var hasInterval = defined(combinedInterval) && !combinedInterval.equals(Iso8601.MAXIMUM_INTERVAL);\r\n\r\n        if (isValue) {\r\n            unwrappedInterval = unwrapInterval(type, packetData, sourceUri);\r\n            packedLength = defaultValue(type.packedLength, 1);\r\n            unwrappedIntervalLength = defaultValue(unwrappedInterval.length, 1);\r\n            isSampled = !defined(packetData.array) && (typeof unwrappedInterval !== 'string') && (unwrappedIntervalLength > packedLength) && (type !== Object);\r\n        }\r\n\r\n        //Rotation is a special case because it represents a native type (Number)\r\n        //and therefore does not need to be unpacked when loaded as a constant value.\r\n        var needsUnpacking = typeof type.unpack === 'function' && type !== Rotation;\r\n\r\n        //Any time a constant value is assigned, it completely blows away anything else.\r\n        if (!isSampled && !hasInterval) {\r\n            if (isValue) {\r\n                object[propertyName] = new ConstantProperty(needsUnpacking ? type.unpack(unwrappedInterval, 0) : unwrappedInterval);\r\n            } else {\r\n                object[propertyName] = createSpecializedProperty(type, entityCollection, packetData);\r\n            }\r\n            return;\r\n        }\r\n\r\n        var property = object[propertyName];\r\n\r\n        var epoch;\r\n        var packetEpoch = packetData.epoch;\r\n        if (defined(packetEpoch)) {\r\n            epoch = JulianDate.fromIso8601(packetEpoch);\r\n        }\r\n\r\n        //Without an interval, any sampled value is infinite, meaning it completely\r\n        //replaces any non-sampled property that may exist.\r\n        if (isSampled && !hasInterval) {\r\n            if (!(property instanceof SampledProperty)) {\r\n                property = new SampledProperty(type);\r\n                object[propertyName] = property;\r\n            }\r\n            property.addSamplesPackedArray(unwrappedInterval, epoch);\r\n            updateInterpolationSettings(packetData, property);\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n\r\n        //A constant value with an interval is normally part of a TimeIntervalCollection,\r\n        //However, if the current property is not a time-interval collection, we need\r\n        //to turn it into a Composite, preserving the old data with the new interval.\r\n        if (!isSampled && hasInterval) {\r\n            //Create a new interval for the constant value.\r\n            combinedInterval = combinedInterval.clone();\r\n            if (isValue) {\r\n                combinedInterval.data = needsUnpacking ? type.unpack(unwrappedInterval, 0) : unwrappedInterval;\r\n            } else {\r\n                combinedInterval.data = createSpecializedProperty(type, entityCollection, packetData);\r\n            }\r\n\r\n            //If no property exists, simply use a new interval collection\r\n            if (!defined(property)) {\r\n                if (isValue) {\r\n                    property = new TimeIntervalCollectionProperty();\r\n                } else {\r\n                    property = new CompositeProperty();\r\n                }\r\n                object[propertyName] = property;\r\n            }\r\n\r\n            if (isValue && property instanceof TimeIntervalCollectionProperty) {\r\n                //If we create a collection, or it already existed, use it.\r\n                property.intervals.addInterval(combinedInterval);\r\n            } else if (property instanceof CompositeProperty) {\r\n                //If the collection was already a CompositeProperty, use it.\r\n                if (isValue) {\r\n                    combinedInterval.data = new ConstantProperty(combinedInterval.data);\r\n                }\r\n                property.intervals.addInterval(combinedInterval);\r\n            } else {\r\n                //Otherwise, create a CompositeProperty but preserve the existing data.\r\n\r\n                //Put the old property in an infinite interval.\r\n                interval = Iso8601.MAXIMUM_INTERVAL.clone();\r\n                interval.data = property;\r\n\r\n                //Create the composite.\r\n                property = new CompositeProperty();\r\n                object[propertyName] = property;\r\n\r\n                //add the old property interval\r\n                property.intervals.addInterval(interval);\r\n\r\n                //Change the new data to a ConstantProperty and add it.\r\n                if (isValue) {\r\n                    combinedInterval.data = new ConstantProperty(combinedInterval.data);\r\n                }\r\n                property.intervals.addInterval(combinedInterval);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        //isSampled && hasInterval\r\n        if (!defined(property)) {\r\n            property = new CompositeProperty();\r\n            object[propertyName] = property;\r\n        }\r\n\r\n        //create a CompositeProperty but preserve the existing data.\r\n        if (!(property instanceof CompositeProperty)) {\r\n            //Put the old property in an infinite interval.\r\n            interval = Iso8601.MAXIMUM_INTERVAL.clone();\r\n            interval.data = property;\r\n\r\n            //Create the composite.\r\n            property = new CompositeProperty();\r\n            object[propertyName] = property;\r\n\r\n            //add the old property interval\r\n            property.intervals.addInterval(interval);\r\n        }\r\n\r\n        //Check if the interval already exists in the composite\r\n        var intervals = property.intervals;\r\n        interval = intervals.findInterval(combinedInterval);\r\n        if (!defined(interval) || !(interval.data instanceof SampledProperty)) {\r\n            //If not, create a SampledProperty for it.\r\n            interval = combinedInterval.clone();\r\n            interval.data = new SampledProperty(type);\r\n            intervals.addInterval(interval);\r\n        }\r\n        interval.data.addSamplesPackedArray(unwrappedInterval, epoch);\r\n        updateInterpolationSettings(packetData, interval.data);\r\n    }\r\n\r\n    function processPacketData(type, object, propertyName, packetData, interval, sourceUri, entityCollection) {\r\n        if (!defined(packetData)) {\r\n            return;\r\n        }\r\n\r\n        if (isArray(packetData)) {\r\n            for (var i = 0, len = packetData.length; i < len; i++) {\r\n                processProperty(type, object, propertyName, packetData[i], interval, sourceUri, entityCollection);\r\n            }\r\n        } else {\r\n            processProperty(type, object, propertyName, packetData, interval, sourceUri, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processPositionProperty(object, propertyName, packetData, constrainedInterval, sourceUri, entityCollection) {\r\n        var combinedInterval;\r\n        var packetInterval = packetData.interval;\r\n        if (defined(packetInterval)) {\r\n            iso8601Scratch.iso8601 = packetInterval;\r\n            combinedInterval = TimeInterval.fromIso8601(iso8601Scratch);\r\n            if (defined(constrainedInterval)) {\r\n                combinedInterval = TimeInterval.intersect(combinedInterval, constrainedInterval, scratchTimeInterval);\r\n            }\r\n        } else if (defined(constrainedInterval)) {\r\n            combinedInterval = constrainedInterval;\r\n        }\r\n\r\n        var referenceFrame;\r\n        var unwrappedInterval;\r\n        var isSampled = false;\r\n        var unwrappedIntervalLength;\r\n        var numberOfDerivatives = defined(packetData.cartesianVelocity) ? 1 : 0;\r\n        var packedLength = Cartesian3.packedLength * (numberOfDerivatives + 1);\r\n        var isValue = !defined(packetData.reference);\r\n        var hasInterval = defined(combinedInterval) && !combinedInterval.equals(Iso8601.MAXIMUM_INTERVAL);\r\n\r\n        if (isValue) {\r\n            if (defined(packetData.referenceFrame)) {\r\n                referenceFrame = ReferenceFrame[packetData.referenceFrame];\r\n            }\r\n            referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\r\n            unwrappedInterval = unwrapCartesianInterval(packetData);\r\n            unwrappedIntervalLength = defaultValue(unwrappedInterval.length, 1);\r\n            isSampled = unwrappedIntervalLength > packedLength;\r\n        }\r\n\r\n        //Any time a constant value is assigned, it completely blows away anything else.\r\n        if (!isSampled && !hasInterval) {\r\n            if (isValue) {\r\n                object[propertyName] = new ConstantPositionProperty(Cartesian3.unpack(unwrappedInterval), referenceFrame);\r\n            } else {\r\n                object[propertyName] = createReferenceProperty(entityCollection, packetData.reference);\r\n            }\r\n            return;\r\n        }\r\n\r\n        var property = object[propertyName];\r\n\r\n        var epoch;\r\n        var packetEpoch = packetData.epoch;\r\n        if (defined(packetEpoch)) {\r\n            epoch = JulianDate.fromIso8601(packetEpoch);\r\n        }\r\n\r\n        //Without an interval, any sampled value is infinite, meaning it completely\r\n        //replaces any non-sampled property that may exist.\r\n        if (isSampled && !hasInterval) {\r\n            if (!(property instanceof SampledPositionProperty) || (defined(referenceFrame) && property.referenceFrame !== referenceFrame)) {\r\n                property = new SampledPositionProperty(referenceFrame, numberOfDerivatives);\r\n                object[propertyName] = property;\r\n            }\r\n            property.addSamplesPackedArray(unwrappedInterval, epoch);\r\n            updateInterpolationSettings(packetData, property);\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n\r\n        //A constant value with an interval is normally part of a TimeIntervalCollection,\r\n        //However, if the current property is not a time-interval collection, we need\r\n        //to turn it into a Composite, preserving the old data with the new interval.\r\n        if (!isSampled && hasInterval) {\r\n            //Create a new interval for the constant value.\r\n            combinedInterval = combinedInterval.clone();\r\n            if (isValue) {\r\n                combinedInterval.data = Cartesian3.unpack(unwrappedInterval);\r\n            } else {\r\n                combinedInterval.data = createReferenceProperty(entityCollection, packetData.reference);\r\n            }\r\n\r\n            //If no property exists, simply use a new interval collection\r\n            if (!defined(property)) {\r\n                if (isValue) {\r\n                    property = new TimeIntervalCollectionPositionProperty(referenceFrame);\r\n                } else {\r\n                    property = new CompositePositionProperty(referenceFrame);\r\n                }\r\n                object[propertyName] = property;\r\n            }\r\n\r\n            if (isValue && property instanceof TimeIntervalCollectionPositionProperty && (defined(referenceFrame) && property.referenceFrame === referenceFrame)) {\r\n                //If we create a collection, or it already existed, use it.\r\n                property.intervals.addInterval(combinedInterval);\r\n            } else if (property instanceof CompositePositionProperty) {\r\n                //If the collection was already a CompositePositionProperty, use it.\r\n                if (isValue) {\r\n                    combinedInterval.data = new ConstantPositionProperty(combinedInterval.data, referenceFrame);\r\n                }\r\n                property.intervals.addInterval(combinedInterval);\r\n            } else {\r\n                //Otherwise, create a CompositePositionProperty but preserve the existing data.\r\n\r\n                //Put the old property in an infinite interval.\r\n                interval = Iso8601.MAXIMUM_INTERVAL.clone();\r\n                interval.data = property;\r\n\r\n                //Create the composite.\r\n                property = new CompositePositionProperty(property.referenceFrame);\r\n                object[propertyName] = property;\r\n\r\n                //add the old property interval\r\n                property.intervals.addInterval(interval);\r\n\r\n                //Change the new data to a ConstantPositionProperty and add it.\r\n                if (isValue) {\r\n                    combinedInterval.data = new ConstantPositionProperty(combinedInterval.data, referenceFrame);\r\n                }\r\n                property.intervals.addInterval(combinedInterval);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        //isSampled && hasInterval\r\n        if (!defined(property)) {\r\n            property = new CompositePositionProperty(referenceFrame);\r\n            object[propertyName] = property;\r\n        } else if (!(property instanceof CompositePositionProperty)) {\r\n            //create a CompositeProperty but preserve the existing data.\r\n            //Put the old property in an infinite interval.\r\n            interval = Iso8601.MAXIMUM_INTERVAL.clone();\r\n            interval.data = property;\r\n\r\n            //Create the composite.\r\n            property = new CompositePositionProperty(property.referenceFrame);\r\n            object[propertyName] = property;\r\n\r\n            //add the old property interval\r\n            property.intervals.addInterval(interval);\r\n        }\r\n\r\n        //Check if the interval already exists in the composite\r\n        var intervals = property.intervals;\r\n        interval = intervals.findInterval(combinedInterval);\r\n        if (!defined(interval) || !(interval.data instanceof SampledPositionProperty) || (defined(referenceFrame) && interval.data.referenceFrame !== referenceFrame)) {\r\n            //If not, create a SampledPositionProperty for it.\r\n            interval = combinedInterval.clone();\r\n            interval.data = new SampledPositionProperty(referenceFrame, numberOfDerivatives);\r\n            intervals.addInterval(interval);\r\n        }\r\n        interval.data.addSamplesPackedArray(unwrappedInterval, epoch);\r\n        updateInterpolationSettings(packetData, interval.data);\r\n    }\r\n\r\n    function processPositionPacketData(object, propertyName, packetData, interval, sourceUri, entityCollection) {\r\n        if (!defined(packetData)) {\r\n            return;\r\n        }\r\n\r\n        if (isArray(packetData)) {\r\n            for (var i = 0, len = packetData.length; i < len; i++) {\r\n                processPositionProperty(object, propertyName, packetData[i], interval, sourceUri, entityCollection);\r\n            }\r\n        } else {\r\n            processPositionProperty(object, propertyName, packetData, interval, sourceUri, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processMaterialProperty(object, propertyName, packetData, constrainedInterval, sourceUri, entityCollection) {\r\n        var combinedInterval;\r\n        var packetInterval = packetData.interval;\r\n        if (defined(packetInterval)) {\r\n            iso8601Scratch.iso8601 = packetInterval;\r\n            combinedInterval = TimeInterval.fromIso8601(iso8601Scratch);\r\n            if (defined(constrainedInterval)) {\r\n                combinedInterval = TimeInterval.intersect(combinedInterval, constrainedInterval, scratchTimeInterval);\r\n            }\r\n        } else if (defined(constrainedInterval)) {\r\n            combinedInterval = constrainedInterval;\r\n        }\r\n\r\n        var property = object[propertyName];\r\n        var existingMaterial;\r\n        var existingInterval;\r\n\r\n        if (defined(combinedInterval)) {\r\n            if (!(property instanceof CompositeMaterialProperty)) {\r\n                property = new CompositeMaterialProperty();\r\n                object[propertyName] = property;\r\n            }\r\n            //See if we already have data at that interval.\r\n            var thisIntervals = property.intervals;\r\n            existingInterval = thisIntervals.findInterval({\r\n                start : combinedInterval.start,\r\n                stop : combinedInterval.stop\r\n            });\r\n            if (defined(existingInterval)) {\r\n                //We have an interval, but we need to make sure the\r\n                //new data is the same type of material as the old data.\r\n                existingMaterial = existingInterval.data;\r\n            } else {\r\n                //If not, create it.\r\n                existingInterval = combinedInterval.clone();\r\n                thisIntervals.addInterval(existingInterval);\r\n            }\r\n        } else {\r\n            existingMaterial = property;\r\n        }\r\n\r\n        var materialData;\r\n        if (defined(packetData.solidColor)) {\r\n            if (!(existingMaterial instanceof ColorMaterialProperty)) {\r\n                existingMaterial = new ColorMaterialProperty();\r\n            }\r\n            materialData = packetData.solidColor;\r\n            processPacketData(Color, existingMaterial, 'color', materialData.color, undefined, undefined, entityCollection);\r\n        } else if (defined(packetData.grid)) {\r\n            if (!(existingMaterial instanceof GridMaterialProperty)) {\r\n                existingMaterial = new GridMaterialProperty();\r\n            }\r\n            materialData = packetData.grid;\r\n            processPacketData(Color, existingMaterial, 'color', materialData.color, undefined, sourceUri, entityCollection);\r\n            processPacketData(Number, existingMaterial, 'cellAlpha', materialData.cellAlpha, undefined, sourceUri, entityCollection);\r\n            processPacketData(Cartesian2, existingMaterial, 'lineCount', materialData.lineCount, undefined, sourceUri, entityCollection);\r\n            processPacketData(Cartesian2, existingMaterial, 'lineThickness', materialData.lineThickness, undefined, sourceUri, entityCollection);\r\n            processPacketData(Cartesian2, existingMaterial, 'lineOffset', materialData.lineOffset, undefined, sourceUri, entityCollection);\r\n        } else if (defined(packetData.image)) {\r\n            if (!(existingMaterial instanceof ImageMaterialProperty)) {\r\n                existingMaterial = new ImageMaterialProperty();\r\n            }\r\n            materialData = packetData.image;\r\n            processPacketData(Image, existingMaterial, 'image', materialData.image, undefined, sourceUri, entityCollection);\r\n            processPacketData(Cartesian2, existingMaterial, 'repeat', materialData.repeat, undefined, sourceUri, entityCollection);\r\n            processPacketData(Color, existingMaterial, 'color', materialData.color, undefined, sourceUri, entityCollection);\r\n            processPacketData(Boolean, existingMaterial, 'transparent', materialData.transparent, undefined, sourceUri, entityCollection);\r\n        } else if (defined(packetData.stripe)) {\r\n            if (!(existingMaterial instanceof StripeMaterialProperty)) {\r\n                existingMaterial = new StripeMaterialProperty();\r\n            }\r\n            materialData = packetData.stripe;\r\n            processPacketData(StripeOrientation, existingMaterial, 'orientation', materialData.orientation, undefined, sourceUri, entityCollection);\r\n            processPacketData(Color, existingMaterial, 'evenColor', materialData.evenColor, undefined, sourceUri, entityCollection);\r\n            processPacketData(Color, existingMaterial, 'oddColor', materialData.oddColor, undefined, sourceUri, entityCollection);\r\n            processPacketData(Number, existingMaterial, 'offset', materialData.offset, undefined, sourceUri, entityCollection);\r\n            processPacketData(Number, existingMaterial, 'repeat', materialData.repeat, undefined, sourceUri, entityCollection);\r\n        } else if (defined(packetData.polylineOutline)) {\r\n            if (!(existingMaterial instanceof PolylineOutlineMaterialProperty)) {\r\n                existingMaterial = new PolylineOutlineMaterialProperty();\r\n            }\r\n            materialData = packetData.polylineOutline;\r\n            processPacketData(Color, existingMaterial, 'color', materialData.color, undefined, sourceUri, entityCollection);\r\n            processPacketData(Color, existingMaterial, 'outlineColor', materialData.outlineColor, undefined, sourceUri, entityCollection);\r\n            processPacketData(Number, existingMaterial, 'outlineWidth', materialData.outlineWidth, undefined, sourceUri, entityCollection);\r\n        } else if (defined(packetData.polylineGlow)) {\r\n            if (!(existingMaterial instanceof PolylineGlowMaterialProperty)) {\r\n                existingMaterial = new PolylineGlowMaterialProperty();\r\n            }\r\n            materialData = packetData.polylineGlow;\r\n            processPacketData(Color, existingMaterial, 'color', materialData.color, undefined, sourceUri, entityCollection);\r\n            processPacketData(Number, existingMaterial, 'glowPower', materialData.glowPower, undefined, sourceUri, entityCollection);\r\n        } else if (defined(packetData.polylineArrow)) {\r\n            if (!(existingMaterial instanceof PolylineArrowMaterialProperty)) {\r\n                existingMaterial = new PolylineArrowMaterialProperty();\r\n            }\r\n            materialData = packetData.polylineArrow;\r\n            processPacketData(Color, existingMaterial, 'color', materialData.color, undefined, undefined, entityCollection);\r\n        } else if (defined(packetData.polylineDash)) {\r\n            if (!(existingMaterial instanceof PolylineDashMaterialProperty)) {\r\n                existingMaterial = new PolylineDashMaterialProperty();\r\n            }\r\n            materialData = packetData.polylineDash;\r\n            processPacketData(Color, existingMaterial, 'color', materialData.color, undefined, undefined, entityCollection);\r\n            processPacketData(Color, existingMaterial, 'gapColor', materialData.gapColor, undefined, undefined, entityCollection);\r\n            processPacketData(Number, existingMaterial, 'dashLength', materialData.dashLength, undefined, sourceUri, entityCollection);\r\n            processPacketData(Number, existingMaterial, 'dashPattern', materialData.dashPattern, undefined, sourceUri, entityCollection);\r\n        }\r\n\r\n        if (defined(existingInterval)) {\r\n            existingInterval.data = existingMaterial;\r\n        } else {\r\n            object[propertyName] = existingMaterial;\r\n        }\r\n    }\r\n\r\n    function processMaterialPacketData(object, propertyName, packetData, interval, sourceUri, entityCollection) {\r\n        if (!defined(packetData)) {\r\n            return;\r\n        }\r\n\r\n        if (isArray(packetData)) {\r\n            for (var i = 0, len = packetData.length; i < len; i++) {\r\n                processMaterialProperty(object, propertyName, packetData[i], interval, sourceUri, entityCollection);\r\n            }\r\n        } else {\r\n            processMaterialProperty(object, propertyName, packetData, interval, sourceUri, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processName(entity, packet, entityCollection, sourceUri) {\r\n        entity.name = defaultValue(packet.name, entity.name);\r\n    }\r\n\r\n    function processDescription(entity, packet, entityCollection, sourceUri) {\r\n        var descriptionData = packet.description;\r\n        if (defined(descriptionData)) {\r\n            processPacketData(String, entity, 'description', descriptionData, undefined, sourceUri, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processPosition(entity, packet, entityCollection, sourceUri) {\r\n        var positionData = packet.position;\r\n        if (defined(positionData)) {\r\n            processPositionPacketData(entity, 'position', positionData, undefined, sourceUri, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processViewFrom(entity, packet, entityCollection, sourceUri) {\r\n        var viewFromData = packet.viewFrom;\r\n        if (defined(viewFromData)) {\r\n            processPacketData(Cartesian3, entity, 'viewFrom', viewFromData, undefined, sourceUri, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processOrientation(entity, packet, entityCollection, sourceUri) {\r\n        var orientationData = packet.orientation;\r\n        if (defined(orientationData)) {\r\n            processPacketData(Quaternion, entity, 'orientation', orientationData, undefined, sourceUri, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processProperties(entity, packet, entityCollection, sourceUri) {\r\n        var propertiesData = packet.properties;\r\n        if (defined(propertiesData)) {\r\n            if (!defined(entity.properties)) {\r\n                entity.properties = new PropertyBag();\r\n            }\r\n            //We cannot simply call processPacketData(entity, 'properties', propertyData, undefined, sourceUri, entityCollection)\r\n            //because each property of \"properties\" may vary separately.\r\n            //The properties will be accessible as entity.properties.myprop.getValue(time).\r\n\r\n            for (var key in propertiesData) {\r\n                if (propertiesData.hasOwnProperty(key)) {\r\n                    if (!entity.properties.hasProperty(key)) {\r\n                        entity.properties.addProperty(key);\r\n                    }\r\n\r\n                    var propertyData = propertiesData[key];\r\n                    if (isArray(propertyData)) {\r\n                        for (var i = 0, len = propertyData.length; i < len; i++) {\r\n                            processProperty(getPropertyType(propertyData[i]), entity.properties, key, propertyData[i], undefined, sourceUri, entityCollection);\r\n                        }\r\n                    } else {\r\n                        processProperty(getPropertyType(propertyData), entity.properties, key, propertyData, undefined, sourceUri, entityCollection);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function processArrayPacketData(object, propertyName, packetData, entityCollection) {\r\n        var references = packetData.references;\r\n        if (defined(references)) {\r\n            var properties = references.map(function(reference) {\r\n                return createReferenceProperty(entityCollection, reference);\r\n            });\r\n\r\n            var iso8601Interval = packetData.interval;\r\n            if (defined(iso8601Interval)) {\r\n                iso8601Interval = TimeInterval.fromIso8601(iso8601Interval);\r\n                if (!(object[propertyName] instanceof CompositePositionProperty)) {\r\n                    iso8601Interval.data = new PropertyArray(properties);\r\n                    var property = new CompositeProperty();\r\n                    property.intervals.addInterval(iso8601Interval);\r\n                    object[propertyName] = property;\r\n                }\r\n            } else {\r\n                object[propertyName] = new PropertyArray(properties);\r\n            }\r\n        } else {\r\n            processPacketData(Array, object, propertyName, packetData, undefined, undefined, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processArray(object, propertyName, packetData, entityCollection) {\r\n        if (!defined(packetData)) {\r\n            return;\r\n        }\r\n\r\n        if (isArray(packetData)) {\r\n            for (var i = 0, length = packetData.length; i < length; ++i) {\r\n                processArrayPacketData(object, propertyName, packetData[i], entityCollection);\r\n            }\r\n        } else {\r\n            processArrayPacketData(object, propertyName, packetData, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processPositionsPacketData(object, propertyName, positionsData, entityCollection) {\r\n        if (defined(positionsData.references)) {\r\n            var properties = positionsData.references.map(function(reference) {\r\n                return createReferenceProperty(entityCollection, reference);\r\n            });\r\n\r\n            var iso8601Interval = positionsData.interval;\r\n            if (defined(iso8601Interval)) {\r\n                iso8601Interval = TimeInterval.fromIso8601(iso8601Interval);\r\n                if (!(object[propertyName] instanceof CompositePositionProperty)) {\r\n                    iso8601Interval.data = new PositionPropertyArray(properties);\r\n                    var property = new CompositePositionProperty();\r\n                    property.intervals.addInterval(iso8601Interval);\r\n                    object[propertyName] = property;\r\n                }\r\n            } else {\r\n                object[propertyName] = new PositionPropertyArray(properties);\r\n            }\r\n        } else {\r\n            if (defined(positionsData.cartesian)) {\r\n                positionsData.array = Cartesian3.unpackArray(positionsData.cartesian);\r\n            } else if (defined(positionsData.cartographicRadians)) {\r\n                positionsData.array = Cartesian3.fromRadiansArrayHeights(positionsData.cartographicRadians);\r\n            } else if (defined(positionsData.cartographicDegrees)) {\r\n                positionsData.array = Cartesian3.fromDegreesArrayHeights(positionsData.cartographicDegrees);\r\n            }\r\n\r\n            if (defined(positionsData.array)) {\r\n                processPacketData(Array, object, propertyName, positionsData, undefined, undefined, entityCollection);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processPositions(object, propertyName, positionsData, entityCollection) {\r\n        if (!defined(positionsData)) {\r\n            return;\r\n        }\r\n\r\n        if (isArray(positionsData)) {\r\n            for (var i = 0, length = positionsData.length; i < length; i++) {\r\n                processPositionsPacketData(object, propertyName, positionsData[i], entityCollection);\r\n            }\r\n        } else {\r\n            processPositionsPacketData(object, propertyName, positionsData, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processAvailability(entity, packet, entityCollection, sourceUri) {\r\n        var interval;\r\n        var packetData = packet.availability;\r\n        if (!defined(packetData)) {\r\n            return;\r\n        }\r\n\r\n        var intervals;\r\n        if (isArray(packetData)) {\r\n            var length = packetData.length;\r\n            for (var i = 0; i < length; i++) {\r\n                if (!defined(intervals)) {\r\n                    intervals = new TimeIntervalCollection();\r\n                }\r\n                iso8601Scratch.iso8601 = packetData[i];\r\n                interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n                intervals.addInterval(interval);\r\n            }\r\n        } else {\r\n            iso8601Scratch.iso8601 = packetData;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n            intervals = new TimeIntervalCollection();\r\n            intervals.addInterval(interval);\r\n        }\r\n        entity.availability = intervals;\r\n    }\r\n\r\n    function processAlignedAxis(billboard, packetData, interval, sourceUri, entityCollection) {\r\n        if (!defined(packetData)) {\r\n            return;\r\n        }\r\n\r\n        processPacketData(UnitCartesian3, billboard, 'alignedAxis', packetData, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processBillboard(entity, packet, entityCollection, sourceUri) {\r\n        var billboardData = packet.billboard;\r\n        if (!defined(billboardData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = billboardData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var billboard = entity.billboard;\r\n        if (!defined(billboard)) {\r\n            entity.billboard = billboard = new BillboardGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, billboard, 'show', billboardData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Image, billboard, 'image', billboardData.image, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, billboard, 'scale', billboardData.scale, interval, sourceUri, entityCollection);\r\n        processPacketData(Cartesian2, billboard, 'pixelOffset', billboardData.pixelOffset, interval, sourceUri, entityCollection);\r\n        processPacketData(Cartesian3, billboard, 'eyeOffset', billboardData.eyeOffset, interval, sourceUri, entityCollection);\r\n        processPacketData(HorizontalOrigin, billboard, 'horizontalOrigin', billboardData.horizontalOrigin, interval, sourceUri, entityCollection);\r\n        processPacketData(VerticalOrigin, billboard, 'verticalOrigin', billboardData.verticalOrigin, interval, sourceUri, entityCollection);\r\n        processPacketData(HeightReference, billboard, 'heightReference', billboardData.heightReference, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, billboard, 'color', billboardData.color, interval, sourceUri, entityCollection);\r\n        processPacketData(Rotation, billboard, 'rotation', billboardData.rotation, interval, sourceUri, entityCollection);\r\n        processAlignedAxis(billboard, billboardData.alignedAxis, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, billboard, 'sizeInMeters', billboardData.sizeInMeters, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, billboard, 'width', billboardData.width, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, billboard, 'height', billboardData.height, interval, sourceUri, entityCollection);\r\n        processPacketData(NearFarScalar, billboard, 'scaleByDistance', billboardData.scaleByDistance, interval, sourceUri, entityCollection);\r\n        processPacketData(NearFarScalar, billboard, 'translucencyByDistance', billboardData.translucencyByDistance, interval, sourceUri, entityCollection);\r\n        processPacketData(NearFarScalar, billboard, 'pixelOffsetScaleByDistance', billboardData.pixelOffsetScaleByDistance, interval, sourceUri, entityCollection);\r\n        processPacketData(BoundingRectangle, billboard, 'imageSubRegion', billboardData.imageSubRegion, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, billboard, 'distanceDisplayCondition', billboardData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, billboard, 'disableDepthTestDistance', billboardData.disableDepthTestDistance, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processBox(entity, packet, entityCollection, sourceUri) {\r\n        var boxData = packet.box;\r\n        if (!defined(boxData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = boxData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var box = entity.box;\r\n        if (!defined(box)) {\r\n            entity.box = box = new BoxGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, box, 'show', boxData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Cartesian3, box, 'dimensions', boxData.dimensions, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, box, 'fill', boxData.fill, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(box, 'material', boxData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, box, 'outline', boxData.outline, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, box, 'outlineColor', boxData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, box, 'outlineWidth', boxData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, box, 'shadows', boxData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, box, 'distanceDisplayCondition', boxData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processCorridor(entity, packet, entityCollection, sourceUri) {\r\n        var corridorData = packet.corridor;\r\n        if (!defined(corridorData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = corridorData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var corridor = entity.corridor;\r\n        if (!defined(corridor)) {\r\n            entity.corridor = corridor = new CorridorGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, corridor, 'show', corridorData.show, interval, sourceUri, entityCollection);\r\n        processPositions(corridor, 'positions', corridorData.positions, entityCollection);\r\n        processPacketData(Number, corridor, 'width', corridorData.width, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, corridor, 'height', corridorData.height, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, corridor, 'extrudedHeight', corridorData.extrudedHeight, interval, sourceUri, entityCollection);\r\n        processPacketData(CornerType, corridor, 'cornerType', corridorData.cornerType, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, corridor, 'granularity', corridorData.granularity, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, corridor, 'fill', corridorData.fill, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(corridor, 'material', corridorData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, corridor, 'outline', corridorData.outline, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, corridor, 'outlineColor', corridorData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, corridor, 'outlineWidth', corridorData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, corridor, 'shadows', corridorData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, corridor, 'distanceDisplayCondition', corridorData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, corridor, 'zIndex', corridorData.zIndex, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processCylinder(entity, packet, entityCollection, sourceUri) {\r\n        var cylinderData = packet.cylinder;\r\n        if (!defined(cylinderData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = cylinderData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var cylinder = entity.cylinder;\r\n        if (!defined(cylinder)) {\r\n            entity.cylinder = cylinder = new CylinderGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, cylinder, 'show', cylinderData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, cylinder, 'length', cylinderData.length, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, cylinder, 'topRadius', cylinderData.topRadius, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, cylinder, 'bottomRadius', cylinderData.bottomRadius, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, cylinder, 'fill', cylinderData.fill, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(cylinder, 'material', cylinderData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, cylinder, 'outline', cylinderData.outline, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, cylinder, 'outlineColor', cylinderData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, cylinder, 'outlineWidth', cylinderData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, cylinder, 'numberOfVerticalLines', cylinderData.numberOfVerticalLines, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, cylinder, 'slices', cylinderData.slices, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, cylinder, 'shadows', cylinderData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, cylinder, 'distanceDisplayCondition', cylinderData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processDocument(packet, dataSource) {\r\n        var version = packet.version;\r\n        if (defined(version)) {\r\n            if (typeof version === 'string') {\r\n                var tokens = version.split('.');\r\n                if (tokens.length === 2) {\r\n                    if (tokens[0] !== '1') {\r\n                        throw new RuntimeError('Cesium only supports CZML version 1.');\r\n                    }\r\n                    dataSource._version = version;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!defined(dataSource._version)) {\r\n            throw new RuntimeError('CZML version information invalid.  It is expected to be a property on the document object in the <Major>.<Minor> version format.');\r\n        }\r\n\r\n        var documentPacket = dataSource._documentPacket;\r\n\r\n        if (defined(packet.name)) {\r\n            documentPacket.name = packet.name;\r\n        }\r\n\r\n        var clockPacket = packet.clock;\r\n        if (defined(clockPacket)) {\r\n            var clock = documentPacket.clock;\r\n            if (!defined(clock)) {\r\n                documentPacket.clock = {\r\n                    interval : clockPacket.interval,\r\n                    currentTime : clockPacket.currentTime,\r\n                    range : clockPacket.range,\r\n                    step : clockPacket.step,\r\n                    multiplier : clockPacket.multiplier\r\n                };\r\n            } else {\r\n                clock.interval = defaultValue(clockPacket.interval, clock.interval);\r\n                clock.currentTime = defaultValue(clockPacket.currentTime, clock.currentTime);\r\n                clock.range = defaultValue(clockPacket.range, clock.range);\r\n                clock.step = defaultValue(clockPacket.step, clock.step);\r\n                clock.multiplier = defaultValue(clockPacket.multiplier, clock.multiplier);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processEllipse(entity, packet, entityCollection, sourceUri) {\r\n        var ellipseData = packet.ellipse;\r\n        if (!defined(ellipseData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = ellipseData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var ellipse = entity.ellipse;\r\n        if (!defined(ellipse)) {\r\n            entity.ellipse = ellipse = new EllipseGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, ellipse, 'show', ellipseData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipse, 'semiMajorAxis', ellipseData.semiMajorAxis, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipse, 'semiMinorAxis', ellipseData.semiMinorAxis, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipse, 'height', ellipseData.height, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipse, 'extrudedHeight', ellipseData.extrudedHeight, interval, sourceUri, entityCollection);\r\n        processPacketData(Rotation, ellipse, 'rotation', ellipseData.rotation, interval, sourceUri, entityCollection);\r\n        processPacketData(Rotation, ellipse, 'stRotation', ellipseData.stRotation, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipse, 'granularity', ellipseData.granularity, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, ellipse, 'fill', ellipseData.fill, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(ellipse, 'material', ellipseData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, ellipse, 'outline', ellipseData.outline, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, ellipse, 'outlineColor', ellipseData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipse, 'outlineWidth', ellipseData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipse, 'numberOfVerticalLines', ellipseData.numberOfVerticalLines, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, ellipse, 'shadows', ellipseData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, ellipse, 'distanceDisplayCondition', ellipseData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipse, 'zIndex', ellipseData.zIndex, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processEllipsoid(entity, packet, entityCollection, sourceUri) {\r\n        var ellipsoidData = packet.ellipsoid;\r\n        if (!defined(ellipsoidData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = ellipsoidData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var ellipsoid = entity.ellipsoid;\r\n        if (!defined(ellipsoid)) {\r\n            entity.ellipsoid = ellipsoid = new EllipsoidGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, ellipsoid, 'show', ellipsoidData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Cartesian3, ellipsoid, 'radii', ellipsoidData.radii, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, ellipsoid, 'fill', ellipsoidData.fill, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(ellipsoid, 'material', ellipsoidData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, ellipsoid, 'outline', ellipsoidData.outline, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, ellipsoid, 'outlineColor', ellipsoidData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipsoid, 'outlineWidth', ellipsoidData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipsoid, 'stackPartitions', ellipsoidData.stackPartitions, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipsoid, 'slicePartitions', ellipsoidData.slicePartitions, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, ellipsoid, 'subdivisions', ellipsoidData.subdivisions, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, ellipsoid, 'shadows', ellipsoidData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, ellipsoid, 'distanceDisplayCondition', ellipsoidData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processLabel(entity, packet, entityCollection, sourceUri) {\r\n        var labelData = packet.label;\r\n        if (!defined(labelData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = labelData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var label = entity.label;\r\n        if (!defined(label)) {\r\n            entity.label = label = new LabelGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, label, 'show', labelData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(String, label, 'text', labelData.text, interval, sourceUri, entityCollection);\r\n        processPacketData(String, label, 'font', labelData.font, interval, sourceUri, entityCollection);\r\n        processPacketData(LabelStyle, label, 'style', labelData.style, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, label, 'scale', labelData.scale, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, label, 'showBackground', labelData.showBackground, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, label, 'backgroundColor', labelData.backgroundColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Cartesian2, label, 'backgroundPadding', labelData.backgroundPadding, interval, sourceUri, entityCollection);\r\n        processPacketData(Cartesian2, label, 'pixelOffset', labelData.pixelOffset, interval, sourceUri, entityCollection);\r\n        processPacketData(Cartesian3, label, 'eyeOffset', labelData.eyeOffset, interval, sourceUri, entityCollection);\r\n        processPacketData(HorizontalOrigin, label, 'horizontalOrigin', labelData.horizontalOrigin, interval, sourceUri, entityCollection);\r\n        processPacketData(VerticalOrigin, label, 'verticalOrigin', labelData.verticalOrigin, interval, sourceUri, entityCollection);\r\n        processPacketData(HeightReference, label, 'heightReference', labelData.heightReference, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, label, 'fillColor', labelData.fillColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, label, 'outlineColor', labelData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, label, 'outlineWidth', labelData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(NearFarScalar, label, 'translucencyByDistance', labelData.translucencyByDistance, interval, sourceUri, entityCollection);\r\n        processPacketData(NearFarScalar, label, 'pixelOffsetScaleByDistance', labelData.pixelOffsetScaleByDistance, interval, sourceUri, entityCollection);\r\n        processPacketData(NearFarScalar, label, 'scaleByDistance', labelData.scaleByDistance, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, label, 'distanceDisplayCondition', labelData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, label, 'disableDepthTestDistance', labelData.disableDepthTestDistance, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processModel(entity, packet, entityCollection, sourceUri) {\r\n        var modelData = packet.model;\r\n        if (!defined(modelData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = modelData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var model = entity.model;\r\n        if (!defined(model)) {\r\n            entity.model = model = new ModelGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, model, 'show', modelData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Uri, model, 'uri', modelData.gltf, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, model, 'scale', modelData.scale, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, model, 'minimumPixelSize', modelData.minimumPixelSize, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, model, 'maximumScale', modelData.maximumScale, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, model, 'incrementallyLoadTextures', modelData.incrementallyLoadTextures, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, model, 'runAnimations', modelData.runAnimations, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, model, 'clampAnimations', modelData.clampAnimations, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, model, 'shadows', modelData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(HeightReference, model, 'heightReference', modelData.heightReference, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, model, 'silhouetteColor', modelData.silhouetteColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, model, 'silhouetteSize', modelData.silhouetteSize, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, model, 'color', modelData.color, interval, sourceUri, entityCollection);\r\n        processPacketData(ColorBlendMode, model, 'colorBlendMode', modelData.colorBlendMode, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, model, 'colorBlendAmount', modelData.colorBlendAmount, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, model, 'distanceDisplayCondition', modelData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n\r\n        var nodeTransformationsData = modelData.nodeTransformations;\r\n        if (defined(nodeTransformationsData)) {\r\n            if (isArray(nodeTransformationsData)) {\r\n                for (var i = 0, len = nodeTransformationsData.length; i < len; i++) {\r\n                    processNodeTransformations(model, nodeTransformationsData[i], interval, sourceUri, entityCollection);\r\n                }\r\n            } else {\r\n                processNodeTransformations(model, nodeTransformationsData, interval, sourceUri, entityCollection);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processNodeTransformations(model, nodeTransformationsData, constrainedInterval, sourceUri, entityCollection) {\r\n        var combinedInterval;\r\n        var packetInterval = nodeTransformationsData.interval;\r\n        if (defined(packetInterval)) {\r\n            iso8601Scratch.iso8601 = packetInterval;\r\n            combinedInterval = TimeInterval.fromIso8601(iso8601Scratch);\r\n            if (defined(constrainedInterval)) {\r\n                combinedInterval = TimeInterval.intersect(combinedInterval, constrainedInterval, scratchTimeInterval);\r\n            }\r\n        } else if (defined(constrainedInterval)) {\r\n            combinedInterval = constrainedInterval;\r\n        }\r\n\r\n        var nodeTransformations = model.nodeTransformations;\r\n        var nodeNames = Object.keys(nodeTransformationsData);\r\n        for (var i = 0, len = nodeNames.length; i < len; ++i) {\r\n            var nodeName = nodeNames[i];\r\n\r\n            if (nodeName === 'interval') {\r\n                continue;\r\n            }\r\n\r\n            var nodeTransformationData = nodeTransformationsData[nodeName];\r\n\r\n            if (!defined(nodeTransformationData)) {\r\n                continue;\r\n            }\r\n\r\n            if (!defined(nodeTransformations)) {\r\n                model.nodeTransformations = nodeTransformations = new PropertyBag();\r\n            }\r\n\r\n            if (!nodeTransformations.hasProperty(nodeName)) {\r\n                nodeTransformations.addProperty(nodeName);\r\n            }\r\n\r\n            var nodeTransformation = nodeTransformations[nodeName];\r\n            if (!defined(nodeTransformation)) {\r\n                nodeTransformations[nodeName] = nodeTransformation = new NodeTransformationProperty();\r\n            }\r\n\r\n            processPacketData(Cartesian3, nodeTransformation, 'translation', nodeTransformationData.translation, combinedInterval, sourceUri, entityCollection);\r\n            processPacketData(Quaternion, nodeTransformation, 'rotation', nodeTransformationData.rotation, combinedInterval, sourceUri, entityCollection);\r\n            processPacketData(Cartesian3, nodeTransformation, 'scale', nodeTransformationData.scale, combinedInterval, sourceUri, entityCollection);\r\n        }\r\n    }\r\n\r\n    function processPath(entity, packet, entityCollection, sourceUri) {\r\n        var pathData = packet.path;\r\n        if (!defined(pathData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = pathData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var path = entity.path;\r\n        if (!defined(path)) {\r\n            entity.path = path = new PathGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, path, 'show', pathData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, path, 'width', pathData.width, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, path, 'resolution', pathData.resolution, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, path, 'leadTime', pathData.leadTime, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, path, 'trailTime', pathData.trailTime, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(path, 'material', pathData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, path, 'distanceDisplayCondition', pathData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processPoint(entity, packet, entityCollection, sourceUri) {\r\n        var pointData = packet.point;\r\n        if (!defined(pointData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = pointData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var point = entity.point;\r\n        if (!defined(point)) {\r\n            entity.point = point = new PointGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, point, 'show', pointData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, point, 'pixelSize', pointData.pixelSize, interval, sourceUri, entityCollection);\r\n        processPacketData(HeightReference, point, 'heightReference', pointData.heightReference, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, point, 'color', pointData.color, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, point, 'outlineColor', pointData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, point, 'outlineWidth', pointData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(NearFarScalar, point, 'scaleByDistance', pointData.scaleByDistance, interval, sourceUri, entityCollection);\r\n        processPacketData(NearFarScalar, point, 'translucencyByDistance', pointData.translucencyByDistance, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, point, 'distanceDisplayCondition', pointData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, point, 'disableDepthTestDistance', pointData.disableDepthTestDistance, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processPolygon(entity, packet, entityCollection, sourceUri) {\r\n        var polygonData = packet.polygon;\r\n        if (!defined(polygonData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = polygonData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var polygon = entity.polygon;\r\n        if (!defined(polygon)) {\r\n            entity.polygon = polygon = new PolygonGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, polygon, 'show', polygonData.show, interval, sourceUri, entityCollection);\r\n        processPositions(polygon, 'hierarchy', polygonData.positions, entityCollection);\r\n        processPacketData(Number, polygon, 'height', polygonData.height, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, polygon, 'extrudedHeight', polygonData.extrudedHeight, interval, sourceUri, entityCollection);\r\n        processPacketData(Rotation, polygon, 'stRotation', polygonData.stRotation, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, polygon, 'granularity', polygonData.granularity, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, polygon, 'fill', polygonData.fill, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(polygon, 'material', polygonData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, polygon, 'outline', polygonData.outline, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, polygon, 'outlineColor', polygonData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, polygon, 'outlineWidth', polygonData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, polygon, 'perPositionHeight', polygonData.perPositionHeight, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, polygon, 'closeTop', polygonData.closeTop, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, polygon, 'closeBottom', polygonData.closeBottom, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, polygon, 'shadows', polygonData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, polygon, 'distanceDisplayCondition', polygonData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, polygon, 'zIndex', polygonData.zIndex, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processPolyline(entity, packet, entityCollection, sourceUri) {\r\n        var polylineData = packet.polyline;\r\n        if (!defined(polylineData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = polylineData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var polyline = entity.polyline;\r\n        if (!defined(polyline)) {\r\n            entity.polyline = polyline = new PolylineGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, polyline, 'show', polylineData.show, interval, sourceUri, entityCollection);\r\n        processPositions(polyline, 'positions', polylineData.positions, entityCollection);\r\n        processPacketData(Number, polyline, 'width', polylineData.width, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, polyline, 'granularity', polylineData.granularity, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(polyline, 'material', polylineData.material, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(polyline, 'depthFailMaterial', polylineData.depthFailMaterial, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, polyline, 'followSurface', polylineData.followSurface, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, polyline, 'clampToGround', polylineData.clampToGround, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, polyline, 'shadows', polylineData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, polyline, 'distanceDisplayCondition', polylineData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, polyline, 'zIndex', polylineData.zIndex, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processRectangle(entity, packet, entityCollection, sourceUri) {\r\n        var rectangleData = packet.rectangle;\r\n        if (!defined(rectangleData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = rectangleData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var rectangle = entity.rectangle;\r\n        if (!defined(rectangle)) {\r\n            entity.rectangle = rectangle = new RectangleGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, rectangle, 'show', rectangleData.show, interval, sourceUri, entityCollection);\r\n        processPacketData(Rectangle, rectangle, 'coordinates', rectangleData.coordinates, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, rectangle, 'height', rectangleData.height, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, rectangle, 'extrudedHeight', rectangleData.extrudedHeight, interval, sourceUri, entityCollection);\r\n        processPacketData(Rotation, rectangle, 'rotation', rectangleData.rotation, interval, sourceUri, entityCollection);\r\n        processPacketData(Rotation, rectangle, 'stRotation', rectangleData.stRotation, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, rectangle, 'granularity', rectangleData.granularity, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, rectangle, 'fill', rectangleData.fill, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(rectangle, 'material', rectangleData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, rectangle, 'outline', rectangleData.outline, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, rectangle, 'outlineColor', rectangleData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, rectangle, 'outlineWidth', rectangleData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, rectangle, 'shadows', rectangleData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, rectangle, 'distanceDisplayCondition', rectangleData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, rectangle, 'zIndex', rectangleData.zIndex, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processWall(entity, packet, entityCollection, sourceUri) {\r\n        var wallData = packet.wall;\r\n        if (!defined(wallData)) {\r\n            return;\r\n        }\r\n\r\n        var interval;\r\n        var intervalString = wallData.interval;\r\n        if (defined(intervalString)) {\r\n            iso8601Scratch.iso8601 = intervalString;\r\n            interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n        }\r\n\r\n        var wall = entity.wall;\r\n        if (!defined(wall)) {\r\n            entity.wall = wall = new WallGraphics();\r\n        }\r\n\r\n        processPacketData(Boolean, wall, 'show', wallData.show, interval, sourceUri, entityCollection);\r\n        processPositions(wall, 'positions', wallData.positions, entityCollection);\r\n        processArray(wall, 'minimumHeights', wallData.minimumHeights, entityCollection);\r\n        processArray(wall, 'maximumHeights', wallData.maximumHeights, entityCollection);\r\n        processPacketData(Number, wall, 'granularity', wallData.granularity, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, wall, 'fill', wallData.fill, interval, sourceUri, entityCollection);\r\n        processMaterialPacketData(wall, 'material', wallData.material, interval, sourceUri, entityCollection);\r\n        processPacketData(Boolean, wall, 'outline', wallData.outline, interval, sourceUri, entityCollection);\r\n        processPacketData(Color, wall, 'outlineColor', wallData.outlineColor, interval, sourceUri, entityCollection);\r\n        processPacketData(Number, wall, 'outlineWidth', wallData.outlineWidth, interval, sourceUri, entityCollection);\r\n        processPacketData(ShadowMode, wall, 'shadows', wallData.shadows, interval, sourceUri, entityCollection);\r\n        processPacketData(DistanceDisplayCondition, wall, 'distanceDisplayCondition', wallData.distanceDisplayCondition, interval, sourceUri, entityCollection);\r\n    }\r\n\r\n    function processCzmlPacket(packet, entityCollection, updaterFunctions, sourceUri, dataSource) {\r\n        var objectId = packet.id;\r\n        if (!defined(objectId)) {\r\n            objectId = createGuid();\r\n        }\r\n\r\n        currentId = objectId;\r\n\r\n        if (!defined(dataSource._version) && objectId !== 'document') {\r\n            throw new RuntimeError('The first CZML packet is required to be the document object.');\r\n        }\r\n\r\n        if (packet['delete'] === true) {\r\n            entityCollection.removeById(objectId);\r\n        } else if (objectId === 'document') {\r\n            processDocument(packet, dataSource);\r\n        } else {\r\n            var entity = entityCollection.getOrCreateEntity(objectId);\r\n\r\n            var parentId = packet.parent;\r\n            if (defined(parentId)) {\r\n                entity.parent = entityCollection.getOrCreateEntity(parentId);\r\n            }\r\n\r\n            for (var i = updaterFunctions.length - 1; i > -1; i--) {\r\n                updaterFunctions[i](entity, packet, entityCollection, sourceUri);\r\n            }\r\n        }\r\n\r\n        currentId = undefined;\r\n    }\r\n\r\n    function updateClock(dataSource) {\r\n        var clock;\r\n        var clockPacket = dataSource._documentPacket.clock;\r\n        if (!defined(clockPacket)) {\r\n            if (!defined(dataSource._clock)) {\r\n                var availability = dataSource._entityCollection.computeAvailability();\r\n                if (!availability.start.equals(Iso8601.MINIMUM_VALUE)) {\r\n                    var startTime = availability.start;\r\n                    var stopTime = availability.stop;\r\n                    var totalSeconds = JulianDate.secondsDifference(stopTime, startTime);\r\n                    var multiplier = Math.round(totalSeconds / 120.0);\r\n\r\n                    clock = new DataSourceClock();\r\n                    clock.startTime = JulianDate.clone(startTime);\r\n                    clock.stopTime = JulianDate.clone(stopTime);\r\n                    clock.clockRange = ClockRange.LOOP_STOP;\r\n                    clock.multiplier = multiplier;\r\n                    clock.currentTime = JulianDate.clone(startTime);\r\n                    clock.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\r\n                    dataSource._clock = clock;\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if (defined(dataSource._clock)) {\r\n            clock = dataSource._clock.clone();\r\n        } else {\r\n            clock = new DataSourceClock();\r\n            clock.startTime = Iso8601.MINIMUM_VALUE.clone();\r\n            clock.stopTime = Iso8601.MAXIMUM_VALUE.clone();\r\n            clock.currentTime = Iso8601.MINIMUM_VALUE.clone();\r\n            clock.clockRange = ClockRange.LOOP_STOP;\r\n            clock.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\r\n            clock.multiplier = 1.0;\r\n        }\r\n        if (defined(clockPacket.interval)) {\r\n            iso8601Scratch.iso8601 = clockPacket.interval;\r\n            var interval = TimeInterval.fromIso8601(iso8601Scratch);\r\n            clock.startTime = interval.start;\r\n            clock.stopTime = interval.stop;\r\n        }\r\n        if (defined(clockPacket.currentTime)) {\r\n            clock.currentTime = JulianDate.fromIso8601(clockPacket.currentTime);\r\n        }\r\n        if (defined(clockPacket.range)) {\r\n            clock.clockRange = defaultValue(ClockRange[clockPacket.range], ClockRange.LOOP_STOP);\r\n        }\r\n        if (defined(clockPacket.step)) {\r\n            clock.clockStep = defaultValue(ClockStep[clockPacket.step], ClockStep.SYSTEM_CLOCK_MULTIPLIER);\r\n        }\r\n        if (defined(clockPacket.multiplier)) {\r\n            clock.multiplier = clockPacket.multiplier;\r\n        }\r\n\r\n        if (!clock.equals(dataSource._clock)) {\r\n            dataSource._clock = clock.clone(dataSource._clock);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function load(dataSource, czml, options, clear) {\r\n        \r\n\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var promise = czml;\r\n        var sourceUri = options.sourceUri;\r\n\r\n        // If the czml is a URL\r\n        if (typeof czml === 'string' || (czml instanceof Resource)) {\r\n            czml = Resource.createIfNeeded(czml);\r\n            promise = czml.fetchJson();\r\n            sourceUri = defaultValue(sourceUri, czml.clone());\r\n        }\r\n\r\n        sourceUri = Resource.createIfNeeded(sourceUri);\r\n\r\n        DataSource.setLoading(dataSource, true);\r\n\r\n        return when(promise, function(czml) {\r\n            return loadCzml(dataSource, czml, sourceUri, clear);\r\n        }).otherwise(function(error) {\r\n            DataSource.setLoading(dataSource, false);\r\n            dataSource._error.raiseEvent(dataSource, error);\r\n            console.log(error);\r\n            return when.reject(error);\r\n        });\r\n    }\r\n\r\n    function loadCzml(dataSource, czml, sourceUri, clear) {\r\n        DataSource.setLoading(dataSource, true);\r\n        var entityCollection = dataSource._entityCollection;\r\n\r\n        if (clear) {\r\n            dataSource._version = undefined;\r\n            dataSource._documentPacket = new DocumentPacket();\r\n            entityCollection.removeAll();\r\n        }\r\n\r\n        CzmlDataSource._processCzml(czml, entityCollection, sourceUri, undefined, dataSource);\r\n\r\n        var raiseChangedEvent = updateClock(dataSource);\r\n\r\n        var documentPacket = dataSource._documentPacket;\r\n        if (defined(documentPacket.name) && dataSource._name !== documentPacket.name) {\r\n            dataSource._name = documentPacket.name;\r\n            raiseChangedEvent = true;\r\n        } else if (!defined(dataSource._name) && defined(sourceUri)) {\r\n            dataSource._name = getFilenameFromUri(sourceUri.getUrlComponent());\r\n            raiseChangedEvent = true;\r\n        }\r\n\r\n        DataSource.setLoading(dataSource, false);\r\n        if (raiseChangedEvent) {\r\n            dataSource._changed.raiseEvent(dataSource);\r\n        }\r\n\r\n        return dataSource;\r\n    }\r\n\r\n    function DocumentPacket() {\r\n        this.name = undefined;\r\n        this.clock = undefined;\r\n    }\r\n\r\n    /**\r\n     * A {@link DataSource} which processes {@link https://github.com/AnalyticalGraphicsInc/cesium/wiki/CZML-Guide|CZML}.\r\n     * @alias CzmlDataSource\r\n     * @constructor\r\n     *\r\n     * @param {String} [name] An optional name for the data source.  This value will be overwritten if a loaded document contains a name.\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=CZML.html|Cesium Sandcastle CZML Demo}\r\n     */\r\n    function CzmlDataSource(name) {\r\n        this._name = name;\r\n        this._changed = new Event();\r\n        this._error = new Event();\r\n        this._isLoading = false;\r\n        this._loading = new Event();\r\n        this._clock = undefined;\r\n        this._documentPacket = new DocumentPacket();\r\n        this._version = undefined;\r\n        this._entityCollection = new EntityCollection(this);\r\n        this._entityCluster = new EntityCluster();\r\n    }\r\n\r\n    /**\r\n     * Creates a Promise to a new instance loaded with the provided CZML data.\r\n     *\r\n     * @param {Resource|String|Object} czml A url or CZML object to be processed.\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Resource|String} [options.sourceUri] Overrides the url to use for resolving relative links.\r\n     * @returns {Promise.<CzmlDataSource>} A promise that resolves to the new instance once the data is processed.\r\n     */\r\n    CzmlDataSource.load = function(czml, options) {\r\n        return new CzmlDataSource().load(czml, options);\r\n    };\r\n\r\n    defineProperties(CzmlDataSource.prototype, {\r\n        /**\r\n         * Gets a human-readable name for this instance.\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {String}\r\n         */\r\n        name : {\r\n            get : function() {\r\n                return this._name;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the clock settings defined by the loaded CZML.  If no clock is explicitly\r\n         * defined in the CZML, the combined availability of all objects is returned.  If\r\n         * only static data exists, this value is undefined.\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {DataSourceClock}\r\n         */\r\n        clock : {\r\n            get : function() {\r\n                return this._clock;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the collection of {@link Entity} instances.\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {EntityCollection}\r\n         */\r\n        entities : {\r\n            get : function() {\r\n                return this._entityCollection;\r\n            }\r\n        },\r\n        /**\r\n         * Gets a value indicating if the data source is currently loading data.\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {Boolean}\r\n         */\r\n        isLoading : {\r\n            get : function() {\r\n                return this._isLoading;\r\n            }\r\n        },\r\n        /**\r\n         * Gets an event that will be raised when the underlying data changes.\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {Event}\r\n         */\r\n        changedEvent : {\r\n            get : function() {\r\n                return this._changed;\r\n            }\r\n        },\r\n        /**\r\n         * Gets an event that will be raised if an error is encountered during processing.\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {Event}\r\n         */\r\n        errorEvent : {\r\n            get : function() {\r\n                return this._error;\r\n            }\r\n        },\r\n        /**\r\n         * Gets an event that will be raised when the data source either starts or stops loading.\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {Event}\r\n         */\r\n        loadingEvent : {\r\n            get : function() {\r\n                return this._loading;\r\n            }\r\n        },\r\n        /**\r\n         * Gets whether or not this data source should be displayed.\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {Boolean}\r\n         */\r\n        show : {\r\n            get : function() {\r\n                return this._entityCollection.show;\r\n            },\r\n            set : function(value) {\r\n                this._entityCollection.show = value;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\r\n         *\r\n         * @memberof CzmlDataSource.prototype\r\n         * @type {EntityCluster}\r\n         */\r\n        clustering : {\r\n            get : function() {\r\n                return this._entityCluster;\r\n            },\r\n            set : function(value) {\r\n                \r\n                this._entityCluster = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Gets the array of CZML processing functions.\r\n     * @memberof CzmlDataSource\r\n     * @type Array\r\n     */\r\n    CzmlDataSource.updaters = [\r\n        processBillboard, //\r\n        processBox, //\r\n        processCorridor, //\r\n        processCylinder, //\r\n        processEllipse, //\r\n        processEllipsoid, //\r\n        processLabel, //\r\n        processModel, //\r\n        processName, //\r\n        processDescription, //\r\n        processPath, //\r\n        processPoint, //\r\n        processPolygon, //\r\n        processPolyline, //\r\n        processProperties, //\r\n        processRectangle, //\r\n        processPosition, //\r\n        processViewFrom, //\r\n        processWall, //\r\n        processOrientation, //\r\n        processAvailability];\r\n\r\n    /**\r\n     * Processes the provided url or CZML object without clearing any existing data.\r\n     *\r\n     * @param {Resource|String|Object} czml A url or CZML object to be processed.\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {String} [options.sourceUri] Overrides the url to use for resolving relative links.\r\n     * @returns {Promise.<CzmlDataSource>} A promise that resolves to this instances once the data is processed.\r\n     */\r\n    CzmlDataSource.prototype.process = function(czml, options) {\r\n        return load(this, czml, options, false);\r\n    };\r\n\r\n    /**\r\n     * Loads the provided url or CZML object, replacing any existing data.\r\n     *\r\n     * @param {Resource|String|Object} czml A url or CZML object to be processed.\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {String} [options.sourceUri] Overrides the url to use for resolving relative links.\r\n     * @returns {Promise.<CzmlDataSource>} A promise that resolves to this instances once the data is processed.\r\n     */\r\n    CzmlDataSource.prototype.load = function(czml, options) {\r\n        return load(this, czml, options, true);\r\n    };\r\n\r\n    /**\r\n     * A helper function used by custom CZML updater functions\r\n     * which creates or updates a {@link Property} from a CZML packet.\r\n     * @function\r\n     *\r\n     * @param {Function} type The constructor function for the property being processed.\r\n     * @param {Object} object The object on which the property will be added or updated.\r\n     * @param {String} propertyName The name of the property on the object.\r\n     * @param {Object} packetData The CZML packet being processed.\r\n     * @param {TimeInterval} interval A constraining interval for which the data is valid.\r\n     * @param {String} sourceUri The originating uri of the data being processed.\r\n     * @param {EntityCollection} entityCollection The collection being processsed.\r\n     */\r\n    CzmlDataSource.processPacketData = processPacketData;\r\n\r\n    /**\r\n     * A helper function used by custom CZML updater functions\r\n     * which creates or updates a {@link PositionProperty} from a CZML packet.\r\n     * @function\r\n     *\r\n     * @param {Object} object The object on which the property will be added or updated.\r\n     * @param {String} propertyName The name of the property on the object.\r\n     * @param {Object} packetData The CZML packet being processed.\r\n     * @param {TimeInterval} interval A constraining interval for which the data is valid.\r\n     * @param {String} sourceUri The originating uri of the data being processed.\r\n     * @param {EntityCollection} entityCollection The collection being processsed.\r\n     */\r\n    CzmlDataSource.processPositionPacketData = processPositionPacketData;\r\n\r\n    /**\r\n     * A helper function used by custom CZML updater functions\r\n     * which creates or updates a {@link MaterialProperty} from a CZML packet.\r\n     * @function\r\n     *\r\n     * @param {Object} object The object on which the property will be added or updated.\r\n     * @param {String} propertyName The name of the property on the object.\r\n     * @param {Object} packetData The CZML packet being processed.\r\n     * @param {TimeInterval} interval A constraining interval for which the data is valid.\r\n     * @param {String} sourceUri The originating uri of the data being processed.\r\n     * @param {EntityCollection} entityCollection The collection being processsed.\r\n     */\r\n    CzmlDataSource.processMaterialPacketData = processMaterialPacketData;\r\n\r\n    CzmlDataSource._processCzml = function(czml, entityCollection, sourceUri, updaterFunctions, dataSource) {\r\n        updaterFunctions = defined(updaterFunctions) ? updaterFunctions : CzmlDataSource.updaters;\r\n\r\n        if (isArray(czml)) {\r\n            for (var i = 0, len = czml.length; i < len; i++) {\r\n                processCzmlPacket(czml[i], entityCollection, updaterFunctions, sourceUri, dataSource);\r\n            }\r\n        } else {\r\n            processCzmlPacket(czml, entityCollection, updaterFunctions, sourceUri, dataSource);\r\n        }\r\n    };\r\n\r\n    return CzmlDataSource;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/CzmlDataSource.js\n// module id = 811\n// module chunks = 0","define([\r\n        '../Core/AssociativeArray',\r\n        '../Core/BoundingRectangle',\r\n        '../Core/Cartesian2',\r\n        '../Core/Cartesian3',\r\n        '../Core/Cartographic',\r\n        '../Core/ClockRange',\r\n        '../Core/ClockStep',\r\n        '../Core/Color',\r\n        '../Core/createGuid',\r\n        '../Core/defaultValue',\r\n        '../Core/defined',\r\n        '../Core/defineProperties',\r\n        '../Core/DeveloperError',\r\n        '../Core/Ellipsoid',\r\n        '../Core/Event',\r\n        '../Core/getExtensionFromUri',\r\n        '../Core/getFilenameFromUri',\r\n        '../Core/HeadingPitchRange',\r\n        '../Core/HeadingPitchRoll',\r\n        '../Core/Iso8601',\r\n        '../Core/JulianDate',\r\n        '../Core/Math',\r\n        '../Core/NearFarScalar',\r\n        '../Core/objectToQuery',\r\n        '../Core/oneTimeWarning',\r\n        '../Core/PinBuilder',\r\n        '../Core/PolygonHierarchy',\r\n        '../Core/queryToObject',\r\n        '../Core/Rectangle',\r\n        '../Core/Resource',\r\n        '../Core/RuntimeError',\r\n        '../Core/TimeInterval',\r\n        '../Core/TimeIntervalCollection',\r\n        '../Scene/HeightReference',\r\n        '../Scene/HorizontalOrigin',\r\n        '../Scene/LabelStyle',\r\n        '../Scene/SceneMode',\r\n        '../ThirdParty/Autolinker',\r\n        '../ThirdParty/Uri',\r\n        '../ThirdParty/when',\r\n        '../ThirdParty/zip',\r\n        './BillboardGraphics',\r\n        './CompositePositionProperty',\r\n        './DataSource',\r\n        './DataSourceClock',\r\n        './Entity',\r\n        './EntityCluster',\r\n        './EntityCollection',\r\n        './KmlCamera',\r\n        './KmlLookAt',\r\n        './KmlTour',\r\n        './KmlTourFlyTo',\r\n        './KmlTourWait',\r\n        './LabelGraphics',\r\n        './PathGraphics',\r\n        './PolygonGraphics',\r\n        './PolylineGraphics',\r\n        './PositionPropertyArray',\r\n        './RectangleGraphics',\r\n        './ReferenceProperty',\r\n        './SampledPositionProperty',\r\n        './ScaledPositionProperty',\r\n        './TimeIntervalCollectionProperty',\r\n        './WallGraphics'\r\n    ], function(\r\n        AssociativeArray,\r\n        BoundingRectangle,\r\n        Cartesian2,\r\n        Cartesian3,\r\n        Cartographic,\r\n        ClockRange,\r\n        ClockStep,\r\n        Color,\r\n        createGuid,\r\n        defaultValue,\r\n        defined,\r\n        defineProperties,\r\n        DeveloperError,\r\n        Ellipsoid,\r\n        Event,\r\n        getExtensionFromUri,\r\n        getFilenameFromUri,\r\n        HeadingPitchRange,\r\n        HeadingPitchRoll,\r\n        Iso8601,\r\n        JulianDate,\r\n        CesiumMath,\r\n        NearFarScalar,\r\n        objectToQuery,\r\n        oneTimeWarning,\r\n        PinBuilder,\r\n        PolygonHierarchy,\r\n        queryToObject,\r\n        Rectangle,\r\n        Resource,\r\n        RuntimeError,\r\n        TimeInterval,\r\n        TimeIntervalCollection,\r\n        HeightReference,\r\n        HorizontalOrigin,\r\n        LabelStyle,\r\n        SceneMode,\r\n        Autolinker,\r\n        Uri,\r\n        when,\r\n        zip,\r\n        BillboardGraphics,\r\n        CompositePositionProperty,\r\n        DataSource,\r\n        DataSourceClock,\r\n        Entity,\r\n        EntityCluster,\r\n        EntityCollection,\r\n        KmlCamera,\r\n        KmlLookAt,\r\n        KmlTour,\r\n        KmlTourFlyTo,\r\n        KmlTourWait,\r\n        LabelGraphics,\r\n        PathGraphics,\r\n        PolygonGraphics,\r\n        PolylineGraphics,\r\n        PositionPropertyArray,\r\n        RectangleGraphics,\r\n        ReferenceProperty,\r\n        SampledPositionProperty,\r\n        ScaledPositionProperty,\r\n        TimeIntervalCollectionProperty,\r\n        WallGraphics) {\r\n    'use strict';\r\n\r\n    // IE 8 doesn't have a DOM parser and can't run Cesium anyway, so just bail.\r\n    if (typeof DOMParser === 'undefined') {\r\n        return {};\r\n    }\r\n\r\n    //This is by no means an exhaustive list of MIME types.\r\n    //The purpose of this list is to be able to accurately identify content embedded\r\n    //in KMZ files. Eventually, we can make this configurable by the end user so they can add\r\n    //there own content types if they have KMZ files that require it.\r\n    var MimeTypes = {\r\n        avi : 'video/x-msvideo',\r\n        bmp : 'image/bmp',\r\n        bz2 : 'application/x-bzip2',\r\n        chm : 'application/vnd.ms-htmlhelp',\r\n        css : 'text/css',\r\n        csv : 'text/csv',\r\n        doc : 'application/msword',\r\n        dvi : 'application/x-dvi',\r\n        eps : 'application/postscript',\r\n        flv : 'video/x-flv',\r\n        gif : 'image/gif',\r\n        gz : 'application/x-gzip',\r\n        htm : 'text/html',\r\n        html : 'text/html',\r\n        ico : 'image/vnd.microsoft.icon',\r\n        jnlp : 'application/x-java-jnlp-file',\r\n        jpeg : 'image/jpeg',\r\n        jpg : 'image/jpeg',\r\n        m3u : 'audio/x-mpegurl',\r\n        m4v : 'video/mp4',\r\n        mathml : 'application/mathml+xml',\r\n        mid : 'audio/midi',\r\n        midi : 'audio/midi',\r\n        mov : 'video/quicktime',\r\n        mp3 : 'audio/mpeg',\r\n        mp4 : 'video/mp4',\r\n        mp4v : 'video/mp4',\r\n        mpeg : 'video/mpeg',\r\n        mpg : 'video/mpeg',\r\n        odp : 'application/vnd.oasis.opendocument.presentation',\r\n        ods : 'application/vnd.oasis.opendocument.spreadsheet',\r\n        odt : 'application/vnd.oasis.opendocument.text',\r\n        ogg : 'application/ogg',\r\n        pdf : 'application/pdf',\r\n        png : 'image/png',\r\n        pps : 'application/vnd.ms-powerpoint',\r\n        ppt : 'application/vnd.ms-powerpoint',\r\n        ps : 'application/postscript',\r\n        qt : 'video/quicktime',\r\n        rdf : 'application/rdf+xml',\r\n        rss : 'application/rss+xml',\r\n        rtf : 'application/rtf',\r\n        svg : 'image/svg+xml',\r\n        swf : 'application/x-shockwave-flash',\r\n        text : 'text/plain',\r\n        tif : 'image/tiff',\r\n        tiff : 'image/tiff',\r\n        txt : 'text/plain',\r\n        wav : 'audio/x-wav',\r\n        wma : 'audio/x-ms-wma',\r\n        wmv : 'video/x-ms-wmv',\r\n        xml : 'application/xml',\r\n        zip : 'application/zip',\r\n\r\n        detectFromFilename : function(filename) {\r\n            var ext = filename.toLowerCase();\r\n            ext = getExtensionFromUri(ext);\r\n            return MimeTypes[ext];\r\n        }\r\n    };\r\n\r\n    var parser = new DOMParser();\r\n    var autolinker = new Autolinker({\r\n        stripPrefix : false,\r\n        twitter : false,\r\n        email : false,\r\n        replaceFn : function(linker, match) {\r\n            if (!match.protocolUrlMatch) {\r\n                //Prevent matching of non-explicit urls.\r\n                //i.e. foo.id won't match but http://foo.id will\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n\r\n    var BILLBOARD_SIZE = 32;\r\n\r\n    var BILLBOARD_NEAR_DISTANCE = 2414016;\r\n    var BILLBOARD_NEAR_RATIO = 1.0;\r\n    var BILLBOARD_FAR_DISTANCE = 1.6093e+7;\r\n    var BILLBOARD_FAR_RATIO = 0.1;\r\n\r\n    function isZipFile(blob) {\r\n        var magicBlob = blob.slice(0, Math.min(4, blob.size));\r\n        var deferred = when.defer();\r\n        var reader = new FileReader();\r\n        reader.addEventListener('load', function() {\r\n            deferred.resolve(new DataView(reader.result).getUint32(0, false) === 0x504b0304);\r\n        });\r\n        reader.addEventListener('error', function() {\r\n            deferred.reject(reader.error);\r\n        });\r\n        reader.readAsArrayBuffer(magicBlob);\r\n        return deferred.promise;\r\n    }\r\n\r\n    function readBlobAsText(blob) {\r\n        var deferred = when.defer();\r\n        var reader = new FileReader();\r\n        reader.addEventListener('load', function() {\r\n            deferred.resolve(reader.result);\r\n        });\r\n        reader.addEventListener('error', function() {\r\n            deferred.reject(reader.error);\r\n        });\r\n        reader.readAsText(blob);\r\n        return deferred.promise;\r\n    }\r\n\r\n    function insertNamespaces(text) {\r\n        var namespaceMap = {\r\n            xsi : 'http://www.w3.org/2001/XMLSchema-instance'\r\n        };\r\n        var firstPart, lastPart, reg, declaration;\r\n\r\n        for (var key in namespaceMap) {\r\n            if (namespaceMap.hasOwnProperty(key)) {\r\n                reg = RegExp('[< ]' + key + ':');\r\n                declaration = 'xmlns:' + key + '=';\r\n                if (reg.test(text) && text.indexOf(declaration) === -1) {\r\n                    if (!defined(firstPart)) {\r\n                        firstPart = text.substr(0, text.indexOf('<kml') + 4);\r\n                        lastPart = text.substr(firstPart.length);\r\n                    }\r\n                    firstPart += ' ' + declaration + '\"' + namespaceMap[key] + '\"';\r\n                }\r\n            }\r\n        }\r\n\r\n        if (defined(firstPart)) {\r\n            text = firstPart + lastPart;\r\n        }\r\n\r\n        return text;\r\n    }\r\n\r\n    function removeDuplicateNamespaces(text) {\r\n        var index = text.indexOf('xmlns:');\r\n        var endDeclaration = text.indexOf('>', index);\r\n        var namespace, startIndex, endIndex;\r\n\r\n        while ((index !== -1) && (index < endDeclaration)) {\r\n            namespace = text.slice(index, text.indexOf('\\\"', index));\r\n            startIndex = index;\r\n            index = text.indexOf(namespace, index + 1);\r\n            if (index !== -1) {\r\n                endIndex = text.indexOf('\\\"', (text.indexOf('\\\"', index) + 1));\r\n                text = text.slice(0, index -1) + text.slice(endIndex + 1, text.length);\r\n                index = text.indexOf('xmlns:', startIndex - 1);\r\n            } else {\r\n                index = text.indexOf('xmlns:', startIndex + 1);\r\n            }\r\n        }\r\n\r\n        return text;\r\n    }\r\n\r\n    function loadXmlFromZip(entry, uriResolver, deferred) {\r\n        entry.getData(new zip.TextWriter(), function(text) {\r\n            text = insertNamespaces(text);\r\n            text = removeDuplicateNamespaces(text);\r\n            uriResolver.kml = parser.parseFromString(text, 'application/xml');\r\n            deferred.resolve();\r\n        });\r\n    }\r\n\r\n    function loadDataUriFromZip(entry, uriResolver, deferred) {\r\n        var mimeType = defaultValue(MimeTypes.detectFromFilename(entry.filename), 'application/octet-stream');\r\n        entry.getData(new zip.Data64URIWriter(mimeType), function(dataUri) {\r\n            uriResolver[entry.filename] = dataUri;\r\n            deferred.resolve();\r\n        });\r\n    }\r\n\r\n    function embedDataUris(div, elementType, attributeName, uriResolver) {\r\n        var keys = uriResolver.keys;\r\n        var baseUri = new Uri('.');\r\n        var elements = div.querySelectorAll(elementType);\r\n        for (var i = 0; i < elements.length; i++) {\r\n            var element = elements[i];\r\n            var value = element.getAttribute(attributeName);\r\n            var uri = new Uri(value).resolve(baseUri).toString();\r\n            var index = keys.indexOf(uri);\r\n            if (index !== -1) {\r\n                var key = keys[index];\r\n                element.setAttribute(attributeName, uriResolver[key]);\r\n                if (elementType === 'a' && element.getAttribute('download') === null) {\r\n                    element.setAttribute('download', key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function applyBasePath(div, elementType, attributeName, sourceResource) {\r\n        var elements = div.querySelectorAll(elementType);\r\n        for (var i = 0; i < elements.length; i++) {\r\n            var element = elements[i];\r\n            var value = element.getAttribute(attributeName);\r\n            var resource = resolveHref(value, sourceResource);\r\n            element.setAttribute(attributeName, resource.url);\r\n        }\r\n    }\r\n\r\n    // an optional context is passed to allow for some malformed kmls (those with multiple geometries with same ids) to still parse\r\n    // correctly, as they do in Google Earth.\r\n    function createEntity(node, entityCollection, context) {\r\n        var id = queryStringAttribute(node, 'id');\r\n        id = defined(id) && id.length !== 0 ? id : createGuid();\r\n        if (defined(context)) {\r\n            id = context + id;\r\n        }\r\n\r\n        // If we have a duplicate ID just generate one.\r\n        // This isn't valid KML but Google Earth handles this case.\r\n        var entity = entityCollection.getById(id);\r\n        if (defined(entity)) {\r\n            id = createGuid();\r\n            if (defined(context)) {\r\n                id = context + id;\r\n            }\r\n        }\r\n\r\n        entity = entityCollection.add(new Entity({id : id}));\r\n        if (!defined(entity.kml)) {\r\n            entity.addProperty('kml');\r\n            entity.kml = new KmlFeatureData();\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    function isExtrudable(altitudeMode, gxAltitudeMode) {\r\n        return altitudeMode === 'absolute' || altitudeMode === 'relativeToGround' || gxAltitudeMode === 'relativeToSeaFloor';\r\n    }\r\n\r\n    function readCoordinate(value, ellipsoid) {\r\n        //Google Earth treats empty or missing coordinates as 0.\r\n        if (!defined(value)) {\r\n            return Cartesian3.fromDegrees(0, 0, 0, ellipsoid);\r\n        }\r\n\r\n        var digits = value.match(/[^\\s,\\n]+/g);\r\n        if (!defined(digits)) {\r\n            return Cartesian3.fromDegrees(0, 0, 0, ellipsoid);\r\n        }\r\n\r\n        var longitude = parseFloat(digits[0]);\r\n        var latitude = parseFloat(digits[1]);\r\n        var height = parseFloat(digits[2]);\r\n\r\n        longitude = isNaN(longitude) ? 0.0 : longitude;\r\n        latitude = isNaN(latitude) ? 0.0 : latitude;\r\n        height = isNaN(height) ? 0.0 : height;\r\n\r\n        return Cartesian3.fromDegrees(longitude, latitude, height, ellipsoid);\r\n    }\r\n\r\n    function readCoordinates(element, ellipsoid) {\r\n        if (!defined(element)) {\r\n            return undefined;\r\n        }\r\n\r\n        var tuples = element.textContent.match(/[^\\s\\n]+/g);\r\n        if (!defined(tuples)) {\r\n            return undefined;\r\n        }\r\n\r\n        var length = tuples.length;\r\n        var result = new Array(length);\r\n        var resultIndex = 0;\r\n        for (var i = 0; i < length; i++) {\r\n            result[resultIndex++] = readCoordinate(tuples[i], ellipsoid);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    var kmlNamespaces = [null, undefined, 'http://www.opengis.net/kml/2.2', 'http://earth.google.com/kml/2.2', 'http://earth.google.com/kml/2.1', 'http://earth.google.com/kml/2.0'];\r\n    var gxNamespaces = ['http://www.google.com/kml/ext/2.2'];\r\n    var atomNamespaces = ['http://www.w3.org/2005/Atom'];\r\n    var namespaces = {\r\n        kml : kmlNamespaces,\r\n        gx : gxNamespaces,\r\n        atom : atomNamespaces,\r\n        kmlgx : kmlNamespaces.concat(gxNamespaces)\r\n    };\r\n\r\n    function queryNumericAttribute(node, attributeName) {\r\n        if (!defined(node)) {\r\n            return undefined;\r\n        }\r\n\r\n        var value = node.getAttribute(attributeName);\r\n        if (value !== null) {\r\n            var result = parseFloat(value);\r\n            return !isNaN(result) ? result : undefined;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    function queryStringAttribute(node, attributeName) {\r\n        if (!defined(node)) {\r\n            return undefined;\r\n        }\r\n        var value = node.getAttribute(attributeName);\r\n        return value !== null ? value : undefined;\r\n    }\r\n\r\n    function queryFirstNode(node, tagName, namespace) {\r\n        if (!defined(node)) {\r\n            return undefined;\r\n        }\r\n        var childNodes = node.childNodes;\r\n        var length = childNodes.length;\r\n        for (var q = 0; q < length; q++) {\r\n            var child = childNodes[q];\r\n            if (child.localName === tagName && namespace.indexOf(child.namespaceURI) !== -1) {\r\n                return child;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    function queryNodes(node, tagName, namespace) {\r\n        if (!defined(node)) {\r\n            return undefined;\r\n        }\r\n        var result = [];\r\n        var childNodes = node.getElementsByTagNameNS('*', tagName);\r\n        var length = childNodes.length;\r\n        for (var q = 0; q < length; q++) {\r\n            var child = childNodes[q];\r\n            if (child.localName === tagName && namespace.indexOf(child.namespaceURI) !== -1) {\r\n                result.push(child);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function queryChildNodes(node, tagName, namespace) {\r\n        if (!defined(node)) {\r\n            return [];\r\n        }\r\n        var result = [];\r\n        var childNodes = node.childNodes;\r\n        var length = childNodes.length;\r\n        for (var q = 0; q < length; q++) {\r\n            var child = childNodes[q];\r\n            if (child.localName === tagName && namespace.indexOf(child.namespaceURI) !== -1) {\r\n                result.push(child);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function queryNumericValue(node, tagName, namespace) {\r\n        var resultNode = queryFirstNode(node, tagName, namespace);\r\n        if (defined(resultNode)) {\r\n            var result = parseFloat(resultNode.textContent);\r\n            return !isNaN(result) ? result : undefined;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    function queryStringValue(node, tagName, namespace) {\r\n        var result = queryFirstNode(node, tagName, namespace);\r\n        if (defined(result)) {\r\n            return result.textContent.trim();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    function queryBooleanValue(node, tagName, namespace) {\r\n        var result = queryFirstNode(node, tagName, namespace);\r\n        if (defined(result)) {\r\n            var value = result.textContent.trim();\r\n            return value === '1' || /^true$/i.test(value);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    function resolveHref(href, sourceResource, uriResolver) {\r\n        if (!defined(href)) {\r\n            return undefined;\r\n        }\r\n\r\n        var resource;\r\n        if (defined(uriResolver)) {\r\n            var blob = uriResolver[href];\r\n            if (defined(blob)) {\r\n                resource = new Resource({\r\n                    url: blob\r\n                });\r\n            } else {\r\n                // Needed for multiple levels of KML files in a KMZ\r\n                var baseUri = new Uri(sourceResource.getUrlComponent());\r\n                var uri = new Uri(href);\r\n                blob = uriResolver[uri.resolve(baseUri)];\r\n                if (defined(blob)) {\r\n                    resource = new Resource({\r\n                        url: blob\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!defined(resource)) {\r\n            resource = sourceResource.getDerivedResource({\r\n                url: href\r\n            });\r\n        }\r\n\r\n        return resource;\r\n    }\r\n\r\n    var colorOptions = {\r\n        maximumRed : undefined,\r\n        red : undefined,\r\n        maximumGreen : undefined,\r\n        green : undefined,\r\n        maximumBlue : undefined,\r\n        blue : undefined\r\n    };\r\n\r\n    function parseColorString(value, isRandom) {\r\n        if (!defined(value) || /^\\s*$/gm.test(value)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (value[0] === '#') {\r\n            value = value.substring(1);\r\n        }\r\n\r\n        var alpha = parseInt(value.substring(0, 2), 16) / 255.0;\r\n        var blue = parseInt(value.substring(2, 4), 16) / 255.0;\r\n        var green = parseInt(value.substring(4, 6), 16) / 255.0;\r\n        var red = parseInt(value.substring(6, 8), 16) / 255.0;\r\n\r\n        if (!isRandom) {\r\n            return new Color(red, green, blue, alpha);\r\n        }\r\n\r\n        if (red > 0) {\r\n            colorOptions.maximumRed = red;\r\n            colorOptions.red = undefined;\r\n        } else {\r\n            colorOptions.maximumRed = undefined;\r\n            colorOptions.red = 0;\r\n        }\r\n        if (green > 0) {\r\n            colorOptions.maximumGreen = green;\r\n            colorOptions.green = undefined;\r\n        } else {\r\n            colorOptions.maximumGreen = undefined;\r\n            colorOptions.green = 0;\r\n        }\r\n        if (blue > 0) {\r\n            colorOptions.maximumBlue = blue;\r\n            colorOptions.blue = undefined;\r\n        } else {\r\n            colorOptions.maximumBlue = undefined;\r\n            colorOptions.blue = 0;\r\n        }\r\n        colorOptions.alpha = alpha;\r\n        return Color.fromRandom(colorOptions);\r\n    }\r\n\r\n    function queryColorValue(node, tagName, namespace) {\r\n        var value = queryStringValue(node, tagName, namespace);\r\n        if (!defined(value)) {\r\n            return undefined;\r\n        }\r\n        return parseColorString(value, queryStringValue(node, 'colorMode', namespace) === 'random');\r\n    }\r\n\r\n    function processTimeStamp(featureNode) {\r\n        var node = queryFirstNode(featureNode, 'TimeStamp', namespaces.kmlgx);\r\n        var whenString = queryStringValue(node, 'when', namespaces.kmlgx);\r\n\r\n        if (!defined(node) || !defined(whenString) || whenString.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        //According to the KML spec, a TimeStamp represents a \"single moment in time\"\r\n        //However, since Cesium animates much differently than Google Earth, that doesn't\r\n        //Make much sense here.  Instead, we use the TimeStamp as the moment the feature\r\n        //comes into existence.  This works much better and gives a similar feel to\r\n        //GE's experience.\r\n        var when = JulianDate.fromIso8601(whenString);\r\n        var result = new TimeIntervalCollection();\r\n        result.addInterval(new TimeInterval({\r\n            start : when,\r\n            stop : Iso8601.MAXIMUM_VALUE\r\n        }));\r\n        return result;\r\n    }\r\n\r\n    function processTimeSpan(featureNode) {\r\n        var node = queryFirstNode(featureNode, 'TimeSpan', namespaces.kmlgx);\r\n        if (!defined(node)) {\r\n            return undefined;\r\n        }\r\n        var result;\r\n\r\n        var beginNode = queryFirstNode(node, 'begin', namespaces.kmlgx);\r\n        var beginDate = defined(beginNode) ? JulianDate.fromIso8601(beginNode.textContent) : undefined;\r\n\r\n        var endNode = queryFirstNode(node, 'end', namespaces.kmlgx);\r\n        var endDate = defined(endNode) ? JulianDate.fromIso8601(endNode.textContent) : undefined;\r\n\r\n        if (defined(beginDate) && defined(endDate)) {\r\n            if (JulianDate.lessThan(endDate, beginDate)) {\r\n                var tmp = beginDate;\r\n                beginDate = endDate;\r\n                endDate = tmp;\r\n            }\r\n            result = new TimeIntervalCollection();\r\n            result.addInterval(new TimeInterval({\r\n                start : beginDate,\r\n                stop : endDate\r\n            }));\r\n        } else if (defined(beginDate)) {\r\n            result = new TimeIntervalCollection();\r\n            result.addInterval(new TimeInterval({\r\n                start : beginDate,\r\n                stop : Iso8601.MAXIMUM_VALUE\r\n            }));\r\n        } else if (defined(endDate)) {\r\n            result = new TimeIntervalCollection();\r\n            result.addInterval(new TimeInterval({\r\n                start : Iso8601.MINIMUM_VALUE,\r\n                stop : endDate\r\n            }));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function createDefaultBillboard() {\r\n        var billboard = new BillboardGraphics();\r\n        billboard.width = BILLBOARD_SIZE;\r\n        billboard.height = BILLBOARD_SIZE;\r\n        billboard.scaleByDistance = new NearFarScalar(BILLBOARD_NEAR_DISTANCE, BILLBOARD_NEAR_RATIO, BILLBOARD_FAR_DISTANCE, BILLBOARD_FAR_RATIO);\r\n        billboard.pixelOffsetScaleByDistance = new NearFarScalar(BILLBOARD_NEAR_DISTANCE, BILLBOARD_NEAR_RATIO, BILLBOARD_FAR_DISTANCE, BILLBOARD_FAR_RATIO);\r\n        return billboard;\r\n    }\r\n\r\n    function createDefaultPolygon() {\r\n        var polygon = new PolygonGraphics();\r\n        polygon.outline = true;\r\n        polygon.outlineColor = Color.WHITE;\r\n        return polygon;\r\n    }\r\n\r\n    function createDefaultLabel() {\r\n        var label = new LabelGraphics();\r\n        label.translucencyByDistance = new NearFarScalar(3000000, 1.0, 5000000, 0.0);\r\n        label.pixelOffset = new Cartesian2(17, 0);\r\n        label.horizontalOrigin = HorizontalOrigin.LEFT;\r\n        label.font = '16px sans-serif';\r\n        label.style = LabelStyle.FILL_AND_OUTLINE;\r\n        return label;\r\n    }\r\n\r\n    function getIconHref(iconNode, dataSource, sourceResource, uriResolver, canRefresh) {\r\n        var href = queryStringValue(iconNode, 'href', namespaces.kml);\r\n        if (!defined(href) || (href.length === 0)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (href.indexOf('root://icons/palette-') === 0) {\r\n            var palette = href.charAt(21);\r\n\r\n            // Get the icon number\r\n            var x = defaultValue(queryNumericValue(iconNode, 'x', namespaces.gx), 0);\r\n            var y = defaultValue(queryNumericValue(iconNode, 'y', namespaces.gx), 0);\r\n            x = Math.min(x / 32, 7);\r\n            y = 7 - Math.min(y / 32, 7);\r\n            var iconNum = (8 * y) + x;\r\n\r\n            href = 'https://maps.google.com/mapfiles/kml/pal' + palette + '/icon' + iconNum + '.png';\r\n        }\r\n\r\n        var hrefResource = resolveHref(href, sourceResource, uriResolver);\r\n\r\n        if (canRefresh) {\r\n            var refreshMode = queryStringValue(iconNode, 'refreshMode', namespaces.kml);\r\n            var viewRefreshMode = queryStringValue(iconNode, 'viewRefreshMode', namespaces.kml);\r\n            if (refreshMode === 'onInterval' || refreshMode === 'onExpire') {\r\n                oneTimeWarning('kml-refreshMode-' + refreshMode, 'KML - Unsupported Icon refreshMode: ' + refreshMode);\r\n            } else if (viewRefreshMode === 'onStop' || viewRefreshMode === 'onRegion') {\r\n                oneTimeWarning('kml-refreshMode-' + viewRefreshMode, 'KML - Unsupported Icon viewRefreshMode: ' + viewRefreshMode);\r\n            }\r\n\r\n            var viewBoundScale = defaultValue(queryStringValue(iconNode, 'viewBoundScale', namespaces.kml), 1.0);\r\n            var defaultViewFormat = (viewRefreshMode === 'onStop') ? 'BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]' : '';\r\n            var viewFormat = defaultValue(queryStringValue(iconNode, 'viewFormat', namespaces.kml), defaultViewFormat);\r\n            var httpQuery = queryStringValue(iconNode, 'httpQuery', namespaces.kml);\r\n            if (defined(viewFormat)) {\r\n                hrefResource.setQueryParameters(queryToObject(cleanupString(viewFormat)));\r\n            }\r\n            if (defined(httpQuery)) {\r\n                hrefResource.setQueryParameters(queryToObject(cleanupString(httpQuery)));\r\n            }\r\n\r\n            var ellipsoid = dataSource._ellipsoid;\r\n            processNetworkLinkQueryString(hrefResource, dataSource._camera, dataSource._canvas, viewBoundScale, dataSource._lastCameraView.bbox, ellipsoid);\r\n\r\n            return hrefResource;\r\n        }\r\n\r\n        return hrefResource;\r\n    }\r\n\r\n    function processBillboardIcon(dataSource, node, targetEntity, sourceResource, uriResolver) {\r\n        var scale = queryNumericValue(node, 'scale', namespaces.kml);\r\n        var heading = queryNumericValue(node, 'heading', namespaces.kml);\r\n        var color = queryColorValue(node, 'color', namespaces.kml);\r\n\r\n        var iconNode = queryFirstNode(node, 'Icon', namespaces.kml);\r\n        var icon = getIconHref(iconNode, dataSource, sourceResource, uriResolver, false);\r\n\r\n        // If icon tags are present but blank, we do not want to show an icon\r\n        if (defined(iconNode) && !defined(icon)) {\r\n            icon = false;\r\n        }\r\n\r\n        var x = queryNumericValue(iconNode, 'x', namespaces.gx);\r\n        var y = queryNumericValue(iconNode, 'y', namespaces.gx);\r\n        var w = queryNumericValue(iconNode, 'w', namespaces.gx);\r\n        var h = queryNumericValue(iconNode, 'h', namespaces.gx);\r\n\r\n        var hotSpotNode = queryFirstNode(node, 'hotSpot', namespaces.kml);\r\n        var hotSpotX = queryNumericAttribute(hotSpotNode, 'x');\r\n        var hotSpotY = queryNumericAttribute(hotSpotNode, 'y');\r\n        var hotSpotXUnit = queryStringAttribute(hotSpotNode, 'xunits');\r\n        var hotSpotYUnit = queryStringAttribute(hotSpotNode, 'yunits');\r\n\r\n        var billboard = targetEntity.billboard;\r\n        if (!defined(billboard)) {\r\n            billboard = createDefaultBillboard();\r\n            targetEntity.billboard = billboard;\r\n        }\r\n\r\n        billboard.image = icon;\r\n        billboard.scale = scale;\r\n        billboard.color = color;\r\n\r\n        if (defined(x) || defined(y) || defined(w) || defined(h)) {\r\n            billboard.imageSubRegion = new BoundingRectangle(x, y, w, h);\r\n        }\r\n\r\n        //GE treats a heading of zero as no heading\r\n        //You can still point north using a 360 degree angle (or any multiple of 360)\r\n        if (defined(heading) && heading !== 0) {\r\n            billboard.rotation = CesiumMath.toRadians(-heading);\r\n            billboard.alignedAxis = Cartesian3.UNIT_Z;\r\n        }\r\n\r\n        //Hotpot is the KML equivalent of pixel offset\r\n        //The hotspot origin is the lower left, but we leave\r\n        //our billboard origin at the center and simply\r\n        //modify the pixel offset to take this into account\r\n        scale = defaultValue(scale, 1.0);\r\n\r\n        var xOffset;\r\n        var yOffset;\r\n        if (defined(hotSpotX)) {\r\n            if (hotSpotXUnit === 'pixels') {\r\n                xOffset = -hotSpotX * scale;\r\n            } else if (hotSpotXUnit === 'insetPixels') {\r\n                xOffset = (hotSpotX - BILLBOARD_SIZE) * scale;\r\n            } else if (hotSpotXUnit === 'fraction') {\r\n                xOffset = -hotSpotX * BILLBOARD_SIZE * scale;\r\n            }\r\n            xOffset += BILLBOARD_SIZE * 0.5 * scale;\r\n        }\r\n\r\n        if (defined(hotSpotY)) {\r\n            if (hotSpotYUnit === 'pixels') {\r\n                yOffset = hotSpotY * scale;\r\n            } else if (hotSpotYUnit === 'insetPixels') {\r\n                yOffset = (-hotSpotY + BILLBOARD_SIZE) * scale;\r\n            } else if (hotSpotYUnit === 'fraction') {\r\n                yOffset = hotSpotY * BILLBOARD_SIZE * scale;\r\n            }\r\n\r\n            yOffset -= BILLBOARD_SIZE * 0.5 * scale;\r\n        }\r\n\r\n        if (defined(xOffset) || defined(yOffset)) {\r\n            billboard.pixelOffset = new Cartesian2(xOffset, yOffset);\r\n        }\r\n    }\r\n\r\n    function applyStyle(dataSource, styleNode, targetEntity, sourceResource, uriResolver) {\r\n        for (var i = 0, len = styleNode.childNodes.length; i < len; i++) {\r\n            var node = styleNode.childNodes.item(i);\r\n            if (node.localName === 'IconStyle') {\r\n                processBillboardIcon(dataSource, node, targetEntity, sourceResource, uriResolver);\r\n            } else if (node.localName === 'LabelStyle') {\r\n                var label = targetEntity.label;\r\n                if (!defined(label)) {\r\n                    label = createDefaultLabel();\r\n                    targetEntity.label = label;\r\n                }\r\n                label.scale = defaultValue(queryNumericValue(node, 'scale', namespaces.kml), label.scale);\r\n                label.fillColor = defaultValue(queryColorValue(node, 'color', namespaces.kml), label.fillColor);\r\n                label.text = targetEntity.name;\r\n            } else if (node.localName === 'LineStyle') {\r\n                var polyline = targetEntity.polyline;\r\n                if (!defined(polyline)) {\r\n                    polyline = new PolylineGraphics();\r\n                    targetEntity.polyline = polyline;\r\n                }\r\n                polyline.width = queryNumericValue(node, 'width', namespaces.kml);\r\n                polyline.material = queryColorValue(node, 'color', namespaces.kml);\r\n                if (defined(queryColorValue(node, 'outerColor', namespaces.gx))) {\r\n                    oneTimeWarning('kml-gx:outerColor', 'KML - gx:outerColor is not supported in a LineStyle');\r\n                }\r\n                if (defined(queryNumericValue(node, 'outerWidth', namespaces.gx))) {\r\n                    oneTimeWarning('kml-gx:outerWidth', 'KML - gx:outerWidth is not supported in a LineStyle');\r\n                }\r\n                if (defined(queryNumericValue(node, 'physicalWidth', namespaces.gx))) {\r\n                    oneTimeWarning('kml-gx:physicalWidth', 'KML - gx:physicalWidth is not supported in a LineStyle');\r\n                }\r\n                if (defined(queryBooleanValue(node, 'labelVisibility', namespaces.gx))) {\r\n                    oneTimeWarning('kml-gx:labelVisibility', 'KML - gx:labelVisibility is not supported in a LineStyle');\r\n                }\r\n            } else if (node.localName === 'PolyStyle') {\r\n                var polygon = targetEntity.polygon;\r\n                if (!defined(polygon)) {\r\n                    polygon = createDefaultPolygon();\r\n                    targetEntity.polygon = polygon;\r\n                }\r\n                polygon.material = defaultValue(queryColorValue(node, 'color', namespaces.kml), polygon.material);\r\n                polygon.fill = defaultValue(queryBooleanValue(node, 'fill', namespaces.kml), polygon.fill);\r\n                polygon.outline = defaultValue(queryBooleanValue(node, 'outline', namespaces.kml), polygon.outline);\r\n            } else if (node.localName === 'BalloonStyle') {\r\n                var bgColor = defaultValue(parseColorString(queryStringValue(node, 'bgColor', namespaces.kml)), Color.WHITE);\r\n                var textColor = defaultValue(parseColorString(queryStringValue(node, 'textColor', namespaces.kml)), Color.BLACK);\r\n                var text = queryStringValue(node, 'text', namespaces.kml);\r\n\r\n                //This is purely an internal property used in style processing,\r\n                //it never ends up on the final entity.\r\n                targetEntity.addProperty('balloonStyle');\r\n                targetEntity.balloonStyle = {\r\n                    bgColor : bgColor,\r\n                    textColor : textColor,\r\n                    text : text\r\n                };\r\n            } else if (node.localName === 'ListStyle') {\r\n                var listItemType = queryStringValue(node, 'listItemType', namespaces.kml);\r\n                if (listItemType === 'radioFolder' || listItemType === 'checkOffOnly') {\r\n                    oneTimeWarning('kml-listStyle-' + listItemType, 'KML - Unsupported ListStyle with listItemType: ' + listItemType);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Processes and merges any inline styles for the provided node into the provided entity.\r\n    function computeFinalStyle(dataSource, placeMark, styleCollection, sourceResource, uriResolver) {\r\n        var result = new Entity();\r\n        var styleEntity;\r\n\r\n        //Google earth seems to always use the last inline Style/StyleMap only\r\n        var styleIndex = -1;\r\n        var childNodes = placeMark.childNodes;\r\n        var length = childNodes.length;\r\n        for (var q = 0; q < length; q++) {\r\n            var child = childNodes[q];\r\n            if (child.localName === 'Style' || child.localName === 'StyleMap') {\r\n                styleIndex = q;\r\n            }\r\n        }\r\n\r\n        if (styleIndex !== -1) {\r\n            var inlineStyleNode = childNodes[styleIndex];\r\n            if (inlineStyleNode.localName === 'Style') {\r\n                applyStyle(dataSource, inlineStyleNode, result, sourceResource, uriResolver);\r\n            } else { // StyleMap\r\n                var pairs = queryChildNodes(inlineStyleNode, 'Pair', namespaces.kml);\r\n                for (var p = 0; p < pairs.length; p++) {\r\n                    var pair = pairs[p];\r\n                    var key = queryStringValue(pair, 'key', namespaces.kml);\r\n                    if (key === 'normal') {\r\n                        var styleUrl = queryStringValue(pair, 'styleUrl', namespaces.kml);\r\n                        if (defined(styleUrl)) {\r\n                            styleEntity = styleCollection.getById(styleUrl);\r\n                            if (!defined(styleEntity)) {\r\n                                styleEntity = styleCollection.getById('#' + styleUrl);\r\n                            }\r\n                            if (defined(styleEntity)) {\r\n                                result.merge(styleEntity);\r\n                            }\r\n                        } else {\r\n                            var node = queryFirstNode(pair, 'Style', namespaces.kml);\r\n                            applyStyle(dataSource, node, result, sourceResource, uriResolver);\r\n                        }\r\n                    } else {\r\n                        oneTimeWarning('kml-styleMap-' + key, 'KML - Unsupported StyleMap key: ' + key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Google earth seems to always use the first external style only.\r\n        var externalStyle = queryStringValue(placeMark, 'styleUrl', namespaces.kml);\r\n        if (defined(externalStyle)) {\r\n            var id = externalStyle;\r\n            if (externalStyle[0] !== '#' && externalStyle.indexOf('#') !== -1) {\r\n                var tokens = externalStyle.split('#');\r\n                var uri = tokens[0];\r\n                var resource = sourceResource.getDerivedResource({\r\n                    url: uri\r\n                });\r\n\r\n                id = resource.getUrlComponent() + '#' + tokens[1];\r\n            }\r\n\r\n            styleEntity = styleCollection.getById(id);\r\n            if (!defined(styleEntity)) {\r\n                styleEntity = styleCollection.getById('#' + id);\r\n            }\r\n            if (defined(styleEntity)) {\r\n                result.merge(styleEntity);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    //Asynchronously processes an external style file.\r\n    function processExternalStyles(dataSource, resource, styleCollection) {\r\n        return resource.fetchXML().then(function(styleKml) {\r\n            return processStyles(dataSource, styleKml, styleCollection, resource, true);\r\n        });\r\n    }\r\n\r\n    //Processes all shared and external styles and stores\r\n    //their id into the provided styleCollection.\r\n    //Returns an array of promises that will resolve when\r\n    //each style is loaded.\r\n    function processStyles(dataSource, kml, styleCollection, sourceResource, isExternal, uriResolver) {\r\n        var i;\r\n        var id;\r\n        var styleEntity;\r\n\r\n        var node;\r\n        var styleNodes = queryNodes(kml, 'Style', namespaces.kml);\r\n        if (defined(styleNodes)) {\r\n            var styleNodesLength = styleNodes.length;\r\n            for (i = 0; i < styleNodesLength; i++) {\r\n                node = styleNodes[i];\r\n                id = queryStringAttribute(node, 'id');\r\n                if (defined(id)) {\r\n                    id = '#' + id;\r\n                    if (isExternal && defined(sourceResource)) {\r\n                        id = sourceResource.getUrlComponent() + id;\r\n                    }\r\n                    if (!defined(styleCollection.getById(id))) {\r\n                        styleEntity = new Entity({\r\n                            id : id\r\n                        });\r\n                        styleCollection.add(styleEntity);\r\n                        applyStyle(dataSource, node, styleEntity, sourceResource, uriResolver);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var styleMaps = queryNodes(kml, 'StyleMap', namespaces.kml);\r\n        if (defined(styleMaps)) {\r\n            var styleMapsLength = styleMaps.length;\r\n            for (i = 0; i < styleMapsLength; i++) {\r\n                var styleMap = styleMaps[i];\r\n                id = queryStringAttribute(styleMap, 'id');\r\n                if (defined(id)) {\r\n                    var pairs = queryChildNodes(styleMap, 'Pair', namespaces.kml);\r\n                    for (var p = 0; p < pairs.length; p++) {\r\n                        var pair = pairs[p];\r\n                        var key = queryStringValue(pair, 'key', namespaces.kml);\r\n                        if (key === 'normal') {\r\n                            id = '#' + id;\r\n                            if (isExternal && defined(sourceResource)) {\r\n                                id = sourceResource.getUrlComponent() + id;\r\n                            }\r\n                            if (!defined(styleCollection.getById(id))) {\r\n                                styleEntity = styleCollection.getOrCreateEntity(id);\r\n\r\n                                var styleUrl = queryStringValue(pair, 'styleUrl', namespaces.kml);\r\n                                if (defined(styleUrl)) {\r\n                                    if (styleUrl[0] !== '#') {\r\n                                        styleUrl = '#' + styleUrl;\r\n                                    }\r\n\r\n                                    if (isExternal && defined(sourceResource)) {\r\n                                        styleUrl = sourceResource.getUrlComponent() + styleUrl;\r\n                                    }\r\n                                    var base = styleCollection.getById(styleUrl);\r\n\r\n                                    if (defined(base)) {\r\n                                        styleEntity.merge(base);\r\n                                    }\r\n                                } else {\r\n                                    node = queryFirstNode(pair, 'Style', namespaces.kml);\r\n                                    applyStyle(dataSource, node, styleEntity, sourceResource, uriResolver);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            oneTimeWarning('kml-styleMap-' + key, 'KML - Unsupported StyleMap key: ' + key);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var promises = [];\r\n        var styleUrlNodes = kml.getElementsByTagName('styleUrl');\r\n        var styleUrlNodesLength = styleUrlNodes.length;\r\n        for (i = 0; i < styleUrlNodesLength; i++) {\r\n            var styleReference = styleUrlNodes[i].textContent;\r\n            if (styleReference[0] !== '#') {\r\n                //According to the spec, all local styles should start with a #\r\n                //and everything else is an external style that has a # seperating\r\n                //the URL of the document and the style.  However, Google Earth\r\n                //also accepts styleUrls without a # as meaning a local style.\r\n                var tokens = styleReference.split('#');\r\n                if (tokens.length === 2) {\r\n                    var uri = tokens[0];\r\n                    var resource = sourceResource.getDerivedResource({\r\n                        url: uri\r\n                    });\r\n\r\n                    promises.push(processExternalStyles(dataSource, resource, styleCollection));\r\n                }\r\n            }\r\n        }\r\n\r\n        return promises;\r\n    }\r\n\r\n    function createDropLine(entityCollection, entity, styleEntity) {\r\n        var entityPosition = new ReferenceProperty(entityCollection, entity.id, ['position']);\r\n        var surfacePosition = new ScaledPositionProperty(entity.position);\r\n        entity.polyline = defined(styleEntity.polyline) ? styleEntity.polyline.clone() : new PolylineGraphics();\r\n        entity.polyline.positions = new PositionPropertyArray([entityPosition, surfacePosition]);\r\n    }\r\n\r\n    function heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode) {\r\n        if (!defined(altitudeMode) && !defined(gxAltitudeMode) || altitudeMode === 'clampToGround') {\r\n            return HeightReference.CLAMP_TO_GROUND;\r\n        }\r\n\r\n        if (altitudeMode === 'relativeToGround') {\r\n            return HeightReference.RELATIVE_TO_GROUND;\r\n        }\r\n\r\n        if (altitudeMode === 'absolute') {\r\n            return HeightReference.NONE;\r\n        }\r\n\r\n        if (gxAltitudeMode === 'clampToSeaFloor') {\r\n            oneTimeWarning('kml-gx:altitudeMode-clampToSeaFloor', 'KML - <gx:altitudeMode>:clampToSeaFloor is currently not supported, using <kml:altitudeMode>:clampToGround.');\r\n            return HeightReference.CLAMP_TO_GROUND;\r\n        }\r\n\r\n        if (gxAltitudeMode === 'relativeToSeaFloor') {\r\n            oneTimeWarning('kml-gx:altitudeMode-relativeToSeaFloor', 'KML - <gx:altitudeMode>:relativeToSeaFloor is currently not supported, using <kml:altitudeMode>:relativeToGround.');\r\n            return HeightReference.RELATIVE_TO_GROUND;\r\n        }\r\n\r\n        if (defined(altitudeMode)) {\r\n            oneTimeWarning('kml-altitudeMode-unknown', 'KML - Unknown <kml:altitudeMode>:' + altitudeMode + ', using <kml:altitudeMode>:CLAMP_TO_GROUND.');\r\n        } else {\r\n            oneTimeWarning('kml-gx:altitudeMode-unknown', 'KML - Unknown <gx:altitudeMode>:' + gxAltitudeMode + ', using <kml:altitudeMode>:CLAMP_TO_GROUND.');\r\n        }\r\n\r\n        // Clamp to ground is the default\r\n        return HeightReference.CLAMP_TO_GROUND;\r\n    }\r\n\r\n    function createPositionPropertyFromAltitudeMode(property, altitudeMode, gxAltitudeMode) {\r\n        if (gxAltitudeMode === 'relativeToSeaFloor' || altitudeMode === 'absolute' || altitudeMode === 'relativeToGround') {\r\n            //Just return the ellipsoid referenced property until we support MSL\r\n            return property;\r\n        }\r\n\r\n        if ((defined(altitudeMode) && altitudeMode !== 'clampToGround') || //\r\n            (defined(gxAltitudeMode) && gxAltitudeMode !== 'clampToSeaFloor')) {\r\n            oneTimeWarning('kml-altitudeMode-unknown', 'KML - Unknown altitudeMode: ' + defaultValue(altitudeMode, gxAltitudeMode));\r\n        }\r\n\r\n        // Clamp to ground is the default\r\n        return new ScaledPositionProperty(property);\r\n    }\r\n\r\n    function createPositionPropertyArrayFromAltitudeMode(properties, altitudeMode, gxAltitudeMode, ellipsoid) {\r\n        if (!defined(properties)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (gxAltitudeMode === 'relativeToSeaFloor' || altitudeMode === 'absolute' || altitudeMode === 'relativeToGround') {\r\n            //Just return the ellipsoid referenced property until we support MSL\r\n            return properties;\r\n        }\r\n\r\n        if ((defined(altitudeMode) && altitudeMode !== 'clampToGround') || //\r\n            (defined(gxAltitudeMode) && gxAltitudeMode !== 'clampToSeaFloor')) {\r\n            oneTimeWarning('kml-altitudeMode-unknown', 'KML - Unknown altitudeMode: ' + defaultValue(altitudeMode, gxAltitudeMode));\r\n        }\r\n\r\n        // Clamp to ground is the default\r\n        var propertiesLength = properties.length;\r\n        for (var i = 0; i < propertiesLength; i++) {\r\n            var property = properties[i];\r\n            ellipsoid.scaleToGeodeticSurface(property, property);\r\n        }\r\n        return properties;\r\n    }\r\n\r\n    function processPositionGraphics(dataSource, entity, styleEntity, heightReference) {\r\n        var label = entity.label;\r\n        if (!defined(label)) {\r\n            label = defined(styleEntity.label) ? styleEntity.label.clone() : createDefaultLabel();\r\n            entity.label = label;\r\n        }\r\n        label.text = entity.name;\r\n\r\n        var billboard = entity.billboard;\r\n        if (!defined(billboard)) {\r\n            billboard = defined(styleEntity.billboard) ? styleEntity.billboard.clone() : createDefaultBillboard();\r\n            entity.billboard = billboard;\r\n        }\r\n\r\n        if (!defined(billboard.image)) {\r\n            billboard.image = dataSource._pinBuilder.fromColor(Color.YELLOW, 64);\r\n\r\n        // If there were empty <Icon> tags in the KML, then billboard.image was set to false above\r\n        // However, in this case, the false value would have been converted to a property afterwards\r\n        // Thus, we check if billboard.image is defined with value of false\r\n        } else if (!billboard.image.getValue()) {\r\n            billboard.image = undefined;\r\n        }\r\n\r\n        var scale = 1.0;\r\n        if (defined(billboard.scale)) {\r\n            scale = billboard.scale.getValue();\r\n            if (scale !== 0) {\r\n                label.pixelOffset = new Cartesian2((scale * 16) + 1, 0);\r\n            } else {\r\n                //Minor tweaks to better match Google Earth.\r\n                label.pixelOffset = undefined;\r\n                label.horizontalOrigin = undefined;\r\n            }\r\n        }\r\n\r\n        if (defined(heightReference) && dataSource._clampToGround) {\r\n            billboard.heightReference = heightReference;\r\n            label.heightReference = heightReference;\r\n        }\r\n    }\r\n\r\n    function processPathGraphics(entity, styleEntity) {\r\n        var path = entity.path;\r\n        if (!defined(path)) {\r\n            path = new PathGraphics();\r\n            path.leadTime = 0;\r\n            entity.path = path;\r\n        }\r\n\r\n        var polyline = styleEntity.polyline;\r\n        if (defined(polyline)) {\r\n            path.material = polyline.material;\r\n            path.width = polyline.width;\r\n        }\r\n    }\r\n\r\n    function processPoint(dataSource, entityCollection, geometryNode, entity, styleEntity) {\r\n        var coordinatesString = queryStringValue(geometryNode, 'coordinates', namespaces.kml);\r\n        var altitudeMode = queryStringValue(geometryNode, 'altitudeMode', namespaces.kml);\r\n        var gxAltitudeMode = queryStringValue(geometryNode, 'altitudeMode', namespaces.gx);\r\n        var extrude = queryBooleanValue(geometryNode, 'extrude', namespaces.kml);\r\n        var ellipsoid = dataSource._ellipsoid;\r\n        var position = readCoordinate(coordinatesString, ellipsoid);\r\n\r\n        entity.position = position;\r\n        processPositionGraphics(dataSource, entity, styleEntity, heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode));\r\n\r\n        if (extrude && isExtrudable(altitudeMode, gxAltitudeMode)) {\r\n            createDropLine(entityCollection, entity, styleEntity);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function processLineStringOrLinearRing(dataSource, entityCollection, geometryNode, entity, styleEntity) {\r\n        var coordinatesNode = queryFirstNode(geometryNode, 'coordinates', namespaces.kml);\r\n        var altitudeMode = queryStringValue(geometryNode, 'altitudeMode', namespaces.kml);\r\n        var gxAltitudeMode = queryStringValue(geometryNode, 'altitudeMode', namespaces.gx);\r\n        var extrude = queryBooleanValue(geometryNode, 'extrude', namespaces.kml);\r\n        var tessellate = queryBooleanValue(geometryNode, 'tessellate', namespaces.kml);\r\n        var canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\r\n        var zIndex = queryNumericValue(geometryNode, 'drawOrder', namespaces.gx);\r\n\r\n        var ellipsoid = dataSource._ellipsoid;\r\n        var coordinates = readCoordinates(coordinatesNode, ellipsoid);\r\n        var polyline = styleEntity.polyline;\r\n        if (canExtrude && extrude) {\r\n            var wall = new WallGraphics();\r\n            entity.wall = wall;\r\n            wall.positions = coordinates;\r\n            var polygon = styleEntity.polygon;\r\n\r\n            if (defined(polygon)) {\r\n                wall.fill = polygon.fill;\r\n                wall.material = polygon.material;\r\n            }\r\n\r\n            //Always outline walls so they show up in 2D.\r\n            wall.outline = true;\r\n            if (defined(polyline)) {\r\n                wall.outlineColor = defined(polyline.material) ? polyline.material.color : Color.WHITE;\r\n                wall.outlineWidth = polyline.width;\r\n            } else if (defined(polygon)) {\r\n                wall.outlineColor = defined(polygon.material) ? polygon.material.color : Color.WHITE;\r\n            }\r\n        } else if (dataSource._clampToGround && !canExtrude && tessellate) {\r\n            var polylineGraphics = new PolylineGraphics();\r\n            polylineGraphics.clampToGround = true;\r\n            entity.polyline = polylineGraphics;\r\n            polylineGraphics.positions = coordinates;\r\n            if (defined(polyline)) {\r\n                polylineGraphics.material = defined(polyline.material) ? polyline.material.color.getValue(Iso8601.MINIMUM_VALUE) : Color.WHITE;\r\n                polylineGraphics.width = defaultValue(polyline.width, 1.0);\r\n            } else {\r\n                polylineGraphics.material = Color.WHITE;\r\n                polylineGraphics.width = 1.0;\r\n            }\r\n            polylineGraphics.zIndex = zIndex;\r\n        } else {\r\n            if (defined(zIndex)) {\r\n                oneTimeWarning('kml-gx:drawOrder', 'KML - gx:drawOrder is not supported in LineStrings when clampToGround is false');\r\n            }\r\n\r\n            polyline = defined(polyline) ? polyline.clone() : new PolylineGraphics();\r\n            entity.polyline = polyline;\r\n            polyline.positions = createPositionPropertyArrayFromAltitudeMode(coordinates, altitudeMode, gxAltitudeMode, ellipsoid);\r\n            if (!tessellate || canExtrude) {\r\n                polyline.followSurface = false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function processPolygon(dataSource, entityCollection, geometryNode, entity, styleEntity) {\r\n        var outerBoundaryIsNode = queryFirstNode(geometryNode, 'outerBoundaryIs', namespaces.kml);\r\n        var linearRingNode = queryFirstNode(outerBoundaryIsNode, 'LinearRing', namespaces.kml);\r\n        var coordinatesNode = queryFirstNode(linearRingNode, 'coordinates', namespaces.kml);\r\n        var ellipsoid = dataSource._ellipsoid;\r\n        var coordinates = readCoordinates(coordinatesNode, ellipsoid);\r\n        var extrude = queryBooleanValue(geometryNode, 'extrude', namespaces.kml);\r\n        var altitudeMode = queryStringValue(geometryNode, 'altitudeMode', namespaces.kml);\r\n        var gxAltitudeMode = queryStringValue(geometryNode, 'altitudeMode', namespaces.gx);\r\n        var canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\r\n\r\n        var polygon = defined(styleEntity.polygon) ? styleEntity.polygon.clone() : createDefaultPolygon();\r\n\r\n        var polyline = styleEntity.polyline;\r\n        if (defined(polyline)) {\r\n            polygon.outlineColor = defined(polyline.material) ? polyline.material.color : Color.WHITE;\r\n            polygon.outlineWidth = polyline.width;\r\n        }\r\n        entity.polygon = polygon;\r\n\r\n        if (canExtrude) {\r\n            polygon.perPositionHeight = true;\r\n            polygon.extrudedHeight = extrude ? 0 : undefined;\r\n        } else if (!dataSource._clampToGround) {\r\n            polygon.height = 0;\r\n        }\r\n\r\n        if (defined(coordinates)) {\r\n            var hierarchy = new PolygonHierarchy(coordinates);\r\n            var innerBoundaryIsNodes = queryChildNodes(geometryNode, 'innerBoundaryIs', namespaces.kml);\r\n            for (var j = 0; j < innerBoundaryIsNodes.length; j++) {\r\n                linearRingNode = queryChildNodes(innerBoundaryIsNodes[j], 'LinearRing', namespaces.kml);\r\n                for (var k = 0; k < linearRingNode.length; k++) {\r\n                    coordinatesNode = queryFirstNode(linearRingNode[k], 'coordinates', namespaces.kml);\r\n                    coordinates = readCoordinates(coordinatesNode, ellipsoid);\r\n                    if (defined(coordinates)) {\r\n                        hierarchy.holes.push(new PolygonHierarchy(coordinates));\r\n                    }\r\n                }\r\n            }\r\n            polygon.hierarchy = hierarchy;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function processTrack(dataSource, entityCollection, geometryNode, entity, styleEntity) {\r\n        var altitudeMode = queryStringValue(geometryNode, 'altitudeMode', namespaces.kml);\r\n        var gxAltitudeMode = queryStringValue(geometryNode, 'altitudeMode', namespaces.gx);\r\n        var coordNodes = queryChildNodes(geometryNode, 'coord', namespaces.gx);\r\n        var angleNodes = queryChildNodes(geometryNode, 'angles', namespaces.gx);\r\n        var timeNodes = queryChildNodes(geometryNode, 'when', namespaces.kml);\r\n        var extrude = queryBooleanValue(geometryNode, 'extrude', namespaces.kml);\r\n        var canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\r\n        var ellipsoid = dataSource._ellipsoid;\r\n\r\n        if (angleNodes.length > 0) {\r\n            oneTimeWarning('kml-gx:angles', 'KML - gx:angles are not supported in gx:Tracks');\r\n        }\r\n\r\n        var length = Math.min(coordNodes.length, timeNodes.length);\r\n        var coordinates = [];\r\n        var times = [];\r\n        for (var i = 0; i < length; i++) {\r\n            var position = readCoordinate(coordNodes[i].textContent, ellipsoid);\r\n            coordinates.push(position);\r\n            times.push(JulianDate.fromIso8601(timeNodes[i].textContent));\r\n        }\r\n        var property = new SampledPositionProperty();\r\n        property.addSamples(times, coordinates);\r\n        entity.position = property;\r\n        processPositionGraphics(dataSource, entity, styleEntity, heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode));\r\n        processPathGraphics(entity, styleEntity);\r\n\r\n        entity.availability = new TimeIntervalCollection();\r\n\r\n        if (timeNodes.length > 0) {\r\n            entity.availability.addInterval(new TimeInterval({\r\n                start : times[0],\r\n                stop : times[times.length - 1]\r\n            }));\r\n        }\r\n\r\n        if (canExtrude && extrude) {\r\n            createDropLine(entityCollection, entity, styleEntity);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function addToMultiTrack(times, positions, composite, availability, dropShowProperty, extrude, altitudeMode, gxAltitudeMode, includeEndPoints) {\r\n        var start = times[0];\r\n        var stop = times[times.length - 1];\r\n\r\n        var data = new SampledPositionProperty();\r\n        data.addSamples(times, positions);\r\n\r\n        composite.intervals.addInterval(new TimeInterval({\r\n            start : start,\r\n            stop : stop,\r\n            isStartIncluded : includeEndPoints,\r\n            isStopIncluded : includeEndPoints,\r\n            data : createPositionPropertyFromAltitudeMode(data, altitudeMode, gxAltitudeMode)\r\n        }));\r\n        availability.addInterval(new TimeInterval({\r\n            start : start,\r\n            stop : stop,\r\n            isStartIncluded : includeEndPoints,\r\n            isStopIncluded : includeEndPoints\r\n        }));\r\n        dropShowProperty.intervals.addInterval(new TimeInterval({\r\n            start : start,\r\n            stop : stop,\r\n            isStartIncluded : includeEndPoints,\r\n            isStopIncluded : includeEndPoints,\r\n            data : extrude\r\n        }));\r\n    }\r\n\r\n    function processMultiTrack(dataSource, entityCollection, geometryNode, entity, styleEntity) {\r\n        // Multitrack options do not work in GE as detailed in the spec,\r\n        // rather than altitudeMode being at the MultiTrack level,\r\n        // GE just defers all settings to the underlying track.\r\n\r\n        var interpolate = queryBooleanValue(geometryNode, 'interpolate', namespaces.gx);\r\n        var trackNodes = queryChildNodes(geometryNode, 'Track', namespaces.gx);\r\n\r\n        var times;\r\n        var lastStop;\r\n        var lastStopPosition;\r\n        var needDropLine = false;\r\n        var dropShowProperty = new TimeIntervalCollectionProperty();\r\n        var availability = new TimeIntervalCollection();\r\n        var composite = new CompositePositionProperty();\r\n        var ellipsoid = dataSource._ellipsoid;\r\n        for (var i = 0, len = trackNodes.length; i < len; i++) {\r\n            var trackNode = trackNodes[i];\r\n            var timeNodes = queryChildNodes(trackNode, 'when', namespaces.kml);\r\n            var coordNodes = queryChildNodes(trackNode, 'coord', namespaces.gx);\r\n            var altitudeMode = queryStringValue(trackNode, 'altitudeMode', namespaces.kml);\r\n            var gxAltitudeMode = queryStringValue(trackNode, 'altitudeMode', namespaces.gx);\r\n            var canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\r\n            var extrude = queryBooleanValue(trackNode, 'extrude', namespaces.kml);\r\n\r\n            var length = Math.min(coordNodes.length, timeNodes.length);\r\n\r\n            var positions = [];\r\n            times = [];\r\n            for (var x = 0; x < length; x++) {\r\n                var position = readCoordinate(coordNodes[x].textContent, ellipsoid);\r\n                positions.push(position);\r\n                times.push(JulianDate.fromIso8601(timeNodes[x].textContent));\r\n            }\r\n\r\n            if (interpolate) {\r\n                //If we are interpolating, then we need to fill in the end of\r\n                //the last track and the beginning of this one with a sampled\r\n                //property.  From testing in Google Earth, this property\r\n                //is never extruded and always absolute.\r\n                if (defined(lastStop)) {\r\n                    addToMultiTrack([lastStop, times[0]], [lastStopPosition, positions[0]], composite, availability, dropShowProperty, false, 'absolute', undefined, false);\r\n                }\r\n                lastStop = times[length - 1];\r\n                lastStopPosition = positions[positions.length - 1];\r\n            }\r\n\r\n            addToMultiTrack(times, positions, composite, availability, dropShowProperty, canExtrude && extrude, altitudeMode, gxAltitudeMode, true);\r\n            needDropLine = needDropLine || (canExtrude && extrude);\r\n        }\r\n\r\n        entity.availability = availability;\r\n        entity.position = composite;\r\n        processPositionGraphics(dataSource, entity, styleEntity);\r\n        processPathGraphics(entity, styleEntity);\r\n        if (needDropLine) {\r\n            createDropLine(entityCollection, entity, styleEntity);\r\n            entity.polyline.show = dropShowProperty;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    var geometryTypes = {\r\n        Point : processPoint,\r\n        LineString : processLineStringOrLinearRing,\r\n        LinearRing : processLineStringOrLinearRing,\r\n        Polygon : processPolygon,\r\n        Track : processTrack,\r\n        MultiTrack : processMultiTrack,\r\n        MultiGeometry : processMultiGeometry,\r\n        Model : processUnsupportedGeometry\r\n    };\r\n\r\n    function processMultiGeometry(dataSource, entityCollection, geometryNode, entity, styleEntity, context) {\r\n        var childNodes = geometryNode.childNodes;\r\n        var hasGeometry = false;\r\n        for (var i = 0, len = childNodes.length; i < len; i++) {\r\n            var childNode = childNodes.item(i);\r\n            var geometryProcessor = geometryTypes[childNode.localName];\r\n            if (defined(geometryProcessor)) {\r\n                var childEntity = createEntity(childNode, entityCollection, context);\r\n                childEntity.parent = entity;\r\n                childEntity.name = entity.name;\r\n                childEntity.availability = entity.availability;\r\n                childEntity.description = entity.description;\r\n                childEntity.kml = entity.kml;\r\n                if (geometryProcessor(dataSource, entityCollection, childNode, childEntity, styleEntity)) {\r\n                    hasGeometry = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return hasGeometry;\r\n    }\r\n\r\n    function processUnsupportedGeometry(dataSource, entityCollection, geometryNode, entity, styleEntity) {\r\n        oneTimeWarning('kml-unsupportedGeometry', 'KML - Unsupported geometry: ' + geometryNode.localName);\r\n        return false;\r\n    }\r\n\r\n    function processExtendedData(node, entity) {\r\n        var extendedDataNode = queryFirstNode(node, 'ExtendedData', namespaces.kml);\r\n\r\n        if (!defined(extendedDataNode)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (defined(queryFirstNode(extendedDataNode, 'SchemaData', namespaces.kml))) {\r\n            oneTimeWarning('kml-schemaData', 'KML - SchemaData is unsupported');\r\n        }\r\n        if (defined(queryStringAttribute(extendedDataNode, 'xmlns:prefix'))) {\r\n            oneTimeWarning('kml-extendedData', 'KML - ExtendedData with xmlns:prefix is unsupported');\r\n        }\r\n\r\n        var result = {};\r\n        var dataNodes = queryChildNodes(extendedDataNode, 'Data', namespaces.kml);\r\n        if (defined(dataNodes)) {\r\n            var length = dataNodes.length;\r\n            for (var i = 0; i < length; i++) {\r\n                var dataNode = dataNodes[i];\r\n                var name = queryStringAttribute(dataNode, 'name');\r\n                if (defined(name)) {\r\n                    result[name] = {\r\n                        displayName : queryStringValue(dataNode, 'displayName', namespaces.kml),\r\n                        value : queryStringValue(dataNode, 'value', namespaces.kml)\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        entity.kml.extendedData = result;\r\n    }\r\n\r\n    var scratchDiv = document.createElement('div');\r\n\r\n    function processDescription(node, entity, styleEntity, uriResolver, sourceResource) {\r\n        var i;\r\n        var key;\r\n        var keys;\r\n\r\n        var kmlData = entity.kml;\r\n        var extendedData = kmlData.extendedData;\r\n        var description = queryStringValue(node, 'description', namespaces.kml);\r\n\r\n        var balloonStyle = defaultValue(entity.balloonStyle, styleEntity.balloonStyle);\r\n\r\n        var background = Color.WHITE;\r\n        var foreground = Color.BLACK;\r\n        var text = description;\r\n\r\n        if (defined(balloonStyle)) {\r\n            background = defaultValue(balloonStyle.bgColor, Color.WHITE);\r\n            foreground = defaultValue(balloonStyle.textColor, Color.BLACK);\r\n            text = defaultValue(balloonStyle.text, description);\r\n        }\r\n\r\n        var value;\r\n        if (defined(text)) {\r\n            text = text.replace('$[name]', defaultValue(entity.name, ''));\r\n            text = text.replace('$[description]', defaultValue(description, ''));\r\n            text = text.replace('$[address]', defaultValue(kmlData.address, ''));\r\n            text = text.replace('$[Snippet]', defaultValue(kmlData.snippet, ''));\r\n            text = text.replace('$[id]', entity.id);\r\n\r\n            //While not explicitly defined by the OGC spec, in Google Earth\r\n            //The appearance of geDirections adds the directions to/from links\r\n            //We simply replace this string with nothing.\r\n            text = text.replace('$[geDirections]', '');\r\n\r\n            if (defined(extendedData)) {\r\n                var matches = text.match(/\\$\\[.+?\\]/g);\r\n                if (matches !== null) {\r\n                    for (i = 0; i < matches.length; i++) {\r\n                        var token = matches[i];\r\n                        var propertyName = token.substr(2, token.length - 3);\r\n                        var isDisplayName = /\\/displayName$/.test(propertyName);\r\n                        propertyName = propertyName.replace(/\\/displayName$/, '');\r\n\r\n                        value = extendedData[propertyName];\r\n                        if (defined(value)) {\r\n                            value = isDisplayName ? value.displayName : value.value;\r\n                        }\r\n                        if (defined(value)) {\r\n                            text = text.replace(token, defaultValue(value, ''));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (defined(extendedData)) {\r\n            //If no description exists, build a table out of the extended data\r\n            keys = Object.keys(extendedData);\r\n            if (keys.length > 0) {\r\n                text = '<table class=\"cesium-infoBox-defaultTable cesium-infoBox-defaultTable-lighter\"><tbody>';\r\n                for (i = 0; i < keys.length; i++) {\r\n                    key = keys[i];\r\n                    value = extendedData[key];\r\n                    text += '<tr><th>' + defaultValue(value.displayName, key) + '</th><td>' + defaultValue(value.value, '') + '</td></tr>';\r\n                }\r\n                text += '</tbody></table>';\r\n            }\r\n        }\r\n\r\n        if (!defined(text)) {\r\n            //No description\r\n            return;\r\n        }\r\n\r\n        //Turns non-explicit links into clickable links.\r\n        text = autolinker.link(text);\r\n\r\n        //Use a temporary div to manipulate the links\r\n        //so that they open in a new window.\r\n        scratchDiv.innerHTML = text;\r\n        var links = scratchDiv.querySelectorAll('a');\r\n        for (i = 0; i < links.length; i++) {\r\n            links[i].setAttribute('target', '_blank');\r\n        }\r\n\r\n        //Rewrite any KMZ embedded urls\r\n        if (defined(uriResolver) && uriResolver.keys.length > 1) {\r\n            embedDataUris(scratchDiv, 'a', 'href', uriResolver);\r\n            embedDataUris(scratchDiv, 'img', 'src', uriResolver);\r\n        }\r\n\r\n        //Make relative urls absolute using the sourceResource\r\n        applyBasePath(scratchDiv, 'a', 'href', sourceResource);\r\n        applyBasePath(scratchDiv, 'img', 'src', sourceResource);\r\n\r\n        var tmp = '<div class=\"cesium-infoBox-description-lighter\" style=\"';\r\n        tmp += 'overflow:auto;';\r\n        tmp += 'word-wrap:break-word;';\r\n        tmp += 'background-color:' + background.toCssColorString() + ';';\r\n        tmp += 'color:' + foreground.toCssColorString() + ';';\r\n        tmp += '\">';\r\n        tmp += scratchDiv.innerHTML + '</div>';\r\n        scratchDiv.innerHTML = '';\r\n\r\n        //Set the final HTML as the description.\r\n        entity.description = tmp;\r\n    }\r\n\r\n    function processFeature(dataSource, parent, featureNode, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        var entity = createEntity(featureNode, entityCollection, context);\r\n        var kmlData = entity.kml;\r\n        var styleEntity = computeFinalStyle(dataSource, featureNode, styleCollection, sourceResource, uriResolver);\r\n\r\n        var name = queryStringValue(featureNode, 'name', namespaces.kml);\r\n        entity.name = name;\r\n        entity.parent = parent;\r\n\r\n        var availability = processTimeSpan(featureNode);\r\n        if (!defined(availability)) {\r\n            availability = processTimeStamp(featureNode);\r\n        }\r\n        entity.availability = availability;\r\n\r\n        mergeAvailabilityWithParent(entity);\r\n\r\n        // Per KML spec \"A Feature is visible only if it and all its ancestors are visible.\"\r\n        function ancestryIsVisible(parentEntity) {\r\n            if (!parentEntity) {\r\n                return true;\r\n            }\r\n            return parentEntity.show && ancestryIsVisible(parentEntity.parent);\r\n        }\r\n\r\n        var visibility = queryBooleanValue(featureNode, 'visibility', namespaces.kml);\r\n        entity.show = ancestryIsVisible(parent) && defaultValue(visibility, true);\r\n        //var open = queryBooleanValue(featureNode, 'open', namespaces.kml);\r\n\r\n        var authorNode = queryFirstNode(featureNode, 'author', namespaces.atom);\r\n        var author = kmlData.author;\r\n        author.name = queryStringValue(authorNode, 'name', namespaces.atom);\r\n        author.uri = queryStringValue(authorNode, 'uri', namespaces.atom);\r\n        author.email = queryStringValue(authorNode, 'email', namespaces.atom);\r\n\r\n        var linkNode = queryFirstNode(featureNode, 'link', namespaces.atom);\r\n        var link = kmlData.link;\r\n        link.href = queryStringAttribute(linkNode, 'href');\r\n        link.hreflang = queryStringAttribute(linkNode, 'hreflang');\r\n        link.rel = queryStringAttribute(linkNode, 'rel');\r\n        link.type = queryStringAttribute(linkNode, 'type');\r\n        link.title = queryStringAttribute(linkNode, 'title');\r\n        link.length = queryStringAttribute(linkNode, 'length');\r\n\r\n        kmlData.address = queryStringValue(featureNode, 'address', namespaces.kml);\r\n        kmlData.phoneNumber = queryStringValue(featureNode, 'phoneNumber', namespaces.kml);\r\n        kmlData.snippet = queryStringValue(featureNode, 'Snippet', namespaces.kml);\r\n\r\n        processExtendedData(featureNode, entity);\r\n        processDescription(featureNode, entity, styleEntity, uriResolver, sourceResource);\r\n\r\n        var ellipsoid = dataSource._ellipsoid;\r\n        processLookAt(featureNode, entity, ellipsoid);\r\n        processCamera(featureNode, entity, ellipsoid);\r\n\r\n        if (defined(queryFirstNode(featureNode, 'Region', namespaces.kml))) {\r\n            oneTimeWarning('kml-region', 'KML - Placemark Regions are unsupported');\r\n        }\r\n\r\n        return {\r\n            entity : entity,\r\n            styleEntity : styleEntity\r\n        };\r\n    }\r\n\r\n    // Ensure Specs/Data/KML/unsupported.kml is kept up to date with these supported types\r\n    var featureTypes = {\r\n        Document : processDocument,\r\n        Folder : processFolder,\r\n        Placemark : processPlacemark,\r\n        NetworkLink : processNetworkLink,\r\n        GroundOverlay : processGroundOverlay,\r\n        PhotoOverlay : processUnsupportedFeature,\r\n        ScreenOverlay : processUnsupportedFeature,\r\n        Tour : processTour\r\n    };\r\n\r\n    function processDocument(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        var featureTypeNames = Object.keys(featureTypes);\r\n        var featureTypeNamesLength = featureTypeNames.length;\r\n\r\n        for (var i = 0; i < featureTypeNamesLength; i++) {\r\n            var featureName = featureTypeNames[i];\r\n            var processFeatureNode = featureTypes[featureName];\r\n\r\n            var childNodes = node.childNodes;\r\n            var length = childNodes.length;\r\n            for (var q = 0; q < length; q++) {\r\n                var child = childNodes[q];\r\n                if (child.localName === featureName &&\r\n                    ((namespaces.kml.indexOf(child.namespaceURI) !== -1) || (namespaces.gx.indexOf(child.namespaceURI) !== -1))) {\r\n                    processFeatureNode(dataSource, parent, child, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function processFolder(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        var r = processFeature(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n        processDocument(dataSource, r.entity, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n    }\r\n\r\n    function processPlacemark(dataSource, parent, placemark, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        var r = processFeature(dataSource, parent, placemark, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n        var entity = r.entity;\r\n        var styleEntity = r.styleEntity;\r\n\r\n        var hasGeometry = false;\r\n        var childNodes = placemark.childNodes;\r\n        for (var i = 0, len = childNodes.length; i < len && !hasGeometry; i++) {\r\n            var childNode = childNodes.item(i);\r\n            var geometryProcessor = geometryTypes[childNode.localName];\r\n            if (defined(geometryProcessor)) {\r\n                // pass the placemark entity id as a context for case of defining multiple child entities together to handle case\r\n                // where some malformed kmls reuse the same id across placemarks, which works in GE, but is not technically to spec.\r\n                geometryProcessor(dataSource, entityCollection, childNode, entity, styleEntity, entity.id);\r\n                hasGeometry = true;\r\n            }\r\n        }\r\n\r\n        if (!hasGeometry) {\r\n            entity.merge(styleEntity);\r\n            processPositionGraphics(dataSource, entity, styleEntity);\r\n        }\r\n    }\r\n\r\n    var playlistNodeProcessors = {\r\n        FlyTo: processTourFlyTo,\r\n        Wait: processTourWait,\r\n        SoundCue: processTourUnsupportedNode,\r\n        AnimatedUpdate: processTourUnsupportedNode,\r\n        TourControl: processTourUnsupportedNode\r\n    };\r\n\r\n    function processTour(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        var name = queryStringValue(node, 'name', namespaces.kml);\r\n        var id = queryStringAttribute(node, 'id');\r\n        var tour = new KmlTour(name, id);\r\n\r\n        var playlistNode = queryFirstNode(node, 'Playlist', namespaces.gx);\r\n        if(playlistNode) {\r\n            var ellipsoid = dataSource._ellipsoid;\r\n            var childNodes = playlistNode.childNodes;\r\n            for(var i = 0; i < childNodes.length; i++) {\r\n                var entryNode = childNodes[i];\r\n                if (entryNode.localName) {\r\n                    var playlistNodeProcessor = playlistNodeProcessors[entryNode.localName];\r\n                    if (playlistNodeProcessor) {\r\n                        playlistNodeProcessor(tour, entryNode, ellipsoid);\r\n                    }\r\n                    else {\r\n                        console.log('Unknown KML Tour playlist entry type ' + entryNode.localName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!defined(dataSource.kmlTours)) {\r\n            dataSource.kmlTours = [];\r\n        }\r\n\r\n        dataSource.kmlTours.push(tour);\r\n    }\r\n\r\n    function processTourUnsupportedNode(tour, entryNode) {\r\n        oneTimeWarning('KML Tour unsupported node ' + entryNode.localName);\r\n    }\r\n\r\n    function processTourWait(tour, entryNode) {\r\n        var duration = queryNumericValue(entryNode, 'duration', namespaces.gx);\r\n        tour.addPlaylistEntry(new KmlTourWait(duration));\r\n    }\r\n\r\n    function processTourFlyTo(tour, entryNode, ellipsoid) {\r\n        var duration = queryNumericValue(entryNode, 'duration', namespaces.gx);\r\n        var flyToMode = queryStringValue(entryNode, 'flyToMode', namespaces.gx);\r\n\r\n        var t = {kml: {}};\r\n\r\n        processLookAt(entryNode, t, ellipsoid);\r\n        processCamera(entryNode, t, ellipsoid);\r\n\r\n        var view = t.kml.lookAt || t.kml.camera;\r\n\r\n        var flyto = new KmlTourFlyTo(duration, flyToMode, view);\r\n        tour.addPlaylistEntry(flyto);\r\n    }\r\n\r\n    function processCamera(featureNode, entity, ellipsoid) {\r\n        var camera = queryFirstNode(featureNode, 'Camera', namespaces.kml);\r\n        if(defined(camera)) {\r\n            var lon = defaultValue(queryNumericValue(camera, 'longitude', namespaces.kml), 0.0);\r\n            var lat = defaultValue(queryNumericValue(camera, 'latitude', namespaces.kml), 0.0);\r\n            var altitude = defaultValue(queryNumericValue(camera, 'altitude', namespaces.kml), 0.0);\r\n\r\n            var heading = defaultValue(queryNumericValue(camera, 'heading', namespaces.kml), 0.0);\r\n            var tilt = defaultValue(queryNumericValue(camera, 'tilt', namespaces.kml), 0.0);\r\n            var roll = defaultValue(queryNumericValue(camera, 'roll', namespaces.kml), 0.0);\r\n\r\n            var position = Cartesian3.fromDegrees(lon, lat, altitude, ellipsoid);\r\n            var hpr = HeadingPitchRoll.fromDegrees(heading, tilt - 90.0, roll);\r\n\r\n            entity.kml.camera = new KmlCamera(position, hpr);\r\n        }\r\n    }\r\n\r\n    function processLookAt(featureNode, entity, ellipsoid) {\r\n        var lookAt = queryFirstNode(featureNode, 'LookAt', namespaces.kml);\r\n        if(defined(lookAt)) {\r\n            var lon = defaultValue(queryNumericValue(lookAt, 'longitude', namespaces.kml), 0.0);\r\n            var lat = defaultValue(queryNumericValue(lookAt, 'latitude', namespaces.kml), 0.0);\r\n            var altitude = defaultValue(queryNumericValue(lookAt, 'altitude', namespaces.kml), 0.0);\r\n            var heading = queryNumericValue(lookAt, 'heading', namespaces.kml);\r\n            var tilt = queryNumericValue(lookAt, 'tilt', namespaces.kml);\r\n            var range = defaultValue(queryNumericValue(lookAt, 'range', namespaces.kml), 0.0);\r\n\r\n            tilt = CesiumMath.toRadians(defaultValue(tilt, 0.0));\r\n            heading = CesiumMath.toRadians(defaultValue(heading, 0.0));\r\n\r\n            var hpr = new HeadingPitchRange(heading, tilt - CesiumMath.PI_OVER_TWO, range);\r\n            var viewPoint = Cartesian3.fromDegrees(lon, lat, altitude, ellipsoid);\r\n\r\n            entity.kml.lookAt = new KmlLookAt(viewPoint, hpr);\r\n        }\r\n    }\r\n\r\n    function processGroundOverlay(dataSource, parent, groundOverlay, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        var r = processFeature(dataSource, parent, groundOverlay, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n        var entity = r.entity;\r\n\r\n        var geometry;\r\n        var isLatLonQuad = false;\r\n\r\n        var ellipsoid = dataSource._ellipsoid;\r\n        var positions = readCoordinates(queryFirstNode(groundOverlay, 'LatLonQuad', namespaces.gx), ellipsoid);\r\n        var zIndex = queryNumericValue(groundOverlay, 'drawOrder', namespaces.kml);\r\n        if (defined(positions)) {\r\n            geometry = createDefaultPolygon();\r\n            geometry.hierarchy = new PolygonHierarchy(positions);\r\n            geometry.zIndex = zIndex;\r\n            entity.polygon = geometry;\r\n            isLatLonQuad = true;\r\n        } else {\r\n            geometry = new RectangleGraphics();\r\n            geometry.zIndex = zIndex;\r\n            entity.rectangle = geometry;\r\n\r\n            var latLonBox = queryFirstNode(groundOverlay, 'LatLonBox', namespaces.kml);\r\n            if (defined(latLonBox)) {\r\n                var west = queryNumericValue(latLonBox, 'west', namespaces.kml);\r\n                var south = queryNumericValue(latLonBox, 'south', namespaces.kml);\r\n                var east = queryNumericValue(latLonBox, 'east', namespaces.kml);\r\n                var north = queryNumericValue(latLonBox, 'north', namespaces.kml);\r\n\r\n                if (defined(west)) {\r\n                    west = CesiumMath.negativePiToPi(CesiumMath.toRadians(west));\r\n                }\r\n                if (defined(south)) {\r\n                    south = CesiumMath.clampToLatitudeRange(CesiumMath.toRadians(south));\r\n                }\r\n                if (defined(east)) {\r\n                    east = CesiumMath.negativePiToPi(CesiumMath.toRadians(east));\r\n                }\r\n                if (defined(north)) {\r\n                    north = CesiumMath.clampToLatitudeRange(CesiumMath.toRadians(north));\r\n                }\r\n                geometry.coordinates = new Rectangle(west, south, east, north);\r\n\r\n                var rotation = queryNumericValue(latLonBox, 'rotation', namespaces.kml);\r\n                if (defined(rotation)) {\r\n                    var rotationRadians = CesiumMath.toRadians(rotation);\r\n                    geometry.rotation = rotationRadians;\r\n                    geometry.stRotation = rotationRadians;\r\n                }\r\n            }\r\n        }\r\n\r\n        var iconNode = queryFirstNode(groundOverlay, 'Icon', namespaces.kml);\r\n        var href = getIconHref(iconNode, dataSource, sourceResource, uriResolver, true);\r\n        if (defined(href)) {\r\n            if (isLatLonQuad) {\r\n                oneTimeWarning('kml-gx:LatLonQuad', 'KML - gx:LatLonQuad Icon does not support texture projection.');\r\n            }\r\n            var x = queryNumericValue(iconNode, 'x', namespaces.gx);\r\n            var y = queryNumericValue(iconNode, 'y', namespaces.gx);\r\n            var w = queryNumericValue(iconNode, 'w', namespaces.gx);\r\n            var h = queryNumericValue(iconNode, 'h', namespaces.gx);\r\n\r\n            if (defined(x) || defined(y) || defined(w) || defined(h)) {\r\n                oneTimeWarning('kml-groundOverlay-xywh', 'KML - gx:x, gx:y, gx:w, gx:h aren\\'t supported for GroundOverlays');\r\n            }\r\n\r\n            geometry.material = href;\r\n            geometry.material.color = queryColorValue(groundOverlay, 'color', namespaces.kml);\r\n            geometry.material.transparent = true;\r\n        } else {\r\n            geometry.material = queryColorValue(groundOverlay, 'color', namespaces.kml);\r\n        }\r\n\r\n        var altitudeMode = queryStringValue(groundOverlay, 'altitudeMode', namespaces.kml);\r\n\r\n        if (defined(altitudeMode)) {\r\n            if (altitudeMode === 'absolute') {\r\n                //Use height above ellipsoid until we support MSL.\r\n                geometry.height = queryNumericValue(groundOverlay, 'altitude', namespaces.kml);\r\n                geometry.zIndex = undefined;\r\n            } else if (altitudeMode !== 'clampToGround') {\r\n                oneTimeWarning('kml-altitudeMode-unknown', 'KML - Unknown altitudeMode: ' + altitudeMode);\r\n            }\r\n            // else just use the default of 0 until we support 'clampToGround'\r\n        } else {\r\n            altitudeMode = queryStringValue(groundOverlay, 'altitudeMode', namespaces.gx);\r\n            if (altitudeMode === 'relativeToSeaFloor') {\r\n                oneTimeWarning('kml-altitudeMode-relativeToSeaFloor', 'KML - altitudeMode relativeToSeaFloor is currently not supported, treating as absolute.');\r\n                geometry.height = queryNumericValue(groundOverlay, 'altitude', namespaces.kml);\r\n                geometry.zIndex = undefined;\r\n            } else if (altitudeMode === 'clampToSeaFloor') {\r\n                oneTimeWarning('kml-altitudeMode-clampToSeaFloor', 'KML - altitudeMode clampToSeaFloor is currently not supported, treating as clampToGround.');\r\n            } else if (defined(altitudeMode)) {\r\n                oneTimeWarning('kml-altitudeMode-unknown', 'KML - Unknown altitudeMode: ' + altitudeMode);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processUnsupportedFeature(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        dataSource._unsupportedNode.raiseEvent(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver);\r\n        oneTimeWarning('kml-unsupportedFeature-' + node.nodeName, 'KML - Unsupported feature: ' + node.nodeName);\r\n    }\r\n\r\n    var RefreshMode = {\r\n        INTERVAL : 0,\r\n        EXPIRE : 1,\r\n        STOP : 2\r\n    };\r\n\r\n    function cleanupString(s) {\r\n        if (!defined(s) || s.length === 0) {\r\n            return '';\r\n        }\r\n\r\n        var sFirst = s[0];\r\n        if (sFirst === '&' || sFirst === '?') {\r\n            s = s.substring(1);\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    var zeroRectangle = new Rectangle();\r\n    var scratchCartographic = new Cartographic();\r\n    var scratchCartesian2 = new Cartesian2();\r\n    var scratchCartesian3 = new Cartesian3();\r\n\r\n    function processNetworkLinkQueryString(resource, camera, canvas, viewBoundScale, bbox, ellipsoid) {\r\n        function fixLatitude(value) {\r\n            if (value < -CesiumMath.PI_OVER_TWO) {\r\n                return -CesiumMath.PI_OVER_TWO;\r\n            } else if (value > CesiumMath.PI_OVER_TWO) {\r\n                return CesiumMath.PI_OVER_TWO;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        function fixLongitude(value) {\r\n            if (value > CesiumMath.PI) {\r\n                return value - CesiumMath.TWO_PI;\r\n            } else if (value < -CesiumMath.PI) {\r\n                return value + CesiumMath.TWO_PI;\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        var queryString = objectToQuery(resource.queryParameters);\r\n\r\n        // objectToQuery escapes [ and ], so fix that\r\n        queryString = queryString.replace(/%5B/g, '[').replace(/%5D/g, ']');\r\n\r\n        if (defined(camera) && camera._mode !== SceneMode.MORPHING) {\r\n            var centerCartesian;\r\n            var centerCartographic;\r\n\r\n            bbox = defaultValue(bbox, zeroRectangle);\r\n            if (defined(canvas)) {\r\n                scratchCartesian2.x = canvas.clientWidth * 0.5;\r\n                scratchCartesian2.y = canvas.clientHeight * 0.5;\r\n                centerCartesian = camera.pickEllipsoid(scratchCartesian2, ellipsoid, scratchCartesian3);\r\n            }\r\n\r\n            if (defined(centerCartesian)) {\r\n                centerCartographic = ellipsoid.cartesianToCartographic(centerCartesian, scratchCartographic);\r\n            } else {\r\n                centerCartographic = Rectangle.center(bbox, scratchCartographic);\r\n                centerCartesian = ellipsoid.cartographicToCartesian(centerCartographic);\r\n            }\r\n\r\n            if (defined(viewBoundScale) && !CesiumMath.equalsEpsilon(viewBoundScale, 1.0, CesiumMath.EPSILON9)) {\r\n                var newHalfWidth = bbox.width * viewBoundScale * 0.5;\r\n                var newHalfHeight = bbox.height * viewBoundScale * 0.5;\r\n                bbox = new Rectangle(fixLongitude(centerCartographic.longitude - newHalfWidth),\r\n                    fixLatitude(centerCartographic.latitude - newHalfHeight),\r\n                    fixLongitude(centerCartographic.longitude + newHalfWidth),\r\n                    fixLatitude(centerCartographic.latitude + newHalfHeight)\r\n                );\r\n            }\r\n\r\n            queryString = queryString.replace('[bboxWest]', CesiumMath.toDegrees(bbox.west).toString());\r\n            queryString = queryString.replace('[bboxSouth]', CesiumMath.toDegrees(bbox.south).toString());\r\n            queryString = queryString.replace('[bboxEast]', CesiumMath.toDegrees(bbox.east).toString());\r\n            queryString = queryString.replace('[bboxNorth]', CesiumMath.toDegrees(bbox.north).toString());\r\n\r\n            var lon = CesiumMath.toDegrees(centerCartographic.longitude).toString();\r\n            var lat = CesiumMath.toDegrees(centerCartographic.latitude).toString();\r\n            queryString = queryString.replace('[lookatLon]', lon);\r\n            queryString = queryString.replace('[lookatLat]', lat);\r\n            queryString = queryString.replace('[lookatTilt]', CesiumMath.toDegrees(camera.pitch).toString());\r\n            queryString = queryString.replace('[lookatHeading]', CesiumMath.toDegrees(camera.heading).toString());\r\n            queryString = queryString.replace('[lookatRange]', Cartesian3.distance(camera.positionWC, centerCartesian));\r\n            queryString = queryString.replace('[lookatTerrainLon]', lon);\r\n            queryString = queryString.replace('[lookatTerrainLat]', lat);\r\n            queryString = queryString.replace('[lookatTerrainAlt]', centerCartographic.height.toString());\r\n\r\n            ellipsoid.cartesianToCartographic(camera.positionWC, scratchCartographic);\r\n            queryString = queryString.replace('[cameraLon]', CesiumMath.toDegrees(scratchCartographic.longitude).toString());\r\n            queryString = queryString.replace('[cameraLat]', CesiumMath.toDegrees(scratchCartographic.latitude).toString());\r\n            queryString = queryString.replace('[cameraAlt]', CesiumMath.toDegrees(scratchCartographic.height).toString());\r\n\r\n            var frustum = camera.frustum;\r\n            var aspectRatio = frustum.aspectRatio;\r\n            var horizFov = '';\r\n            var vertFov = '';\r\n            if (defined(aspectRatio)) {\r\n                var fov = CesiumMath.toDegrees(frustum.fov);\r\n                if (aspectRatio > 1.0) {\r\n                    horizFov = fov;\r\n                    vertFov = fov / aspectRatio;\r\n                } else {\r\n                    vertFov = fov;\r\n                    horizFov = fov * aspectRatio;\r\n                }\r\n            }\r\n            queryString = queryString.replace('[horizFov]', horizFov.toString());\r\n            queryString = queryString.replace('[vertFov]', vertFov.toString());\r\n        } else {\r\n            queryString = queryString.replace('[bboxWest]', '-180');\r\n            queryString = queryString.replace('[bboxSouth]', '-90');\r\n            queryString = queryString.replace('[bboxEast]', '180');\r\n            queryString = queryString.replace('[bboxNorth]', '90');\r\n\r\n            queryString = queryString.replace('[lookatLon]', '');\r\n            queryString = queryString.replace('[lookatLat]', '');\r\n            queryString = queryString.replace('[lookatRange]', '');\r\n            queryString = queryString.replace('[lookatTilt]', '');\r\n            queryString = queryString.replace('[lookatHeading]', '');\r\n            queryString = queryString.replace('[lookatTerrainLon]', '');\r\n            queryString = queryString.replace('[lookatTerrainLat]', '');\r\n            queryString = queryString.replace('[lookatTerrainAlt]', '');\r\n\r\n            queryString = queryString.replace('[cameraLon]', '');\r\n            queryString = queryString.replace('[cameraLat]', '');\r\n            queryString = queryString.replace('[cameraAlt]', '');\r\n            queryString = queryString.replace('[horizFov]', '');\r\n            queryString = queryString.replace('[vertFov]', '');\r\n        }\r\n\r\n        if (defined(canvas)) {\r\n            queryString = queryString.replace('[horizPixels]', canvas.clientWidth);\r\n            queryString = queryString.replace('[vertPixels]', canvas.clientHeight);\r\n        } else {\r\n            queryString = queryString.replace('[horizPixels]', '');\r\n            queryString = queryString.replace('[vertPixels]', '');\r\n        }\r\n\r\n        queryString = queryString.replace('[terrainEnabled]', '1');\r\n        queryString = queryString.replace('[clientVersion]', '1');\r\n        queryString = queryString.replace('[kmlVersion]', '2.2');\r\n        queryString = queryString.replace('[clientName]', 'Cesium');\r\n        queryString = queryString.replace('[language]', 'English');\r\n\r\n        resource.setQueryParameters(queryToObject(queryString));\r\n    }\r\n\r\n    function processNetworkLink(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        var r = processFeature(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n        var networkEntity = r.entity;\r\n\r\n        var link = queryFirstNode(node, 'Link', namespaces.kml);\r\n\r\n        if (!defined(link)) {\r\n            link = queryFirstNode(node, 'Url', namespaces.kml);\r\n        }\r\n        if (defined(link)) {\r\n            var href = queryStringValue(link, 'href', namespaces.kml);\r\n            var viewRefreshMode;\r\n            var viewBoundScale;\r\n            if (defined(href)) {\r\n                var newSourceUri = href;\r\n                href = resolveHref(href, sourceResource, uriResolver);\r\n\r\n                // We need to pass in the original path if resolveHref returns a data uri because the network link\r\n                //  references a document in a KMZ archive\r\n                if (/^data:/.test(href.getUrlComponent())) {\r\n                    // So if sourceUri isn't the kmz file, then its another kml in the archive, so resolve it\r\n                    if (!/\\.kmz/i.test(sourceResource.getUrlComponent())) {\r\n                        newSourceUri = sourceResource.getDerivedResource({\r\n                            url: newSourceUri\r\n                        });\r\n                    }\r\n                } else {\r\n                    newSourceUri = href.clone(); // Not a data uri so use the fully qualified uri\r\n                    viewRefreshMode = queryStringValue(link, 'viewRefreshMode', namespaces.kml);\r\n                    viewBoundScale = defaultValue(queryStringValue(link, 'viewBoundScale', namespaces.kml), 1.0);\r\n                    var defaultViewFormat = (viewRefreshMode === 'onStop') ? 'BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]' : '';\r\n                    var viewFormat = defaultValue(queryStringValue(link, 'viewFormat', namespaces.kml), defaultViewFormat);\r\n                    var httpQuery = queryStringValue(link, 'httpQuery', namespaces.kml);\r\n                    if (defined(viewFormat)) {\r\n                        href.setQueryParameters(queryToObject(cleanupString(viewFormat)));\r\n                    }\r\n                    if (defined(httpQuery)) {\r\n                        href.setQueryParameters(queryToObject(cleanupString(httpQuery)));\r\n                    }\r\n\r\n                    var ellipsoid = dataSource._ellipsoid;\r\n                    processNetworkLinkQueryString(href, dataSource._camera, dataSource._canvas, viewBoundScale, dataSource._lastCameraView.bbox, ellipsoid);\r\n                }\r\n\r\n                var options = {\r\n                    sourceUri : newSourceUri,\r\n                    uriResolver : uriResolver,\r\n                    context : networkEntity.id\r\n                };\r\n                var networkLinkCollection = new EntityCollection();\r\n                var promise = load(dataSource, networkLinkCollection, href, options).then(function(rootElement) {\r\n                    var entities = dataSource._entityCollection;\r\n                    var newEntities = networkLinkCollection.values;\r\n                    entities.suspendEvents();\r\n                    for (var i = 0; i < newEntities.length; i++) {\r\n                        var newEntity = newEntities[i];\r\n                        if (!defined(newEntity.parent)) {\r\n                            newEntity.parent = networkEntity;\r\n                            mergeAvailabilityWithParent(newEntity);\r\n                        }\r\n\r\n                        entities.add(newEntity);\r\n                    }\r\n                    entities.resumeEvents();\r\n\r\n                    // Add network links to a list if we need they will need to be updated\r\n                    var refreshMode = queryStringValue(link, 'refreshMode', namespaces.kml);\r\n                    var refreshInterval = defaultValue(queryNumericValue(link, 'refreshInterval', namespaces.kml), 0);\r\n                    if ((refreshMode === 'onInterval' && refreshInterval > 0 ) || (refreshMode === 'onExpire') || (viewRefreshMode === 'onStop')) {\r\n                        var networkLinkControl = queryFirstNode(rootElement, 'NetworkLinkControl', namespaces.kml);\r\n                        var hasNetworkLinkControl = defined(networkLinkControl);\r\n\r\n                        var now = JulianDate.now();\r\n                        var networkLinkInfo = {\r\n                            id : createGuid(),\r\n                            href : href,\r\n                            cookie : {},\r\n                            lastUpdated : now,\r\n                            updating : false,\r\n                            entity : networkEntity,\r\n                            viewBoundScale : viewBoundScale,\r\n                            needsUpdate : false,\r\n                            cameraUpdateTime : now\r\n                        };\r\n\r\n                        var minRefreshPeriod = 0;\r\n                        if (hasNetworkLinkControl) {\r\n                            networkLinkInfo.cookie = queryToObject(defaultValue(queryStringValue(networkLinkControl, 'cookie', namespaces.kml), ''));\r\n                            minRefreshPeriod = defaultValue(queryNumericValue(networkLinkControl, 'minRefreshPeriod', namespaces.kml), 0);\r\n                        }\r\n\r\n                        if (refreshMode === 'onInterval') {\r\n                            if (hasNetworkLinkControl) {\r\n                                refreshInterval = Math.max(minRefreshPeriod, refreshInterval);\r\n                            }\r\n                            networkLinkInfo.refreshMode = RefreshMode.INTERVAL;\r\n                            networkLinkInfo.time = refreshInterval;\r\n                        } else if (refreshMode === 'onExpire') {\r\n                            var expires;\r\n                            if (hasNetworkLinkControl) {\r\n                                expires = queryStringValue(networkLinkControl, 'expires', namespaces.kml);\r\n                            }\r\n                            if (defined(expires)) {\r\n                                try {\r\n                                    var date = JulianDate.fromIso8601(expires);\r\n                                    var diff = JulianDate.secondsDifference(date, now);\r\n                                    if (diff > 0 && diff < minRefreshPeriod) {\r\n                                        JulianDate.addSeconds(now, minRefreshPeriod, date);\r\n                                    }\r\n                                    networkLinkInfo.refreshMode = RefreshMode.EXPIRE;\r\n                                    networkLinkInfo.time = date;\r\n                                } catch (e) {\r\n                                    oneTimeWarning('kml-refreshMode-onInterval-onExpire', 'KML - NetworkLinkControl expires is not a valid date');\r\n                                }\r\n                            } else {\r\n                                oneTimeWarning('kml-refreshMode-onExpire', 'KML - refreshMode of onExpire requires the NetworkLinkControl to have an expires element');\r\n                            }\r\n                        } else if (dataSource._camera) { // Only allow onStop refreshes if we have a camera\r\n                            networkLinkInfo.refreshMode = RefreshMode.STOP;\r\n                            networkLinkInfo.time = defaultValue(queryNumericValue(link, 'viewRefreshTime', namespaces.kml), 0);\r\n                        } else {\r\n                            oneTimeWarning('kml-refrehMode-onStop-noCamera', 'A NetworkLink with viewRefreshMode=onStop requires a camera be passed in when creating the KmlDataSource');\r\n                        }\r\n\r\n                        if (defined(networkLinkInfo.refreshMode)) {\r\n                            dataSource._networkLinks.set(networkLinkInfo.id, networkLinkInfo);\r\n                        }\r\n                    } else if (viewRefreshMode === 'onRegion') {\r\n                        oneTimeWarning('kml-refrehMode-onRegion', 'KML - Unsupported viewRefreshMode: onRegion');\r\n                    }\r\n                }).otherwise(function(error) {\r\n                    oneTimeWarning('An error occured during loading ' + href.url);\r\n                    dataSource._error.raiseEvent(dataSource, error);\r\n                });\r\n\r\n                promises.push(promise);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processFeatureNode(dataSource, node, parent, entityCollection, styleCollection, sourceResource, uriResolver, promises, context) {\r\n        var featureProcessor = featureTypes[node.localName];\r\n        if (defined(featureProcessor)) {\r\n            featureProcessor(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n        } else {\r\n            processUnsupportedFeature(dataSource, parent, node, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n        }\r\n    }\r\n\r\n    function loadKml(dataSource, entityCollection, kml, sourceResource, uriResolver, context) {\r\n        entityCollection.removeAll();\r\n\r\n        var promises = [];\r\n        var documentElement = kml.documentElement;\r\n        var document = documentElement.localName === 'Document' ? documentElement : queryFirstNode(documentElement, 'Document', namespaces.kml);\r\n        var name = queryStringValue(document, 'name', namespaces.kml);\r\n        if (!defined(name)) {\r\n            name = getFilenameFromUri(sourceResource.getUrlComponent());\r\n        }\r\n\r\n        // Only set the name from the root document\r\n        if (!defined(dataSource._name)) {\r\n            dataSource._name = name;\r\n        }\r\n\r\n        var styleCollection = new EntityCollection(dataSource);\r\n        return when.all(processStyles(dataSource, kml, styleCollection, sourceResource, false, uriResolver)).then(function() {\r\n            var element = kml.documentElement;\r\n            if (element.localName === 'kml') {\r\n                var childNodes = element.childNodes;\r\n                for (var i = 0; i < childNodes.length; i++) {\r\n                    var tmp = childNodes[i];\r\n                    if (defined(featureTypes[tmp.localName])) {\r\n                        element = tmp;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            entityCollection.suspendEvents();\r\n            processFeatureNode(dataSource, element, undefined, entityCollection, styleCollection, sourceResource, uriResolver, promises, context);\r\n            entityCollection.resumeEvents();\r\n\r\n            return when.all(promises).then(function() {\r\n                return kml.documentElement;\r\n            });\r\n        });\r\n    }\r\n\r\n    function loadKmz(dataSource, entityCollection, blob, sourceResource) {\r\n        var deferred = when.defer();\r\n        zip.createReader(new zip.BlobReader(blob), function(reader) {\r\n            reader.getEntries(function(entries) {\r\n                var promises = [];\r\n                var uriResolver = {};\r\n                var docEntry;\r\n                var docDefer;\r\n                for (var i = 0; i < entries.length; i++) {\r\n                    var entry = entries[i];\r\n                    if (!entry.directory) {\r\n                        var innerDefer = when.defer();\r\n                        promises.push(innerDefer.promise);\r\n                        if (/\\.kml$/i.test(entry.filename)) {\r\n                            // We use the first KML document we come across\r\n                            //  https://developers.google.com/kml/documentation/kmzarchives\r\n                            // Unless we come across a .kml file at the root of the archive because GE does this\r\n                            if (!defined(docEntry) || !/\\//i.test(entry.filename)) {\r\n                                if (defined(docEntry)) {\r\n                                    // We found one at the root so load the initial kml as a data uri\r\n                                    loadDataUriFromZip(docEntry, uriResolver, docDefer);\r\n                                }\r\n                                docEntry = entry;\r\n                                docDefer = innerDefer;\r\n                            } else {\r\n                                // Wasn't the first kml and wasn't at the root\r\n                                loadDataUriFromZip(entry, uriResolver, innerDefer);\r\n                            }\r\n                        } else {\r\n                            loadDataUriFromZip(entry, uriResolver, innerDefer);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Now load the root KML document\r\n                if (defined(docEntry)) {\r\n                    loadXmlFromZip(docEntry, uriResolver, docDefer);\r\n                }\r\n                when.all(promises).then(function() {\r\n                    reader.close();\r\n                    if (!defined(uriResolver.kml)) {\r\n                        deferred.reject(new RuntimeError('KMZ file does not contain a KML document.'));\r\n                        return;\r\n                    }\r\n                    uriResolver.keys = Object.keys(uriResolver);\r\n                    return loadKml(dataSource, entityCollection, uriResolver.kml, sourceResource, uriResolver);\r\n                }).then(deferred.resolve).otherwise(deferred.reject);\r\n            });\r\n        }, function(e) {\r\n            deferred.reject(e);\r\n        });\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    function load(dataSource, entityCollection, data, options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var sourceUri = options.sourceUri;\r\n        var uriResolver = options.uriResolver;\r\n        var context = options.context;\r\n\r\n        var promise = data;\r\n        if (typeof data === 'string' || (data instanceof Resource)) {\r\n            data = Resource.createIfNeeded(data);\r\n            promise = data.fetchBlob();\r\n            sourceUri = defaultValue(sourceUri, data.clone());\r\n        } else {\r\n            sourceUri = defaultValue(sourceUri, Resource.DEFAULT.clone());\r\n        }\r\n\r\n        sourceUri = Resource.createIfNeeded(sourceUri);\r\n\r\n        return when(promise)\r\n            .then(function(dataToLoad) {\r\n                if (dataToLoad instanceof Blob) {\r\n                    return isZipFile(dataToLoad).then(function(isZip) {\r\n                        if (isZip) {\r\n                            return loadKmz(dataSource, entityCollection, dataToLoad, sourceUri);\r\n                        }\r\n                        return readBlobAsText(dataToLoad).then(function(text) {\r\n                            //There's no official way to validate if a parse was successful.\r\n                            //The following check detects the error on various browsers.\r\n\r\n                            //Insert missing namespaces\r\n                            text = insertNamespaces(text);\r\n\r\n                            //Remove Duplicate Namespaces\r\n                            text = removeDuplicateNamespaces(text);\r\n\r\n                            //IE raises an exception\r\n                            var kml;\r\n                            var error;\r\n                            try {\r\n                                kml = parser.parseFromString(text, 'application/xml');\r\n                            } catch (e) {\r\n                                error = e.toString();\r\n                            }\r\n\r\n                            //The parse succeeds on Chrome and Firefox, but the error\r\n                            //handling is different in each.\r\n                            if (defined(error) || kml.body || kml.documentElement.tagName === 'parsererror') {\r\n                                //Firefox has error information as the firstChild nodeValue.\r\n                                var msg = defined(error) ? error : kml.documentElement.firstChild.nodeValue;\r\n\r\n                                //Chrome has it in the body text.\r\n                                if (!msg) {\r\n                                    msg = kml.body.innerText;\r\n                                }\r\n\r\n                                //Return the error\r\n                                throw new RuntimeError(msg);\r\n                            }\r\n                            return loadKml(dataSource, entityCollection, kml, sourceUri, uriResolver, context);\r\n                        });\r\n                    });\r\n                }\r\n                return loadKml(dataSource, entityCollection, dataToLoad, sourceUri, uriResolver, context);\r\n            })\r\n            .otherwise(function(error) {\r\n                dataSource._error.raiseEvent(dataSource, error);\r\n                console.log(error);\r\n                return when.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * A {@link DataSource} which processes Keyhole Markup Language 2.2 (KML).\r\n     * <p>\r\n     * KML support in Cesium is incomplete, but a large amount of the standard,\r\n     * as well as Google's <code>gx</code> extension namespace, is supported. See Github issue\r\n     * {@link https://github.com/AnalyticalGraphicsInc/cesium/issues/873|#873} for a\r\n     * detailed list of what is and isn't support. Cesium will also write information to the\r\n     * console when it encounters most unsupported features.\r\n     * </p>\r\n     * <p>\r\n     * Non visual feature data, such as <code>atom:author</code> and <code>ExtendedData</code>\r\n     * is exposed via an instance of {@link KmlFeatureData}, which is added to each {@link Entity}\r\n     * under the <code>kml</code> property.\r\n     * </p>\r\n     *\r\n     * @alias KmlDataSource\r\n     * @constructor\r\n     *\r\n     * @param {Object} options An object with the following properties:\r\n     * @param {Camera} options.camera The camera that is used for viewRefreshModes and sending camera properties to network links.\r\n     * @param {Canvas} options.canvas The canvas that is used for sending viewer properties to network links.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The global ellipsoid used for geographical calculations.\r\n     *\r\n     * @see {@link http://www.opengeospatial.org/standards/kml/|Open Geospatial Consortium KML Standard}\r\n     * @see {@link https://developers.google.com/kml/|Google KML Documentation}\r\n     *\r\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=KML.html|Cesium Sandcastle KML Demo}\r\n     *\r\n     * @example\r\n     * var viewer = new Cesium.Viewer('cesiumContainer');\r\n     * viewer.dataSources.add(Cesium.KmlDataSource.load('../../SampleData/facilities.kmz',\r\n     *      {\r\n     *           camera: viewer.scene.camera,\r\n     *           canvas: viewer.scene.canvas\r\n     *      })\r\n     * );\r\n     */\r\n    function KmlDataSource(options) {\r\n        options = defaultValue(options, {});\r\n        var camera = options.camera;\r\n        var canvas = options.canvas;\r\n\r\n        \r\n\r\n        this._changed = new Event();\r\n        this._error = new Event();\r\n        this._loading = new Event();\r\n        this._refresh = new Event();\r\n        this._unsupportedNode = new Event();\r\n\r\n        this._clock = undefined;\r\n        this._entityCollection = new EntityCollection(this);\r\n        this._name = undefined;\r\n        this._isLoading = false;\r\n        this._pinBuilder = new PinBuilder();\r\n        this._networkLinks = new AssociativeArray();\r\n        this._entityCluster = new EntityCluster();\r\n\r\n        this._canvas = canvas;\r\n        this._camera = camera;\r\n        this._lastCameraView = {\r\n            position : defined(camera) ? Cartesian3.clone(camera.positionWC) : undefined,\r\n            direction : defined(camera) ? Cartesian3.clone(camera.directionWC) : undefined,\r\n            up : defined(camera) ? Cartesian3.clone(camera.upWC) : undefined,\r\n            bbox : defined(camera) ? camera.computeViewRectangle() : Rectangle.clone(Rectangle.MAX_VALUE)\r\n        };\r\n\r\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    }\r\n\r\n    /**\r\n     * Creates a Promise to a new instance loaded with the provided KML data.\r\n     *\r\n     * @param {Resource|String|Document|Blob} data A url, parsed KML document, or Blob containing binary KMZ data or a parsed KML document.\r\n     * @param {Object} options An object with the following properties:\r\n     * @param {Camera} options.camera The camera that is used for viewRefreshModes and sending camera properties to network links.\r\n     * @param {Canvas} options.canvas The canvas that is used for sending viewer properties to network links.\r\n     * @param {String} [options.sourceUri] Overrides the url to use for resolving relative links and other KML network features.\r\n     * @param {Boolean} [options.clampToGround=false] true if we want the geometry features (Polygons, LineStrings and LinearRings) clamped to the ground.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The global ellipsoid used for geographical calculations.\r\n     *\r\n     * @returns {Promise.<KmlDataSource>} A promise that will resolve to a new KmlDataSource instance once the KML is loaded.\r\n     */\r\n    KmlDataSource.load = function(data, options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var dataSource = new KmlDataSource(options);\r\n        return dataSource.load(data, options);\r\n    };\r\n\r\n    defineProperties(KmlDataSource.prototype, {\r\n        /**\r\n         * Gets or sets a human-readable name for this instance.\r\n         * This will be automatically be set to the KML document name on load.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {String}\r\n         */\r\n        name : {\r\n            get : function() {\r\n                return this._name;\r\n            },\r\n            set : function(value) {\r\n                if (this._name !== value) {\r\n                    this._name = value;\r\n                    this._changed.raiseEvent(this);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Gets the clock settings defined by the loaded KML. This represents the total\r\n         * availability interval for all time-dynamic data. If the KML does not contain\r\n         * time-dynamic data, this value is undefined.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {DataSourceClock}\r\n         */\r\n        clock : {\r\n            get : function() {\r\n                return this._clock;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the collection of {@link Entity} instances.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {EntityCollection}\r\n         */\r\n        entities : {\r\n            get : function() {\r\n                return this._entityCollection;\r\n            }\r\n        },\r\n        /**\r\n         * Gets a value indicating if the data source is currently loading data.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {Boolean}\r\n         */\r\n        isLoading : {\r\n            get : function() {\r\n                return this._isLoading;\r\n            }\r\n        },\r\n        /**\r\n         * Gets an event that will be raised when the underlying data changes.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {Event}\r\n         */\r\n        changedEvent : {\r\n            get : function() {\r\n                return this._changed;\r\n            }\r\n        },\r\n        /**\r\n         * Gets an event that will be raised if an error is encountered during processing.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {Event}\r\n         */\r\n        errorEvent : {\r\n            get : function() {\r\n                return this._error;\r\n            }\r\n        },\r\n        /**\r\n         * Gets an event that will be raised when the data source either starts or stops loading.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {Event}\r\n         */\r\n        loadingEvent : {\r\n            get : function() {\r\n                return this._loading;\r\n            }\r\n        },\r\n        /**\r\n         * Gets an event that will be raised when the data source refreshes a network link.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {Event}\r\n         */\r\n        refreshEvent : {\r\n            get : function() {\r\n                return this._refresh;\r\n            }\r\n        },\r\n        /**\r\n         * Gets an event that will be raised when the data source finds an unsupported node type.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {Event}\r\n         */\r\n        unsupportedNodeEvent : {\r\n            get : function() {\r\n                return this._unsupportedNode;\r\n            }\r\n        },\r\n        /**\r\n         * Gets whether or not this data source should be displayed.\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {Boolean}\r\n         */\r\n        show : {\r\n            get : function() {\r\n                return this._entityCollection.show;\r\n            },\r\n            set : function(value) {\r\n                this._entityCollection.show = value;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\r\n         *\r\n         * @memberof KmlDataSource.prototype\r\n         * @type {EntityCluster}\r\n         */\r\n        clustering : {\r\n            get : function() {\r\n                return this._entityCluster;\r\n            },\r\n            set : function(value) {\r\n                \r\n                this._entityCluster = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Asynchronously loads the provided KML data, replacing any existing data.\r\n     *\r\n     * @param {Resource|String|Document|Blob} data A url, parsed KML document, or Blob containing binary KMZ data or a parsed KML document.\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Resource|String} [options.sourceUri] Overrides the url to use for resolving relative links and other KML network features.\r\n     * @param {Boolean} [options.clampToGround=false] true if we want the geometry features (Polygons, LineStrings and LinearRings) clamped to the ground. If true, lines will use corridors so use Entity.corridor instead of Entity.polyline.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The global ellipsoid used for geographical calculations.\r\n     *\r\n     * @returns {Promise.<KmlDataSource>} A promise that will resolve to this instances once the KML is loaded.\r\n     */\r\n    KmlDataSource.prototype.load = function(data, options) {\r\n        \r\n\r\n        options = defaultValue(options, {});\r\n        DataSource.setLoading(this, true);\r\n\r\n        var oldName = this._name;\r\n        this._name = undefined;\r\n        this._clampToGround = defaultValue(options.clampToGround, false);\r\n\r\n        var that = this;\r\n        return load(this, this._entityCollection, data, options).then(function() {\r\n            var clock;\r\n\r\n            var availability = that._entityCollection.computeAvailability();\r\n\r\n            var start = availability.start;\r\n            var stop = availability.stop;\r\n            var isMinStart = JulianDate.equals(start, Iso8601.MINIMUM_VALUE);\r\n            var isMaxStop = JulianDate.equals(stop, Iso8601.MAXIMUM_VALUE);\r\n            if (!isMinStart || !isMaxStop) {\r\n                var date;\r\n\r\n                //If start is min time just start at midnight this morning, local time\r\n                if (isMinStart) {\r\n                    date = new Date();\r\n                    date.setHours(0, 0, 0, 0);\r\n                    start = JulianDate.fromDate(date);\r\n                }\r\n\r\n                //If stop is max value just stop at midnight tonight, local time\r\n                if (isMaxStop) {\r\n                    date = new Date();\r\n                    date.setHours(24, 0, 0, 0);\r\n                    stop = JulianDate.fromDate(date);\r\n                }\r\n\r\n                clock = new DataSourceClock();\r\n                clock.startTime = start;\r\n                clock.stopTime = stop;\r\n                clock.currentTime = JulianDate.clone(start);\r\n                clock.clockRange = ClockRange.LOOP_STOP;\r\n                clock.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\r\n                clock.multiplier = Math.round(Math.min(Math.max(JulianDate.secondsDifference(stop, start) / 60, 1), 3.15569e7));\r\n            }\r\n\r\n            var changed = false;\r\n            if (clock !== that._clock) {\r\n                that._clock = clock;\r\n                changed = true;\r\n            }\r\n\r\n            if (oldName !== that._name) {\r\n                changed = true;\r\n            }\r\n\r\n            if (changed) {\r\n                that._changed.raiseEvent(that);\r\n            }\r\n\r\n            DataSource.setLoading(that, false);\r\n\r\n            return that;\r\n        }).otherwise(function(error) {\r\n            DataSource.setLoading(that, false);\r\n            that._error.raiseEvent(that, error);\r\n            console.log(error);\r\n            return when.reject(error);\r\n        });\r\n    };\r\n\r\n    function mergeAvailabilityWithParent(child) {\r\n        var parent = child.parent;\r\n        if (defined(parent)) {\r\n            var parentAvailability = parent.availability;\r\n            if (defined(parentAvailability)) {\r\n                var childAvailability = child.availability;\r\n                if (defined(childAvailability)) {\r\n                    childAvailability.intersect(parentAvailability);\r\n                } else {\r\n                    child.availability = parentAvailability;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getNetworkLinkUpdateCallback(dataSource, networkLink, newEntityCollection, networkLinks, processedHref) {\r\n        return function(rootElement) {\r\n            if (!networkLinks.contains(networkLink.id)) {\r\n                // Got into the odd case where a parent network link was updated while a child\r\n                //  network link update was in flight, so just throw it away.\r\n                return;\r\n            }\r\n            var remove = false;\r\n            var networkLinkControl = queryFirstNode(rootElement, 'NetworkLinkControl', namespaces.kml);\r\n            var hasNetworkLinkControl = defined(networkLinkControl);\r\n\r\n            var minRefreshPeriod = 0;\r\n            if (hasNetworkLinkControl) {\r\n                if (defined(queryFirstNode(networkLinkControl, 'Update', namespaces.kml))) {\r\n                    oneTimeWarning('kml-networkLinkControl-update', 'KML - NetworkLinkControl updates aren\\'t supported.');\r\n                    networkLink.updating = false;\r\n                    networkLinks.remove(networkLink.id);\r\n                    return;\r\n                }\r\n                networkLink.cookie = queryToObject(defaultValue(queryStringValue(networkLinkControl, 'cookie', namespaces.kml), ''));\r\n                minRefreshPeriod = defaultValue(queryNumericValue(networkLinkControl, 'minRefreshPeriod', namespaces.kml), 0);\r\n            }\r\n\r\n            var now = JulianDate.now();\r\n            var refreshMode = networkLink.refreshMode;\r\n            if (refreshMode === RefreshMode.INTERVAL) {\r\n                if (defined(networkLinkControl)) {\r\n                    networkLink.time = Math.max(minRefreshPeriod, networkLink.time);\r\n                }\r\n            } else if (refreshMode === RefreshMode.EXPIRE) {\r\n                var expires;\r\n                if (defined(networkLinkControl)) {\r\n                    expires = queryStringValue(networkLinkControl, 'expires', namespaces.kml);\r\n                }\r\n                if (defined(expires)) {\r\n                    try {\r\n                        var date = JulianDate.fromIso8601(expires);\r\n                        var diff = JulianDate.secondsDifference(date, now);\r\n                        if (diff > 0 && diff < minRefreshPeriod) {\r\n                            JulianDate.addSeconds(now, minRefreshPeriod, date);\r\n                        }\r\n                        networkLink.time = date;\r\n                    } catch (e) {\r\n                        oneTimeWarning('kml-networkLinkControl-expires', 'KML - NetworkLinkControl expires is not a valid date');\r\n                        remove = true;\r\n                    }\r\n                } else {\r\n                    oneTimeWarning('kml-refreshMode-onExpire', 'KML - refreshMode of onExpire requires the NetworkLinkControl to have an expires element');\r\n                    remove = true;\r\n                }\r\n            }\r\n\r\n            var networkLinkEntity = networkLink.entity;\r\n            var entityCollection = dataSource._entityCollection;\r\n            var newEntities = newEntityCollection.values;\r\n\r\n            function removeChildren(entity) {\r\n                entityCollection.remove(entity);\r\n                var children = entity._children;\r\n                var count = children.length;\r\n                for (var i = 0; i < count; ++i) {\r\n                    removeChildren(children[i]);\r\n                }\r\n            }\r\n\r\n            // Remove old entities\r\n            entityCollection.suspendEvents();\r\n            var entitiesCopy = entityCollection.values.slice();\r\n            var i;\r\n            for (i = 0; i < entitiesCopy.length; ++i) {\r\n                var entityToRemove = entitiesCopy[i];\r\n                if (entityToRemove.parent === networkLinkEntity) {\r\n                    entityToRemove.parent = undefined;\r\n                    removeChildren(entityToRemove);\r\n                }\r\n            }\r\n            entityCollection.resumeEvents();\r\n\r\n            // Add new entities\r\n            entityCollection.suspendEvents();\r\n            for (i = 0; i < newEntities.length; i++) {\r\n                var newEntity = newEntities[i];\r\n                if (!defined(newEntity.parent)) {\r\n                    newEntity.parent = networkLinkEntity;\r\n                    mergeAvailabilityWithParent(newEntity);\r\n                }\r\n                entityCollection.add(newEntity);\r\n            }\r\n            entityCollection.resumeEvents();\r\n\r\n            // No refresh information remove it, otherwise update lastUpdate time\r\n            if (remove) {\r\n                networkLinks.remove(networkLink.id);\r\n            } else {\r\n                networkLink.lastUpdated = now;\r\n            }\r\n\r\n            var availability = entityCollection.computeAvailability();\r\n\r\n            var start = availability.start;\r\n            var stop = availability.stop;\r\n            var isMinStart = JulianDate.equals(start, Iso8601.MINIMUM_VALUE);\r\n            var isMaxStop = JulianDate.equals(stop, Iso8601.MAXIMUM_VALUE);\r\n            if (!isMinStart || !isMaxStop) {\r\n                var clock = dataSource._clock;\r\n\r\n                if (clock.startTime !== start || clock.stopTime !== stop) {\r\n                    clock.startTime = start;\r\n                    clock.stopTime = stop;\r\n                    dataSource._changed.raiseEvent(dataSource);\r\n                }\r\n            }\r\n\r\n            networkLink.updating = false;\r\n            networkLink.needsUpdate = false;\r\n            dataSource._refresh.raiseEvent(dataSource, processedHref.getUrlComponent(true));\r\n        };\r\n    }\r\n\r\n    var entitiesToIgnore = new AssociativeArray();\r\n\r\n    /**\r\n     * Updates any NetworkLink that require updating\r\n     * @function\r\n     *\r\n     * @param {JulianDate} time The simulation time.\r\n     * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\r\n     */\r\n    KmlDataSource.prototype.update = function(time) {\r\n        var networkLinks = this._networkLinks;\r\n        if (networkLinks.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        var now = JulianDate.now();\r\n        var that = this;\r\n\r\n        entitiesToIgnore.removeAll();\r\n\r\n        function recurseIgnoreEntities(entity) {\r\n            var children = entity._children;\r\n            var count = children.length;\r\n            for (var i = 0; i < count; ++i) {\r\n                var child = children[i];\r\n                entitiesToIgnore.set(child.id, child);\r\n                recurseIgnoreEntities(child);\r\n            }\r\n        }\r\n\r\n        var cameraViewUpdate = false;\r\n        var lastCameraView = this._lastCameraView;\r\n        var camera = this._camera;\r\n        if (defined(camera) &&\r\n            !(camera.positionWC.equalsEpsilon(lastCameraView.position, CesiumMath.EPSILON7) &&\r\n            camera.directionWC.equalsEpsilon(lastCameraView.direction, CesiumMath.EPSILON7) &&\r\n            camera.upWC.equalsEpsilon(lastCameraView.up, CesiumMath.EPSILON7))) {\r\n\r\n            // Camera has changed so update the last view\r\n            lastCameraView.position = Cartesian3.clone(camera.positionWC);\r\n            lastCameraView.direction = Cartesian3.clone(camera.directionWC);\r\n            lastCameraView.up = Cartesian3.clone(camera.upWC);\r\n            lastCameraView.bbox = camera.computeViewRectangle();\r\n            cameraViewUpdate = true;\r\n        }\r\n\r\n        var newNetworkLinks = new AssociativeArray();\r\n        var changed = false;\r\n        networkLinks.values.forEach(function(networkLink) {\r\n            var entity = networkLink.entity;\r\n            if (entitiesToIgnore.contains(entity.id)) {\r\n                return;\r\n            }\r\n\r\n            if (!networkLink.updating) {\r\n                var doUpdate = false;\r\n                if (networkLink.refreshMode === RefreshMode.INTERVAL) {\r\n                    if (JulianDate.secondsDifference(now, networkLink.lastUpdated) > networkLink.time) {\r\n                        doUpdate = true;\r\n                    }\r\n                }\r\n                else if (networkLink.refreshMode === RefreshMode.EXPIRE) {\r\n                    if (JulianDate.greaterThan(now, networkLink.time)) {\r\n                        doUpdate = true;\r\n                    }\r\n\r\n                } else if (networkLink.refreshMode === RefreshMode.STOP) {\r\n                    if (cameraViewUpdate) {\r\n                        networkLink.needsUpdate = true;\r\n                        networkLink.cameraUpdateTime = now;\r\n                    }\r\n\r\n                    if (networkLink.needsUpdate && JulianDate.secondsDifference(now, networkLink.cameraUpdateTime) >= networkLink.time) {\r\n                        doUpdate = true;\r\n                    }\r\n                }\r\n\r\n                if (doUpdate) {\r\n                    recurseIgnoreEntities(entity);\r\n                    networkLink.updating = true;\r\n                    var newEntityCollection = new EntityCollection();\r\n                    var href = networkLink.href.clone();\r\n\r\n                    href.setQueryParameters(networkLink.cookie);\r\n                    var ellipsoid = defaultValue(that._ellipsoid, Ellipsoid.WGS84);\r\n                    processNetworkLinkQueryString(href, that._camera, that._canvas, networkLink.viewBoundScale, lastCameraView.bbox, ellipsoid);\r\n\r\n                    load(that, newEntityCollection, href, {context : entity.id})\r\n                        .then(getNetworkLinkUpdateCallback(that, networkLink, newEntityCollection, newNetworkLinks, href))\r\n                        .otherwise(function(error) {\r\n                            var msg = 'NetworkLink ' + networkLink.href + ' refresh failed: ' + error;\r\n                            console.log(msg);\r\n                            that._error.raiseEvent(that, msg);\r\n                        });\r\n                    changed = true;\r\n                }\r\n            }\r\n            newNetworkLinks.set(networkLink.id, networkLink);\r\n        });\r\n\r\n        if (changed) {\r\n            this._networkLinks = newNetworkLinks;\r\n            this._changed.raiseEvent(this);\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Contains KML Feature data loaded into the <code>Entity.kml</code> property by {@link KmlDataSource}.\r\n     * @alias KmlFeatureData\r\n     * @constructor\r\n     */\r\n    function KmlFeatureData() {\r\n        /**\r\n         * Gets the atom syndication format author field.\r\n         * @type Object\r\n         */\r\n        this.author = {\r\n            /**\r\n             * Gets the name.\r\n             * @type String\r\n             * @alias author.name\r\n             * @memberof! KmlFeatureData#\r\n             * @property author.name\r\n             */\r\n            name : undefined,\r\n            /**\r\n             * Gets the URI.\r\n             * @type String\r\n             * @alias author.uri\r\n             * @memberof! KmlFeatureData#\r\n             * @property author.uri\r\n             */\r\n            uri : undefined,\r\n            /**\r\n             * Gets the email.\r\n             * @type String\r\n             * @alias author.email\r\n             * @memberof! KmlFeatureData#\r\n             * @property author.email\r\n             */\r\n            email : undefined\r\n        };\r\n\r\n        /**\r\n         * Gets the link.\r\n         * @type Object\r\n         */\r\n        this.link = {\r\n            /**\r\n             * Gets the href.\r\n             * @type String\r\n             * @alias link.href\r\n             * @memberof! KmlFeatureData#\r\n             * @property link.href\r\n             */\r\n            href : undefined,\r\n            /**\r\n             * Gets the language of the linked resource.\r\n             * @type String\r\n             * @alias link.hreflang\r\n             * @memberof! KmlFeatureData#\r\n             * @property link.hreflang\r\n             */\r\n            hreflang : undefined,\r\n            /**\r\n             * Gets the link relation.\r\n             * @type String\r\n             * @alias link.rel\r\n             * @memberof! KmlFeatureData#\r\n             * @property link.rel\r\n             */\r\n            rel : undefined,\r\n            /**\r\n             * Gets the link type.\r\n             * @type String\r\n             * @alias link.type\r\n             * @memberof! KmlFeatureData#\r\n             * @property link.type\r\n             */\r\n            type : undefined,\r\n            /**\r\n             * Gets the link title.\r\n             * @type String\r\n             * @alias link.title\r\n             * @memberof! KmlFeatureData#\r\n             * @property link.title\r\n             */\r\n            title : undefined,\r\n            /**\r\n             * Gets the link length.\r\n             * @type String\r\n             * @alias link.length\r\n             * @memberof! KmlFeatureData#\r\n             * @property link.length\r\n             */\r\n            length : undefined\r\n        };\r\n\r\n        /**\r\n         * Gets the unstructured address field.\r\n         * @type String\r\n         */\r\n        this.address = undefined;\r\n        /**\r\n         * Gets the phone number.\r\n         * @type String\r\n         */\r\n        this.phoneNumber = undefined;\r\n        /**\r\n         * Gets the snippet.\r\n         * @type String\r\n         */\r\n        this.snippet = undefined;\r\n        /**\r\n         * Gets the extended data, parsed into a JSON object.\r\n         * Currently only the <code>Data</code> property is supported.\r\n         * <code>SchemaData</code> and custom data are ignored.\r\n         * @type String\r\n         */\r\n        this.extendedData = undefined;\r\n    }\r\n\r\n    return KmlDataSource;\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/terriajs-cesium/Source/DataSources/KmlDataSource.js\n// module id = 813\n// module chunks = 0"],"sourceRoot":""}